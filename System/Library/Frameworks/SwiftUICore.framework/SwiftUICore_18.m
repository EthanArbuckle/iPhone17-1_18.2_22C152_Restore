Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SymbolVariants()
{
  Swift::UInt8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t key path setter for EnvironmentValues.symbolVariants : EnvironmentValues(__int16 *a1)
{
  __int16 v2 = *a1;
  return EnvironmentValues.symbolVariants.setter(&v2);
}

uint64_t sub_246049FA0(__int16 *a1)
{
  __int16 v2 = *a1;
  return EnvironmentValues.symbolVariants.setter(&v2);
}

uint64_t sub_246049FD8()
{
  return swift_deallocObject();
}

uint64_t (*EnvironmentValues.symbolVariants.modify(uint64_t a1))(uint64_t a1)
{
  v3 = (unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SymbolVariantsKey>();
    BloomFilter.init(hashValue:)(v5);
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v11);
    if (v7)
    {
      char v8 = *(unsigned char *)(v7 + 72);
      char v9 = *(unsigned char *)(v7 + 73);
    }
    else
    {
      char v8 = 0;
      char v9 = 3;
    }
    *(unsigned char *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 25) = v9;
  }
  swift_release_n();
  return EnvironmentValues.symbolVariants.modify;
}

uint64_t EnvironmentValues.symbolVariants.modify(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 24);
  v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.symbolBackgroundCornerRadius : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    char v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    char v6 = v8;
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t EnvironmentValues.symbolBackgroundCornerRadius.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolBackgroundCornerRadius.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    char v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    char v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  *((unsigned char *)v3 + 8) = v7 & 1;
  return EnvironmentValues.symbolBackgroundCornerRadius.modify;
}

void EnvironmentValues.symbolBackgroundCornerRadius.modify(uint64_t **a1)
{
  v1 = *a1;
  __int16 v2 = (uint64_t *)(*a1)[5];
  uint64_t v3 = **a1;
  char v4 = *((unsigned char *)*a1 + 8);
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t key path getter for EnvironmentValues.symbolsGrowToFitBackground : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.symbolsGrowToFitBackground.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.symbolsGrowToFitBackground.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.symbolsGrowToFitBackground.modify;
}

void EnvironmentValues.symbolsGrowToFitBackground.modify(uint64_t a1)
{
  v1 = *(void ***)a1;
  __int16 v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void type metadata accessor for EnvironmentPropertyKey<SymbolVariantsKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolVariantsKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SymbolVariants.Shape and conformance SymbolVariants.Shape()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Shape and conformance SymbolVariants.Shape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymbolVariants and conformance SymbolVariants()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants;
  if (!lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants and conformance SymbolVariants);
  }
  return result;
}

uint64_t sub_24604A8F4(uint64_t a1)
{
  return EnvironmentValues.symbolBackgroundCornerRadius.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_24604A928(char *a1)
{
  return EnvironmentValues.symbolsGrowToFitBackground.setter(*a1);
}

uint64_t sub_24604A9A0()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SymbolVariantsKey()
{
  return &type metadata for SymbolVariantsKey;
}

unint64_t lazy protocol witness table accessor for type SymbolVariants.Flags and conformance SymbolVariants.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags;
  if (!lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymbolVariants.Flags and conformance SymbolVariants.Flags);
  }
  return result;
}

uint64_t sub_24604AB7C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SymbolBackgroundCornerRadiusKey()
{
  return &type metadata for SymbolBackgroundCornerRadiusKey;
}

ValueMetadata *type metadata accessor for SymbolsGrowToFitBackgroundKey()
{
  return &type metadata for SymbolsGrowToFitBackgroundKey;
}

uint64_t View.appearanceAnimation<A>(animation:modifier:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a7;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  v21 = (char *)&v23 - v20;
  ((void (*)(uint64_t, void, double))a2)(v7, 0, v19);
  a2(v7, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v7, a3);
  AppearanceAnimationView.init(content:from:to:animation:)((uint64_t)v14, (uint64_t)v21, (uint64_t)v17, a1, a3, a4, v24);
  return swift_retain();
}

uint64_t AppearanceAnimationView.init(content:from:to:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7, a1, a5);
  uint64_t v12 = (int *)type metadata accessor for AppearanceAnimationView();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);
  v13(a7 + v12[13], a2, a6);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a7 + v12[14], a3, a6);
  *(void *)(a7 + v12[15]) = a4;
  return result;
}

uint64_t AppearanceAnimationView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v6[3];
  uint64_t v22 = v6[2];
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[5];
  uint64_t v25 = v22;
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v28 = v9;
  uint64_t v10 = type metadata accessor for AppearanceAnimationView.NormalBody();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v5, v23, a1, v15);
  AppearanceAnimationView.NormalBody.init(view:)((uint64_t)v5, v22, v7, v8, v9, (uint64_t)v13);
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13, v10, WitnessTable);
  double v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17, v10, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t type metadata accessor for AppearanceAnimationView.NormalBody()
{
  return swift_getGenericMetadata();
}

uint64_t AppearanceAnimationView.NormalBody.init(view:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8 = property wrapper backing initializer of AppearanceAnimationView.NormalBody.state(0, a2, a3, a4, a5);
  *(_DWORD *)a6 = v8;
  *(unsigned char *)(a6 + 4) = BYTE4(v8) & 1;
  *(void *)(a6 + 8) = v9;
  uint64_t v10 = a6 + *(int *)(type metadata accessor for AppearanceAnimationView.NormalBody() + 52);
  uint64_t v11 = type metadata accessor for AppearanceAnimationView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a1, v11);
}

uint64_t property wrapper backing initializer of AppearanceAnimationView.NormalBody.state(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = a1;
  char v10 = BYTE4(a1) & 1;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v5 = type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
  State.init(wrappedValue:)((uint64_t)&v9, v5, (uint64_t)v8);
  uint64_t v6 = 0x100000000;
  if (!BYTE4(v8[0])) {
    uint64_t v6 = 0;
  }
  return v6 | LODWORD(v8[0]);
}

uint64_t AppearanceAnimationView.NormalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v60 = a1;
  uint64_t v3 = a1 - 8;
  uint64_t v58 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  v64 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v4;
  MEMORY[0x270FA5388](v5);
  v61 = (char *)&v55 - v6;
  uint64_t v7 = *(uint64_t (**)())(v3 + 32);
  uint64_t v56 = *((void *)v7 - 1);
  MEMORY[0x270FA5388](v8);
  v57 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *(uint64_t (**)())(v3 + 48);
  v79 = v7;
  v80 = (void *)MEMORY[0x263F8E8F8];
  v81 = v10;
  v82 = (uint64_t (*)())MEMORY[0x263F8E908];
  uint64_t v11 = type metadata accessor for IDView();
  uint64_t v65 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (uint64_t)&v55 - v12;
  uint64_t v66 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v68 = v14;
  MEMORY[0x270FA5388](v14);
  v62 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  v63 = (char *)&v55 - v17;
  int v18 = *v2;
  char v19 = *((unsigned char *)v2 + 4);
  uint64_t v20 = v2;
  uint64_t v21 = (void *)*((void *)v2 + 1);
  int v76 = *v2;
  char v77 = v19;
  uint64_t v22 = *(uint64_t (**)())(v3 + 24);
  v70 = *(uint64_t (**)())(v3 + 40);
  v71 = v22;
  v78 = v21;
  v79 = v22;
  uint64_t v23 = (uint64_t)v7;
  v80 = v7;
  v81 = v70;
  v73 = v10;
  v82 = v10;
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
  uint64_t v24 = type metadata accessor for State();
  State.wrappedValue.getter(v24, (uint64_t)&v79);
  uint64_t v25 = *(int *)(v3 + 60);
  if (BYTE4(v79) == 1)
  {
    v79 = v71;
    v80 = (void *)v23;
    v81 = v70;
    v82 = v73;
    uint64_t v26 = type metadata accessor for AppearanceAnimationView();
    uint64_t v27 = 14;
  }
  else
  {
    v79 = v71;
    v80 = (void *)v23;
    v81 = v70;
    v82 = v73;
    uint64_t v26 = type metadata accessor for AppearanceAnimationView();
    uint64_t v27 = 13;
  }
  uint64_t v28 = v56;
  v29 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v57, (uint64_t)v20 + v25 + *(int *)(v26 + 4 * v27), v23);
  LODWORD(v79) = v18;
  BYTE4(v79) = v19;
  v80 = v21;
  State.wrappedValue.getter(v24, (uint64_t)&v76);
  LODWORD(v79) = v76;
  View.id<A>(_:)((uint64_t)&v79, v23, MEMORY[0x263F8E8F8], v72);
  v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v31 = v23;
  uint64_t v55 = v23;
  v30(v29, v23);
  uint64_t v32 = v58;
  v57 = *(char **)(v58 + 16);
  v33 = v61;
  v34 = v20;
  v35 = v20;
  uint64_t v36 = v60;
  ((void (*)(char *, int *, uint64_t))v57)(v61, v35, v60);
  uint64_t v37 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v38 = (v37 + 48) & ~v37;
  uint64_t v56 = v38 + v59;
  uint64_t v59 = v37 | 7;
  v39 = (void *)swift_allocObject();
  v40 = v71;
  v39[2] = v71;
  v39[3] = v31;
  v41 = v70;
  v42 = v73;
  v39[4] = v70;
  v39[5] = v42;
  uint64_t v58 = *(void *)(v32 + 32);
  ((void (*)(char *, char *, uint64_t))v58)((char *)v39 + v38, v33, v36);
  v43 = v64;
  ((void (*)(char *, int *, uint64_t))v57)(v64, v34, v36);
  v44 = (uint64_t (*)())swift_allocObject();
  uint64_t v45 = v55;
  *((void *)v44 + 2) = v40;
  *((void *)v44 + 3) = v45;
  v46 = v73;
  *((void *)v44 + 4) = v41;
  *((void *)v44 + 5) = v46;
  ((void (*)(char *, char *, uint64_t))v58)((char *)v44 + v38, v43, v36);
  v79 = partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter;
  v80 = v39;
  v81 = partial apply for closure #2 in AppearanceAnimationView.NormalBody.body.getter;
  v82 = v44;
  v47 = v62;
  uint64_t v48 = v66;
  uint64_t v49 = v72;
  View.modifier<A>(_:)(&v79, v66, &type metadata for _AppearanceActionModifier);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v49, v48);
  v74 = &protocol witness table for IDView<A, B>;
  v75 = &protocol witness table for _AppearanceActionModifier;
  uint64_t v50 = v68;
  uint64_t WitnessTable = swift_getWitnessTable();
  v52 = v63;
  static ViewBuilder.buildExpression<A>(_:)(v47, v50, WitnessTable);
  v53 = *(void (**)(char *, uint64_t))(v67 + 8);
  v53(v47, v50);
  static ViewBuilder.buildExpression<A>(_:)(v52, v50, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v53)(v52, v50);
}

uint64_t closure #1 in AppearanceAnimationView.NormalBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v9 = a1 + *(int *)(type metadata accessor for AppearanceAnimationView.NormalBody() + 52);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v10 = *(void *)(v9 + *(int *)(type metadata accessor for AppearanceAnimationView() + 60));
  uint64_t v13 = 0;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(&v13, v10);
  swift_release_n();
  uint64_t v11 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v11, (void (*)(void *))partial apply for closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter);
  return swift_release_n();
}

uint64_t closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 8);
  swift_retain();
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
  uint64_t v1 = type metadata accessor for State();
  State.wrappedValue.getter(v1, (uint64_t)&v6);
  int v3 = v6;
  BOOL v4 = (v7 & 1) == 0;
  specialized State.wrappedValue.setter((uint64_t)&v3, v1);
  return swift_release();
}

uint64_t closure #2 in AppearanceAnimationView.NormalBody.body.getter(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 + 8);
  swift_retain();
  type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState();
  uint64_t v1 = type metadata accessor for State();
  State.wrappedValue.getter(v1, (uint64_t)&v6);
  int v3 = v6;
  char v4 = 0;
  specialized State.wrappedValue.setter((uint64_t)&v3, v1);
  swift_release();
  swift_retain();
  State.wrappedValue.getter(v1, (uint64_t)&v3);
  int v6 = v3 + 1;
  char v7 = v4;
  specialized State.wrappedValue.setter((uint64_t)&v6, v1);
  return swift_release();
}

uint64_t AppearanceAnimationView.displayListAnimation.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  v183 = a2;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v157 = type metadata accessor for Optional();
  uint64_t v156 = *(void *)(v157 - 8);
  MEMORY[0x270FA5388](v157);
  v152 = (char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v160 = (char *)&v146 - v8;
  uint64_t v172 = v5;
  uint64_t v164 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v9);
  v148 = (char *)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v153 = (char *)&v146 - v12;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v163 = type metadata accessor for Optional();
  uint64_t v162 = *(void *)(v163 - 8);
  MEMORY[0x270FA5388](v163);
  v155 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v170 = (char *)&v146 - v16;
  uint64_t v179 = v13;
  uint64_t v171 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v17);
  v149 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v166 = (char *)&v146 - v20;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v169 = type metadata accessor for Optional();
  uint64_t v168 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  v159 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v176 = v21;
  v177 = (char *)&v146 - v24;
  *(void *)&long long v186 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v25);
  v150 = (char *)&v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v178 = (char *)&v146 - v28;
  uint64_t v29 = type metadata accessor for ModifiedContent();
  uint64_t v30 = type metadata accessor for Optional();
  uint64_t v174 = *(void *)(v30 - 8);
  uint64_t v175 = v30;
  MEMORY[0x270FA5388](v30);
  v182 = (char *)&v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v34 = (char *)&v146 - v33;
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v37);
  v151 = (char *)&v146 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  v161 = (char *)&v146 - v40;
  MEMORY[0x270FA5388](v41);
  v154 = (char *)&v146 - v42;
  MEMORY[0x270FA5388](v43);
  v167 = (char *)&v146 - v44;
  MEMORY[0x270FA5388](v45);
  v158 = (char *)&v146 - v46;
  MEMORY[0x270FA5388](v47);
  v173 = (char *)&v146 - v48;
  MEMORY[0x270FA5388](v49);
  v165 = (char *)&v146 - v50;
  MEMORY[0x270FA5388](v51);
  v53 = (char *)&v146 - v52;
  uint64_t v54 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v55);
  v57 = (char *)&v146 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v59 = MEMORY[0x270FA5388](v58);
  v180 = (char *)&v146 - v60;
  uint64_t v61 = a1;
  uint64_t v62 = *(int *)(a1 + 52);
  uint64_t v63 = v3;
  uint64_t v64 = v3 + v62;
  uint64_t v65 = *(void (**)(char *, double))(v36 + 16);
  *(void *)&long long v184 = v64;
  v65(v53, v59);
  char v66 = swift_dynamicCast();
  uint64_t v181 = v54;
  uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
  uint64_t v187 = v61;
  uint64_t v185 = v63;
  if (v66)
  {
    v147 = v57;
    v67(v34, 0, 1, v29);
    v146 = *(void (**)(char *, char *, uint64_t))(v181 + 32);
    v146(v180, v34, v29);
    ((void (*)(char *, uint64_t, uint64_t))v65)(v165, v63 + *(int *)(v61 + 56), v35);
    if (swift_dynamicCast())
    {
      uint64_t v68 = v182;
      v67(v182, 0, 1, v29);
      uint64_t v69 = v147;
      v146(v147, v68, v29);
      uint64_t v70 = *(int *)(v29 + 36);
      uint64_t v72 = v180;
      uint64_t v71 = v181;
      uint64_t v73 = *(void *)&v180[v70];
      uint64_t v74 = *(void *)&v69[v70];
      uint64_t v75 = *(void *)(v63 + *(int *)(v61 + 60));
      int v76 = v183;
      v183[3] = &type metadata for DisplayList.OpacityAnimation;
      v76[4] = &protocol witness table for DisplayList.OpacityAnimation;
      *int v76 = v73;
      v76[1] = v74;
      v76[2] = v75;
      char v77 = *(void (**)(char *, uint64_t))(v71 + 8);
      swift_retain();
      v77(v69, v29);
      return ((uint64_t (*)(char *, uint64_t))v77)(v72, v29);
    }
    v79 = (char *)v65;
    v34 = v182;
    v67(v182, 1, 1, v29);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v180, v29);
  }
  else
  {
    v79 = (char *)v65;
    v67(v34, 1, 1, v29);
  }
  uint64_t v80 = v179;
  uint64_t v81 = v176;
  uint64_t v82 = v186;
  uint64_t v83 = v184;
  v84 = v173;
  (*(void (**)(char *, uint64_t))(v174 + 8))(v34, v175);
  v85 = v79;
  ((void (*)(char *, uint64_t, uint64_t))v79)(v84, v83, v35);
  v86 = v177;
  char v87 = swift_dynamicCast();
  v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
  if (v87)
  {
    v88(v86, 0, 1, v81);
    uint64_t v181 = *(void *)(v82 + 32);
    ((void (*)(char *, char *, uint64_t))v181)(v178, v86, v81);
    uint64_t v89 = v187;
    uint64_t v90 = v185;
    uint64_t v91 = v185 + *(int *)(v187 + 56);
    v182 = v79;
    ((void (*)(char *, uint64_t, uint64_t))v79)(v158, v91, v35);
    v92 = v159;
    if (swift_dynamicCast())
    {
      v88(v92, 0, 1, v81);
      v93 = v92;
      v94 = v150;
      ((void (*)(char *, char *, uint64_t))v181)(v150, v93, v81);
      uint64_t v95 = *(int *)(v81 + 36);
      v96 = v178;
      uint64_t v97 = *(void *)&v178[v95];
      uint64_t v98 = *(void *)&v178[v95 + 8];
      v99 = &v94[v95];
      uint64_t v100 = *(void *)v99;
      uint64_t v101 = *((void *)v99 + 1);
      uint64_t v102 = *(void *)(v90 + *(int *)(v89 + 60));
      v103 = v183;
      v183[3] = &type metadata for DisplayList.OffsetAnimation;
      v103[4] = &protocol witness table for DisplayList.OffsetAnimation;
      v104 = (void *)swift_allocObject();
      void *v103 = v104;
      v104[2] = v97;
      v104[3] = v98;
      v104[4] = v100;
      v104[5] = v101;
      v104[6] = v102;
      v105 = *(void (**)(char *, uint64_t))(v186 + 8);
      swift_retain();
      v105(v94, v81);
      return ((uint64_t (*)(char *, uint64_t))v105)(v96, v81);
    }
    v88(v92, 1, 1, v81);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v178, v81);
    v106 = v92;
    uint64_t v80 = v179;
    v85 = v182;
    uint64_t v83 = v184;
  }
  else
  {
    v88(v86, 1, 1, v81);
    v106 = v86;
  }
  (*(void (**)(char *, uint64_t))(v168 + 8))(v106, v169);
  ((void (*)(char *, uint64_t, uint64_t))v85)(v167, v83, v35);
  v107 = v170;
  char v108 = swift_dynamicCast();
  uint64_t v109 = v171;
  v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56);
  uint64_t v111 = v172;
  if (v108)
  {
    v110(v107, 0, 1, v80);
    *(void *)&long long v186 = *(void *)(v109 + 32);
    ((void (*)(char *, char *, uint64_t))v186)(v166, v107, v80);
    uint64_t v112 = v185 + *(int *)(v187 + 56);
    v182 = v85;
    ((void (*)(char *, uint64_t, uint64_t))v85)(v154, v112, v35);
    v113 = v155;
    if (swift_dynamicCast())
    {
      v110(v113, 0, 1, v80);
      v114 = v149;
      ((void (*)(char *, char *, uint64_t))v186)(v149, v113, v80);
      uint64_t v115 = *(int *)(v80 + 36);
      v116 = v166;
      long long v186 = *(_OWORD *)&v166[v115];
      uint64_t v117 = *(void *)&v166[v115 + 16];
      uint64_t v118 = *(void *)&v166[v115 + 24];
      v119 = &v114[v115];
      long long v184 = *(_OWORD *)v119;
      uint64_t v120 = *((void *)v119 + 2);
      uint64_t v121 = *((void *)v119 + 3);
      uint64_t v122 = *(void *)(v185 + *(int *)(v187 + 60));
      v123 = v183;
      v183[3] = &type metadata for DisplayList.ScaleAnimation;
      v123[4] = (uint64_t)&protocol witness table for DisplayList.ScaleAnimation;
      uint64_t v124 = swift_allocObject();
      uint64_t *v123 = v124;
      *(_OWORD *)(v124 + 16) = v186;
      *(void *)(v124 + 32) = v117;
      *(void *)(v124 + 40) = v118;
      *(_OWORD *)(v124 + 48) = v184;
      *(void *)(v124 + 64) = v120;
      *(void *)(v124 + 72) = v121;
      *(void *)(v124 + 80) = v122;
      v125 = *(void (**)(char *, uint64_t))(v109 + 8);
      swift_retain();
      v125(v114, v80);
      return ((uint64_t (*)(char *, uint64_t))v125)(v116, v80);
    }
    v110(v113, 1, 1, v80);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v166, v80);
    v126 = v113;
    v85 = v182;
    uint64_t v83 = v184;
    v127 = v160;
    uint64_t v111 = v172;
  }
  else
  {
    v110(v107, 1, 1, v80);
    v126 = v107;
    v127 = v160;
  }
  (*(void (**)(char *, uint64_t))(v162 + 8))(v126, v163);
  ((void (*)(char *, uint64_t, uint64_t))v85)(v161, v83, v35);
  char v128 = swift_dynamicCast();
  uint64_t v129 = v164;
  v130 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56);
  uint64_t v131 = v187;
  if (v128)
  {
    v130(v127, 0, 1, v111);
    v132 = v127;
    v133 = v153;
    *(void *)&long long v186 = *(void *)(v129 + 32);
    ((void (*)(char *, char *, uint64_t))v186)(v153, v132, v111);
    ((void (*)(char *, uint64_t, uint64_t))v85)(v151, v185 + *(int *)(v131 + 56), v35);
    v134 = v133;
    v127 = v152;
    if (swift_dynamicCast())
    {
      v130(v127, 0, 1, v111);
      v135 = v127;
      v136 = v148;
      ((void (*)(char *, char *, uint64_t))v186)(v148, v135, v111);
      uint64_t v137 = *(int *)(v111 + 36);
      long long v186 = *(_OWORD *)&v134[v137];
      uint64_t v138 = *(void *)&v134[v137 + 16];
      v139 = &v136[v137];
      long long v184 = *(_OWORD *)v139;
      uint64_t v140 = *((void *)v139 + 2);
      uint64_t v141 = *(void *)(v185 + *(int *)(v187 + 60));
      v142 = v183;
      v183[3] = &type metadata for DisplayList.RotationAnimation;
      v142[4] = (uint64_t)&protocol witness table for DisplayList.RotationAnimation;
      uint64_t v143 = swift_allocObject();
      uint64_t *v142 = v143;
      *(_OWORD *)(v143 + 16) = v186;
      *(void *)(v143 + 32) = v138;
      *(_OWORD *)(v143 + 40) = v184;
      *(void *)(v143 + 56) = v140;
      *(void *)(v143 + 64) = v141;
      v144 = *(void (**)(char *, uint64_t))(v129 + 8);
      swift_retain();
      v144(v136, v111);
      return ((uint64_t (*)(char *, uint64_t))v144)(v134, v111);
    }
    v130(v127, 1, 1, v111);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v134, v111);
  }
  else
  {
    v130(v127, 1, 1, v111);
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v156 + 8))(v127, v157);
  v145 = v183;
  v183[4] = 0;
  _OWORD *v145 = 0u;
  v145[1] = 0u;
  return result;
}

uint64_t AppearanceAnimationView.archivedBody.getter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v16 = v2;
  v20[0] = v15;
  v20[1] = v2;
  uint64_t v3 = type metadata accessor for AppearanceAnimationView.AnimationEffect();
  uint64_t v4 = v15;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - v10;
  AppearanceAnimationView.displayListAnimation.getter(a1, v19);
  outlined init with take of _DisplayList_AnyEffectAnimation?((uint64_t)v19, (uint64_t)v20);
  View.modifier<A>(_:)(v20, v4, v3);
  (*(void (**)(_OWORD *, uint64_t))(*(void *)(v3 - 8) + 8))(v20, v3);
  uint64_t v17 = v16;
  uint64_t v18 = &protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8, v5, WitnessTable);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11, v5, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, v5);
}

uint64_t type metadata accessor for AppearanceAnimationView.AnimationEffect()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in AppearanceAnimationView<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t AppearanceAnimationView.AnimationEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of _DisplayList_AnyEffectAnimation?(v1, (uint64_t)&v6);
  if (v7)
  {
    outlined init with take of ScrollStateRequest(&v6, (uint64_t)v8);
    uint64_t v3 = swift_allocObject();
    uint64_t result = outlined init with take of ScrollStateRequest(v8, v3 + 16);
    char v5 = 10;
  }
  else
  {
    uint64_t result = outlined destroy of _DisplayList_AnyEffectAnimation?((uint64_t)&v6);
    uint64_t v3 = 0;
    char v5 = 19;
  }
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v5;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AppearanceAnimationView<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AppearanceAnimationView<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t type metadata completion function for AppearanceAnimationView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AppearanceAnimationView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = v11 + 7;
  unint64_t v14 = ((v11 + 7 + ((v11 + v9 + ((v6 + v9) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v15 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
  }
  else
  {
    uint64_t v19 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v20 = ((unint64_t)v4 + v10) & v19;
    unint64_t v21 = ((unint64_t)a2 + v10) & v19;
    uint64_t v22 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v22(v20, v21, v7);
    unint64_t v23 = (v12 + v20) & v19;
    unint64_t v24 = (v12 + v21) & v19;
    v22(v23, v24, v7);
    *(void *)((v13 + v23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v24) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AppearanceAnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v5 + v10) & ~v10;
  v8(v11, v6);
  v8((*(void *)(v9 + 56) + v10 + v11) & ~v10, v6);

  return swift_release();
}

uint64_t initializeWithCopy for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v6 + 48) + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 48);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  *(void *)((v15 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  uint64_t v10 = v8 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v6 + 40) + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 40);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  *(void *)((v15 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v6 + 32) + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  *(void *)((v15 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AppearanceAnimationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v6 + 24) + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  v9(v13, v14, v7);
  uint64_t v15 = *(void *)(v10 + 24);
  uint64_t v16 = (v15 + v11 + v13) & ~v11;
  uint64_t v17 = (v15 + v11 + v14) & ~v11;
  v9(v16, v17, v7);
  *(void *)((v15 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceAnimationView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v13 = v10 + v9;
  uint64_t v14 = v10 + 7;
  if (v11 < a2)
  {
    unint64_t v15 = ((v14 + ((v13 + (v12 & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24604D8D0);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v11) {
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v14 + ((v13 + v23) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void storeEnumTagSinglePayload for AppearanceAnimationView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = v12 + v11;
  uint64_t v17 = (v12 + v11 + v15) & ~v11;
  uint64_t v18 = v12 + 7;
  size_t v19 = ((v18 + v17) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v13 >= a3)
  {
    int v23 = 0;
    int v24 = a2 - v13;
    if (a2 <= v13)
    {
LABEL_19:
      uint64_t v25 = ~v11;
      switch(v23)
      {
        case 1:
          a1[v19] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v19] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v19] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v13)
            {
              uint64_t v28 = *(void (**)(void))(v6 + 56);
              v28();
            }
            else
            {
              unint64_t v29 = (unint64_t)&a1[v14] & v25;
              if (v9 == v13)
              {
                uint64_t v30 = *(void (**)(unint64_t))(v8 + 56);
                v30(v29);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v31 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v31 = a2 - 1;
                }
                *(void *)((v18 + ((v16 + v29) & v25)) & 0xFFFFFFFFFFFFFFF8) = v31;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v20 = a3 - v13;
    if (((v18 + v17) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v21 = v20 + 1;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    int v24 = a2 - v13;
    if (a2 <= v13) {
      goto LABEL_19;
    }
  }
  if (v19) {
    int v26 = 1;
  }
  else {
    int v26 = v24;
  }
  if (v19)
  {
    int v27 = ~v13 + a2;
    bzero(a1, v19);
    *(_DWORD *)a1 = v27;
  }
  switch(v23)
  {
    case 1:
      a1[v19] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v19] = v26;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x24604DB8CLL);
    case 4:
      *(_DWORD *)&a1[v19] = v26;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for AppearanceAnimationView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24604DBCC(_OWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for AppearanceAnimationView);
}

uint64_t sub_24604DBF8(_OWORD *a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for AppearanceAnimationView.NormalBody);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA019AppearanceAnimationC0Vyxqd__GAaBHPyHCTm(_OWORD *a1, void (*a2)(uint64_t, _OWORD *))
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  a2(255, v4);
  return swift_getWitnessTable();
}

uint64_t sub_24604DC74()
{
  return swift_getWitnessTable();
}

uint64_t destroy for AppearanceAnimationView.AnimationEffect(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t type metadata completion function for AppearanceAnimationView.NormalBody()
{
  uint64_t result = type metadata accessor for AppearanceAnimationView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  unsigned int v9 = *(_DWORD *)(v6 + 80) & 0xF8 | v8;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = *(void *)(v6 + 64) + v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v13 + v8;
  uint64_t v15 = v13 + 7;
  if (v9 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0
    || v11 + ((v13 + 7 + ((v13 + v8 + (v12 & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v18 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v18 + v11);
  }
  else
  {
    uint64_t v19 = ~v8;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
    *(void *)(a1 + 8) = a2[1];
    uint64_t v20 = (a1 + 23) & ~v10;
    uint64_t v21 = ((unint64_t)a2 + 23) & ~v10;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v29 = v4;
    swift_retain();
    v28(v20, v21, v5);
    uint64_t v22 = (v12 + v20) & v19;
    uint64_t v23 = (v12 + v21) & v19;
    int v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v24(v22, v23, v29);
    uint64_t v25 = (v14 + v22) & v19;
    uint64_t v26 = (v14 + v23) & v19;
    v24(v25, v26, v29);
    *(void *)((v15 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + v26) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (a1 + (*(_DWORD *)(v6 + 80) & 0xF8 | v9 | 7) + 16) & ~(unint64_t)(*(_DWORD *)(v6 + 80) & 0xF8 | v9 | 7);
  (*(void (**)(unint64_t))(v6 + 8))(v10);
  unint64_t v11 = (*(void *)(v7 + 56) + v9 + v10) & ~v9;
  uint64_t v12 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v12(v11, v5);
  v12((*(void *)(v8 + 64) + v9 + v11) & ~v9, v5);

  return swift_release();
}

uint64_t initializeWithCopy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(_DWORD *)(v6 + 80) & 0xF8 | v10 | 7;
  uint64_t v12 = (v11 + 16 + a1) & ~v11;
  uint64_t v13 = (v11 + 16 + a2) & ~v11;
  swift_retain();
  v7(v12, v13, v4);
  uint64_t v14 = *(void *)(v8 + 48) + v10;
  uint64_t v15 = (v14 + v12) & ~v10;
  uint64_t v16 = (v14 + v13) & ~v10;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v17(v15, v16, v5);
  uint64_t v18 = *(void *)(v9 + 64);
  uint64_t v19 = (v18 + v10 + v15) & ~v10;
  uint64_t v20 = (v18 + v10 + v16) & ~v10;
  v17(v19, v20, v5);
  *(void *)((v18 + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v18 + 7 + v20) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(_DWORD *)(v8 + 80) & 0xF8 | v11 | 7;
  uint64_t v13 = (v12 + 16 + a1) & ~v12;
  uint64_t v14 = (v12 + 16 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v9 + 40) + v11;
  uint64_t v16 = (v15 + v13) & ~v11;
  uint64_t v17 = (v15 + v14) & ~v11;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v18(v16, v17, v7);
  uint64_t v19 = *(void *)(v10 + 64);
  uint64_t v20 = (v19 + v11 + v16) & ~v11;
  uint64_t v21 = (v19 + v11 + v17) & ~v11;
  v18(v20, v21, v7);
  *(void *)((v19 + 7 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v19 + 7 + v21) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for AppearanceAnimationView.NormalBody(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(_DWORD *)(v5 + 80) & 0xF8 | v8 | 7;
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, void))(v5 + 32))(v10, v11, *(void *)(a3 + 16));
  uint64_t v12 = *(void *)(v6 + 32) + v8;
  uint64_t v13 = (v12 + v10) & ~v8;
  uint64_t v14 = (v12 + v11) & ~v8;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v15(v13, v14, v4);
  uint64_t v16 = *(void *)(v7 + 64);
  uint64_t v17 = (v16 + v8 + v13) & ~v8;
  uint64_t v18 = (v16 + v8 + v14) & ~v8;
  v15(v17, v18, v4);
  *(void *)((v16 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v16 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AppearanceAnimationView.NormalBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(_DWORD *)(v8 + 80) & 0xF8 | v11 | 7;
  uint64_t v13 = (v12 + 16 + a1) & ~v12;
  uint64_t v14 = (v12 + 16 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v9 + 24) + v11;
  uint64_t v16 = (v15 + v13) & ~v11;
  uint64_t v17 = (v15 + v14) & ~v11;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v18(v16, v17, v7);
  uint64_t v19 = *(void *)(v10 + 64);
  uint64_t v20 = (v19 + v11 + v16) & ~v11;
  uint64_t v21 = (v19 + v11 + v17) & ~v11;
  v18(v20, v21, v7);
  *(void *)((v19 + 7 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v19 + 7 + v21) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppearanceAnimationView.NormalBody(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v5) {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(_DWORD *)(v4 + 80) & 0xF8 | v9 | 7;
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  uint64_t v14 = v10 + v9;
  uint64_t v15 = v10 + 7;
  int v16 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  unint64_t v17 = ((v12 + 16) & ~v12) + ((v15 + ((v14 + (v13 & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(_WORD *)((char *)a1 + v17)) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }
    if (v21 < 2)
    {
LABEL_24:
      uint64_t v24 = ((unint64_t)a1 + v12 + 16) & ~v12;
      if (v5 == v11) {
        return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
      }
      uint64_t v25 = (v13 + v24) & ~v9;
      if (v8 == v11) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v25, v8, v6);
      }
      unint64_t v26 = *(void *)((v15 + ((v14 + v25) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      return (v26 + 1);
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_24;
  }
LABEL_17:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (((v12 + 16) & ~v12)
     + ((v15 + ((v14 + (v13 & ~v9)) & ~v9)) & 0xFFFFFFF8) == -8)
    int v23 = 0;
  else {
    int v23 = *a1;
  }
  return v11 + (v23 | v22) + 1;
}

void storeEnumTagSinglePayload for AppearanceAnimationView.NormalBody(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80) & 0xF8 | v10 | 7;
  uint64_t v15 = v11 + v10;
  uint64_t v16 = (v11 + v10) & ~v10;
  uint64_t v17 = v12 + v10;
  uint64_t v18 = (v12 + v10 + v16) & ~v10;
  uint64_t v19 = v12 + 7;
  size_t v20 = ((v14 + 16) & ~v14) + ((v19 + v18) & 0xFFFFFFFFFFFFFFF8) + 8;
  BOOL v21 = a3 >= v13;
  unsigned int v22 = a3 - v13;
  if (v22 != 0 && v21)
  {
    if (v20 <= 3)
    {
      unsigned int v27 = ((v22 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
      if (HIWORD(v27))
      {
        int v23 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v23 = 2;
      }
      else
      {
        int v23 = v27 > 1;
      }
    }
    else
    {
      int v23 = 1;
    }
  }
  else
  {
    int v23 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v24 = ~v13 + a2;
    if (v20 <= 3)
    {
      int v25 = (v24 >> (8 * v20)) + 1;
      if (((v14 + 16) & ~v14) + ((v19 + v18) & 0xFFFFFFF8) == -8)
      {
LABEL_23:
        switch(v23)
        {
          case 1:
            a1[v20] = v25;
            return;
          case 2:
            *(_WORD *)&a1[v20] = v25;
            return;
          case 3:
            goto LABEL_45;
          case 4:
            *(_DWORD *)&a1[v20] = v25;
            return;
          default:
            return;
        }
      }
      v24 &= ~(-1 << (8 * v20));
    }
    else
    {
      int v25 = 1;
    }
    bzero(a1, v20);
    *(_DWORD *)a1 = v24;
    goto LABEL_23;
  }
  uint64_t v26 = ~v10;
  switch(v23)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x24604EBB8);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v28 = (unint64_t)&a1[v14 + 16] & ~v14;
        if (v7 == v13)
        {
          uint64_t v29 = *(void (**)(unint64_t))(v6 + 56);
          v29(v28);
        }
        else
        {
          unint64_t v30 = (v15 + v28) & v26;
          if (v9 == v13)
          {
            uint64_t v31 = *(void (**)(unint64_t))(v8 + 56);
            v31(v30);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v32 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v32 = a2 - 1;
            }
            *(void *)((v19 + ((v17 + v30) & v26)) & 0xFFFFFFFFFFFFFFF8) = v32;
          }
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for AppearanceAnimationView<A, B>.AnimationEffect(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AppearanceAnimationView<A, B>.NormalBody()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t type metadata accessor for AppearanceAnimationView.NormalBody.AnimationState()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  return partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in AppearanceAnimationView.NormalBody.body.getter);
}

uint64_t partial apply for closure #2 in AppearanceAnimationView.NormalBody.body.getter()
{
  return partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))closure #2 in AppearanceAnimationView.NormalBody.body.getter);
}

uint64_t partial apply for closure #1 in AppearanceAnimationView.NormalBody.body.getter(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = *(void *)(type metadata accessor for AppearanceAnimationView.NormalBody() - 8);
  unsigned int v7 = (char *)v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a1(v7, v2, v3, v4, v5);
}

uint64_t partial apply for closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter()
{
  return closure #1 in closure #1 in AppearanceAnimationView.NormalBody.body.getter(*(void *)(v0 + 48));
}

void type metadata accessor for _DisplayList_AnyEffectAnimation?()
{
  if (!lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?)
  {
    type metadata accessor for _DisplayList_AnyEffectAnimation();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation?);
    }
  }
}

uint64_t outlined destroy of _DisplayList_AnyEffectAnimation?(uint64_t a1)
{
  type metadata accessor for _DisplayList_AnyEffectAnimation?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24604EE0C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_24604EE44()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24604EE7C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24604EEB4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24604EEEC()
{
  return swift_getWitnessTable();
}

void CodablePlatformImage.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (objc_class *)type metadata accessor for CorePlatformImage();
  uint64_t v5 = objc_allocWithZone(v4);
  v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a1;
  uint64_t v6 = v5;
  id v7 = a1;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v7);

  v9.receiver = v6;
  v9.super_class = v4;
  id v8 = objc_msgSendSuper2(&v9, sel_init);

  *a2 = v8;
}

id RBDisplayListEncoderDelegate.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = &v3[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *((void *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  v7.receiver = v3;
  v7.super_class = v1;
  return objc_msgSendSuper2(&v7, sel_init);
}

id RBDisplayListDecoderDelegate.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 48);
  objc_super v7 = &v3[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)objc_super v7 = *(_OWORD *)a1;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v5;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a1 + 32);
  *((void *)v7 + 6) = v6;
  v9.receiver = v3;
  v9.super_class = v1;
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t CodableCGImage.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableRBDisplayListContents.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(int a1, void (*a2)(void), unint64_t a3)
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = &v42[-v11];
  uint64_t v13 = *((void *)v3 + 2);
  long long v49 = *v3;
  uint64_t v50 = v13;
  long long v51 = *(long long *)((char *)v3 + 24);
  uint64_t v14 = ProtobufEncoder.archiveWriter.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v44 = v8;
    uint64_t v45 = v7;
    int v48 = a1;
    lazy protocol witness table accessor for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:)();
    AnyHashable.init<A>(_:)();
    uint64_t v16 = (uint64_t *)(v15 + 152);
    swift_beginAccess();
    uint64_t v17 = *(void *)(v15 + 152);
    if (*(void *)(v17 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v49), (v19 & 1) != 0))
    {
      Swift::UInt v20 = *(void *)(*(void *)(v17 + 56) + 8 * v18);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&v49);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v21);
      static OSSignpostID.exclusive.getter();
      unsigned int v22 = OSSignposter.logHandle.getter();
      int v23 = static os_signpost_type_t.event.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        int v43 = v23;
        uint64_t v24 = v44;
        uint64_t v25 = v45;
        uint64_t v26 = v46;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16))(v46, v12, v45);
        unsigned int v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unsigned int v27 = 134217984;
        *(void *)&long long v49 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v22, (os_signpost_type_t)v43, v28, "addAttachment.cacheHit", "index=%{name=index}ld", v27, 0xCu);
        MEMORY[0x24C527CC0](v27, -1, -1);

        uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v24 + 8);
        v29(v12, v25);
        v29(v26, v25);
        if ((v20 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        goto LABEL_9;
      }

      (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v12, v45);
      if ((v20 & 0x8000000000000000) != 0)
      {
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        goto LABEL_20;
      }
    }
    else
    {
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&v49);
      long long v49 = 0uLL;
      LODWORD(v50) = 0;
      BYTE4(v50) = 1;
      uint64_t v30 = v47;
      uint64_t v31 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&v49, (const char *)v15, a2, a3);
      if (v30)
      {
LABEL_10:
        swift_release();
        return;
      }
      Swift::UInt v20 = v31;
      int v48 = a1;
      AnyHashable.init<A>(_:)();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v52 = *v16;
      *uint64_t v16 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, (uint64_t)&v49, isUniquelyReferenced_nonNull_native);
      *uint64_t v16 = v52;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&v49);
      swift_endAccess();
      if ((v20 & 0x8000000000000000) != 0) {
        goto LABEL_19;
      }
    }
LABEL_9:
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v20);
    goto LABEL_10;
  }
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v34 = Mutable;
  CGDataConsumerRef v35 = CGDataConsumerCreateWithCFData(Mutable);
  if (!v35)
  {
LABEL_21:
    __break(1u);
    return;
  }
  CGDataConsumerRef v36 = v35;
  uint64_t v37 = v47;
  a2();
  if (v37)
  {
  }
  else
  {
    uint64_t v38 = v34;
    uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    ProtobufEncoder.dataField(_:_:)(2, v39, v41);
    outlined consume of Data._Representation(v39, v41);
  }
}

uint64_t (*CodablePlatformImage.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id CodablePlatformImage.kitImage.getter()
{
  uint64_t v1 = (void **)(*v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void CodablePlatformImage.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v3;
  uint64_t v6 = (unsigned __int8 *)(*v3 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = (void **)(v5 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  id v9 = (id)_CorePlatformImageGetCGImage(v7, *v8);
  if (!v9)
  {
    lazy protocol witness table accessor for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error();
    swift_allocError();
    swift_willThrow();
    return;
  }
  uint64_t v10 = *v6;
  uint64_t v11 = *v8;
  id v12 = v9;
  _CorePlatformImageGetScale(v10, v11);
  double v14 = v13;
  char ImageOrientation = _CorePlatformImageGetImageOrientation(*v6, *v8);
  char v16 = specialized Image.Orientation.init(rawValue:)(ImageOrientation);
  if (v16 == 8) {
    char v17 = 0;
  }
  else {
    char v17 = v16;
  }
  _CorePlatformImageGetBaselineOffsetFromBottom(*v6, *v8);
  double v19 = v18;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)((uint64_t)v12);

  if (!v2)
  {
    double v20 = round(v14);
    if (v20 == 1.0) {
      goto LABEL_18;
    }
    double v21 = fabs(v20);
    if (v21 >= 65536.0) {
      Swift::UInt v22 = 17;
    }
    else {
      Swift::UInt v22 = 21;
    }
    ProtobufEncoder.encodeVarint(_:)(v22);
    if (v21 >= 65536.0)
    {
      uint64_t v25 = a1[1];
      int64_t v26 = v25 + 8;
      if (__OFADD__(v25, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v26)
      {
        a1[1] = v26;
        *(double *)(*a1 + v25) = v20;
        goto LABEL_18;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v26) = v20;
    }
    else
    {
      uint64_t v23 = a1[1];
      int64_t v24 = v23 + 4;
      if (__OFADD__(v23, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v20 = v20;
        if (a1[2] >= v24)
        {
          a1[1] = v24;
          *(_DWORD *)(*a1 + v23) = LODWORD(v20);
          goto LABEL_18;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v24) = LODWORD(v20);
    }
LABEL_18:
    Swift::UInt v27 = 2;
    switch(v17)
    {
      case 1:
        goto LABEL_25;
      case 2:
        Swift::UInt v27 = 6;
        goto LABEL_25;
      case 3:
        Swift::UInt v27 = 4;
        goto LABEL_25;
      case 4:
        Swift::UInt v27 = 1;
        goto LABEL_25;
      case 5:
        Swift::UInt v27 = 3;
        goto LABEL_25;
      case 6:
        Swift::UInt v27 = 7;
        goto LABEL_25;
      case 7:
        Swift::UInt v27 = 5;
LABEL_25:
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(v27);
        break;
      default:
        break;
    }
    if (v19 == 0.0) {
      goto LABEL_37;
    }
    double v28 = fabs(v19);
    if (v28 >= 65536.0) {
      Swift::UInt v29 = 33;
    }
    else {
      Swift::UInt v29 = 37;
    }
    ProtobufEncoder.encodeVarint(_:)(v29);
    if (v28 >= 65536.0)
    {
      uint64_t v32 = a1[1];
      int64_t v33 = v32 + 8;
      if (__OFADD__(v32, 8))
      {
        __break(1u);
      }
      else if (a1[2] >= v33)
      {
        a1[1] = v33;
        *(double *)(*a1 + v32) = v19;
        goto LABEL_37;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v33) = v19;
    }
    else
    {
      uint64_t v30 = a1[1];
      int64_t v31 = v30 + 4;
      if (__OFADD__(v30, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v19 = v19;
        if (a1[2] >= v31)
        {
          a1[1] = v31;
          *(_DWORD *)(*a1 + v30) = LODWORD(v19);
          goto LABEL_37;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v31) = LODWORD(v19);
    }
LABEL_37:
    v34 = (unsigned char *)(v5 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate);
    swift_beginAccess();
    if (*v34)
    {
      ProtobufEncoder.encodeVarint(_:)(0x28uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

void CodablePlatformImage.init(from:)(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  uint64_t v7 = v2;
  char v8 = 0;
  Class v9 = 0;
  double v10 = 1.0;
  while (2)
  {
    unint64_t v11 = a1[3];
    if (v11)
    {
      unint64_t v12 = a1[4];
      if (v5 < v12) {
        goto LABEL_14;
      }
      if (v12 < v5) {
        goto LABEL_75;
      }
      a1[3] = 0;
    }
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v7) {
      goto LABEL_76;
    }
    if (v11 < 8) {
      goto LABEL_75;
    }
LABEL_14:
    switch(v11 >> 3)
    {
      case 1uLL:
        if ((v11 & 7) != 2) {
          goto LABEL_75;
        }
        ProtobufDecoder.beginMessage()();
        if (v7) {
          goto LABEL_76;
        }
        Class v13 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        uint64_t v7 = 0;
        double v14 = (void *)a1[5];
        if (v14[2])
        {
          Class v15 = v13;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v16 = v14[2];
            if (!v16) {
              goto LABEL_74;
            }
          }
          else
          {
            double v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
            uint64_t v16 = v14[2];
            if (!v16)
            {
LABEL_74:
              __break(1u);
LABEL_75:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              swift_willThrow();
LABEL_76:

              return;
            }
          }
          uint64_t v17 = v16 - 1;
          uint64_t v18 = v14[v17 + 4];
          v14[2] = v17;

          a1[5] = v14;
          a1[2] = v18;
          Class v9 = v15;
LABEL_7:
          unint64_t v5 = a1[1];
          unint64_t v6 = a1[2];
          if (v5 >= v6)
          {
            a1[3] = 0;
            if (v9)
            {
              v34 = v9;
              KitImage = _CorePlatformImageMakeKitImage(v10, 0, (uint64_t)v34, (0x507030104060200uLL >> (8 * v8)) & 7);
              CGDataConsumerRef v36 = (objc_class *)type metadata accessor for CorePlatformImage();
              uint64_t v37 = objc_allocWithZone(v36);
              v37[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
              *(void *)&v37[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = KitImage;
              uint64_t v38 = v37;
              id v39 = KitImage;
              v38[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v39);

              v45.receiver = v38;
              v45.super_class = v36;
              id v40 = objc_msgSendSuper2(&v45, sel_init);

              *a2 = v40;
              return;
            }
LABEL_4:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return;
          }
          continue;
        }
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        __break(1u);
        int v43 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
        uint64_t v44 = v43[2];
        if (!v44)
        {
          __break(1u);
          JUMPOUT(0x24604FF50);
        }
        uint64_t v41 = v44 - 1;
        uint64_t v42 = v43[v41 + 4];
        v43[2] = v41;

        a1[5] = v43;
        a1[2] = v42;
        return;
      case 2uLL:
        unint64_t v21 = v11 & 7;
        if (v21 == 5)
        {
          uint64_t v30 = (float *)a1[1];
          if (v6 < (unint64_t)(v30 + 1)) {
            goto LABEL_75;
          }
          float v31 = *v30;
          a1[1] = v30 + 1;
          double v10 = v31;
        }
        else
        {
          if (v21 == 2)
          {
            uint64_t v32 = ProtobufDecoder.decodeVarint()();
            if (v7) {
              goto LABEL_76;
            }
            if (v32 < 0) {
              goto LABEL_83;
            }
            Swift::UInt v22 = (double *)a1[1];
            if (v6 < (unint64_t)v22 + v32) {
              goto LABEL_75;
            }
            a1[3] = 17;
            a1[4] = (char *)v22 + v32;
          }
          else
          {
            if (v21 != 1) {
              goto LABEL_75;
            }
            Swift::UInt v22 = (double *)a1[1];
          }
          if (v6 < (unint64_t)(v22 + 1)) {
            goto LABEL_75;
          }
          double v10 = *v22;
          a1[1] = v22 + 1;
        }
        goto LABEL_7;
      case 3uLL:
        if ((v11 & 7) == 0) {
          goto LABEL_36;
        }
        if ((v11 & 7) != 2) {
          goto LABEL_75;
        }
        uint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          goto LABEL_76;
        }
        if (v23 < 0) {
          goto LABEL_81;
        }
        unint64_t v24 = a1[1] + v23;
        if (v6 < v24) {
          goto LABEL_75;
        }
        a1[3] = 24;
        a1[4] = v24;
LABEL_36:
        unint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          goto LABEL_76;
        }
        if (v25 <= 0xFF)
        {
          switch((char)v25)
          {
            case 1:
              char v8 = 4;
              break;
            case 2:
              char v8 = 1;
              break;
            case 3:
              char v8 = 5;
              break;
            case 4:
              char v8 = 3;
              break;
            case 5:
              char v8 = 7;
              break;
            case 6:
              char v8 = 2;
              break;
            case 7:
              char v8 = 6;
              break;
            default:
              goto LABEL_38;
          }
        }
        else
        {
LABEL_38:
          char v8 = 0;
        }
        goto LABEL_7;
      case 4uLL:
        unint64_t v26 = v11 & 7;
        if (v26 == 5)
        {
LABEL_49:
          unint64_t v20 = a1[1] + 4;
          if (v6 < v20) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v26 == 2)
          {
            uint64_t v33 = ProtobufDecoder.decodeVarint()();
            if (v7) {
              goto LABEL_76;
            }
            if (v33 < 0) {
              goto LABEL_84;
            }
            uint64_t v27 = a1[1];
            if (v6 < v27 + v33) {
              goto LABEL_75;
            }
            a1[3] = 33;
            a1[4] = v27 + v33;
          }
          else
          {
            if (v26 != 1) {
              goto LABEL_75;
            }
LABEL_42:
            uint64_t v27 = a1[1];
          }
          unint64_t v20 = v27 + 8;
          if (v6 < v20) {
            goto LABEL_75;
          }
        }
LABEL_66:
        a1[1] = v20;
        goto LABEL_7;
      case 5uLL:
        if ((v11 & 7) == 0) {
          goto LABEL_6;
        }
        if ((v11 & 7) != 2) {
          goto LABEL_75;
        }
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v7) {
          goto LABEL_76;
        }
        if (v28 < 0) {
          goto LABEL_82;
        }
        unint64_t v29 = a1[1] + v28;
        if (v6 < v29) {
          goto LABEL_75;
        }
        a1[3] = 40;
        a1[4] = v29;
LABEL_6:
        ProtobufDecoder.decodeVarint()();
        if (!v7) {
          goto LABEL_7;
        }
        goto LABEL_76;
      default:
        switch(v11 & 7)
        {
          case 0uLL:
            goto LABEL_6;
          case 1uLL:
            goto LABEL_42;
          case 2uLL:
            uint64_t v19 = ProtobufDecoder.decodeVarint()();
            if (v7) {
              goto LABEL_76;
            }
            if (v19 < 0) {
              goto LABEL_85;
            }
            unint64_t v20 = a1[1] + v19;
            if (v6 < v20) {
              goto LABEL_75;
            }
            goto LABEL_66;
          case 5uLL:
            goto LABEL_49;
          default:
            goto LABEL_75;
        }
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodablePlatformImage(void *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodablePlatformImage(void *a1@<X0>, void *a2@<X8>)
{
}

id CodableCGImage.base.getter()
{
  return *v0;
}

void CodableCGImage.base.setter(void *a1)
{
  id *v1 = a1;
}

uint64_t (*CodableCGImage.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableCGImage.encode(to:)(long long *a1)
{
  uint64_t v3 = *v1;
  int Identifier = CGImageGetIdentifier();
  uint64_t v5 = *((void *)a1 + 2);
  long long v8 = *a1;
  uint64_t v9 = v5;
  long long v10 = *(long long *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)v11);
  v7[2] = v11;
  v7[3] = v3;
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))partial apply for closure #1 in CodableCGImage.encode(to:), (unint64_t)v7);
  return outlined destroy of AnyArchivedViewHost?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
}

void closure #1 in CodableCGImage.encode(to:)(CGDataConsumer *a1, uint64_t a2, void *a3)
{
  unint64_t v25 = a1;
  type metadata accessor for AnyArchivedViewHost?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x263F8F3A0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)&v24 - v7;
  uint64_t v9 = type metadata accessor for UTType();
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  double v14 = (char *)&v24 - v13;
  outlined init with copy of AnyArchivedViewHost?(a2, (uint64_t)v28);
  uint64_t v15 = v29;
  if (v29)
  {
    uint64_t v16 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    id v17 = (id)(*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 16))(a3, v15, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    if (v3) {
      return;
    }
  }
  else
  {
    outlined destroy of AnyArchivedViewHost?((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
    id v17 = a3;
  }
  outlined init with copy of AnyArchivedViewHost?(a2, (uint64_t)&v26);
  if (v27)
  {
    outlined init with take of ScrollStateRequest(&v26, (uint64_t)v28);
    uint64_t v18 = v29;
    uint64_t v19 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    (*(void (**)(id, uint64_t, uint64_t))(v19 + 32))(v17, v18, v19);
    uint64_t v20 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v8, 1, v9) == 1)
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      swift_allocError();
      unsigned char *v21 = 1;
      swift_willThrow();

      outlined destroy of AnyArchivedViewHost?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x263F8F3A0]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return;
    }
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v23(v11, v8, v9);
    v23(v14, v11, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    Swift::UInt v22 = v25;
  }
  else
  {
    outlined destroy of AnyArchivedViewHost?((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
    static UTType.png.getter();
    Swift::UInt v22 = v25;
    uint64_t v20 = v31;
  }
  specialized static CodableCGImage.export(_:to:as:)((CGImage *)v17, v22, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v9);
}

Class CodableCGImage.init(from:)@<X0>(uint64_t a1@<X0>, Class *a2@<X8>)
{
  Class result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableCGImage(long long *a1)
{
  uint64_t v3 = *v1;
  int Identifier = CGImageGetIdentifier();
  uint64_t v5 = *((void *)a1 + 2);
  long long v8 = *a1;
  uint64_t v9 = v5;
  long long v10 = *(long long *)((char *)a1 + 24);
  ProtobufEncoder.archiveHost.getter((uint64_t)v11);
  v7[2] = v11;
  v7[3] = v3;
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))closure #1 in CodableCGImage.encode(to:)partial apply, (unint64_t)v7);
  return outlined destroy of AnyArchivedViewHost?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost);
}

Class protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableCGImage@<X0>(uint64_t a1@<X0>, Class *a2@<X8>)
{
  Class result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t CodableRBDisplayListContents.base.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CodableRBDisplayListContents.base.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*CodableRBDisplayListContents.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableRBDisplayListContents.encode(to:)(uint64_t *a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  *(void *)&into.state.h0 = *a1;
  *(void *)&into.state.h2 = v4;
  *(void *)&into.state.CC_LONG h4 = v5;
  *(void *)&into.state.Nh = v6;
  *(void *)&into.state.data[1] = v7;
  uint64_t v8 = ProtobufEncoder.archiveWriter.getter();
  if (!v8)
  {
    lazy protocol witness table accessor for type ProtobufEncoder.EncodingError and conformance ProtobufEncoder.EncodingError();
    swift_allocError();
    return swift_willThrow();
  }
  uint64_t v9 = v8;
  long long v10 = (objc_class *)type metadata accessor for RBDisplayListEncoderDelegate();
  unint64_t v11 = (char *)objc_allocWithZone(v10);
  uint64_t v12 = &v11[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(void *)uint64_t v12 = v3;
  *((void *)v12 + 1) = v4;
  *((void *)v12 + 2) = v5;
  *((void *)v12 + 3) = v6;
  *((void *)v12 + 4) = v7;
  v28.receiver = v11;
  v28.super_class = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = objc_msgSendSuper2(&v28, sel_init);
  *(void *)&into.state.h0 = 0;
  id v14 = objc_msgSend(v2, sel_encodedDataForDelegate_error_, v13, &into);

  id v15 = *(id *)&into.state.h0;
  if (v14)
  {
    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    memset(&c, 0, sizeof(c));
    outlined copy of Data._Representation(v16, v18);
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v16, v18);
    CC_LONG h4 = c.h4;
    uint64_t v21 = *(void *)&c.h0;
    uint64_t v20 = *(void *)&c.h2;
    swift_beginAccess();
    uint64_t v22 = specialized Collection<>.firstIndex(of:)(v21, v20, h4, *(void *)(v9 + 32));
    if (v23)
    {
      *(void *)&c.h0 = v21;
      *(void *)&c.h2 = v20;
      c.CC_LONG h4 = h4;
      LOBYTE(c.Nl) = 0;
      outlined copy of Data._Representation(v16, v18);
      Swift::UInt v24 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&c.h0, (const char *)v9, v16, v18);
      outlined consume of Data._Representation(v16, v18);
      if (v27)
      {
LABEL_11:
        outlined consume of Data._Representation(v16, v18);
        return swift_release();
      }
    }
    else
    {
      Swift::UInt v24 = v22;
    }
    if ((v24 & 0x8000000000000000) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if (v24)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(v24);
    }
    goto LABEL_11;
  }
  long long v26 = v15;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return swift_release();
}

unint64_t CodableRBDisplayListContents.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v35[7] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  if (v6 < v5)
  {
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t result = *(void *)(a1 + 24);
      if (result)
      {
        unint64_t v26 = *(void *)(a1 + 32);
        if ((unint64_t)v6 < v26) {
          goto LABEL_16;
        }
        if (v26 < (unint64_t)v6) {
          goto LABEL_35;
        }
        *(void *)(a1 + 24) = 0;
      }
      unint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_35;
      }
LABEL_16:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_35;
          }
          unint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_38;
          }
          unint64_t v27 = *(void *)(a1 + 8) + result;
          if ((unint64_t)v5 < v27) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = 8;
          *(void *)(a1 + 32) = v27;
        }
        unint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        uint64_t v7 = result;
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              break;
            }
            return result;
          case 1uLL:
            unint64_t v28 = *(void *)(a1 + 8) + 8;
            goto LABEL_32;
          case 2uLL:
            unint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_39;
            }
            unint64_t v28 = *(void *)(a1 + 8) + result;
LABEL_32:
            if ((unint64_t)v5 < v28) {
              goto LABEL_35;
            }
            *(void *)(a1 + 8) = v28;
            break;
          case 5uLL:
            unint64_t v28 = *(void *)(a1 + 8) + 4;
            goto LABEL_32;
          default:
            goto LABEL_35;
        }
      }
      uint64_t v6 = *(void **)(a1 + 8);
      uint64_t v5 = *(void **)(a1 + 16);
      if (v6 >= v5) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v7 = 0;
LABEL_4:
  uint64_t v32 = a2;
  *(void *)(a1 + 24) = 0;
  id v8 = *(id *)a1;
  uint64_t v9 = *(void **)(a1 + 32);
  long long v10 = *(void **)(a1 + 40);
  unint64_t v11 = *(void **)(a1 + 48);
  v35[0] = *(id *)a1;
  v35[1] = v6;
  v35[2] = v5;
  v35[3] = 0;
  uint64_t v33 = v9;
  v35[4] = v9;
  v35[5] = v10;
  v35[6] = v11;
  uint64_t v12 = ProtobufDecoder.archiveReader.getter();
  if (!v12) {
    goto LABEL_35;
  }
  if (v7 >= *(void *)(v12 + 40))
  {
    swift_release();
LABEL_35:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  ArchiveReader.subscript.getter(v7);
  uint64_t v14 = v13;
  unint64_t v16 = v15;
  swift_release();
  unint64_t v30 = v16;
  id v31 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v18 = (objc_class *)type metadata accessor for RBDisplayListDecoderDelegate();
  uint64_t v19 = (char *)objc_allocWithZone(v18);
  uint64_t v20 = &v19[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(void *)uint64_t v20 = v8;
  *((void *)v20 + 1) = v6;
  *((void *)v20 + 2) = v5;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v33;
  *((void *)v20 + 5) = v10;
  *((void *)v20 + 6) = v11;
  v34.receiver = v19;
  v34.super_class = v18;
  id v21 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = objc_msgSendSuper2(&v34, sel_init);
  v35[0] = 0;
  id v23 = objc_msgSend(v31, sel_decodedObjectWithData_delegate_error_, isa, v22, v35);

  if (v23)
  {
    id v24 = v35[0];
    unint64_t result = outlined consume of Data._Representation(v14, v30);
    *uint64_t v32 = v23;
  }
  else
  {
    id v29 = v35[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return outlined consume of Data._Representation(v14, v30);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableRBDisplayListContents(uint64_t *a1)
{
  return CodableRBDisplayListContents.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableRBDisplayListContents@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return CodableRBDisplayListContents.init(from:)(a1, a2);
}

uint64_t RBDisplayListEncoderDelegate.encoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 24);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id RBDisplayListEncoderDelegate.init(_:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = &v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder];
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *((void *)v5 + 2) = v4;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 24);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t RBDisplayListEncoderDelegate.encoderSet.getter()
{
  return ProtobufEncoder.rbEncoderSet.getter();
}

uint64_t RBDisplayListEncoderDelegate.encodedData(image:)(uint64_t a1, uint64_t a2)
{
  id v5 = v2;
  uint64_t v6 = specialized static ProtobufEncoder.encoding(_:)((uint64_t)v5, a1, a2);

  return v6;
}

uint64_t RBDisplayListEncoderDelegate.encodedData(cgFont:)(void *a1)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListEncoderDelegate_encoder + 32];
  uint64_t v4 = v1;
  id v5 = a1;
  swift_bridgeObjectRetain();
  CodableCGFont.encode(to:)((uint64_t)v8, v5);
  if (v2)
  {
    free(v8[0]);
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = ProtobufEncoder.takeData()();
    free(v8[0]);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Bool __swiftcall RBDisplayListEncoderDelegate.shouldEncodeFontSubset(cgFont:)(CGFontRef cgFont)
{
  ProtobufEncoder.archiveOptions.getter(v2);
  return (v2[0] & 0x14) != 4;
}

uint64_t RBDisplayListEncoderDelegate.encodedFontData(data:cgFont:)(unint64_t a1, unint64_t a2)
{
  id v5 = v2;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v6 = specialized static ProtobufEncoder.encoding(_:)((uint64_t)v5, a1, a2);
  outlined consume of Data._Representation(a1, a2);

  return v6;
}

void RBDisplayListEncoderDelegate.init()()
{
}

uint64_t RBDisplayListDecoderDelegate.decoder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (long long *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 32);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 40);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  long long v7 = *v2;
  long long v6 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  id v8 = (id)v7;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id RBDisplayListDecoderDelegate.init(_:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v7 = &v1[OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder];
  *(_OWORD *)long long v7 = *(_OWORD *)a1;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v5;
  *((_OWORD *)v7 + 2) = *(_OWORD *)(a1 + 32);
  *((void *)v7 + 6) = v6;
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

unint64_t lazy protocol witness table accessor for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error;
  if (!lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodablePlatformImage.Error and conformance CodablePlatformImage.Error);
  }
  return result;
}

objc_class *RBDisplayListDecoderDelegate.decodedImageContents(data:type:)(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  outlined copy of Data._Representation(a1, a2);
  ProtobufDecoder.init(_:)(a1, a2, v14);
  id v8 = *(objc_class **)(v3 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[6] = v8;
  Class v9 = specialized CodableRBImage.init(from:)(v14);
  if (!v4)
  {
    unint64_t v11 = v9;
    if (v9)
    {
      *a3 = v10;
      uint64_t v12 = v14[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v11;
    }
    lazy protocol witness table accessor for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error();
    swift_allocError();
    swift_willThrow();
  }
  unint64_t v11 = v14[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v11;
}

CGFontRef RBDisplayListDecoderDelegate.decodedCGFont(data:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  ProtobufDecoder.init(_:)(a1, a2, v9);
  uint64_t v5 = *(objc_class **)(v2 + OBJC_IVAR____TtC7SwiftUI28RBDisplayListDecoderDelegate_decoder + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9[6] = v5;
  CGFontRef v6 = specialized CodableCGFont.init(from:)((id *)v9);
  long long v7 = v9[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6;
}

id RBDisplayListDecoderDelegate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void RBDisplayListDecoderDelegate.init()()
{
}

uint64_t type metadata accessor for RBDisplayListEncoderDelegate()
{
  return self;
}

uint64_t type metadata accessor for RBDisplayListDecoderDelegate()
{
  return self;
}

Class specialized static CodableCGImage.import(from:)()
{
  v0.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v1 = CGImageSourceCreateWithData(v0.super.isa, 0);

  if (v1)
  {
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v1, 0, 0);
    if (ImageAtIndex)
    {
      v0.super.Class isa = ImageAtIndex;
    }
    else
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      swift_allocError();
      *uint64_t v4 = 0;
      swift_willThrow();
    }
  }
  else
  {
    lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
    swift_allocError();
    unsigned char *v3 = 0;
    swift_willThrow();
  }
  return v0.super.isa;
}

Class specialized CodableRBImage.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = (void *)a1[2];
  if (v4 < (unint64_t)v5)
  {
    uint64_t v6 = v2;
    Class v1 = 0;
    while (1)
    {
      unint64_t v7 = a1[3];
      if (!v7) {
        goto LABEL_11;
      }
      unint64_t v8 = a1[4];
      if (v4 >= v8) {
        break;
      }
LABEL_13:
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((v7 & 7) != 2) {
          goto LABEL_30;
        }
        ProtobufDecoder.beginMessage()();
        if (v6) {
          goto LABEL_31;
        }
        Class v9 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
        uint64_t v6 = 0;
        int v10 = (void *)a1[5];
        if (!v10[2])
        {
          __break(1u);
LABEL_37:
          __break(1u);
          __break(1u);
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          uint64_t v21 = v20[2];
          if (!v21)
          {
            __break(1u);
            JUMPOUT(0x246051DF0);
          }
          uint64_t v18 = v21 - 1;
          uint64_t v19 = v20[v18 + 4];
          v20[2] = v18;

          a1[5] = v20;
          a1[2] = v19;
          return v1;
        }
        Class v11 = v9;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v12 = v10[2];
          if (!v12) {
            goto LABEL_29;
          }
        }
        else
        {
          int v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
          uint64_t v12 = v10[2];
          if (!v12)
          {
LABEL_29:
            __break(1u);
LABEL_30:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_31:

            return v1;
          }
        }
        uint64_t v13 = v12 - 1;
        uint64_t v14 = v10[v13 + 4];
        v10[2] = v13;

        a1[5] = v10;
        a1[2] = v14;
        Class v1 = v11;
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (!v6) {
              break;
            }
            goto LABEL_31;
          case 1uLL:
            unint64_t v15 = a1[1] + 8;
            goto LABEL_26;
          case 2uLL:
            uint64_t v16 = ProtobufDecoder.decodeVarint()();
            if (v6) {
              goto LABEL_31;
            }
            if (v16 < 0) {
              goto LABEL_37;
            }
            unint64_t v15 = a1[1] + v16;
LABEL_26:
            if ((unint64_t)v5 < v15) {
              goto LABEL_30;
            }
            a1[1] = v15;
            break;
          case 5uLL:
            unint64_t v15 = a1[1] + 4;
            goto LABEL_26;
          default:
            goto LABEL_30;
        }
      }
      unint64_t v4 = a1[1];
      uint64_t v5 = (void *)a1[2];
      if (v4 >= (unint64_t)v5)
      {
        a1[3] = 0;
        if (!v1) {
          goto LABEL_4;
        }
        return v1;
      }
    }
    if (v8 < v4) {
      goto LABEL_30;
    }
    a1[3] = 0;
LABEL_11:
    unint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (v6) {
      goto LABEL_31;
    }
    if (v7 < 8) {
      goto LABEL_30;
    }
    goto LABEL_13;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return v1;
}

unint64_t lazy protocol witness table accessor for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error;
  if (!lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error;
  if (!lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListDecoderDelegate.Error and conformance RBDisplayListDecoderDelegate.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodablePlatformImage()
{
  return &type metadata for CodablePlatformImage;
}

ValueMetadata *type metadata accessor for CodableCGImage()
{
  return &type metadata for CodableCGImage;
}

ValueMetadata *type metadata accessor for CodableRBDisplayListContents()
{
  return &type metadata for CodableRBDisplayListContents;
}

uint64_t method lookup function for RBDisplayListEncoderDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RBDisplayListEncoderDelegate);
}

uint64_t dispatch thunk of RBDisplayListEncoderDelegate.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for RBDisplayListDecoderDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RBDisplayListDecoderDelegate);
}

uint64_t dispatch thunk of RBDisplayListDecoderDelegate.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

void *type metadata accessor for RBDisplayListDecoderDelegate.Error()
{
  return &unk_26FA70DF8;
}

void *type metadata accessor for CodablePlatformImage.Error()
{
  return &unk_26FA60AF8;
}

unint64_t lazy protocol witness table accessor for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:)()
{
  unint64_t result = lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:);
  if (!lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:);
  if (!lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:))
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Key #1 in CodableCGImage.encode(to:) and conformance Key #1 in CodableCGImage.encode(to:));
  }
  return result;
}

uint64_t outlined init with copy of AnyArchivedViewHost?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyArchivedViewHost?(0, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?, (uint64_t (*)(uint64_t))type metadata accessor for AnyArchivedViewHost, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static CodableCGImage.export(_:to:as:)(CGImage *a1, CGDataConsumer *a2, uint64_t a3)
{
  CGDataConsumerRef v111 = a2;
  v114 = a1;
  uint64_t v108 = type metadata accessor for OSSignpostError();
  uint64_t v107 = *(void *)(v108 - 8);
  MEMORY[0x270FA5388](v108);
  v116 = &v101[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  v105 = &v101[-v6];
  MEMORY[0x270FA5388](v7);
  v103 = &v101[-v8];
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v109 = &v101[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v12);
  v106 = &v101[-v13];
  MEMORY[0x270FA5388](v14);
  v104 = &v101[-v15];
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = &v101[-v17];
  MEMORY[0x270FA5388](v19);
  uint64_t v121 = &v101[-v20];
  uint64_t v21 = type metadata accessor for UTType();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  id v24 = &v101[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for archiving != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for OSSignposter();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Signpost.archiving);
  unint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v113 = a3;
  v27(v24, a3, v21);
  static OSSignpostID.exclusive.getter();
  uint64_t v110 = v26;
  unint64_t v28 = OSSignposter.logHandle.getter();
  int v29 = static os_signpost_type_t.begin.getter();
  char v30 = OS_os_log.signpostsEnabled.getter();
  uint64_t v119 = v9;
  uint64_t v112 = v18;
  if (v30)
  {
    id v31 = *(void (**)(void, void, void))(v10 + 16);
    unint64_t v117 = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v118 = v31;
    v31(v18, v121, v9);
    uint64_t v120 = v10;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    int v102 = v29;
    uint64_t v34 = v33;
    uint64_t v123 = v33;
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v35 = UTType.identifier.getter();
    uint64_t v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v123);
    uint64_t v10 = v120;
    uint64_t v18 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v24, v21);
    os_signpost_id_t v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245728000, v28, (os_signpost_type_t)v102, v37, "CodableCGImage.export", "typeIdentifier=%{name=typeIdentifier}s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v34, -1, -1);
    uint64_t v38 = v32;
    uint64_t v9 = v119;
    MEMORY[0x24C527CC0](v38, -1, -1);

    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v18, v9);
    unint64_t v40 = v117;
    id v39 = v118;
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v24, v21);
    id v39 = *(void (**)(void, void, void))(v10 + 16);
    unint64_t v40 = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  }
  uint64_t v41 = v121;
  unint64_t v117 = v40;
  uint64_t v118 = v39;
  v39(v18, v121, v9);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v42 = OSSignpostIntervalState.init(id:isOpen:)();
  int v43 = *(unsigned char **)(v10 + 8);
  uint64_t v120 = v10 + 8;
  ((void (*)(unsigned char *, uint64_t))v43)(v41, v9);
  uint64_t v44 = UTType.identifier.getter();
  objc_super v45 = (__CFString *)MEMORY[0x24C522820](v44);
  swift_bridgeObjectRelease();
  uint64_t v46 = v114;
  CopyForImageIODestination = _CGImageCreateCopyForImageIODestination(v114);
  int v48 = v116;
  if (!CopyForImageIODestination) {
    CopyForImageIODestination = v46;
  }
  uint64_t v49 = CGImageCopySourceData();
  if (!v49)
  {
LABEL_19:
    uint64_t v72 = CGImageDestinationCreateWithDataConsumer(v111, v45, 1uLL, 0);
    if (v72)
    {
      uint64_t v73 = v72;
      CGImageDestinationAddImage(v72, CopyForImageIODestination, 0);
      CGImageDestinationFinalize(v73);

      uint64_t v74 = OSSignposter.logHandle.getter();
      uint64_t v75 = v109;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v76 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        checkForErrorAndConsumeState(state:)();
        uint64_t v121 = (unsigned char *)v42;
        swift_release();
        uint64_t v77 = v107;
        uint64_t v78 = v108;
        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v107 + 88))(v48, v108) == *MEMORY[0x263F90238])
        {
          v79 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t))(v77 + 8))(v48, v78);
          v79 = "";
        }
        char v87 = v112;
        v118(v112, v75, v9);
        v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v88 = 0;
        os_signpost_id_t v89 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v74, v76, v89, "CodableCGImage.export", v79, v88, 2u);
        uint64_t v90 = v88;
        uint64_t v9 = v119;
        MEMORY[0x24C527CC0](v90, -1, -1);

        ((void (*)(unsigned char *, uint64_t))v43)(v75, v9);
        goto LABEL_35;
      }
    }
    else
    {
      lazy protocol witness table accessor for type CodableCGImage.Error and conformance CodableCGImage.Error();
      uint64_t v80 = swift_allocError();
      *uint64_t v81 = 0;
      uint64_t v115 = v80;
      swift_willThrow();

      uint64_t v74 = OSSignposter.logHandle.getter();
      uint64_t v75 = v106;
      OSSignpostIntervalState.signpostID.getter();
      os_signpost_type_t v82 = static os_signpost_type_t.end.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        swift_retain();
        uint64_t v83 = v105;
        checkForErrorAndConsumeState(state:)();
        swift_release();
        uint64_t v84 = v107;
        uint64_t v85 = v108;
        if ((*(unsigned int (**)(unsigned char *, uint64_t))(v107 + 88))(v83, v108) == *MEMORY[0x263F90238])
        {
          v86 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v83, v85);
          v86 = "";
        }
        char v87 = v112;
        v118(v112, v75, v9);
        uint64_t v91 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v91 = 0;
        os_signpost_id_t v92 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v74, v82, v92, "CodableCGImage.export", v86, v91, 2u);
        v93 = v91;
        uint64_t v9 = v119;
        MEMORY[0x24C527CC0](v93, -1, -1);

        v94 = v75;
        uint64_t v95 = v9;
        goto LABEL_34;
      }
    }

    char v87 = v75;
LABEL_35:
    ((void (*)(unsigned char *, uint64_t))v43)(v87, v9);
    return swift_release();
  }
  CFDataRef v50 = (const __CFData *)v49;
  uint64_t v121 = v43;
  type metadata accessor for AnyArchivedViewHost?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CFStringRef, Any), MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v52 = (void *)*MEMORY[0x263F0F640];
  *(void *)(inited + 32) = *MEMORY[0x263F0F640];
  type metadata accessor for CFStringRef(0);
  *(void *)(inited + 40) = v45;
  v53 = (void *)*MEMORY[0x263F0F5E0];
  *(void *)(inited + 64) = v54;
  *(void *)(inited + 72) = v53;
  *(void *)(inited + 104) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 80) = 1;
  id v55 = v52;
  uint64_t v56 = v45;
  id v57 = v53;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v58.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  double v59 = CGImageSourceCreateWithData(v50, v58.super.isa);
  if (!v59)
  {
LABEL_18:

    uint64_t v9 = v119;
    int v43 = v121;
    int v48 = v116;
    goto LABEL_19;
  }
  uint64_t v60 = v59;
  CFStringRef v61 = (id)CGImageSourceGetType(v59);
  if (!v61)
  {
    uint64_t v62 = (__CFString *)v60;
LABEL_17:

    goto LABEL_18;
  }
  uint64_t v62 = (__CFString *)v61;
  if (!CFEqual(v61, v56))
  {

    goto LABEL_17;
  }
  CFDataGetBytePtr(v50);
  CFDataGetLength(v50);
  CGDataConsumerPutBytes();

  uint64_t v63 = OSSignposter.logHandle.getter();
  uint64_t v64 = v104;
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v65 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    char v66 = v103;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v67 = v107;
    uint64_t v68 = v108;
    int v69 = (*(uint64_t (**)(unsigned char *, uint64_t))(v107 + 88))(v66, v108);
    uint64_t v70 = v119;
    if (v69 == *MEMORY[0x263F90238])
    {
      uint64_t v71 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v67 + 8))(v66, v68);
      uint64_t v71 = "";
    }
    v96 = v112;
    v118(v112, v64, v70);
    uint64_t v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v97 = 0;
    char v87 = v96;
    os_signpost_id_t v98 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_245728000, v63, v65, v98, "CodableCGImage.export", v71, v97, 2u);
    v99 = v97;
    uint64_t v9 = v119;
    MEMORY[0x24C527CC0](v99, -1, -1);

    v94 = v64;
    uint64_t v95 = v9;
    int v43 = v121;
LABEL_34:
    ((void (*)(unsigned char *, uint64_t))v43)(v94, v95);
    goto LABEL_35;
  }

  ((void (*)(unsigned char *, uint64_t))v121)(v64, v119);
  return swift_release();
}

uint64_t outlined destroy of AnyArchivedViewHost?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for AnyArchivedViewHost?(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for AnyArchivedViewHost?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CodableCGImage.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246052E2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableCGImage.Error()
{
  return &type metadata for CodableCGImage.Error;
}

void *type metadata accessor for Key #1 in CodableCGImage.encode(to:)()
{
  return &unk_26FA4BD48;
}

unsigned char *storeEnumTagSinglePayload for RBDisplayListDecoderDelegate.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246052F10);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableRBImage.Error()
{
  return &type metadata for CodableRBImage.Error;
}

void closure #1 in CodableCGImage.encode(to:)partial apply(CGDataConsumer *a1)
{
}

uint64_t closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 32) = xmmword_24619B520;
  *(void *)(v8 + 48) = 1065353216;
  *(void *)(v8 + 56) = 0x7FF8000000000000;
  v11[0] = a2;
  v11[1] = a3;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  swift_retain();
  id v9 = a1;
  swift_retain();
  *(void *)(v8 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v9, v11);
  *(void *)(v8 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v8 + 64) = 0;
  v11[0] = v8;
  a4(v11);

  return swift_release();
}

uint64_t Image.init(size:label:opaque:colorMode:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  char v18 = *a6;
  if (a5) {
    int v19 = 163;
  }
  else {
    int v19 = 161;
  }
  type metadata accessor for RenderedImageProviderBox();
  uint64_t v20 = swift_allocObject();
  type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>();
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(void *)(v21 + 32) = 0;
  *(void *)(v21 + 40) = 0;
  *(void *)(v21 + 24) = 0;
  *(void *)(v20 + 96) = a8;
  *(void *)(v20 + 104) = v21;
  *(double *)(v20 + 16) = a9;
  *(double *)(v20 + 24) = a10;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  *(void *)(v20 + 48) = a3;
  *(void *)(v20 + 56) = a4;
  *(unsigned char *)(v20 + 64) = v18;
  *(_DWORD *)(v20 + 68) = 0;
  *(unsigned char *)(v20 + 72) = 1;
  *(_DWORD *)(v20 + 76) = v19;
  *(unsigned char *)(v20 + 80) = 3;
  *(void *)(v20 + 88) = a7;
  return v20;
}

uint64_t Image.init(size:label:options:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  char v15 = *a5;
  int v16 = *((_DWORD *)a5 + 1);
  char v17 = a5[8];
  int v18 = *((_DWORD *)a5 + 3);
  char v19 = a5[16];
  type metadata accessor for RenderedImageProviderBox();
  uint64_t v20 = swift_allocObject();
  type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>();
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  *(void *)(v21 + 32) = 0;
  *(void *)(v21 + 40) = 0;
  *(void *)(v21 + 24) = 0;
  *(double *)(v20 + 16) = a8;
  *(double *)(v20 + 24) = a9;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  *(void *)(v20 + 48) = a3;
  *(void *)(v20 + 56) = a4;
  *(unsigned char *)(v20 + 64) = v15;
  *(_DWORD *)(v20 + 68) = v16;
  *(unsigned char *)(v20 + 72) = v17;
  *(_DWORD *)(v20 + 76) = v18;
  *(unsigned char *)(v20 + 80) = v19;
  *(void *)(v20 + 88) = a6;
  *(void *)(v20 + 96) = a7;
  *(void *)(v20 + 104) = v21;
  return v20;
}

void RenderedImageProviderBox.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unsigned int v4 = a1;
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(v2 + 104);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  id v9 = *(void **)(v7 + 24);
  uint64_t v8 = *(void **)(v7 + 32);
  uint64_t v10 = *(void *)(v7 + 40);
  outlined copy of AnyGestureInfo<()>.Value?(v9, v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  uint64_t v66 = a2;
  if (v9)
  {
    swift_retain();
    char v11 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v6);
    swift_release();
    if ((v11 & 1) == 0)
    {
      unint64_t v27 = v9;
      uint64_t v25 = v8;
      uint64_t v26 = v10;
      goto LABEL_13;
    }
    swift_retain_n();
    PropertyList.Tracker.reset()();
    swift_release();
    uint64_t v12 = (uint64_t)v9;
    uint64_t v68 = v4;
    if (!v6) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v13 = *(void *)(v6 + 64);
    goto LABEL_7;
  }
  type metadata accessor for PropertyList.Tracker();
  uint64_t v12 = swift_allocObject();
  type metadata accessor for RenderedImageProviderBox.CachedImage?(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  uint64_t v15 = MEMORY[0x263F8EE80];
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = v15;
  uint64_t v16 = MEMORY[0x263F8EE78];
  *(void *)(v14 + 40) = v15;
  *(void *)(v14 + 48) = v16;
  *(unsigned char *)(v14 + 56) = 0;
  *(void *)(v12 + 16) = v14;
  uint64_t v68 = v4;
  if (v6) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v13 = 0;
LABEL_7:
  uint64_t v17 = *(void *)(v12 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 16));
  *(void *)(v17 + 24) = v13;
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 16));
  swift_release();
  swift_retain_n();
  swift_retain_n();
  double v18 = specialized PropertyList.Tracker.value<A>(_:for:)(v6);
  swift_release_n();
  swift_release_n();
  double v19 = *(double *)(v3 + 16);
  double v20 = *(double *)(v3 + 24);
  *(void *)&long long v70 = v6;
  *((void *)&v70 + 1) = v12;
  int v21 = *(_DWORD *)(v3 + 68);
  char v22 = *(unsigned char *)(v3 + 72);
  int v23 = *(_DWORD *)(v3 + 76);
  char v24 = *(unsigned char *)(v3 + 80);
  LOBYTE(v73) = *(unsigned char *)(v3 + 64);
  HIDWORD(v73) = v21;
  LOBYTE(v74) = v22;
  HIDWORD(v74) = v23;
  LOBYTE(v75) = v24;
  uint64_t v25 = (void *)specialized static CGImageRef.render(size:scale:environment:options:renderer:)((uint64_t *)&v70, (unsigned __int8 *)&v73, *(void *)(v3 + 88), *(void *)(v3 + 96), v19, v20, v18);
  if (v25)
  {
    uint64_t v26 = *(void *)&v18;
    swift_retain();
    unint64_t v27 = (void *)v12;
  }
  else
  {
    unint64_t v27 = 0;
    uint64_t v26 = 0;
  }
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v9, v8);
  uint64_t v28 = *(void *)(v3 + 104);
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 16));
  uint64_t v29 = *(void *)(v28 + 24);
  char v30 = *(void **)(v28 + 32);
  *(void *)(v28 + 24) = v27;
  *(void *)(v28 + 32) = v25;
  *(void *)(v28 + 40) = v26;
  outlined consume of AnyGestureInfo<()>.Value?(v29, v30);
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 16));
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v27, v25);
  swift_release();
  swift_release_n();
  swift_release();
  if (!v27)
  {
    uint64_t v67 = v25;
    int v43 = 0;
    uint64_t v33 = v68[1];
    char v42 = -1;
    double v41 = 0.0;
    uint64_t v64 = 0x3FF0000000000000;
    uint64_t v65 = 0;
    double v40 = 0.0;
    goto LABEL_18;
  }
  id v9 = v27;
  unsigned int v4 = v68;
LABEL_13:
  id v31 = v25;
  uint64_t v65 = (uint64_t)v27;
  outlined copy of AnyGestureInfo<()>.Value?(v27, v25);
  int64_t Width = CGImageGetWidth(v31);
  int64_t Height = CGImageGetHeight(v31);
  uint64_t v33 = v4[1];
  uint64_t v67 = v25;
  if (v33)
  {
    uint64_t v34 = v9[2];
    swift_retain();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v34 + 16));
    int64_t v60 = Height;
    uint64_t v61 = v3;
    uint64_t v35 = *(void *)(v34 + 32);
    uint64_t v36 = *(void *)(v34 + 40);
    double v37 = *(double *)(v34 + 48);
    char v38 = *(unsigned char *)(v34 + 56);
    uint64_t v73 = *(void *)(v34 + 24);
    uint64_t v74 = v35;
    uint64_t v75 = v36;
    double v76 = v37;
    uint64_t v62 = v6;
    id v39 = *(os_unfair_lock_s **)(v33 + 16);
    LOBYTE(v77) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v39 + 4);
    TrackerData.formUnion(_:)((uint64_t)&v73);
    uint64_t v3 = v61;
    swift_bridgeObjectRelease();
    uint64_t v25 = v67;
    swift_bridgeObjectRelease();
    int64_t Height = v60;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v39 + 4);
    uint64_t v6 = v62;
    swift_release();
    os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 16));

    swift_release();
  }
  else
  {
    swift_retain();
  }
  swift_release();
  double v40 = (double)Width;
  double v41 = (double)Height;
  swift_release();
  swift_release();
  char v42 = 0;
  uint64_t v64 = v26;
  int v43 = v25;
LABEL_18:
  uint64_t v73 = v6;
  uint64_t v74 = v33;
  LOBYTE(v70) = 2;
  outlined copy of GraphicsImage.Contents?(v43, v42);
  char v44 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v70);
  if (v33)
  {
    swift_retain_n();
    swift_retain_n();
    char v45 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v6);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v73 = v6;
    uint64_t v74 = 0;
    swift_retain();
    char v45 = specialized static ShouldRedactContentKey.value(in:)(&v73);
    swift_release();
  }
  uint64_t v46 = (uint64_t)v43;
  char v47 = v42;
  if (v45)
  {
    uint64_t v46 = swift_allocObject();
    uint64_t v48 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v48 != -1) {
      swift_once();
    }
    uint64_t v73 = v6;
    uint64_t v74 = v33;
    *(float *)(v46 + 16) = (*(float (**)(uint64_t *))(*(void *)static Color.foreground + 104))(&v73);
    *(_DWORD *)(v46 + 20) = v49;
    *(_DWORD *)(v46 + 24) = v51;
    *(float *)(v46 + 28) = v50 * 0.16;
    outlined consume of GraphicsImage.Contents?(v43, v42);
    swift_release();
    swift_release();
    char v47 = 4;
  }
  uint64_t v73 = v46;
  uint64_t v52 = 0x3F8000003F800000;
  if ((v44 & 1) == 0) {
    uint64_t v52 = 0;
  }
  LOBYTE(v74) = v47;
  uint64_t v75 = v64;
  double v76 = v40;
  double v77 = v41;
  char v78 = 0;
  uint64_t v79 = v52;
  uint64_t v80 = v52;
  BOOL v81 = (v44 & 1) == 0;
  long long v82 = 0u;
  long long v83 = 0u;
  int v84 = 50397442;
  uint64_t v53 = *(void *)(v3 + 32);
  uint64_t v54 = *(void *)(v3 + 40);
  uint64_t v55 = *(void *)(v3 + 48);
  uint64_t v56 = *(void *)(v3 + 56);
  uint64_t v57 = v55 & 1;
  if (v56) {
    uint64_t v58 = *(void *)(v3 + 32);
  }
  else {
    uint64_t v58 = 0;
  }
  if (v56) {
    uint64_t v59 = *(void *)(v3 + 40);
  }
  else {
    uint64_t v59 = 0;
  }
  if (!v56) {
    uint64_t v57 = 0x1FFFFFFFELL;
  }
  *(void *)&long long v70 = v58;
  *((void *)&v70 + 1) = v59;
  uint64_t v71 = v57;
  uint64_t v72 = v56;
  unsigned __int8 v69 = 3;
  outlined copy of GraphicsImage.Contents?((id)v46, v47);
  outlined copy of Text?(v53, v54, v55, v56);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v73, v56 != 0, &v70, 0, &v69, 0.0, 1, v66);
  swift_release();
  outlined consume of GraphicsImage.Contents?(v43, v42);
  outlined consume of GraphicsImage.Contents?((void *)v46, v47);

  outlined consume of AnyGestureInfo<()>.Value?(v65, v67);
}

uint64_t RenderedImageProviderBox.isEqual(to:)()
{
  uint64_t v1 = v0;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  if (*(double *)(v0 + 16) != *(double *)(v2 + 16) || *(double *)(v0 + 24) != *(double *)(v2 + 24)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v2 + 56);
  if (!v5)
  {
    if (!v6)
    {
      swift_retain();
      goto LABEL_26;
    }
    return 0;
  }
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 40);
  uint64_t v12 = *(void *)(v2 + 48);
  if (v9)
  {
    if (v12)
    {
      uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 96);
      uint64_t v35 = *(void *)(v2 + 40);
      char v13 = *(void *)(v2 + 48);
      outlined copy of Text?(v7, v8, v9, v5);
      outlined copy of Text?(v7, v8, v9, v5);
      swift_retain();
      LOBYTE(v37) = v13;
      outlined copy of Text?(v10, v35, v13, v6);
      outlined copy of Text.Storage(v7, v8, 1);
      outlined copy of Text.Storage(v10, v35, 1);
      uint64_t v11 = v35;
      LOBYTE(v33) = v33(v10);
      outlined consume of Text.Storage(v10, v35, 1);
      outlined consume of Text.Storage(v7, v8, 1);
      char v14 = 1;
      if (v33) {
        goto LABEL_25;
      }
LABEL_17:
      outlined consume of Text.Storage(v10, v11, v14);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v7, v8, v9 & 1);
      swift_bridgeObjectRelease();
      outlined consume of Text?(v7, v8, v9, v5);
LABEL_28:
      swift_release();
      return 0;
    }
LABEL_16:
    uint64_t v15 = *(void *)(v2 + 48);
    outlined copy of Text?(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
    outlined copy of Text?(v7, v8, v9, v5);
    swift_retain();
    outlined copy of Text?(v10, v11, v15, v6);
    char v14 = (v9 & 1) == 0;
    goto LABEL_17;
  }
  if (v12) {
    goto LABEL_16;
  }
  uint64_t v37 = *(void *)(v2 + 48);
  if (v7 == v10 && v8 == v11)
  {
    outlined copy of Text?(v7, v8, v9, v5);
    outlined copy of Text?(v7, v8, v9, v5);
    swift_retain();
    outlined copy of Text?(v7, v8, v37, v6);
    goto LABEL_25;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v7, v8, v9, v5);
  outlined copy of Text?(v7, v8, v9, v5);
  swift_retain();
  outlined copy of Text?(v10, v11, v37, v6);
  char v14 = 0;
  if ((v36 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_25:
  char v34 = v37 & 1;
  char v38 = specialized static Array<A>.== infix(_:_:)(v5, v6);
  outlined consume of Text.Storage(v10, v11, v34);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v7, v8, v9, v5);
  if ((v38 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_26:
  int v17 = *(_DWORD *)(v1 + 68);
  char v18 = *(unsigned char *)(v1 + 72);
  int v19 = *(_DWORD *)(v1 + 76);
  char v20 = *(unsigned char *)(v1 + 80);
  LOBYTE(v42) = *(unsigned char *)(v1 + 64);
  HIDWORD(v42) = v17;
  LOBYTE(v43) = v18;
  HIDWORD(v43) = v19;
  char v44 = v20;
  int v21 = *(_DWORD *)(v3 + 68);
  char v22 = *(unsigned char *)(v3 + 72);
  int v23 = *(_DWORD *)(v3 + 76);
  char v24 = *(unsigned char *)(v3 + 80);
  LOBYTE(v39) = *(unsigned char *)(v3 + 64);
  HIDWORD(v39) = v21;
  LOBYTE(v40) = v22;
  HIDWORD(v40) = v23;
  char v41 = v24;
  if (!specialized static RasterizationOptions.== infix(_:_:)((unsigned __int8 *)&v42, (unsigned __int8 *)&v39)) {
    goto LABEL_28;
  }
  uint64_t v26 = *(void *)(v1 + 88);
  uint64_t v25 = *(void *)(v1 + 96);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v25;
  uint64_t v29 = *(void *)(v3 + 88);
  uint64_t v28 = *(void *)(v3 + 96);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v29;
  *(void *)(v30 + 24) = v28;
  char v42 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  uint64_t v43 = v27;
  id v39 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  uint64_t v40 = v30;
  type metadata accessor for (_:)();
  swift_retain();
  swift_retain();
  uint64_t v31 = AGCompareValues();
  swift_release();
  swift_release();
  swift_release();
  return v31;
}

uint64_t RenderedImageProviderBox.__ivar_destroyer()
{
  outlined consume of Text?(v0[4], v0[5], v0[6], v0[7]);
  swift_release();

  return swift_release();
}

uint64_t RenderedImageProviderBox.__deallocating_deinit()
{
  outlined consume of Text?(v0[4], v0[5], v0[6], v0[7]);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized static CGImageRef.render(size:scale:environment:options:renderer:)(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  int v14 = *a2;
  int v15 = *((_DWORD *)a2 + 3);
  if ((v15 & 1) != 0
    && (id v16 = objc_msgSend(self, sel_sharedDefaultDevice)) != 0)
  {
    id v17 = v16;
    swift_unknownObjectRetain();
  }
  else
  {
    id v17 = objc_msgSend(self, sel_sharedDevice);
  }
  type metadata accessor for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
  int v19 = (void *)*MEMORY[0x263F63938];
  *(void *)(inited + 32) = *MEMORY[0x263F63938];
  uint64_t v20 = MEMORY[0x263F8EF38];
  int v21 = (void **)MEMORY[0x263F63928];
  *(double *)(inited + 40) = a7;
  char v22 = *v21;
  *(void *)(inited + 64) = v20;
  *(void *)(inited + 72) = v22;
  uint64_t v23 = MEMORY[0x263F8E548];
  *(_DWORD *)(inited + 80) = v14;
  char v24 = (void *)*MEMORY[0x263F63930];
  *(void *)(inited + 104) = v23;
  *(void *)(inited + 112) = v24;
  uint64_t v25 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 120) = (v15 & 2) != 0;
  uint64_t v26 = (void *)*MEMORY[0x263F63920];
  *(void *)(inited + 144) = v25;
  *(void *)(inited + 152) = v26;
  *(void *)(inited + 184) = v23;
  *(_DWORD *)(inited + 160) = 1;
  id v27 = v19;
  id v28 = v22;
  id v29 = v24;
  id v30 = v26;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for RBImageRendererProperty(0);
  lazy protocol witness table accessor for type RBImageRendererProperty and conformance RBImageRendererProperty();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v12;
  v32[3] = v13;
  v32[4] = a3;
  v32[5] = a4;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:);
  *(void *)(v33 + 24) = v32;
  aBlock[4] = _sSo13RBDisplayListCIgg_ABIegg_TRTA_0;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  aBlock[3] = &block_descriptor_29;
  char v34 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id v35 = objc_msgSend(v17, sel_renderImageInRect_options_renderer_, isa, v34, 0.0, 0.0, a5, a6);
  swift_unknownObjectRelease();
  _Block_release(v34);
  swift_unknownObjectRelease();

  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return (uint64_t)v35;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RenderedImageProviderBox()
{
  return self;
}

void type metadata accessor for AtomicBuffer<RenderedImageProviderBox.CachedImage?>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<RenderedImageProviderBox.CachedImage?>)
  {
    type metadata accessor for RenderedImageProviderBox.CachedImage?(255, &lazy cache variable for type metadata for RenderedImageProviderBox.CachedImage?, (uint64_t)&unk_26FA6B278, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<RenderedImageProviderBox.CachedImage?>);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for RenderedImageProviderBox.CachedImage(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  id v4 = v3;
  return a1;
}

void *assignWithCopy for RenderedImageProviderBox.CachedImage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for RenderedImageProviderBox.CachedImage(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void *type metadata accessor for RenderedImageProviderBox.CachedImage()
{
  return &unk_26FA6B278;
}

uint64_t sub_246054454()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2460544F4()
{
  return swift_deallocObject();
}

void type metadata accessor for RenderedImageProviderBox.CachedImage?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>)
  {
    type metadata accessor for (RBImageRendererProperty, Any)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(RBImageRendererProperty, Any)>);
    }
  }
}

void type metadata accessor for (RBImageRendererProperty, Any)()
{
  if (!lazy cache variable for type metadata for (RBImageRendererProperty, Any))
  {
    type metadata accessor for RBImageRendererProperty(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (RBImageRendererProperty, Any));
    }
  }
}

uint64_t sub_246054614()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(void *a1)
{
  return closure #1 in static CGImageRef.render(size:scale:environment:options:renderer:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32));
}

uint64_t sub_246054660()
{
  return swift_deallocObject();
}

uint64_t _sSo13RBDisplayListCIgg_ABIegg_TRTA_0(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

BOOL Visibility.isVisible(automatic:)(uint64_t (*a1)(void), uint64_t a2, char a3)
{
  if (a3) {
    return a3 == 1;
  }
  else {
    return a1() & 1;
  }
}

SwiftUI::Visibility_optional __swiftcall Visibility.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (SwiftUI::Visibility_optional)rawValue;
}

uint64_t Visibility.rawValue.getter(uint64_t result)
{
  return result;
}

void Visibility.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

void *static Visibility.allCases.getter()
{
  return &outlined read-only object #0 of static Visibility.allCases.getter;
}

Swift::Int Visibility.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Visibility(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Visibility;
}

uint64_t Visibility.codingProxy.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

SwiftUI::CodableVisibility __swiftcall CodableVisibility.init(_:)(SwiftUI::CodableVisibility result)
{
  v1->base = result.base;
  return result;
}

uint64_t CodableVisibility.base.getter()
{
  return *v0;
}

uint64_t CodableVisibility.base.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*CodableVisibility.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableVisibility.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t CodableVisibility.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (v5 == 2) {
      char v6 = 2;
    }
    else {
      char v6 = v5 == 1;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Visibility and conformance Visibility()
{
  unint64_t result = lazy protocol witness table cache variable for type Visibility and conformance Visibility;
  if (!lazy protocol witness table cache variable for type Visibility and conformance Visibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Visibility and conformance Visibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Visibility] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Visibility] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Visibility] and conformance [A])
  {
    type metadata accessor for [Visibility]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Visibility] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [Visibility]()
{
  if (!lazy cache variable for type metadata for [Visibility])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Visibility]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility;
  if (!lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableVisibility and conformance CodableVisibility);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableVisibility(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
  unint64_t result = lazy protocol witness table accessor for type CodableVisibility and conformance CodableVisibility();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableVisibility@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  return CodableVisibility.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableVisibility(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

ValueMetadata *type metadata accessor for CodableVisibility()
{
  return &type metadata for CodableVisibility;
}

uint64_t static UserDefaultKeyedFeature.defaultFeatureValue.getter()
{
  return 0;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance UnifiedHitTestingFeature@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v2) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t result = 1;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t result = specialized static GestureContainerFeature.isEnabled.getter();
LABEL_10:
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance ImprovedButtonGestureFeature@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  if (static CoreTesting.isRunning) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = specialized static GestureContainerFeature.isEnabled.getter();
  }
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance GestureContainerFeature@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized static Feature.defaultValue.getter();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2_1@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_1.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2_3@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v2_3.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v3@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v3.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v4_4@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v4_4.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v5@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v5_2@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v5_2.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v6@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v6_1@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static _SemanticFeature_v6_1.introduced, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance Semantics.DismissPopsInNavigationSplitViewRoots@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    uint64_t result = dyld_program_minos_at_least();
  }
  else {
    uint64_t result = dword_26B0F4500 >= v2;
  }
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnabledFeature@<X0>(unsigned char *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _SemanticFeature_v2(&one-time initialization token for introduced, (unsigned int *)&static EnabledFeature.introduced, a1);
}

uint64_t static UserDefaultKeyedFeature.test<A>(enabled:_:)(char a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  uint64_t v9 = *(uint64_t (**)(void, uint64_t, uint64_t))(a6 + 48);
  uint64_t v10 = v9(a1 & 1, a4, a6);
  a2(v10);
  return v9(v13, a4, a6);
}

uint64_t dispatch thunk of static Feature.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.key.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.defaultFeatureValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.defaults.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static UserDefaultKeyedFeature.cachedValue.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t View.background<A, B>(_:in:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return View.background<A, B>(_:in:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)type metadata accessor for _BackgroundShapeModifier, (void (*)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t))_BackgroundShapeModifier.init(style:shape:fillStyle:));
}

{
  return View.background<A, B>(_:in:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)type metadata accessor for _InsettableBackgroundShapeModifier, (void (*)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t))_InsettableBackgroundShapeModifier.init(style:shape:fillStyle:));
}

uint64_t (*_BackgroundModifier.background.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundModifier.alignment.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t _BackgroundModifier.alignment.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  id v4 = (void *)(v3 + *(int *)(a3 + 36));
  *id v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t (*_BackgroundModifier.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static _BackgroundModifier<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for _BackgroundModifier() + 36);
  uint64_t v6 = *(void *)(a1 + v4);
  uint64_t v5 = *(void *)(a1 + v4 + 8);
  uint64_t v7 = (uint64_t *)(a2 + v4);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  return v6 == v9 && v5 == v8;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> _BackgroundModifier<A>(uint64_t a1, uint64_t a2)
{
  return static _BackgroundModifier<>.== infix(_:_:)(a1, a2);
}

uint64_t (*_BackgroundStyleModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundStyleModifier.ignoresSafeAreaEdges.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _BackgroundStyleModifier.ignoresSafeAreaEdges.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_BackgroundStyleModifier.ignoresSafeAreaEdges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundStyleModifier.init(style:ignoresSafeAreaEdges:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _BackgroundStyleModifier();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _BackgroundStyleModifier<A>.BackgroundInfo@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t (*_BackgroundShapeModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_BackgroundShapeModifier.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundShapeModifier.fillStyle.getter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 56));
  unsigned int v3 = *v2;
  if (v2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return v4 | v3;
}

uint64_t _BackgroundShapeModifier.fillStyle.setter(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (unsigned char *)(v2 + *(int *)(a2 + 56));
  unsigned char *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_BackgroundShapeModifier.fillStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _BackgroundShapeModifier.init(style:shape:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return _BackgroundShapeModifier.init(style:shape:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for _BackgroundShapeModifier, a8);
}

uint64_t static _BackgroundShapeModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v16 = *a2;
  int v17 = *((_DWORD *)a2 + 2);
  uint64_t v18 = a2[2];
  int v19 = *((_DWORD *)a2 + 20);
  unsigned int v32 = *a1;
  uint64_t v24 = v16;
  int v25 = v17;
  uint64_t v26 = v18;
  long long v20 = *(_OWORD *)(a2 + 5);
  long long v27 = *(_OWORD *)(a2 + 3);
  long long v28 = v20;
  long long v29 = *(_OWORD *)(a2 + 7);
  uint64_t v30 = a2[9];
  int v31 = v19;
  int v21 = (void (*)(long long *, uint64_t))default argument 4 of static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(a5, a6, a7, a8);
  static _BackgroundShapeModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:modifyPrimaryInputs:)(&v32, (uint64_t)&v24, 1, a3, a4, v21, v22, a5, a9, a6, a7, a8);

  return swift_release();
}

double _BackgroundShapeModifier.shape(in:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  (*(void (**)(_OWORD *__return_ptr, void, double, double, double, double))(*(void *)(a2 + 40) + 24))(v16, *(void *)(a2 + 24), 0.0, 0.0, a3, a4);
  uint64_t v7 = (unsigned __int8 *)(v4 + *(int *)(a2 + 56));
  int v8 = *v7;
  int v9 = v7[1];
  BOOL v10 = v8 == 0;
  uint64_t v11 = 256;
  if (v10) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = v11 | v17;
  BOOL v10 = v9 == 0;
  uint64_t v13 = 0x10000;
  if (v10) {
    uint64_t v13 = 0;
  }
  long long v14 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(void *)(a1 + 32) = v12 | v13;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundShapeModifier<A, B>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static _BackgroundShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5], a6);
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance _BackgroundShapeModifier<A, B>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return 0.0;
}

uint64_t (*_InsettableBackgroundShapeModifier.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_InsettableBackgroundShapeModifier.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_InsettableBackgroundShapeModifier.fillStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _InsettableBackgroundShapeModifier.init(style:shape:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return _BackgroundShapeModifier.init(style:shape:fillStyle:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for _InsettableBackgroundShapeModifier, a8);
}

uint64_t _BackgroundShapeModifier.init(style:shape:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9, a1, a4);
  v20[0] = a4;
  v20[1] = a5;
  v20[2] = a6;
  _OWORD v20[3] = a7;
  uint64_t v17 = a8(0, v20);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a9 + *(int *)(v17 + 52), a2, a5);
  int v19 = (unsigned char *)(a9 + *(int *)(v17 + 56));
  *int v19 = a3 & 1;
  v19[1] = HIBYTE(a3) & 1;
  return result;
}

uint64_t View.background(ignoresSafeAreaEdges:)(char a1, uint64_t a2)
{
  char v5 = a1;
  type metadata accessor for _BackgroundStyleModifier<BackgroundStyle>();
  return View.modifier<A>(_:)(&v5, a2, v3);
}

uint64_t View.background<A>(in:fillStyle:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.background<A>(in:fillStyle:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, char *, void, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t))_BackgroundShapeModifier.init(style:shape:fillStyle:), a7);
}

{
  return View.background<A>(in:fillStyle:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, char *, void, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t))_InsettableBackgroundShapeModifier.init(style:shape:fillStyle:), a7);
}

uint64_t View.background<A>(in:fillStyle:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t, char *, void, ValueMetadata *, uint64_t, _UNKNOWN **, uint64_t)@<X7>, uint64_t a8@<X8>)
{
  long long v28 = a7;
  uint64_t v29 = a5;
  v26[1] = a8;
  uint64_t v27 = a3;
  uint64_t v12 = *(void *)(a4 - 8);
  double v13 = MEMORY[0x270FA5388](a1);
  int v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[0] = &type metadata for BackgroundStyle;
  v30[1] = v16;
  v30[2] = &protocol witness table for BackgroundStyle;
  v30[3] = v17;
  uint64_t v19 = v18(0, v30, v13);
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)v26 - v22;
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a1, a4, v21);
  v28(v24, v15, a2 & 0x101, &type metadata for BackgroundStyle, a4, &protocol witness table for BackgroundStyle, a6);
  View.modifier<A>(_:)(v23, v27, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t View.background<A, B>(_:in:fillStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v41 = a7;
  uint64_t v34 = a8;
  uint64_t v35 = a1;
  uint64_t v39 = a9;
  uint64_t v40 = a4;
  int v37 = a3;
  uint64_t v36 = a2;
  char v38 = a12;
  uint64_t v14 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = v23;
  v42[1] = v24;
  v42[2] = v25;
  v42[3] = a10;
  uint64_t v27 = v26(0, v42, v20);
  uint64_t v28 = *(void *)(v27 - 8);
  double v29 = MEMORY[0x270FA5388](v27);
  int v31 = (char *)&v33 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, v35, a5, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v36, a6);
  v38(v22, v16, v37 & 0x101, a5, a6, v34, a10);
  View.modifier<A>(_:)(v31, v40, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v31, v27);
}

void type metadata accessor for _BackgroundStyleModifier<BackgroundStyle>()
{
  if (!lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>)
  {
    unint64_t v0 = type metadata accessor for _BackgroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>);
    }
  }
}

uint64_t getEnumTagSinglePayload for _BackgroundModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246055ED0);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _BackgroundModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246056090);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for _BackgroundShapeModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 2;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_9;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v17 <= 0xFF)
    {
      if (v17 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v16 = *((unsigned __int8 *)a1 + v14);
      if (!*((unsigned char *)a1 + v14)) {
        goto LABEL_26;
      }
LABEL_16:
      int v18 = (v16 - 1) << v15;
      if (v14 > 3) {
        int v18 = 0;
      }
      if (v10 + (v12 & ~v9) == -2)
      {
        int v20 = 0;
      }
      else
      {
        if (v14 <= 3) {
          int v19 = v10 + (v12 & ~v9) + 2;
        }
        else {
          int v19 = 4;
        }
        switch(v19)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v20 | v18) + 1;
    }
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v6 == v11) {
    return (*(uint64_t (**)(void))(v5 + 48))();
  }
  unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
  }
  unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
  if (v23 < 2) {
    return 0;
  }
  return ((v23 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _BackgroundShapeModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 2;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -2)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x24605662CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v12)
        {
          unint64_t v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
          if (v9 == v12)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else if (a2 > 0xFE)
          {
            *(_WORD *)(v23 + v11) = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v23 + v11) = a2 + 1;
          }
        }
      }
      return;
  }
}

uint64_t sub_246056654(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA19_BackgroundModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _BackgroundModifier);
}

uint64_t sub_246056674()
{
  return swift_getWitnessTable();
}

uint64_t sub_2460566E0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA19_BackgroundModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _BackgroundStyleModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA19_BackgroundModifierVyqd__GGAaBHPxAaBHD1__AgA0cG0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_24605677C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void *))type metadata accessor for _BackgroundShapeModifier);
}

uint64_t sub_24605679C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA10ShapeStyleRd__AA0D0Rd_0_r_0_lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _BackgroundShapeModifier);
}

uint64_t sub_2460567BC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void *))type metadata accessor for _InsettableBackgroundShapeModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA5ShapeRd__r__lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyAA0G5StyleVqd__GGAaBHPxAaBHD1__AjA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void *))
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  v5[0] = &type metadata for BackgroundStyle;
  v5[1] = v2;
  v5[2] = &protocol witness table for BackgroundStyle;
  v5[3] = v3;
  a2(255, v5);
  type metadata accessor for ModifiedContent();
  return swift_getWitnessTable();
}

uint64_t sub_246056874(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA10ShapeStyleRd__AA0D0Rd_0_r_0_lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _InsettableBackgroundShapeModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA10ShapeStyleRd__AA0D0Rd_0_r_0_lAA15ModifiedContentVyxAA011_BackgroundD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  long long v2 = *(_OWORD *)(a1 + 32);
  v4[0] = *(_OWORD *)(a1 + 8);
  v4[1] = v2;
  a2(255, v4);
  type metadata accessor for ModifiedContent();
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = v5 & 0xF8 | 7;
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v4 + 64) + 7;
  if ((v5 & 0x1000F8) != 0 || (v8 & 0xFFFFFFFFFFFFFFF8) + (((v5 & 0xF8) + 55) & ~v6) + 32 > 0x18)
  {
    uint64_t v10 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v6 + 16) & v7));
    swift_retain();
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v11;
    a1[2] = *((_OWORD *)a2 + 2);
    uint64_t v12 = ((unint64_t)a1 + 55) & v7;
    uint64_t v13 = ((unint64_t)a2 + 55) & v7;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    size_t v14 = (_OWORD *)((v8 + v13) & 0xFFFFFFFFFFFFFFF8);
    long long v15 = v14[1];
    unsigned int v16 = (_OWORD *)((v8 + v12) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v16 = *v14;
    v16[1] = v15;
  }
  return v3;
}

_OWORD *initializeWithTake for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 55;
  unint64_t v9 = (unint64_t)a1 + v7 + 55;
  unint64_t v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & v10;
  unint64_t v12 = ((unint64_t)a2 + v8) & v10;
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(v9 & v10, v12);
  uint64_t v13 = *(void *)(v6 + 32) + 7;
  size_t v14 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = (_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  _OWORD *v14 = *v15;
  v14[1] = v16;
  return a1;
}

_OWORD *assignWithTake for _BackgroundStyleModifier.BackgroundInfo.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 55;
  unint64_t v9 = (unint64_t)a1 + v7 + 55;
  unint64_t v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v9 & v10;
  unint64_t v12 = ((unint64_t)a2 + v8) & v10;
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))(v9 & v10, v12);
  uint64_t v13 = *(void *)(v6 + 24) + 7;
  size_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  v14[3] = v15[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for _BackgroundStyleModifier.BackgroundInfo.Value(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v7 = v6 | 7;
  if (v5 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((v6 + 55) & ~v7)
       + 32;
    unsigned int v9 = a2 - v5;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246056CF4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_18:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v5 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 48) & ~v7);
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _BackgroundStyleModifier.BackgroundInfo.Value(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(_DWORD *)(v6 + 80) & 0xF8;
  size_t v9 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + ((v8 + 55) & ~(v8 | 7)) + 32;
  if (v7 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v17 = (unint64_t)&a1[(v8 | 7) + 48] & ~(v8 | 7);
            unsigned int v18 = *(void (**)(unint64_t))(v6 + 56);
            v18(v17);
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + ((v8 + 55) & ~(v8 | 7)) == -32) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + ((v8 + 55) & ~(v8 | 7)) == -32) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + ((v8 + 55) & ~(v8 | 7)) != -32)
  {
    unsigned int v16 = ~v7 + a2;
    bzero(a1, v9);
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v9] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v15;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246056ED4);
    case 4:
      *(_DWORD *)&a1[v9] = v15;
      break;
    default:
      return;
  }
}

uint64_t RBUUID.init(hash:)()
{
  return RBUUIDInitFromHash();
}

void __swiftcall StrongHasher.init()(SwiftUI::StrongHasher *__return_ptr retstr)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(&v5, 0, sizeof(v5));
  CC_SHA1_Init(&v5);
  long long v2 = *(_OWORD *)&v5.h4;
  *(_OWORD *)&retstr->state.h0 = *(_OWORD *)&v5.h0;
  *(_OWORD *)&retstr->state.CC_LONG h4 = v2;
  long long v3 = *(_OWORD *)&v5.data[5];
  *(_OWORD *)&retstr->state.data[1] = *(_OWORD *)&v5.data[1];
  *(_OWORD *)&retstr->state.data[5] = v3;
  long long v4 = *(_OWORD *)&v5.data[13];
  *(_OWORD *)&retstr->state.data[9] = *(_OWORD *)&v5.data[9];
  *(_OWORD *)&retstr->state.data[13] = v4;
}

uint64_t StrongHasher.combine<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 8))(v3);
}

double StrongHasher.finalize()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0uLL;
  int v6 = 0;
  CC_SHA1_Final((unsigned __int8 *)&v5, v1);
  int v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v3;
  return result;
}

void StrongHash.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t static StrongHash.random()@<X0>(uint64_t a1@<X8>)
{
  v6[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for UUID();
  MEMORY[0x270FA5388](v2 - 8);
  long long v4 = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  return specialized StrongHash.init<A>(of:)(v4, a1);
}

double StrongHash.init<A>(encodable:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x270FA5388](v7 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    swift_release();
  }
  else
  {
    uint64_t v11 = v8;
    unint64_t v12 = v9;
    memset(&c, 0, sizeof(c));
    CC_SHA1_Init(&c);
    into.state = c;
    Data.hash(into:)(&into);
    memset(&c, 0, 20);
    CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
    outlined consume of Data._Representation(v11, v12);
    swift_release();
    CC_LONG h4 = c.h4;
    long long v14 = *(_OWORD *)&c.h0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_DWORD *)(a3 + 16) = h4;
  }
  return result;
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance ToggleState(CC_SHA1_CTX *a1)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v11 - v8;
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, AssociatedTypeWitness, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

__n128 StrongHash.init<A>(of:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  memset(&c, 0, sizeof(c));
  CC_SHA1_Init(&c);
  CC_SHA1_CTX v11 = c;
  (*(void (**)(CC_SHA1_CTX *, uint64_t, uint64_t))(a3 + 8))(&v11, a2, a3);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &v11);
  LODWORD(a3) = c.h4;
  __n128 v9 = *(__n128 *)&c.h0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  __n128 result = v9;
  *a4 = v9;
  a4[1].n128_u32[0] = a3;
  return result;
}

uint64_t StrongHasher.combineBytes(_:count:)(void *data, unint64_t len)
{
  if ((len & 0x8000000000000000) != 0 || HIDWORD(len))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return CC_SHA1_Update(v2, data, len);
  }
  return result;
}

uint64_t StrongHash.words.getter()
{
  return *(void *)v0;
}

uint64_t StrongHash.words.setter(uint64_t result, int a2, int a3, int a4, int a5)
{
  *long long v5 = result;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  void v5[4] = a5;
  return result;
}

uint64_t (*StrongHash.words.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrongHash.hash(into:)()
{
  return Hasher.combine(bytes:)();
}

uint64_t StrongHash.description.getter()
{
  int v1 = *v0;
  int v2 = v0[1];
  int v3 = v0[2];
  int v4 = v0[3];
  int v5 = v0[4];
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2461BDB00;
  uint64_t v7 = MEMORY[0x263F8E8F8];
  uint64_t v8 = MEMORY[0x263F8E960];
  *(void *)(v6 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v6 + 64) = v8;
  *(_DWORD *)(v6 + 32) = v5;
  *(void *)(v6 + 96) = v7;
  *(void *)(v6 + 104) = v8;
  *(_DWORD *)(v6 + 72) = v4;
  *(void *)(v6 + 136) = v7;
  *(void *)(v6 + 144) = v8;
  *(_DWORD *)(v6 + 112) = v3;
  *(void *)(v6 + 176) = v7;
  *(void *)(v6 + 184) = v8;
  *(_DWORD *)(v6 + 152) = v2;
  *(void *)(v6 + 216) = v7;
  *(void *)(v6 + 224) = v8;
  *(_DWORD *)(v6 + 192) = v1;

  return String.init(format:_:)();
}

uint64_t StrongHash.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

{
  int *v1;
  int *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  int64_t isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int64_t v26;
  _DWORD *v27;

  int v2 = v1;
  int v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v8 = v2[4];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  __n128 v9 = a1[1];
  unsigned int v10 = (void *)a1[3];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    unsigned int v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  int v13 = v10[2];
  uint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    char isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    unsigned int v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  a1[3] = v10;
  long long v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  a1[1] = v14;
  char isUniquelyReferenced_nonNull_native = v9 + 5;
  if (__OFADD__(v14, 4))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (a1[2] >= isUniquelyReferenced_nonNull_native)
  {
    a1[1] = isUniquelyReferenced_nonNull_native;
    int v15 = (_DWORD *)(*a1 + v14);
    goto LABEL_9;
  }
LABEL_24:
  int v15 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_9:
  *int v15 = v5;
  unsigned int v16 = a1[1];
  uint64_t v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v17)
  {
    a1[1] = v17;
    unsigned int v18 = (_DWORD *)(*a1 + v16);
    goto LABEL_12;
  }
  unsigned int v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_12:
  *unsigned int v18 = v4;
  int v19 = a1[1];
  unsigned int v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v20)
  {
    a1[1] = v20;
    int v21 = (_DWORD *)(*a1 + v19);
    goto LABEL_15;
  }
  int v21 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20);
LABEL_15:
  unsigned char *v21 = v7;
  unint64_t v22 = a1[1];
  unint64_t v23 = v22 + 4;
  if (__OFADD__(v22, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v23)
  {
    a1[1] = v23;
    uint64_t v24 = (_DWORD *)(*a1 + v22);
    goto LABEL_18;
  }
  uint64_t v24 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v23);
LABEL_18:
  *uint64_t v24 = v6;
  uint64_t v25 = a1[1];
  uint64_t v26 = v25 + 4;
  if (__OFADD__(v25, 4))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (a1[2] < v26)
  {
LABEL_32:
    uint64_t v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
    goto LABEL_21;
  }
  a1[1] = v26;
  uint64_t v27 = (_DWORD *)(*a1 + v25);
LABEL_21:
  *uint64_t v27 = v8;
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t StrongHash.init(from:)@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    int v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    int v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    int v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    int v13 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, v12);
    int v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    *a2 = v5;
    a2[1] = v6;
    int v10 = v13;
    a2[2] = v7;
    a2[3] = v10;
    a2[4] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int StrongHash.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StrongHash()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StrongHash()
{
  return Hasher.combine(bytes:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StrongHash()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance StrongHash@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return StrongHash.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StrongHash(void *a1)
{
  return StrongHash.encode(to:)(a1);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance StrongHash(CC_SHA1_CTX *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *((_DWORD *)v1 + 4);
  long long v4 = *v1;
  int v5 = v2;
  return CC_SHA1_Update(a1, &v4, 0x14u);
}

Swift::Void __swiftcall StronglyHashableByBitPattern.hash(into:)(SwiftUI::StrongHasher *into)
{
  uint64_t v5 = v1;
  uint64_t v6 = into;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:), (uint64_t)&v4, v1, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v2);
}

uint64_t StrongHasher.combineBitPattern<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[2] = a2;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:), (uint64_t)v9, a2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], a8);
}

uint64_t closure #1 in StrongHasher.combineBitPattern<A>(_:)(void *data, CC_SHA1_CTX *c, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3 - 8) + 64);
  if ((v3 & 0x8000000000000000) == 0 && !HIDWORD(v3)) {
    return CC_SHA1_Update(c, data, v3);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StrongHasher.combineType(_:)()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  AGTypeGetSignature();
  return CC_SHA1_Update(v0, &v2, 0x14u);
}

Swift::Void __swiftcall String.hash(into:)(SwiftUI::StrongHasher *into)
{
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = v1 & 0xFFFFFFFFFFFFLL;
  }
  if (v3)
  {
    uint64_t v5 = String.utf8CString.getter();
    unint64_t v6 = *(void *)(v5 + 16);
    if (HIDWORD(v6))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      CC_SHA1_Update(&into->state, (const void *)(v5 + 32), v6);
      swift_release();
    }
  }
}

void protocol witness for StronglyHashable.hash(into:) in conformance String(SwiftUI::StrongHasher *into)
{
}

Swift::Void __swiftcall Data.hash(into:)(SwiftUI::StrongHasher *into)
{
  data[2] = *MEMORY[0x263EF8340];
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v15 = (v1 >> 32) - (int)v1;
      if (v1 >> 32 < (int)v1)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      outlined copy of Data._Representation(v1, v2);
      uint64_t v16 = __DataStorage._bytes.getter();
      if (!v16)
      {
        __DataStorage._length.getter();
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x2460583A8);
      }
      uint64_t v17 = v16;
      uint64_t v18 = __DataStorage._offset.getter();
      uint64_t v19 = (int)v4 - v18;
      if (__OFSUB__((int)v4, v18))
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v15) {
        uint64_t v21 = (v4 >> 32) - (int)v4;
      }
      else {
        LODWORD(v21) = v20;
      }
      CC_SHA1_Update(&into->state, (const void *)(v17 + v19), v21);
      outlined consume of Data._Representation(v4, v3);
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(v1 + 16);
      uint64_t v8 = *(void *)(v1 + 24);
      swift_retain();
      swift_retain();
      int v9 = (char *)__DataStorage._bytes.getter();
      if (!v9) {
        goto LABEL_6;
      }
      uint64_t v10 = __DataStorage._offset.getter();
      if (__OFSUB__(v7, v10)) {
        goto LABEL_29;
      }
      v9 += v7 - v10;
LABEL_6:
      BOOL v11 = __OFSUB__(v8, v7);
      uint64_t v12 = v8 - v7;
      if (v11) {
        goto LABEL_27;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = v13;
      }
      if (!v9) {
        goto LABEL_31;
      }
      if (v14 >= 0x100000000) {
        goto LABEL_32;
      }
      CC_SHA1_Update(&into->state, v9, v14);
      swift_release();
      swift_release();
      return;
    case 3uLL:
      memset(data, 0, 14);
      CC_LONG v6 = 0;
      goto LABEL_16;
    default:
      data[0] = v1;
      LOWORD(data[1]) = v2;
      BYTE2(data[1]) = BYTE2(v2);
      BYTE3(data[1]) = BYTE3(v2);
      BYTE4(data[1]) = BYTE4(v2);
      CC_LONG v6 = BYTE6(v2);
      BYTE5(data[1]) = BYTE5(v3);
LABEL_16:
      CC_SHA1_Update(&into->state, data, v6);
      return;
  }
}

void protocol witness for StronglyHashable.hash(into:) in conformance Data(SwiftUI::StrongHasher *into)
{
}

Swift::Void __swiftcall Bool.hash(into:)(SwiftUI::StrongHasher *into)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  char data = v1;
  CC_SHA1_Update(&into->state, &data, 1u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Bool(CC_SHA1_CTX *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  char data = *v1;
  return CC_SHA1_Update(a1, &data, 1u);
}

uint64_t Optional<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  int v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v10, v4, v7);
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, v11, a3);
    uint64_t v6 = v12;
    uint64_t v4 = v11;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int(a1);
}

{
  void *v1;
  void v3[2];

  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int8(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Bool(a1);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int16(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int16(a1);
}

{
  __int16 *v1;
  __int16 data;
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x263EF8340];
  char data = *v1;
  return CC_SHA1_Update(a1, &data, 2u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Int32(CC_SHA1_CTX *a1)
{
  return protocol witness for StronglyHashable.hash(into:) in conformance Int32(a1);
}

{
  int *v1;
  int data;
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x263EF8340];
  char data = *v1;
  return CC_SHA1_Update(a1, &data, 4u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Float(CC_SHA1_CTX *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  int data = *v1;
  return CC_SHA1_Update(a1, &data, 4u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance Double(CC_SHA1_CTX *a1)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = *v1;
  return CC_SHA1_Update(a1, v3, 8u);
}

uint64_t protocol witness for StronglyHashable.hash(into:) in conformance UUID(CC_SHA1_CTX *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(a2 - 8) + 64);
  if ((v3 & 0x8000000000000000) != 0 || HIDWORD(v3))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return CC_SHA1_Update(a1, v2, v3);
  }
  return result;
}

unint64_t StrongHash.init(from:)@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v17 = 0;
    int v7 = 0;
    int v8 = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    while (2)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v14 = v3[4];
        if (v5 < v14)
        {
LABEL_15:
          unint64_t v15 = result & 7;
          if ((result & 0xFFFFFFFFFFFFFFF8) != 8)
          {
            switch(result & 7)
            {
              case 0uLL:
                uint64_t result = ProtobufDecoder.decodeVarint()();
                if (v2) {
                  return result;
                }
                unint64_t v5 = v3[1];
                uint64_t v12 = v10;
                goto LABEL_8;
              case 1uLL:
                unint64_t v5 = v3[1] + 8;
                goto LABEL_34;
              case 2uLL:
                uint64_t result = ProtobufDecoder.decodeVarint()();
                if (v2) {
                  return result;
                }
                if ((result & 0x8000000000000000) != 0) {
                  goto LABEL_42;
                }
                unint64_t v5 = v3[1] + result;
LABEL_34:
                if (v6 < v5) {
                  goto LABEL_38;
                }
                v3[1] = v5;
                uint64_t v12 = v10;
LABEL_8:
                unint64_t v6 = v3[2];
                uint64_t v10 = v12;
                if (v5 < v6) {
                  continue;
                }
                goto LABEL_4;
              case 5uLL:
                unint64_t v5 = v3[1] + 4;
                goto LABEL_34;
              default:
                goto LABEL_38;
            }
          }
          if (v15 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
              JUMPOUT(0x246058E2CLL);
            }
            uint64_t v16 = (unsigned int *)v3[1];
            if (v6 < (unint64_t)v16 + result) {
              goto LABEL_38;
            }
            v3[3] = 13;
            v3[4] = (char *)v16 + result;
            goto LABEL_26;
          }
          if (v15 == 5)
          {
            uint64_t v16 = (unsigned int *)v3[1];
LABEL_26:
            unint64_t v5 = (unint64_t)(v16 + 1);
            if (v6 >= (unint64_t)(v16 + 1))
            {
              uint64_t v12 = *v16;
              v3[1] = v5;
              switch(v11)
              {
                case 0:
                  goto LABEL_7;
                case 1:
                  int v9 = v12;
                  goto LABEL_6;
                case 2:
                  int v8 = v12;
                  goto LABEL_6;
                case 3:
                  int v7 = v12;
                  goto LABEL_6;
                case 4:
                  int v17 = v12;
                  goto LABEL_6;
                default:
LABEL_6:
                  uint64_t v12 = v10;
LABEL_7:
                  if (!__OFADD__(v11++, 1)) {
                    goto LABEL_8;
                  }
                  __break(1u);
                  break;
              }
              goto LABEL_41;
            }
          }
LABEL_38:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          return swift_willThrow();
        }
        if (v14 < v5) {
          goto LABEL_38;
        }
        v3[3] = 0;
      }
      break;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_38;
    }
    goto LABEL_15;
  }
  int v17 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  LODWORD(v12) = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v12;
  a2[1] = v9;
  a2[2] = v8;
  a2[3] = v7;
  a2[4] = v17;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance StrongHash(void *a1)
{
  return StrongHash.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance StrongHash@<X0>(unint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return StrongHash.init(from:)(a1, a2);
}

BOOL specialized static StrongHash.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].i32[0] == a2[1].i32[0];
}

uint64_t partial apply for closure #1 in StrongHasher.combineBitPattern<A>(_:)(void *a1)
{
  return closure #1 in StrongHasher.combineBitPattern<A>(_:)(a1, *(CC_SHA1_CTX **)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t dispatch thunk of StronglyHashable.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for StrongHash()
{
  return &type metadata for StrongHash;
}

ValueMetadata *type metadata accessor for StrongHasher()
{
  return &type metadata for StrongHasher;
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance UnitCurveAnimation()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t CustomAnimation.shouldMerge<A>(previous:value:time:context:)()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance SpringAnimation@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return CustomAnimation.velocity<A>(value:time:context:)(a1, a2);
}

uint64_t CustomAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t EncodableAnimation.encodeAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 + 8) + 8))(a1, a2);
  }
  else {
    return ProtobufEncoder.messageField<A>(_:_:)(v7, v3, a2, *(void *)(a3 + 8));
  }
}

uint64_t dispatch thunk of CustomAnimation.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of CustomAnimation.velocity<A>(value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of CustomAnimation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 32))();
}

uint64_t dispatch thunk of InternalCustomAnimation.function.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static Never._viewListCount(inputs:)()
{
  return 0;
}

_UNKNOWN **associated type witness table accessor for View.Body : View in Never()
{
  return &protocol witness table for Never;
}

uint64_t closure #1 in withDelay(_:do:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_246059138()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))(*(void *)(a1 + 16));
}

uint64_t protocol witness for DynamicViewContent.data.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(void *)(a2 - 8));
}

uint64_t static DynamicViewContentIDTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t static DynamicViewContentOffsetTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicContentOffsetVisitor.offset.getter()
{
  return *(void *)v0;
}

uint64_t DynamicContentOffsetVisitor.offset.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*DynamicContentOffsetVisitor.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContentOffsetVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 1, v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v6 & 1;
  return 0;
}

uint64_t associated type witness table accessor for DynamicViewContent.Data : Collection in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 40) + 8) + 8);
}

uint64_t instantiation function for generic protocol witness table for <> ForEach<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DynamicViewContent.Data : Collection in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for ViewListVisitor.visit(view:traits:) in conformance DynamicContentOffsetVisitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, 1, v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v4;
  *(unsigned char *)(v2 + 8) = v6 & 1;
  return 0;
}

uint64_t dispatch thunk of DynamicViewContent.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for DynamicViewContentIDTraitKey()
{
  return &type metadata for DynamicViewContentIDTraitKey;
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

ValueMetadata *type metadata accessor for DynamicContentOffsetVisitor()
{
  return &type metadata for DynamicContentOffsetVisitor;
}

uint64_t dispatch thunk of TextAlignmentDependentFormatStyle.textAlignment(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

BOOL PreferencesInputs.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (uint64_t *)(*(void *)v2 + 32);
  uint64_t v5 = v3 - 1;
  do
  {
    uint64_t v6 = *v4;
    v4 += 2;
    BOOL result = v6 == a2;
  }
  while (v6 != a2 && v5-- != 0);
  return result;
}

uint64_t PreferencesInputs.keys.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t PreferencesInputs.keys.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*PreferencesInputs.keys.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*PreferencesInputs.hostKeys.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

ValueMetadata *type metadata accessor for PreferencesInputs()
{
  return &type metadata for PreferencesInputs;
}

uint64_t TypeConformance.unsafeExistentialMetatype<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  long long v4 = *v2;
  if (*(void *)(*(void *)(a1 - 8) + 64) == 16) {
    return (*(uint64_t (**)(uint64_t, long long *))(*(void *)(a1 - 8) + 16))(a2, &v4);
  }
  __break(1u);
  return result;
}

uint64_t TypeConformance.storage.getter()
{
  return *(void *)v0;
}

uint64_t TypeConformance.init(storage:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t TypeConformance.conformance.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t TypeConformance.metadata.getter()
{
  return *(void *)v0;
}

uint64_t dispatch thunk of static ProtocolDescriptor.descriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double TimeDataFormatting.UpdateFrequency.magnitude.getter@<D0>(double *a1@<X8>)
{
  double result = 1.0 / dbl_246207550[*v1];
  *a1 = result;
  return result;
}

double TimeDataFormatting.UpdateFrequency.interval.getter()
{
  return 1.0 / dbl_246207550[*v0];
}

BOOL static TimeDataFormatting.UpdateFrequency.< infix(_:_:)(char *a1, char *a2)
{
  return dbl_246207550[*a1] < dbl_246207550[*a2];
}

BOOL static TimeDataFormatting.UpdateFrequency.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TimeDataFormatting.UpdateFrequency.init(duration:)@<X0>(char *a1@<X8>)
{
  static Duration.seconds(_:)();
  uint64_t result = static Duration.< infix(_:_:)();
  if (result)
  {
    static Duration.seconds(_:)();
    uint64_t result = static Duration.< infix(_:_:)();
    if (result) {
      char v3 = 2;
    }
    else {
      char v3 = 1;
    }
  }
  else
  {
    char v3 = 0;
  }
  *a1 = v3;
  return result;
}

uint64_t TimeDataFormatting.UpdateFrequency.duration.getter()
{
  return static Duration.seconds(_:)();
}

double TimeDataFormatting.UpdateFrequency.frequency.getter()
{
  return dbl_246207550[*v0];
}

void TimeDataFormatting.UpdateFrequency.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  uint64_t v1 = 0x646E6F636573;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574756E696DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1751607656;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TimeDataFormatting.UpdateFrequency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TimeDataFormatting.UpdateFrequency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();

  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.CodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();

  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();

  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();

  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();

  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();

  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();

  return MEMORY[0x270FA00B0](a1, updated);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys(uint64_t a1)
{
  unint64_t updated = lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();

  return MEMORY[0x270FA00B8](a1, updated);
}

uint64_t TimeDataFormatting.UpdateFrequency.encode(to:)(void *a1)
{
  char v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, (uint64_t)&unk_26FA5C8D8, MEMORY[0x263F8E0C0]);
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)&v22 - v5;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.SecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys, (uint64_t)&unk_26FA5C8F8, v3);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v24 = (char *)&v22 - v7;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.HighCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys, (uint64_t)&unk_26FA5C8B8, v3);
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - v9;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys, (uint64_t)&unk_26FA5C828, v3);
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v22 - v13;
  int v15 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v15)
  {
    if (v15 == 1)
    {
      char v32 = 1;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
      uint64_t v16 = v24;
      uint64_t v17 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v25;
      uint64_t v18 = v26;
    }
    else
    {
      char v33 = 2;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
      uint64_t v16 = v27;
      uint64_t v17 = v30;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v19 = v28;
      uint64_t v18 = v29;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v17);
  }
  else
  {
    char v31 = 0;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
    uint64_t v20 = v30;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  }
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys;
  if (!lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys);
  }
  return result;
}

Swift::Int TimeDataFormatting.UpdateFrequency.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t TimeDataFormatting.UpdateFrequency.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v43 = a2;
  char v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys, (uint64_t)&unk_26FA5C8D8, MEMORY[0x263F8E040]);
  uint64_t v42 = v4;
  uint64_t v39 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v47 = (char *)&v37 - v5;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.SecondCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys, (uint64_t)&unk_26FA5C8F8, v3);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v46 = (char *)&v37 - v7;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.HighCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys, (uint64_t)&unk_26FA5C8B8, v3);
  uint64_t v9 = v8;
  uint64_t v45 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v37 - v10;
  type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TimeDataFormatting.UpdateFrequency.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys, (uint64_t)&unk_26FA5C828, v3);
  uint64_t v13 = v12;
  uint64_t v44 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v37 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.CodingKeys and conformance TimeDataFormatting.UpdateFrequency.CodingKeys();
  uint64_t v16 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v37 = v9;
  uint64_t v38 = v13;
  uint64_t v17 = v45;
  uint64_t v18 = v46;
  uint64_t v19 = v47;
  uint64_t v48 = a1;
  uint64_t v20 = v15;
  uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v21 + 16) != 1)
  {
    uint64_t v27 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v29 = v28;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v29 = &type metadata for TimeDataFormatting.UpdateFrequency;
    uint64_t v30 = v38;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v30);
    a1 = v48;
LABEL_7:
    uint64_t v31 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v31);
  }
  int v22 = *(unsigned __int8 *)(v21 + 32);
  if (*(unsigned char *)(v21 + 32))
  {
    if (v22 == 1)
    {
      char v50 = 1;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.SecondCodingKeys and conformance TimeDataFormatting.UpdateFrequency.SecondCodingKeys();
      uint64_t v23 = v18;
      uint64_t v24 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v43;
      uint64_t v25 = v44;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v41);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v24);
    }
    else
    {
      char v51 = 2;
      lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.MinuteCodingKeys and conformance TimeDataFormatting.UpdateFrequency.MinuteCodingKeys();
      uint64_t v34 = v19;
      uint64_t v35 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v26 = v43;
      uint64_t v36 = v44;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v35);
    }
  }
  else
  {
    char v47 = (char *)v21;
    char v49 = 0;
    lazy protocol witness table accessor for type TimeDataFormatting.UpdateFrequency.HighCodingKeys and conformance TimeDataFormatting.UpdateFrequency.HighCodingKeys();
    uint64_t v33 = v38;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v33);
    uint64_t v26 = v43;
  }
  *uint64_t v26 = v22;
  uint64_t v31 = (uint64_t)v48;
  return __swift_destroy_boxed_opaque_existential_1(v31);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TimeDataFormatting.UpdateFrequency@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return TimeDataFormatting.UpdateFrequency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TimeDataFormatting.UpdateFrequency(void *a1)
{
  return TimeDataFormatting.UpdateFrequency.encode(to:)(a1);
}

void type metadata accessor for KeyedEncodingContainer<TimeDataFormatting.UpdateFrequency.MinuteCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_246207550[*a1] < dbl_246207550[*a2];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_246207550[*a2] >= dbl_246207550[*a1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_246207550[*a1] >= dbl_246207550[*a2];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance TimeDataFormatting.UpdateFrequency(char *a1, char *a2)
{
  return dbl_246207550[*a2] < dbl_246207550[*a1];
}

uint64_t Date.FormatStyle.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.FormatStyle.updateFrequency(_:)(a1, MEMORY[0x263F07258], MEMORY[0x263F07200], MEMORY[0x263F070A0], a2);
}

uint64_t Date.FormatStyle.Attributed.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.FormatStyle.updateFrequency(_:)(a1, MEMORY[0x263F07090], MEMORY[0x263F07058], MEMORY[0x263F07018], a2);
}

uint64_t Date.FormatStyle.updateFrequency(_:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void, double)@<X1>, void (*a3)(char *)@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v25 = a3;
  uint64_t v7 = v5;
  uint64_t v10 = type metadata accessor for Date.FormatStyle.Symbol.SecondFraction();
  uint64_t v26 = *(void *)(v10 - 8);
  uint64_t v27 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a2(0, v15);
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  int v22 = (char *)&v25 - v21;
  int v23 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(v19 + 16))(a5, v7, v18, v20);
  if (v23)
  {
    if (v23 != 1)
    {
      MEMORY[0x24C521110](result);
      v25(v17);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v22, v18);
    }
    static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
    v28(v12);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v27);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a5, v22, v18);
  }
  return result;
}

uint64_t WhitespaceRemovingFormatStyle<>.updateFrequency(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *v12;
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(v14 - 8) + 16))(a4, v4, v9);
  char v17 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 16))(&v17, v7, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a4, v11, v7);
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WhitespaceRemovingFormatStyle<>.updateFrequency(_:)(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t Date.AnchoredRelativeFormatStyle.updateFrequency(_:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v31 - v12;
  uint64_t v14 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v15 = *(void *)(v14 - 8);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v14);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = *a1;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  if (*a1)
  {
    uint64_t v33 = a2;
    v21((char *)&v31 - v18, v2, v14, v16.n128_f64[0]);
    uint64_t v22 = Date.AnchoredRelativeFormatStyle.allowedFields.getter();
    uint64_t v23 = specialized _NativeSet.filter(_:)(v22, v20, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.filter(_:));
    uint64_t v24 = (void (*)(unsigned char *, void))Date.AnchoredRelativeFormatStyle.allowedFields.modify();
    specialized Set._subtract<A>(_:)(v23, MEMORY[0x263F073D0], &lazy cache variable for type metadata for Date.ComponentsFormatStyle.Field?, MEMORY[0x263F073D0], (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_release();
    v24(v34, 0);
    uint64_t v25 = *(void *)(Date.AnchoredRelativeFormatStyle.allowedFields.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v25)
    {
      if (v20 >= 2) {
        static Date.ComponentsFormatStyle.Field.minute.getter();
      }
      else {
        static Date.ComponentsFormatStyle.Field.second.getter();
      }
      uint64_t v27 = v31;
      uint64_t v28 = v7;
      uint64_t v29 = v32;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v10, v28, v32);
      uint64_t v30 = (void (*)(unsigned char *, void))Date.AnchoredRelativeFormatStyle.allowedFields.modify();
      specialized Set._Variant.insert(_:)((uint64_t)v13, v10);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v29);
      v30(v34, 0);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v33, v19, v14);
  }
  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v21)(a2, v2, v14, v16);
  }
}

void Duration.UnitsFormatStyle.updateFrequency(_:)(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  uint64_t v84 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v77 = (char *)&v70 - v9;
  MEMORY[0x270FA5388](v10);
  long long v82 = (char *)&v70 - v11;
  MEMORY[0x270FA5388](v12);
  BOOL v81 = (char *)&v70 - v13;
  uint64_t v83 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v87 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v79 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v80 = (char *)&v70 - v16;
  MEMORY[0x270FA5388](v17);
  double v76 = (char *)&v70 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v70 - v20;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v70 - v23;
  MEMORY[0x270FA5388](v25);
  v86 = (char *)&v70 - v26;
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v78 = (uint64_t)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v70 - v30;
  uint64_t v32 = type metadata accessor for Duration.UnitsFormatStyle();
  v35.n128_f64[0] = MEMORY[0x270FA5388](v32);
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v38 = (char *)&v70 - v37;
  uint64_t v39 = *a1;
  uint64_t v40 = *(void (**)(char *, uint64_t, double))(v34 + 16);
  if (*a1)
  {
    uint64_t v70 = v34;
    uint64_t v72 = v7;
    uint64_t v75 = v5;
    uint64_t v73 = a2;
    uint64_t v71 = v33;
    v40((char *)&v70 - v37, v2, v35.n128_f64[0]);
    uint64_t v41 = Duration.UnitsFormatStyle.allowedUnits.getter();
    uint64_t v42 = specialized _NativeSet.filter(_:)(v41, v39, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeSet.filter(_:));
    uint64_t v43 = (void (*)(double *, void))Duration.UnitsFormatStyle.allowedUnits.modify();
    specialized Set._subtract<A>(_:)(v42, MEMORY[0x263F07EC8], &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8], (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_release();
    v43(v88, 0);
    uint64_t v44 = (void *)Duration.UnitsFormatStyle.allowedUnits.getter();
    specialized Sequence.min(by:)(v44, (uint64_t)v31);
    swift_bridgeObjectRelease();
    uint64_t v85 = v31;
    if (v39 == 2) {
      static Duration.UnitsFormatStyle.Unit.minutes.getter();
    }
    else {
      static Duration.UnitsFormatStyle.Unit.seconds.getter();
    }
    uint64_t v45 = v86;
    uint64_t v46 = v87;
    uint64_t v47 = v83;
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
    v74(v86, v24, v83);
    uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
    if (v48(v85, 1, v47) == 1)
    {
      char v49 = v76;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v76, v45, v47);
      char v50 = (void (*)(double *, void))Duration.UnitsFormatStyle.allowedUnits.modify();
      specialized Set._Variant.insert(_:)((uint64_t)v21, v49);
      uint64_t v45 = v86;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v21, v47);
      v50(v88, 0);
      uint64_t v46 = v87;
    }
    uint64_t v51 = v78;
    outlined init with copy of Duration.UnitsFormatStyle.Unit?((uint64_t)v85, v78);
    uint64_t v52 = v79;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v79, v45, v47);
    if (v48((char *)v51, 1, v47) == 1)
    {
      uint64_t v53 = v80;
      v74(v80, v52, v47);
      outlined destroy of Duration.UnitsFormatStyle.Unit?(v51, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v47);
      uint64_t v53 = v80;
      v74(v80, (char *)v51, v47);
    }
    Duration.UnitsFormatStyle.Unit.magnitude.getter(v88);
    uint64_t v54 = *(void (**)(char *, uint64_t))(v46 + 8);
    uint64_t v87 = v46 + 8;
    v54(v53, v47);
    double v55 = 60.0;
    if (v39 != 2) {
      double v55 = 1.0;
    }
    double v56 = v55 / v88[0];
    if (v88[0] == 0.0) {
      double v57 = INFINITY;
    }
    else {
      double v57 = v56;
    }
    uint64_t v58 = v81;
    Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter();
    char v60 = v59;
    uint64_t v61 = *(void (**)(char *, uint64_t))(v84 + 8);
    uint64_t v62 = v75;
    v61(v58, v75);
    if ((v60 & 1) == 0)
    {
      uint64_t v63 = (void (*)(double *, void))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
      Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter();
      v63(v88, 0);
    }
    uint64_t v64 = v82;
    Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
    Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
    v61(v64, v62);
    double v65 = log10(1.0 / v57);
    if ((~*(void *)&v65 & 0x7FF0000000000000) != 0)
    {
      if (v65 > -9.22337204e18)
      {
        if (v65 < 9.22337204e18)
        {
          uint64_t v66 = (void (*)(double *, void))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
          Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter();
          v66(v88, 0);
          uint64_t v67 = v77;
          Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
          Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter();
          v61(v67, v62);
          uint64_t v68 = v72;
          Duration.UnitsFormatStyle.fractionalPartDisplay.getter();
          Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter();
          v61(v68, v62);
          unsigned __int8 v69 = (void (*)(double *, void))Duration.UnitsFormatStyle.fractionalPartDisplay.modify();
          Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter();
          v69(v88, 0);
          v54(v86, v47);
          outlined destroy of Duration.UnitsFormatStyle.Unit?((uint64_t)v85, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v73, v38, v71);
          return;
        }
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_26:
    __break(1u);
    return;
  }

  ((void (*)(uint64_t, uint64_t, __n128))v40)(a2, v2, v35);
}

uint64_t specialized Sequence.min(by:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (uint64_t (**)(char *, uint64_t))((char *)&v45 - v9);
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v12 = *(void (**)(char *, uint64_t (**)(char *, uint64_t), uint64_t))(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  double v57 = (char *)&v45 - v17;
  uint64_t v18 = a1[7];
  uint64_t v48 = (char *)(a1 + 7);
  char v19 = *((unsigned char *)a1 + 32);
  uint64_t v20 = 1 << v19;
  uint64_t v21 = -1;
  if (1 << v19 < 64) {
    uint64_t v21 = ~(-1 << (1 << v19));
  }
  unint64_t v22 = v21 & v18;
  if (!v22)
  {
    unsigned int v39 = v19 & 0x3F;
    if (v39 > 6)
    {
      unint64_t v40 = a1[8];
      if (v40)
      {
        uint64_t v45 = a2;
        uint64_t v46 = v2;
        a2 = 1;
        goto LABEL_34;
      }
      if (v39 >= 8)
      {
        unint64_t v40 = a1[9];
        uint64_t v45 = a2;
        uint64_t v46 = v2;
        if (v40)
        {
          a2 = 2;
          goto LABEL_34;
        }
        unint64_t v40 = a1[10];
        if (v40)
        {
          a2 = 3;
          goto LABEL_34;
        }
        if (v39 >= 9)
        {
          unint64_t v40 = a1[11];
          if (!v40) {
            goto LABEL_47;
          }
          a2 = 4;
          goto LABEL_34;
        }
      }
    }
LABEL_55:
    uint64_t v28 = (void (*)(uint64_t (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t, __n128))*((void *)v12 + 7);
    v28(v10, 1, 1, v11, v16);
    goto LABEL_56;
  }
  uint64_t v50 = 1 << v19;
  uint64_t v45 = a2;
  uint64_t v46 = v2;
  a2 = 0;
  unint64_t v23 = __clz(__rbit64(v22));
  unint64_t v24 = (v22 - 1) & v22;
  while (1)
  {
    uint64_t v25 = *((void *)v12 + 9);
    unint64_t v26 = a1[6] + v25 * v23;
    uint64_t v27 = (void (*)(char *, unint64_t, uint64_t))*((void *)v12 + 2);
    uint64_t v54 = (char *)v12 + 16;
    uint64_t v55 = v25;
    uint64_t v53 = v27;
    ((void (*)(uint64_t (**)(char *, uint64_t), unint64_t, uint64_t, __n128))v27)(v10, v26, v11, v16);
    double v56 = (void (*)(void *, uint64_t, uint64_t, uint64_t, __n128))*((void *)v12 + 7);
    ((void (*)(uint64_t (**)(char *, uint64_t), void, uint64_t, uint64_t))v56)(v10, 0, 1, v11);
    uint64_t v51 = (unsigned int (*)(uint64_t (**)(char *, uint64_t), uint64_t, uint64_t))*((void *)v12 + 6);
    uint64_t v52 = (char *)v12 + 48;
    if (v51(v10, 1, v11) == 1)
    {
      a2 = v45;
      uint64_t v28 = (void (*)(uint64_t (**)(char *, uint64_t), uint64_t, uint64_t, uint64_t, __n128))v56;
LABEL_56:
      outlined destroy of Duration.UnitsFormatStyle.Unit?((uint64_t)v10, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v28)(a2, 1, 1, v11);
    }
    char v49 = (char *)v12 + 56;
    uint64_t v58 = (void (*)(char *, uint64_t (**)(char *, uint64_t), uint64_t))*((void *)v12 + 4);
    v58(v57, v10, v11);
    int64_t v47 = (unint64_t)(v50 + 63) >> 6;
    uint64_t v10 = (uint64_t (**)(char *, uint64_t))((char *)v12 + 8);
    uint64_t v50 = (uint64_t)a1;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = v58;
    a1 = v56;
    if (v24)
    {
      while (1)
      {
        unint64_t v30 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        unint64_t v31 = v30 | (a2 << 6);
LABEL_27:
        v53(v7, *(void *)(v50 + 48) + v31 * v55, v11);
        ((void (*)(char *, void, uint64_t, uint64_t))a1)(v7, 0, 1, v11);
        if (v51((uint64_t (**)(char *, uint64_t))v7, 1, v11) == 1) {
          break;
        }
        v12(v14, (uint64_t (**)(char *, uint64_t))v7, v11);
        Duration.UnitsFormatStyle.Unit.magnitude.getter(&v60);
        double v36 = v60;
        unint64_t v37 = v57;
        Duration.UnitsFormatStyle.Unit.magnitude.getter(&v59);
        uint64_t v38 = *v10;
        if (v36 >= v59)
        {
          uint64_t result = v38(v14, v11);
          a1 = v56;
          if (!v24) {
            goto LABEL_11;
          }
        }
        else
        {
          v38(v37, v11);
          uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v12)(v37, v14, v11);
          a1 = v56;
          if (!v24) {
            goto LABEL_11;
          }
        }
      }
      swift_release();
      uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v58;
      goto LABEL_37;
    }
LABEL_11:
    int64_t v32 = a2 + 1;
    if (!__OFADD__(a2, 1)) {
      break;
    }
    __break(1u);
LABEL_47:
    unint64_t v40 = a1[12];
    if (v40)
    {
      a2 = 5;
    }
    else
    {
      uint64_t v42 = 0;
      unint64_t v43 = (unint64_t)(v20 + 63) >> 6;
      if (v43 <= 6) {
        unint64_t v43 = 6;
      }
      unint64_t v44 = v43 - 6;
      do
      {
        if (v44 == v42) {
          goto LABEL_55;
        }
        unint64_t v40 = a1[v42++ + 13];
      }
      while (!v40);
      a2 = v42 + 5;
    }
LABEL_34:
    uint64_t v50 = v20;
    unint64_t v24 = (v40 - 1) & v40;
    unint64_t v23 = __clz(__rbit64(v40)) + (a2 << 6);
  }
  uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v58;
  if (v32 >= v47) {
    goto LABEL_36;
  }
  unint64_t v34 = *(void *)&v48[8 * v32];
  ++a2;
  if (v34)
  {
LABEL_26:
    unint64_t v24 = (v34 - 1) & v34;
    unint64_t v31 = __clz(__rbit64(v34)) + (a2 << 6);
    goto LABEL_27;
  }
  a2 = v32 + 1;
  if (v32 + 1 >= v47)
  {
LABEL_36:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))a1)(v7, 1, 1, v11);
    swift_release();
LABEL_37:
    outlined destroy of Duration.UnitsFormatStyle.Unit?((uint64_t)v7, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
    uint64_t v41 = v45;
    v33(v45, v57, v11);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))a1)(v41, 0, 1, v11);
  }
  unint64_t v34 = *(void *)&v48[8 * a2];
  if (v34) {
    goto LABEL_26;
  }
  a2 = v32 + 2;
  if (v32 + 2 >= v47) {
    goto LABEL_36;
  }
  unint64_t v34 = *(void *)&v48[8 * a2];
  if (v34) {
    goto LABEL_26;
  }
  a2 = v32 + 3;
  if (v32 + 3 >= v47) {
    goto LABEL_36;
  }
  unint64_t v34 = *(void *)&v48[8 * a2];
  if (v34) {
    goto LABEL_26;
  }
  int64_t v35 = v32 + 4;
  if (v35 >= v47) {
    goto LABEL_36;
  }
  unint64_t v34 = *(void *)&v48[8 * v35];
  if (v34)
  {
    a2 = v35;
    goto LABEL_26;
  }
  while (1)
  {
    a2 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (a2 >= v47) {
      goto LABEL_36;
    }
    unint64_t v34 = *(void *)&v48[8 * a2];
    ++v35;
    if (v34) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), void (*a5)(char *))
{
  unint64_t v34 = a5;
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - v11;
  int64_t v32 = a3;
  uint64_t v33 = a4;
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0, a3, a4);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v29 - v17;
  if (!*(void *)(*(void *)v5 + 16)) {
    return;
  }
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v30 = a1 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v31 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v36 = v10 + 16;
  unint64_t v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v35 = v10 + 48;
  uint64_t v38 = a1;
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  if (!v22) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v24 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (unint64_t i = v24 | (v23 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v23 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v18, *(void *)(v38 + 48) + *(void *)(v10 + 72) * i, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v18, 1, v9) == 1) {
      goto LABEL_26;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v18, v9);
    v34(v12);
    outlined destroy of Duration.UnitsFormatStyle.Unit?((uint64_t)v15, v32, v33);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v22) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v31) {
      goto LABEL_25;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_25;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v31) {
          goto LABEL_25;
        }
        unint64_t v27 = *(void *)(v30 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v31) {
            goto LABEL_25;
          }
          unint64_t v27 = *(void *)(v30 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v22 = (v27 - 1) & v27;
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v31)
  {
LABEL_25:
    (*v37)(v18, 1, 1, v9);
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v31) {
      goto LABEL_25;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = specialized Set._Variant.remove(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  uint64_t vars8;

  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    uint64_t result = specialized Set._Variant.remove(_:)(*(unsigned char *)(*(void *)(v2 + 48) + v10), &v14);
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = a3((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    uint64_t v10 = a3((char *)v11, v8, v6, a2);
    swift_release();
    MEMORY[0x24C527CC0](v11, -1, -1);
  }
  return v10;
}

uint64_t outlined init with copy of Duration.UnitsFormatStyle.Unit?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0, &lazy cache variable for type metadata for Duration.UnitsFormatStyle.Unit?, MEMORY[0x263F07EC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation4DateV11FormatStyleVAeadAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeDataFormatting.UpdateFrequency()
{
  return &type metadata for TimeDataFormatting.UpdateFrequency;
}

uint64_t dispatch thunk of UpdateFrequencyDependentFormatStyle.updateFrequency(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

unsigned char *storeEnumTagSinglePayload for TimeDataFormatting.UpdateFrequency(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24605C8C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.CodingKeys()
{
  return &unk_26FA5C828;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.HighCodingKeys()
{
  return &unk_26FA5C8B8;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.SecondCodingKeys()
{
  return &unk_26FA5C8F8;
}

void *type metadata accessor for TimeDataFormatting.UpdateFrequency.MinuteCodingKeys()
{
  return &unk_26FA5C8D8;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  size_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v29 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v26 = 0;
  uint64_t v27 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v28) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v27 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v27 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(void *)(v29 + 48) + *(void *)(v7 + 72) * v16, v6);
    Date.ComponentsFormatStyle.Field.magnitude.getter(&v30);
    double v17 = v30;
    double v18 = 1.0 / dbl_246207550[a4];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v17 < v18)
    {
      *(unint64_t *)((char *)v25 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v23 = v29;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v25, v24, v26, v23);
        return;
      }
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v28) {
    goto LABEL_24;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  double v30;

  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  size_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v29 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v26 = 0;
  uint64_t v27 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v28) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v27 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v27 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(void *)(v29 + 48) + *(void *)(v7 + 72) * v16, v6);
    Duration.UnitsFormatStyle.Unit.magnitude.getter(&v30);
    double v17 = v30;
    double v18 = 1.0 / dbl_246207550[a4];
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v17 < v18)
    {
      *(unint64_t *)((char *)v25 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        uint64_t v23 = v29;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v25, v24, v26, v23);
        return;
      }
    }
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v28) {
    goto LABEL_24;
  }
  unint64_t v20 = *(void *)(v27 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized TimeDataFormatting.UpdateFrequency.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1751607656 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574756E696DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void type metadata accessor for Duration.UnitsFormatStyle.Unit?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of Duration.UnitsFormatStyle.Unit?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for Duration.UnitsFormatStyle.Unit?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t State._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t State._value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*State._value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t State._location.getter()
{
  return swift_retain();
}

uint64_t State._location.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 28);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*State._location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t State.init<A>(wrappedValue:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1();
  swift_release();
  uint64_t v6 = v4;
  *(uint64_t *)((char *)&v7 + *(int *)(type metadata accessor for State() + 28)) = 0;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(a3 - 8) + 32))(&v7, &v6, a3);
  return v7;
}

void (*State.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  size_t v9 = malloc(v8);
  v5[5] = v9;
  State.getValue(forReading:)(1, a2, (uint64_t)v9);
  return State.wrappedValue.modify;
}

void State.wrappedValue.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    (*(void (**)(void, void, void))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    uint64_t v5 = *(void *)(v3 + *(int *)(v4 + 28));
    if (v5) {
      (*(void (**)(void, void))(*(void *)v5 + 128))(v2[4], 0);
    }
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    uint64_t v8 = v2[2];
    size_t v9 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v9(v7, v8);
    v9(v6, v8);
  }
  else
  {
    uint64_t v10 = *(void *)(v2[1] + *(int *)(*v2 + 28));
    if (v10) {
      (*(void (**)(void, void))(*(void *)v10 + 128))(v2[5], 0);
    }
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    (*(void (**)(void *, void))(v2[3] + 8))(v6, v2[2]);
  }
  free(v6);
  free(v7);

  free(v2);
}

uint64_t static State._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static State._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6);
}

uint64_t State<A>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  *(void *)(a2 + *(int *)(type metadata accessor for State() + 28)) = 0;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t StatePropertyBox.reset()()
{
  if (*(void *)(v0 + 8))
  {
    StoredLocationBase.invalidate()();
    uint64_t result = swift_release();
  }
  *(void *)(v0 + 8) = 0;
  return result;
}

uint64_t StatePropertyBox.getState<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  MEMORY[0x270FA5388](a1);
  size_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (uint64_t *)((char *)&v22 - v15);
  if (v7 == a3 && (unint64_t v20 = *(uint64_t **)(v4 + 8)) != 0)
  {
    swift_retain();
    StoredLocationBase.get()((uint64_t)v9);
    Binding.init(value:location:)((uint64_t)v9, v20, v16);
    (*(void (**)(char *, void *, uint64_t))(v11 + 32))(v13, v16, v10);
    uint64_t v21 = type metadata accessor for Binding();
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a4, 0, 1, v21);
  }
  else
  {
    uint64_t v17 = type metadata accessor for Binding();
    double v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    return v18(a4, 1, 1, v17);
  }
}

uint64_t protocol witness for DynamicPropertyBox.getState<A>(type:) in conformance StatePropertyBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return StatePropertyBox.getState<A>(type:)(a1, a3, a2, a4);
}

uint64_t sub_24605DACC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for State();
  return State.wrappedValue.getter(v2, a1);
}

uint64_t sub_24605DB08(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for State();
  return specialized State.wrappedValue.setter(a1, v2);
}

uint64_t sub_24605DB48()
{
  return 8;
}

void *sub_24605DB54(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for State(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24605DCB4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for State(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24605DEB4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          double v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *double v18 = 0;
            *(_DWORD *)double v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *double v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StatePropertyBox<A>()
{
  return &protocol witness table for State<A>;
}

unint64_t AnimationContext.init(environment:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = AnimationState.init()(&v7);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = a1;
  *(unsigned char *)(a3 + 16) = a2 & 1;
  *(unsigned char *)(a3 + 17) = 0;
  return result;
}

uint64_t AnimationContext.state.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t AnimationContext.state.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = v2;
  return result;
}

uint64_t (*AnimationContext.state.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnimationContext.isLogicallyComplete.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AnimationContext.isLogicallyComplete.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*AnimationContext.isLogicallyComplete.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AnimationContext.environment.getter(void *a1@<X8>)
{
  if ((*(unsigned char *)(v1 + 16) & 1) != 0 || (WeakValue = (uint64_t *)AGGraphGetWeakValue()) == 0)
  {
    *a1 = 0;
    a1[1] = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v6 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    unint64_t v7 = static CoreGlue2.shared;
    v6(a1);
  }
  else
  {
    uint64_t v5 = *WeakValue;
    uint64_t v4 = WeakValue[1];
    *a1 = v5;
    a1[1] = v4;
    swift_retain();
    swift_retain();
  }
}

void *AnimationContext.init(state:environment:isLogicallyComplete:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = *result;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  *(unsigned char *)(a5 + 17) = a4;
  return result;
}

void *AnimationContext.init(state:environment:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = *result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3 & 1;
  *(unsigned char *)(a4 + 17) = 0;
  return result;
}

unint64_t AnimationContext.init(environment:isLogicallyComplete:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t result = AnimationState.init()(&v9);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = a1;
  *(unsigned char *)(a4 + 16) = a2 & 1;
  *(unsigned char *)(a4 + 17) = a3;
  return result;
}

uint64_t AnimationContext.init(state:environment:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = 0;
  return result;
}

uint64_t AnimationContext.init(environment:isLogicallyComplete:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  AnimationState.init()(&v6);
  unint64_t v4 = v6;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 17) = a1;
  return result;
}

uint64_t AnimationContext.init(environment:)@<X0>(uint64_t a1@<X8>)
{
  AnimationState.init()(&v4);
  unint64_t v2 = v4;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

uint64_t AnimationContext.withState<A>(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(unsigned char *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 17);
  *(void *)a2 = *a1;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnimationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for AnimationContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AnimationContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _TestApp.dateIsSynchronizedWithTime.getter()
{
  return 0;
}

BOOL static _TestApp.isIntending(to:)(void *a1)
{
  return (static _TestApp.testIntents & *a1) != 0;
}

void static _TestApp.rootViewIdentifier.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static _TestApp.comparisonViewIdentifier.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t _TestApp.RootView.StateType.id.getter()
{
  return *(void *)v0;
}

uint64_t _TestApp.RootView.StateType.testView.getter()
{
  return swift_retain();
}

uint64_t _TestApp.RootView.StateType.init()@<X0>(void *a1@<X8>)
{
  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  return result;
}

void _TestApp.RootView.StateType.setTestView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v11[0] = a2;
  v11[1] = MEMORY[0x263F8D6C8];
  uint64_t v11[2] = a3;
  v11[3] = MEMORY[0x263F8D6D8];
  uint64_t v6 = type metadata accessor for TestIDView();
  MEMORY[0x270FA5388](v6);
  unsigned int v8 = (char *)v11 - v7;
  uint64_t v9 = *v3 + 1;
  if (__OFADD__(*v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t *v3 = v9;
    v11[0] = v9;
    View.testID<A>(_:)((uint64_t)v11, a2, MEMORY[0x263F8D6C8], (uint64_t)v8);
    uint64_t v10 = AnyView.init<A>(_:)((uint64_t)v8, v6);
    swift_release();
    v4[1] = v10;
  }
}

void *property wrapper backing initializer of _TestApp.RootView.state@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  a2[2] = 0;
  return result;
}

uint64_t _TestApp.RootView.init()@<X0>(void *a1@<X8>)
{
  type metadata accessor for AnyViewStorage<TestIDView<EmptyView, Int>>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *a1 = 0;
  a1[1] = result;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

void _TestApp.RootView.body.getter(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v6 = (uint64_t *)v1[2];
  uint64_t v5 = v1[3];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static CoreGlue2.shared;
  if (!v6)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v3;
    id v12 = static CoreGlue2.shared;
    swift_retain();
LABEL_9:
    uint64_t v13 = v3;
    if (v5) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  uint64_t v8 = one-time initialization token for sharedGraph;
  swift_retain_n();
  swift_retain_n();
  uint64_t v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t Counter = AGGraphGetCounter();
  uint64_t v11 = *v6;
  if (Counter)
  {
    (*(void (**)(uint64_t))(v11 + 104))(1);
    swift_release();
    uint64_t v15 = v4;
    uint64_t v16 = v3;
    swift_release();
    swift_release_n();
    goto LABEL_9;
  }
  (*(void (**)(uint64_t *__return_ptr))(v11 + 120))(&v15);
  swift_release_n();
  swift_release_n();
  uint64_t v13 = v16;
  if (v5) {
    goto LABEL_15;
  }
LABEL_12:
  swift_retain();
  swift_retain();
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v5 = AGMakeUniqueID();
  swift_release();
  swift_release();
LABEL_15:
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v7) + 0x70))(v13, v5);
  swift_release();

  *a1 = v14;
}

uint64_t one-time initialization function for defaultEnvironment()
{
  return closure #1 in variable initialization expression of static _TestApp.defaultEnvironment(&static _TestApp.defaultEnvironment);
}

uint64_t closure #1 in variable initialization expression of static _TestApp.defaultEnvironment@<X0>(_OWORD *a1@<X8>)
{
  os_signpost_id_t v89 = a1;
  _s10Foundation6LocaleVSgMaTm_1(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v85 = (char *)&v79 - v2;
  uint64_t v83 = type metadata accessor for Calendar.Identifier();
  uint64_t v82 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  BOOL v81 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  v86 = (char *)&v79 - v8;
  MEMORY[0x270FA5388](v9);
  v93 = (char *)&v79 - v10;
  uint64_t v97 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  uint64_t v80 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  os_signpost_id_t v92 = (char *)&v79 - v14;
  _s10Foundation6LocaleVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v95 = (char *)&v79 - v16;
  uint64_t v99 = type metadata accessor for Locale();
  uint64_t v96 = *(void *)(v99 - 8);
  MEMORY[0x270FA5388](v99);
  double v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v91 = (char *)&v79 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v79 - v22;
  MEMORY[0x270FA5388](v24);
  os_signpost_id_t v98 = (char *)&v79 - v25;
  long long v100 = 0uLL;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v90 = v23;
  swift_beginAccess();
  uint64_t v26 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v27 = static CoreGlue2.shared;
  v26(&v100);

  type metadata accessor for FontBox<Font.NamedProvider>();
  uint64_t v28 = swift_allocObject();
  strcpy((char *)(v28 + 16), "HelveticaNeue");
  *(_WORD *)(v28 + 30) = -4864;
  *(void *)(v28 + 32) = 0x4031000000000000;
  *(unsigned char *)(v28 + 40) = 6;
  uint64_t v29 = v100;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, v28);
  swift_release();
  swift_release();
  uint64_t v30 = *((void *)&v100 + 1);
  if (*((void *)&v100 + 1))
  {
    uint64_t v31 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v29, v31);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v31 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 2.0);
  swift_release();
  if (v30)
  {
    uint64_t v32 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v31, v32);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v32 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, (uint64_t)&type metadata for TestingSystemColorDefinition, (uint64_t)&protocol witness table for TestingSystemColorDefinition);
  swift_release();
  if (v30)
  {
    uint64_t v33 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v32, v33);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v33 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 16.0, 16.0, 16.0, 16.0);
  swift_release();
  if (v30)
  {
    uint64_t v34 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v33, v34);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v34 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 0);
  swift_release();
  if (v30)
  {
    uint64_t v35 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v34, v35);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v35 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 0);
  swift_release();
  if (v30)
  {
    uint64_t v36 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v35, v36);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v36 = v100;
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 8);
  swift_release();
  if (v30)
  {
    uint64_t v37 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v36, v37);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v37 = v100;
  }
  uint64_t v87 = v5;
  uint64_t v88 = v4;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, 1);
  swift_release();
  if (v30)
  {
    uint64_t v38 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v37, v38);
    swift_release();
    swift_release();
  }
  swift_release();
  unsigned int v39 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x60);
  unint64_t v40 = static CoreGlue2.shared;
  v39(&v100);

  uint64_t v41 = v98;
  Locale.init(identifier:)();
  uint64_t v42 = v96;
  unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  unint64_t v44 = v90;
  uint64_t v45 = v41;
  uint64_t v46 = v99;
  v43(v90, v45, v99);
  int64_t v47 = v91;
  v43(v91, v44, v46);
  uint64_t v48 = v100;
  uint64_t v79 = v43;
  v43(v18, v47, v46);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, (uint64_t)v18);
  swift_release();
  uint64_t v50 = *(void (**)(char *, uint64_t))(v42 + 8);
  char v49 = (char *)(v42 + 8);
  v94 = v50;
  v50(v18, v46);
  if (*((void *)&v100 + 1))
  {
    uint64_t v51 = v100;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v48, v51);
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v52 = v99;
  uint64_t v53 = v94;
  v94(v47, v99);
  uint64_t v91 = v49;
  v53(v44, v52);
  uint64_t v54 = v95;
  TimeZone.init(abbreviation:)();
  uint64_t v55 = v97;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v54, 1, v97);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    double v57 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v58 = v92;
    v57(v92, v54, v55);
    uint64_t v59 = v11;
    uint64_t v60 = v100;
    uint64_t v61 = (uint64_t)v80;
    v57(v80, v58, v55);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, v61);
    swift_release();
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v62(v61, v55);
    if (*((void *)&v100 + 1))
    {
      uint64_t v63 = v100;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v60, v63);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v64 = v97;
    v62((uint64_t)v92, v97);
    v62((uint64_t)v95, v64);
    uint64_t v65 = v82;
    uint64_t v66 = v81;
    uint64_t v67 = v83;
    (*(void (**)(char *, void, uint64_t))(v82 + 104))(v81, *MEMORY[0x263F07740], v83);
    uint64_t v68 = v93;
    Calendar.init(identifier:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
    unsigned __int8 v69 = v85;
    uint64_t v70 = v99;
    v79(v85, v98, v99);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v69, 0, 1, v70);
    Calendar.locale.setter();
    uint64_t v71 = v87;
    uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v87 + 16);
    uint64_t v73 = v86;
    uint64_t v74 = v88;
    v72(v86, v68, v88);
    uint64_t v75 = v100;
    uint64_t v76 = (uint64_t)v84;
    v72(v84, v73, v74);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v100, v76);
    swift_release();
    double v77 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v77(v76, v74);
    if (*((void *)&v100 + 1))
    {
      uint64_t v78 = v100;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v75, v78);
      swift_release();
      swift_release();
    }
    swift_release();
    v77((uint64_t)v73, v74);
    v77((uint64_t)v93, v74);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v94)(v98, v99);
    *os_signpost_id_t v89 = v100;
  }
  return result;
}

uint64_t static _TestApp.defaultEnvironment.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultEnvironment != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_268F02798;
  *a1 = static _TestApp.defaultEnvironment;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

void __swiftcall _TestApp.init()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = *(void (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x50);
  uint64_t v1 = static CoreGlue2.shared;
  v0();
}

uint64_t static _TestApp.host.setter(uint64_t a1, uint64_t a2)
{
  return static _TestApp.host.setter(a1, a2, &static _TestApp.host, &off_268F027A8);
}

uint64_t (*static _TestApp.host.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _TestApp.comparisonHost.getter()
{
  return static _TestApp.host.getter();
}

uint64_t static _TestApp.comparisonHost.setter(uint64_t a1, uint64_t a2)
{
  return static _TestApp.host.setter(a1, a2, &static _TestApp.comparisonHost, &off_268F027B8);
}

uint64_t static _TestApp.host.setter(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  *a3 = a1;
  *a4 = a2;
  return swift_unknownObjectRelease();
}

uint64_t (*static _TestApp.comparisonHost.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t one-time initialization function for renderOptions()
{
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  static _TestApp.renderOptions = static TestRenderOptions.default;
  return result;
}

uint64_t static _TestApp.renderOptions.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for renderOptions != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  *a1 = static _TestApp.renderOptions;
  return result;
}

uint64_t static _TestApp.renderOptions.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for renderOptions != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  static _TestApp.renderOptions = v1;
  return result;
}

uint64_t (*static _TestApp.renderOptions.modify())()
{
  if (one-time initialization token for renderOptions != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static _TestApp.setIntents(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)&static _TestApp.testIntents;
  *(void *)&static _TestApp.testIntents = *a1;
  uint64_t result = swift_beginAccess();
  if (static _TestApp.host)
  {
    uint64_t v4 = off_268F027A8;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = v1;
    uint64_t v8 = v2;
    uint64_t v6 = (void (*)(uint64_t *, uint64_t *, uint64_t, void *))v4[17];
    swift_unknownObjectRetain();
    v6(&v8, &v7, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t static _TestApp.environmentOverride.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = static _TestApp.environmentOverride;
  uint64_t v3 = *(void *)algn_268F027D8;
  *a1 = static _TestApp.environmentOverride;
  a1[1] = v3;
  return outlined copy of EnvironmentValues?(v2);
}

uint64_t static _TestApp.environmentOverride.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_beginAccess();
  uint64_t v3 = static _TestApp.environmentOverride;
  static _TestApp.environmentOverride = v1;
  *(void *)algn_268F027D8 = v2;
  return outlined consume of EnvironmentValues?(v3);
}

uint64_t (*static _TestApp.environmentOverride.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _TestApp.updateTestEnvironment(_:)(void (*a1)(Swift::UInt *))
{
  Swift::UInt v6 = 0;
  Swift::UInt v7 = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = *(void (**)(Swift::UInt *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v3 = static CoreGlue2.shared;
  v2(&v6);

  a1(&v6);
  v5[0] = v6;
  v5[1] = v7;
  specialized static _TestApp.setTestEnvironment(_:)(v5);
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall _TestApp.setSemantics(_:)(Swift::String a1)
{
  BOOL v1 = a1._countAndFlagsBits == 0x74736574616CLL && a1._object == (void *)0xE600000000000000;
  if (v1
    || (object = a1._object,
        uint64_t countAndFlagsBits = a1._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (one-time initialization token for forced == -1)
    {
      int v4 = -2;
LABEL_14:
      swift_beginAccess();
      static Semantics.forced = v4;
      byte_26B0F44FC = 0;
      return;
    }
LABEL_20:
    swift_once();
    int v4 = -2;
    goto LABEL_14;
  }
  if (countAndFlagsBits == 0x6C616D6978616DLL && object == (void *)0xE700000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    int v4 = -1;
    goto LABEL_14;
  }
  if ((countAndFlagsBits != 0x6D6574737973 || object != (void *)0xE600000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = countAndFlagsBits;
    v5._object = object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_20;
  }
}

uint64_t withRenderOptions(_:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  if (one-time initialization token for renderOptions != -1) {
    swift_once();
  }
  uint64_t v4 = swift_beginAccess();
  uint64_t v5 = static _TestApp.renderOptions;
  static _TestApp.renderOptions = v3;
  uint64_t result = a2(v4);
  static _TestApp.renderOptions = v5;
  return result;
}

BOOL static EventSourceType.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch(*a1)
  {
    case 1:
    case 3:
LABEL_6:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x2460600D8);
    case 2:
      uint64_t v2 = 1;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
    case 3:
      goto LABEL_6;
    case 2:
      uint64_t v3 = 1;
      return v2 == v3;
    default:
      return v2 == v3;
  }
}

void EventSourceType.hash(into:)()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
    case 3:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x246060154);
    case 2:
      Swift::UInt v1 = 1;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int EventSourceType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
    case 3uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x2460601DCLL);
    case 2uLL:
      Swift::UInt v1 = 1;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EventSourceType(unsigned char *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch(*a1)
  {
    case 1:
    case 3:
LABEL_6:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x246060268);
    case 2:
      uint64_t v2 = 1;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
    case 3:
      goto LABEL_6;
    case 2:
      uint64_t v3 = 1;
      return v2 == v3;
    default:
      return v2 == v3;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EventSourceType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1uLL:
    case 3uLL:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x246060300);
    case 2uLL:
      Swift::UInt v1 = 1;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EventSourceType()
{
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
    case 3:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x24606036CLL);
    case 2:
      Swift::UInt v1 = 1;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EventSourceType()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *v0;
  switch(*v0)
  {
    case 1:
    case 3:
      _diagnoseUnavailableCodeReached()();
      __break(1u);
      JUMPOUT(0x2460603ECLL);
    case 2:
      Swift::UInt v1 = 1;
      break;
    default:
      break;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

char *protocol witness for static CaseIterable.allCases.getter in conformance EventSourceType@<X0>(char **a1@<X8>)
{
  uint64_t result = specialized static EventSourceType.allCases.getter();
  *a1 = result;
  return result;
}

unsigned char *static TestingSystemColorDefinition.value(for:environment:)(unsigned char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  switch(*result)
  {
    case 0xD:
      if (v3)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v2, &v7);
        swift_release_n();
        uint64_t result = (unsigned char *)swift_release_n();
      }
      else
      {
        _s7SwiftUI12TypedElement33_D64CE6C88E7413721C59A34C0C940F2CLLCyAA8EmptyKeyACLLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
        BloomFilter.init(hashValue:)(v4);
        uint64_t v5 = swift_retain_n();
        specialized find1<A>(_:key:filter:)(v5, v6[0]);
        uint64_t result = (unsigned char *)swift_release_n();
      }
      break;
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
      char v7 = 12;
      v6[0] = v2;
      v6[1] = v3;
      uint64_t result = (unsigned char *)static TestingSystemColorDefinition.value(for:environment:)(&v7, v6, 0.0319, 0.0319, 0.0319);
      break;
    default:
      return result;
  }
  return result;
}

float protocol witness for static SystemColorDefinition.opacity(at:environment:) in conformance TestingSystemColorDefinition(uint64_t a1)
{
  float result = 0.25;
  if (a1 == 2) {
    float result = 0.5;
  }
  if (a1 == 1) {
    float result = 0.75;
  }
  if (a1 <= 0) {
    return 1.0;
  }
  return result;
}

uint64_t specialized static _TestApp.setTestEnvironment(_:)(Swift::UInt *a1)
{
  Swift::UInt v2 = *a1;
  Swift::UInt v1 = a1[1];
  if (*a1 == 1)
  {
    swift_beginAccess();
    uint64_t v3 = static _TestApp.environmentOverride;
    static _TestApp.environmentOverride = 1;
    *(void *)algn_268F027D8 = v1;
    outlined consume of EnvironmentValues?(v3);
    goto LABEL_20;
  }
  uint64_t v4 = one-time initialization token for defaultEnvironment;
  swift_retain();
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v6 = static _TestApp.defaultEnvironment;
  uint64_t v5 = *(void *)algn_268F02798;
  if (static _TestApp.defaultEnvironment)
  {
    if (v2)
    {
      if (*(void *)(static _TestApp.defaultEnvironment + 24))
      {
        _s7SwiftUI12TypedElement33_D64CE6C88E7413721C59A34C0C940F2CLLCyAA8EmptyKeyACLLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EmptyKey>, (uint64_t)&type metadata for EmptyKey, (uint64_t)&protocol witness table for EmptyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
        swift_allocObject();
        swift_retain();
        swift_retain_n();
        swift_retain();
        v7.value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v2, v6).value;
      }
      else
      {
        uint64_t v9 = *(void *)(static _TestApp.defaultEnvironment + 32);
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)static _TestApp.defaultEnvironment + 216);
        swift_retain();
        swift_retain_n();
        swift_retain();
        uint64_t v11 = swift_retain();
        v7.value = v10(v11, v9);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_retain();
      swift_retain_n();
      v7.value = v6;
    }
    uint64_t v8 = *(void *)(v6 + 64);
    goto LABEL_14;
  }
  swift_retain();
  if (v2)
  {
    swift_retain();
    uint64_t v8 = 0;
    v7.value = v2;
LABEL_14:
    if (v8 == *(void *)(v7.value + 64))
    {
      v7.value = v6;
    }
    else if (v5)
    {
      swift_retain();
      PropertyList.Tracker.invalidateAllValues(from:to:)(v6, v7.value);
      swift_release();
    }
    swift_release();
    goto LABEL_19;
  }
  v7.value = 0;
LABEL_19:
  swift_beginAccess();
  uint64_t v12 = static _TestApp.environmentOverride;
  static _TestApp.environmentOverride = v7.value;
  *(void *)algn_268F027D8 = v5;
  swift_retain();
  swift_retain();
  outlined consume of EnvironmentValues?(v12);
  outlined consume of EnvironmentValues?(v2);
  swift_release();
  swift_release();
LABEL_20:
  swift_beginAccess();
  if (static _TestApp.host)
  {
    uint64_t v13 = off_268F027A8;
    uint64_t ObjectType = swift_getObjectType();
    v21[0] = 2;
    uint64_t v15 = (void (*)(__int16 *, void, uint64_t, void *))v13[18];
    swift_unknownObjectRetain();
    v15(v21, 0, ObjectType, v13);
    swift_unknownObjectRelease();
  }
  uint64_t result = swift_beginAccess();
  if (static _TestApp.comparisonHost)
  {
    uint64_t v17 = off_268F027B8;
    uint64_t v18 = swift_getObjectType();
    __int16 v20 = 2;
    uint64_t v19 = (void (*)(__int16 *, void, uint64_t, void *))v17[18];
    swift_unknownObjectRetain();
    v19(&v20, 0, v18, v17);
    return swift_unknownObjectRelease();
  }
  return result;
}

char *specialized static EventSourceType.allCases.getter()
{
  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = *((void *)v0 + 2);
  unint64_t v1 = *((void *)v0 + 3);
  int64_t v3 = v1 >> 1;
  unint64_t v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v2 + 1, 1, v0);
    unint64_t v1 = *((void *)v0 + 3);
    int64_t v3 = v1 >> 1;
  }
  *((void *)v0 + 2) = v4;
  v0[v2 + 32] = 0;
  int64_t v5 = v2 + 2;
  if (v3 < v5) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v1 > 1), v5, 1, v0);
  }
  *((void *)v0 + 2) = v5;
  v0[v4 + 32] = 2;
  return v0;
}

uint64_t associated type witness table accessor for View.Body : View in _TestApp.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type EventSourceType and conformance EventSourceType()
{
  unint64_t result = lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType;
  if (!lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventSourceType and conformance EventSourceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [EventSourceType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [EventSourceType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [EventSourceType] and conformance [A])
  {
    type metadata accessor for [EventSourceType]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [EventSourceType] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [EventSourceType]()
{
  if (!lazy cache variable for type metadata for [EventSourceType])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [EventSourceType]);
    }
  }
}

ValueMetadata *type metadata accessor for _TestApp()
{
  return &type metadata for _TestApp;
}

uint64_t destroy for _TestApp.RootView()
{
  swift_release();

  return swift_release();
}

void *initializeWithCopy for _TestApp.RootView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _TestApp.RootView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _TestApp.RootView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for _TestApp.RootView()
{
  return &type metadata for _TestApp.RootView;
}

ValueMetadata *type metadata accessor for _TestApp.RootView.StateType()
{
  return &type metadata for _TestApp.RootView.StateType;
}

unsigned char *storeEnumTagSinglePayload for EventSourceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246060E8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventSourceType()
{
  return &type metadata for EventSourceType;
}

unint64_t lazy protocol witness table accessor for type RootViewID and conformance RootViewID()
{
  unint64_t result = lazy protocol witness table cache variable for type RootViewID and conformance RootViewID;
  if (!lazy protocol witness table cache variable for type RootViewID and conformance RootViewID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootViewID and conformance RootViewID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RootViewID and conformance RootViewID;
  if (!lazy protocol witness table cache variable for type RootViewID and conformance RootViewID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootViewID and conformance RootViewID);
  }
  return result;
}

_UNKNOWN **sub_246060F1C()
{
  return &protocol witness table for AnyView;
}

unsigned char *storeEnumTagSinglePayload for RootViewID(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246060FF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RootViewID()
{
  return &unk_26FA40600;
}

void type metadata accessor for FontBox<Font.NamedProvider>()
{
  if (!lazy cache variable for type metadata for FontBox<Font.NamedProvider>)
  {
    lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider();
    unint64_t v0 = type metadata accessor for FontBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider;
  if (!lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.NamedProvider and conformance Font.NamedProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for TestingSystemColorDefinition()
{
  return &type metadata for TestingSystemColorDefinition;
}

uint64_t ObjectCache.__allocating_init(constructor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ObjectCache.init(constructor:)(a1, a2);
  return v4;
}

uint64_t ObjectCache.subscript.getter@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = v2;
  uint64_t v39 = a2;
  unint64_t v40 = a1;
  uint64_t v4 = (void *)*v2;
  uint64_t v37 = v4[11];
  uint64_t v42 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v36 = (char *)&v31 - v5;
  uint64_t v41 = type metadata accessor for Optional();
  uint64_t v43 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  SwiftUI::BloomFilter v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = v4[10];
  uint64_t v12 = v4[12];
  uint64_t v13 = dispatch thunk of Hashable.hashValue.getter();
  uint64_t v47 = 0;
  int v46 = 0x80000000;
  ObjectCache.$data.getter(&v45);
  uint64_t v14 = v45;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
  uint64_t v38 = v12;
  uint64_t v30 = v12;
  uint64_t v15 = v37;
  uint64_t v34 = 4 * (v13 & 7);
  uint64_t v35 = v13;
  uint64_t v16 = v13;
  uint64_t v17 = v11;
  closure #1 in ObjectCache.subscript.getter((uint64_t *)(v14 + 24), v34, v16, v40, &v46, &v47, v11, v37, (uint64_t)v10, v30);
  uint64_t v18 = v38;
  uint64_t v33 = type metadata accessor for ObjectCache.Data();
  $defer #1 <A>() in AtomicBox.wrappedValue.modify((os_unfair_lock_t)(v14 + 16));
  swift_release_n();
  uint64_t v19 = v43;
  uint64_t v20 = v41;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v7, v10, v41);
  uint64_t v21 = v42;
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v7, 1, v15);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v24 = v19 + 8;
  uint64_t v23 = v25;
  if (v22 == 1)
  {
    uint64_t v32 = v10;
    uint64_t v43 = v24;
    uint64_t v26 = v23;
    v23(v7, v20);
    SwiftUI::BloomFilter v7 = v36;
    uint64_t v27 = v40;
    ((void (*)(char *))v3[2])(v40);
    ObjectCache.$data.getter(&v44);
    uint64_t v28 = v44;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 16));
    closure #2 in ObjectCache.subscript.getter((uint64_t *)(v28 + 24), v34, &v47, (uint64_t)v27, v35, (uint64_t)v7, v17, v15, v18);
    $defer #1 <A>() in AtomicBox.wrappedValue.modify((os_unfair_lock_t)(v28 + 16));
    swift_release_n();
    v26(v32, v41);
    uint64_t v21 = v42;
  }
  else
  {
    v23(v10, v20);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v21 + 32))(v39, v7, v15);
}

uint64_t ObjectCache.Item.init(data:used:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  swift_getTupleTypeMetadata3();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for ObjectCache.Item();
  *(_DWORD *)(a3 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t ObjectCache.Data.init()()
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v1 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v1 - 8);
  int v3 = (char *)&v11 - v2;
  uint64_t v4 = type metadata accessor for ObjectCache.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(TupleTypeMetadata3 - 8) + 56))(v3, 1, 1, TupleTypeMetadata3, v6);
  ObjectCache.Item.init(data:used:)((uint64_t)v3, 0, (uint64_t)v8);
  uint64_t v9 = specialized Array.init(repeating:count:)((uint64_t)v8, 32, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t property wrapper backing initializer of ObjectCache.data@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1;
  int v7 = a2;
  uint64_t v4 = type metadata accessor for ObjectCache.Data();
  return AtomicBox.init(wrappedValue:)((uint64_t)&v6, v4, a3);
}

uint64_t ObjectCache.$data.getter@<X0>(void *a1@<X8>)
{
  return AtomicBox.projectedValue.getter(a1);
}

void *ObjectCache.init(constructor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = ObjectCache.Data.init()();
  int v11 = v5;
  uint64_t v6 = type metadata accessor for ObjectCache.Data();
  AtomicBox.init(wrappedValue:)((uint64_t)&v10, v6, &v9);
  uint64_t v7 = v9;
  v2[3] = a2;
  v2[4] = v7;
  unsigned char v2[2] = a1;
  return v2;
}

void closure #1 in ObjectCache.subscript.getter(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v90 = a6;
  uint64_t v96 = a4;
  uint64_t v100 = a3;
  uint64_t v79 = a9;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v95 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v110 = type metadata accessor for Optional();
  Swift::Int v105 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v109 = (char *)&v77 - v18;
  uint64_t v113 = a7;
  uint64_t v80 = a10;
  uint64_t v112 = type metadata accessor for ObjectCache.Item();
  MEMORY[0x270FA5388](v112);
  uint64_t v87 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  int v22 = (char *)&v77 - v21;
  uint64_t v23 = TupleTypeMetadata3;
  MEMORY[0x270FA5388](v24);
  uint64_t v78 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  CGDataConsumerRef v111 = (char *)&v77 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v108 = (char *)&v77 - v29;
  uint64_t v30 = 0;
  v106 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  uint64_t v107 = (void (**)(char *, char *, uint64_t))(v105 + 32);
  uint64_t v101 = a8 - 8;
  uint64_t v102 = a8;
  os_signpost_id_t v98 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v99 = (char **)(v15 + 8);
  v93 = (void (**)(char *, uint64_t))(v31 + 8);
  v94 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v77 = v32;
  uint64_t v85 = (void (**)(char *, uint64_t))(v32 + 8);
  os_signpost_id_t v92 = (void (**)(char *, uint64_t))(v105 + 8);
  uint64_t v97 = a1;
  os_signpost_id_t v89 = a5;
  uint64_t v88 = a2;
  v86 = v22;
  uint64_t v91 = TupleTypeMetadata3;
  while (!__OFADD__(a2, v30))
  {
    Array.subscript.getter();
    uint64_t v34 = v109;
    uint64_t v33 = v110;
    (*v107)(v109, v22, v110);
    if ((*v106)(v34, 1, v23) == 1)
    {
      (*v92)(v34, v33);
      int v35 = 0x7FFFFFFF;
      if (*a5 == 0x7FFFFFFF) {
        goto LABEL_3;
      }
    }
    else
    {
      Swift::Int v105 = a2 + v30;
      uint64_t v36 = v34;
      uint64_t v37 = v23;
      uint64_t v38 = *(int *)(v23 + 48);
      uint64_t v39 = *(int *)(v23 + 64);
      unint64_t v40 = v108;
      uint64_t v41 = &v108[v39];
      uint64_t v42 = &v36[v39];
      uint64_t v83 = *v98;
      v83(v108, v36, v113);
      uint64_t v43 = v37;
      uint64_t v104 = *(void *)&v36[v38];
      *(void *)&v40[v38] = v104;
      uint64_t v44 = v102;
      uint64_t v45 = *(void *)(v102 - 8);
      int v46 = *(void (**)(void, void, void))(v45 + 32);
      uint64_t v82 = v45 + 32;
      BOOL v81 = (void (*)(uint64_t, char *, uint64_t))v46;
      v46(v41, v42, v102);
      uint64_t v47 = *(int *)(v43 + 48);
      uint64_t v48 = v111;
      v103 = &v111[*(int *)(v43 + 64)];
      char v49 = *v94;
      (*v94)(v111, v40, v113);
      uint64_t v50 = v104;
      *(void *)&v48[v47] = v104;
      uint64_t v84 = v45;
      uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
      uint64_t v52 = v103;
      v103 = v41;
      v51(v52, v41, v44);
      uint64_t v53 = v95;
      v49(v95, v96, v113);
      uint64_t v54 = v93;
      if (v50 == v100)
      {
        uint64_t v55 = v113;
        char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
        double v57 = *v99;
        ((void (*)(char *, uint64_t))*v99)(v53, v55);
        uint64_t v58 = *v54;
        uint64_t v23 = v91;
        (*v54)(v111, v91);
        uint64_t v59 = v97;
        if (v56)
        {
          CGDataConsumerRef v111 = v57;
          uint64_t v64 = v113;
          uint64_t v65 = v102;
          type metadata accessor for ObjectCache.Data();
          int v66 = *((_DWORD *)v59 + 2) + 1;
          *((_DWORD *)v59 + 2) = v66;
          uint64_t v67 = v112;
          uint64_t v68 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          uint64_t v69 = *v59;
          Swift::Int v70 = v105;
          Array._checkSubscript_mutating(_:)(v105);
          *(_DWORD *)(v69
                    + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
                    + *(void *)(v77 + 72) * v70
                    + *(int *)(v67 + 44)) = v66;
          _ViewInputs.base.modify(v68, v71);
          uint64_t v72 = *(int *)(v23 + 48);
          uint64_t v73 = v78;
          uint64_t v74 = &v78[*(int *)(v23 + 64)];
          v83(v78, v108, v64);
          *(void *)&v73[v72] = v100;
          uint64_t v75 = v81;
          v81((uint64_t)v74, v103, v65);
          uint64_t v76 = v79;
          v75(v79, v74, v65);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v76, 0, 1, v65);
          ((void (*)(char *, uint64_t))v111)(v73, v64);
          return;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t))*v99)(v53, v113);
        uint64_t v58 = *v54;
        uint64_t v23 = v91;
        (*v54)(v111, v91);
        uint64_t v59 = v97;
      }
      int v60 = *((_DWORD *)v59 + 2);
      uint64_t v61 = v87;
      uint64_t v62 = v112;
      Array.subscript.getter();
      v58(v108, v23);
      int v63 = *(_DWORD *)&v61[*(int *)(v62 + 44)];
      (*v85)(v61, v62);
      int v35 = v60 - v63;
      a5 = v89;
      a2 = v88;
      int v22 = v86;
      if (*v89 >= v60 - v63) {
        goto LABEL_3;
      }
    }
    *uint64_t v90 = v30;
    *a5 = v35;
LABEL_3:
    if (++v30 == 4)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v79, 1, 1);
      return;
    }
  }
  __break(1u);
}

void closure #2 in ObjectCache.subscript.getter(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v35 = a4;
  uint64_t v39 = a3;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v38 = a9;
  uint64_t v17 = type metadata accessor for ObjectCache.Item();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v33 - v20;
  Swift::Int v22 = a2 + *v39;
  if (__OFADD__(a2, *v39))
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = *(int *)(TupleTypeMetadata3 + 48);
    uint64_t v24 = &v16[*(int *)(TupleTypeMetadata3 + 64)];
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a7 - 8) + 16);
    uint64_t v33 = v21;
    Swift::Int v34 = v22;
    v25(v16, v35, a7, v19);
    uint64_t v26 = v37;
    *(void *)&v16[v23] = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 16))(v24, v26, a8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56))(v16, 0, 1, TupleTypeMetadata3);
    type metadata accessor for ObjectCache.Data();
    int v27 = *((_DWORD *)a1 + 2) + 1;
    *((_DWORD *)a1 + 2) = v27;
    uint64_t v28 = (uint64_t)v33;
    ObjectCache.Item.init(data:used:)((uint64_t)v16, v27, (uint64_t)v33);
    uint64_t v29 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v30 = *a1;
    Swift::Int v31 = v34;
    Array._checkSubscript_mutating(_:)(v34);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 40))(v30+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v31, v28, v17);
    _ViewInputs.base.modify(v29, v32);
  }
}

uint64_t ObjectCache.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t ObjectCache.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t method lookup function for ObjectCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ObjectCache);
}

uint64_t dispatch thunk of ObjectCache.__allocating_init(constructor:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  uint64_t v16 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a3 - 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      uint64_t v11 = a2 - 1;
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 72);
        uint64_t v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    uint64_t v14 = type metadata accessor for Array();
    _ViewInputs.base.modify(v14, v15);
    return v16;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ObjectCache.Item(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(_DWORD *)(v9 + 80);
  unint64_t v13 = (v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12;
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = v13 + v14;
  int v16 = v10 | v8;
  if (v10 | v8) {
    size_t v17 = v13 + v14;
  }
  else {
    size_t v17 = v15 + 1;
  }
  unsigned int v18 = v12 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v18 <= 7
    && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0
    && ((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 <= 0x18)
  {
    uint64_t v28 = *(void *)(a3 + 24);
    if (v16)
    {
      if (v8 >= v10)
      {
        if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
          goto LABEL_33;
        }
      }
      else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + v12 + 8) & ~v12, v10, v5))
      {
LABEL_33:
        (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
        uint64_t v25 = (void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v26 = (void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v25 = *v26;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v25 + v12 + 8) & ~v12, ((unint64_t)v26 + v12 + 8) & ~v12, v28);
        if (!v16) {
          *((unsigned char *)a1 + v15) = 0;
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (!*((unsigned char *)a2 + v15)) {
        goto LABEL_33;
      }
      int v22 = (*((unsigned __int8 *)a2 + v15) - 1) << (8 * v15);
      if (v15 > 3) {
        int v22 = 0;
      }
      if (v15)
      {
        int v23 = v15 <= 3 ? v15 : 4;
        switch(v23)
        {
          case 2:
            int v24 = *a2;
            break;
          case 3:
            int v24 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v24 = *(_DWORD *)a2;
            break;
          default:
            int v24 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v24 = 0;
      }
      if ((v24 | v22) == 0xFFFFFFFF) {
        goto LABEL_33;
      }
    }
    memcpy(a1, a2, v17);
LABEL_35:
    *(_DWORD *)(((unint64_t)a1 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    return a1;
  }
  uint64_t v21 = *(void *)a2;
  *a1 = *(void *)a2;
  a1 = (void *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
  swift_retain();
  return a1;
}

uint64_t destroy for ObjectCache.Item(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v3 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = ~v10;
  uint64_t v17 = v7;
  if (v8 | v6)
  {
    if (v6 >= v8)
    {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v10
                                                                      + 8) & v11);
      if (result) {
        return result;
      }
    }
    goto LABEL_19;
  }
  unint64_t v13 = ((v10 + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + *(void *)(*(void *)(v3 - 8) + 64);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_19;
  }
  int v14 = (*((unsigned __int8 *)a1 + v13) - 1) << (8 * v13);
  if (v13 > 3) {
    int v14 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *a1;
        break;
      case 3:
        LODWORD(v13) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v15 = v13 | v14;
  uint64_t result = (v15 + 1);
  if (v15 == -1)
  {
LABEL_19:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v4);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v16(((((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & v11, v3);
  }
  return result;
}

void *initializeWithCopy for ObjectCache.Item(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v13 = ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + *(void *)(v9 + 64);
  int v14 = v10 | v8;
  if (!(v10 | v8))
  {
    if (!*((unsigned char *)a2 + v13)) {
      goto LABEL_24;
    }
    int v15 = (*((unsigned __int8 *)a2 + v13) - 1) << (8 * v13);
    if (v13 > 3) {
      int v15 = 0;
    }
    if (v13)
    {
      int v16 = v13 <= 3 ? ((v12 + ((v11 + 7) & 0xFFFFFFF8) + 8) & ~v12) + *(_DWORD *)(v9 + 64) : 4;
      switch(v16)
      {
        case 2:
          int v17 = *a2;
          break;
        case 3:
          int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)a2;
          break;
        default:
          int v17 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6)) {
      goto LABEL_24;
    }
LABEL_15:
    if (v14) {
      size_t v18 = v13;
    }
    else {
      size_t v18 = v13 + 1;
    }
    memcpy(a1, a2, v18);
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(unint64_t))(v9 + 48))(((((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 8) & ~v12))
    goto LABEL_15;
LABEL_24:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
  double v19 = (void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *double v19 = *v20;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v19 + v12 + 8) & ~v12, ((unint64_t)v20 + v12 + 8) & ~v12, v5);
  if (!v14) {
    *((unsigned char *)a1 + v13) = 0;
  }
LABEL_26:
  if (v14) {
    unint64_t v21 = v13;
  }
  else {
    unint64_t v21 = v13 + 1;
  }
  *(_DWORD *)(((unint64_t)a1 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

void *assignWithCopy for ObjectCache.Item(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v46 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v46 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ~v11;
  unint64_t v47 = ((v11 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(void *)(v8 + 64);
  int v13 = v9 | v7;
  uint64_t v44 = v5;
  uint64_t v45 = ~v11;
  uint64_t v42 = v10;
  uint64_t v43 = v6;
  if (!(v9 | v7))
  {
    char v17 = 8 * v47;
    if (*((unsigned char *)a1 + v47))
    {
      int v18 = (*((unsigned __int8 *)a1 + v47) - 1) << v17;
      int v19 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
      if (v47 > 3) {
        int v18 = 0;
      }
      if (v47)
      {
        if (v47 <= 3) {
          int v20 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
        }
        else {
          int v20 = 4;
        }
        switch(v20)
        {
          case 2:
            int v19 = *a1;
            break;
          case 3:
            int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v19 = *(_DWORD *)a1;
            break;
          default:
            int v19 = *(unsigned __int8 *)a1;
            break;
        }
      }
      if ((v19 | v18) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v47)) {
          goto LABEL_54;
        }
        int v28 = (*((unsigned __int8 *)a2 + v47) - 1) << v17;
        int v29 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
        if (v47 > 3) {
          int v28 = 0;
        }
        if (v47)
        {
          if (v47 <= 3) {
            int v30 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
          }
          else {
            int v30 = 4;
          }
          switch(v30)
          {
            case 2:
              int v29 = *a2;
              break;
            case 3:
              int v29 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v29 = *(_DWORD *)a2;
              break;
            default:
              int v29 = *(unsigned __int8 *)a2;
              break;
          }
        }
        if ((v29 | v28) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v13) {
          size_t v34 = v47;
        }
        else {
          size_t v34 = v47 + 1;
        }
        memcpy(v4, v3, v34);
        goto LABEL_56;
      }
    }
    if (!*((unsigned char *)a2 + v47))
    {
LABEL_49:
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v4, v3, v5);
      uint64_t v35 = (void *)(((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v36 = (void *)(((unint64_t)v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      void *v35 = *v36;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v35 + v11 + 8) & v12, ((unint64_t)v36 + v11 + 8) & v12, v46);
      goto LABEL_56;
    }
    int v31 = (*((unsigned __int8 *)a2 + v47) - 1) << v17;
    int v32 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
    if (v47 > 3) {
      int v31 = 0;
    }
    if (v47)
    {
      if (v47 <= 3) {
        int v33 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
      }
      else {
        int v33 = 4;
      }
      switch(v33)
      {
        case 2:
          int v32 = *a2;
          break;
        case 3:
          int v32 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)a2;
          break;
        default:
          int v32 = *(unsigned __int8 *)a2;
          break;
      }
    }
    int v16 = (v32 | v31) + 1;
    goto LABEL_43;
  }
  if (v7 < v9)
  {
    int v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v41 = v15(((((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v9, v46);
    int v16 = v15(((((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11, v9, v46);
    uint64_t v3 = a2;
    int v13 = v9 | v7;
    if (v41) {
      goto LABEL_4;
    }
    goto LABEL_43;
  }
  int v21 = v9 | v7;
  int v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v25 = *(void *)(a3 + 16);
  int v26 = v23(a1, v7, v5);
  uint64_t v27 = v25;
  uint64_t v4 = a1;
  int v16 = v23(a2, v7, v27);
  uint64_t v3 = a2;
  int v13 = v21;
  if (!v26)
  {
LABEL_43:
    uint64_t v5 = v44;
    uint64_t v12 = ~v11;
    uint64_t v10 = v42;
    uint64_t v6 = v43;
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v43 + 8))(v4, v44);
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((((unint64_t)v4 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v45, v46);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
LABEL_4:
  if (v16) {
    goto LABEL_45;
  }
LABEL_54:
  (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v4, v3, v44);
  uint64_t v37 = (void *)(((unint64_t)v4 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = (void *)(((unint64_t)v3 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v37 = *v38;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v37 + v11 + 8) & v45, ((unint64_t)v38 + v11 + 8) & v45, v46);
  if (!v13) {
    *((unsigned char *)v4 + v47) = 0;
  }
LABEL_56:
  unint64_t v39 = v47;
  if (!v13) {
    unint64_t v39 = v47 + 1;
  }
  *(_DWORD *)(((unint64_t)v4 + v39 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v3 + v39 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return v4;
}

void *initializeWithTake for ObjectCache.Item(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v13 = ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + *(void *)(v9 + 64);
  int v14 = v10 | v8;
  if (!(v10 | v8))
  {
    if (!*((unsigned char *)a2 + v13)) {
      goto LABEL_24;
    }
    int v15 = (*((unsigned __int8 *)a2 + v13) - 1) << (8 * v13);
    if (v13 > 3) {
      int v15 = 0;
    }
    if (v13)
    {
      int v16 = v13 <= 3 ? ((v12 + ((v11 + 7) & 0xFFFFFFF8) + 8) & ~v12) + *(_DWORD *)(v9 + 64) : 4;
      switch(v16)
      {
        case 2:
          int v17 = *a2;
          break;
        case 3:
          int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)a2;
          break;
        default:
          int v17 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6)) {
      goto LABEL_24;
    }
LABEL_15:
    if (v14) {
      size_t v18 = v13;
    }
    else {
      size_t v18 = v13 + 1;
    }
    memcpy(a1, a2, v18);
    goto LABEL_26;
  }
  if ((*(unsigned int (**)(unint64_t))(v9 + 48))(((((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                   + v12
                                                                   + 8) & ~v12))
    goto LABEL_15;
LABEL_24:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 32))(a1, a2, v6);
  int v19 = (void *)(((unint64_t)a1 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v20 = (void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  *int v19 = *v20;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v19 + v12 + 8) & ~v12, ((unint64_t)v20 + v12 + 8) & ~v12, v5);
  if (!v14) {
    *((unsigned char *)a1 + v13) = 0;
  }
LABEL_26:
  if (v14) {
    unint64_t v21 = v13;
  }
  else {
    unint64_t v21 = v13 + 1;
  }
  *(_DWORD *)(((unint64_t)a1 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v21 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

void *assignWithTake for ObjectCache.Item(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v46 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v46 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ~v11;
  unint64_t v47 = ((v11 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + *(void *)(v8 + 64);
  int v13 = v9 | v7;
  uint64_t v44 = v5;
  uint64_t v45 = ~v11;
  uint64_t v42 = v10;
  uint64_t v43 = v6;
  if (!(v9 | v7))
  {
    char v17 = 8 * v47;
    if (*((unsigned char *)a1 + v47))
    {
      int v18 = (*((unsigned __int8 *)a1 + v47) - 1) << v17;
      int v19 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
      if (v47 > 3) {
        int v18 = 0;
      }
      if (v47)
      {
        if (v47 <= 3) {
          int v20 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
        }
        else {
          int v20 = 4;
        }
        switch(v20)
        {
          case 2:
            int v19 = *a1;
            break;
          case 3:
            int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v19 = *(_DWORD *)a1;
            break;
          default:
            int v19 = *(unsigned __int8 *)a1;
            break;
        }
      }
      if ((v19 | v18) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v47)) {
          goto LABEL_54;
        }
        int v28 = (*((unsigned __int8 *)a2 + v47) - 1) << v17;
        int v29 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
        if (v47 > 3) {
          int v28 = 0;
        }
        if (v47)
        {
          if (v47 <= 3) {
            int v30 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
          }
          else {
            int v30 = 4;
          }
          switch(v30)
          {
            case 2:
              int v29 = *a2;
              break;
            case 3:
              int v29 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v29 = *(_DWORD *)a2;
              break;
            default:
              int v29 = *(unsigned __int8 *)a2;
              break;
          }
        }
        if ((v29 | v28) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v13) {
          size_t v34 = v47;
        }
        else {
          size_t v34 = v47 + 1;
        }
        memcpy(v4, v3, v34);
        goto LABEL_56;
      }
    }
    if (!*((unsigned char *)a2 + v47))
    {
LABEL_49:
      (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v4, v3, v5);
      uint64_t v35 = (void *)(((unint64_t)v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v36 = (void *)(((unint64_t)v3 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      void *v35 = *v36;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v35 + v11 + 8) & v12, ((unint64_t)v36 + v11 + 8) & v12, v46);
      goto LABEL_56;
    }
    int v31 = (*((unsigned __int8 *)a2 + v47) - 1) << v17;
    int v32 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
    if (v47 > 3) {
      int v31 = 0;
    }
    if (v47)
    {
      if (v47 <= 3) {
        int v33 = ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 8) & ~v11) + *(_DWORD *)(v8 + 64);
      }
      else {
        int v33 = 4;
      }
      switch(v33)
      {
        case 2:
          int v32 = *a2;
          break;
        case 3:
          int v32 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v32 = *(_DWORD *)a2;
          break;
        default:
          int v32 = *(unsigned __int8 *)a2;
          break;
      }
    }
    int v16 = (v32 | v31) + 1;
    goto LABEL_43;
  }
  if (v7 < v9)
  {
    int v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v41 = v15(((((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v12, v9, v46);
    int v16 = v15(((((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11, v9, v46);
    uint64_t v3 = a2;
    int v13 = v9 | v7;
    if (v41) {
      goto LABEL_4;
    }
    goto LABEL_43;
  }
  int v21 = v9 | v7;
  int v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v25 = *(void *)(a3 + 16);
  int v26 = v23(a1, v7, v5);
  uint64_t v27 = v25;
  uint64_t v4 = a1;
  int v16 = v23(a2, v7, v27);
  uint64_t v3 = a2;
  int v13 = v21;
  if (!v26)
  {
LABEL_43:
    uint64_t v5 = v44;
    uint64_t v12 = ~v11;
    uint64_t v10 = v42;
    uint64_t v6 = v43;
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v43 + 8))(v4, v44);
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((((unint64_t)v4 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v45, v46);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
LABEL_4:
  if (v16) {
    goto LABEL_45;
  }
LABEL_54:
  (*(void (**)(void *, const void *, uint64_t))(v43 + 32))(v4, v3, v44);
  uint64_t v37 = (void *)(((unint64_t)v4 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = (void *)(((unint64_t)v3 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v37 = *v38;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v37 + v11 + 8) & v45, ((unint64_t)v38 + v11 + 8) & v45, v46);
  if (!v13) {
    *((unsigned char *)v4 + v47) = 0;
  }
LABEL_56:
  unint64_t v39 = v47;
  if (!v13) {
    unint64_t v39 = v47 + 1;
  }
  *(_DWORD *)(((unint64_t)v4 + v39 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v3 + v39 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return v4;
}

uint64_t getEnumTagSinglePayload for ObjectCache.Item(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(v6 - 8) + 64);
  if (!v10) {
    ++v14;
  }
  if (!a2) {
    return 0;
  }
  if (v11 < a2)
  {
    unint64_t v15 = ((v14 + ((v13 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v16 = a2 - v11;
    uint64_t v17 = v15 & 0xFFFFFFFC;
    if ((v15 & 0xFFFFFFFC) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = v16 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v15);
        if (!v21) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v21) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246063E0CLL);
      case 4:
        int v21 = *(int *)((char *)a1 + v15);
        if (!v21) {
          break;
        }
LABEL_25:
        int v22 = v21 - 1;
        if (v17)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v11 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v10 < 2) {
    return 0;
  }
  if (v5 >= v9) {
    unsigned int v25 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    unsigned int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & ~v13, v9, v6);
  }
  if (v25 >= 2) {
    return v25 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ObjectCache.Item(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  size_t v16 = ((v13 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v17 = 3;
  if (!v14) {
    uint64_t v17 = 4;
  }
  size_t v18 = ((v17 + v16) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v15 < a3)
  {
    unsigned int v19 = a3 - v15;
    if (((v17 + v16) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v6 = v21;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v15)
  {
    if (v18) {
      int v22 = 1;
    }
    else {
      int v22 = a2 - v15;
    }
    if (v18)
    {
      int v23 = ~v15 + a2;
      bzero(a1, v18);
      *(_DWORD *)a1 = v23;
    }
    switch(v6)
    {
      case 1:
        a1[v18] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v22;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v18] = v22;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x24606414CLL);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v14 >= 2)
        {
          if (a2 + 1 <= v14)
          {
            if (a2 != -1)
            {
              if (v8 >= v11)
              {
                int v30 = *(void (**)(void))(v7 + 56);
                v30();
              }
              else
              {
                unint64_t v27 = (((unint64_t)&a1[v12 + 7] & 0xFFFFFFFFFFFFFFF8) + v13 + 8) & ~v13;
                int v28 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                uint64_t v29 = a2 + 1;
                v28(v27, v29, v11, v9);
              }
            }
          }
          else
          {
            if (v16 <= 3) {
              int v24 = ~(-1 << (8 * v16));
            }
            else {
              int v24 = -1;
            }
            if (v16)
            {
              int v25 = v24 & (a2 - v14);
              if (v16 <= 3) {
                int v26 = v16;
              }
              else {
                int v26 = 4;
              }
              bzero(a1, v16);
              switch(v26)
              {
                case 2:
                  *(_WORD *)a1 = v25;
                  break;
                case 3:
                  *(_WORD *)a1 = v25;
                  a1[2] = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)a1 = v25;
                  break;
                default:
                  *a1 = v25;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for Text.Effect.ClusterIndex()
{
  return &type metadata for Text.Effect.ClusterIndex;
}

void Text.Effect.BaseContent.layoutDirection.getter(unsigned char *a1@<X8>)
{
  specialized Collection.first.getter((uint64_t)v11);
  uint64_t v2 = v11[0];
  if (!v11[0]) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v11[3] + 96);
  if (!*(void *)(v3 + 16) || (uint64_t v4 = *(void **)(v3 + 48), !v4[2]))
  {
    outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v11[0]);
LABEL_6:
    char v9 = 0;
    goto LABEL_7;
  }
  int v6 = (void *)v4[4];
  CFIndex v5 = v4[5];
  swift_retain_n();
  uint64_t v7 = v6;
  unsigned int v8 = (id)_CTLineGetRunAtIndex(v7, v5);
  char Status = CTRunGetStatus((CTRunRef)v8);

  outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v2);
  swift_release_n();

  char v9 = Status & 1;
LABEL_7:
  *a1 = v9;
}

uint64_t Text.Effect.DrawableContent.init(fragment:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  Swift::UInt64 v5 = a1[1];
  uint64_t v6 = a1[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseContent.init(keyframes:key:)(v4, v5, v6, a2);
  return outlined release of Text.Effect.BaseFragment((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.SubcomponentKeyPath()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.SubcomponentKeyPath(void *result, void *a2)
{
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result) {
      return 0;
    }
    uint64_t v2 = result[1];
    uint64_t v3 = a2[1];
    if (!__OFSUB__(v3, v2))
    {
      if (v3 == v2)
      {
        uint64_t v4 = result[2];
        uint64_t v5 = a2[2];
        if (!__OFSUB__(v5, v4)) {
          return (void *)(v5 == v4);
        }
        goto LABEL_10;
      }
      return 0;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t Text.Effect.BaseContent.init(keyframes:key:)@<X0>(uint64_t a1@<X0>, Swift::UInt64 a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v57 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v12 = v11;
  uint64_t v58 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v65 = (char *)v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v61 = (char *)v56 - v15;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v17 = v16;
  uint64_t v60 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unsigned int v19 = (char *)v56 - v18;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  swift_retain();
  swift_retain();
  uint64_t v67 = v19;
  RangeSet.init()();
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 48);
  if (!*(void *)(v20 + 16)) {
    goto LABEL_44;
  }
  swift_retain();
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v22 & 1) == 0)
  {
LABEL_43:
    swift_release();
LABEL_44:
    uint64_t result = swift_endAccess();
    __break(1u);
    return result;
  }
  v56[0] = a1;
  uint64_t v23 = *(void *)(*(void *)(v20 + 56) + 16 * v21);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v56[1] = a3;
  swift_release();
  uint64_t v24 = *(void *)(v23 + 16);
  int v66 = v10;
  uint64_t v63 = v24;
  uint64_t v59 = a4;
  if (v24)
  {
    unint64_t v25 = 0;
    uint64_t v64 = (void (*)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v62 = v23;
    while (v25 < *(void *)(v23 + 16))
    {
      uint64_t v26 = *((void *)v64 + v25);
      CFIndex v28 = *(void *)(v26 + 16);
      uint64_t v27 = *(void *)(v26 + 24);
      swift_retain_n();
      if (v28 != v27)
      {
        while (1)
        {
          uint64_t v29 = *(void **)(v26 + 32);
          uint64_t v30 = *(void *)(v26 + 40);
          if (*(unsigned char *)(v26 + 48))
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v26 + 32), *(void *)(v26 + 40), 1);
            id v31 = (id)_NSTextLineFragmentGetCTLine(v29);
            if (!v31) {
              goto LABEL_42;
            }
            id v32 = v31;
            outlined consume of Text.Layout.Line.Line(v29, v30, 1);
            uint64_t v29 = v32;
          }
          else
          {
            outlined copy of Text.Layout.Line.Line(*(void **)(v26 + 32), *(void *)(v26 + 40), 0);
            outlined copy of Text.Layout.Line.Line(v29, v30, 0);

            swift_release();
          }
          if (v28 < *(void *)(v26 + 16) || v28 >= *(void *)(v26 + 24)) {
            break;
          }
          swift_retain();
          int v33 = v29;
          size_t v34 = (id)_CTLineGetRunAtIndex(v33, v28);
          CFRange StringRange = CTRunGetStringRange((CTRunRef)v34);
          swift_release();

          CFIndex v36 = StringRange.location + StringRange.length;
          if (__OFADD__(StringRange.location, StringRange.length)) {
            goto LABEL_34;
          }
          if (v36 < StringRange.location) {
            goto LABEL_35;
          }
          uint64_t v37 = *(void *)(v26 + 88);
          CFIndex v38 = StringRange.location + v37;
          if (__OFADD__(StringRange.location, v37)) {
            goto LABEL_36;
          }
          BOOL v39 = __OFADD__(v36, v37);
          CFIndex v40 = v36 + v37;
          if (v39) {
            goto LABEL_37;
          }
          if (v40 < v38) {
            goto LABEL_38;
          }
          v68[4] = StringRange.location + v37;
          v68[5] = v40;
          if (__OFSUB__(v40, v38)) {
            goto LABEL_39;
          }
          if (v40 != v38)
          {
            int v41 = (void (*)(void *, void))RangeSet._ranges.modify();
            RangeSet.Ranges._insert(contentsOf:)();
            v41(v68, 0);
          }
          ++v28;
          swift_release();

          if (v28 == *(void *)(v26 + 24)) {
            goto LABEL_5;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
LABEL_5:
      ++v25;
      swift_release_n();
      uint64_t v23 = v62;
      if (v63 == v25)
      {
        swift_bridgeObjectRelease();
        a4 = v59;
        uint64_t v10 = v66;
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v62 = type metadata accessor for Text.Effect.BaseContent(0);
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))((char *)a4 + *(int *)(v62 + 24), v67, v17);
  uint64_t v42 = v61;
  uint64_t v63 = v17;
  RangeSet.ranges.getter();
  uint64_t v43 = v58 + 16;
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v64(v65, v42, v12);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v44 = &v10[*(int *)(v57 + 36)];
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  uint64_t v45 = 0;
  uint64_t v46 = (void (**)(char *, uint64_t))(v43 - 8);
  unint64_t v47 = v65;
  while (1)
  {
    uint64_t v48 = *(void *)v44;
    uint64_t v49 = (uint64_t)v66;
    dispatch thunk of Collection.endIndex.getter();
    if (v48 == v68[0]) {
      break;
    }
    uint64_t v50 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v52 = *v51;
    uint64_t v53 = v51[1];
    v50(v68, 0);
    v64(v47, (char *)v49, v12);
    uint64_t v49 = (uint64_t)v47;
    dispatch thunk of Collection.formIndex(after:)();
    (*v46)(v47, v12);
    uint64_t v54 = v53 - v52;
    if (__OFSUB__(v53, v52)) {
      goto LABEL_40;
    }
    BOOL v39 = __OFADD__(v45, v54);
    v45 += v54;
    if (v39)
    {
      __break(1u);
      break;
    }
  }
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v49, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
  swift_release();
  swift_release();
  (*v46)(v61, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v67, v63);
  *(void *)((char *)v59 + *(int *)(v62 + 28)) = v45;
  return result;
}

double Text.Effect.DrawableContent.subscript.getter@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  Swift::UInt64 v6 = v2[1];
  uint64_t v7 = v2[2];
  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(v5, v6, v7, a1, (uint64_t)v10);
  long long v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 48) = v12;
  return result;
}

uint64_t Text.Effect.DrawableContent.startIndex.getter()
{
  uint64_t v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  uint64_t v3 = v0[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
    if (v4)
    {
      swift_endAccess();
      swift_release();
      return 0;
    }
    swift_release();
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return MEMORY[0x270F9E068](a1, a2, a3, a4, v8);
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return MEMORY[0x270F9E078](a1, a2, a3, a4, v8);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.DrawableContent<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Text.Effect.DrawableContent<A>@<X0>(void *a1@<X8>)
{
  uint64_t result = Text.Effect.DrawableContent.startIndex.getter();
  *a1 = 0;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Text.Effect.DrawableContent<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized Text.Effect.DrawableContent.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.DrawableContent<A>(void *a1, unint64_t *a2))(uint64_t a1)
{
  char v4 = malloc(0x60uLL);
  *a1 = v4;
  v4[11] = Text.Effect.DrawableContent.subscript.read(v4 + 7, *a2);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 48);
  long long v9 = *(_OWORD *)(v5 + 16);
  long long v8 = *(_OWORD *)(v5 + 32);
  *char v4 = *(void *)v5;
  v4[1] = v6;
  *((_OWORD *)v4 + 1) = v9;
  *((_OWORD *)v4 + 2) = v8;
  v4[6] = v7;
  return protocol witness for Collection.subscript.read in conformance Text.Effect.RenderSegmentation.StaticLines;
}

void (*Text.Effect.DrawableContent.subscript.read(void *a1, unint64_t a2))(uint64_t *a1)
{
  char v4 = malloc(0x38uLL);
  *a1 = v4;
  Text.Effect.DrawableContent.subscript.getter(a2, (uint64_t)v4);
  return Text.Effect.DrawableContent.subscript.read;
}

void Text.Effect.DrawableContent.subscript.read(uint64_t *a1)
{
  Swift::UInt64 v1 = (void *)*a1;
  outlined release of Text.Effect.BaseFragment(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.DrawableContent<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance Text.Effect.DrawableContent<A>()
{
  swift_getWitnessTable();
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v7 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v7 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.index(after:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.DrawableContent<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v7 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();

  return a4(a1, a2, WitnessTable, v7);
}

void *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.DrawableContent<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.DrawableContent<A>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, unint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v8 = lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  uint64_t result = a4(&v10, a1, a2, WitnessTable, v8);
  *a1 = v10;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Text.Effect.DrawableContent<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  Text.Effect.DrawableContent.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Text.Effect.DrawableContent<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.DrawableContent<A>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.BaseContent(uint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance Text.Effect.BaseContent(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance Text.Effect.BaseContent@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  Swift::UInt64 v3 = v1[1];
  uint64_t v5 = v1[2];
  swift_beginAccess();
  uint64_t v6 = specialized Dictionary.subscript.getter(v3, v5, *(void *)(v4 + 48));
  uint64_t result = swift_endAccess();
  if (v6)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance Text.Effect.BaseContent@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  Swift::UInt64 v3 = v1[1];
  uint64_t v5 = v1[2];
  swift_beginAccess();
  uint64_t v6 = specialized Dictionary.subscript.getter(v3, v5, *(void *)(v4 + 48));
  uint64_t result = swift_endAccess();
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.BaseContent(void *a1, unint64_t *a2))(uint64_t *a1)
{
  uint64_t v5 = malloc(0x70uLL);
  *a1 = v5;
  unint64_t v6 = *a2;
  uint64_t v7 = *v2;
  Swift::UInt64 v8 = v2[1];
  uint64_t v9 = v2[2];
  swift_retain();
  swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v7, v8, v9, v6, v5);
  long long v10 = v5[1];
  *(_OWORD *)((char *)v5 + 56) = *v5;
  *(_OWORD *)((char *)v5 + 72) = v10;
  *(_OWORD *)((char *)v5 + 88) = v5[2];
  *((void *)v5 + 13) = *((void *)v5 + 6);
  return Text.Effect.DrawableContent.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance Text.Effect.BaseContent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.BaseContent@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3);
  if (a2 < 1)
  {
    if (v7 <= 0 && v7 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v6, a2);
    char v9 = 0;
    goto LABEL_11;
  }
  if (v7 < 0 || v7 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t result = 0;
  char v9 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v9;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance Text.Effect.BaseContent@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Text.Effect.BaseContent(unint64_t *a1)
{
  uint64_t result = specialized RandomAccessCollection<>.index(after:)(*a1);
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.BaseContent(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_0((uint64_t)v1, a1, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v4 = *v1;
  Swift::UInt64 v6 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(v4 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v6, v5), (v7 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v2, type metadata accessor for Text.Effect.BaseContent);
    type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
    *(void *)(a1 + *(int *)(v8 + 36)) = 0;
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.BaseContent()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v0, type metadata accessor for Text.Effect.BaseContent);
  return v1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Effect.ChunkIndex()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.ChunkIndex(void *result, void *a2)
{
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else
  {
    if (*a2 != *result) {
      return 0;
    }
    uint64_t v2 = result[1];
    uint64_t v3 = a2[1];
    if (!__OFSUB__(v3, v2)) {
      return (void *)(v3 == v2);
    }
  }
  __break(1u);
  return result;
}

_OWORD *protocol witness for Collection.subscript.read in conformance Text.Effect.ChunkCollection(_OWORD *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v4 = *(void *)v2 + 32 * v3;
    long long v5 = *(_OWORD *)(v4 + 48);
    *uint64_t result = *(_OWORD *)(v4 + 32);
    result[1] = v5;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.ChunkCollection()
{
  Swift::UInt v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.ChunkCollection(void *a1, _OWORD *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

void ClusterIndexSequence.Iterator.next()(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  MEMORY[0x270FA5388](v3 - 8);
  long long v5 = (void *)((char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v7 = (unint64_t *)(v1 + *(int *)(v6 + 36));
  unint64_t v8 = *v7;
  char v9 = (uint64_t *)(v1 + *(int *)(v6 + 32));
  uint64_t v10 = *v9;
  if ((uint64_t)*v7 >= *v9)
  {
    if (__OFSUB__(v10, v8))
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v10 != v8 || (uint64_t)v7[1] >= v9[1])
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      goto LABEL_13;
    }
  }
  _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_0(v1, (uint64_t)v5, type metadata accessor for ClusterIndexSequence.Iterator);
  uint64_t v11 = *v5;
  Swift::UInt64 v12 = v5[1];
  uint64_t v13 = v5[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v11, v12, v13, v8, (uint64_t)v27);
  uint64_t v14 = v27[0];
  uint64_t v15 = v27[1];
  uint64_t v16 = v27[2];
  uint64_t v17 = v27[3];
  uint64_t v18 = v27[4];
  uint64_t v19 = v27[5];
  uint64_t v20 = v27[6];
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v5, type metadata accessor for Text.Effect.BaseContent);
  unint64_t v21 = v7[1];
  unint64_t v22 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  v7[1] = v22;
  uint64_t v23 = *(void *)(*(void *)(v17 + 96) + 16);
  BOOL v24 = __OFADD__(v20, v23);
  uint64_t v25 = v20 + v23;
  if (v24)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v25 < v20)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (__OFSUB__(v25, v22))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v25 != v22)
  {
LABEL_13:
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v16;
    a1[3] = v17;
    a1[4] = v18;
    a1[5] = v19;
    a1[6] = v20;
    a1[7] = v21;
    return;
  }
  if (!__OFADD__(*v7, 1))
  {
    ++*v7;
    goto LABEL_13;
  }
LABEL_19:
  __break(1u);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance ClusterIndexSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  ClusterIndexSequence.Iterator.next()(v3);
  return outlined init with take of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?((uint64_t)v3, a1, &lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?, (void (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence(a1, type metadata accessor for ClusterIndexSequence.Iterator, type metadata accessor for ClusterIndexSequence, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ClusterIndexSequence()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v0, type metadata accessor for ClusterIndexSequence);
  return v1;
}

void FragmentRangeSequence.Iterator.next()(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FragmentRangeSequence.Iterator(0);
  MEMORY[0x270FA5388](v3 - 8);
  long long v5 = (void *)((char *)&v32[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v7 = (unint64_t *)(v1 + *(int *)(v6 + 36));
  unint64_t v8 = *v7;
  char v9 = (void *)(v1 + *(int *)(v6 + 32));
  uint64_t v10 = *v9;
  if ((int64_t)*v7 >= *v9)
  {
    if (__OFSUB__(v10, v8))
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v10 != v8 || (int64_t)v7[1] >= v9[1])
    {
      uint64_t v27 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      int64_t v19 = 0;
      int64_t v21 = 0;
      int64_t v22 = 0;
LABEL_25:
      *a1 = v27;
      a1[1] = v14;
      a1[2] = v15;
      a1[3] = v16;
      a1[4] = v17;
      a1[5] = v18;
      a1[6] = v19;
      a1[7] = v21;
      a1[8] = v22;
      return;
    }
  }
  _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_0(v1, (uint64_t)v5, type metadata accessor for FragmentRangeSequence.Iterator);
  uint64_t v11 = *v5;
  Swift::UInt64 v12 = v5[1];
  uint64_t v13 = v5[2];
  swift_retain();
  swift_retain();
  Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v11, v12, v13, v8, (uint64_t)v32);
  uint64_t v14 = v32[1];
  uint64_t v31 = v32[0];
  uint64_t v15 = v32[2];
  uint64_t v16 = v32[3];
  uint64_t v17 = v32[4];
  uint64_t v18 = v32[5];
  int64_t v19 = v32[6];
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>((uint64_t)v5, type metadata accessor for Text.Effect.BaseContent);
  unint64_t v20 = *v7;
  if (__OFSUB__(*v9, *v7))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (*v9 != *v7)
  {
    uint64_t v28 = *(void *)(*(void *)(v16 + 96) + 16);
    int64_t v25 = v19 + v28;
    BOOL v26 = __OFADD__(v19, v28);
    if (__OFADD__(v19, v28)) {
      goto LABEL_32;
    }
    int64_t v21 = v7[1];
    if (v25 < v19 || v25 < v21) {
      goto LABEL_33;
    }
    int64_t v22 = v25;
LABEL_21:
    if (!v26)
    {
      if (v25 >= v19)
      {
        v7[1] = v25;
        BOOL v24 = __OFADD__(v20, 1);
        unint64_t v30 = v20 + 1;
        if (!v24)
        {
          *char v7 = v30;
          uint64_t v27 = v31;
          goto LABEL_25;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v21 = v7[1];
  int64_t v22 = v9[1];
  if (v22 >= v21)
  {
    uint64_t v23 = *(void *)(*(void *)(v16 + 96) + 16);
    BOOL v24 = __OFADD__(v19, v23);
    int64_t v25 = v19 + v23;
    BOOL v26 = v24;
    goto LABEL_21;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance FragmentRangeSequence.Iterator@<X0>(uint64_t a1@<X8>)
{
  FragmentRangeSequence.Iterator.next()(v3);
  return outlined init with take of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?((uint64_t)v3, a1, &lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>)?, (void (*)(uint64_t))type metadata accessor for (fragment: Text.Effect.BaseFragment, range: Range<Text.Effect.ClusterIndex>));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance FragmentRangeSequence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence(a1, type metadata accessor for FragmentRangeSequence.Iterator, type metadata accessor for FragmentRangeSequence, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ClusterIndexSequence@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_0(v4, a4, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v9 = *(int *)(a1 + 24);
  uint64_t v10 = (uint64_t *)(v4 + *(int *)(a1 + 20));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *(void *)(v4 + v9);
  uint64_t v14 = *(void *)(v4 + v9 + 8);
  uint64_t v15 = (int *)a2(0);
  uint64_t v16 = (void *)(a4 + v15[5]);
  *uint64_t v16 = v11;
  v16[1] = v12;
  uint64_t v17 = (void *)(a4 + v15[6]);
  void *v17 = v13;
  v17[1] = v14;
  uint64_t v18 = (void *)(a4 + v15[7]);
  *uint64_t v18 = v11;
  v18[1] = v12;
  return outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v4, a3);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance FragmentRangeSequence()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(v0, type metadata accessor for FragmentRangeSequence);
  return v1;
}

uint64_t type metadata accessor for Text.Effect.BaseContent(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for Text.Effect.BaseContent);
}

uint64_t _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Chunk()
{
  return &type metadata for Text.Effect.Chunk;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.BaseContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    char v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v13 = v12;
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v13);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  return v7;
}

uint64_t destroy for Text.Effect.BaseContent(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for Text.Effect.BaseContent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v8, v9, v11);
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

void *assignWithCopy for Text.Effect.BaseContent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for Text.Effect.BaseContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

void *assignWithTake for Text.Effect.BaseContent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.BaseContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2460666E4);
}

uint64_t sub_2460666E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.BaseContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2460667E0);
}

void *sub_2460667E0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for Text.Effect.BaseContent()
{
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata completion function for Text.Effect.DrawableContent()
{
  uint64_t result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.DrawableContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = *(int *)(v4 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v13 = v12;
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v10, v11, v13);
    *(uint64_t *)((char *)a1 + *(int *)(v7 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 28));
  }
  return a1;
}

uint64_t destroy for Text.Effect.DrawableContent(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Text.Effect.BaseContent(0) + 24);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *initializeWithCopy for Text.Effect.DrawableContent(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v11(v7, v8, v10);
  *(void *)((char *)a1 + *(int *)(v5 + 28)) = *(void *)((char *)a2 + *(int *)(v5 + 28));
  return a1;
}

void *assignWithCopy for Text.Effect.DrawableContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  *(void *)((char *)a1 + *(int *)(v4 + 28)) = *(void *)((char *)a2 + *(int *)(v4 + 28));
  return a1;
}

uint64_t initializeWithTake for Text.Effect.DrawableContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v5 = *(int *)(v4 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  *(void *)(a1 + *(int *)(v4 + 28)) = *(void *)(a2 + *(int *)(v4 + 28));
  return a1;
}

void *assignWithTake for Text.Effect.DrawableContent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  uint64_t v5 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v6 = *(int *)(v5 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(v5 + 28)) = *(void *)((char *)a2 + *(int *)(v5 + 28));
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.DrawableContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.DrawableContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm);
}

uint64_t type metadata accessor for Text.Effect.DrawableContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Sequence in Text.Effect.DrawableContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>();
}

{
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  lazy protocol witness table accessor for type Int and conformance Int();
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in Text.Effect.DrawableContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.DrawableContent<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.DrawableContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.BaseContent> and conformance IndexingIterator<A>, (void (*)(uint64_t))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
}

uint64_t lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<Text.Effect.BaseContent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for Text.Effect.BaseContent(255);
    uint64_t v7 = lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for Sequence in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.BaseContent()
{
  return _sSny7SwiftUI4TextVAAE6EffectO18FragmentIdentifierVGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance Slice<A>, type metadata accessor for Slice<Text.Effect.BaseContent>);
}

void type metadata accessor for Slice<Text.Effect.BaseContent>(uint64_t a1)
{
}

uint64_t base witness table accessor for Collection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.BaseContent()
{
  return _sSny7SwiftUI4TextVAAE6EffectO18FragmentIdentifierVGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

uint64_t _sSny7SwiftUI4TextVAAE6EffectO18FragmentIdentifierVGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(255, &lazy cache variable for type metadata for Range<Text.Effect.FragmentIdentifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent);
}

uint64_t base witness table accessor for BidirectionalCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.BaseContent()
{
  return _sSny7SwiftUI4TextVAAE6EffectO18FragmentIdentifierVGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.BaseContent()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type Text.Effect.BaseContent and conformance Text.Effect.BaseContent);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.BaseContent> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<Text.Effect.BaseContent>(255);
    lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(a2, (void (*)(uint64_t))type metadata accessor for Text.Effect.BaseContent);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in Text.Effect.DrawableContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.DrawableContent<A>()
{
  return associated type witness table accessor for Collection.Indices : Collection in Text.Effect.DrawableContent<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.DrawableContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ClusterIndexSequence.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ClusterIndexSequence.Iterator);
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ClusterIndexSequence(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ClusterIndexSequence);
}

void type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)()
{
  if (!lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex));
    }
  }
}

uint64_t type metadata accessor for FragmentRangeSequence.Iterator(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for FragmentRangeSequence.Iterator);
}

uint64_t type metadata accessor for FragmentRangeSequence(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for FragmentRangeSequence);
}

uint64_t outlined init with take of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for ClusterIndexSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246067930);
}

uint64_t __swift_get_extra_inhabitant_index_5Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ClusterIndexSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2460679B4);
}

uint64_t __swift_store_extra_inhabitant_index_6Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for ClusterIndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm_0);
}

uint64_t storeEnumTagSinglePayload for ClusterIndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm_0);
}

uint64_t *initializeBufferWithCopyOfBuffer for ClusterIndexSequence.Iterator(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = type metadata accessor for Text.Effect.BaseContent(0);
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v17 = (char *)v7 + v10;
    uint64_t v11 = (char *)a2 + v10;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v13 = v12;
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v17, v11, v13);
    *(uint64_t *)((char *)v7 + *(int *)(v9 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 28));
    uint64_t v15 = a3[6];
    *(_OWORD *)((char *)v7 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
    *(_OWORD *)((char *)v7 + v15) = *(_OWORD *)((char *)a2 + v15);
    *(_OWORD *)((char *)v7 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  }
  return v7;
}

void *initializeWithCopy for ClusterIndexSequence.Iterator(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v15 = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v15, v9, v11);
  *(void *)((char *)a1 + *(int *)(v7 + 28)) = *(void *)((char *)a2 + *(int *)(v7 + 28));
  uint64_t v13 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithCopy for ClusterIndexSequence.Iterator(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(v6 + 28)) = *(void *)((char *)a2 + *(int *)(v6 + 28));
  uint64_t v11 = a3[5];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)((char *)a1 + v17);
  int64_t v19 = (void *)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  return a1;
}

uint64_t initializeWithTake for ClusterIndexSequence.Iterator(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(v6 + 28)) = *(void *)(a2 + *(int *)(v6 + 28));
  uint64_t v11 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

void *assignWithTake for ClusterIndexSequence.Iterator(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)((char *)a1 + *(int *)(v7 + 28)) = *(void *)((char *)a2 + *(int *)(v7 + 28));
  uint64_t v12 = a3[6];
  *(_OWORD *)((char *)a1 + a3[5]) = *(_OWORD *)((char *)a2 + a3[5]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for FragmentRangeSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm_1);
}

uint64_t storeEnumTagSinglePayload for FragmentRangeSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm_1);
}

uint64_t type metadata completion function for ClusterIndexSequence.Iterator()
{
  uint64_t result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClusterIndexSequence(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    uint64_t v9 = type metadata accessor for Text.Effect.BaseContent(0);
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v17 = (char *)v7 + v10;
    uint64_t v11 = (char *)a2 + v10;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v13 = v12;
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v14(v17, v11, v13);
    *(uint64_t *)((char *)v7 + *(int *)(v9 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 28));
    uint64_t v15 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)v7 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_OWORD *)((char *)v7 + v15) = *(_OWORD *)((char *)a2 + v15);
  }
  return v7;
}

void *initializeWithCopy for ClusterIndexSequence(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v15 = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v15, v9, v11);
  *(void *)((char *)a1 + *(int *)(v7 + 28)) = *(void *)((char *)a2 + *(int *)(v7 + 28));
  uint64_t v13 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

void *assignWithCopy for ClusterIndexSequence(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(v6 + 28)) = *(void *)((char *)a2 + *(int *)(v6 + 28));
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t initializeWithTake for ClusterIndexSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v7 = *(int *)(v6 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(v6 + 28)) = *(void *)(a2 + *(int *)(v6 + 28));
  uint64_t v11 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

void *assignWithTake for ClusterIndexSequence(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = type metadata accessor for Text.Effect.BaseContent(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(void *)((char *)a1 + *(int *)(v7 + 28)) = *(void *)((char *)a2 + *(int *)(v7 + 28));
  uint64_t v12 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FragmentRangeSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_5Tm_2);
}

uint64_t storeEnumTagSinglePayload for FragmentRangeSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_6Tm_2);
}

uint64_t type metadata completion function for ClusterIndexSequence()
{
  uint64_t result = type metadata accessor for Text.Effect.BaseContent(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.SubcomponentKeyPath()
{
  return &type metadata for Text.Effect.SubcomponentKeyPath;
}

ValueMetadata *type metadata accessor for Text.Effect.ChunkIndex()
{
  return &type metadata for Text.Effect.ChunkIndex;
}

ValueMetadata *type metadata accessor for Text.Effect.SubcomponentIndex()
{
  return &type metadata for Text.Effect.SubcomponentIndex;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentIndex and conformance Text.Effect.SubcomponentIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkIndex and conformance Text.Effect.ChunkIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath;
  if (!lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.SubcomponentKeyPath and conformance Text.Effect.SubcomponentKeyPath);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FragmentRangeSequence()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type FragmentRangeSequence.Iterator and conformance FragmentRangeSequence.Iterator, (void (*)(uint64_t))type metadata accessor for FragmentRangeSequence.Iterator);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ClusterIndexSequence()
{
  return lazy protocol witness table accessor for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator(&lazy protocol witness table cache variable for type ClusterIndexSequence.Iterator and conformance ClusterIndexSequence.Iterator, (void (*)(uint64_t))type metadata accessor for ClusterIndexSequence.Iterator);
}

ValueMetadata *type metadata accessor for Text.Effect.ChunkCollection()
{
  return &type metadata for Text.Effect.ChunkCollection;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.ChunkCollection>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection;
  if (!lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.ChunkCollection>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.ChunkCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, (uint64_t)&type metadata for Text.Effect.ChunkCollection, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_0(255, &lazy cache variable for type metadata for Slice<Text.Effect.ChunkCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection, (uint64_t)&type metadata for Text.Effect.ChunkCollection, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.ChunkCollection()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.ChunkCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ChunkCollection and conformance Text.Effect.ChunkCollection);
}

double static CGSize.- infix(_:_:)(double a1, double a2, double a3)
{
  return a1 - a3;
}

double static CGSize.+= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 + a2;
  double v4 = a1[1] + a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

double static CGSize.- prefix(_:)(double a1)
{
  return -a1;
}

double static CGSize./ infix(_:_:)(double a1, double a2, double a3)
{
  return 1.0 / a3 * a1;
}

double static CGSize.* infix(_:_:)(double a1, double a2, double a3)
{
  return a1 * a3;
}

double static CGSize.-= infix(_:_:)(double *a1, double a2, double a3)
{
  double result = *a1 - a2;
  double v4 = a1[1] - a3;
  *a1 = result;
  a1[1] = v4;
  return result;
}

float64x2_t static CGSize.*= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result = vmulq_n_f64(*a1, a2);
  *a1 = result;
  return result;
}

float64x2_t static CGSize./= infix(_:_:)(float64x2_t *a1, double a2)
{
  float64x2_t result = vmulq_n_f64(*a1, 1.0 / a2);
  *a1 = result;
  return result;
}

CGSize __swiftcall mix(_:_:by:)(CGSize _, CGSize a2, Swift::Double by)
{
  double v3 = (a2.width - _.width) * by + _.width;
  double v4 = (a2.height - _.height) * by + _.height;
  result.height = v4;
  result.width = v3;
  return result;
}

double CGSize.magnitude.getter(double a1, double a2)
{
  return sqrt(a1 * a1 + a2 * a2);
}

Swift::Void __swiftcall CGSize.normalize()()
{
  double v2 = *v0;
  double v1 = v0[1];
  double v3 = v2 * v2 + v1 * v1;
  if (v3 != 0.0)
  {
    double v4 = 1.0 / sqrt(v3);
    *unint64_t v0 = v2 * v4;
    v0[1] = v1 * v4;
  }
}

CGSize __swiftcall CGSize.normalized()()
{
  double v2 = v0 * v0 + v1 * v1;
  if (v2 != 0.0)
  {
    double v3 = 1.0 / sqrt(v2);
    double v0 = v3 * v0;
    double v1 = v3 * v1;
  }
  result.height = v1;
  result.width = v0;
  return result;
}

uint64_t AnyArchivedViewDelegate.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnyArchivedViewDelegate.init()()
{
  return v0;
}

void AnyArchivedViewDelegate.resolveImage(uuid:)()
{
}

uint64_t AnyArchivedViewDelegate.deinit()
{
  return v0;
}

uint64_t AnyArchivedViewDelegate.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of ArchivedViewDelegate.resolveImage(uuid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for AnyArchivedViewDelegate()
{
  return self;
}

uint64_t method lookup function for AnyArchivedViewDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyArchivedViewDelegate);
}

uint64_t dispatch thunk of AnyArchivedViewDelegate.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnyArchivedViewDelegate.resolveImage(uuid:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t GesturePhase.paused()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v15(v8, v3, a1, v12);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v16(v14, v8, v10);
      v16(a2, v14, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      goto LABEL_4;
    default:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
LABEL_4:
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(a2, v3, a1);
      break;
  }
  return result;
}

uint64_t Gesture.dependency(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  swift_getAssociatedTypeWitness();
  char v8 = v5;
  uint64_t v6 = type metadata accessor for DependentGesture();
  swift_getWitnessTable();
  return Gesture.modifier<A>(_:)((uint64_t)&v8, a2, v6, a3);
}

BOOL static GestureDependency.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void GestureDependency.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int GestureDependency.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for DependentGesture()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for GestureDependency()
{
  return &type metadata for GestureDependency;
}

uint64_t sub_246069490()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for GestureDependency(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246069608);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GestureDependency.Key()
{
  return &type metadata for GestureDependency.Key;
}

uint64_t static DependentGesture._makeGesture(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 80);
  v32[3] = *(_OWORD *)(a2 + 48);
  v32[4] = v7;
  v32[5] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v9;
  v32[2] = v6;
  int v11 = *(_DWORD *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 108);
  uint64_t v33 = *(void *)(a2 + 96);
  uint64_t v10 = v33;
  int v34 = v11;
  uint64_t v35 = v12;
  uint64_t v36 = *(void *)(a2 + 116);
  int v24 = v36;
  a3(v26, v32);
  *(void *)&v32[0] = __PAIR64__(v26[0], v5);
  DWORD2(v32[0]) = v24;
  uint64_t v29 = type metadata accessor for GesturePhase();
  uint64_t v13 = type metadata accessor for DependentPhase();
  uint64_t v30 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Attribute();
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v32, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v28, v13, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15);
  int v17 = v25;
  LODWORD(v26[0]) = v25;
  uint64_t v18 = *(void *)(v10 + 16);
  if (v18)
  {
    uint64_t v19 = 32;
    while (*(ValueMetadata **)(v10 + v19) != &type metadata for GestureDependency.Key)
    {
      v19 += 16;
      if (!--v18) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRetain();
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v32[0]) = 0;
    PreferencesOutputs.subscript.setter(OffsetAttribute2, &type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key);
    uint64_t result = swift_bridgeObjectRelease();
    int v17 = v26[0];
  }
LABEL_7:
  int v21 = HIDWORD(v26[0]);
  uint64_t v22 = v26[1];
  int v23 = v27;
  *(_DWORD *)a4 = v17;
  *(_DWORD *)(a4 + 4) = v21;
  *(void *)(a4 + 8) = v22;
  *(_DWORD *)(a4 + 16) = v23;
  return result;
}

uint64_t protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance DependentGesture<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, _OWORD *)@<X2>, uint64_t a4@<X8>)
{
  return static DependentGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t DependentPhase.value.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unsigned int v5 = (char *)&v7 - v4;
  MapPhase.phase.getter((uint64_t)&v7 - v4);
  type metadata accessor for DependentGesture();
  char v8 = *(unsigned char *)AGGraphGetValue();
  uint64_t v7 = *(void *)AGGraphGetValue();
  GesturePhase.applyingDependency(_:inheritedPhase:)(&v8, &v7, v2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t GesturePhase.applyingDependency(_:inheritedPhase:)@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = *a2;
  switch(*a1)
  {
    case 1:
      if ((v5 & 2) == 0) {
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v4);
      }
      uint64_t v6 = a3;
      return GesturePhase.paused()(v6, a4);
    case 2:
      if (v5) {
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v4);
      }
      uint64_t v6 = a3;
      return GesturePhase.paused()(v6, a4);
    case 3:
      if ((v5 & 2) != 0) {
        return swift_storeEnumTagMultiPayload();
      }
      if (v5) {
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v4);
      }
      uint64_t v6 = a3;
      return GesturePhase.paused()(v6, a4);
    default:
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v4);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance DependentPhase<A>@<X0>(char *a1@<X8>)
{
  return DependentPhase.value.getter(a1);
}

uint64_t specialized static GestureDependency.Key.reduce(value:nextValue:)(char *a1, void (*a2)(uint64_t *__return_ptr))
{
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static GestureDependency.Key.reduce(value:nextValue:));
  a2(&v15);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = v15;
  unsigned __int8 v6 = *a1;
  uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*a1);
  if ((v8 & 1) == 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(*(void *)(v4 + 56) + 8 * v7);
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v11 & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
  uint64_t result = swift_bridgeObjectRelease();
  if (v12 >= v9) {
    unsigned __int8 v14 = v5;
  }
  else {
    unsigned __int8 v14 = v6;
  }
  *a1 = v14;
  return result;
}

uint64_t type metadata accessor for DependentPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in DependentPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t ResponderNode.bindEvent(_:)()
{
  return 0;
}

uint64_t ResponderNode.makeGesture(inputs:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
  int v3 = *MEMORY[0x263F288F8];
  *(void *)(a1 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = result;
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

BOOL static ResponderVisitorResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ResponderNode.init()()
{
  return v0;
}

uint64_t ResponderNode.deinit()
{
  return v0;
}

uint64_t ResponderNode.isDescendant(of:)(uint64_t a1)
{
  swift_retain_n();
  if (v1 == a1)
  {
    swift_release_n();
    return 1;
  }
  else
  {
    while (1)
    {
      int v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 88);
      uint64_t v4 = swift_retain();
      uint64_t v5 = v3(v4);
      swift_retain();
      swift_release_n();
      if (!v5) {
        break;
      }
      swift_release();
      uint64_t v1 = v5;
      if (v5 == a1)
      {
        swift_release();
        swift_release();
        return 1;
      }
    }
    swift_release();
    return 0;
  }
}

uint64_t ResponderNode.sequence.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = specialized implicit closure #1 in ResponderNode.sequence.getter;
  *(void *)(v3 + 24) = 0;
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = partial apply for specialized closure #1 in sequence<A>(first:next:);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = 0;

  return swift_retain();
}

uint64_t ResponderNode.__allocating_init()()
{
  return swift_allocObject();
}

void ResponderNode.nextResponder.getter()
{
}

uint64_t specialized implicit closure #1 in ResponderNode.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t ResponderNode.firstAncestor<A>(ofType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = specialized implicit closure #1 in ResponderNode.sequence.getter;
  *(void *)(v4 + 24) = 0;
  type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>();
  lazy protocol witness table accessor for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>();
  Sequence.first<A>(ofType:)(a1, a2);
  return swift_release();
}

uint64_t ResponderNode.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void ResponderVisitorResult.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ResponderVisitorResult.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(uint64_t a1, char a2)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v4 = (id)AGSubgraphGetCurrent();
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = v4;
    id v6 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    type metadata accessor for GesturePhase<()>();
    uint64_t v8 = specialized GraphHost.intern<A>(_:for:id:)(a1, v7, a2);
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v4 = (id)AGSubgraphGetCurrent();
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = v4;
    id v6 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    Swift::UInt v7 = specialized GraphHost.intern<A>(_:for:id:)(a1, (Swift::UInt)&type metadata for GestureDebug.Data, a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v4 = (id)AGSubgraphGetCurrent();
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = v4;
    id v6 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v6 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    Swift::UInt v7 = specialized GraphHost.intern<A>(_:for:id:)(a1, (Swift::UInt)&type metadata for ViewTransform, a2);
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_24606A044()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in sequence<A>(first:next:)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 16), a2);
}

void type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>()
{
  if (!lazy cache variable for type metadata for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>)
  {
    type metadata accessor for ResponderNode();
    type metadata accessor for (ResponderNode?, Bool)();
    unint64_t v0 = type metadata accessor for UnfoldSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>);
    }
  }
}

void type metadata accessor for (ResponderNode?, Bool)()
{
  if (!lazy cache variable for type metadata for (ResponderNode?, Bool))
  {
    type metadata accessor for ResponderNode?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ResponderNode?, Bool));
    }
  }
}

void type metadata accessor for ResponderNode?()
{
  if (!lazy cache variable for type metadata for ResponderNode?)
  {
    type metadata accessor for ResponderNode();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResponderNode?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>;
  if (!lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>)
  {
    type metadata accessor for UnfoldSequence<ResponderNode, (ResponderNode?, Bool)>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnfoldSequence<ResponderNode, (ResponderNode?, Bool)> and conformance UnfoldSequence<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResponderVisitorResult and conformance ResponderVisitorResult()
{
  unint64_t result = lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult;
  if (!lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponderVisitorResult and conformance ResponderVisitorResult);
  }
  return result;
}

uint64_t method lookup function for ResponderNode(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ResponderNode);
}

uint64_t dispatch thunk of ResponderNode.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of ResponderNode.bindEvent(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ResponderNode.makeGesture(inputs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ResponderNode.resetGesture()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

unsigned char *storeEnumTagSinglePayload for ResponderVisitorResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24606A3B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponderVisitorResult()
{
  return &type metadata for ResponderVisitorResult;
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(char a1)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    int v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewOrigin, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t result;

  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    int v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v5 = specialized GraphHost.intern<A>(_:for:id:)((Swift::UInt)&type metadata for ViewSize, a1);
    swift_release();
    return v5;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _GestureInputs.intern<A>(_:id:)(uint64_t a1, uint64_t a2, char a3)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v6 = (id)AGSubgraphGetCurrent();
    if (!v6) {
      goto LABEL_8;
    }
    Swift::UInt v7 = v6;
    id v8 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v8 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v9 = specialized GraphHost.intern<A>(_:for:id:)(a1, a2, (Swift::UInt)&type metadata for EnvironmentValues, a3);
    swift_release();
    return v9;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for GesturePhase<()>()
{
  if (!lazy cache variable for type metadata for GesturePhase<()>)
  {
    unint64_t v0 = type metadata accessor for GesturePhase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>);
    }
  }
}

uint64_t AnyTransition.isIdentity.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))() & 1;
}

void AnyTransitionBox.visitBase<A>(applying:)()
{
}

void AnyTransitionBox.visitType<A>(applying:)()
{
}

void AnyTransitionBox.isIdentity.getter()
{
}

void AnyTransitionBox.hasMotion.getter()
{
}

uint64_t AnyTransitionBox.deinit()
{
  return v0;
}

uint64_t AnyTransitionBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of TransitionVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of TransitionTypeVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t method lookup function for AnyTransitionBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyTransitionBox);
}

uint64_t AnyTransition.transaction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v7 = 0;
  int v3 = *(uint64_t (**)(void *, void *, _UNKNOWN **))(*(void *)a3 + 80);
  swift_retain();
  uint64_t result = v3(v6, &unk_26FA480E0, &protocol witness table for AnyTransition.FilterVisitor);
  uint64_t v5 = v7;
  if (v7)
  {
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24606AC78()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Transition.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  Transition.transaction(_:)((uint64_t)partial apply for closure #1 in Transition.animation(_:), v6, a2, a3);
  swift_retain();

  return swift_release();
}

uint64_t closure #1 in AnyTransition.animation(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

uint64_t partial apply for closure #1 in Transition.animation(_:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in AnyTransition.animation(_:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_24606ADDC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FilteredTransition.body(content:phase:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, *(unsigned __int8 *)(v1 + 32));
}

uint64_t FilteredTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 40))(a1, *(void *)(a2 + 16));
}

void storeEnumTagSinglePayload for FilteredTransition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x24606B054);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          int v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_24606B07C()
{
  type metadata accessor for FilteredTransition();

  return swift_getWitnessTable();
}

uint64_t sub_24606B0C4()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for AnyTransition.FilterVisitor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AnyTransition.FilterVisitor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnyTransition.FilterVisitor(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

void *type metadata accessor for AnyTransition.FilterVisitor()
{
  return &unk_26FA480E0;
}

uint64_t ProtobufEncoder.archiveOptions.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void *)(v1 + 32);
  if (one-time initialization token for archiveOptionsKey != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v3, (uint64_t)static ArchivedViewCore.archiveOptionsKey);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  if (*(void *)(v7 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v9, (uint64_t)&v15);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((void *)&v16 + 1))
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v15);
    goto LABEL_11;
  }
  uint64_t result = swift_dynamicCast();
  if (!result)
  {
LABEL_11:
    char v12 = 0;
    char v13 = 2;
    goto LABEL_12;
  }
  char v12 = v14[14];
  char v13 = v14[15];
LABEL_12:
  *a1 = v12;
  a1[1] = v13;
  return result;
}

double ProtobufEncoder.archiveHost.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 32);
  if (one-time initialization token for archivedViewHostKey != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v3, (uint64_t)static ArchivedViewCore.archivedViewHostKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  if (*(void *)(v7 + 16) && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v10 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v9, (uint64_t)&v12);
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!*((void *)&v13 + 1))
  {
    outlined destroy of Any?((uint64_t)&v12);
    goto LABEL_11;
  }
  type metadata accessor for AnyArchivedViewHost();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t ProtobufEncoder.rbEncoderSet.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 32);
  if (one-time initialization token for rbEncoderSetKey != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.rbEncoderSetKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for RBEncoderSet();
    if (swift_dynamicCast()) {
      return v10[1];
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v11);
    return 0;
  }
}

uint64_t _ArchivedViewHostDelegate.failedToEncodeView(type:)()
{
  return _ArchivedViewHostDelegate.failedToEncodeView(type:)();
}

{
  Swift::String v0;
  uint64_t vars8;

  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  specialized static Log.externalWarning(_:)(0xD000000000000022, 0x80000002462254C0);

  return swift_bridgeObjectRelease();
}

CGImageRef __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _ArchivedViewHostDelegate.filteredImage(_:)(CGImageRef a1)
{
  uint64_t v2 = (CGImage *)_ViewInputs.base.modify(a1);
  uint64_t v3 = v2;
  if (!v1) {
    uint64_t v4 = v2;
  }
  return v3;
}

{
  uint64_t v1;
  CGImage *v2;
  CGImage *v3;
  CGImage *v4;

  uint64_t v2 = (CGImage *)_ViewInputs.base.modify(a1);
  uint64_t v3 = v2;
  if (!v1) {
    uint64_t v4 = v2;
  }
  return v3;
}

uint64_t _ArchivedViewHostDelegate.preferredImageType(for:)@<X0>(uint64_t a1@<X8>)
{
  return _ArchivedViewHostDelegate.preferredImageType(for:)(a1);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t ArchivedViewStateProxy.init(writer:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ArchivedViewStateProxy.addAttachment(data:)(unint64_t a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v5 = *v2;
  memset(&v12, 0, sizeof(v12));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&v12);
  into.state = v12;
  Data.hash(into:)(&into);
  memset(&v12, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&v12, &into.state);
  outlined consume of Data._Representation(a1, a2);
  CC_LONG h4 = v12.h4;
  long long v7 = *(_OWORD *)&v12.h0;
  swift_beginAccess();
  uint64_t v8 = specialized Collection<>.firstIndex(of:)(v7, *((uint64_t *)&v7 + 1), h4, *(void *)(v5 + 32));
  if ((v9 & 1) == 0) {
    return v8;
  }
  *(_OWORD *)&v12.h0 = v7;
  v12.CC_LONG h4 = h4;
  LOBYTE(v12.Nl) = 0;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v10 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&v12.h0, (const char *)v5, a1, a2);
  outlined consume of Data._Representation(a1, a2);
  return v10;
}

uint64_t ArchivedViewStateProxy.addAttachment(encoder:)(void (*a1)(void), unint64_t a2)
{
  uint64_t v4 = *v2;
  v6[0] = 0;
  v6[1] = 0;
  int v7 = 0;
  char v8 = 1;
  return specialized ArchiveWriter.addAttachment(hash:from:)(v6, v4, a1, a2);
}

uint64_t _DisplayList_StableIdentityMap.addIDs(from:root:)(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 10);
  uint64_t v7 = *(void *)a1;
  __int16 v8 = v4;
  char v9 = v5;
  swift_retain();
  specialized DisplayList.forEachIdentity(_:)(&v7, a2, v2);

  return swift_release();
}

uint64_t closure #1 in _DisplayList_StableIdentityMap.addIDs(from:root:)(Swift::UInt32 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  Swift::UInt32 v5 = *a1;
  LODWORD(v22._countAndFlagsBits) = *a1;
  _DisplayList_StableIdentityRoot.subscript.getter((Swift::UInt32 *)&v22, (uint64_t)&v23);
  if (v26)
  {
    type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8E0F8]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v7._object = (void *)0x80000002462254F0;
    v7._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v7);
    v22._uint64_t countAndFlagsBits = 35;
    v22._object = (void *)0xE100000000000000;
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = 2108704;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 58;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v22._uint64_t countAndFlagsBits = 84;
    v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v14._object = (void *)0x800000024621D860;
    String.append(_:)(v14);
    uint64_t v15 = v23;
    unint64_t v16 = v24;
    *(void *)(v6 + 56) = MEMORY[0x263F8D310];
    *(void *)(v6 + 32) = v15;
    *(void *)(v6 + 40) = v16;
    print(_:separator:terminator:)();
  }
  else
  {
    uint64_t v19 = v24;
    uint64_t v18 = v25;
    uint64_t v20 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *a4;
    *a4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, v19, v18, v5, isUniquelyReferenced_nonNull_native);
    *a4 = v23;
  }
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.viewDataNeedsUpdate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.failedToEncodeView(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.filteredImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of _ArchivedViewHostDelegate.preferredImageType(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.updateState(at:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ArchivedViewHostStates.auxiliaryData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for ArchivedViewStateProxy()
{
  return &type metadata for ArchivedViewStateProxy;
}

uint64_t dispatch thunk of AnyArchivedViewHost.failedToEncodeView(type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.filteredImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.allowedImageTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AnyArchivedViewHost.imageType(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

void type metadata accessor for _ContiguousArrayStorage<Any>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8EE58] + 8);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t type metadata accessor for RBEncoderSet()
{
  unint64_t result = lazy cache variable for type metadata for RBEncoderSet;
  if (!lazy cache variable for type metadata for RBEncoderSet)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBEncoderSet);
  }
  return result;
}

uint64_t sub_24606BF9C()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for AnyTransition.FirstVisitor()
{
  return &unk_26FA48050;
}

uint64_t CombiningTransition._makeContentTransition(transition:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(a2 - 1);
  MEMORY[0x270FA5388](a1);
  Swift::String v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v6;
  if (v9 == 3)
  {
    BOOL v10 = Transition.hasContentTransition.getter(a2[2], a2[4]);
    (*(void (**)(char *, uint64_t, uint64_t *))(v5 + 16))(v8, v2, a2);
    BOOL v11 = v10 || Transition.hasContentTransition.getter(a2[3], a2[5]);
    (*(void (**)(char *, uint64_t *))(v5 + 8))(v8, a2);
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v11;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    double v13 = *(double *)(a1 + 8);
    double v12 = *(double *)(a1 + 16);
    HIBYTE(v17) = *v6;
    uint64_t v18 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v17 + 7, v13, v12, a2[2], a2[4]);
    BYTE6(v17) = v9;
    uint64_t v14 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v17 + 6, v13, v12, a2[3], a2[5]);
    specialized Array.append<A>(contentsOf:)(v14);
    uint64_t v15 = v18;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v15;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnyTransition.SecondVisitor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24606C334);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AnyTransition.SecondVisitor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24606C534);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_24606C55C()
{
  return swift_getWitnessTable();
}

id ContentTransition.rbTransition.getter()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 14);
  if (!*(unsigned char *)(v0 + 13))
  {
    if (one-time initialization token for _namedTransitions != -1) {
      swift_once();
    }
    Swift::String v22 = static ContentTransition._namedTransitions;
    uint64_t v23 = (os_unfair_lock_s *)((char *)static ContentTransition._namedTransitions + 16);
    swift_retain();
    os_unfair_lock_lock(v23);
    uint64_t v24 = v22[3];
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v23);
    swift_release();
    if (*(void *)(v24 + 16))
    {
      if (v3) {
        uint64_t v25 = 0x10000000000;
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v26 = v25 & 0xFFFFFF0000000000 | v2 & 0xFFFFFFFFFFLL;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v1, v26);
      if (v28)
      {
        id v29 = *(id *)(*(void *)(v24 + 56) + 8 * v27);
        swift_bridgeObjectRelease();
        return v29;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v3) {
        uint64_t v34 = 0x10000000000;
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v26 = v34 & 0xFFFFFF0000000000 | v2 & 0xFFFFFFFFFFLL;
    }
    uint64_t v35 = ContentTransition.NamedTransition.makeRBTransition()();
    objc_msgSend(v35, sel_setReplaceable_, v3);
    unint64_t v36 = v1;
    uint64_t v37 = (os_unfair_lock_s *)static ContentTransition._namedTransitions;
    id v5 = v35;
    swift_retain();
    os_unfair_lock_lock(v37 + 4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *(void *)&v37[6]._os_unfair_lock_opaque;
    *(void *)&v37[6]._os_unfair_lock_opaque = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v5, v36, v26, isUniquelyReferenced_nonNull_native);
    *(void *)&v37[6]._os_unfair_lock_opaque = v43;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v37 + 4);
    swift_release();
    return v5;
  }
  if (*(unsigned char *)(v0 + 13) != 1)
  {
    id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
    objc_msgSend(v31, sel_setType_, 18);
    if (BYTE4(v1) & 1 | ((v1 & 0x10) >> 4)) {
      uint64_t v32 = v1;
    }
    else {
      uint64_t v32 = v1 | 0x10;
    }
    objc_msgSend(v31, sel_setIntegerArgumentValue_atIndex_, v32, 0);
    LODWORD(v33) = 1.0;
    objc_msgSend(v31, sel_setArgumentValue_atIndex_, 1, v33);
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638C8]), sel_init);
    objc_msgSend(v5, sel_setMethod_, 6);
    objc_msgSend(v5, sel_addEffect_, v31);

    return v5;
  }
  unsigned int v40 = *(unsigned __int8 *)(v0 + 14);
  id v4 = objc_allocWithZone(MEMORY[0x263F638C8]);
  swift_bridgeObjectRetain();
  id v5 = objc_msgSend(v4, sel_init);
  objc_msgSend(v5, sel_setMethod_, v2);
  uint64_t v6 = *(void *)(v1 + 16);
  if (!v6) {
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = v1;
  unsigned int v7 = (unsigned int *)(v1 + 64);
  id v41 = v5;
  uint64_t v42 = v2;
  do
  {
    uint64_t v9 = *(v7 - 8);
    if ((v2 & 0x100000000) != 0)
    {
      int v10 = v9 - 7;
      if (v9 - 7) <= 5 && ((0x33u >> v10)) {
        uint64_t v9 = dword_2462096EC[v10];
      }
    }
    uint64_t v11 = *(v7 - 7);
    int v12 = *((unsigned __int8 *)v7 - 24);
    uint64_t v13 = *(v7 - 5);
    int v14 = *((unsigned __int8 *)v7 - 16);
    int v16 = *(v7 - 3);
    int v15 = *(v7 - 2);
    uint64_t v18 = *(v7 - 1);
    uint64_t v17 = *v7;
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
    objc_msgSend(v19, sel_setType_, v9);
    if (v12)
    {
      if (v12 == 1) {
        objc_msgSend(v19, sel_setIntegerArgumentValue_atIndex_, v11, 0);
      }
      if (!v14)
      {
LABEL_17:
        LODWORD(v20) = v13;
        objc_msgSend(v19, sel_setArgumentValue_atIndex_, 1, v20, v39);
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v20) = v11;
      objc_msgSend(v19, sel_setArgumentValue_atIndex_, 0, v20);
      if (!v14) {
        goto LABEL_17;
      }
    }
    if (v14 == 1) {
      objc_msgSend(v19, sel_setIntegerArgumentValue_atIndex_, v13, 1);
    }
LABEL_18:
    objc_msgSend(v19, sel_setEvents_, v18, v39);
    if (v17) {
      objc_msgSend(v19, sel_setFlags_, v17);
    }
    v7 += 9;
    LODWORD(v21) = v16;
    objc_msgSend(v19, sel_setBeginTime_, v21);
    LODWORD(v8) = v15;
    objc_msgSend(v19, sel_setDuration_, v8);
    id v5 = v41;
    objc_msgSend(v41, sel_addEffect_, v19);

    --v6;
    unint64_t v2 = v42;
  }
  while (v6);
  unint64_t v1 = v39;
  outlined consume of ContentTransition.Storage(v39, v42, 1);
LABEL_33:
  outlined consume of ContentTransition.Storage(v1, v2, 1);
  objc_msgSend(v5, sel_setReplaceable_, v40);
  return v5;
}

unint64_t ContentTransition.numericValue.getter()
{
  if (*(unsigned char *)(v0 + 13)) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = (*(void *)v0 & 0xC000000000) == 0x4000000000;
  }
  int v2 = !v1;
  if ((*(void *)v0 & 0x100000000) == 0) {
    int v2 = 1;
  }
  uint64_t v3 = *(void *)v0;
  if (v2) {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t static ContentTransitionEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  unsigned int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t ContentTransition.NamedTransition.init(name:layoutDirection:style:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4 = *(_WORD *)(result + 8);
  char v5 = *(unsigned char *)(result + 10);
  char v6 = *a2;
  char v7 = *a3;
  *(void *)a4 = *(void *)result;
  *(unsigned char *)(a4 + 10) = v5;
  *(_WORD *)(a4 + 8) = v4;
  *(unsigned char *)(a4 + 11) = v6;
  *(unsigned char *)(a4 + 12) = v7;
  return result;
}

float static ContentTransition.EffectType.translation(_:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(3, a1, a2, a3);
}

uint64_t ContentTransition.Effect.init(_:timeline:appliesOnInsertion:appliesOnRemoval:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v6 = *(unsigned char *)(result + 8);
  int v7 = *(_DWORD *)(result + 12);
  char v8 = *(unsigned char *)(result + 16);
  float v9 = a6 - a5;
  *(void *)a4 = *(void *)result;
  *(unsigned char *)(a4 + 8) = v6;
  if (a3) {
    int v10 = a2 & 1 | 2;
  }
  else {
    int v10 = a2 & 1;
  }
  *(_DWORD *)(a4 + 12) = v7;
  *(unsigned char *)(a4 + 16) = v8;
  *(float *)(a4 + 20) = a5;
  *(float *)(a4 + 24) = v9;
  *(_DWORD *)(a4 + 28) = v10;
  *(_DWORD *)(a4 + 32) = 0;
  return result;
}

uint64_t specialized FixedWidthInteger.init<A>(clamping:)(float a1)
{
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  if (a1 > 255.0) {
    a1 = 255.0;
  }
  specialized static FixedWidthInteger._convert<A>(from:)(v6, a1);
  if ((v6[0] & 0x100) == 0) {
    return LOBYTE(v6[0]);
  }
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v2._uint64_t countAndFlagsBits = 0x74616F6C46;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000246225510;
  v3._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = 0x38746E4955;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v5._object = (void *)0x8000000246225530;
  String.append(_:)(v5);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  float v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void v7[2];

  BOOL v1 = fmaxf(a1, -128.0);
  if (v1 > 127.0) {
    BOOL v1 = 127.0;
  }
  specialized static FixedWidthInteger._convert<A>(from:)(v7, v1);
  if ((v7[0] & 0x100) == 0) {
    return LOBYTE(v7[0]);
  }
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v3._uint64_t countAndFlagsBits = 0x74616F6C46;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v4._object = (void *)0x8000000246225510;
  v4._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 947154505;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  v6._object = (void *)0x8000000246225530;
  String.append(_:)(v6);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double static ContentTransition.EffectType.opacity.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  void (*v4)(void *__return_ptr, uint64_t, long long *);
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  long long v25;
  int v26;
  uint64_t KeyPath;
  int v28;
  long long v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  ValueMetadata **v37;
  uint64_t v38;
  int *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  int v48;
  uint64_t v49;
  int v50;
  long long v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  long long v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  unint64_t v70;
  unint64_t v71;
  long long v72;
  uint64_t v73;
  ValueMetadata **v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t result;
  void (*v86)(long long *, void);
  int v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v91;
  int v92;
  int v93;
  int v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  int v113;
  unsigned int OffsetAttribute2;
  uint64_t v115;
  Swift::UInt32 v116;
  void v117[2];
  long long v118;
  long long v119;
  unsigned __int8 v120;
  unsigned int v121;
  unsigned __int8 v122;
  unsigned int v123;
  unsigned __int8 v124;
  long long v125;
  unsigned char v126[32];
  long long v127;
  long long v128;
  int v129;
  long long v130;
  long long v131;
  long long v132;
  uint64_t v133;

  Swift::String v4 = a3;
  v133 = *MEMORY[0x263EF8340];
  int v7 = *(_OWORD *)(a2 + 32);
  uint64_t v131 = *(_OWORD *)(a2 + 16);
  v132 = v7;
  v130 = *(_OWORD *)a2;
  char v8 = *(void *)a2;
  uint64_t v109 = *(_DWORD *)(a2 + 8);
  float v9 = *(void *)(a2 + 16);
  uint64_t v112 = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 40);
  int v10 = *(void *)(a2 + 48);
  int v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(_DWORD *)(a2 + 68);
  v106 = *(_DWORD *)(a2 + 64);
  int v14 = *(void *)(a2 + 72);
  uint64_t v113 = *(_DWORD *)(a2 + 80);
  int v15 = WORD2(v7);
  v94 = v13;
  if ((BYTE4(v7) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    LODWORD(v16) = v13;
    goto LABEL_16;
  }
  uint64_t v91 = WORD2(v7);
  uint64_t v102 = *(void *)(a2 + 48);
  v103 = *(void *)(a2 + 40);
  uint64_t v104 = *(void *)(a2 + 16);
  uint64_t v17 = v131;
  swift_beginAccess();
  uint64_t v99 = *(void *)a2;
  uint64_t v18 = *(_DWORD *)(a2 + 8);
  uint64_t v96 = *(void *)(a2 + 16);
  id v19 = *(_DWORD *)(a2 + 24);
  double v20 = *(void *)(a2 + 32);
  double v21 = *(void *)(a2 + 40);
  Swift::String v22 = *(void *)(a2 + 48);
  uint64_t v23 = *(void *)(a2 + 56);
  uint64_t v88 = *(void *)(a2 + 72);
  os_signpost_id_t v89 = *(void *)(a2 + 64);
  uint64_t v87 = *(_DWORD *)(a2 + 80);
  uint64_t v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
  v127 = v24;
  char v128 = *(_OWORD *)(a2 + 64);
  uint64_t v129 = *(_DWORD *)(a2 + 80);
  uint64_t v25 = *(_OWORD *)(a2 + 16);
  v125 = *(_OWORD *)a2;
  *(_OWORD *)v126 = v25;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  unint64_t v26 = _ViewInputs.geometryTransaction()();
  KeyPath = swift_getKeyPath();
  char v28 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v131 + 81) & 1) != 0
    || v89 != *(_DWORD *)(v131 + 32)
    || v88 != *(_DWORD *)(v131 + 36)
    || v28 != *(_DWORD *)(v131 + 40)
    || v18 != *(_DWORD *)(v131 + 44)
    || v26 != *(_DWORD *)(v131 + 48)
    || v19 != *(_DWORD *)(v131 + 52))
  {
    *(void *)&v125 = v99;
    DWORD2(v125) = v18;
    *(void *)v126 = v96;
    *(_DWORD *)&v126[8] = v19;
    *(_DWORD *)&v126[12] = v26;
    *(void *)&v126[16] = v20;
    *(void *)&v126[24] = v21;
    *(void *)&v127 = v22;
    *((void *)&v127 + 1) = v23;
    *(void *)&char v128 = v89;
    *((void *)&v128 + 1) = v88;
    uint64_t v129 = v87;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v28, (uint64_t)&v118);
    id v29 = v119;
    uint64_t v30 = v120;
    id v31 = v124;
    uint64_t v32 = v120 | ((unint64_t)v121 << 32);
    double v33 = v122 | ((unint64_t)v123 << 32);
    *(_OWORD *)(v17 + 32) = v118;
    *(_OWORD *)(v17 + 48) = v29;
    *(void *)(v17 + 64) = v32;
    *(void *)(v17 + 72) = v33;
    *(_WORD *)(v17 + 80) = v31;
    if ((v30 & 1) == 0)
    {
      int v16 = HIDWORD(*((void *)&v29 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v131 + 64))
  {
LABEL_13:
    LODWORD(v16) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v17 + 60) = v16;
    *(unsigned char *)(v17 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v16) = *(_DWORD *)(v131 + 60);
LABEL_15:
  float v9 = v104;
  uint64_t v11 = v103;
  Swift::String v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  int v10 = v102;
  int v15 = v91;
LABEL_16:
  *(void *)&v125 = v8;
  DWORD2(v125) = v109;
  *(void *)v126 = v9;
  *(_OWORD *)&v126[8] = v112;
  *(void *)&v126[24] = v11;
  *(void *)&v127 = v10;
  *((void *)&v127 + 1) = v12;
  *(void *)&char v128 = __PAIR64__(v16, v106);
  *((void *)&v128 + 1) = v14;
  uint64_t v129 = v113;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_bridgeObjectRetain();
  v4(v117, v34, &v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v35 = *(void *)(a2 + 48);
  unint64_t v36 = *(void *)(v35 + 16);
  if (!v36)
  {
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    double result = swift_release();
    *a4 = v117[0];
    a4[1] = v117[1];
    return result;
  }
  uint64_t v37 = (ValueMetadata **)(v35 + 32);
  while (*v37 != &type metadata for DisplayList.Key)
  {
    v37 += 2;
    if (!--v36) {
      goto LABEL_62;
    }
  }
  v116 = ++lastIdentity;
  if ((v15 & 0x100) == 0)
  {
LABEL_22:
    Swift::Int v105 = a4;
    CFIndex v38 = v131;
    uint64_t v39 = (int *)(v131 + 16);
    swift_beginAccess();
    if ((v15 & 0x20) == 0)
    {
      unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      unsigned int v40 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      uint64_t v73 = *(void *)(v117[0] + 16);
      a4 = v105;
      if (v73)
      {
        uint64_t v74 = (ValueMetadata **)(v117[0] + 48);
        while (*(v74 - 2) != &type metadata for DisplayList.Key)
        {
          v74 += 3;
          if (!--v73)
          {
            uint64_t v74 = (ValueMetadata **)MEMORY[0x263F288F8];
            break;
          }
        }
      }
      else
      {
        uint64_t v74 = (ValueMetadata **)MEMORY[0x263F288F8];
      }
      uint64_t v75 = *v39;
      uint64_t v76 = *(_DWORD *)v74;
      uint64_t v77 = v130;
      *(void *)&uint64_t v118 = v130;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v118);
      outlined retain of _GraphInputs((uint64_t)&v130);
      uint64_t v78 = specialized find<A>(_:key:)(v77);
      if (v78) {
        uint64_t v79 = *(unsigned char *)(v78 + 72);
      }
      else {
        uint64_t v79 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v118);
      outlined release of _GraphInputs((uint64_t)&v130);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v118);
      outlined retain of _GraphInputs((uint64_t)&v130);
      uint64_t v80 = specialized find<A>(_:key:)(v77);
      if (v80) {
        BOOL v81 = *(_DWORD *)(v80 + 72);
      }
      else {
        BOOL v81 = 0;
      }
      uint64_t v82 = *(_DWORD *)(a2 + 60);
      uint64_t v83 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v118);
      outlined release of _GraphInputs((uint64_t)&v130);
      outlined release of _ViewInputs(a2);
      *(void *)&v125 = __PAIR64__(a1, v116);
      *((void *)&v125 + 1) = __PAIR64__(v40, OffsetAttribute2);
      *(_DWORD *)v126 = v82;
      *(_DWORD *)&v126[4] = v94;
      *(_DWORD *)&v126[8] = v75;
      *(_DWORD *)&v126[12] = v83;
      *(_DWORD *)&v126[16] = v76;
      v126[20] = v79;
      *(_DWORD *)&v126[24] = 0;
      *(_DWORD *)&v126[28] = v81;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<ViewListArchivedAnimation.Effect>);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<ViewListArchivedAnimation.Effect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<ViewListArchivedAnimation.Effect>);
      uint64_t v84 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v125) = 0;
      PreferencesOutputs.subscript.setter(v84, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_62;
    }
    id v41 = *(void *)a2;
    uint64_t v42 = *(_DWORD *)(a2 + 8);
    uint64_t v43 = *(_DWORD *)(a2 + 24);
    uint64_t v44 = *(void *)(a2 + 32);
    uint64_t v107 = *(void *)(a2 + 40);
    uint64_t v110 = *(void *)(a2 + 16);
    uint64_t v100 = *(void *)(a2 + 48);
    uint64_t v45 = *(void *)(a2 + 56);
    uint64_t v115 = *(void *)(a2 + 64);
    uint64_t v97 = *(void *)(a2 + 72);
    os_signpost_id_t v92 = *(_DWORD *)(a2 + 80);
    uint64_t v46 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
    v127 = v46;
    char v128 = *(_OWORD *)(a2 + 64);
    uint64_t v129 = *(_DWORD *)(a2 + 80);
    unint64_t v47 = *(_OWORD *)(a2 + 16);
    v125 = *(_OWORD *)a2;
    *(_OWORD *)v126 = v47;
    outlined retain of _ViewInputs(a2);
    uint64_t v48 = _ViewInputs.geometryTransaction()();
    uint64_t v49 = swift_getKeyPath();
    uint64_t v50 = specialized CachedEnvironment.attribute<A>(keyPath:)(v49);
    swift_release();
    if ((*(unsigned char *)(v38 + 81) & 1) == 0
      && v115 == *(_DWORD *)(v38 + 32)
      && v97 == *(_DWORD *)(v38 + 36)
      && v50 == *(_DWORD *)(v38 + 40)
      && v42 == *(_DWORD *)(v38 + 44)
      && v48 == *(_DWORD *)(v38 + 48)
      && v43 == *(_DWORD *)(v38 + 52))
    {
      if (*(unsigned char *)(v38 + 64)) {
        goto LABEL_34;
      }
      LODWORD(v56) = *(_DWORD *)(v38 + 60);
    }
    else
    {
      *(void *)&v125 = v41;
      DWORD2(v125) = v42;
      *(void *)v126 = v110;
      *(_DWORD *)&v126[8] = v43;
      *(_DWORD *)&v126[12] = v48;
      *(void *)&v126[16] = v44;
      *(void *)&v126[24] = v107;
      *(void *)&v127 = v100;
      *((void *)&v127 + 1) = v45;
      *(void *)&char v128 = v115;
      *((void *)&v128 + 1) = v97;
      uint64_t v129 = v92;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v50, (uint64_t)&v118);
      uint64_t v51 = v119;
      uint64_t v52 = v120;
      uint64_t v53 = v124;
      uint64_t v54 = v120 | ((unint64_t)v121 << 32);
      uint64_t v55 = v122 | ((unint64_t)v123 << 32);
      *(_OWORD *)(v38 + 32) = v118;
      *(_OWORD *)(v38 + 48) = v51;
      *(void *)(v38 + 64) = v54;
      *(void *)(v38 + 72) = v55;
      *(_WORD *)(v38 + 80) = v53;
      if (v52)
      {
LABEL_34:
        unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v38 + 60) = OffsetAttribute2;
        *(unsigned char *)(v38 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v57 = *(void *)a2;
        uint64_t v58 = *(_DWORD *)(a2 + 8);
        uint64_t v59 = *(_DWORD *)(a2 + 24);
        uint64_t v60 = *(void *)(a2 + 32);
        uint64_t v61 = *(void *)(a2 + 48);
        uint64_t v108 = *(void *)(a2 + 16);
        CGDataConsumerRef v111 = *(void *)(a2 + 40);
        uint64_t v62 = *(void *)(a2 + 56);
        os_signpost_id_t v98 = *(void *)(a2 + 72);
        uint64_t v101 = *(void *)(a2 + 64);
        v93 = *(_DWORD *)(a2 + 80);
        uint64_t v63 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
        v127 = v63;
        char v128 = *(_OWORD *)(a2 + 64);
        uint64_t v129 = *(_DWORD *)(a2 + 80);
        uint64_t v64 = *(_OWORD *)(a2 + 16);
        v125 = *(_OWORD *)a2;
        *(_OWORD *)v126 = v64;
        outlined retain of _ViewInputs(a2);
        uint64_t v65 = _ViewInputs.geometryTransaction()();
        int v66 = swift_getKeyPath();
        uint64_t v67 = specialized CachedEnvironment.attribute<A>(keyPath:)(v66);
        swift_release();
        if ((*(unsigned char *)(v38 + 81) & 1) == 0
          && v101 == *(_DWORD *)(v38 + 32)
          && v98 == *(_DWORD *)(v38 + 36)
          && v67 == *(_DWORD *)(v38 + 40)
          && v58 == *(_DWORD *)(v38 + 44)
          && v65 == *(_DWORD *)(v38 + 48)
          && v59 == *(_DWORD *)(v38 + 52))
        {
          if ((*(unsigned char *)(v38 + 72) & 1) == 0)
          {
            unsigned int v40 = *(_DWORD *)(v38 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(void *)&v125 = v57;
          DWORD2(v125) = v58;
          *(void *)v126 = v108;
          *(_DWORD *)&v126[8] = v59;
          *(_DWORD *)&v126[12] = v65;
          *(void *)&v126[16] = v60;
          *(void *)&v126[24] = v111;
          *(void *)&v127 = v61;
          *((void *)&v127 + 1) = v62;
          *(void *)&char v128 = v101;
          *((void *)&v128 + 1) = v98;
          uint64_t v129 = v93;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v67, (uint64_t)&v118);
          unsigned int v40 = v121;
          uint64_t v68 = v122;
          uint64_t v69 = v124;
          Swift::Int v70 = v120 | ((unint64_t)v121 << 32);
          uint64_t v71 = v122 | ((unint64_t)v123 << 32);
          uint64_t v72 = v119;
          *(_OWORD *)(v38 + 32) = v118;
          *(_OWORD *)(v38 + 48) = v72;
          *(void *)(v38 + 64) = v70;
          *(void *)(v38 + 72) = v71;
          *(_WORD *)(v38 + 80) = v69;
          if ((v68 & 1) == 0) {
            goto LABEL_48;
          }
        }
        unsigned int v40 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v38 + 68) = v40;
        *(unsigned char *)(v38 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v39 = (int *)(v38 + 16);
        goto LABEL_49;
      }
      char v56 = HIDWORD(*((void *)&v51 + 1));
    }
    unsigned int OffsetAttribute2 = v56;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  double result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v118) = v116;
    v86 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v118);
    v86(&v125, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.contentTransitionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized find<A>(_:key:)(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 72);
      unint64_t v7 = *(unsigned int *)(v5 + 80) | ((unint64_t)*(unsigned __int8 *)(v5 + 84) << 32);
      char v8 = *(unsigned char *)(v5 + 85);
      char v9 = *(unsigned char *)(v5 + 86);
      char v10 = *(unsigned char *)(v5 + 87);
      uint64_t v11 = *(void *)(v5 + 88);
      int v12 = *(_DWORD *)(v5 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      char v8 = 0;
      char v9 = 0;
      char v10 = 0;
      uint64_t v11 = 0;
      int v12 = 0;
      unint64_t v7 = 0x302000000;
      uint64_t v6 = 0x8000000000;
    }
    *(void *)a1 = v6;
    *(_DWORD *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 12) = BYTE4(v7);
    *(unsigned char *)(a1 + 13) = v8;
    *(unsigned char *)(a1 + 14) = v9;
    *(unsigned char *)(a1 + 15) = v10;
    *(void *)(a1 + 16) = v11;
    *(_DWORD *)(a1 + 24) = v12;
    swift_release();
  }
  return swift_release_n();
}

uint64_t ContentTransition.isNamed(_:)(uint64_t *a1)
{
  if (*((unsigned char *)v1 + 13)) {
    return 0;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = ((unint64_t)*v1 >> 38) & 3;
  if (!v5) {
    return (v3 & 0xC000000000) == 0 && ((v3 ^ ((*v1 & 1) == 0)) & 1) != 0;
  }
  int v6 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
  if (v5 == 1)
  {
    if ((v3 & 0xC000000000) == 0x4000000000)
    {
      int v7 = *((_DWORD *)v1 + 2);
      int v19 = *v1;
      char v20 = BYTE4(v4) & 1;
      char v21 = BYTE5(v4);
      char v22 = BYTE6(v4);
      char v23 = HIBYTE(v4);
      __int16 v24 = v7;
      char v25 = BYTE2(v7);
      int v12 = v3;
      char v13 = BYTE4(v3) & 1;
      char v14 = BYTE5(v3);
      char v15 = BYTE6(v3);
      char v16 = HIBYTE(v3);
      __int16 v17 = v6;
      char v18 = BYTE2(v6);
      if (specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v19, (uint64_t)&v12)) {
        return 1;
      }
    }
    return 0;
  }
  switch(v4)
  {
    case 0x8000000001:
      return (v3 & 0xC000000000) == 0x8000000000 && v3 == 0x8000000001 && v6 == 0;
    case 0x8000000002:
      if ((v3 & 0xC000000000) != 0x8000000000 || v3 != 0x8000000002) {
        return 0;
      }
      break;
    case 0x8000000003:
      if ((v3 & 0xC000000000) != 0x8000000000 || v3 != 0x8000000003) {
        return 0;
      }
      break;
    case 0x8000000004:
      if ((v3 & 0xC000000000) != 0x8000000000 || v3 != 0x8000000004) {
        return 0;
      }
      break;
    default:
      return (v3 & 0xC000000000) == 0x8000000000 && v3 == 0x8000000000 && v6 == 0;
  }
  return !v6;
}

void static ContentTransition.differentText.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t EnvironmentValues.contentTransitionState.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 13);
  int v5 = *(unsigned __int8 *)(a1 + 14);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 24);
  uint64_t v8 = *v1;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 15);
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v2, v3, v4);
  uint64_t v10 = 0x1000000000000;
  if (!v5) {
    uint64_t v10 = 0;
  }
  unint64_t v11 = v3 | (v4 << 40) | v10 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2, v11, v6, v7);
  swift_release();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  if (v1[1])
  {
    uint64_t v12 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  return swift_release();
}

void static ContentTransition.text.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t EnvironmentValues.contentTransitionStyle.setter(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v18);
    swift_release_n();
    swift_release_n();
    uint64_t v6 = v18;
    unint64_t v7 = v19 | ((unint64_t)v20 << 32);
    uint64_t v8 = v21;
    int v9 = v22;
    uint64_t v10 = v23;
    int v11 = v24;
  }
  else
  {
    uint64_t v12 = swift_retain_n();
    uint64_t v13 = specialized find<A>(_:key:)(v12);
    if (v13)
    {
      uint64_t v6 = *(void *)(v13 + 72);
      unint64_t v7 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      uint64_t v8 = *(unsigned __int8 *)(v13 + 85);
      int v9 = *(unsigned __int8 *)(v13 + 86);
      uint64_t v10 = *(void *)(v13 + 88);
      int v11 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v6, v7, v8);
      swift_retain();
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v10 = 0;
      int v11 = 0;
      unint64_t v7 = 0x302000000;
      uint64_t v6 = 0x8000000000;
    }
    swift_release_n();
  }
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v6, v7, v8);
  uint64_t v14 = 0x1000000000000;
  if (!v9) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = v14 | (v3 << 56) | v7 & 0xFFFFFFFFFFLL | (v8 << 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v6, v15, v10, v11);
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  swift_release();
  if (v5)
  {
    uint64_t v16 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v16);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return swift_release();
}

BOOL static ContentTransition.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Void __swiftcall ContentTransition.applyEnvironmentValues(style:layoutDirection:)(SwiftUI::ContentTransition::Style style, SwiftUI::LayoutDirection layoutDirection)
{
  int v3 = *(unsigned __int8 *)layoutDirection;
  unint64_t v4 = *(unsigned int *)(v2 + 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 12) << 32);
  int v5 = *(unsigned __int8 *)(v2 + 13);
  if (*(unsigned char *)(v2 + 13))
  {
    if (v5 != 1) {
      return;
    }
    if (BYTE4(v4) != 2) {
      int v3 = *(unsigned char *)(v2 + 12) & 1;
    }
    BOOL v6 = v3 == 0;
    uint64_t v7 = 0x100000000;
    if (v6) {
      uint64_t v7 = 0;
    }
    unint64_t v8 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2 + 8);
  }
  else
  {
    if (BYTE4(v4) == 3) {
      uint64_t v9 = *(unsigned __int8 *)style.storage;
    }
    else {
      uint64_t v9 = BYTE4(v4);
    }
    if ((*(_DWORD *)(v2 + 8) & 0xFF000000) != 0x2000000) {
      int v3 = (v4 >> 24) & 1;
    }
    BOOL v6 = v3 == 0;
    uint64_t v10 = 0x1000000;
    if (v6) {
      uint64_t v10 = 0;
    }
    unint64_t v8 = v10 & 0xFFFFFFFFFF000000 | *(_DWORD *)(v2 + 8) & 0xFFFFFFLL | (v9 << 32);
  }
  *(_DWORD *)(v2 + 8) = v8;
  *(unsigned char *)(v2 + 12) = BYTE4(v8);
  *(unsigned char *)(v2 + 13) = v5;
}

void ContentTransition.State.applyDynamicTextAnimation(in:)()
{
  if (!*(void *)(v0 + 16))
  {
    uint64_t v1 = swift_retain();
    char v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
    swift_release();
    if ((v2 & 1) == 0 && *(unsigned __int8 *)(v0 + 15) - 1 <= 1)
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      *(void *)(v0 + 16) = static Animation.default;
      swift_retain();
    }
  }
}

uint64_t specialized PropertyList.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    unint64_t v5 = *(unsigned int *)(v3 + 80) | ((unint64_t)*(unsigned __int8 *)(v3 + 84) << 32);
    char v6 = *(unsigned char *)(v3 + 85);
    char v7 = *(unsigned char *)(v3 + 86);
    char v8 = *(unsigned char *)(v3 + 87);
    uint64_t v9 = *(void *)(v3 + 88);
    int v10 = *(_DWORD *)(v3 + 96);
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    swift_retain();
  }
  else
  {
    char v6 = 0;
    char v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
    int v10 = 0;
    unint64_t v5 = 0x302000000;
    uint64_t v4 = 0x8000000000;
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = BYTE4(v5);
  *(unsigned char *)(a1 + 13) = v6;
  *(unsigned char *)(a1 + 14) = v7;
  *(unsigned char *)(a1 + 15) = v8;
  *(void *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;

  return swift_release();
}

uint64_t static ContentTransition.numericText(countsDown:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v4 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    uint64_t result = dyld_program_minos_at_least();
  }
  else {
    uint64_t result = dword_26B0F4500 >= v4;
  }
  *(void *)a2 = (result ^ ~a1) & 1 | 0x1202024000000000;
  *(unsigned char *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = 34807859;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

int *ContentTransition.init(method:effects:)@<X0>(int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *result;
  *(void *)a3 = a2;
  *(unsigned char *)(a3 + 12) = 2;
  *(_DWORD *)(a3 + 8) = v3;
  *(_WORD *)(a3 + 13) = 1;
  return result;
}

uint64_t ContentTransitionEffect.init(state:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  __int16 v3 = *(_WORD *)(result + 12);
  char v4 = *(unsigned char *)(result + 14);
  char v5 = *(unsigned char *)(result + 15);
  uint64_t v6 = *(void *)(result + 16);
  int v7 = *(_DWORD *)(result + 24);
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 14) = v4;
  *(unsigned char *)(a2 + 15) = v5;
  *(void *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t static ContentTransition.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 6);
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = *((unsigned __int8 *)a1 + 14);
  uint64_t v5 = *a2;
  __int16 v6 = *((_WORD *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 2);
  int v8 = *((unsigned __int8 *)a2 + 14);
  uint64_t v13 = *a1;
  int v14 = v3;
  __int16 v15 = v2;
  uint64_t v10 = v5;
  int v11 = v7;
  __int16 v12 = v6;
  return specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10) & ~(v4 ^ v8) & 1;
}

void ContentTransition.Style.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ContentTransition.Style.storage.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*ContentTransition.Style.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ContentTransition::Style __swiftcall ContentTransition.Style.init(_:)(SwiftUI::ContentTransition::Style result)
{
  unsigned char *v1 = *(unsigned char *)result.storage;
  return result;
}

void static ContentTransition.Style.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void ContentTransition.Style.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ContentTransition.Style.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContentTransition.Style@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContentTransition.Style(void *a1)
{
  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

uint64_t ContentTransition.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v5 = *(unsigned char *)(v1 + 13);
  *(unsigned char *)(a1 + 13) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v5);
}

uint64_t ContentTransition.storage.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t result = outlined consume of ContentTransition.Storage(*(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(unsigned char *)(v1 + 13));
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  return result;
}

uint64_t (*ContentTransition.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.isReplaceable.getter()
{
  return *(unsigned __int8 *)(v0 + 14);
}

uint64_t ContentTransition.isReplaceable.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 14) = result;
  return result;
}

uint64_t (*ContentTransition.isReplaceable.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.init(storage:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  __int16 v3 = *(_WORD *)(result + 12);
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 14) = 0;
  return result;
}

void ContentTransition.NamedTransition.Name.hash(into:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = ((unint64_t)*v0 >> 38) & 3;
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001:
          Swift::UInt v3 = 1;
          break;
        case 0x8000000002:
          Swift::UInt v3 = 2;
          break;
        case 0x8000000003:
          Swift::UInt v3 = 3;
          break;
        case 0x8000000004:
          Swift::UInt v3 = 4;
          break;
        default:
          Swift::UInt v3 = 0;
          break;
      }
      Hasher._combine(_:)(v3);
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int ContentTransition.NamedTransition.Name.hashValue.getter()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = (v1 >> 38) & 3;
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001uLL:
          Swift::UInt v3 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v3 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v3 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v3 = 4;
          break;
        default:
          Swift::UInt v3 = 0;
          break;
      }
      Hasher._combine(_:)(v3);
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition.Name(a1, a2, a3, (void (*)(unsigned char *))ContentTransition.NamedTransition.Name.hash(into:));
}

void ContentTransition.NamedTransition.name.getter(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 10);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 8) = v2;
}

uint64_t ContentTransition.NamedTransition.name.setter(uint64_t result)
{
  __int16 v2 = *(_WORD *)(result + 8);
  char v3 = *(unsigned char *)(result + 10);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 10) = v3;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 11);
}

unsigned char *ContentTransition.NamedTransition.layoutDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 11) = *result;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 12);
}

unsigned char *ContentTransition.NamedTransition.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 12) = *result;
  return result;
}

uint64_t (*ContentTransition.NamedTransition.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NamedTransition.hash(into:)()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 11);
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 12);
  uint64_t v4 = ((unint64_t)*v0 >> 38) & 3;
  if (v4)
  {
    if (v4 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
      if (v2 == 2) {
        goto LABEL_15;
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001uLL:
          Swift::UInt v5 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v5 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v5 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v5 = 4;
          break;
        default:
          Swift::UInt v5 = 0;
          break;
      }
      Hasher._combine(_:)(v5);
      if (v2 == 2)
      {
LABEL_15:
        Hasher._combine(_:)(0);
        if (v3 == 3) {
          goto LABEL_16;
        }
LABEL_7:
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v3);
        return;
      }
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
    if (v2 == 2) {
      goto LABEL_15;
    }
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2 & 1);
  if (v3 != 3) {
    goto LABEL_7;
  }
LABEL_16:
  Hasher._combine(_:)(0);
}

Swift::Int ContentTransition.NamedTransition.hashValue.getter()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 11);
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 12);
  Hasher.init(_seed:)();
  uint64_t v4 = (v1 >> 38) & 3;
  if (v4)
  {
    if (v4 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001uLL:
          Swift::UInt v5 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v5 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v5 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v5 = 4;
          break;
        default:
          Swift::UInt v5 = 0;
          break;
      }
      Hasher._combine(_:)(v5);
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_15;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2) {
    goto LABEL_6;
  }
LABEL_14:
  Hasher._combine(_:)(0);
LABEL_15:
  if (v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition()
{
  return Hasher._finalize()();
}

void ContentTransition.NumericTextConfiguration.Direction.hash(into:)()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  if (*(unsigned char *)(v0 + 4))
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v2 = v1;
    }
    else {
      Swift::UInt32 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1 & 1);
  }
}

BOOL static ContentTransition.NumericTextConfiguration.Direction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a2;
  if (*(unsigned char *)(a1 + 4)) {
    return (*(unsigned char *)(a2 + 4) & 1) != 0 && *(float *)a1 == v2;
  }
  char v4 = ((*(_DWORD *)a1 & 1) == 0) ^ LOBYTE(v2);
  if (*(unsigned char *)(a2 + 4)) {
    char v4 = 0;
  }
  return v4 & 1;
}

Swift::Int ContentTransition.NumericTextConfiguration.Direction.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  char v2 = *(unsigned char *)(v0 + 4);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v3 = v1;
    }
    else {
      Swift::UInt32 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NumericTextConfiguration.Direction()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.NumericTextConfiguration.Direction(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a2;
  if (*(unsigned char *)(a1 + 4)) {
    return (*(unsigned char *)(a2 + 4) & 1) != 0 && *(float *)a1 == v2;
  }
  char v4 = ((*(_DWORD *)a1 & 1) == 0) ^ LOBYTE(v2);
  if (*(unsigned char *)(a2 + 4)) {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t ContentTransition.NumericTextConfiguration.Options.rawValue.getter()
{
  return *v0;
}

uint64_t ContentTransition.NumericTextConfiguration.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentTransition.NumericTextConfiguration.Options.reversed.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ContentTransition.NumericTextConfiguration.Options.relativeBlur.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ContentTransition.NumericTextConfiguration.direction.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t ContentTransition.NumericTextConfiguration.direction.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)uint64_t v1 = *(_DWORD *)result;
  *(unsigned char *)(v1 + 4) = v2;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.direction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.axis.getter()
{
  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t ContentTransition.NumericTextConfiguration.axis.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.axis.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.NumericTextConfiguration.options.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 6);
}

unsigned char *ContentTransition.NumericTextConfiguration.options.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 6) = *result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ContentTransition.NumericTextConfiguration.init(direction:axis:options:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 4);
  char v5 = *a3;
  *(_DWORD *)a4 = *(_DWORD *)a1;
  *(unsigned char *)(a4 + 4) = v4;
  *(unsigned char *)(a4 + 5) = a2;
  *(unsigned char *)(a4 + 6) = v5;
  *(void *)&double result = 320877330;
  *(_DWORD *)(a4 + 7) = 320877330;
  return result;
}

float ContentTransition.NumericTextConfiguration.delay.getter(float a1)
{
  LOBYTE(a1) = *(unsigned char *)(v1 + 7);
  return (float)LODWORD(a1) * 0.0083333;
}

uint64_t ContentTransition.NumericTextConfiguration.delay.setter(float a1)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 120.0);
  *(unsigned char *)(v1 + 7) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.delay.modify(uint64_t a1, float a2))(float *a1)
{
  *(void *)a1 = v2;
  LOBYTE(a2) = *(unsigned char *)(v2 + 7);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0083333;
  return ContentTransition.NumericTextConfiguration.delay.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.delay.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 120.0);
  *(unsigned char *)(v1 + 7) = result;
  return result;
}

float ContentTransition.NumericTextConfiguration.maxDurationMultiple.getter()
{
  return 1.25;
}

float ContentTransition.NumericTextConfiguration.scale.getter(float a1)
{
  LOBYTE(a1) = *(unsigned char *)(v1 + 8);
  return (float)LODWORD(a1) * 0.0078125;
}

uint64_t ContentTransition.NumericTextConfiguration.scale.setter(float a1)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 128.0);
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.scale.modify(uint64_t a1, float a2))(float *a1)
{
  *(void *)a1 = v2;
  LOBYTE(a2) = *(unsigned char *)(v2 + 8);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0078125;
  return ContentTransition.NumericTextConfiguration.scale.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.scale.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 128.0);
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

float ContentTransition.NumericTextConfiguration.blur.getter(float a1)
{
  LOBYTE(a1) = *(unsigned char *)(v1 + 9);
  return (float)LODWORD(a1) * 0.25;
}

uint64_t ContentTransition.NumericTextConfiguration.blur.setter(float a1)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 4.0);
  *(unsigned char *)(v1 + 9) = result;
  if ((*(unsigned char *)(v1 + 6) & 2) != 0) {
    *(unsigned char *)(v1 + 6) &= ~2u;
  }
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.blur.modify(uint64_t a1, float a2))(float *a1)
{
  *(void *)a1 = v2;
  LOBYTE(a2) = *(unsigned char *)(v2 + 9);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.25;
  return ContentTransition.NumericTextConfiguration.blur.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.blur.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 4.0);
  *(unsigned char *)(v1 + 9) = result;
  if ((*(unsigned char *)(v1 + 6) & 2) != 0) {
    *(unsigned char *)(v1 + 6) &= ~2u;
  }
  return result;
}

float ContentTransition.NumericTextConfiguration.relativeBlur.getter(float a1)
{
  LOBYTE(a1) = *(unsigned char *)(v1 + 9);
  return (float)LODWORD(a1) * 0.0078125;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeBlur.setter(float a1)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 128.0);
  *(unsigned char *)(v1 + 9) = result;
  if ((*(unsigned char *)(v1 + 6) & 2) == 0) {
    *(unsigned char *)(v1 + 6) |= 2u;
  }
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.relativeBlur.modify(uint64_t a1, float a2))(float *a1)
{
  *(void *)a1 = v2;
  LOBYTE(a2) = *(unsigned char *)(v2 + 9);
  *(float *)(a1 + 8) = (float)LODWORD(a2) * 0.0078125;
  return ContentTransition.NumericTextConfiguration.relativeBlur.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeBlur.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 128.0);
  *(unsigned char *)(v1 + 9) = result;
  if ((*(unsigned char *)(v1 + 6) & 2) == 0) {
    *(unsigned char *)(v1 + 6) |= 2u;
  }
  return result;
}

float ContentTransition.NumericTextConfiguration.offset.getter(double a1)
{
  LOBYTE(a1) = *(unsigned char *)(v1 + 10);
  *(float *)&a1 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a1)).i32[0] * 0.03125;
  return *(float *)&a1;
}

uint64_t ContentTransition.NumericTextConfiguration.offset.setter(float a1)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1 * 32.0);
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

uint64_t (*ContentTransition.NumericTextConfiguration.offset.modify(uint64_t a1, int8x8_t a2))(float *a1)
{
  *(void *)a1 = v2;
  a2.i8[0] = *(unsigned char *)(v2 + 10);
  *(float *)(a1 + 8) = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(a2)).i32[0] * 0.03125;
  return ContentTransition.NumericTextConfiguration.offset.modify;
}

uint64_t ContentTransition.NumericTextConfiguration.offset.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(a1[2] * 32.0);
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

void ContentTransition.NumericTextConfiguration.hash(into:)()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 5);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 6);
  Swift::UInt8 v4 = *(unsigned char *)(v0 + 7);
  Swift::UInt8 v5 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v6 = *(unsigned char *)(v0 + 9);
  Swift::UInt8 v7 = *(unsigned char *)(v0 + 10);
  if (*(unsigned char *)(v0 + 4))
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v8 = v1;
    }
    else {
      Swift::UInt32 v8 = 0;
    }
    Hasher._combine(_:)(v8);
    if (v2 != 2) {
      goto LABEL_6;
    }
LABEL_8:
    Swift::UInt8 v9 = 0;
    goto LABEL_9;
  }
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1 & 1);
  if (v2 == 2) {
    goto LABEL_8;
  }
LABEL_6:
  Swift::UInt8 v9 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_9:
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int ContentTransition.NumericTextConfiguration.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContentTransition.NumericTextConfiguration()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NumericTextConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition.Name(a1, a2, a3, (void (*)(unsigned char *))ContentTransition.NumericTextConfiguration.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedTransition.Name(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t ContentTransition.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(unsigned __int16 *)(result + 8) | (*(unsigned __int8 *)(result + 10) << 16) | 0x2000000;
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

uint64_t ContentTransition.CustomTransition.effects.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContentTransition.CustomTransition.effects.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ContentTransition.CustomTransition.effects.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.CustomTransition.method.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

_DWORD *ContentTransition.CustomTransition.method.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ContentTransition.CustomTransition.method.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ContentTransition.CustomTransition.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.CustomTransition.init(effects:method:layoutDirection:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a2;
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 12) = 2;
  return result;
}

BOOL static ContentTransition.Method.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL static ContentTransition.EffectType.Arg.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  float v3 = *(float *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 4);
  if (!*(unsigned char *)(a1 + 4)) {
    return !*(unsigned char *)(a2 + 4) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 4) == 1)
  {
    if (v4 == 1) {
      return LODWORD(v2) == LODWORD(v3);
    }
    return 0;
  }
  return v4 == 2 && LODWORD(v3) == 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.EffectType.Arg(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  float v3 = *(float *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 4);
  if (!*(unsigned char *)(a1 + 4)) {
    return !*(unsigned char *)(a2 + 4) && v2 == v3;
  }
  if (*(unsigned char *)(a1 + 4) == 1)
  {
    if (v4 == 1) {
      return LODWORD(v2) == LODWORD(v3);
    }
    return 0;
  }
  return v4 == 2 && LODWORD(v3) == 0;
}

uint64_t ContentTransition.EffectType.type.getter()
{
  return *v0;
}

uint64_t ContentTransition.EffectType.type.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*ContentTransition.EffectType.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.EffectType.arg0.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 4);
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t ContentTransition.EffectType.arg0.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)(v1 + 4) = *(_DWORD *)result;
  *(unsigned char *)(v1 + 8) = v2;
  return result;
}

uint64_t (*ContentTransition.EffectType.arg0.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.EffectType.arg1.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 12);
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t ContentTransition.EffectType.arg1.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 4);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*ContentTransition.EffectType.arg1.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.EffectType.init(type:arg0:arg1:)@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a2;
  char v5 = *((unsigned char *)a2 + 4);
  int v6 = *a3;
  char v7 = *((unsigned char *)a3 + 4);
  *(_DWORD *)a4 = result;
  *(_DWORD *)(a4 + 4) = v4;
  *(unsigned char *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 12) = v6;
  *(unsigned char *)(a4 + 16) = v7;
  return result;
}

double static ContentTransition.EffectType.opacity(_:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 1;
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.blur(radius:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 4;
  float result = a2;
  *(float *)(a1 + 4) = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.relativeBlur(scale:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(16, a1, a2, a3);
}

float static ContentTransition.EffectType.scale(_:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(_DWORD *)a1 = 2;
  float result = a2;
  *(float *)(a1 + 4) = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

float static ContentTransition.EffectType.translation(scale:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return static ContentTransition.EffectType.translation(_:)(15, a1, a2, a3);
}

float static ContentTransition.EffectType.translation(_:)@<S0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v4 = a3;
  *(_DWORD *)a2 = a1;
  *(float *)(a2 + 4) = v4;
  *(unsigned char *)(a2 + 8) = 0;
  float result = a4;
  *(float *)(a2 + 12) = result;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

double static ContentTransition.EffectType.matchMove.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 5;
  *(void *)a1 = 5;
  *(unsigned char *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 2;
  return result;
}

BOOL static ContentTransition.SequenceDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ContentTransition.SequenceDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

double ContentTransition.Effect.type.getter@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  int v3 = *(_DWORD *)(v1 + 12);
  char v4 = *(unsigned char *)(v1 + 16);
  double result = *(double *)v1;
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

double ContentTransition.Effect.type.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  char v4 = *(unsigned char *)(a1 + 16);
  double result = *(double *)a1;
  *(void *)uint64_t v1 = *(void *)a1;
  *(unsigned char *)(v1 + 8) = v2;
  *(_DWORD *)(v1 + 12) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*ContentTransition.Effect.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ContentTransition.Effect.begin.getter()
{
  return *(float *)(v0 + 20);
}

void ContentTransition.Effect.begin.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*ContentTransition.Effect.begin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ContentTransition.Effect.duration.getter()
{
  return *(float *)(v0 + 24);
}

void ContentTransition.Effect.duration.setter(float a1)
{
  *(float *)(v1 + 24) = a1;
}

uint64_t (*ContentTransition.Effect.duration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.events.getter()
{
  return *(unsigned int *)(v0 + 28);
}

uint64_t ContentTransition.Effect.events.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 28) = result;
  return result;
}

uint64_t (*ContentTransition.Effect.events.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.flags.getter()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t ContentTransition.Effect.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*ContentTransition.Effect.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Effect.init(type:begin:duration:events:flags:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v6 = *(unsigned char *)(result + 8);
  int v7 = *(_DWORD *)(result + 12);
  char v8 = *(unsigned char *)(result + 16);
  *(void *)a4 = *(void *)result;
  *(unsigned char *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 12) = v7;
  *(unsigned char *)(a4 + 16) = v8;
  *(float *)(a4 + 20) = a5;
  *(float *)(a4 + 24) = a6;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 32) = a3;
  return result;
}

double static ContentTransition.Effect.sequence(direction:delay:maxAllowedDurationMultiple:appliesOnInsertion:appliesOnRemoval:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  float v4 = a3;
  float v5 = a4;
  *(_DWORD *)a2 = dword_246209704[*a1];
  *(_DWORD *)(a2 + 4) = 0;
  *(unsigned char *)(a2 + 8) = 2;
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(a2 + 16) = 2;
  *(float *)(a2 + 20) = v4;
  *(float *)(a2 + 24) = 1.0 / v5;
  *(void *)&double result = 3;
  *(void *)(a2 + 28) = 3;
  return result;
}

double ContentTransition.Effect.removeInverts(_:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 8);
  int v4 = *(_DWORD *)(v2 + 12);
  char v5 = *(unsigned char *)(v2 + 16);
  int v6 = *(_DWORD *)(v2 + 28);
  unsigned int v7 = *(_DWORD *)(v2 + 32) & 0xFFFFFFFE | a1 & 1;
  *(void *)a2 = *(void *)v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  double result = *(double *)(v2 + 20);
  *(double *)(a2 + 20) = result;
  *(_DWORD *)(a2 + 28) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t ContentTransition.Method.method.getter()
{
  return *v0;
}

uint64_t ContentTransition.Method.method.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t (*ContentTransition.Method.method.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.Method.init(method:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ContentTransition.Method.diff.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ContentTransition.Method.forwards.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ContentTransition.Method.backwards.getter(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

void static ContentTransition.Method.prefix.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ContentTransition.Method.suffix.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

void static ContentTransition.Method.prefixAndSuffix.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ContentTransition.Method.binary.getter(_DWORD *a1@<X8>)
{
  *a1 = 6;
}

void static ContentTransition.Method.none.getter(_DWORD *a1@<X8>)
{
  *a1 = 7;
}

void static ContentTransition.default.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.opacity.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000002;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.fadeIfDifferent.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000004;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

void static ContentTransition.interpolate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000003;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

double static ContentTransition.NumericTextConfiguration.fixed(downwards:)@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = a1 & 1;
  *(unsigned char *)(a2 + 4) = 0;
  *(void *)&double result = 856818178;
  *(_DWORD *)(a2 + 5) = 856818178;
  *(_WORD *)(a2 + 9) = 4896;
  return result;
}

unsigned int *static ContentTransition.numericText(_:)@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 0x100000000;
  if (!*((unsigned char *)result + 4)) {
    uint64_t v2 = 0;
  }
  unint64_t v3 = v2 | *result | ((unint64_t)*((unsigned __int8 *)result + 5) << 40) | ((unint64_t)*((unsigned __int8 *)result + 6) << 48) | ((unint64_t)*((unsigned __int8 *)result + 7) << 56);
  int v4 = (*((unsigned __int16 *)result + 4) | (*((unsigned __int8 *)result + 10) << 16)) & 0xFFFFFF;
  *(void *)a2 = v3 | 0x4000000000;
  *(unsigned char *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = v4 | 0x2000000;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

uint64_t static ContentTransition.numericText(increasing:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v4 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    uint64_t result = dyld_program_minos_at_least();
  }
  else {
    uint64_t result = dword_26B0F4500 >= v4;
  }
  *(void *)a2 = (result ^ a1) & 1 | 0x1202024000000000;
  *(unsigned char *)(a2 + 12) = 3;
  *(_DWORD *)(a2 + 8) = 34807859;
  *(_WORD *)(a2 + 13) = 0;
  return result;
}

float static ContentTransition.numericText(value:)@<S0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float result = a2;
  *(void *)a1 = LODWORD(result) | 0x1202024100000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 34807859;
  *(_WORD *)(a1 + 13) = 0;
  return result;
}

double static ContentTransition.NumericTextConfiguration.automatic(value:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  float v2 = a2;
  *(float *)a1 = v2;
  *(unsigned char *)(a1 + 4) = 1;
  *(void *)&double result = 856818178;
  *(_DWORD *)(a1 + 5) = 856818178;
  *(_WORD *)(a1 + 9) = 4896;
  return result;
}

void ContentTransition.style.getter(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 13)) {
    *a1 = 3;
  }
  else {
    *a1 = *(unsigned char *)(v1 + 12);
  }
}

unsigned __int8 *ContentTransition.style.setter(unsigned __int8 *result)
{
  if (!*(unsigned char *)(v1 + 13)) {
    *(_WORD *)(v1 + 12) = *result;
  }
  return result;
}

unsigned __int8 *(*ContentTransition.style.modify(uint64_t a1))(void *a1)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 13)) {
    char v2 = 3;
  }
  else {
    char v2 = *(unsigned char *)(v1 + 12);
  }
  *(unsigned char *)(a1 + 8) = v2;
  return ContentTransition.style.modify;
}

unsigned __int8 *ContentTransition.style.modify(void *a1)
{
  uint64_t v3 = *a1;
  double result = (unsigned __int8 *)(a1 + 1);
  uint64_t v2 = v3;
  if (!*(unsigned char *)(v3 + 13)) {
    *(_WORD *)(v2 + 12) = *result;
  }
  return result;
}

Swift::Int ContentTransition.NamedKey.hashValue.getter()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 11);
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 12);
  Swift::UInt8 v4 = *((unsigned char *)v0 + 13);
  Hasher.init(_seed:)();
  uint64_t v5 = (v1 >> 38) & 3;
  if (v5)
  {
    if (v5 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001uLL:
          Swift::UInt v6 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v6 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v6 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v6 = 4;
          break;
        default:
          Swift::UInt v6 = 0;
          break;
      }
      Hasher._combine(_:)(v6);
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_15;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2) {
    goto LABEL_6;
  }
LABEL_14:
  Hasher._combine(_:)(0);
LABEL_15:
  if (v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContentTransition.NamedKey()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 11);
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 12);
  Swift::UInt8 v4 = *((unsigned char *)v0 + 13);
  uint64_t v5 = ((unint64_t)*v0 >> 38) & 3;
  if (v5)
  {
    if (v5 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
      if (v2 == 2) {
        goto LABEL_15;
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001:
          Swift::UInt v6 = 1;
          break;
        case 0x8000000002:
          Swift::UInt v6 = 2;
          break;
        case 0x8000000003:
          Swift::UInt v6 = 3;
          break;
        case 0x8000000004:
          Swift::UInt v6 = 4;
          break;
        default:
          Swift::UInt v6 = 0;
          break;
      }
      Hasher._combine(_:)(v6);
      if (v2 == 2)
      {
LABEL_15:
        Hasher._combine(_:)(0);
        if (v3 == 3) {
          goto LABEL_16;
        }
        goto LABEL_7;
      }
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(v1 & 1);
    if (v2 == 2) {
      goto LABEL_15;
    }
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2 & 1);
  if (v3 == 3)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_17;
  }
LABEL_7:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
LABEL_17:
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContentTransition.NamedKey()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 11);
  Swift::UInt v3 = *((unsigned __int8 *)v0 + 12);
  Swift::UInt8 v4 = *((unsigned char *)v0 + 13);
  Hasher.init(_seed:)();
  uint64_t v5 = (v1 >> 38) & 3;
  if (v5)
  {
    if (v5 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
    else
    {
      switch(v1)
      {
        case 0x8000000001uLL:
          Swift::UInt v6 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v6 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v6 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v6 = 4;
          break;
        default:
          Swift::UInt v6 = 0;
          break;
      }
      Hasher._combine(_:)(v6);
      if (v2 == 2) {
        goto LABEL_14;
      }
    }
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
    goto LABEL_15;
  }
  Hasher._combine(_:)(5uLL);
  Hasher._combine(_:)(v1 & 1);
  if (v2 != 2) {
    goto LABEL_6;
  }
LABEL_14:
  Hasher._combine(_:)(0);
LABEL_15:
  if (v3 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContentTransition.NamedKey(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 10);
  __int16 v4 = *(_WORD *)(a1 + 11);
  int v5 = *(unsigned __int8 *)(a1 + 13);
  uint64_t v6 = *(void *)a2;
  __int16 v7 = *(_WORD *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 10);
  __int16 v9 = *(_WORD *)(a2 + 11);
  int v10 = *(unsigned __int8 *)(a2 + 13);
  uint64_t v16 = *(void *)a1;
  char v18 = v3;
  __int16 v17 = v2;
  __int16 v19 = v4;
  uint64_t v12 = v6;
  char v14 = v8;
  __int16 v13 = v7;
  __int16 v15 = v9;
  return specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v16, &v12) & ~(v5 ^ v10) & 1;
}

uint64_t one-time initialization function for _namedTransitions()
{
  type metadata accessor for AtomicBuffer<[ContentTransition.NamedKey : RBTransition]>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  static ContentTransition._namedTransitions = (_UNKNOWN *)result;
  return result;
}

void *ContentTransition.NamedTransition.makeRBTransition()()
{
  unint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 10);
  int v3 = *((unsigned __int16 *)v0 + 4);
  int v4 = *((unsigned __int8 *)v0 + 11);
  int v5 = *((unsigned __int8 *)v0 + 12);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638C8]), sel_init);
  __int16 v7 = v6;
  if (v5 == 3) {
    int v8 = 0;
  }
  else {
    int v8 = v5;
  }
  uint64_t v9 = (v1 >> 38) & 3;
  if (v9)
  {
    if (v9 == 1)
    {
      objc_msgSend(v6, sel_setMethod_, 8);
      if ((v1 >> 40))
      {
        if ((v1 & 0x1000000000000) != 0) {
          uint64_t v10 = 14;
        }
        else {
          uint64_t v10 = 13;
        }
LABEL_31:
        id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
        objc_msgSend(v37, sel_setType_, v10);
        objc_msgSend(v37, sel_setEvents_, 3);
        *(float *)&double v38 = (float)HIBYTE(v1) * 0.0083333;
        objc_msgSend(v37, sel_setBeginTime_, v38);
        LODWORD(v39) = 1061997773;
        objc_msgSend(v37, sel_setDuration_, v39);
        objc_msgSend(v7, sel_addEffect_, v37);

        id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
        objc_msgSend(v40, sel_setType_, 1);
        objc_msgSend(v40, sel_setEvents_, 3);
        objc_msgSend(v40, sel_setAnimationIndex_, 0);
        objc_msgSend(v7, sel_addEffect_, v40);

        float v41 = (float)BYTE1(v3);
        id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
        uint64_t v43 = v42;
        if ((v1 & 0x2000000000000) != 0)
        {
          objc_msgSend(v42, sel_setType_, 16);
          objc_msgSend(v43, sel_setArgumentValue_atIndex_, 0, 0.0);
          *(float *)&double v45 = v41 * 0.0078125;
          objc_msgSend(v43, sel_setArgumentValue_atIndex_, 1, v45, BYTE5(v1));
        }
        else
        {
          objc_msgSend(v42, sel_setType_, 4);
          *(float *)&double v44 = v41 * 0.25;
          objc_msgSend(v43, sel_setArgumentValue_atIndex_, 0, v44, BYTE5(v1));
        }
        objc_msgSend(v43, sel_setEvents_, 3);
        objc_msgSend(v43, sel_setAnimationIndex_, 0);
        objc_msgSend(v7, (SEL)0x2651D9C67, v43);

        float v46 = (float)((v3 | (v2 << 16)) << 8 >> 24);
        float v47 = v46 * 0.03125;
        float v48 = v46 * 0.03125;
        float v49 = v46 * -0.03125;
        if ((v1 & 1) == 0) {
          float v49 = v48;
        }
        if ((v1 & 0x100000000) != 0) {
          uint64_t v50 = 3;
        }
        else {
          uint64_t v50 = 1;
        }
        if ((v1 & 0x100000000) != 0) {
          float v49 = v47;
        }
        BOOL v51 = (v1 & 0x10000000000) == 0 || v65 == 2;
        if (v51) {
          float v52 = v49;
        }
        else {
          float v52 = 0.0;
        }
        if (v51) {
          float v53 = 0.0;
        }
        else {
          float v53 = v49;
        }
        id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
        objc_msgSend(v54, sel_setType_, 15);
        *(float *)&double v55 = v53;
        objc_msgSend(v54, sel_setArgumentValue_atIndex_, 0, v55);
        *(float *)&double v56 = v52;
        objc_msgSend(v54, sel_setArgumentValue_atIndex_, 1, v56);
        objc_msgSend(v54, sel_setEvents_, 3);
        objc_msgSend(v54, sel_setFlags_, v50);
        objc_msgSend(v54, sel_setAnimationIndex_, 1);
        objc_msgSend(v7, (SEL)0x2651D9C67, v54);

        id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
        objc_msgSend(v57, sel_setType_, 2);
        *(float *)&double v58 = (float)v3 * 0.0078125;
        objc_msgSend(v57, (SEL)&selRef_systemPinkColorWithSystem_ + 7, 0, v58);
        objc_msgSend(v57, sel_setEvents_, 3);
        objc_msgSend(v57, sel_setAnimationIndex_, 0);
        objc_msgSend(v7, (SEL)0x2651D9C67, v57);

        id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63858]), sel_init);
        objc_msgSend(v33, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.5, 1.0, 344.0, 37.0, 0.0);
        objc_msgSend(v33, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.8, 2.0, 470.0, 34.0, 0.0);
        goto LABEL_51;
      }
      if (v4 == 2)
      {
        if ((v1 & 0x1000000000000) == 0)
        {
LABEL_9:
          uint64_t v10 = 11;
          goto LABEL_31;
        }
      }
      else if ((v1 & 0x1000000000000) != 0)
      {
        if (v4) {
          goto LABEL_9;
        }
      }
      else if ((v4 & 1) == 0)
      {
        goto LABEL_9;
      }
      uint64_t v10 = 12;
      goto LABEL_31;
    }
    uint64_t v11 = 1;
    uint64_t v12 = 6;
    switch(v1)
    {
      case 0x8000000001uLL:
        objc_msgSend(v6, sel_setMethod_, 7);
        return v7;
      case 0x8000000002uLL:
        uint64_t v12 = 7;
        goto LABEL_53;
      case 0x8000000003uLL:
        goto LABEL_27;
      case 0x8000000004uLL:
        goto LABEL_26;
      default:
LABEL_53:
        objc_msgSend(v6, sel_setMethod_, v12);
        break;
    }
LABEL_54:
    id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
    objc_msgSend(v33, sel_setType_, 1);
    objc_msgSend(v33, sel_setDuration_, 0.0);
    objc_msgSend(v7, sel_addEffect_, v33);
    goto LABEL_55;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v11 = 1;
LABEL_27:
    objc_msgSend(v6, sel_setMethod_, v11);
    goto LABEL_54;
  }
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      objc_msgSend(v6, sel_setMethod_, 8);
      objc_msgSend(v7, sel_setMaxChanges_, 10);
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
      char v14 = v13;
      if (v4) {
        uint64_t v15 = 12;
      }
      else {
        uint64_t v15 = 11;
      }
      if (v4) {
        uint64_t v16 = 8;
      }
      else {
        uint64_t v16 = 7;
      }
      objc_msgSend(v13, sel_setType_, v15);
      objc_msgSend(v14, sel_setEvents_, 7);
      objc_msgSend(v14, sel_setFlags_, 1);
      LODWORD(v17) = 1025758986;
      objc_msgSend(v14, sel_setBeginTime_, v17);
      LODWORD(v18) = 1.0;
      objc_msgSend(v14, sel_setDuration_, v18);
      objc_msgSend(v7, sel_addEffect_, v14);

      id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v19, sel_setType_, 1);
      objc_msgSend(v19, sel_setEvents_, 7);
      objc_msgSend(v19, sel_setBeginTime_, 0.0);
      LODWORD(v20) = 1.0;
      objc_msgSend(v19, sel_setDuration_, v20);
      objc_msgSend(v7, sel_addEffect_, v19);

      id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v21, sel_setType_, 1);
      objc_msgSend(v21, sel_setEvents_, 11);
      LODWORD(v22) = 1051260355;
      objc_msgSend(v21, sel_setBeginTime_, v22);
      LODWORD(v23) = 1059816734;
      objc_msgSend(v21, sel_setDuration_, v23);
      objc_msgSend(v7, sel_addEffect_, v21);

      id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v24, sel_setType_, v16);
      objc_msgSend(v24, sel_setEvents_, 7);
      objc_msgSend(v24, sel_setBeginTime_, 0.0);
      LODWORD(v25) = 1.0;
      objc_msgSend(v24, sel_setDuration_, v25);
      objc_msgSend(v7, sel_addEffect_, v24);

      id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v26, sel_setType_, 16);
      objc_msgSend(v26, sel_setArgumentValue_atIndex_, 0, 0.0);
      LODWORD(v27) = 0.25;
      objc_msgSend(v26, sel_setArgumentValue_atIndex_, 1, v27);
      objc_msgSend(v26, sel_setEvents_, 3);
      LODWORD(v28) = 1051260355;
      objc_msgSend(v26, sel_setBeginTime_, v28);
      LODWORD(v29) = 1059816734;
      objc_msgSend(v26, sel_setDuration_, v29);
      objc_msgSend(v7, sel_addEffect_, v26);

      id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v30, sel_setType_, 6);
      LODWORD(v31) = 0.5;
      objc_msgSend(v30, sel_setArgumentValue_atIndex_, 0, v31);
      objc_msgSend(v30, sel_setEvents_, 7);
      objc_msgSend(v30, sel_setBeginTime_, 0.0);
      LODWORD(v32) = 1.0;
      objc_msgSend(v30, sel_setDuration_, v32);
      objc_msgSend(v7, sel_addEffect_, v30);

      id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), (SEL)&selRef_setTimeZone_);
      objc_msgSend(v33, sel_setType_, 2);
      LODWORD(v34) = 1062836634;
      objc_msgSend(v33, sel_setArgumentValue_atIndex_, 0, v34);
      objc_msgSend(v33, sel_setEvents_, 11);
      LODWORD(v35) = 1051260355;
      objc_msgSend(v33, sel_setBeginTime_, v35);
      LODWORD(v36) = 1059816734;
      objc_msgSend(v33, sel_setDuration_, v36);
      objc_msgSend(v7, sel_addEffect_, v33);
      goto LABEL_55;
    }
LABEL_26:
    uint64_t v11 = 6;
    goto LABEL_27;
  }
  objc_msgSend(v6, sel_setMethod_, 6);
  id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
  objc_msgSend(v60, sel_setType_, 1);
  objc_msgSend(v60, sel_setEvents_, 3);
  objc_msgSend(v60, sel_setInsertAnimationIndex_, 1);
  objc_msgSend(v60, sel_setRemoveAnimationIndex_, 0);
  objc_msgSend(v7, sel_addEffect_, v60);

  id v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
  objc_msgSend(v61, sel_setType_, 2);
  LODWORD(v62) = 1060320051;
  objc_msgSend(v61, sel_setArgumentValue_atIndex_, 0, v62);
  objc_msgSend(v61, sel_setEvents_, 3);
  objc_msgSend(v61, sel_setInsertAnimationIndex_, 1);
  objc_msgSend(v61, sel_setRemoveAnimationIndex_, 0);
  objc_msgSend(v7, sel_addEffect_, v61);

  id v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638D0]), sel_init);
  objc_msgSend(v63, sel_setType_, 16);
  objc_msgSend(v63, sel_setArgumentValue_atIndex_, 0, 0.0);
  LODWORD(v64) = 0.25;
  objc_msgSend(v63, sel_setArgumentValue_atIndex_, 1, v64);
  objc_msgSend(v63, sel_setEvents_, 3);
  objc_msgSend(v63, sel_setInsertAnimationIndex_, 1);
  objc_msgSend(v63, sel_setRemoveAnimationIndex_, 0);
  objc_msgSend(v7, sel_addEffect_, v63);

  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63858]), sel_init);
  objc_msgSend(v33, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.5, 1.0, 331.0, 36.4, 0.0);
  objc_msgSend(v33, sel_addSpringDuration_mass_stiffness_damping_initialVelocity_, 0.8, 2.0, 300.0, 50.0, 0.0);
LABEL_51:
  objc_msgSend(v7, sel_setAnimation_, v33);
LABEL_55:

  return v7;
}

uint64_t static ContentTransition.Options.addsDrawingGroup.getter()
{
  return 1;
}

uint64_t static ContentTransition.Options.animatesDifferentContent.getter()
{
  return 2;
}

uint64_t static ContentTransition.Options.formsGroup.getter()
{
  return 4;
}

uint64_t static ContentTransition.Options.implicitGroup.getter()
{
  return 8;
}

uint64_t static ContentTransition.Options.inherited.getter()
{
  return 1;
}

uint64_t ContentTransition.State.init(transition:style:animation:options:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v5 = *(_DWORD *)(result + 8);
  __int16 v6 = *(_WORD *)(result + 12);
  char v7 = *(unsigned char *)(result + 14);
  char v8 = *a2;
  *(void *)a5 = *(void *)result;
  *(_WORD *)(a5 + 12) = v6;
  *(_DWORD *)(a5 + 8) = v5;
  *(unsigned char *)(a5 + 14) = v7;
  *(unsigned char *)(a5 + 15) = v8;
  *(void *)(a5 + 16) = a3;
  *(_DWORD *)(a5 + 24) = a4;
  return result;
}

void static ContentTransition.State.defaultValue.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x8000000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(void *)(a1 + 13) = 0;
  *(void *)(a1 + 20) = 0;
}

uint64_t ContentTransition.State.transition.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 14);
  uint64_t result = outlined consume of ContentTransition.Storage(*(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(unsigned char *)(v1 + 13));
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(unsigned char *)(v1 + 14) = v5;
  return result;
}

uint64_t (*ContentTransition.State.transition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.State.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 15);
}

unsigned char *ContentTransition.State.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 15) = *result;
  return result;
}

uint64_t (*ContentTransition.State.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.State.animation.getter()
{
  return swift_retain();
}

uint64_t ContentTransition.State.animation.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ContentTransition.State.animation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransition.State.options.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t ContentTransition.State.options.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*ContentTransition.State.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ContentTransition.State.rasterizationOptions.getter(uint64_t a1@<X8>)
{
  char v2 = *(_DWORD *)(v1 + 24);
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v2 & 1 | 0x20;
  *(unsigned char *)(a1 + 16) = 3;
}

uint64_t ContentTransition.NumericTextConfiguration.axis(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 4);
  char v4 = *(unsigned char *)(v2 + 10);
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(unsigned char *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 5) = result & 1;
  *(_DWORD *)(a2 + 6) = *(_DWORD *)(v2 + 6);
  *(unsigned char *)(a2 + 10) = v4;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.delay(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  __int16 v6 = *(_WORD *)((char *)v2 + 5);
  __int16 v7 = *((_WORD *)v2 + 4);
  char v8 = *((unsigned char *)v2 + 10);
  float v9 = a2;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(v9 * 120.0);
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 5) = v6;
  *(unsigned char *)(a1 + 7) = result;
  *(_WORD *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 10) = v8;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  __int16 v6 = *(_WORD *)((char *)v2 + 5);
  char v7 = *((unsigned char *)v2 + 7);
  __int16 v8 = *(_WORD *)((char *)v2 + 9);
  float v9 = a2;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(v9 * 128.0);
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(_WORD *)(a1 + 5) = v6;
  *(unsigned char *)(a1 + 7) = v7;
  *(unsigned char *)(a1 + 8) = result;
  *(_WORD *)(a1 + 9) = v8;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.blur(radius:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  char v6 = *((unsigned char *)v2 + 5);
  char v7 = *((unsigned char *)v2 + 6);
  __int16 v8 = *(_WORD *)((char *)v2 + 7);
  char v9 = *((unsigned char *)v2 + 10);
  float v10 = a2;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(v10 * 4.0);
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(unsigned char *)(a1 + 5) = v6;
  *(unsigned char *)(a1 + 6) = v7 & 0xFD;
  *(_WORD *)(a1 + 7) = v8;
  *(unsigned char *)(a1 + 9) = result;
  *(unsigned char *)(a1 + 10) = v9;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.relativeOffset(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  int v4 = *v2;
  char v5 = *((unsigned char *)v2 + 4);
  char v6 = *((unsigned char *)v2 + 9);
  float v7 = a2;
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(v7 * 32.0);
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 5) = *(int *)((char *)v2 + 5);
  *(unsigned char *)(a1 + 9) = v6;
  *(unsigned char *)(a1 + 10) = result;
  return result;
}

uint64_t ContentTransition.NumericTextConfiguration.reversed(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(v2 + 4);
  char v4 = *(unsigned char *)(v2 + 5);
  char v5 = *(unsigned char *)(v2 + 6) & 0xFE | result;
  *(_DWORD *)a2 = *(_DWORD *)v2;
  *(unsigned char *)(a2 + 4) = v3;
  *(unsigned char *)(a2 + 5) = v4;
  *(unsigned char *)(a2 + 6) = v5;
  *(_DWORD *)(a2 + 7) = *(_DWORD *)(v2 + 7);
  return result;
}

uint64_t View.contentTransition(_:animation:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = v6 | (v5 << 32);
  char v8 = *(unsigned char *)(a1 + 14);
  uint64_t v11 = *(void *)a1;
  uint64_t v4 = v11;
  char v13 = v5;
  int v12 = v6;
  char v14 = *(unsigned char *)(a1 + 13);
  char v9 = v14;
  char v15 = v8;
  uint64_t v16 = a2;
  int v17 = a3;
  View.modifier<A>(_:)(&v11, a4, &type metadata for _ContentTransitionModifier);
  outlined copy of ContentTransition.Storage(v4, v7, v9);
  swift_retain();
  outlined consume of ContentTransition.Storage(v4, v7, v9);
  return swift_release();
}

uint64_t _ContentTransitionModifier.init(transition:animation:options:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = *(_DWORD *)(result + 8);
  __int16 v5 = *(_WORD *)(result + 12);
  char v6 = *(unsigned char *)(result + 14);
  *(void *)a4 = *(void *)result;
  *(_WORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 8) = v4;
  *(unsigned char *)(a4 + 14) = v6;
  *(void *)(a4 + 16) = a2;
  *(_DWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t View.contentTransitionGroup()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _ContentTransitionGroup);
}

uint64_t ContentTransition.State.transition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 14);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v6 = *(unsigned char *)(v1 + 13);
  *(unsigned char *)(a1 + 13) = v6;
  *(unsigned char *)(a1 + 14) = v5;
  return outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v6);
}

uint64_t _ContentTransitionModifier.transition.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 14);
  uint64_t result = outlined consume of ContentTransition.Storage(*(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(unsigned char *)(v1 + 13));
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(unsigned char *)(v1 + 14) = v5;
  return result;
}

uint64_t (*_ContentTransitionModifier.transition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ContentTransitionModifier.animation.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*_ContentTransitionModifier.animation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ContentTransitionModifier.options.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*_ContentTransitionModifier.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ContentTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 8);
  int v14 = *((_DWORD *)a2 + 2);
  int v15 = *((_DWORD *)a2 + 9);
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v16 = *((_DWORD *)a2 + 20);
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v8 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v9;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_WORD *)(v11 + 80) = 256;
  *(void *)(v11 + 88) = v10;
  swift_release();
  uint64_t v18 = v4;
  int v19 = v14;
  uint64_t v20 = v11;
  uint64_t v21 = a2[3];
  int v22 = v5 | 0x20;
  int v23 = v15;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  a3(v12, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _ContentTransitionModifier.ChildEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v2 = Value[1];
  uint64_t v34 = *Value;
  uint64_t v35 = v2;
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v28);
    swift_release_n();
    swift_release_n();
    uint64_t v4 = v28;
    unint64_t v5 = v29 | ((unint64_t)v30 << 32);
    char v6 = v31;
    char v25 = v33;
    uint64_t v26 = v32;
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find<A>(_:key:)(v7);
    if (v8)
    {
      uint64_t v9 = *(unsigned __int8 *)(v8 + 87);
      int v10 = *(_DWORD *)(v8 + 96);
      uint64_t v4 = *(void *)(v8 + 72);
      unint64_t v11 = *(unsigned int *)(v8 + 80) | ((unint64_t)*(unsigned __int8 *)(v8 + 84) << 32);
      char v12 = *(unsigned char *)(v8 + 85);
      outlined copy of ContentTransition.Storage(v4, v11, v12);
      swift_retain();
    }
    else
    {
      char v12 = 0;
      uint64_t v9 = 0;
      LOBYTE(v10) = 0;
      unint64_t v11 = 0x302000000;
      uint64_t v4 = 0x8000000000;
    }
    char v25 = v10;
    uint64_t v26 = v9;
    swift_release_n();
    char v6 = v12;
    unint64_t v5 = v11;
  }
  uint64_t v13 = AGGraphGetValue();
  uint64_t v14 = *(void *)v13;
  unint64_t v15 = *(unsigned int *)(v13 + 8) | ((unint64_t)*(unsigned __int8 *)(v13 + 12) << 32);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 13);
  int v24 = *(unsigned __int8 *)(v13 + 14);
  outlined copy of ContentTransition.Storage(*(void *)v13, v15, v16);
  outlined consume of ContentTransition.Storage(v4, v5, v6);
  uint64_t v17 = *(void *)(AGGraphGetValue() + 16);
  swift_retain();
  swift_release();
  int v18 = *(_DWORD *)(AGGraphGetValue() + 24) | v25 & 1;
  swift_retain();
  outlined copy of ContentTransition.Storage(v14, v15, v16);
  swift_retain();
  swift_retain();
  outlined copy of ContentTransition.Storage(v14, v15, v16);
  uint64_t v19 = 0x1000000000000;
  if (!v24) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = v15 | (v16 << 40) | v19 | (v26 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v34, v14, v20, v17, v18);
  swift_release();
  outlined consume of ContentTransition.Storage(v14, v15, v16);
  swift_release();
  if (v2)
  {
    uint64_t v21 = v34;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v21);
    swift_release();
    swift_release();
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    uint64_t result = swift_release();
  }
  else
  {
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    swift_release();
    outlined consume of ContentTransition.Storage(v14, v15, v16);
    uint64_t result = swift_release();
    uint64_t v21 = v34;
  }
  uint64_t v23 = v35;
  *a1 = v21;
  a1[1] = v23;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ContentTransitionModifier.ChildEnvironment@<X0>(uint64_t *a1@<X8>)
{
  return _ContentTransitionModifier.ChildEnvironment.value.getter(a1);
}

uint64_t key path getter for EnvironmentValues.contentTransitionState : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v11);
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    specialized PropertyList.subscript.getter((uint64_t)&v11);
  }
  uint64_t result = swift_release_n();
  int v5 = v12;
  __int16 v6 = v13;
  char v7 = v14;
  char v8 = v15;
  uint64_t v9 = v16;
  int v10 = v17;
  *(void *)a2 = v11;
  *(_WORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 14) = v7;
  *(unsigned char *)(a2 + 15) = v8;
  *(void *)(a2 + 16) = v9;
  *(_DWORD *)(a2 + 24) = v10;
  return result;
}

uint64_t key path setter for EnvironmentValues.contentTransitionState : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  unint64_t v2 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 13);
  int v4 = *(unsigned __int8 *)(a1 + 14);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 24);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 15);
  outlined copy of ContentTransition.Storage(*(void *)a1, v2, v3);
  uint64_t v8 = 0x1000000000000;
  if (!v4) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v2 | (v3 << 40) | v8 | (v7 << 56);
  swift_retain();
  specialized EnvironmentValues.subscript.setter(v1, v9, v5, v6);
  outlined consume of ContentTransition.Storage(v1, v2, v3);

  return swift_release();
}

void (*EnvironmentValues.contentTransitionState.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find<A>(_:key:)(v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      unint64_t v8 = *(unsigned int *)(v6 + 80) | ((unint64_t)*(unsigned __int8 *)(v6 + 84) << 32);
      char v9 = *(unsigned char *)(v6 + 85);
      char v10 = *(unsigned char *)(v6 + 86);
      char v11 = *(unsigned char *)(v6 + 87);
      uint64_t v12 = *(void *)(v6 + 88);
      int v13 = *(_DWORD *)(v6 + 96);
      outlined copy of ContentTransition.Storage(v7, v8, v9);
      swift_retain();
    }
    else
    {
      char v9 = 0;
      char v10 = 0;
      char v11 = 0;
      uint64_t v12 = 0;
      int v13 = 0;
      unint64_t v8 = 0x302000000;
      uint64_t v7 = 0x8000000000;
    }
    void *v3 = v7;
    *((_DWORD *)v3 + 2) = v8;
    *((unsigned char *)v3 + 12) = BYTE4(v8);
    *((unsigned char *)v3 + 13) = v9;
    *((unsigned char *)v3 + 14) = v10;
    *((unsigned char *)v3 + 15) = v11;
    void v3[2] = v12;
    *((_DWORD *)v3 + 6) = v13;
    swift_release();
  }
  swift_release_n();
  return EnvironmentValues.contentTransitionState.modify;
}

void EnvironmentValues.contentTransitionState.modify(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)(*a1)[6];
  uint64_t v4 = **a1;
  unint64_t v5 = *((unsigned int *)*a1 + 2) | ((unint64_t)*((unsigned __int8 *)*a1 + 12) << 32);
  uint64_t v6 = *((unsigned __int8 *)*a1 + 13);
  int v7 = *((unsigned __int8 *)*a1 + 14);
  uint64_t v8 = *((unsigned __int8 *)*a1 + 15);
  uint64_t v9 = (*a1)[2];
  int v10 = *((_DWORD *)*a1 + 6);
  uint64_t v11 = *v3;
  if (a2)
  {
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    swift_retain_n();
    swift_retain();
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    uint64_t v12 = 0x1000000000000;
    if (!v7) {
      uint64_t v12 = 0;
    }
    unint64_t v13 = v5 & 0xFFFFFFFFFFLL | (v6 << 40) | v12 | (v8 << 56);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v13, v9, v10);
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    if (v3[1])
    {
      uint64_t v14 = *(void *)v2[6];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v14);
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    uint64_t v15 = *v2;
    unint64_t v16 = *((unsigned int *)v2 + 2) | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32);
    char v17 = *((unsigned char *)v2 + 13);
  }
  else
  {
    swift_retain_n();
    outlined copy of ContentTransition.Storage(v4, v5, v6);
    uint64_t v18 = 0x1000000000000;
    if (!v7) {
      uint64_t v18 = 0;
    }
    unint64_t v19 = v5 & 0xFFFFFFFFFFLL | (v6 << 40) | v18 | (v8 << 56);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4, v19, v9, v10);
    swift_release();
    outlined consume of ContentTransition.Storage(v4, v5, v6);
    swift_release();
    if (v3[1])
    {
      uint64_t v20 = *(void *)v2[6];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v11, v20);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v15 = v4;
    unint64_t v16 = v5;
    char v17 = v6;
  }
  outlined consume of ContentTransition.Storage(v15, v16, v17);
  swift_release();

  free(v2);
}

uint64_t (*EnvironmentValues.contentTransition.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  EnvironmentValues.contentTransition.getter(a1);
  return EnvironmentValues.contentTransition.modify;
}

uint64_t EnvironmentValues.contentTransition.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  char v4 = *(unsigned char *)(a1 + 13);
  char v5 = *(unsigned char *)(a1 + 14);
  if (a2)
  {
    uint64_t v7 = *(void *)a1;
    int v8 = v3;
    char v9 = BYTE4(v3);
    char v10 = v4;
    char v11 = v5;
    outlined copy of ContentTransition.Storage(v2, v3, v4);
    EnvironmentValues.contentTransition.setter((uint64_t)&v7);
    return outlined consume of ContentTransition.Storage(v2, v3, v4);
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    int v8 = v3;
    char v9 = BYTE4(v3);
    char v10 = v4;
    char v11 = v5;
    return EnvironmentValues.contentTransition.setter((uint64_t)&v7);
  }
}

uint64_t (*EnvironmentValues.contentTransitionStyle.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)a1 = v1;
  EnvironmentValues.contentTransitionStyle.getter((unsigned char *)(a1 + 8));
  return EnvironmentValues.contentTransitionStyle.modify;
}

uint64_t EnvironmentValues.contentTransitionStyle.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    char v4 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v4;
  }
  else
  {
    char v5 = *(unsigned char *)(a1 + 8);
    uint64_t v2 = (unsigned __int8 *)&v5;
  }
  return EnvironmentValues.contentTransitionStyle.setter(v2);
}

uint64_t EnvironmentValues.contentTransitionAnimation.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)&v9);
    swift_release_n();
    swift_release_n();
    uint64_t v2 = v9;
    unint64_t v3 = v10 | ((unint64_t)v11 << 32);
    char v4 = v12;
    uint64_t v5 = v13;
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      uint64_t v2 = *(void *)(v7 + 72);
      unint64_t v3 = *(unsigned int *)(v7 + 80) | ((unint64_t)*(unsigned __int8 *)(v7 + 84) << 32);
      char v4 = *(unsigned char *)(v7 + 85);
      uint64_t v5 = *(void *)(v7 + 88);
      outlined copy of ContentTransition.Storage(v2, v3, v4);
      swift_retain();
    }
    else
    {
      char v4 = 0;
      uint64_t v5 = 0;
      unint64_t v3 = 0x302000000;
      uint64_t v2 = 0x8000000000;
    }
    swift_release_n();
  }
  swift_retain();
  outlined consume of ContentTransition.Storage(v2, v3, v4);
  swift_release();
  return v5;
}

uint64_t EnvironmentValues.contentTransitionAnimation.setter(uint64_t a1)
{
  specialized EnvironmentValues.contentTransitionAnimation.setter(a1);

  return swift_release();
}

uint64_t (*EnvironmentValues.contentTransitionAnimation.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = EnvironmentValues.contentTransitionAnimation.getter();
  return EnvironmentValues.contentTransitionAnimation.modify;
}

uint64_t EnvironmentValues.contentTransitionAnimation.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized EnvironmentValues.contentTransitionAnimation.setter(v3);
    swift_release();
  }
  else
  {
    specialized EnvironmentValues.contentTransitionAnimation.setter(v2);
  }

  return swift_release();
}

uint64_t (*EnvironmentValues.contentTransitionAddsDrawingGroup.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
  return EnvironmentValues.contentTransitionAddsDrawingGroup.modify;
}

uint64_t EnvironmentValues.contentTransitionAddsDrawingGroup.modify(uint64_t a1)
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter(*(unsigned char *)(a1 + 8));
}

uint64_t EnvironmentValues.contentTransitionGroupEffect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v28);
    swift_release_n();
    swift_release_n();
    int v4 = v35;
    unsigned int v5 = v33;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v27);
    swift_release_n();
    uint64_t result = swift_release_n();
    int v7 = v27;
    uint64_t v8 = v28;
    unint64_t v9 = v29 | ((unint64_t)v30 << 32);
    int v10 = v31;
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    uint64_t v12 = specialized find<A>(_:key:)(v11);
    if (v12)
    {
      uint64_t v8 = *(void *)(v12 + 72);
      unint64_t v9 = *(unsigned int *)(v12 + 80) | ((unint64_t)*(unsigned __int8 *)(v12 + 84) << 32);
      int v10 = *(unsigned __int8 *)(v12 + 85);
      char v13 = *(unsigned char *)(v12 + 86);
      unsigned int v5 = *(unsigned __int8 *)(v12 + 87);
      uint64_t v14 = *(void *)(v12 + 88);
      int v4 = *(_DWORD *)(v12 + 96);
      outlined copy of ContentTransition.Storage(v8, v9, v10);
      swift_retain();
    }
    else
    {
      int v10 = 0;
      char v13 = 0;
      unsigned int v5 = 0;
      uint64_t v14 = 0;
      int v4 = 0;
      unint64_t v9 = 0x302000000;
      uint64_t v8 = 0x8000000000;
    }
    char v32 = v13;
    uint64_t v34 = v14;
    swift_release_n();
    uint64_t v15 = swift_retain_n();
    uint64_t v16 = specialized find<A>(_:key:)(v15);
    if (v16) {
      int v7 = *(unsigned __int8 *)(v16 + 72);
    }
    else {
      int v7 = 0;
    }
    uint64_t result = swift_release_n();
  }
  if (BYTE4(v9) == 3) {
    uint64_t v17 = v5;
  }
  else {
    uint64_t v17 = BYTE4(v9);
  }
  if ((v9 & 0xFF000000) == 0x2000000) {
    int v18 = v7;
  }
  else {
    int v18 = (v9 >> 24) & 1;
  }
  BOOL v19 = v18 == 0;
  uint64_t v20 = 0x1000000;
  if (v19) {
    uint64_t v20 = 0;
  }
  unint64_t v21 = v20 & 0xFFFFFFFFFF000000 | v9 & 0xFFFFFF | (v17 << 32);
  if (BYTE4(v9) == 2) {
    int v22 = v7;
  }
  else {
    int v22 = BYTE4(v9) & 1;
  }
  BOOL v19 = v22 == 0;
  uint64_t v23 = 0x100000000;
  if (v19) {
    uint64_t v23 = 0;
  }
  unint64_t v24 = v23 & 0xFFFFFFFF00000000 | v9;
  if (v10 != 1) {
    unint64_t v24 = v9;
  }
  if (!v10) {
    unint64_t v24 = v21;
  }
  char v25 = v32;
  uint64_t v26 = v34;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v24;
  *(unsigned char *)(a1 + 12) = BYTE4(v24);
  *(unsigned char *)(a1 + 13) = v10;
  *(unsigned char *)(a1 + 14) = v25;
  *(unsigned char *)(a1 + 15) = v5;
  *(void *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 24) = v4 | 4;
  return result;
}

uint64_t static _ContentTransitionGroup._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  int v4 = (_OWORD *)a1;
  long long v6 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 64);
  int v13 = *(_DWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v7;
  uint64_t KeyPath = swift_getKeyPath();
  long long v9 = v4[1];
  v14[0] = *v4;
  long long v10 = v4[2];
  v14[1] = v9;
  v14[2] = v10;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v14);
  swift_release();
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v12, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, a3, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t key path getter for EnvironmentValues.contentTransitionGroupEffect : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransitionGroupEffect.getter((uint64_t)&v9);
  int v3 = v10;
  __int16 v4 = v11;
  char v5 = v12;
  char v6 = v13;
  uint64_t v7 = v14;
  int v8 = v15;
  *(void *)a1 = v9;
  *(_WORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 14) = v5;
  *(unsigned char *)(a1 + 15) = v6;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentTransitionGroup@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a3@<X8>)
{
  __int16 v4 = (_OWORD *)a1;
  long long v6 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 64);
  int v13 = *(_DWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v7;
  uint64_t KeyPath = swift_getKeyPath();
  long long v9 = v4[1];
  v14[0] = *v4;
  long long v10 = v4[2];
  v14[1] = v9;
  v14[2] = v10;
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v14);
  LODWORD(v4) = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v14);
  swift_release();
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v12, a2, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, a3, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

uint64_t ContentTransitionEffect.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v4 = *(unsigned int *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 14);
  char v6 = *(unsigned char *)(v1 + 15);
  uint64_t v7 = *(void *)(v1 + 16);
  int v8 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v9 = *(unsigned char *)(v1 + 13);
  *(unsigned char *)(a1 + 13) = v9;
  *(unsigned char *)(a1 + 14) = v5;
  *(unsigned char *)(a1 + 15) = v6;
  *(void *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v8;
  outlined copy of ContentTransition.Storage(v2, v4 | (v3 << 32), v9);

  return swift_retain();
}

uint64_t ContentTransitionEffect.state.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 14);
  char v6 = *((unsigned char *)a1 + 15);
  uint64_t v7 = a1[2];
  int v8 = *((_DWORD *)a1 + 6);
  outlined consume of ContentTransition.Storage(*(void *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32), *(unsigned char *)(v1 + 13));
  uint64_t result = swift_release();
  *(void *)uint64_t v1 = v2;
  *(_DWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 12) = v3;
  *(unsigned char *)(v1 + 14) = v5;
  *(unsigned char *)(v1 + 15) = v6;
  *(void *)(v1 + 16) = v7;
  *(_DWORD *)(v1 + 24) = v8;
  return result;
}

uint64_t (*ContentTransitionEffect.state.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ContentTransitionEffect.effectValue(size:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v5 = *(unsigned int *)(v1 + 8);
  char v6 = *(unsigned char *)(v1 + 14);
  char v7 = *(unsigned char *)(v1 + 15);
  uint64_t v8 = *(void *)(v1 + 16);
  int v9 = *(_DWORD *)(v1 + 24);
  char v10 = *(unsigned char *)(v1 + 13);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 28) = v4;
  *(_DWORD *)(v11 + 24) = v5;
  *(unsigned char *)(v11 + 29) = v10;
  *(unsigned char *)(v11 + 30) = v6;
  *(unsigned char *)(v11 + 31) = v7;
  *(void *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v9;
  *(void *)a1 = v11;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 11;
  outlined copy of ContentTransition.Storage(v3, v5 | (v4 << 32), v10);

  return swift_retain();
}

uint64_t ContentTransitionEffect.Init.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 20);
  uint64_t v5 = *(unsigned int *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + 21);
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *Value;
  uint64_t v44 = v5;
  uint64_t v45 = v4;
  if (Value[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)&v47);
    swift_release_n();
    swift_release_n();
    uint64_t v9 = v47;
    unint64_t v10 = v48 | ((unint64_t)v49 << 32);
    int v11 = HIBYTE(v49);
  }
  else
  {
    uint64_t v12 = swift_retain_n();
    uint64_t v13 = specialized find<A>(_:key:)(v12);
    uint64_t v43 = v3;
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 72);
      unint64_t v10 = *(unsigned int *)(v13 + 80) | ((unint64_t)*(unsigned __int8 *)(v13 + 84) << 32);
      int v11 = *(unsigned __int8 *)(v13 + 85);
      char v42 = *(unsigned char *)(v13 + 86);
      unsigned __int8 v15 = *(unsigned char *)(v13 + 87);
      uint64_t v16 = *(void *)(v13 + 88);
      int v17 = *(_DWORD *)(v13 + 96);
      outlined copy of ContentTransition.Storage(v14, v10, v11);
      swift_retain();
      unsigned __int8 v18 = v15;
      uint64_t v9 = v14;
      char v19 = v42;
    }
    else
    {
      int v11 = 0;
      char v19 = 0;
      unsigned __int8 v18 = 0;
      uint64_t v16 = 0;
      int v17 = 0;
      unint64_t v10 = 0x302000000;
      uint64_t v9 = 0x8000000000;
    }
    unsigned int v48 = v10;
    LOBYTE(v49) = BYTE4(v10);
    HIBYTE(v49) = v11;
    char v50 = v19;
    unsigned __int8 v51 = v18;
    uint64_t v52 = v16;
    int v53 = v17;
    swift_release_n();
    uint64_t v3 = v43;
  }
  int v20 = BYTE3(v10);
  unsigned int v21 = BYTE4(v10);
  if (v11)
  {
    LODWORD(v22) = v10;
    int v6 = v11;
  }
  else if ((v9 & 0x8000000000) == 0 || v9 ^ 0x8000000000 | v10 & 0xFFFFFF)
  {
    int v6 = 0;
    LODWORD(v22) = v10;
  }
  else
  {
    uint64_t v22 = v44 | (v45 << 32);
    unsigned int v48 = v44;
    LOBYTE(v49) = BYTE4(v22);
    HIBYTE(v49) = v6;
    char v50 = 1;
    outlined copy of ContentTransition.Storage(v3, v22, v6);
    int v20 = BYTE3(v44);
    unsigned int v21 = BYTE4(v22);
    uint64_t v9 = v3;
    LODWORD(v10) = v44;
  }
  unsigned int v23 = v51;
  unint64_t v24 = (uint64_t *)AGGraphGetValue();
  uint64_t v25 = *v24;
  if (v24[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v25, &v46);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v27 = v46;
    if (v6) {
      goto LABEL_15;
    }
LABEL_27:
    if (v21 == 3) {
      uint64_t v34 = v23;
    }
    else {
      uint64_t v34 = v21;
    }
    if (v20 == 2) {
      char v35 = v27;
    }
    else {
      char v35 = v20;
    }
    BOOL v29 = (v35 & 1) == 0;
    uint64_t v36 = 0x1000000;
    if (v29) {
      uint64_t v36 = 0;
    }
    unint64_t v31 = v36 & 0xFFFFFFFFFF000000 | v10 & 0xFFFFFF | (v34 << 32);
    goto LABEL_37;
  }
  uint64_t v32 = swift_retain_n();
  uint64_t v33 = specialized find<A>(_:key:)(v32);
  if (v33) {
    char v27 = *(unsigned char *)(v33 + 72);
  }
  else {
    char v27 = 0;
  }
  uint64_t result = swift_release_n();
  if (!v6) {
    goto LABEL_27;
  }
LABEL_15:
  if (v6 == 1)
  {
    if (v21 == 2) {
      char v28 = v27;
    }
    else {
      char v28 = v21;
    }
    BOOL v29 = (v28 & 1) == 0;
    uint64_t v30 = 0x100000000;
    if (v29) {
      uint64_t v30 = 0;
    }
    unint64_t v31 = v30 | v22;
LABEL_37:
    unsigned int v48 = v31;
    LOBYTE(v49) = BYTE4(v31);
    HIBYTE(v49) = v6;
  }
  int v37 = v53 | 8;
  unsigned int v38 = v48;
  __int16 v39 = v49;
  char v40 = v50;
  uint64_t v41 = v52;
  *(void *)a1 = v9;
  *(_WORD *)(a1 + 12) = v39;
  *(_DWORD *)(a1 + 8) = v38;
  *(unsigned char *)(a1 + 14) = v40;
  *(unsigned char *)(a1 + 15) = v23;
  *(void *)(a1 + 16) = v41;
  *(_DWORD *)(a1 + 24) = v37;
  return result;
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance ContentTransitionEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v5 = *(unsigned int *)(v1 + 8);
  char v6 = *(unsigned char *)(v1 + 14);
  char v7 = *(unsigned char *)(v1 + 15);
  uint64_t v8 = *(void *)(v1 + 16);
  int v9 = *(_DWORD *)(v1 + 24);
  char v10 = *(unsigned char *)(v1 + 13);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 28) = v4;
  *(_DWORD *)(v11 + 24) = v5;
  *(unsigned char *)(v11 + 29) = v10;
  *(unsigned char *)(v11 + 30) = v6;
  *(unsigned char *)(v11 + 31) = v7;
  *(void *)(v11 + 32) = v8;
  *(_DWORD *)(v11 + 40) = v9;
  *(void *)a1 = v11;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 11;
  outlined copy of ContentTransition.Storage(v3, v5 | (v4 << 32), v10);

  return swift_retain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentTransitionEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  unsigned int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<ContentTransitionEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<ContentTransitionEffect> and conformance RendererEffectDisplayList<A>);
}

void ContentTransition.encode(to:)()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v3 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  char v4 = *(unsigned char *)(v0 + 14);
  if (*(unsigned char *)(v0 + 13))
  {
    if (*(unsigned char *)(v0 + 13) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(v2, v3, 1);
      if (v1) {
        return;
      }
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v2 & 0x1FFFFFFFFLL, *(float *)&v3);
      if (v1) {
        return;
      }
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v1) {
      return;
    }
  }
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t ContentTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v4 = (void *)result;
  uint64_t v5 = 0x302000000;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  if (v6 >= v7) {
    goto LABEL_75;
  }
  BOOL v50 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0x8000000000;
  while (2)
  {
    uint64_t result = v4[3];
    if (!result) {
      goto LABEL_9;
    }
    unint64_t v10 = v4[4];
    if (v6 >= v10)
    {
      if (v10 < v6) {
        goto LABEL_77;
      }
      v4[3] = 0;
LABEL_9:
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v3) {
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      }
      if (result <= 7)
      {
LABEL_77:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      }
    }
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v11 = v9;
        uint64_t v12 = (void *)v4[5];
        uint64_t v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        uint64_t v2 = v12[2];
        unint64_t v13 = v12[3];
        uint64_t v8 = v2 + 1;
        if (v2 >= v13 >> 1) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v2 + 1, 1, v12);
        }
        v12[2] = v8;
        v12[v2 + 4] = v7;
        v4[5] = v12;
        uint64_t v14 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_78;
        }
        if (v14 < 0)
        {
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          __break(1u);
          char v42 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v2);
          uint64_t v43 = v42[2];
          if (v43) {
            goto LABEL_87;
          }
          __break(1u);
          char v42 = (void *)v4[5];
          if (v42[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v43 = v42[2];
              if (!v43) {
                goto LABEL_84;
              }
LABEL_87:
              uint64_t v44 = v43 - 1;
              uint64_t v45 = v42[v44 + 4];
              v42[2] = v44;
              v4[5] = v42;
              _OWORD v4[2] = v45;
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            }
          }
          else
          {
            __break(1u);
          }
          char v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          uint64_t v43 = v42[2];
          if (v43) {
            goto LABEL_87;
          }
LABEL_84:
          __break(1u);
          char v42 = (void *)v4[5];
          if (v42[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v43 = v42[2];
              if (v43) {
                goto LABEL_87;
              }
LABEL_105:
              __break(1u);
              JUMPOUT(0x246075BF4);
            }
          }
          else
          {
            __break(1u);
          }
          char v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          uint64_t v43 = v42[2];
          if (v43) {
            goto LABEL_87;
          }
          goto LABEL_105;
        }
        LOBYTE(v8) = v9;
        unint64_t v15 = v4[1] + v14;
        if (v7 < v15) {
          goto LABEL_79;
        }
        _OWORD v4[2] = v15;
        ContentTransition.NamedTransition.init(from:)((unint64_t)v4, (uint64_t)&v47);
        uint64_t v9 = v11;
        uint64_t v16 = (void *)v4[5];
        if (!v16[2]) {
          goto LABEL_92;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v17 = v16[2];
          if (!v17) {
            goto LABEL_95;
          }
        }
        else
        {
          uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
          uint64_t v17 = v16[2];
          if (!v17) {
            goto LABEL_95;
          }
        }
        uint64_t v18 = v17 - 1;
        uint64_t v19 = v16[v18 + 4];
        _OWORD v16[2] = v18;
        v4[5] = v16;
        _OWORD v4[2] = v19;
        uint64_t v2 = (uint64_t)v47;
        unint64_t v20 = v48 | ((unint64_t)v49 << 32);
        uint64_t result = outlined consume of ContentTransition.Storage(v11, v5, v8);
        uint64_t v8 = 0;
LABEL_3:
        uint64_t v5 = v20;
        uint64_t v9 = v2;
LABEL_4:
        unint64_t v6 = v4[1];
        unint64_t v7 = v4[2];
        if (v6 >= v7) {
          goto LABEL_76;
        }
        continue;
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v11 = v9;
        unsigned int v21 = (void *)v4[5];
        uint64_t v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        uint64_t v2 = v21[2];
        unint64_t v22 = v21[3];
        uint64_t v8 = v2 + 1;
        if (v2 >= v22 >> 1) {
          unsigned int v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v2 + 1, 1, v21);
        }
        v21[2] = v8;
        v21[v2 + 4] = v7;
        v4[5] = v21;
        uint64_t v23 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_78;
        }
        if (v23 < 0) {
          goto LABEL_90;
        }
        LOBYTE(v8) = v9;
        unint64_t v24 = v4[1] + v23;
        if (v7 < v24) {
          goto LABEL_79;
        }
        _OWORD v4[2] = v24;
        ContentTransition.CustomTransition.init(from:)((unint64_t)v4, (uint64_t)&v47);
        uint64_t v9 = v11;
        uint64_t v25 = (void *)v4[5];
        if (!v25[2]) {
          goto LABEL_93;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v26 = v25[2];
          if (!v26) {
            goto LABEL_96;
          }
        }
        else
        {
          uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          uint64_t v26 = v25[2];
          if (!v26) {
            goto LABEL_96;
          }
        }
        uint64_t v27 = v26 - 1;
        uint64_t v28 = v25[v27 + 4];
        v25[2] = v27;
        v4[5] = v25;
        _OWORD v4[2] = v28;
        uint64_t v2 = (uint64_t)v47;
        unint64_t v20 = v48 | ((unint64_t)v49 << 32);
        uint64_t result = outlined consume of ContentTransition.Storage(v11, v5, v8);
        uint64_t v8 = 1;
        goto LABEL_3;
      case 3uLL:
        if ((result & 7) == 0) {
          goto LABEL_45;
        }
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of ContentTransition.Storage(v9, v5, v8);
        }
        if (v29 < 0) {
          goto LABEL_97;
        }
        unint64_t v30 = v4[1] + v29;
        if (v7 < v30) {
          goto LABEL_77;
        }
        v4[3] = 24;
        v4[4] = v30;
LABEL_45:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return outlined consume of ContentTransition.Storage(v9, v5, v8);
        }
        BOOL v50 = result != 0;
        goto LABEL_4;
      case 4uLL:
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        uint64_t v11 = v9;
        unint64_t v31 = (void *)v4[5];
        uint64_t v9 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        }
        uint64_t v2 = v31[2];
        unint64_t v32 = v31[3];
        uint64_t v8 = v2 + 1;
        if (v2 >= v32 >> 1) {
          unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v2 + 1, 1, v31);
        }
        v31[2] = v8;
        v31[v2 + 4] = v7;
        v4[5] = v31;
        uint64_t v33 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_78:
          LOBYTE(v8) = v9;
          goto LABEL_80;
        }
        if (v33 < 0) {
          goto LABEL_91;
        }
        LOBYTE(v8) = v9;
        unint64_t v34 = v4[1] + v33;
        if (v7 >= v34)
        {
          _OWORD v4[2] = v34;
          _SymbolEffect.ReplaceConfiguration.init(from:)((unint64_t)v4, (uint64_t)&v47);
          uint64_t v9 = v11;
          char v35 = (void *)v4[5];
          if (!v35[2]) {
            goto LABEL_94;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v36 = v35[2];
            if (!v36) {
              goto LABEL_74;
            }
            goto LABEL_58;
          }
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          char v35 = (void *)result;
          uint64_t v36 = *(void *)(result + 16);
          if (v36)
          {
LABEL_58:
            uint64_t v37 = v36 - 1;
            uint64_t v38 = v35[v37 + 4];
            v35[2] = v37;
            v4[5] = v35;
            _OWORD v4[2] = v38;
            uint64_t v2 = v48;
            uint64_t v39 = 0x100000000;
            if (!BYTE4(v47)) {
              uint64_t v39 = 0;
            }
            uint64_t v40 = v39 | v47;
            uint64_t result = outlined consume of ContentTransition.Storage(v11, v5, v8);
            uint64_t v8 = 2;
            uint64_t v5 = v2;
            uint64_t v9 = v40;
            goto LABEL_4;
          }
LABEL_74:
          __break(1u);
LABEL_75:
          BOOL v50 = 0;
          LOBYTE(v8) = 0;
          uint64_t v9 = 0x8000000000;
LABEL_76:
          v4[3] = 0;
          *(void *)a2 = v9;
          *(_DWORD *)(a2 + 8) = v5;
          *(unsigned char *)(a2 + 12) = BYTE4(v5);
          *(unsigned char *)(a2 + 13) = v8;
          *(unsigned char *)(a2 + 14) = v50;
          return result;
        }
LABEL_79:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_80:
        uint64_t v9 = v11;
        return outlined consume of ContentTransition.Storage(v9, v5, v8);
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            }
            goto LABEL_4;
          case 1uLL:
            unint64_t v41 = v4[1] + 8;
            if (v7 < v41) {
              goto LABEL_77;
            }
            goto LABEL_68;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return outlined consume of ContentTransition.Storage(v9, v5, v8);
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_98;
            }
            unint64_t v41 = v4[1] + result;
            if (v7 < v41) {
              goto LABEL_77;
            }
LABEL_68:
            v4[1] = v41;
            break;
          case 5uLL:
            unint64_t v41 = v4[1] + 4;
            if (v7 >= v41) {
              goto LABEL_68;
            }
            goto LABEL_77;
          default:
            goto LABEL_77;
        }
        goto LABEL_4;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v3 = *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
  int v4 = *(unsigned __int8 *)(v0 + 14);
  if (*(unsigned char *)(v0 + 13))
  {
    if (*(unsigned char *)(v0 + 13) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(v2, v3, 1);
      if (v1) {
        return;
      }
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v2 & 0x1FFFFFFFFLL, *(float *)&v3);
      if (v1) {
        return;
      }
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v1) {
      return;
    }
  }
  if (v4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.init(from:)(a1, a2);
}

void ContentTransition.State.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)v3;
  unint64_t v6 = *(unsigned int *)(v3 + 8) | ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 13);
  int v8 = *(unsigned __int8 *)(v3 + 14);
  int v29 = *(unsigned __int8 *)(v3 + 15);
  uint64_t v9 = *(void *)(v3 + 16);
  Swift::UInt v10 = *(unsigned int *)(v3 + 24);
  if (v7)
  {
    if (v7 == 1)
    {
      outlined copy of ContentTransition.Storage(v5, v6, 1);
      swift_bridgeObjectRetain();
    }
    outlined consume of ContentTransition.Storage(v5, v6, v7);
    outlined consume of ContentTransition.Storage(0x8000000000, 0x302000000, 0);
  }
  else
  {
    uint64_t v24 = v5;
    __int16 v25 = v6;
    char v26 = BYTE2(v6);
    char v27 = BYTE3(v6);
    char v28 = BYTE4(v6);
    uint64_t v20 = 0x8000000000;
    char v22 = 0;
    __int16 v21 = 0;
    __int16 v23 = 770;
    uint64_t v11 = v9;
    Swift::UInt v12 = v10;
    char v13 = specialized static ContentTransition.NamedTransition.== infix(_:_:)(&v24, &v20);
    outlined consume of ContentTransition.Storage(v5, v6, 0);
    outlined consume of ContentTransition.Storage(0x8000000000, 0x302000000, 0);
    char v14 = v8 | ~v13;
    Swift::UInt v10 = v12;
    uint64_t v9 = v11;
    if ((v14 & 1) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_11;
    }
  }
  uint64_t v15 = 0x1000000000000;
  if (!v8) {
    uint64_t v15 = 0;
  }
  specialized ProtobufEncoder.messageField<A>(_:_:)(1, v5, v6 & 0xFFFFFFFFFFLL | (v7 << 40) | v15);
  if (v2)
  {
    outlined consume of ContentTransition.Storage(v5, v6, v7);
    return;
  }
LABEL_11:
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  if (!v29 || (specialized ProtobufEncoder.messageField<A>(_:_:)(2), !v2))
  {
    if (v9)
    {
      swift_retain();
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = *(void **)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1) {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
      }
      v17[2] = v19 + 1;
      v17[v19 + 4] = v16;
      *(void *)(a1 + 24) = v17;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        return;
      }
      *(void *)(a1 + 8) = v16 + 1;
      CodableAnimation.encode(to:)(a1, v9);
      if (v2)
      {
        swift_release();
        return;
      }
      ProtobufEncoder.endLengthDelimited()();
      swift_release();
    }
    if (v10)
    {
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v10);
    }
  }
}

unint64_t ContentTransition.State.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v59 = 0x302000000;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    LOBYTE(v7) = 0;
    LODWORD(v8) = 0;
    uint64_t v65 = 0;
    LOBYTE(v9) = 0;
    char v58 = 0;
    uint64_t v57 = 0x8000000000;
LABEL_4:
    v3[3] = 0;
    *(void *)a2 = v57;
    *(_DWORD *)(a2 + 8) = v59;
    *(unsigned char *)(a2 + 12) = BYTE4(v59);
    *(unsigned char *)(a2 + 13) = v58;
    *(unsigned char *)(a2 + 14) = v7 & 1;
    *(unsigned char *)(a2 + 15) = v9;
    *(void *)(a2 + 16) = v65;
    *(_DWORD *)(a2 + 24) = v8;
    return result;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v65 = 0;
  unint64_t v9 = 0;
  char v58 = 0;
  uint64_t v57 = 0x8000000000;
  while (2)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v5 < v11) {
        goto LABEL_14;
      }
      if (v11 < v5) {
        goto LABEL_74;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_75;
    }
    if (result <= 7) {
      goto LABEL_74;
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        Swift::UInt v12 = (void *)v3[5];
        char v13 = (void *)v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::UInt v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v15 = v12[2];
        unint64_t v14 = v12[3];
        unint64_t v9 = v15 + 1;
        if (v15 >= v14 >> 1) {
          Swift::UInt v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
        }
        v12[2] = v9;
        v12[v15 + 4] = v6;
        v3[5] = v12;
        uint64_t v16 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        if (v16 < 0)
        {
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
        }
        else
        {
          unint64_t v17 = v3[1] + v16;
          if (v6 < v17) {
            goto LABEL_74;
          }
          void v3[2] = v17;
          ContentTransition.init(from:)((unint64_t)v3, (uint64_t)&v60);
          unint64_t v9 = v3[5];
          if (*(void *)(v9 + 16))
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v18 = *(void *)(v9 + 16);
              if (!v18) {
                goto LABEL_87;
              }
              goto LABEL_26;
            }
            unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
            uint64_t v18 = *(void *)(v9 + 16);
            if (v18)
            {
LABEL_26:
              uint64_t v19 = v18 - 1;
              uint64_t v20 = *(void *)(v9 + 8 * v19 + 32);
              *(void *)(v9 + 16) = v19;
              v3[5] = v9;
              void v3[2] = v20;
              uint64_t v21 = v60;
              unint64_t v22 = v61 | ((unint64_t)v62 << 32);
              char v23 = v63;
              unint64_t v24 = v8;
              uint64_t v25 = v64;
              uint64_t result = outlined consume of ContentTransition.Storage(v57, v59, v58);
              char v58 = v23;
              uint64_t v59 = v22;
              uint64_t v57 = v21;
              unint64_t v9 = (unint64_t)v13;
              uint64_t v7 = v25;
              unint64_t v8 = v24;
              goto LABEL_7;
            }
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
            __break(1u);
            unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
            uint64_t v49 = v48[2];
            if (v49) {
              goto LABEL_79;
            }
            __break(1u);
            unsigned int v48 = (void *)v3[5];
            if (v48[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v49 = v48[2];
                if (v49)
                {
LABEL_79:
                  uint64_t v50 = v49 - 1;
                  uint64_t v51 = v48[v50 + 4];
                  v48[2] = v50;
                  v3[5] = v48;
                  void v3[2] = v51;
                  goto LABEL_75;
                }
LABEL_94:
                __break(1u);
                __break(1u);
                id v54 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
                uint64_t v55 = v54[2];
                if (!v55)
                {
                  __break(1u);
                  JUMPOUT(0x246076708);
                }
                uint64_t v52 = v55 - 1;
                uint64_t v53 = v54[v52 + 4];
                v54[2] = v52;
                v3[5] = v54;
                void v3[2] = v53;
                goto LABEL_75;
              }
            }
            else
            {
              __break(1u);
            }
            unsigned int v48 = specialized _ArrayBuffer._consumeAndCreateNew()(v48);
            uint64_t v49 = v48[2];
            if (v49) {
              goto LABEL_79;
            }
            goto LABEL_94;
          }
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        char v26 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        unint64_t v9 = v28 + 1;
        if (v28 >= v27 >> 1) {
          char v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
        }
        void v26[2] = v9;
        v26[v28 + 4] = v6;
        v3[5] = v26;
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        if (v29 < 0) {
          goto LABEL_82;
        }
        unint64_t v30 = v3[1] + v29;
        if (v6 < v30) {
          goto LABEL_74;
        }
        void v3[2] = v30;
        ContentTransition.Style.init(from:)((unint64_t)v3, (char *)&v60);
        unint64_t v9 = v3[5];
        if (!*(void *)(v9 + 16)) {
          goto LABEL_85;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v31 = *(void *)(v9 + 16);
          if (!v31) {
            goto LABEL_88;
          }
        }
        else
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
          unint64_t v9 = result;
          uint64_t v31 = *(void *)(result + 16);
          if (!v31) {
            goto LABEL_88;
          }
        }
        uint64_t v32 = v31 - 1;
        uint64_t v33 = *(void *)(v9 + 8 * v32 + 32);
        *(void *)(v9 + 16) = v32;
        v3[5] = v9;
        void v3[2] = v33;
        unint64_t v9 = v60;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        unint64_t v56 = v8;
        uint64_t v34 = v7;
        char v35 = (void *)v3[5];
        uint64_t v36 = (void *)v9;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
        }
        unint64_t v38 = v35[2];
        unint64_t v37 = v35[3];
        unint64_t v9 = v38 + 1;
        if (v38 >= v37 >> 1) {
          char v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v35);
        }
        v35[2] = v9;
        v35[v38 + 4] = v6;
        v3[5] = v35;
        uint64_t v39 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        if (v39 < 0) {
          goto LABEL_83;
        }
        unint64_t v40 = v3[1] + v39;
        if (v6 < v40) {
          goto LABEL_74;
        }
        void v3[2] = v40;
        uint64_t v41 = specialized CodableAnimation.init(from:)(v3);
        unint64_t v9 = v3[5];
        if (!*(void *)(v9 + 16)) {
          goto LABEL_86;
        }
        uint64_t v42 = v41;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v43 = *(void *)(v9 + 16);
          if (!v43) {
            goto LABEL_73;
          }
          goto LABEL_53;
        }
        unint64_t v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
        uint64_t v43 = *(void *)(v9 + 16);
        if (v43)
        {
LABEL_53:
          uint64_t v44 = v43 - 1;
          uint64_t v45 = *(void *)(v9 + 8 * v44 + 32);
          *(void *)(v9 + 16) = v44;
          v3[5] = v9;
          void v3[2] = v45;
          uint64_t result = swift_release();
          uint64_t v65 = v42;
          unint64_t v9 = (unint64_t)v36;
          uint64_t v7 = v34;
          unint64_t v8 = v56;
LABEL_7:
          unint64_t v5 = v3[1];
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
LABEL_73:
        __break(1u);
LABEL_74:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_75:
        outlined consume of ContentTransition.Storage(v57, v59, v58);
        return swift_release();
      case 4uLL:
        if ((result & 7) == 0) {
          goto LABEL_60;
        }
        if ((result & 7) != 2) {
          goto LABEL_74;
        }
        uint64_t v46 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        if (v46 < 0) {
          goto LABEL_89;
        }
        unint64_t v47 = v3[1] + v46;
        if (v6 < v47) {
          goto LABEL_74;
        }
        v3[3] = 32;
        v3[4] = v47;
LABEL_60:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        unint64_t v8 = result;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_75;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 < v10) {
              goto LABEL_74;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_75;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_90;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_74;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_74;
            }
            goto LABEL_6;
          default:
            goto LABEL_74;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.State(uint64_t a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.State@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.State.init(from:)(a1, a2);
}

uint64_t ContentTransition.Style.encode(to:)(uint64_t result)
{
  int v2 = *v1;
  if (*v1)
  {
    uint64_t v3 = result;
    if (v2 == 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      uint64_t v4 = *(void *)(v3 + 8);
      unint64_t v5 = *(void **)(v3 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v7 = v5[2];
      unint64_t v6 = v5[3];
      if (v7 >= v6 >> 1) {
        unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
      }
      Swift::UInt v5[2] = v7 + 1;
      v5[v7 + 4] = v4;
      *(void *)(v3 + 24) = v5;
      uint64_t v8 = v4 + 1;
      if (!__OFADD__(v4, 1))
      {
LABEL_15:
        *(void *)(v3 + 8) = v8;
        return ProtobufEncoder.endLengthDelimited()();
      }
      __break(1u);
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v9 = *(void *)(v3 + 8);
    unint64_t v10 = *(void **)(v3 + 24);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      unint64_t v10 = (void *)result;
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
      unint64_t v10 = (void *)result;
    }
    void v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(void *)(v3 + 24) = v10;
    uint64_t v8 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      return result;
    }
    goto LABEL_15;
  }
  return result;
}

unint64_t ContentTransition.Style.init(from:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    char v7 = 0;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v9 = v3[4];
        if (v5 < v9) {
          goto LABEL_15;
        }
        if (v9 < v5) {
          goto LABEL_46;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_46:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_15:
      if (result >> 3 == 2)
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            char v7 = 2;
            goto LABEL_8;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            if (v6 >= v8) {
              goto LABEL_6;
            }
            goto LABEL_46;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_49;
            }
            unint64_t v8 = v3[1] + result;
            if (v6 < v8) {
              goto LABEL_46;
            }
LABEL_6:
            char v7 = 2;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            if (v6 < v8) {
              goto LABEL_46;
            }
            goto LABEL_6;
          default:
            goto LABEL_46;
        }
      }
      else
      {
        if (result >> 3 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              goto LABEL_8;
            case 1uLL:
              unint64_t v8 = v3[1] + 8;
              if (v6 < v8) {
                goto LABEL_46;
              }
              goto LABEL_7;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_50;
              }
              unint64_t v8 = v3[1] + result;
              if (v6 < v8) {
                goto LABEL_46;
              }
              goto LABEL_7;
            case 5uLL:
              unint64_t v8 = v3[1] + 4;
              if (v6 < v8) {
                goto LABEL_46;
              }
              goto LABEL_7;
            default:
              goto LABEL_46;
          }
        }
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            char v7 = 1;
            goto LABEL_8;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            goto LABEL_31;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
              JUMPOUT(0x246076B54);
            }
            unint64_t v8 = v3[1] + result;
LABEL_31:
            if (v6 < v8) {
              goto LABEL_46;
            }
            char v7 = 1;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            goto LABEL_31;
          default:
            goto LABEL_46;
        }
      }
LABEL_7:
      v3[1] = v8;
LABEL_8:
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  char v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.Style(uint64_t a1)
{
  return ContentTransition.Style.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.Style@<X0>(unint64_t a1@<X0>, char *a2@<X8>)
{
  return ContentTransition.Style.init(from:)(a1, a2);
}

void ContentTransition.NamedTransition.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v3;
  char v6 = *((unsigned char *)v3 + 11);
  int v7 = *((unsigned __int8 *)v3 + 12);
  uint64_t v8 = ((unint64_t)*v3 >> 38) & 3;
  if (v8)
  {
    if (v8 == 1)
    {
      specialized ProtobufEncoder.messageField<A>(_:_:)(6);
      if (v2) {
        return;
      }
    }
    else
    {
      switch(v5)
      {
        case 0x8000000001:
          ProtobufEncoder.encodeVarint(_:)(0xAuLL);
          uint64_t v5 = *(void *)(a1 + 8);
          unint64_t v10 = *(void **)(a1 + 24);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_14;
          }
          goto LABEL_47;
        case 0x8000000002:
          goto LABEL_19;
        case 0x8000000003:
          goto LABEL_26;
        case 0x8000000004:
          goto LABEL_33;
        default:
          break;
      }
    }
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
    uint64_t v9 = *(void *)(a1 + 8);
    unint64_t v10 = *(void **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1) {
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
    }
    void v10[2] = v12 + 1;
    v10[v12 + 4] = v9;
    *(void *)(a1 + 24) = v10;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_47:
      unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
LABEL_14:
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1) {
        unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v10);
      }
      void v10[2] = v14 + 1;
      v10[v14 + 4] = v5;
      *(void *)(a1 + 24) = v10;
      uint64_t v15 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_19:
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        uint64_t v16 = *(void *)(a1 + 8);
        unint64_t v17 = *(void **)(a1 + 24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        v17[2] = v19 + 1;
        v17[v19 + 4] = v16;
        *(void *)(a1 + 24) = v17;
        uint64_t v15 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_26:
          ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
          uint64_t v20 = *(void *)(a1 + 8);
          uint64_t v21 = *(void **)(a1 + 24);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
          }
          unint64_t v23 = v21[2];
          unint64_t v22 = v21[3];
          if (v23 >= v22 >> 1) {
            uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
          }
          v21[2] = v23 + 1;
          v21[v23 + 4] = v20;
          *(void *)(a1 + 24) = v21;
          uint64_t v15 = v20 + 1;
          if (__OFADD__(v20, 1))
          {
            __break(1u);
LABEL_33:
            ProtobufEncoder.encodeVarint(_:)(0x22uLL);
            uint64_t v24 = *(void *)(a1 + 8);
            uint64_t v25 = *(void **)(a1 + 24);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            }
            unint64_t v27 = v25[2];
            unint64_t v26 = v25[3];
            if (v27 >= v26 >> 1) {
              uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
            }
            v25[2] = v27 + 1;
            v25[v27 + 4] = v24;
            *(void *)(a1 + 24) = v25;
            uint64_t v15 = v24 + 1;
            if (__OFADD__(v24, 1))
            {
              __break(1u);
              JUMPOUT(0x246076F90);
            }
          }
        }
      }
      *(void *)(a1 + 8) = v15;
    }
    else
    {
      *(void *)(a1 + 8) = v9 + 1;
      if (v5)
      {
        ProtobufEncoder.encodeVarint(_:)(8uLL);
        ProtobufEncoder.encodeVarint(_:)(1uLL);
      }
    }
    ProtobufEncoder.endLengthDelimited()();
  }
  if (v6)
  {
    ProtobufEncoder.encodeVarint(_:)(0x38uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v7)
  {
    if (v7 != 3) {
      specialized ProtobufEncoder.messageField<A>(_:_:)(8);
    }
  }
}

unint64_t ContentTransition.NamedTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    int v7 = 0;
    unint64_t v8 = 0x8000000000;
    int v53 = 2;
    char v9 = 3;
LABEL_4:
    v3[3] = 0;
    *(void *)a2 = v8;
    *(_WORD *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 10) = BYTE2(v7);
    *(unsigned char *)(a2 + 11) = v53;
    *(unsigned char *)(a2 + 12) = v9;
    return result;
  }
  int v7 = 0;
  unint64_t v8 = 0x8000000000;
  int v53 = 2;
  char v9 = 3;
  while (2)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v5 < v11) {
        goto LABEL_14;
      }
      if (v11 < v5) {
        goto LABEL_120;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_120;
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            int v7 = 0;
            goto LABEL_83;
          case 1uLL:
            unint64_t v38 = v3[1] + 8;
            goto LABEL_81;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_138;
            }
            unint64_t v38 = v3[1] + result;
LABEL_81:
            if (v6 < v38) {
              goto LABEL_120;
            }
            int v7 = 0;
            v3[1] = v38;
LABEL_83:
            unint64_t v8 = 0x8000000001;
            break;
          case 5uLL:
            unint64_t v38 = v3[1] + 4;
            goto LABEL_81;
          default:
            goto LABEL_120;
        }
        goto LABEL_7;
      case 2uLL:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            int v7 = 0;
            goto LABEL_97;
          case 1uLL:
            unint64_t v39 = v3[1] + 8;
            goto LABEL_95;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_140;
            }
            unint64_t v39 = v3[1] + result;
LABEL_95:
            if (v6 < v39) {
              goto LABEL_120;
            }
            int v7 = 0;
            v3[1] = v39;
LABEL_97:
            unint64_t v8 = 0x8000000002;
            break;
          case 5uLL:
            unint64_t v39 = v3[1] + 4;
            goto LABEL_95;
          default:
            goto LABEL_120;
        }
        goto LABEL_7;
      case 3uLL:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            int v7 = 0;
            goto LABEL_105;
          case 1uLL:
            unint64_t v40 = v3[1] + 8;
            goto LABEL_103;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_141;
            }
            unint64_t v40 = v3[1] + result;
LABEL_103:
            if (v6 < v40) {
              goto LABEL_120;
            }
            int v7 = 0;
            v3[1] = v40;
LABEL_105:
            unint64_t v8 = 0x8000000003;
            break;
          case 5uLL:
            unint64_t v40 = v3[1] + 4;
            goto LABEL_103;
          default:
            goto LABEL_120;
        }
        goto LABEL_7;
      case 4uLL:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            int v7 = 0;
            goto LABEL_113;
          case 1uLL:
            unint64_t v41 = v3[1] + 8;
            goto LABEL_111;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
            unint64_t v41 = v3[1] + result;
LABEL_111:
            if (v6 < v41) {
              goto LABEL_120;
            }
            int v7 = 0;
            v3[1] = v41;
LABEL_113:
            unint64_t v8 = 0x8000000004;
            break;
          case 5uLL:
            unint64_t v41 = v3[1] + 4;
            goto LABEL_111;
          default:
            goto LABEL_120;
        }
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) != 2) {
          goto LABEL_120;
        }
        unint64_t v12 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
        }
        v12[2] = v14 + 1;
        v12[v14 + 4] = v6;
        v3[5] = v12;
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) == 0)
        {
          unint64_t v15 = v3[1] + result;
          if (v6 < v15) {
            goto LABEL_120;
          }
          void v3[2] = v15;
          closure #1 in ContentTransition.NamedTransition.init(from:)((unint64_t)v3, &v54);
          uint64_t v16 = (void *)v3[5];
          if (!v16[2]) {
            goto LABEL_132;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v17 = v16[2];
            if (!v17) {
              goto LABEL_135;
            }
          }
          else
          {
            uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            uint64_t v16 = (void *)result;
            uint64_t v17 = *(void *)(result + 16);
            if (!v17) {
              goto LABEL_135;
            }
          }
          int v7 = 0;
          uint64_t v18 = v17 - 1;
          uint64_t v19 = v16[v18 + 4];
          _OWORD v16[2] = v18;
          v3[5] = v16;
          void v3[2] = v19;
          unint64_t v8 = v54;
LABEL_7:
          unint64_t v5 = v3[1];
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
        __break(1u);
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        uint64_t v42 = (void *)result;
        uint64_t v43 = *(void *)(result + 16);
        if (v43) {
          goto LABEL_128;
        }
        __break(1u);
        uint64_t v42 = (void *)v3[5];
        if (!v42[2])
        {
          __break(1u);
LABEL_145:
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          uint64_t v42 = (void *)result;
          uint64_t v43 = *(void *)(result + 16);
          if (v43) {
            goto LABEL_128;
          }
LABEL_125:
          __break(1u);
          uint64_t v42 = (void *)v3[5];
          if (v42[2])
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result)
            {
              uint64_t v43 = v42[2];
              if (v43) {
                goto LABEL_128;
              }
              goto LABEL_149;
            }
          }
          else
          {
            __break(1u);
          }
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v42);
          uint64_t v42 = (void *)result;
          uint64_t v43 = *(void *)(result + 16);
          if (v43) {
            goto LABEL_128;
          }
LABEL_149:
          __break(1u);
          JUMPOUT(0x2460778C4);
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          goto LABEL_145;
        }
        uint64_t v43 = v42[2];
        if (!v43) {
          goto LABEL_125;
        }
LABEL_128:
        uint64_t v44 = v43 - 1;
        uint64_t v45 = v42[v44 + 4];
        v42[2] = v44;
        v3[5] = v42;
        void v3[2] = v45;
        return result;
      case 6uLL:
        if ((result & 7) != 2) {
          goto LABEL_120;
        }
        uint64_t v20 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
        }
        v20[2] = v22 + 1;
        v20[v22 + 4] = v6;
        v3[5] = v20;
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_130;
        }
        unint64_t v23 = v3[1] + result;
        if (v6 < v23) {
          goto LABEL_120;
        }
        void v3[2] = v23;
        ContentTransition.NumericTextConfiguration.init(from:)((unint64_t)v3, (uint64_t)&v46);
        uint64_t v24 = (void *)v3[5];
        if (!v24[2]) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v25 = v24[2];
          if (!v25) {
            goto LABEL_136;
          }
        }
        else
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          uint64_t v24 = (void *)result;
          uint64_t v25 = *(void *)(result + 16);
          if (!v25) {
            goto LABEL_136;
          }
        }
        uint64_t v26 = v25 - 1;
        uint64_t v27 = v24[v26 + 4];
        v24[2] = v26;
        v3[5] = v24;
        void v3[2] = v27;
        uint64_t v28 = 0x100000000;
        if (!v47) {
          uint64_t v28 = 0;
        }
        int v7 = v51 | (v52 << 16);
        unint64_t v8 = v28 | v46 | ((unint64_t)v48 << 40) | ((unint64_t)v49 << 48) | ((unint64_t)v50 << 56) | 0x4000000000;
        goto LABEL_7;
      case 7uLL:
        if ((result & 7) == 0) {
          goto LABEL_62;
        }
        if ((result & 7) != 2) {
          goto LABEL_120;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_137;
        }
        unint64_t v29 = v3[1] + result;
        if (v6 < v29) {
          goto LABEL_120;
        }
        v3[3] = 56;
        v3[4] = v29;
LABEL_62:
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        int v53 = result != 0;
        goto LABEL_7;
      case 8uLL:
        if ((result & 7) != 2) {
          goto LABEL_120;
        }
        unint64_t v30 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
        }
        unint64_t v32 = v30[2];
        unint64_t v31 = v30[3];
        if (v32 >= v31 >> 1) {
          unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
        }
        v30[2] = v32 + 1;
        v30[v32 + 4] = v6;
        v3[5] = v30;
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_131;
        }
        unint64_t v33 = v3[1] + result;
        if (v6 < v33) {
          goto LABEL_120;
        }
        void v3[2] = v33;
        ContentTransition.Style.init(from:)((unint64_t)v3, &v55);
        uint64_t v34 = (void *)v3[5];
        if (!v34[2]) {
          goto LABEL_134;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v35 = v34[2];
          if (!v35) {
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
          uint64_t v34 = (void *)result;
          uint64_t v35 = *(void *)(result + 16);
          if (!v35)
          {
LABEL_119:
            __break(1u);
LABEL_120:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
        }
        uint64_t v36 = v35 - 1;
        uint64_t v37 = v34[v36 + 4];
        v34[2] = v36;
        v3[5] = v34;
        void v3[2] = v37;
        char v9 = v55;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v10 = v3[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_120;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_139;
            }
            unint64_t v10 = v3[1] + result;
            if (v6 < v10) {
              goto LABEL_120;
            }
LABEL_6:
            v3[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = v3[1] + 4;
            if (v6 < v10) {
              goto LABEL_120;
            }
            goto LABEL_6;
          default:
            goto LABEL_120;
        }
        goto LABEL_7;
    }
  }
}

unint64_t closure #1 in ContentTransition.NamedTransition.init(from:)@<X0>(unint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    BOOL v7 = 0;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v9 = v3[4];
        if (v5 < v9) {
          goto LABEL_14;
        }
        if (v9 < v5) {
          goto LABEL_31;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_31;
      }
LABEL_14:
      if ((result & 0xFFFFFFFFFFFFFFF8) == 8)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_31;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
            JUMPOUT(0x246077B20);
          }
          unint64_t v10 = v3[1] + result;
          if (v6 < v10)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v10;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v7 = result != 0;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            if (v6 >= v8) {
              goto LABEL_6;
            }
            goto LABEL_31;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_34;
            }
            unint64_t v8 = v3[1] + result;
            if (v6 < v8) {
              goto LABEL_31;
            }
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            if (v6 < v8) {
              goto LABEL_31;
            }
            goto LABEL_6;
          default:
            goto LABEL_31;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  BOOL v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.NamedTransition(uint64_t a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.NamedTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.NamedTransition.init(from:)(a1, a2);
}

void ContentTransition.NumericTextConfiguration.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  int v4 = *v2;
  int v5 = *((unsigned __int8 *)v2 + 5);
  char v6 = *((unsigned char *)v2 + 6);
  unsigned int v7 = *((unsigned __int8 *)v2 + 7);
  unsigned int v8 = *((unsigned __int8 *)v2 + 8);
  unsigned int v9 = *((unsigned __int8 *)v2 + 9);
  char v10 = *((unsigned char *)v2 + 10);
  if (v2[1])
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v11 = a1[1];
    int64_t v12 = v11 + 4;
    if (__OFADD__(v11, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v12)
    {
      a1[1] = v12;
      unint64_t v13 = (_DWORD *)(*a1 + v11);
      goto LABEL_5;
    }
    unint64_t v13 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v12);
LABEL_5:
    *unint64_t v13 = v4;
    if (v5 != 2) {
      goto LABEL_6;
    }
LABEL_12:
    if ((v6 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v4)
  {
    if (v5 == 2) {
      goto LABEL_12;
    }
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
    if (v5 == 2) {
      goto LABEL_12;
    }
  }
LABEL_6:
  ProtobufEncoder.encodeVarint(_:)(0x18uLL);
  ProtobufEncoder.encodeVarint(_:)(v5 & 1);
  if (v6)
  {
LABEL_13:
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
LABEL_14:
  float v14 = (float)v7 * 0.0083333;
  if (v14 == 0.15) {
    goto LABEL_18;
  }
  ProtobufEncoder.encodeVarint(_:)(0x2DuLL);
  uint64_t v15 = a1[1];
  int64_t v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v16)
  {
    a1[1] = v16;
    *(float *)(*a1 + v15) = v14;
    goto LABEL_18;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v14;
LABEL_18:
  float v17 = (float)v8 * 0.0078125;
  if (v17 != 0.39844)
  {
    ProtobufEncoder.encodeVarint(_:)(0x35uLL);
    uint64_t v23 = a1[1];
    int64_t v24 = v23 + 4;
    if (__OFADD__(v23, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v24)
    {
      a1[1] = v24;
      *(float *)(*a1 + v23) = v17;
      float v18 = (float)v9;
      if ((v6 & 2) == 0) {
        goto LABEL_20;
      }
      goto LABEL_28;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v24) = v17;
    float v18 = (float)v9;
    if ((v6 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_28;
  }
  float v18 = (float)v9;
  if ((v6 & 2) == 0)
  {
LABEL_20:
    float v19 = v18 * 0.25;
    if ((float)(v18 * 0.25) == 0.0) {
      goto LABEL_32;
    }
    ProtobufEncoder.encodeVarint(_:)(0x3DuLL);
    uint64_t v20 = a1[1];
    int64_t v21 = v20 + 4;
    if (!__OFADD__(v20, 4))
    {
      if (a1[2] >= v21)
      {
        a1[1] = v21;
        unint64_t v22 = (float *)(*a1 + v20);
LABEL_24:
        *unint64_t v22 = v19;
        goto LABEL_32;
      }
LABEL_44:
      unint64_t v22 = (float *)ProtobufEncoder.growBufferSlow(to:)(v21);
      goto LABEL_24;
    }
    __break(1u);
LABEL_48:
    __break(1u);
    return;
  }
LABEL_28:
  float v19 = v18 * 0.0078125;
  if ((float)(v18 * 0.0078125) != 0.25)
  {
    ProtobufEncoder.encodeVarint(_:)(0x3DuLL);
    uint64_t v25 = a1[1];
    int64_t v21 = v25 + 4;
    if (__OFADD__(v25, 4)) {
      goto LABEL_48;
    }
    if (a1[2] < v21) {
      goto LABEL_44;
    }
    a1[1] = v21;
    *(float *)(*a1 + v25) = v19;
  }
LABEL_32:
  float v26 = (float)v10 * 0.03125;
  if (v26 == 0.59375) {
    return;
  }
  ProtobufEncoder.encodeVarint(_:)(0x45uLL);
  uint64_t v27 = a1[1];
  int64_t v28 = v27 + 4;
  if (__OFADD__(v27, 4))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (a1[2] < v28)
  {
LABEL_46:
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v28) = v26;
    return;
  }
  a1[1] = v28;
  *(float *)(*a1 + v27) = v26;
}

unint64_t ContentTransition.NumericTextConfiguration.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    char v7 = 0;
    int v8 = 0;
    char v40 = 51;
    char v9 = 18;
    char v41 = 2;
    char v42 = 19;
    int v10 = 2;
    char v11 = 32;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v13 = v3[4];
        if (v5 < v13) {
          goto LABEL_14;
        }
        if (v13 < v5) {
          goto LABEL_126;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_126:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0) {
            goto LABEL_21;
          }
          if ((result & 7) != 2) {
            goto LABEL_126;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_130;
          }
          unint64_t v14 = v3[1] + result;
          if (v6 < v14) {
            goto LABEL_126;
          }
          v3[3] = 8;
          v3[4] = v14;
LABEL_21:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          char v7 = 0;
          int v8 = result == 0;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_132;
            }
            float v19 = (int *)v3[1];
            if (v6 < (unint64_t)v19 + result) {
              goto LABEL_126;
            }
            v3[3] = 21;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            float v19 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v19 + 1)) {
            goto LABEL_126;
          }
          int v8 = *v19;
          v3[1] = v19 + 1;
          char v7 = 1;
          break;
        case 3uLL:
          if ((result & 7) == 0) {
            goto LABEL_32;
          }
          if ((result & 7) != 2) {
            goto LABEL_126;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_131;
          }
          unint64_t v16 = v3[1] + result;
          if (v6 < v16) {
            goto LABEL_126;
          }
          v3[3] = 24;
          v3[4] = v16;
LABEL_32:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          char v41 = result != 0;
          break;
        case 4uLL:
          if ((result & 7) == 0) {
            goto LABEL_40;
          }
          if ((result & 7) != 2) {
            goto LABEL_126;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_134;
          }
          unint64_t v17 = v3[1] + result;
          if (v6 < v17) {
            goto LABEL_126;
          }
          v3[3] = 32;
          v3[4] = v17;
LABEL_40:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (result) {
            v10 |= 1u;
          }
          else {
            v10 &= ~1u;
          }
          break;
        case 5uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_135;
            }
            uint64_t v15 = (float *)v3[1];
            if (v6 < (unint64_t)v15 + result) {
              goto LABEL_126;
            }
            v3[3] = 45;
            v3[4] = (char *)v15 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            uint64_t v15 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v15 + 1)) {
            goto LABEL_126;
          }
          float v23 = *v15;
          v3[1] = v15 + 1;
          float v24 = v23 * 120.0;
          if (v24 < 0.0) {
            float v24 = 0.0;
          }
          if (v24 > 255.0) {
            float v24 = 255.0;
          }
          uint64_t result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v24);
          if ((v43 & 0x100) != 0) {
            goto LABEL_139;
          }
          char v9 = v43;
          break;
        case 6uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_136;
            }
            uint64_t v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result) {
              goto LABEL_126;
            }
            v3[3] = 53;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            uint64_t v20 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v20 + 1)) {
            goto LABEL_126;
          }
          float v27 = *v20;
          v3[1] = v20 + 1;
          float v28 = v27 * 128.0;
          if (v28 < 0.0) {
            float v28 = 0.0;
          }
          if (v28 > 255.0) {
            float v28 = 255.0;
          }
          uint64_t result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v28);
          if ((v43 & 0x100) != 0) {
            goto LABEL_139;
          }
          char v40 = v43;
          break;
        case 7uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_129;
            }
            int64_t v21 = (float *)v3[1];
            if (v6 < (unint64_t)v21 + result) {
              goto LABEL_126;
            }
            v3[3] = 61;
            v3[4] = (char *)v21 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            int64_t v21 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v21 + 1)) {
            goto LABEL_126;
          }
          float v29 = *v21;
          v3[1] = v21 + 1;
          float v30 = v29 * 4.0;
          if (v30 < 0.0) {
            float v30 = 0.0;
          }
          if (v30 > 255.0) {
            float v30 = 255.0;
          }
          uint64_t result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v30);
          if ((v43 & 0x100) != 0) {
            goto LABEL_139;
          }
          char v11 = v43;
          v10 &= ~2u;
          break;
        case 8uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              uint64_t v43 = 0;
              unint64_t v44 = 0xE000000000000000;
              _StringGuts.grow(_:)(80);
              v33._uint64_t countAndFlagsBits = 0x74616F6C46;
              v33._object = (void *)0xE500000000000000;
              String.append(_:)(v33);
              v34._object = (void *)0x8000000246225510;
              v34._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
              String.append(_:)(v34);
              uint64_t v35 = 947154505;
              unint64_t v36 = 0xE400000000000000;
LABEL_140:
              String.append(_:)(*(Swift::String *)&v35);
              v39._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
              v39._object = (void *)0x8000000246225530;
              String.append(_:)(v39);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x24607864CLL);
            }
            float v18 = (float *)v3[1];
            if (v6 < (unint64_t)v18 + result) {
              goto LABEL_126;
            }
            v3[3] = 69;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            float v18 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v18 + 1)) {
            goto LABEL_126;
          }
          float v25 = *v18;
          v3[1] = v18 + 1;
          float v26 = fmaxf(v25 * 32.0, -128.0);
          if (v26 > 127.0) {
            float v26 = 127.0;
          }
          uint64_t result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v26);
          if ((v43 & 0x100) != 0) {
            goto LABEL_138;
          }
          char v42 = v43;
          break;
        case 9uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_133;
            }
            unint64_t v22 = (float *)v3[1];
            if (v6 < (unint64_t)v22 + result) {
              goto LABEL_126;
            }
            v3[3] = 77;
            v3[4] = (char *)v22 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_126;
            }
            unint64_t v22 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v22 + 1)) {
            goto LABEL_126;
          }
          float v31 = *v22;
          v3[1] = v22 + 1;
          float v32 = v31 * 128.0;
          if (v32 < 0.0) {
            float v32 = 0.0;
          }
          if (v32 > 255.0) {
            float v32 = 255.0;
          }
          uint64_t result = specialized static FixedWidthInteger._convert<A>(from:)(&v43, v32);
          if ((v43 & 0x100) != 0)
          {
LABEL_139:
            uint64_t v43 = 0;
            unint64_t v44 = 0xE000000000000000;
            _StringGuts.grow(_:)(80);
            v37._uint64_t countAndFlagsBits = 0x74616F6C46;
            v37._object = (void *)0xE500000000000000;
            String.append(_:)(v37);
            v38._object = (void *)0x8000000246225510;
            v38._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
            String.append(_:)(v38);
            uint64_t v35 = 0x38746E4955;
            unint64_t v36 = 0xE500000000000000;
            goto LABEL_140;
          }
          char v11 = v43;
          v10 |= 2u;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v12 = v3[1] + 8;
              if (v6 >= v12) {
                goto LABEL_6;
              }
              goto LABEL_126;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_137;
              }
              unint64_t v12 = v3[1] + result;
              if (v6 < v12) {
                goto LABEL_126;
              }
LABEL_6:
              v3[1] = v12;
              break;
            case 5uLL:
              unint64_t v12 = v3[1] + 4;
              if (v6 < v12) {
                goto LABEL_126;
              }
              goto LABEL_6;
            default:
              goto LABEL_126;
          }
          break;
      }
LABEL_7:
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  char v7 = 0;
  int v8 = 0;
  char v11 = 32;
  char v40 = 51;
  char v9 = 18;
  char v41 = 2;
  char v42 = 19;
  LOBYTE(v10) = 2;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v8;
  *(unsigned char *)(a2 + 4) = v7 & 1;
  *(unsigned char *)(a2 + 5) = v41;
  *(unsigned char *)(a2 + 6) = v10;
  *(unsigned char *)(a2 + 7) = v9;
  *(unsigned char *)(a2 + 8) = v40;
  *(unsigned char *)(a2 + 9) = v11;
  *(unsigned char *)(a2 + 10) = v42;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.NumericTextConfiguration(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.NumericTextConfiguration@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.NumericTextConfiguration.init(from:)(a1, a2);
}

void ContentTransition.CustomTransition.encode(to:)(void *a1)
{
  uint64_t v4 = *v1;
  Swift::UInt v5 = *((unsigned int *)v1 + 2);
  if (v5)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v5);
  }
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = v4 + 60;
    while (1)
    {
      int64_t v8 = a1[1];
      int64_t v9 = a1[2];
      if (v8 >= v9)
      {
        int64_t v14 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_23;
        }
        if (v9 < v14)
        {
          uint64_t v15 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v14);
        }
        else
        {
          a1[1] = v14;
          uint64_t v15 = (unsigned char *)(*a1 + v8);
        }
        *uint64_t v15 = 18;
        int64_t v10 = a1[1];
      }
      else
      {
        *(unsigned char *)(*a1 + v8) = 18;
        int64_t v10 = v8 + 1;
        a1[1] = v8 + 1;
      }
      char v11 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      }
      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      if (v13 >= v12 >> 1) {
        char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
      }
      uint64_t v11[2] = v13 + 1;
      v11[v13 + 4] = v10;
      a1[3] = v11;
      if (__OFADD__(v10, 1)) {
        break;
      }
      a1[1] = v10 + 1;
      ContentTransition.Effect.encode(to:)(a1);
      if (!v2)
      {
        ProtobufEncoder.endLengthDelimited()();
        v7 += 36;
        if (--v6) {
          continue;
        }
      }
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

unint64_t ContentTransition.CustomTransition.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    int v7 = 0;
    unint64_t v8 = MEMORY[0x263F8EE78];
LABEL_4:
    v4[3] = 0;
    *(void *)a2 = v8;
    *(_DWORD *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 12) = 2;
    return result;
  }
  int v7 = 0;
  unint64_t v8 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t result = v4[3];
    if (result)
    {
      unint64_t v10 = v4[4];
      if (v5 < v10) {
        goto LABEL_14;
      }
      if (v10 < v5) {
        goto LABEL_53;
      }
      v4[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result < 8)
    {
LABEL_53:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_53;
          }
          uint64_t v11 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if (v11 < 0) {
            goto LABEL_59;
          }
          unint64_t v12 = v4[1] + v11;
          if (v6 < v12) {
            goto LABEL_53;
          }
          v4[3] = 8;
          v4[4] = v12;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if (HIDWORD(result)) {
          int v7 = 0;
        }
        else {
          int v7 = result;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v9 = v4[1] + 8;
            if (v6 < v9) {
              goto LABEL_53;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_60;
            }
            unint64_t v9 = v4[1] + result;
            if (v6 < v9) {
              goto LABEL_53;
            }
LABEL_6:
            v4[1] = v9;
            break;
          case 5uLL:
            unint64_t v9 = v4[1] + 4;
            if (v6 < v9) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_53;
    }
    unint64_t v13 = (void *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1) {
      unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
    }
    void v13[2] = v15 + 1;
    v13[v15 + 4] = v6;
    v4[5] = v13;
    uint64_t v16 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v16 < 0) {
      break;
    }
    unint64_t v17 = v4[1] + v16;
    if (v6 < v17) {
      goto LABEL_53;
    }
    _OWORD v4[2] = v17;
    ContentTransition.Effect.init(from:)((unint64_t)v4, (uint64_t)&v35);
    float v18 = (void *)v4[5];
    if (!v18[2]) {
      goto LABEL_57;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_58;
      }
    }
    else
    {
      float v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_58;
      }
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v18[v20 + 4];
    v18[2] = v20;
    v4[5] = v18;
    _OWORD v4[2] = v21;
    uint64_t v22 = v35;
    char v23 = v36;
    int v24 = v37;
    char v25 = v38;
    uint64_t v26 = v39;
    uint64_t v27 = v40;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
      unint64_t v8 = result;
    }
    unint64_t v3 = *(void *)(v8 + 16);
    unint64_t v28 = *(void *)(v8 + 24);
    if (v3 >= v28 >> 1)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v3 + 1, 1, (char *)v8);
      unint64_t v8 = result;
    }
    *(void *)(v8 + 16) = v3 + 1;
    unint64_t v29 = v8 + 36 * v3;
    *(void *)(v29 + 32) = v22;
    *(unsigned char *)(v29 + 40) = v23;
    *(_DWORD *)(v29 + 44) = v24;
    *(unsigned char *)(v29 + 48) = v25;
    *(void *)(v29 + 52) = v26;
    *(void *)(v29 + 60) = v27;
LABEL_7:
    unint64_t v5 = v4[1];
    unint64_t v6 = v4[2];
    if (v5 >= v6) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  __break(1u);
  float v32 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
  uint64_t v33 = v32[2];
  if (!v33)
  {
    __break(1u);
    JUMPOUT(0x246078CC0);
  }
  uint64_t v30 = v33 - 1;
  uint64_t v31 = v32[v30 + 4];
  v32[2] = v30;
  v4[5] = v32;
  _OWORD v4[2] = v31;
  return swift_bridgeObjectRelease();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.CustomTransition(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.CustomTransition@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.CustomTransition.init(from:)(a1, a2);
}

void ContentTransition.Effect.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  Swift::UInt v5 = *(unsigned int *)v2;
  Swift::UInt v4 = *((unsigned int *)v2 + 1);
  int v6 = *((unsigned __int8 *)v2 + 8);
  Swift::UInt v7 = *((unsigned int *)v2 + 3);
  int v8 = *((unsigned __int8 *)v2 + 16);
  float v10 = v2[5];
  float v9 = v2[6];
  Swift::UInt v12 = *((unsigned int *)v2 + 7);
  Swift::UInt v11 = *((unsigned int *)v2 + 8);
  if (v5 != 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v5);
  }
  if (v10 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    uint64_t v13 = a1[1];
    int64_t v14 = v13 + 4;
    if (__OFADD__(v13, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v14)
    {
      a1[1] = v14;
      *(float *)(*a1 + v13) = v10;
      goto LABEL_7;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v14) = v10;
  }
LABEL_7:
  if (v9 == 1.0) {
    goto LABEL_11;
  }
  ProtobufEncoder.encodeVarint(_:)(0x4DuLL);
  uint64_t v15 = a1[1];
  int64_t v16 = v15 + 4;
  if (__OFADD__(v15, 4))
  {
    __break(1u);
  }
  else if (a1[2] >= v16)
  {
    a1[1] = v16;
    *(float *)(*a1 + v15) = v9;
LABEL_11:
    if (v12 == 3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(float *)ProtobufEncoder.growBufferSlow(to:)(v16) = v9;
  if (v12 != 3)
  {
LABEL_12:
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(v12);
  }
LABEL_13:
  if (!v6)
  {
    if ((v4 & 0x7FFFFFFF) == 0) {
      goto LABEL_22;
    }
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v17 = a1[1];
    int64_t v18 = v17 + 4;
    if (__OFADD__(v17, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v18)
    {
      a1[1] = v18;
      *(_DWORD *)(*a1 + v17) = v4;
      goto LABEL_22;
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v18) = v4;
    if (v8) {
      goto LABEL_23;
    }
LABEL_34:
    if ((v7 & 0x7FFFFFFF) == 0) {
      goto LABEL_38;
    }
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v19 = a1[1];
    int64_t v20 = v19 + 4;
    if (__OFADD__(v19, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v20)
    {
      a1[1] = v20;
      *(_DWORD *)(*a1 + v19) = v7;
      goto LABEL_38;
    }
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v20) = v7;
    if (!v11) {
      return;
    }
    goto LABEL_39;
  }
  if (v6 != 1 || !v4)
  {
LABEL_22:
    if (v8) {
      goto LABEL_23;
    }
    goto LABEL_34;
  }
  ProtobufEncoder.encodeVarint(_:)(0x38uLL);
  ProtobufEncoder.encodeVarint(_:)(v4);
  if (!v8) {
    goto LABEL_34;
  }
LABEL_23:
  if (v8 != 1 || !v7)
  {
LABEL_38:
    if (!v11) {
      return;
    }
    goto LABEL_39;
  }
  ProtobufEncoder.encodeVarint(_:)(0x40uLL);
  ProtobufEncoder.encodeVarint(_:)(v7);
  if (!v11) {
    return;
  }
LABEL_39:
  ProtobufEncoder.encodeVarint(_:)(0x50uLL);
  ProtobufEncoder.encodeVarint(_:)(v11);
}

unint64_t ContentTransition.Effect.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    int v8 = 0;
    int v27 = 1;
    int v28 = 0;
    char v9 = 2;
    float v10 = 1.0;
    float v11 = 0.0;
    int v12 = 3;
    char v13 = 2;
    while (1)
    {
      uint64_t result = v3[3];
      if (result)
      {
        unint64_t v15 = v3[4];
        if (v5 < v15) {
          goto LABEL_14;
        }
        if (v15 < v5) {
          goto LABEL_105;
        }
        v3[3] = 0;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_105:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_14:
      switch(result >> 3)
      {
        case 1uLL:
          if ((result & 7) == 0) {
            goto LABEL_21;
          }
          if ((result & 7) != 2) {
            goto LABEL_105;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
            JUMPOUT(0x2460794B8);
          }
          unint64_t v16 = v3[1] + result;
          if (v6 < v16) {
            goto LABEL_105;
          }
          v3[3] = 8;
          v3[4] = v16;
LABEL_21:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (HIDWORD(result)) {
            int v17 = 0;
          }
          else {
            int v17 = result;
          }
          int v27 = v17;
          break;
        case 2uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_111;
            }
            int64_t v18 = (int *)v3[1];
            if (v6 < (unint64_t)v18 + result) {
              goto LABEL_105;
            }
            v3[3] = 21;
            v3[4] = (char *)v18 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_105;
            }
            int64_t v18 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v18 + 1)) {
            goto LABEL_105;
          }
          char v13 = 0;
          int v7 = *v18;
          v3[1] = v18 + 1;
          break;
        case 3uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_112;
            }
            uint64_t v19 = (int *)v3[1];
            if (v6 < (unint64_t)v19 + result) {
              goto LABEL_105;
            }
            v3[3] = 29;
            v3[4] = (char *)v19 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_105;
            }
            uint64_t v19 = (int *)v3[1];
          }
          if (v6 < (unint64_t)(v19 + 1)) {
            goto LABEL_105;
          }
          char v9 = 0;
          int v28 = *v19;
          v3[1] = v19 + 1;
          break;
        case 4uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_113;
            }
            int64_t v20 = (float *)v3[1];
            if (v6 < (unint64_t)v20 + result) {
              goto LABEL_105;
            }
            v3[3] = 37;
            v3[4] = (char *)v20 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_105;
            }
            int64_t v20 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v20 + 1)) {
            goto LABEL_105;
          }
          float v11 = *v20;
          v3[1] = v20 + 1;
          break;
        case 5uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_114;
            }
            uint64_t v21 = (float *)v3[1];
            if (v6 < (unint64_t)v21 + result) {
              goto LABEL_105;
            }
            v3[3] = 45;
            v3[4] = (char *)v21 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_105;
            }
            uint64_t v21 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v21 + 1)) {
            goto LABEL_105;
          }
          float v26 = *v21;
          v3[1] = v21 + 1;
          float v10 = v26 - v11;
          break;
        case 6uLL:
          if ((result & 7) == 0) {
            goto LABEL_44;
          }
          if ((result & 7) != 2) {
            goto LABEL_105;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_108;
          }
          unint64_t v22 = v3[1] + result;
          if (v6 < v22) {
            goto LABEL_105;
          }
          v3[3] = 48;
          v3[4] = v22;
LABEL_44:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if (HIDWORD(result)) {
            int v12 = 3;
          }
          else {
            int v12 = result;
          }
          break;
        case 7uLL:
          if ((result & 7) == 0) {
            goto LABEL_54;
          }
          if ((result & 7) != 2) {
            goto LABEL_105;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_109;
          }
          unint64_t v23 = v3[1] + result;
          if (v6 < v23) {
            goto LABEL_105;
          }
          v3[3] = 56;
          v3[4] = v23;
LABEL_54:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          int v7 = result;
          char v13 = 1;
          break;
        case 9uLL:
          if ((result & 7) == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_115;
            }
            int v24 = (float *)v3[1];
            if (v6 < (unint64_t)v24 + result) {
              goto LABEL_105;
            }
            v3[3] = 77;
            v3[4] = (char *)v24 + result;
          }
          else
          {
            if ((result & 7) != 5) {
              goto LABEL_105;
            }
            int v24 = (float *)v3[1];
          }
          if (v6 < (unint64_t)(v24 + 1)) {
            goto LABEL_105;
          }
          float v10 = *v24;
          v3[1] = v24 + 1;
          break;
        case 0xAuLL:
          if ((result & 7) == 0) {
            goto LABEL_68;
          }
          if ((result & 7) != 2) {
            goto LABEL_105;
          }
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_110;
          }
          unint64_t v25 = v3[1] + result;
          if (v6 < v25) {
            goto LABEL_105;
          }
          v3[3] = 80;
          v3[4] = v25;
LABEL_68:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          int v8 = result;
          break;
        default:
          switch(result & 7)
          {
            case 0uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              goto LABEL_7;
            case 1uLL:
              unint64_t v14 = v3[1] + 8;
              if (v6 >= v14) {
                goto LABEL_6;
              }
              goto LABEL_105;
            case 2uLL:
              uint64_t result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_116;
              }
              unint64_t v14 = v3[1] + result;
              if (v6 < v14) {
                goto LABEL_105;
              }
LABEL_6:
              v3[1] = v14;
              break;
            case 5uLL:
              unint64_t v14 = v3[1] + 4;
              if (v6 < v14) {
                goto LABEL_105;
              }
              goto LABEL_6;
            default:
              goto LABEL_105;
          }
          break;
      }
LABEL_7:
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  int v7 = 0;
  int v8 = 0;
  int v27 = 1;
  int v28 = 0;
  char v9 = 2;
  float v10 = 1.0;
  float v11 = 0.0;
  int v12 = 3;
  char v13 = 2;
LABEL_4:
  v3[3] = 0;
  *(_DWORD *)a2 = v27;
  *(_DWORD *)(a2 + 4) = v7;
  *(unsigned char *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v28;
  *(unsigned char *)(a2 + 16) = v9;
  *(float *)(a2 + 20) = v11;
  *(float *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 28) = v12;
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ContentTransition.Effect(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ContentTransition.Effect@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ContentTransition.Effect.init(from:)(a1, a2);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(unsigned char *a1, float a2)
{
  int v4 = (LODWORD(a2) >> 23);
  unsigned int v5 = LODWORD(a2) & 0x7FFFFF;
  int v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    char v7 = 0;
    BOOL result = 1;
    goto LABEL_24;
  }
  LOBYTE(v6) = 0;
  char v7 = 1;
  if (v4 == 255)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = 0;
    if (a2 > -1.0)
    {
      uint64_t v9 = Float.exponent.getter();
      if (v9 > 7)
      {
        LOBYTE(v6) = 0;
        BOOL result = 0;
        char v7 = 1;
        goto LABEL_24;
      }
      uint64_t v10 = v9;
      uint64_t v11 = Float.significandWidth.getter();
      uint64_t v12 = v11 + __clz(__rbit32(v5));
      uint64_t v13 = v10 - v12;
      if (__OFSUB__(v10, v12))
      {
        __break(1u);
      }
      else
      {
        if (v12 <= 7)
        {
          if (v13 < -8 || v13 > 8)
          {
LABEL_9:
            LOBYTE(v6) = 0;
            LOBYTE(v14) = 0;
            if ((v10 & 0x8000000000000000) == 0) {
              goto LABEL_22;
            }
            goto LABEL_23;
          }
          if (v13 < 0)
          {
            if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8) {
              goto LABEL_9;
            }
            int v6 = LOBYTE(a2) >> (v12 - v10);
          }
          else
          {
            if ((unint64_t)v13 >= 8) {
              goto LABEL_9;
            }
            int v6 = LODWORD(a2) << v13;
          }
LABEL_20:
          if ((v10 & 0x8000000000000000) == 0)
          {
LABEL_22:
            int v14 = 1 << v10;
            goto LABEL_23;
          }
          LOBYTE(v14) = 0;
LABEL_23:
          char v7 = 0;
          LOBYTE(v6) = v6 | v14;
          BOOL result = v10 >= v11;
          goto LABEL_24;
        }
        if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
        {
LABEL_13:
          LOBYTE(v6) = 0;
          goto LABEL_20;
        }
        if ((v13 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v13 < 0x20)
          {
            int v6 = v5 << v13;
            goto LABEL_20;
          }
          goto LABEL_13;
        }
      }
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0) {
        LOBYTE(v6) = 0;
      }
      else {
        int v6 = v5 >> (v12 - v10);
      }
      goto LABEL_20;
    }
  }
LABEL_24:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;

  unsigned int v5 = (LODWORD(a2) >> 23);
  int v6 = LODWORD(a2) & 0x7FFFFF;
  char v7 = v5 | LODWORD(a2) & 0x7FFFFF;
  if (!v7)
  {
    LOBYTE(v15) = 0;
    BOOL result = 1;
    goto LABEL_28;
  }
  if (v5 == 255 || (int v8 = Float.exponent.getter(), v8 > 7))
  {
LABEL_37:
    LOBYTE(v15) = 0;
    BOOL result = 0;
    LOBYTE(v7) = 1;
    goto LABEL_28;
  }
  uint64_t v9 = v8;
  uint64_t v10 = Float.significandWidth.getter();
  BOOL result = v9 >= v10;
  uint64_t v12 = v10 + __clz(__rbit32(v6));
  uint64_t v13 = v9 - v12;
  if (__OFSUB__(v9, v12))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v12 > 7)
  {
    if ((unint64_t)(v13 - 33) < 0xFFFFFFFFFFFFFFBFLL)
    {
LABEL_12:
      LOBYTE(v13) = 0;
      goto LABEL_19;
    }
    if (v13 < 0)
    {
      unint64_t v16 = v6 >> (v12 - v9);
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFE0) {
        LOBYTE(v13) = 0;
      }
      else {
        LOBYTE(v13) = v16;
      }
    }
    else
    {
      if ((unint64_t)v13 >= 0x20) {
        goto LABEL_12;
      }
      LODWORD(v13) = v6 << v13;
    }
LABEL_19:
    if (v9 != 7)
    {
      if (v9 < 0)
      {
        LOBYTE(v14) = 0;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_30:
    if (a2 >= 0.0 || (_BYTE)v13) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  if (v13 >= -8 && v13 <= 8)
  {
    if (v13 < 0)
    {
      if ((unint64_t)v13 <= 0xFFFFFFFFFFFFFFF8) {
        goto LABEL_8;
      }
      LODWORD(v13) = LOBYTE(a2) >> (v12 - v9);
    }
    else
    {
      if ((unint64_t)v13 >= 8) {
        goto LABEL_8;
      }
      LODWORD(v13) = LODWORD(a2) << v13;
    }
    goto LABEL_19;
  }
LABEL_8:
  if (v9 == 7) {
    goto LABEL_36;
  }
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000) == 0) {
LABEL_22:
  }
    int v14 = 1 << v9;
LABEL_23:
  unint64_t v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v15 < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (a2 >= 0.0) {
      goto LABEL_37;
    }
LABEL_32:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_28;
  }
  LOBYTE(v7) = 0;
  unint64_t v15 = -v15;
LABEL_28:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

BOOL specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)a1;
  char v3 = *(unsigned char *)(a1 + 4);
  int v4 = *(unsigned __int8 *)(a1 + 5);
  int v5 = *(unsigned __int8 *)(a1 + 6);
  int v6 = *(unsigned __int8 *)(a1 + 7);
  int v7 = *(unsigned __int8 *)(a1 + 8);
  int v8 = *(unsigned __int8 *)(a1 + 9);
  int v9 = *(unsigned __int8 *)(a1 + 10);
  float v10 = *(float *)a2;
  int v11 = *(unsigned __int8 *)(a2 + 5);
  if (v3)
  {
    if ((*(unsigned char *)(a2 + 4) & 1) == 0 || v2 != v10) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 4) & 1) != 0 || ((((LOBYTE(v2) & 1) == 0) ^ LODWORD(v10)) & 1) == 0)
  {
    return 0;
  }
  if (v4 != 2)
  {
    if (v11 != 2)
    {
      BOOL result = 0;
      if ((v11 ^ v4)) {
        return result;
      }
      goto LABEL_13;
    }
    return 0;
  }
  if (v11 != 2) {
    return 0;
  }
  BOOL result = 0;
LABEL_13:
  if (v5 == *(unsigned __int8 *)(a2 + 6)
    && v6 == *(unsigned __int8 *)(a2 + 7)
    && v7 == *(unsigned __int8 *)(a2 + 8)
    && v8 == *(unsigned __int8 *)(a2 + 9))
  {
    return v9 == *(unsigned __int8 *)(a2 + 10);
  }
  return result;
}

uint64_t specialized static ContentTransition.NamedTransition.Name.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = ((unint64_t)*a1 >> 38) & 3;
  if (!v4)
  {
    if ((v3 & 0xC000000000) == 0)
    {
      char v7 = ((*a1 & 1) == 0) ^ v3;
      return v7 & 1;
    }
    goto LABEL_28;
  }
  int v5 = *((unsigned __int16 *)a2 + 4) | (*((unsigned __int8 *)a2 + 10) << 16);
  if (v4 == 1)
  {
    if ((v3 & 0xC000000000) == 0x4000000000)
    {
      int v6 = *((unsigned __int16 *)a1 + 4) | (*((unsigned __int8 *)a1 + 10) << 16);
      int v22 = *a1;
      char v23 = BYTE4(v2) & 1;
      char v24 = BYTE5(v2);
      char v25 = BYTE6(v2);
      char v26 = HIBYTE(v2);
      __int16 v27 = v6;
      char v28 = BYTE2(v6);
      int v15 = v3;
      char v16 = BYTE4(v3) & 1;
      char v17 = BYTE5(v3);
      char v18 = BYTE6(v3);
      char v19 = HIBYTE(v3);
      __int16 v20 = v5;
      char v21 = BYTE2(v5);
      char v7 = specialized static ContentTransition.NumericTextConfiguration.== infix(_:_:)((uint64_t)&v22, (uint64_t)&v15);
      return v7 & 1;
    }
LABEL_28:
    char v7 = 0;
    return v7 & 1;
  }
  switch(v2)
  {
    case 0x8000000001uLL:
      BOOL v10 = (v3 & 0xC000000000) == 0x8000000000;
      uint64_t v11 = 0x8000000001;
      goto LABEL_21;
    case 0x8000000002uLL:
      BOOL v10 = (v3 & 0xC000000000) == 0x8000000000;
      uint64_t v11 = 0x8000000002;
      goto LABEL_21;
    case 0x8000000003uLL:
      BOOL v10 = (v3 & 0xC000000000) == 0x8000000000;
      uint64_t v11 = 0x8000000003;
      goto LABEL_21;
    case 0x8000000004uLL:
      BOOL v10 = (v3 & 0xC000000000) == 0x8000000000;
      uint64_t v11 = 0x8000000004;
LABEL_21:
      if (!v10 || v3 != v11 || v5 != 0) {
        goto LABEL_28;
      }
      goto LABEL_16;
    default:
      if ((v3 & 0xC000000000) != 0x8000000000 || v3 != 0x8000000000 || v5 != 0) {
        goto LABEL_28;
      }
LABEL_16:
      char v7 = 1;
      break;
  }
  return v7 & 1;
}

uint64_t specialized static ContentTransition.CustomTransition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 12);
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 12);
  char v6 = specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2);
  uint64_t result = 0;
  if ((v6 & 1) != 0 && v2 == v4)
  {
    if (v3 == 2)
    {
      if (v5 != 2) {
        return 0;
      }
    }
    else if (v5 == 2 || ((v5 ^ v3) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t specialized static ContentTransition.EffectType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  float v2 = *(float *)(a1 + 4);
  float v3 = *(float *)(a1 + 12);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  float v5 = *(float *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  float v7 = *(float *)(a2 + 12);
  int v8 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      if (v6 != 1 || LODWORD(v2) != LODWORD(v5)) {
        return 0;
      }
    }
    else if (v6 != 2 || LODWORD(v5) != 0)
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (*(unsigned char *)(a2 + 8) || v2 != v5) {
      return result;
    }
  }
  if (v4)
  {
    if (v4 == 1)
    {
      if (v8 != 1 || LODWORD(v3) != LODWORD(v7)) {
        return 0;
      }
    }
    else if (v8 != 2 || v7 != 0.0)
    {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 16) || v3 != v7)
  {
    return 0;
  }
  return 1;
}

BOOL specialized static ContentTransition.Effect.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  char v4 = *((unsigned char *)a1 + 16);
  float v6 = *((float *)a1 + 5);
  float v5 = *((float *)a1 + 6);
  int v7 = *((_DWORD *)a1 + 7);
  int v8 = *((_DWORD *)a1 + 8);
  char v9 = *((unsigned char *)a2 + 8);
  int v10 = *((_DWORD *)a2 + 3);
  char v11 = *((unsigned char *)a2 + 16);
  float v13 = *((float *)a2 + 5);
  float v12 = *((float *)a2 + 6);
  int v14 = *((_DWORD *)a2 + 7);
  int v15 = *((_DWORD *)a2 + 8);
  uint64_t v22 = *a1;
  char v23 = v2;
  int v24 = v3;
  char v25 = v4;
  uint64_t v18 = *a2;
  char v19 = v9;
  int v20 = v10;
  char v21 = v11;
  char v16 = specialized static ContentTransition.EffectType.== infix(_:_:)((uint64_t)&v22, (uint64_t)&v18);
  BOOL result = 0;
  if ((v16 & 1) != 0 && v6 == v13 && v5 == v12) {
    return v7 == v14 && v8 == v15;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment);
  }
  return result;
}

uint64_t specialized EnvironmentValues.contentTransitionAnimation.setter(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  if (v3)
  {
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)&v21);
    swift_release_n();
    swift_release_n();
    uint64_t v5 = v21;
    unint64_t v6 = v22 | ((unint64_t)v23 << 32);
    uint64_t v7 = v24;
    int v8 = v25;
    uint64_t v9 = v26;
    int v19 = v27;
  }
  else
  {
    swift_retain();
    uint64_t v10 = swift_retain_n();
    uint64_t v11 = specialized find<A>(_:key:)(v10);
    if (v11)
    {
      uint64_t v5 = *(void *)(v11 + 72);
      unint64_t v6 = *(unsigned int *)(v11 + 80) | ((unint64_t)*(unsigned __int8 *)(v11 + 84) << 32);
      uint64_t v7 = *(unsigned __int8 *)(v11 + 85);
      int v17 = *(unsigned __int8 *)(v11 + 86);
      uint64_t v18 = *(unsigned __int8 *)(v11 + 87);
      int v12 = *(_DWORD *)(v11 + 96);
      outlined copy of ContentTransition.Storage(v5, v6, v7);
      swift_retain();
    }
    else
    {
      uint64_t v7 = 0;
      int v17 = 0;
      uint64_t v18 = 0;
      int v12 = 0;
      unint64_t v6 = 0x302000000;
      uint64_t v5 = 0x8000000000;
    }
    int v19 = v12;
    swift_release_n();
    uint64_t v9 = v18;
    int v8 = v17;
  }
  swift_release();
  swift_retain_n();
  outlined copy of ContentTransition.Storage(v5, v6, v7);
  uint64_t v13 = 0x1000000000000;
  if (!v8) {
    uint64_t v13 = 0;
  }
  unint64_t v14 = v6 & 0xFFFFFFFFFFLL | (v7 << 40) | v13 | (v9 << 56);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v20, v5, v14, a1, v19);
  swift_release();
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  swift_release();
  if (v3)
  {
    uint64_t v15 = *v20;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v15);
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of ContentTransition.Storage(v5, v6, v7);
  return swift_release();
}

uint64_t sub_246079FC4()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style.Storage and conformance ContentTransition.Style.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style;
  if (!lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Style and conformance ContentTransition.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedTransition.Name and conformance ContentTransition.NamedTransition.Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedTransition and conformance ContentTransition.NamedTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Direction and conformance ContentTransition.NumericTextConfiguration.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration.Options and conformance ContentTransition.NumericTextConfiguration.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration;
  if (!lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NumericTextConfiguration and conformance ContentTransition.NumericTextConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection;
  if (!lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.SequenceDirection and conformance ContentTransition.SequenceDirection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransition.Options and conformance ContentTransition.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options;
  if (!lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.Options and conformance ContentTransition.Options);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContentTransition.Style(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style();
  unint64_t result = lazy protocol witness table accessor for type ContentTransition.Style and conformance ContentTransition.Style();
  *(void *)(a1 + 16) = result;
  return result;
}

float sub_24607A614@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  LOBYTE(a3) = *(unsigned char *)(a1 + 7);
  float result = (float)a3 * 0.0083333;
  *a2 = result;
  return result;
}

uint64_t sub_24607A634(float *a1, uint64_t a2)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 120.0);
  *(unsigned char *)(a2 + 7) = result;
  return result;
}

float sub_24607A66C@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  LOBYTE(a3) = *(unsigned char *)(a1 + 8);
  float result = (float)a3 * 0.0078125;
  *a2 = result;
  return result;
}

uint64_t sub_24607A684(float *a1, uint64_t a2)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 128.0);
  *(unsigned char *)(a2 + 8) = result;
  return result;
}

float sub_24607A6B8@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  LOBYTE(a3) = *(unsigned char *)(a1 + 9);
  float result = (float)a3 * 0.25;
  *a2 = result;
  return result;
}

uint64_t sub_24607A6D0(float *a1, uint64_t a2)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 4.0);
  *(unsigned char *)(a2 + 9) = result;
  if ((*(unsigned char *)(a2 + 6) & 2) != 0) {
    *(unsigned char *)(a2 + 6) &= ~2u;
  }
  return result;
}

float sub_24607A714@<S0>(uint64_t a1@<X0>, float *a2@<X8>, unsigned int a3@<S0>)
{
  LOBYTE(a3) = *(unsigned char *)(a1 + 9);
  float result = (float)a3 * 0.0078125;
  *a2 = result;
  return result;
}

uint64_t sub_24607A72C(float *a1, uint64_t a2)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 128.0);
  *(unsigned char *)(a2 + 9) = result;
  if ((*(unsigned char *)(a2 + 6) & 2) == 0) {
    *(unsigned char *)(a2 + 6) |= 2u;
  }
  return result;
}

float sub_24607A770@<S0>(uint64_t a1@<X0>, _DWORD *a2@<X8>, double a3@<D0>)
{
  LOBYTE(a3) = *(unsigned char *)(a1 + 10);
  *(float *)&a3 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a3)).i32[0] * 0.03125;
  *a2 = LODWORD(a3);
  return *(float *)&a3;
}

uint64_t sub_24607A790(float *a1, uint64_t a2)
{
  uint64_t result = specialized FixedWidthInteger.init<A>(clamping:)(*a1 * 32.0);
  *(unsigned char *)(a2 + 10) = result;
  return result;
}

uint64_t sub_24607A7C4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(result + 13)) {
    *a2 = 3;
  }
  else {
    *a2 = *(unsigned char *)(result + 12);
  }
  return result;
}

unsigned __int8 *sub_24607A7E4(unsigned __int8 *result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 13)) {
    *(_WORD *)(a2 + 12) = *result;
  }
  return result;
}

uint64_t sub_24607A808@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransition.getter((uint64_t)&v6);
  int v3 = v7;
  __int16 v4 = v8;
  char v5 = v9;
  *(void *)a1 = v6;
  *(_WORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 14) = v5;
  return result;
}

uint64_t sub_24607A868@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransitionStyle.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_24607A8AC(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.contentTransitionStyle.setter(&v2);
}

uint64_t sub_24607A8E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransitionAnimation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24607A920()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.contentTransitionAnimation.setter(v0);

  return swift_release();
}

uint64_t sub_24607A964@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransitionAddsDrawingGroup.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24607A9A4(char *a1)
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter(*a1);
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransition.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v5 | (v4 << 32), v6);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 13) = v6;
  return a1;
}

uint64_t assignWithCopy for ContentTransition.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v5 | (v4 << 32), v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = v4;
  char v9 = *(unsigned char *)(a1 + 13);
  *(unsigned char *)(a1 + 13) = v6;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  return a1;
}

void *__swift_memcpy14_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ContentTransition.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  __int16 v4 = *((_WORD *)a2 + 6);
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v5;
  char v8 = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v4;
  outlined consume of ContentTransition.Storage(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 13);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 14) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 14) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 13) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.Storage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 13);
}

uint64_t destructiveInjectEnumTag for ContentTransition.Storage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 13) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Storage()
{
  return &type metadata for ContentTransition.Storage;
}

ValueMetadata *type metadata accessor for ContentTransition.Style()
{
  return &type metadata for ContentTransition.Style;
}

unsigned char *storeEnumTagSinglePayload for ContentTransition.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24607ACB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Style.Storage()
{
  return &type metadata for ContentTransition.Style.Storage;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedTransition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 11) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 11);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 11) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedTransition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 13) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 11) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedTransition()
{
  return &type metadata for ContentTransition.NamedTransition;
}

uint64_t __swift_memcpy11_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedTransition.Name(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 33) >> 5) & 3 | (4 * ((*(void *)a1 >> 33) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedTransition.Name(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = (unint64_t)((((-a2 >> 2) & 0x1F) - 32 * (_BYTE)a2) & 0x7F) << 33;
      *(unsigned char *)(result + 10) = 0;
      *(_WORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.NamedTransition.Name(void *a1)
{
  if (((*a1 >> 38) & 2) != 0) {
    return *a1 + 2;
  }
  else {
    return (*a1 >> 38) & 3;
  }
}

void *destructiveProjectEnumData for ContentTransition.NamedTransition.Name(void *result)
{
  *result &= 0xFFFFFF3FFFFFFFFFLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ContentTransition.NamedTransition.Name(uint64_t result, uint64_t a2)
{
  if (a2 < 2)
  {
    *(void *)uint64_t result = *(void *)result & 0xFFFFFF01FFFFFFFFLL | (a2 << 38);
  }
  else
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 2) | 0x8000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedTransition.Name()
{
  return &type metadata for ContentTransition.NamedTransition.Name;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NumericTextConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NumericTextConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration()
{
  return &type metadata for ContentTransition.NumericTextConfiguration;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration.Direction()
{
  return &type metadata for ContentTransition.NumericTextConfiguration.Direction;
}

ValueMetadata *type metadata accessor for ContentTransition.NumericTextConfiguration.Options()
{
  return &type metadata for ContentTransition.NumericTextConfiguration.Options;
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t assignWithTake for ContentTransition.CustomTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.CustomTransition(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 13)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.CustomTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 13) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 13) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.CustomTransition()
{
  return &type metadata for ContentTransition.CustomTransition;
}

uint64_t getEnumTagSinglePayload for ContentTransition.EffectType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.EffectType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.EffectType()
{
  return &type metadata for ContentTransition.EffectType;
}

uint64_t getEnumTagSinglePayload for ContentTransition.EffectType.Arg(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.EffectType.Arg(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ContentTransition.EffectType.Arg(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ContentTransition.EffectType.Arg(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.EffectType.Arg()
{
  return &type metadata for ContentTransition.EffectType.Arg;
}

unsigned char *storeEnumTagSinglePayload for ContentTransition.SequenceDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24607B340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.SequenceDirection()
{
  return &type metadata for ContentTransition.SequenceDirection;
}

uint64_t getEnumTagSinglePayload for ContentTransition.Effect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.Effect()
{
  return &type metadata for ContentTransition.Effect;
}

ValueMetadata *type metadata accessor for ContentTransition.Method()
{
  return &type metadata for ContentTransition.Method;
}

ValueMetadata *type metadata accessor for ContentTransition.Options()
{
  return &type metadata for ContentTransition.Options;
}

uint64_t initializeWithCopy for _ContentTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 13) = v7;
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ContentTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = v5;
  char v10 = *(unsigned char *)(a1 + 13);
  *(unsigned char *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for _ContentTransitionModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 6);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  char v9 = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

ValueMetadata *type metadata accessor for _ContentTransitionModifier()
{
  return &type metadata for _ContentTransitionModifier;
}

ValueMetadata *type metadata accessor for _ContentTransitionGroup()
{
  return &type metadata for _ContentTransitionGroup;
}

uint64_t assignWithCopy for ContentTransition.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = v5;
  char v10 = *(unsigned char *)(a1 + 13);
  *(unsigned char *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 15) = *(unsigned char *)(a2 + 15);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ContentTransition.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 6);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  char v9 = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
  *(unsigned char *)(a1 + 15) = *((unsigned char *)a2 + 15);
  *(void *)(a1 + 16) = a2[2];
  swift_release();
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransition.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransitionEffect()
{
  return &type metadata for ContentTransitionEffect;
}

uint64_t sub_24607B810()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_24607B824()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_24607B838()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

void *type metadata accessor for _ContentTransitionModifier.ChildEnvironment()
{
  return &unk_26FA6E780;
}

uint64_t destroy for ContentTransitionEffect.Init(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(unsigned char *)(a1 + 21));
}

uint64_t initializeBufferWithCopyOfBuffer for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 21);
  outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v7);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 21) = v7;
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  return a1;
}

uint64_t assignWithCopy for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 21);
  outlined copy of ContentTransition.Storage(v4, v6 | (v5 << 32), v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 20) = v5;
  char v10 = *(unsigned char *)(a1 + 21);
  *(unsigned char *)(a1 + 21) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  return a1;
}

__n128 __swift_memcpy23_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 15) = *(void *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ContentTransitionEffect.Init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  __int16 v5 = *(_WORD *)(a2 + 20);
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  char v9 = *(unsigned char *)(a1 + 21);
  *(_WORD *)(a1 + 20) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 22) = *(unsigned char *)(a2 + 22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentTransitionEffect.Init(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 23)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 22);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransitionEffect.Init(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 23) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 23) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 22) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransitionEffect.Init()
{
  return &type metadata for ContentTransitionEffect.Init;
}

unint64_t instantiation function for generic protocol witness table for ContentTransitionEffect.Init(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _ContentTransitionModifier.ChildEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ContentTransitionModifier.ChildEnvironment and conformance _ContentTransitionModifier.ChildEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t type metadata accessor for RBTransition()
{
  unint64_t result = lazy cache variable for type metadata for RBTransition;
  if (!lazy cache variable for type metadata for RBTransition)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBTransition);
  }
  return result;
}

void *__swift_memcpy14_4(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContentTransition.NamedKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 13);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentTransition.NamedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 14) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 14) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 13) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition.NamedKey()
{
  return &type metadata for ContentTransition.NamedKey;
}

BOOL static ArchivedViewInput.DeploymentVersion.< infix(_:_:)(char *a1, char *a2)
{
  return *a1 < *a2;
}

uint64_t ArchivedViewInput.Value.isArchived.getter()
{
  return *v0 & 1;
}

uint64_t ArchivedViewInput.Value.customFontURLs.getter()
{
  return (*v0 >> 2) & 1;
}

uint64_t ArchivedViewInput.Value.preciseTextLayout.getter()
{
  return (*v0 >> 4) & 1;
}

unsigned char *ArchivedViewInput.Value.init(flags:deploymentVersion:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  char v3 = *a2;
  *a3 = *result;
  a3[1] = v3;
  return result;
}

uint64_t ArchivedViewInput.Flags.rawValue.getter()
{
  return *v0;
}

void static ArchivedViewInput.Flags.customFontURLs.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static ArchivedViewInput.Flags.assetCatalogRefences.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void static ArchivedViewInput.Flags.preciseTextLayout.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

void ArchivedViewInput.Value.flags.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ArchivedViewInput.Value.flags.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*ArchivedViewInput.Value.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ArchivedViewInput.Value.deploymentVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *ArchivedViewInput.Value.deploymentVersion.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*ArchivedViewInput.Value.deploymentVersion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static ArchivedViewInput.Value.isArchived.getter(_WORD *a1@<X8>)
{
  *a1 = 513;
}

uint64_t ArchivedViewInput.Value.stableIDs.getter()
{
  return (*v0 >> 1) & 1;
}

uint64_t ArchivedViewInput.Value.assetCatalogRefences.getter()
{
  return (*v0 >> 3) & 1;
}

BOOL static ArchivedViewInput.Value.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL static ArchivedViewInput.DeploymentVersion.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ArchivedViewInput.DeploymentVersion.rawValue.getter()
{
  return *v0;
}

uint64_t ArchivedViewInput.DeploymentVersion.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ArchivedViewInput.DeploymentVersion.v5.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ArchivedViewInput.DeploymentVersion.v6.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ArchivedViewInput.DeploymentVersion.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ArchivedViewInput.DeploymentVersion.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ArchivedViewInput.DeploymentVersion(char *a1, char *a2)
{
  return *a2 < *a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivedViewInput.DeploymentVersion@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    char v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t ArchivedViewInput.DeploymentVersion.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    char v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v5;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewInput.DeploymentVersion(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t ArchivedViewInput.DeploymentVersion.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void static ArchivedViewInput.defaultValue.getter(_WORD *a1@<X8>)
{
  *a1 = 512;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.Flags and conformance ArchivedViewInput.Flags);
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewInput()
{
  return &type metadata for ArchivedViewInput;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.Flags()
{
  return &type metadata for ArchivedViewInput.Flags;
}

uint64_t getEnumTagSinglePayload for ArchivedViewInput.Value(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for ArchivedViewInput.Value(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24607C514);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewInput.DeploymentVersion()
{
  return &type metadata for ArchivedViewInput.DeploymentVersion;
}

void _ViewOutputs.applyInterpolatorGroup<A>(_:content:inputs:animatesSize:defersRender:)(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v79 = a5;
  int v80 = a4;
  int v81 = a2;
  uint64_t v82 = a1;
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v57[-v12];
  uint64_t v78 = a7;
  uint64_t v14 = type metadata accessor for InterpolatedDisplayList();
  MEMORY[0x270FA5388](v14);
  int v17 = &v57[-v16];
  uint64_t v18 = *v7;
  uint64_t v19 = *(void *)(*v7 + 16);
  if (v19)
  {
    uint64_t v20 = *(void *)a3;
    int v21 = *(_DWORD *)(a3 + 8);
    uint64_t v22 = *(void *)(a3 + 16);
    int v23 = *(_DWORD *)(a3 + 24);
    unsigned int v24 = *(_DWORD *)(a3 + 28);
    int v25 = *(_DWORD *)(a3 + 32);
    unsigned int v26 = *(_DWORD *)(a3 + 36);
    uint64_t v77 = *(void *)(a3 + 40);
    uint64_t v76 = *(void *)(a3 + 48);
    int v27 = *(_DWORD *)(a3 + 56);
    int v28 = *(_DWORD *)(a3 + 60);
    unsigned int v29 = *(_DWORD *)(a3 + 64);
    int v30 = *(_DWORD *)(a3 + 68);
    int v32 = *(_DWORD *)(a3 + 72);
    int v31 = *(_DWORD *)(a3 + 76);
    int v33 = *(_DWORD *)(a3 + 80);
    for (unint64_t i = (ValueMetadata **)(v18 + 48); *(i - 2) != &type metadata for DisplayList.Key; i += 3)
    {
      if (!--v19) {
        return;
      }
    }
    int v63 = v31;
    int v64 = v28;
    int v65 = v27;
    LODWORD(v66) = v25;
    int v71 = v32;
    int v72 = v30;
    unsigned int v73 = v29;
    int v74 = v23;
    int v75 = v21;
    uint64_t v68 = v15;
    uint64_t v69 = v7;
    unsigned int v67 = *(_DWORD *)i;
    swift_beginAccess();
    unsigned int v70 = v26;
    if ((v26 & 0x20) == 0)
    {
      swift_retain();
      unint64_t v66 = v73;
LABEL_20:
      swift_endAccess();
      LODWORD(v77) = AGGraphCreateOffsetAttribute2();
      LODWORD(v76) = *(_DWORD *)(v22 + 16);
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      unsigned int v48 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      LODWORD(KeyPath) = (v70 >> 10) & 1;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v13, 1, 1, a6);
      uint64_t v91 = 0;
      *((void *)&v53 + 1) = __PAIR64__(v67, v48);
      *(void *)&long long v53 = __PAIR64__(v76, v24);
      uint64_t v49 = InterpolatedDisplayList.init(group:content:position:animatedPosition:containerPosition:size:phase:time:transaction:environment:pixelLength:list:animatesSize:defersRender:supportsVFD:lastContent:lastSize:resetSeed:contentVersion:)(v82, v81, v73, v66, v72, v77, v74, v75, (uint64_t)v17, 0.0, 0.0, v53, v80 & 1, v79 & 1, KeyPath, (uint64_t)v13, 0, &v91);
      MEMORY[0x270FA5388](v49);
      uint64_t v55 = v14;
      uint64_t WitnessTable = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_2(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v54, v14, MEMORY[0x263F8E628], v50, MEMORY[0x263F8E658], v51);
      (*(void (**)(unsigned char *, uint64_t))(v68 + 8))(v17, v14);
      uint64_t v52 = v91;
      AGGraphSetFlags();
      LOBYTE(v91) = 0;
      PreferencesOutputs.subscript.setter(v52, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      return;
    }
    uint64_t v59 = v17;
    uint64_t v91 = v20;
    int v92 = v75;
    uint64_t v93 = v22;
    int v94 = v74;
    unsigned int v95 = v24;
    unsigned int v61 = v24;
    int v96 = v66;
    unsigned int v97 = v26;
    uint64_t v98 = v77;
    uint64_t v99 = v76;
    int v100 = v65;
    int v101 = v64;
    unsigned int v35 = v73;
    unsigned int v102 = v73;
    int v103 = v72;
    int v36 = v71;
    int v104 = v71;
    int v105 = v63;
    int v58 = v33;
    int v106 = v33;
    uint64_t v62 = v20;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    unsigned int v37 = _ViewInputs.geometryTransaction()();
    uint64_t v38 = swift_getKeyPath();
    uint64_t v60 = v22 + 16;
    int v39 = specialized CachedEnvironment.attribute<A>(keyPath:)(v38);
    swift_release();
    if ((*(unsigned char *)(v22 + 81) & 1) == 0
      && v35 == *(_DWORD *)(v22 + 32)
      && v36 == *(_DWORD *)(v22 + 36)
      && v39 == *(_DWORD *)(v22 + 40)
      && v75 == *(_DWORD *)(v22 + 44)
      && v37 == *(_DWORD *)(v22 + 48)
      && v74 == *(_DWORD *)(v22 + 52))
    {
      if ((*(unsigned char *)(v22 + 64) & 1) == 0)
      {
        unint64_t OffsetAttribute2 = *(unsigned int *)(v22 + 60);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v91 = v62;
      int v92 = v75;
      uint64_t v93 = v22;
      int v94 = v74;
      unsigned int v95 = v37;
      int v96 = v66;
      unsigned int v97 = v70;
      uint64_t v98 = v77;
      uint64_t v99 = v76;
      int v100 = v65;
      int v101 = v64;
      unsigned int v102 = v35;
      int v103 = v72;
      int v104 = v36;
      int v105 = v63;
      int v106 = v58;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v91, v39, (uint64_t)&v83);
      uint64_t v41 = v84;
      unint64_t v40 = v85;
      uint64_t v42 = v86;
      unsigned __int8 v43 = v90;
      unint64_t v44 = v86 | ((unint64_t)v87 << 32);
      unint64_t v45 = v88 | ((unint64_t)v89 << 32);
      *(_OWORD *)(v22 + 32) = v83;
      *(void *)(v22 + 48) = v41;
      *(void *)(v22 + 56) = v40;
      *(void *)(v22 + 64) = v44;
      *(void *)(v22 + 72) = v45;
      *(_WORD *)(v22 + 80) = v43;
      if (v42 != 1)
      {
        unint64_t OffsetAttribute2 = HIDWORD(v40);
LABEL_19:
        unsigned int v24 = v61;
        int v17 = v59;
        unint64_t v66 = OffsetAttribute2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_20;
      }
    }
    unint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v22 + 60) = OffsetAttribute2;
    *(unsigned char *)(v22 + 64) = 0;
    goto LABEL_19;
  }
}

BOOL protocol witness for InterpolatableContent.requiresTransition(to:) in conformance Image.Resolved(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v2;
  v16[0] = *(_OWORD *)(a1 + 160);
  *(_DWORD *)((char *)v16 + 15) = *(_DWORD *)(a1 + 175);
  long long v3 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 144);
  v13[8] = *(_OWORD *)(v1 + 128);
  v13[9] = v7;
  v14[0] = *(_OWORD *)(v1 + 160);
  *(_DWORD *)((char *)v14 + 15) = *(_DWORD *)(v1 + 175);
  long long v8 = *(_OWORD *)(v1 + 80);
  v13[4] = *(_OWORD *)(v1 + 64);
  v13[5] = v8;
  long long v9 = *(_OWORD *)(v1 + 112);
  v13[6] = *(_OWORD *)(v1 + 96);
  v13[7] = v9;
  long long v10 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v10;
  long long v11 = *(_OWORD *)(v1 + 48);
  void v13[2] = *(_OWORD *)(v1 + 32);
  v13[3] = v11;
  return !specialized static Image.Resolved.== infix(_:_:)((uint64_t)v13, (uint64_t)v15);
}

BOOL InterpolatableContent<>.requiresTransition(to:)()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t InterpolatableContent<>.addsDrawingGroup.getter()
{
  return 0;
}

uint64_t InterpolatableContent.defaultAnimation(to:)()
{
  return 0;
}

void static InterpolatableContent.defaultTransition.getter(uint64_t a1@<X8>)
{
}

{
  *(void *)a1 = 0x8000000001;
  *(unsigned char *)(a1 + 12) = 3;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t InterpolatedDisplayList.init(group:content:position:animatedPosition:containerPosition:size:phase:time:transaction:environment:pixelLength:list:animatesSize:defersRender:supportsVFD:lastContent:lastSize:resetSeed:contentVersion:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, long long a12, char a13, char a14, char a15, uint64_t a16, int a17, uint64_t *a18)
{
  uint64_t v21 = *a18;
  *(void *)a9 = a1;
  *(_DWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 12) = a3;
  *(_DWORD *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 20) = a5;
  *(_DWORD *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 28) = a7;
  *(_DWORD *)(a9 + 32) = a8;
  *(_OWORD *)(a9 + 36) = a12;
  *(unsigned char *)(a9 + 52) = a13;
  *(unsigned char *)(a9 + 53) = a14;
  *(unsigned char *)(a9 + 54) = a15;
  uint64_t v22 = (int *)type metadata accessor for InterpolatedDisplayList();
  uint64_t v23 = a9 + v22[23];
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, a16, v24);
  unsigned int v26 = (double *)(a9 + v22[24]);
  *unsigned int v26 = a10;
  v26[1] = a11;
  *(_DWORD *)(a9 + v22[25]) = a17;
  *(void *)(a9 + v22[26]) = v21;
  return result;
}

uint64_t InterpolatedDisplayList.environment.getter@<X0>(void *a1@<X8>)
{
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t InterpolatedDisplayList.list.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 48) == *MEMORY[0x263F288F8])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a1 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  return result;
}

uint64_t InterpolatedDisplayList.updateValue()(uint64_t a1)
{
  float64_t v2 = v1;
  uint64_t v195 = *MEMORY[0x263EF8340];
  uint64_t v156 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v155 = *(void *)(v156 - 8);
  MEMORY[0x270FA5388](v156);
  v154 = (char *)&v148 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v164 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v164 - 8);
  MEMORY[0x270FA5388](v164);
  uint64_t v163 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v148 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v12);
  v149 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  v150 = (char *)&v148 - v15;
  MEMORY[0x270FA5388](v16);
  v153 = (char *)&v148 - v17;
  MEMORY[0x270FA5388](v18);
  v152 = (char *)&v148 - v19;
  MEMORY[0x270FA5388](v20);
  v151 = (char *)&v148 - v21;
  MEMORY[0x270FA5388](v22);
  v159 = (char *)&v148 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v171 = (char *)&v148 - v25;
  uint64_t v26 = *(int *)(a1 + 100);
  int v27 = *(_DWORD *)(*(void *)&v1 + v26);
  int v28 = *(_DWORD *)AGGraphGetValue() >> 1;
  v168.f64[0] = v2;
  if (v27 != v28)
  {
    *(_DWORD *)(*(void *)&v2 + v26) = v28;
    uint64_t v29 = *(void *)&v2 + *(int *)(a1 + 92);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v29, v164);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v29, 1, 1, v5);
    *(void *)(*(void *)&v2 + *(int *)(a1 + 104)) = 0;
    int v30 = *(void (**)(uint64_t))(***(void ***)&v2 + 88);
    uint64_t v31 = swift_retain();
    v30(v31);
    float64_t v2 = v168.f64[0];
    swift_release();
  }
  uint64_t Value = AGGraphGetValue();
  Swift::String v34 = v33;
  unsigned int v35 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v167 = v11 + 16;
  v166 = v35;
  v35(v171, (char *)Value, v5);
  type metadata accessor for CGSize(0);
  int v36 = (double *)AGGraphGetValue();
  double v37 = *v36;
  double v38 = v36[1];
  InterpolatedDisplayList.environment.getter(&v174);
  uint64_t v39 = v174;
  uint64_t v165 = v5;
  uint64_t v169 = v11;
  uint64_t v170 = a1;
  uint64_t v160 = *((void *)&v174 + 1);
  if (*((void *)&v174 + 1))
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v39, (uint64_t)&v188);
    swift_release_n();
  }
  else
  {
    uint64_t v162 = v34;
    uint64_t v40 = v6;
    uint64_t v41 = swift_retain_n();
    uint64_t v42 = specialized find<A>(_:key:)(v41);
    if (v42)
    {
      uint64_t v43 = *(void *)(v42 + 72);
      unint64_t v44 = *(unsigned int *)(v42 + 80) | ((unint64_t)*(unsigned __int8 *)(v42 + 84) << 32);
      char v45 = *(unsigned char *)(v42 + 85);
      unsigned __int8 v46 = *(unsigned char *)(v42 + 86);
      unsigned __int8 v47 = *(unsigned char *)(v42 + 87);
      uint64_t v48 = *(void *)(v42 + 88);
      int v49 = *(_DWORD *)(v42 + 96);
      outlined copy of ContentTransition.Storage(v43, v44, v45);
      swift_retain();
    }
    else
    {
      char v45 = 0;
      unsigned __int8 v46 = 0;
      unsigned __int8 v47 = 0;
      uint64_t v48 = 0;
      int v49 = 0;
      unint64_t v44 = 0x302000000;
      uint64_t v43 = 0x8000000000;
    }
    unint64_t v188 = v43;
    unsigned int v189 = v44;
    LOBYTE(v190) = BYTE4(v44);
    HIBYTE(v190) = v45;
    unsigned __int8 v191 = v46;
    unsigned __int8 v192 = v47;
    uint64_t v193 = v48;
    int v194 = v49;
    swift_release();
    uint64_t v5 = v165;
    uint64_t v11 = v169;
    a1 = v170;
    uint64_t v6 = v40;
    float64_t v2 = v168.f64[0];
    LOBYTE(v34) = (_BYTE)v162;
  }
  uint64_t v161 = v39;
  swift_release_n();
  uint64_t v50 = ++static DisplayList.Version.lastValue;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v162 = (char *)(*(void *)&v2 + *(int *)(a1 + 92));
  uint64_t v52 = v164;
  v158 = v51;
  ((void (*)(char *))v51)(v10);
  uint64_t v157 = *(void *)(v11 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v157)(v10, 1, v5) != 1)
  {
    uint64_t v148 = v6;
    int v54 = v159;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v159, v10, v5);
    uint64_t v55 = v151;
    unint64_t v56 = v166;
    v166(v151, v54, v5);
    uint64_t v57 = v152;
    v56(v152, v171, v5);
    if (v34) {
      char v58 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v170 + 24) + 16))(v57, v5);
    }
    else {
      char v58 = 0;
    }
    uint64_t v59 = v57;
    uint64_t v60 = v153;
    unsigned int v61 = *(void (**)(char *, uint64_t))(v169 + 8);
    v61(v59, v5);
    v61(v55, v5);
    v166(v60, v54, v5);
    if (v58)
    {
      v61(v60, v5);
    }
    else
    {
      char v65 = (*(uint64_t (**)(uint64_t))(*(void *)(v170 + 24) + 24))(v5);
      v61(v60, v5);
      if ((v65 & 1) == 0
        || (unint64_t v66 = (double *)(*(void *)&v168.f64[0] + *(int *)(v170 + 96)), *v66 == v37) && v66[1] == v38)
      {
        v61(v54, v5);
        goto LABEL_23;
      }
    }
    v153 = (char *)v61;
    AGGraphGetValue();
    uint64_t v62 = swift_retain();
    uint64_t v63 = specialized find<A>(_:key:)(v62);
    if (v63)
    {
      char v64 = *(unsigned char *)(v63 + 72);
      swift_release();
      if (v64)
      {
        ((void (*)(char *, uint64_t))v153)(v54, v5);
LABEL_23:
        uint64_t v53 = v164;
        uint64_t v6 = v148;
        goto LABEL_24;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v73 = v170;
    float64_t v71 = v168.f64[0];
    *(void *)(*(void *)&v168.f64[0] + *(int *)(v170 + 104)) = v50;
    uint64_t v72 = v169;
    uint64_t v74 = v161;
    if (HIBYTE(v190)) {
      goto LABEL_38;
    }
    uint64_t v75 = v188;
    unint64_t v76 = v189 | ((unint64_t)v190 << 32);
    char v77 = v188 >> 38;
    if (((v188 >> 38) & 3) >= 2
      && __PAIR128__((__CFADD__(v188, 0xFFFFFF7FFFFFFFFFLL) + v189 - 1) & 0xFFFFFF, v188 - 0x8000000001) >= 3
      && !(v188 ^ 0x8000000000 | v189 & 0xFFFFFFLL))
    {
      uint64_t v5 = v165;
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v73 + 24) + 8))(&v174, v165);
      uint64_t v75 = v174;
      unint64_t v188 = v174;
      __int16 v190 = WORD6(v174);
      unsigned int v189 = DWORD2(v174);
      unsigned __int8 v191 = 1;
      if (BYTE13(v174)) {
        goto LABEL_38;
      }
      unint64_t v76 = DWORD2(v174) | ((unint64_t)BYTE12(v174) << 32);
      char v77 = (unint64_t)v174 >> 38;
    }
    outlined copy of ContentTransition.Storage(v75, v76, 0);
    if ((v77 & 2) != 0 && !(v75 ^ 0x8000000001 | v76 & 0xFFFFFF))
    {
      int v78 = 0;
LABEL_39:
      if (v78 || (v75 & 0x8000000000) == 0 || v75 ^ 0x8000000001 | v76 & 0xFFFFFF)
      {
        if (AGGraphGetOutputValue())
        {
          AGGraphClearUpdate();
          uint64_t v79 = *(void *)(v170 + 24);
          closure #1 in InterpolatedDisplayList.updateValue()(&v174);
          AGGraphSetUpdate();
          if (v193) {
            goto LABEL_52;
          }
          uint64_t v80 = swift_retain();
          uint64_t v81 = specialized find<A>(_:key:)(v80);
          v158 = (void (*)(char *, uint64_t, uint64_t))v76;
          uint64_t v157 = v79;
          if (v81)
          {
            uint64_t v163 = *(char **)(v81 + 72);
            swift_retain();
          }
          else
          {
            uint64_t v163 = 0;
          }
          uint64_t v82 = v150;
          swift_release();
          long long v83 = v82;
          uint64_t v84 = v165;
          unint64_t v85 = v166;
          v166(v83, v159, v165);
          unsigned __int8 v86 = v149;
          v85(v149, v171, v84);
          uint64_t v87 = (uint64_t)v163;
          if (!v163) {
            uint64_t v87 = (*(uint64_t (**)(char *, uint64_t))(v157 + 48))(v86, v84);
          }
          unsigned __int8 v88 = (void (*)(char *, uint64_t))v153;
          ((void (*)(char *, uint64_t))v153)(v86, v84);
          v88(v150, v84);
          uint64_t v193 = v87;
          uint64_t v74 = v161;
          unint64_t v76 = (unint64_t)v158;
          if (v87)
          {
LABEL_52:
            uint64_t v163 = (char *)Transaction.combinedAnimationListener.getter();
            swift_release();
          }
          else
          {
            swift_release();
            uint64_t v163 = 0;
          }
LABEL_53:
          unsigned int v89 = v192;
          if (v160)
          {
            swift_retain_n();
            swift_retain_n();
            specialized PropertyList.Tracker.value<A>(_:for:)(v74, &v174);
            swift_release_n();
            swift_release_n();
            int v90 = v174;
          }
          else
          {
            uint64_t v91 = swift_retain_n();
            uint64_t v92 = specialized find<A>(_:key:)(v91);
            if (v92) {
              int v90 = *(unsigned __int8 *)(v92 + 72);
            }
            else {
              int v90 = 0;
            }
            swift_release_n();
          }
          ((void (*)(char *, uint64_t))v153)(v159, v165);
          if (v78)
          {
            uint64_t v53 = v164;
            uint64_t v93 = v148;
            if (v78 != 1)
            {
LABEL_79:
              uint64_t v69 = *(void (**)(char *, uint64_t))(v93 + 8);
              uint64_t v5 = v165;
              uint64_t v70 = v170;
              goto LABEL_80;
            }
            if (BYTE4(v76) == 2) {
              int v94 = v90;
            }
            else {
              int v94 = BYTE4(v76) & 1;
            }
            BOOL v95 = v94 == 0;
            uint64_t v96 = 0x100000000;
            if (v95) {
              uint64_t v96 = 0;
            }
            unint64_t v97 = v96 & 0xFFFFFFFF00000000 | v76;
          }
          else
          {
            if (BYTE4(v76) == 3) {
              uint64_t v98 = v89;
            }
            else {
              uint64_t v98 = BYTE4(v76);
            }
            if ((v76 & 0xFF000000) == 0x2000000) {
              int v99 = v90;
            }
            else {
              int v99 = (v76 >> 24) & 1;
            }
            BOOL v95 = v99 == 0;
            uint64_t v100 = 0x1000000;
            if (v95) {
              uint64_t v100 = 0;
            }
            unint64_t v97 = v100 & 0xFFFFFFFFFF000000 | v76 & 0xFFFFFF | (v98 << 32);
            uint64_t v53 = v164;
            uint64_t v93 = v148;
          }
          unsigned int v189 = v97;
          LOBYTE(v190) = BYTE4(v97);
          HIBYTE(v190) = v78;
          goto LABEL_79;
        }
      }
      else
      {
        outlined copy of ContentTransition.Storage(v75, v76, 0);
      }
      swift_release();
      uint64_t v163 = 0;
      uint64_t v193 = 0;
      goto LABEL_53;
    }
    outlined consume of ContentTransition.Storage(v75, v76, 0);
    uint64_t v5 = v165;
LABEL_38:
    (*(void (**)(unint64_t *, char *, uint64_t))(*(void *)(v73 + 24) + 40))(&v188, v171, v5);
    uint64_t v75 = v188;
    unint64_t v76 = v189 | ((unint64_t)v190 << 32);
    int v78 = HIBYTE(v190);
    goto LABEL_39;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v52);
  uint64_t v53 = v52;
LABEL_24:
  unsigned int v67 = v163;
  v158(v163, (uint64_t)v162, v53);
  int v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v157)(v67, 1, v5);
  uint64_t v69 = *(void (**)(char *, uint64_t))(v6 + 8);
  v69(v67, v53);
  uint64_t v70 = v170;
  float64_t v71 = v168.f64[0];
  if (v68 == 1) {
    *(void *)(*(void *)&v168.f64[0] + *(int *)(v170 + 104)) = v50;
  }
  swift_release();
  uint64_t v163 = 0;
  uint64_t v193 = 0;
  uint64_t v72 = v169;
LABEL_80:
  int v101 = v162;
  v69(v162, v53);
  v166(v101, v171, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v101, 0, 1, v5);
  unsigned int v102 = (double *)(*(void *)&v71 + *(int *)(v70 + 96));
  *unsigned int v102 = v37;
  v102[1] = v38;
  uint64_t v103 = v188;
  unint64_t v104 = v189 | ((unint64_t)v190 << 32);
  char v105 = HIBYTE(v190);
  LODWORD(v168.f64[0]) = v191;
  uint64_t v106 = v70;
  float64_t v107 = v71;
  uint64_t v108 = v193;
  int v109 = v194 & 1 | 0x20;
  if ((*(uint64_t (**)(uint64_t))(*(void *)(v106 + 24) + 32))(v5)) {
    int v109 = 33;
  }
  uint64_t v110 = **(void **)&v107;
  unint64_t v111 = *(void *)(*(void *)&v107 + *(int *)(v106 + 104));
  if (v111) {
    LODWORD(v111) = (2 * ((33 * (v111 >> 16)) ^ v111)) | 1;
  }
  LOWORD(v173) = v111;
  uint64_t v183 = v103;
  char v185 = BYTE4(v104);
  int v184 = v104;
  char v186 = v105;
  char v187 = LOBYTE(v168.f64[0]);
  float v112 = 1.0 / *(double *)AGGraphGetValue();
  LOBYTE(v174) = 0;
  DWORD1(v174) = 0;
  BYTE8(v174) = 1;
  HIDWORD(v174) = v109;
  LOBYTE(v175) = 3;
  uint64_t v113 = *(unsigned __int8 *)(*(void *)&v107 + 54);
  v114 = *(void (**)(double *, uint64_t *, uint64_t, char *, long long *, uint64_t, float))(*(void *)v110
                                                                                                 + 128);
  swift_retain();
  outlined copy of ContentTransition.Storage(v103, v104, v105);
  swift_retain();
  v114(&v173, &v183, v108, v163, &v174, v113, v112);
  swift_release();
  float64_t v115 = v107;
  swift_release();
  outlined consume of ContentTransition.Storage(v103, v104, v105);
  v116 = (float64x2_t *)AGGraphGetValue();
  float64x2_t v117 = vsubq_f64(*v116, *(float64x2_t *)AGGraphGetValue());
  char v118 = *(unsigned char *)(*(void *)&v107 + 52);
  double v119 = v117.f64[1];
  double v120 = 0.0;
  float64x2_t v168 = v117;
  if (v118)
  {
    double v121 = v117.f64[0];
    double v122 = 0.0;
  }
  else
  {
    uint64_t v123 = (double *)AGGraphGetValue();
    double v124 = *v123;
    double v172 = v123[1];
    double v125 = *(double *)AGGraphGetValue();
    double v173 = v124 + v125 * 0.5;
    uint64_t v126 = *MEMORY[0x263F8E220];
    uint64_t v127 = v155;
    char v128 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 104);
    uint64_t v129 = v154;
    uint64_t v130 = v156;
    v128(v154, v126, v156);
    specialized FloatingPoint.round(_:toMultipleOf:)(v129, v125);
    uint64_t v131 = *(void (**)(char *, uint64_t))(v127 + 8);
    v131(v129, v130);
    double v172 = v125 * 0.5 + v172;
    v128(v129, v126, v130);
    specialized FloatingPoint.round(_:toMultipleOf:)(v129, v125);
    v131(v129, v130);
    v132 = (double *)AGGraphGetValue();
    double v121 = v173 - *v132;
    double v122 = v121 - v168.f64[0];
    double v120 = v172 - v132[1] - v119;
    double v119 = v172 - v132[1];
  }
  double v173 = v121;
  double v172 = v119;
  InterpolatedDisplayList.list.getter((uint64_t)&v174);
  if ((void)v174) {
    uint64_t v133 = v174;
  }
  else {
    uint64_t v133 = MEMORY[0x263F8EE78];
  }
  if ((void)v174) {
    __int16 v134 = WORD4(v174);
  }
  else {
    __int16 v134 = 0;
  }
  if ((void)v174) {
    char v135 = BYTE10(v174);
  }
  else {
    char v135 = 0;
  }
  uint64_t v183 = v133;
  LOWORD(v184) = v134;
  BYTE2(v184) = v135;
  if (*(unsigned char *)(*(void *)&v115 + 53))
  {
    uint64_t v136 = swift_allocObject();
    *(void *)(v136 + 16) = **(void **)&v115;
    *(double *)(v136 + 24) = v121;
    *(double *)(v136 + 32) = v119;
    *(double *)(v136 + 40) = v122;
    *(double *)(v136 + 48) = v120;
    _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v137 = swift_allocObject();
    *(_OWORD *)(v137 + 16) = xmmword_2461B9DC0;
    *(_OWORD *)(v137 + 32) = 0u;
    *(_OWORD *)(v137 + 48) = 0u;
    *(void *)(v137 + 64) = v50;
    *(void *)(v137 + 72) = v136;
    *(void *)(v137 + 80) = 0x4000001000000000;
    *(void *)(v137 + 88) = v133;
    *(unsigned char *)(v137 + 98) = v135;
    *(_WORD *)(v137 + 96) = v134;
    *(_DWORD *)(v137 + 100) = 0;
    outlined copy of DisplayList.Effect(v136, 0, 16);
    swift_bridgeObjectRetain();
    outlined copy of DisplayList.Effect(v136, 0, 16);
    swift_retain();
    swift_release();
    long long v174 = 0u;
    long long v175 = 0u;
    uint64_t v176 = v50;
    uint64_t v177 = v136;
    uint64_t v178 = 0x4000001000000000;
    uint64_t v179 = v133;
    char v181 = v135;
    __int16 v180 = v134;
    int v182 = 0;
    DisplayList.Item.properties.getter((unsigned char *)&v184 + 2);
    outlined consume of DisplayList.Effect(v136, 0, 16);
    swift_bridgeObjectRelease();
    uint64_t v183 = v137;
    LOWORD(v184) = v134 | 0x20;
  }
  else
  {
    unsigned int v138 = *(_DWORD *)(*(void *)&v115 + 32);
    *(void *)&long long v174 = v50;
    swift_retain();
    DisplayList.InterpolatorGroup.rewriteDisplayList(_:time:contentOrigin:contentOffset:version:)((uint64_t)&v183, v138, (uint64_t *)&v174, v121, v119, v122, v120);
    swift_release();
    uint64_t v137 = v183;
  }
  uint64_t v139 = v165;
  uint64_t v140 = v169;
  uint64_t v141 = *(void *)(v137 + 16);
  if (v141)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_110:
    }
      uint64_t v137 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v137);
    unint64_t v142 = 0;
    unint64_t v143 = *(void *)(v137 + 16);
    v144 = (uint64_t *)(v137 + 64);
    float64x2_t v145 = v168;
    do
    {
      if (v142 >= v143)
      {
        __break(1u);
        goto LABEL_110;
      }
      ++v142;
      *((float64x2_t *)v144 - 2) = vaddq_f64(v145, *((float64x2_t *)v144 - 2));
      uint64_t v146 = *v144;
      if (v50 > *v144) {
        uint64_t v146 = v50;
      }
      uint64_t *v144 = v146;
      v144 += 9;
    }
    while (v141 != v142);
    uint64_t v183 = v137;
  }
  *(void *)&long long v174 = v137;
  WORD4(v174) = v184;
  BYTE10(v174) = BYTE2(v184);
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v171, v139);
  outlined consume of ContentTransition.Storage(v188, v189 | ((unint64_t)v190 << 32), SHIBYTE(v190));
  return swift_release();
}

uint64_t closure #1 in InterpolatedDisplayList.updateValue()@<X0>(void *a1@<X8>)
{
  type metadata accessor for InterpolatedDisplayList();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t dispatch thunk of static InterpolatableContent.defaultTransition.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InterpolatableContent.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of InterpolatableContent.appliesTransitionsForSizeChanges.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InterpolatableContent.addsDrawingGroup.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InterpolatableContent.modifyTransition(state:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of InterpolatableContent.defaultAnimation(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t *initializeBufferWithCopyOfBuffer for InterpolatedDisplayList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  size_t v10 = v9 + 7;
  unint64_t v11 = ((((((v9 + 7 + ((v7 + 55) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v12 = v7 & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    a1 = (uint64_t *)(v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v17 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v16 = *v17;
    uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v18 = *v19;
    uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v20 = *v21;
    uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v22 = *v23;
    uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v24 = *v25;
    uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v26 = *v27;
    int v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v28 = *v29;
    int v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v31 = (_DWORD *)(((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v30 = *v31;
    int v32 = (_DWORD *)(((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v33 = (_DWORD *)(((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v32 = *v33;
    Swift::String v34 = (_DWORD *)(((unint64_t)v32 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v35 = (_DWORD *)(((unint64_t)v33 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v34 = *v35;
    unint64_t v36 = ((unint64_t)v34 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v37 = ((unint64_t)v35 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v36 = *(_DWORD *)v37;
    *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
    *(unsigned char *)(v36 + 5) = *(unsigned char *)(v37 + 5);
    *(unsigned char *)(v36 + 6) = *(unsigned char *)(v37 + 6);
    double v38 = (void *)((v36 + v8 + 7) & ~v8);
    uint64_t v39 = (const void *)((v37 + v8 + 7) & ~v8);
    uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v40(v39, 1, v4))
    {
      memcpy(v38, v39, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v38, v39, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v38, 0, 1, v4);
    }
    uint64_t v41 = (_OWORD *)(((unint64_t)v38 + v10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (_OWORD *)(((unint64_t)v39 + v10) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v42;
    uint64_t v43 = (_DWORD *)(((unint64_t)v41 + 19) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v44 = (_DWORD *)(((unint64_t)v42 + 19) & 0xFFFFFFFFFFFFFFF8);
    _DWORD *v43 = *v44;
    *(void *)(((unint64_t)v43 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + 11) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

void *assignWithCopy for InterpolatedDisplayList(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((v6 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  uint64_t v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v21 = *v22;
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v23 = *v24;
  unint64_t v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v25 + 5) = *(unsigned char *)(v26 + 5);
  *(unsigned char *)(v25 + 6) = *(unsigned char *)(v26 + 6);
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  int v30 = (void *)((v29 + 7 + v25) & ~v29);
  uint64_t v31 = (void *)((v29 + 7 + v26) & ~v29);
  int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v33 = v32(v30, 1, v27);
  int v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v30, v31, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      goto LABEL_12;
    }
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v30, v31, v27);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v37 = v36;
  }
  else {
    size_t v37 = v36 + 1;
  }
  memcpy(v30, v31, v37);
LABEL_12:
  if (*(_DWORD *)(v28 + 84)) {
    uint64_t v38 = *(void *)(v28 + 64);
  }
  else {
    uint64_t v38 = *(void *)(v28 + 64) + 1;
  }
  uint64_t v39 = (void *)(((unint64_t)v30 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (void *)(((unint64_t)v31 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v39 = *v40;
  v39[1] = v40[1];
  uint64_t v41 = (_DWORD *)(((unint64_t)v39 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (_DWORD *)(((unint64_t)v40 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v41 = *v42;
  *(void *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v42 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for InterpolatedDisplayList(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  unint64_t v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  uint64_t v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v21 = *v22;
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v23 = *v24;
  unint64_t v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v25 + 5) = *(unsigned char *)(v26 + 5);
  *(unsigned char *)(v25 + 6) = *(unsigned char *)(v26 + 6);
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  int v30 = (void *)((v29 + 7 + v25) & ~v29);
  uint64_t v31 = (const void *)((v29 + 7 + v26) & ~v29);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v31, 1, v27))
  {
    int v32 = *(_DWORD *)(v28 + 84);
    size_t v33 = *(void *)(v28 + 64);
    if (v32) {
      size_t v34 = v33;
    }
    else {
      size_t v34 = v33 + 1;
    }
    memcpy(v30, v31, v34);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v30, v31, v27);
    size_t v36 = *(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56);
    uint64_t v35 = v28 + 56;
    v36(v30, 0, 1, v27);
    int v32 = *(_DWORD *)(v35 + 28);
    size_t v33 = *(void *)(v35 + 8);
  }
  if (v32) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v33 + 1;
  }
  uint64_t v38 = (_OWORD *)(((unint64_t)v30 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (_OWORD *)(((unint64_t)v31 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  uint64_t v40 = (_DWORD *)(((unint64_t)v38 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (_DWORD *)(((unint64_t)v39 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v40 = *v41;
  *(void *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for InterpolatedDisplayList(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 11;
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((v6 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v5 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  unint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  uint64_t v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v21 = *v22;
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v23 = *v24;
  unint64_t v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v25 + 5) = *(unsigned char *)(v26 + 5);
  *(unsigned char *)(v25 + 6) = *(unsigned char *)(v26 + 6);
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  int v30 = (void *)((v29 + 7 + v25) & ~v29);
  uint64_t v31 = (void *)((v29 + 7 + v26) & ~v29);
  int v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v33 = v32(v30, 1, v27);
  int v34 = v32(v31, 1, v27);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v30, v31, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v27);
      goto LABEL_12;
    }
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v30, v31, v27);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v30, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v37 = v36;
  }
  else {
    size_t v37 = v36 + 1;
  }
  memcpy(v30, v31, v37);
LABEL_12:
  if (*(_DWORD *)(v28 + 84)) {
    uint64_t v38 = *(void *)(v28 + 64);
  }
  else {
    uint64_t v38 = *(void *)(v28 + 64) + 1;
  }
  uint64_t v39 = (void *)(((unint64_t)v30 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (void *)(((unint64_t)v31 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v39 = *v40;
  v39[1] = v40[1];
  uint64_t v41 = (_DWORD *)(((unint64_t)v39 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (_DWORD *)(((unint64_t)v40 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v41 = *v42;
  *(void *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v42 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for InterpolatedDisplayList(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((((((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 55) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24607F230);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((((((((((((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                 + v9
                                                                 + 7) & ~v9);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for InterpolatedDisplayList(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((((((v12 + ((v11 + 55) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((((v12 + ((v11 + 55) & ~v11) + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((v12 + ((v11 + 55) & ~v11) + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((((((v12 + ((v11 + 55) & ~v11) + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x24607F53CLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v20 = (unsigned char *)((((((((((((((((((((((((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + v11
                         + 7) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            unint64_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v26 = (((((((((((((((((((((((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + 7) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                 + v11
                 + 7) & ~v11;
            v25(v26, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in InterpolatedDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_24607F590()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Animation.repeatForever(autoreverses:)(char a1, uint64_t a2)
{
  uint64_t v5 = 0;
  char v6 = 1;
  char v7 = a1;
  float64_t v2 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(void *)a2 + 144);
  unint64_t v3 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  return v2(&v5, &type metadata for RepeatAnimation, v3);
}

uint64_t RepeatAnimation.animate<A, B>(base:value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, double a10@<D0>, uint64_t a11)
{
  uint64_t v46 = a1;
  uint64_t v47 = a7;
  uint64_t v38 = a4;
  unint64_t v44 = a9;
  uint64_t v45 = a11;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v21);
  int v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = *(void *)(a3 + 8);
  char v25 = *(unsigned char *)(a3 + 16);
  char v26 = *(unsigned char *)(a3 + 17);
  v50[0] = *(void *)a3;
  v50[1] = v24;
  char v51 = v25;
  char v52 = v26;
  uint64_t v40 = type metadata accessor for AnimationContext();
  double v27 = AnimationContext.repeatState.getter();
  uint64_t v29 = v28;
  uint64_t v48 = v28;
  double v49 = v27;
  unsigned int v41 = a5;
  int v30 = ((v28 & 0x8000000000000001) == 1) & (a5 >> 8);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v45 + 16);
  uint64_t v39 = a2;
  v31(a2, a3, a6, a8, v47, a10 - v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, a6) != 1)
  {
    int v35 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v35(v23, v19, a6);
    int v34 = v44;
    if (v30)
    {
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, a6);
    }
    else
    {
      v35(v44, v23, a6);
    }
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v43);
  if (!__OFADD__(v29, 1))
  {
    AnimationState.init()(v50);
    unint64_t v33 = v50[0];
    swift_bridgeObjectRelease();
    *(void *)a3 = v33;
    uint64_t v48 = v29 + 1;
    AnimationContext.repeatState.setter(v29 + 1, a10);
    if ((v41 & 1) == 0)
    {
      swift_beginAccess();
      if (v48 >= v38)
      {
        uint64_t v36 = 1;
        int v34 = v44;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v34, v36, 1, a6);
      }
    }
    int v34 = v44;
    if (v30) {
      dispatch thunk of static AdditiveArithmetic.zero.getter();
    }
    else {
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v44, v39, a6);
    }
LABEL_11:
    uint64_t v36 = 0;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v34, v36, 1, a6);
  }
  __break(1u);
  return result;
}

double AnimationContext.repeatState.getter()
{
  uint64_t v0 = type metadata accessor for RepeatState();
  uint64_t v1 = type metadata accessor for AnimationState();
  uint64_t WitnessTable = swift_getWitnessTable();
  AnimationState.subscript.getter(v0, v1, v0, WitnessTable);
  return v4;
}

uint64_t AnimationContext.repeatState.setter(uint64_t a1, double a2)
{
  v5[0] = a1;
  *(double *)&v5[1] = a2;
  uint64_t v2 = type metadata accessor for RepeatState();
  uint64_t v3 = type metadata accessor for AnimationState();
  swift_getWitnessTable();
  return specialized AnimationState.subscript.setter((uint64_t)v5, v2, v3, v2);
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance RepeatAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X8>, double a9@<D0>)
{
  if (*(unsigned char *)(v9 + 9)) {
    int v10 = 256;
  }
  else {
    int v10 = 0;
  }
  return RepeatAnimation.animate<A, B>(base:value:time:context:)(a1, a2, a3, *(void *)v9, v10 | *(unsigned __int8 *)(v9 + 8), a4, a5, a6, a8, a9, a7);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance RepeatAnimation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(v2 + 8);
  char v5 = *(unsigned char *)(v2 + 9);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)v2;
  char v12 = *(unsigned char *)(a1 + 40);
  uint64_t v13 = swift_allocObject();
  double v14 = (double)v11;
  if (v4) {
    double v14 = INFINITY;
  }
  *(double *)(v13 + 16) = v14;
  *(unsigned char *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(void *)(v13 + 40) = v7;
  *(void *)(v13 + 48) = v8;
  *(void *)(v13 + 56) = v9;
  *(void *)(v13 + 64) = v10;
  *(unsigned char *)(v13 + 72) = v12;
  *(void *)a2 = v13;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(unsigned char *)(a2 + 40) = 9;

  return outlined copy of Animation.Function(v6, v7, v8, v9, v10, v12);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RepeatAnimation()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RepeatAnimation()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 9);
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = *(void *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RepeatAnimation()
{
  Swift::UInt v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RepeatAnimation(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9) ^ 1u;
}

uint64_t Animation.repeatCount(_:autoreverses:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = a1;
  char v7 = 0;
  char v8 = a2;
  Swift::UInt8 v3 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(void *)a3 + 144);
  unint64_t v4 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  return v3(&v6, &type metadata for RepeatAnimation, v4);
}

uint64_t getEnumTagSinglePayload for RepeatAnimation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for RepeatAnimation()
{
  return &type metadata for RepeatAnimation;
}

uint64_t RepeatAnimation.encode(to:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    char v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    char v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(void *)(a1 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v6 + 1;
    if ((a3 & 1) == 0 && a2 != 0x8000000000000000)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)((2 * a2) ^ (a2 >> 63));
    }
    if ((a3 & 0x100) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RepeatAnimation(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return RepeatAnimation.encode(to:)(a1, *(void *)v1, v2 | *(unsigned __int8 *)(v1 + 8));
}

unint64_t instantiation function for generic protocol witness table for RepeatAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2460800C0()
{
  outlined consume of Animation.Function(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return swift_deallocObject();
}

uint64_t type metadata accessor for RepeatState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static Animation.decodeRepeatMessage(from:)(void *a1)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = a1[2];
  if (v3 < v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = a1[3];
      if (!v7) {
        goto LABEL_11;
      }
      unint64_t v8 = a1[4];
      if (v3 >= v8) {
        break;
      }
LABEL_13:
      if (v7 >> 3 == 2)
      {
        if ((v7 & 7) != 0)
        {
          if ((v7 & 7) != 2) {
            goto LABEL_39;
          }
          uint64_t v12 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return v5;
          }
          if (v12 < 0) {
            goto LABEL_43;
          }
          unint64_t v13 = a1[1] + v12;
          if (v4 < v13)
          {
LABEL_39:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            return v5;
          }
          a1[3] = 16;
          a1[4] = v13;
        }
        ProtobufDecoder.decodeVarint()();
        if (v1) {
          return v5;
        }
      }
      else if (v7 >> 3 == 1)
      {
        if ((v7 & 7) != 0)
        {
          if ((v7 & 7) != 2) {
            goto LABEL_39;
          }
          uint64_t v9 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return v5;
          }
          if (v9 < 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            JUMPOUT(0x246080390);
          }
          unint64_t v10 = a1[1] + v9;
          if (v4 < v10) {
            goto LABEL_39;
          }
          a1[3] = 8;
          a1[4] = v10;
        }
        uint64_t v11 = ProtobufDecoder.decodeVarint()();
        if (v1) {
          return v5;
        }
        uint64_t v5 = -(v11 & 1) ^ (v11 >> 1);
      }
      else
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            break;
          case 1uLL:
            unint64_t v6 = a1[1] + 8;
            if (v4 >= v6) {
              goto LABEL_5;
            }
            goto LABEL_39;
          case 2uLL:
            uint64_t v14 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v5;
            }
            if (v14 < 0) {
              goto LABEL_44;
            }
            unint64_t v6 = a1[1] + v14;
            if (v4 < v6) {
              goto LABEL_39;
            }
LABEL_5:
            a1[1] = v6;
            break;
          case 5uLL:
            unint64_t v6 = a1[1] + 4;
            if (v4 < v6) {
              goto LABEL_39;
            }
            goto LABEL_5;
          default:
            goto LABEL_39;
        }
      }
      unint64_t v3 = a1[1];
      unint64_t v4 = a1[2];
      if (v3 >= v4)
      {
        a1[3] = 0;
        return v5;
      }
    }
    if (v8 < v3) {
      goto LABEL_39;
    }
    a1[3] = 0;
LABEL_11:
    unint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v5;
    }
    if (v7 <= 7) {
      goto LABEL_39;
    }
    goto LABEL_13;
  }
  uint64_t v5 = 0;
  a1[3] = 0;
  return v5;
}

BOOL static CatalogKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t EnvironmentValues.cuiAssetIdiom.getter()
{
  return EnvironmentValues.cuiAssetIdiom.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.cuiAssetSubtype.getter()
{
  return EnvironmentValues.cuiAssetIdiom.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.cuiAssetIdiom.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t EnvironmentValues.cuiAssetMatchTypes.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

void CatalogKey.colorScheme.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CatalogKey.colorScheme.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*CatalogKey.colorScheme.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void CatalogKey.contrast.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *CatalogKey.contrast.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CatalogKey.contrast.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CatalogKey __swiftcall CatalogKey.init(colorScheme:contrast:)(SwiftUI::ColorScheme colorScheme, SwiftUI::ColorSchemeContrast contrast)
{
  char v3 = *(unsigned char *)contrast;
  *uint64_t v2 = *(unsigned char *)colorScheme;
  v2[1] = v3;
  result.colorScheme = colorScheme;
  return result;
}

void CatalogKey.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int CatalogKey.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CatalogKey()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CatalogKey()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CatalogKey()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void CatalogKey.encode(to:)()
{
  char v1 = v0[1];
  if (*v0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t CatalogKey.init(from:)@<X0>(unint64_t result@<X0>, BOOL *a2@<X8>)
{
  char v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    BOOL v7 = 0;
    BOOL v8 = 0;
    while (1)
    {
      SwiftUI::CatalogKey result = v3[3];
      if (result)
      {
        unint64_t v10 = v3[4];
        if (v5 < v10) {
          goto LABEL_14;
        }
        if (v10 < v5) {
          goto LABEL_40;
        }
        v3[3] = 0;
      }
      SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_40;
      }
LABEL_14:
      if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_40;
          }
          SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_43;
          }
          unint64_t v12 = v3[1] + result;
          if (v6 < v12)
          {
LABEL_40:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 16;
          v3[4] = v12;
        }
        SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v8 = result == 1;
      }
      else if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_40;
          }
          SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            JUMPOUT(0x246080A40);
          }
          unint64_t v11 = v3[1] + result;
          if (v6 < v11) {
            goto LABEL_40;
          }
          v3[3] = 8;
          v3[4] = v11;
        }
        SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        BOOL v7 = result == 1;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v9 = v3[1] + 8;
            if (v6 >= v9) {
              goto LABEL_6;
            }
            goto LABEL_40;
          case 2uLL:
            SwiftUI::CatalogKey result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_44;
            }
            unint64_t v9 = v3[1] + result;
            if (v6 < v9) {
              goto LABEL_40;
            }
LABEL_6:
            v3[1] = v9;
            break;
          case 5uLL:
            unint64_t v9 = v3[1] + 4;
            if (v6 < v9) {
              goto LABEL_40;
            }
            goto LABEL_6;
          default:
            goto LABEL_40;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  BOOL v8 = 0;
  BOOL v7 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v7;
  a2[1] = v8;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CatalogKey()
{
  int v1 = v0[1];
  if (*v0 == 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CatalogKey@<X0>(unint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return CatalogKey.init(from:)(a1, a2);
}

uint64_t static CatalogAssetMatchType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CatalogAssetMatchType(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

void (*EnvironmentValues.cuiAssetIdiom.modify(void *a1))(uint64_t **a1, char a2)
{
  unsigned int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.cuiAssetIdiom.modify;
}

void EnvironmentValues.cuiAssetIdiom.modify(uint64_t **a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    uint64_t v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

void (*EnvironmentValues.cuiAssetSubtype.modify(void *a1))(uint64_t **a1, char a2)
{
  unsigned int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.cuiAssetSubtype.modify;
}

void EnvironmentValues.cuiAssetSubtype.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.cuiAssetIdiom.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  BOOL v8 = (uint64_t *)(*a1)[4];
  uint64_t v9 = **a1;
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = (void **)(v7 + 2);
  }
  else {
    uint64_t v11 = (void **)(v7 + 3);
  }
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = *(void *)v7[4];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t key path getter for EnvironmentValues.cuiAssetMatchTypes : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
    swift_bridgeObjectRetain();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void (*EnvironmentValues.cuiAssetMatchTypes.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.cuiAssetMatchTypes.modify;
}

void EnvironmentValues.cuiAssetMatchTypes.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = **a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.CUIAssetMatchTypesKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.CUIAssetMatchTypesKey.defaultValue;

  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type CatalogKey and conformance CatalogKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey;
  if (!lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CatalogKey and conformance CatalogKey);
  }
  return result;
}

uint64_t sub_2460812D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_246081314(uint64_t *a1)
{
  return EnvironmentValues.cuiAssetIdiom.setter(*a1);
}

uint64_t sub_24608133C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.cuiAssetIdiom : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_24608137C(uint64_t *a1)
{
  return EnvironmentValues.cuiAssetSubtype.setter(*a1);
}

uint64_t sub_2460813A8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t storeEnumTagSinglePayload for CatalogKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460814B8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CatalogKey()
{
  return &type metadata for CatalogKey;
}

uint64_t specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, unsigned int a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  int64_t v15 = a5 >> 1;
  if (a5 >> 1 == a4) {
    return 0;
  }
  if ((uint64_t)(a5 >> 1) <= a4)
  {
    __break(1u);
    goto LABEL_60;
  }
  __int16 v20 = result;
  char v21 = result & 1;
  uint64_t v22 = a3 + 16 * a4;
  int v23 = *(void **)v22;
  int v24 = *(unsigned __int8 *)(v22 + 8);
  id v77 = v23;
  int v76 = v24;
  if (v23 != (void *)8) {
    LOBYTE(v24) = 1;
  }
  if ((result & 0x100) != 0)
  {
    if (v24)
    {
      type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
      char v25 = (char *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_2461C6AA0;
      v25[32] = v21;
      v25[33] = 1;
      v25[34] = v21;
      *(_WORD *)(v25 + 35) = 512;
      v25[37] = 1;
      char v26 = v25 + 38;
      double v27 = v25 + 39;
      goto LABEL_11;
    }
    char v25 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
  else
  {
    if (v24)
    {
      type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
      char v25 = (char *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_2461BDD50;
      v25[32] = v21;
      v25[33] = 0;
      char v26 = v25 + 34;
      double v27 = v25 + 35;
LABEL_11:
      *char v26 = 2;
      *double v27 = 0;
      goto LABEL_14;
    }
    char v25 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  }
LABEL_14:
  uint64_t v79 = a8;
  uint64_t v28 = a13;
  uint64_t v29 = *((void *)v25 + 2);
  uint64_t v70 = a7;
  if (!v29)
  {
    id v57 = a14;
    id v58 = a7;
    swift_bridgeObjectRetain();
    id v59 = a10;
    swift_bridgeObjectRetain();
    unint64_t result = swift_bridgeObjectRelease();
    goto LABEL_54;
  }
  __int16 v68 = v20;
  uint64_t v69 = a2;
  int v30 = v25[32];
  uint64_t v67 = v15;
  unsigned __int8 v31 = v25[33];
  uint64_t v32 = HIWORD(a11) & 1;
  id v66 = a10;
  swift_bridgeObjectRetain();
  id v65 = a14;
  id v33 = a7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = v29 + 1;
  uint64_t v35 = 1;
  uint64_t v36 = &selRef_start;
  uint64_t v75 = v33;
LABEL_16:
  unint64_t v37 = 0xD00000000000001BLL;
  if (v31)
  {
    unint64_t v38 = 0x8000000246221260;
  }
  else
  {
    unint64_t v37 = 0x7261657070414955;
    unint64_t v38 = 0xEF796E4165636E61;
  }
  unint64_t v39 = 0xD00000000000001DLL;
  if (v31)
  {
    unint64_t v40 = 0x80000002462212C0;
  }
  else
  {
    unint64_t v39 = 0xD000000000000011;
    unint64_t v40 = 0x80000002462212E0;
  }
  unint64_t v41 = 0xD00000000000001CLL;
  if (v31)
  {
    unint64_t v42 = 0x8000000246221280;
  }
  else
  {
    unint64_t v41 = 0xD000000000000010;
    unint64_t v42 = 0x80000002462212A0;
  }
  if (v30)
  {
    unint64_t v39 = v41;
    unint64_t v40 = v42;
  }
  BOOL v43 = v30 == 2;
  if (v30 == 2) {
    unint64_t v44 = v37;
  }
  else {
    unint64_t v44 = v39;
  }
  if (v43) {
    unint64_t v45 = v38;
  }
  else {
    unint64_t v45 = v40;
  }
  uint64_t v46 = (void *)MEMORY[0x24C522820](a8, a9);
  uint64_t v47 = (void *)MEMORY[0x24C522820](v44, v45);
  id v16 = objc_msgSend(v33, v36[304], v46, v32, a15, v47);

  if (!v16)
  {
    swift_bridgeObjectRelease();
    uint64_t v48 = v35;
    goto LABEL_46;
  }
  uint64_t v48 = v35;
  if (!v76)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v16, sel_idiom) == v77) {
      goto LABEL_46;
    }
LABEL_42:

    id v16 = 0;
    goto LABEL_46;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  id v49 = objc_msgSend(v16, sel_appearance);
  if (!v49)
  {

    swift_bridgeObjectRelease();
    id v16 = 0;
    goto LABEL_46;
  }
  uint64_t v50 = v49;
  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v53 = v52;

  if (v51 != v44 || v53 != v45)
  {
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_46;
    }
    goto LABEL_42;
  }
  swift_bridgeObjectRelease_n();
LABEL_46:
  uint64_t v55 = v48;
  uint64_t v28 = a13;
  while (v34 != ++v55)
  {
    if (!v16)
    {
      uint64_t v32 = HIWORD(a11) & 1;
      unint64_t v56 = &v25[2 * v48 + 32];
      int v30 = *v56;
      unsigned __int8 v31 = v56[1];
      uint64_t v35 = v55;
      a8 = v79;
      id v33 = v75;
      uint64_t v36 = &selRef_start;
      goto LABEL_16;
    }
  }
  unint64_t result = swift_bridgeObjectRelease_n();
  a2 = v69;
  __int16 v20 = v68;
  int64_t v15 = v67;
  if (v16)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return (uint64_t)v16;
  }
LABEL_54:
  if (__OFSUB__(v15, a4))
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v60 = a4 + 1;
  if (__OFADD__(a4, 1))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v15 < v60)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v60 >= a4)
  {
    unsigned int v78 = v20 & 0x101;
    id v61 = a10;
    swift_bridgeObjectRetain();
    id v62 = a14;
    id v63 = v70;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v64 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v78, a2, a3, v60, a5, a6, v63, v79, a9, a10, a11 & 0x10101, a12, v28, a14, a15);
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v64;
  }
LABEL_63:
  __break(1u);
  return result;
}

id specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, unsigned int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  char v18 = a1 & 1;
  uint64_t v19 = a2 + 32;
  id v75 = *(id *)(a2 + 32);
  int v76 = *(unsigned __int8 *)(a2 + 40);
  if (v75 == (id)8) {
    char v20 = *(unsigned char *)(a2 + 40);
  }
  else {
    char v20 = 1;
  }
  uint64_t v68 = *(void *)(a2 + 16);
  if ((a1 & 0x100) != 0)
  {
    if ((v20 & 1) == 0)
    {
      char v21 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
    char v21 = (char *)swift_allocObject();
    *((_OWORD *)v21 + 1) = xmmword_2461C6AA0;
    v21[32] = v18;
    v21[33] = 1;
    v21[34] = v18;
    *(_WORD *)(v21 + 35) = 512;
    v21[37] = 1;
    uint64_t v22 = v21 + 38;
    int v23 = v21 + 39;
  }
  else
  {
    if ((v20 & 1) == 0)
    {
      char v21 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      goto LABEL_14;
    }
    type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>();
    char v21 = (char *)swift_allocObject();
    *((_OWORD *)v21 + 1) = xmmword_2461BDD50;
    v21[32] = v18;
    v21[33] = 0;
    uint64_t v22 = v21 + 34;
    int v23 = v21 + 35;
  }
  *uint64_t v22 = 2;
  *int v23 = 0;
LABEL_14:
  uint64_t v78 = a5;
  uint64_t v25 = *((void *)v21 + 2);
  uint64_t v72 = a7;
  uint64_t v73 = a3;
  uint64_t v71 = v19;
  unsigned int v70 = a8;
  if (!v25)
  {
    uint64_t v54 = a2;
    uint64_t v55 = a10;
    id v49 = a11;
    id v56 = a4;
    swift_bridgeObjectRetain();
    id v57 = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v58 = v57;
    goto LABEL_54;
  }
  int v26 = v21[32];
  id v66 = v21 + 32;
  unsigned __int8 v27 = v21[33];
  uint64_t v63 = a2;
  id v67 = a7;
  swift_bridgeObjectRetain();
  id v77 = a11;
  uint64_t v64 = a4;
  id v28 = a4;
  uint64_t v29 = HIWORD(a8) & 1;
  id v30 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = v25 + 1;
  uint64_t v32 = 1;
  id v33 = &selRef_start;
  uint64_t v65 = v29;
  uint64_t v74 = v30;
LABEL_16:
  unint64_t v34 = 0xD00000000000001BLL;
  if (v27)
  {
    unint64_t v35 = 0x8000000246221260;
  }
  else
  {
    unint64_t v34 = 0x7261657070414955;
    unint64_t v35 = 0xEF796E4165636E61;
  }
  unint64_t v36 = 0xD00000000000001DLL;
  if (v27)
  {
    unint64_t v37 = 0x80000002462212C0;
  }
  else
  {
    unint64_t v36 = 0xD000000000000011;
    unint64_t v37 = 0x80000002462212E0;
  }
  unint64_t v38 = 0xD00000000000001CLL;
  if (v27)
  {
    unint64_t v39 = 0x8000000246221280;
  }
  else
  {
    unint64_t v38 = 0xD000000000000010;
    unint64_t v39 = 0x80000002462212A0;
  }
  if (v26)
  {
    unint64_t v36 = v38;
    unint64_t v37 = v39;
  }
  if (v26 == 2) {
    unint64_t v40 = v34;
  }
  else {
    unint64_t v40 = v36;
  }
  if (v26 == 2) {
    unint64_t v41 = v35;
  }
  else {
    unint64_t v41 = v37;
  }
  unint64_t v42 = (void *)MEMORY[0x24C522820](a5, a6);
  BOOL v43 = (void *)MEMORY[0x24C522820](v40, v41);
  id v24 = objc_msgSend(v30, v33[304], v42, v29, a12, v43);

  if (!v24) {
    goto LABEL_40;
  }
  if (!v76)
  {
    swift_bridgeObjectRelease();
    id v49 = v77;
    if (objc_msgSend(v24, sel_idiom) == v75) {
      goto LABEL_45;
    }
    goto LABEL_42;
  }
  if (!v75)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    id v49 = v77;
    goto LABEL_45;
  }
  id v44 = objc_msgSend(v24, sel_appearance);
  if (!v44)
  {

    swift_bridgeObjectRelease();
    id v24 = 0;
    id v49 = v77;
    goto LABEL_45;
  }
  unint64_t v45 = v44;
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v47;

  if (v46 == v40 && v48 == v41)
  {
    swift_bridgeObjectRelease_n();
    id v49 = v77;
    goto LABEL_45;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v49 = v77;
  if ((v50 & 1) == 0)
  {
LABEL_42:

    id v24 = 0;
  }
LABEL_45:
  uint64_t v51 = v32;
  while (v31 != ++v51)
  {
    if (!v24)
    {
      uint64_t v29 = v65;
      uint64_t v52 = &v66[2 * v32];
      int v26 = *v52;
      unsigned __int8 v27 = v52[1];
      uint64_t v32 = v51;
      a5 = v78;
      id v30 = v74;
      id v33 = &selRef_start;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease_n();
  if (v24)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v24;
  }
  uint64_t v54 = v63;
  a4 = v64;
  id v58 = v67;
  uint64_t v55 = a10;
LABEL_54:
  id v59 = v58;
  swift_bridgeObjectRetain();
  id v60 = v49;
  id v61 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(a1 & 0x101, v54, v71, 1, (2 * v68) | 1, v73, v61, v78, a6, v72, v70 & 0x10101, a9, v55, a11, a12);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return (id)v62;
}

void type metadata accessor for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>)
  {
    type metadata accessor for (ColorScheme?, ColorSchemeContrast)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAsssetIdiomKey()
{
  return &type metadata for EnvironmentValues.CUIAsssetIdiomKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAssetSubtypeKey()
{
  return &type metadata for EnvironmentValues.CUIAssetSubtypeKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.CUIAssetMatchTypesKey()
{
  return &type metadata for EnvironmentValues.CUIAssetMatchTypesKey;
}

uint64_t key path getter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle()
{
  return Duration.UnitsFormatStyle.unitWidth.getter();
}

uint64_t key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07EF0], MEMORY[0x263F07F08]);
}

uint64_t key path getter for Duration.UnitsFormatStyle.allowedUnits : Duration.UnitsFormatStyle@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.allowedUnits.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for Duration.UnitsFormatStyle.allowedUnits : Duration.UnitsFormatStyle()
{
  return Duration.UnitsFormatStyle.allowedUnits.setter();
}

uint64_t key path getter for Date.FormatStyle.calendar : Date.FormatStyle()
{
  return Date.FormatStyle.calendar.getter();
}

uint64_t key path setter for Date.FormatStyle.calendar : Date.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07920], MEMORY[0x263F07220]);
}

uint64_t key path getter for Date.VerbatimFormatStyle.calendar : Date.VerbatimFormatStyle()
{
  return Date.VerbatimFormatStyle.calendar.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.calendar : Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07920], MEMORY[0x263F07378]);
}

uint64_t static Date.FormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v9 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  uint64_t v30 = a3;
  uint64_t v31 = v9;
  uint64_t v32 = a4;
  uint64_t v33 = v13;
  unint64_t v34 = &protocol witness table for AttributedString;
  uint64_t v14 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  MEMORY[0x270FA5388](v14);
  id v16 = (char *)&v25 - v15;
  int v17 = *a2;
  uint64_t v18 = type metadata accessor for Date.FormatStyle();
  uint64_t v19 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
  uint64_t v30 = a3;
  uint64_t v31 = v18;
  uint64_t v32 = a4;
  uint64_t v33 = v19;
  unint64_t v34 = &protocol witness table for String;
  if (v17 > 1)
  {
    uint64_t v23 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v23;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_1, v29, v23);
  }
  else
  {
    uint64_t v20 = type metadata accessor for TimeDataFormatting.Resolvable();
    uint64_t v25 = a4;
    int v26 = a5;
    uint64_t v21 = v20;
    Date.FormatStyle.attributedStyle.getter();
    TimeDataFormatting.Resolvable.replacingFormat<A>(with:)((uint64_t)v12, v21, v9, v13, (uint64_t)&protocol witness table for AttributedString, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    LOBYTE(v30) = v17;
    static Date.FormatStyle.Attributed.representation<A>(of:for:)((uint64_t)v16, (char *)&v30, a3, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
}

uint64_t static Date.FormatStyle.Attributed.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v80 = a1;
  _s10Foundation8TimeZoneVSgMaTm_2(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  id v77 = (char *)&v66 - v8;
  uint64_t v76 = type metadata accessor for TimeZone();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v73 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v74 = (char *)&v66 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v81 = (char *)&v66 - v13;
  uint64_t v72 = type metadata accessor for Calendar();
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v68 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unsigned int v70 = (char *)&v66 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v69 = (char *)&v66 - v18;
  uint64_t v19 = type metadata accessor for Locale();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v66 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v66 - v27;
  uint64_t v29 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v66 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v33 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  if ((int)a2 > 1)
  {
    uint64_t v86 = v78;
    uint64_t v87 = v29;
    uint64_t v88 = v79;
    uint64_t v89 = v33;
    int v90 = &protocol witness table for AttributedString;
    uint64_t v64 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v64;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(boxed_opaque_existential_1, v80, v64);
  }
  else
  {
    id v67 = a5;
    uint64_t v86 = v78;
    uint64_t v87 = v29;
    uint64_t v88 = v79;
    uint64_t v89 = v33;
    int v90 = &protocol witness table for AttributedString;
    uint64_t v34 = v80 + *(int *)(type metadata accessor for TimeDataFormatting.Resolvable() + 60);
    uint64_t v79 = v30;
    uint64_t v80 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, v34, v29);
    long long v85 = 0uLL;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    unint64_t v35 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    unint64_t v36 = static CoreGlue2.shared;
    v35(&v85);

    swift_getKeyPath();
    MEMORY[0x24C520D60]();
    swift_release();
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v37(v25, v28, v19);
    uint64_t v38 = v85;
    v37(v22, v25, v19);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v85, (uint64_t)v22);
    swift_release();
    unint64_t v39 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39(v22, v19);
    if (*((void *)&v85 + 1))
    {
      uint64_t v40 = v85;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v38, v40);
      swift_release();
      swift_release();
    }
    swift_release();
    v39(v25, v19);
    v39(v28, v19);
    swift_getKeyPath();
    unint64_t v41 = v69;
    MEMORY[0x24C520D60]();
    swift_release();
    uint64_t v42 = v71;
    BOOL v43 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    id v44 = v70;
    uint64_t v45 = v72;
    v43(v70, v41, v72);
    uint64_t v46 = v85;
    uint64_t v47 = (uint64_t)v68;
    v43(v68, v44, v45);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v85, v47);
    swift_release();
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v48(v47, v45);
    if (*((void *)&v85 + 1))
    {
      uint64_t v49 = v85;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v46, v49);
      swift_release();
      swift_release();
    }
    swift_release();
    v48((uint64_t)v44, v45);
    v48((uint64_t)v41, v45);
    swift_getKeyPath();
    char v50 = v81;
    MEMORY[0x24C520D60]();
    swift_release();
    uint64_t v51 = v75;
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    uint64_t v53 = v74;
    uint64_t v54 = v76;
    v52(v74, v50, v76);
    uint64_t v55 = v85;
    uint64_t v56 = (uint64_t)v73;
    v52(v73, v53, v54);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v85, v56);
    swift_release();
    id v57 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    v57(v56, v54);
    id v58 = v67;
    if (*((void *)&v85 + 1))
    {
      uint64_t v59 = v85;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v55, v59);
      swift_release();
      swift_release();
    }
    swift_release();
    v57((uint64_t)v53, v54);
    v57((uint64_t)v81, v54);
    v83[0] = Date.FormatStyle.Attributed.template()();
    v83[1] = v60;
    char v84 = 1;
    swift_getKeyPath();
    uint64_t v61 = (uint64_t)v77;
    MEMORY[0x24C520D60]();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v61, 0, 1, v54);
    long long v82 = v85;
    v58[3] = type metadata accessor for ResolvableCurrentDate();
    v58[4] = (uint64_t)&protocol witness table for ResolvableCurrentDate;
    uint64_t v62 = __swift_allocate_boxed_opaque_existential_1(v58);
    ResolvableCurrentDate.init(dateFormat:timeZone:in:)((uint64_t)v83, v61, (uint64_t *)&v82, (uint64_t)v62);
    return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v32, v80);
  }
}

uint64_t sub_246082EBC()
{
  return Date.FormatStyle.locale.getter();
}

uint64_t sub_246082EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07690], MEMORY[0x263F071F0]);
}

uint64_t sub_246082F20()
{
  return Date.FormatStyle.calendar.getter();
}

uint64_t sub_246082F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07920], MEMORY[0x263F07220]);
}

uint64_t key path getter for Date.FormatStyle.timeZone : Date.FormatStyle()
{
  return Date.FormatStyle.timeZone.getter();
}

uint64_t sub_246082FA8()
{
  return Date.FormatStyle.timeZone.getter();
}

uint64_t key path setter for Date.FormatStyle.timeZone : Date.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F079C8], MEMORY[0x263F07230]);
}

uint64_t sub_246082FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F079C8], MEMORY[0x263F07230]);
}

uint64_t Date.FormatStyle.Attributed.template()()
{
  uint64_t v194 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  uint64_t v209 = *(void *)(v194 - 8);
  MEMORY[0x270FA5388](v194);
  uint64_t v193 = (char *)&v149 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v207 = *(void *)(v189 - 8);
  MEMORY[0x270FA5388](v189);
  unint64_t v188 = (char *)&v149 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  uint64_t v206 = *(void *)(v187 - 8);
  MEMORY[0x270FA5388](v187);
  char v186 = (char *)&v149 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  uint64_t v205 = *(void *)(v185 - 8);
  MEMORY[0x270FA5388](v185);
  int v184 = (char *)&v149 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  uint64_t v204 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  int v182 = (char *)&v149 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  uint64_t v203 = *(void *)(v181 - 8);
  MEMORY[0x270FA5388](v181);
  __int16 v180 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for Date.FormatStyle.Symbol.TimeZone();
  uint64_t v202 = *(void *)(v179 - 8);
  MEMORY[0x270FA5388](v179);
  uint64_t v178 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  uint64_t v201 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  uint64_t v176 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for Date.FormatStyle.Symbol.SecondFraction();
  uint64_t v200 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175);
  long long v174 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for Date.FormatStyle.Symbol.DayOfYear();
  uint64_t v199 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173);
  double v172 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for Date.FormatStyle.Symbol.Week();
  uint64_t v198 = *(void *)(v171 - 8);
  MEMORY[0x270FA5388](v171);
  uint64_t v170 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = type metadata accessor for Date.FormatStyle.Symbol.Quarter();
  uint64_t v197 = *(void *)(v169 - 8);
  MEMORY[0x270FA5388](v169);
  uint64_t v12 = (char *)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = type metadata accessor for Date.FormatStyle.Symbol.Era();
  uint64_t v13 = *(void *)(v195 - 8);
  MEMORY[0x270FA5388](v195);
  uint64_t v15 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t v208 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unsigned __int8 v191 = (char *)&v149 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unsigned __int8 v192 = (char *)&v149 - v19;
  MEMORY[0x270FA5388](v20);
  __int16 v190 = (char *)&v149 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v167 = (char *)&v149 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v149 - v25;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v149 - v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v149 - v31;
  MEMORY[0x270FA5388](v33);
  unint64_t v35 = (char *)&v149 - v34;
  MEMORY[0x270FA5388](v36);
  v159 = (char *)&v149 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v160 = (char *)&v149 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v161 = (char *)&v149 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v162 = (char *)&v149 - v43;
  MEMORY[0x270FA5388](v44);
  v166 = (char *)&v149 - v45;
  MEMORY[0x270FA5388](v46);
  v210 = (char *)&v149 - v47;
  MEMORY[0x270FA5388](v48);
  float64x2_t v168 = (char *)&v149 - v49;
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v149 - v51;
  double v54 = MEMORY[0x270FA5388](v53);
  v196 = (char *)&v149 - v55;
  MEMORY[0x24C520F60](v54);
  Date.FormatStyle.Attributed.era(_:)();
  uint64_t v56 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v163 = v15;
  uint64_t v165 = v13 + 8;
  uint64_t v164 = v56;
  v56(v15, v195);
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.quarter(_:)();
  id v57 = *(void (**)(char *, uint64_t))(v197 + 8);
  v158 = v12;
  v197 += 8;
  v151 = v57;
  v57(v12, v169);
  uint64_t v58 = v208;
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v208 + 8);
  uint64_t v60 = v59(v26, v16);
  uint64_t v61 = v170;
  MEMORY[0x24C521010](v60);
  Date.FormatStyle.Attributed.week(_:)();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v198 + 8);
  v198 += 8;
  v152 = v62;
  v62(v61, v171);
  uint64_t v63 = v59(v29, v16);
  uint64_t v64 = v172;
  MEMORY[0x24C5211D0](v63);
  Date.FormatStyle.Attributed.dayOfYear(_:)();
  uint64_t v65 = *(void (**)(char *, uint64_t))(v199 + 8);
  v199 += 8;
  v153 = v65;
  v65(v64, v173);
  v59(v32, v16);
  uint64_t v66 = v174;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  id v67 = v159;
  Date.FormatStyle.Attributed.secondFraction(_:)();
  uint64_t v68 = *(void (**)(char *, uint64_t))(v200 + 8);
  v200 += 8;
  v154 = v68;
  v68(v66, v175);
  uint64_t v69 = v59(v35, v16);
  unsigned int v70 = v176;
  MEMORY[0x24C521190](v69);
  uint64_t v71 = v160;
  Date.FormatStyle.Attributed.weekday(_:)();
  uint64_t v72 = *(void (**)(char *, uint64_t))(v201 + 8);
  v201 += 8;
  uint64_t v155 = v72;
  v72(v70, v177);
  v59(v67, v16);
  uint64_t v73 = v178;
  static Date.FormatStyle.Symbol.TimeZone.omitted.getter();
  uint64_t v74 = v161;
  Date.FormatStyle.Attributed.timeZone(_:)();
  uint64_t v75 = *(void (**)(char *, uint64_t))(v202 + 8);
  v202 += 8;
  uint64_t v156 = v75;
  v75(v73, v179);
  uint64_t v76 = v59(v71, v16);
  id v77 = v180;
  MEMORY[0x24C521110](v76);
  uint64_t v78 = v162;
  Date.FormatStyle.Attributed.second(_:)();
  uint64_t v79 = *(void (**)(char *, uint64_t))(v203 + 8);
  v203 += 8;
  uint64_t v157 = v79;
  v79(v77, v181);
  uint64_t v80 = v59(v74, v16);
  uint64_t v81 = v182;
  MEMORY[0x24C5210E0](v80);
  long long v82 = v166;
  Date.FormatStyle.Attributed.minute(_:)();
  long long v83 = *(char **)(v204 + 8);
  v204 += 8;
  v159 = v83;
  ((void (*)(char *, uint64_t))v83)(v81, v183);
  v59(v78, v16);
  char v84 = v184;
  static Date.FormatStyle.Symbol.Hour.omitted.getter();
  long long v85 = v210;
  Date.FormatStyle.Attributed.hour(_:)();
  uint64_t v86 = *(char **)(v205 + 8);
  v205 += 8;
  uint64_t v160 = v86;
  ((void (*)(char *, uint64_t))v86)(v84, v185);
  uint64_t v87 = v59(v82, v16);
  uint64_t v88 = v186;
  MEMORY[0x24C520F30](v87);
  uint64_t v89 = v168;
  Date.FormatStyle.Attributed.day(_:)();
  int v90 = *(char **)(v206 + 8);
  v206 += 8;
  uint64_t v161 = v90;
  ((void (*)(char *, uint64_t))v90)(v88, v187);
  v59(v85, v16);
  uint64_t v91 = v188;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.month(_:)();
  uint64_t v92 = *(char **)(v207 + 8);
  v207 += 8;
  uint64_t v162 = v92;
  ((void (*)(char *, uint64_t))v92)(v91, v189);
  v59(v89, v16);
  uint64_t v93 = v193;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  int v94 = v196;
  Date.FormatStyle.Attributed.year(_:)();
  BOOL v95 = *(char **)(v209 + 8);
  v209 += 8;
  v166 = v95;
  ((void (*)(char *, uint64_t))v95)(v93, v194);
  v59(v52, v16);
  v210 = (char *)lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
  uint64_t v96 = v94;
  LOBYTE(v93) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v97 = v58 + 16;
  uint64_t v98 = *(void (**)(void))(v58 + 16);
  int v99 = v167;
  v98();
  uint64_t v208 = v97;
  uint64_t v100 = ((uint64_t (*)(char *, char *, uint64_t))v98)(v190, v96, v16);
  if (v93)
  {
    v59(v190, v16);
    v59(v99, v16);
    ((void (*)(char *))v98)(v192);
    ((void (*)(char *, char *, uint64_t))v98)(v191, v96, v16);
    int v101 = v163;
LABEL_6:
    v59(v191, v16);
    uint64_t v115 = v59(v192, v16);
    goto LABEL_7;
  }
  unsigned int v102 = v163;
  MEMORY[0x24C520F50](v100);
  v150 = v59;
  uint64_t v103 = v168;
  Date.FormatStyle.Attributed.era(_:)();
  uint64_t v104 = v195;
  char v105 = v164;
  uint64_t v106 = ((uint64_t (*)(char *, uint64_t))v164)(v102, v195);
  MEMORY[0x24C520F60](v106);
  Date.FormatStyle.Attributed.era(_:)();
  v105(v102, v104);
  float64_t v107 = v103;
  uint64_t v59 = v150;
  v150(v107, v16);
  uint64_t v108 = v190;
  LOBYTE(v104) = static Date.FormatStyle.Attributed.== infix(_:_:)();
  v59(v52, v16);
  v59(v108, v16);
  v59(v167, v16);
  ((void (*)(char *))v98)(v192);
  ((void (*)(char *, char *, uint64_t))v98)(v191, v196, v16);
  int v101 = v102;
  if ((v104 & 1) == 0) {
    goto LABEL_6;
  }
  int v109 = v193;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
  uint64_t v110 = v168;
  unint64_t v111 = v192;
  Date.FormatStyle.Attributed.year(_:)();
  uint64_t v112 = v194;
  ((void (*)(char *, uint64_t))v166)(v109, v194);
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.year(_:)();
  int v101 = v163;
  ((void (*)(char *, uint64_t))v166)(v109, v112);
  uint64_t v113 = v110;
  uint64_t v59 = v150;
  v150(v113, v16);
  v114 = v191;
  LOBYTE(v112) = static Date.FormatStyle.Attributed.== infix(_:_:)();
  v59(v52, v16);
  v59(v114, v16);
  uint64_t v115 = v59(v111, v16);
  if (v112)
  {
    v59(v196, v16);
    return 0x594D646D6D6ALL;
  }
LABEL_7:
  uint64_t v211 = 0;
  unint64_t v212 = 0xE000000000000000;
  MEMORY[0x24C520F60](v115);
  Date.FormatStyle.Attributed.era(_:)();
  v164(v101, v195);
  char v117 = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v117 & 1) == 0)
  {
    v118._uint64_t countAndFlagsBits = 71;
    v118._object = (void *)0xE100000000000000;
    String.append(_:)(v118);
  }
  double v119 = v158;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.quarter(_:)();
  v151(v119, v169);
  LOBYTE(v119) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v120 = v59(v52, v16);
  if ((v119 & 1) == 0)
  {
    v121._uint64_t countAndFlagsBits = 5329233;
    v121._object = (void *)0xE300000000000000;
    String.append(_:)(v121);
  }
  double v122 = v170;
  MEMORY[0x24C521010](v120);
  Date.FormatStyle.Attributed.week(_:)();
  v152(v122, v171);
  LOBYTE(v122) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v123 = v59(v52, v16);
  if ((v122 & 1) == 0)
  {
    v124._uint64_t countAndFlagsBits = 119;
    v124._object = (void *)0xE100000000000000;
    String.append(_:)(v124);
  }
  double v125 = v172;
  MEMORY[0x24C5211D0](v123);
  Date.FormatStyle.Attributed.dayOfYear(_:)();
  v153(v125, v173);
  LOBYTE(v125) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v125 & 1) == 0)
  {
    v126._uint64_t countAndFlagsBits = 68;
    v126._object = (void *)0xE100000000000000;
    String.append(_:)(v126);
  }
  uint64_t v127 = v174;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.secondFraction(_:)();
  v154(v127, v175);
  LOBYTE(v127) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v128 = v59(v52, v16);
  if ((v127 & 1) == 0)
  {
    v129._uint64_t countAndFlagsBits = 83;
    v129._object = (void *)0xE100000000000000;
    String.append(_:)(v129);
  }
  uint64_t v130 = v176;
  MEMORY[0x24C521190](v128);
  Date.FormatStyle.Attributed.weekday(_:)();
  v155(v130, v177);
  LOBYTE(v130) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v130 & 1) == 0)
  {
    v131._uint64_t countAndFlagsBits = 4539717;
    v131._object = (void *)0xE300000000000000;
    String.append(_:)(v131);
  }
  v132 = v178;
  static Date.FormatStyle.Symbol.TimeZone.omitted.getter();
  Date.FormatStyle.Attributed.timeZone(_:)();
  v156(v132, v179);
  LOBYTE(v132) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v133 = v59(v52, v16);
  if ((v132 & 1) == 0)
  {
    v134._uint64_t countAndFlagsBits = 118;
    v134._object = (void *)0xE100000000000000;
    String.append(_:)(v134);
  }
  char v135 = v180;
  MEMORY[0x24C521110](v133);
  Date.FormatStyle.Attributed.second(_:)();
  v157(v135, v181);
  LOBYTE(v135) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v136 = v59(v52, v16);
  if ((v135 & 1) == 0)
  {
    v137._uint64_t countAndFlagsBits = 29555;
    v137._object = (void *)0xE200000000000000;
    String.append(_:)(v137);
  }
  unsigned int v138 = v182;
  MEMORY[0x24C5210E0](v136);
  Date.FormatStyle.Attributed.minute(_:)();
  ((void (*)(char *, uint64_t))v159)(v138, v183);
  LOBYTE(v138) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v138 & 1) == 0)
  {
    v139._uint64_t countAndFlagsBits = 28013;
    v139._object = (void *)0xE200000000000000;
    String.append(_:)(v139);
  }
  uint64_t v140 = v184;
  static Date.FormatStyle.Symbol.Hour.omitted.getter();
  Date.FormatStyle.Attributed.hour(_:)();
  ((void (*)(char *, uint64_t))v160)(v140, v185);
  LOBYTE(v140) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v141 = v59(v52, v16);
  if ((v140 & 1) == 0)
  {
    v142._uint64_t countAndFlagsBits = 106;
    v142._object = (void *)0xE100000000000000;
    String.append(_:)(v142);
  }
  unint64_t v143 = v186;
  MEMORY[0x24C520F30](v141);
  Date.FormatStyle.Attributed.day(_:)();
  ((void (*)(char *, uint64_t))v161)(v143, v187);
  LOBYTE(v143) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v143 & 1) == 0)
  {
    v144._uint64_t countAndFlagsBits = 100;
    v144._object = (void *)0xE100000000000000;
    String.append(_:)(v144);
  }
  float64x2_t v145 = v188;
  static Date.FormatStyle.Symbol.Month.omitted.getter();
  Date.FormatStyle.Attributed.month(_:)();
  ((void (*)(char *, uint64_t))v162)(v145, v189);
  LOBYTE(v145) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v145 & 1) == 0)
  {
    v146._uint64_t countAndFlagsBits = 77;
    v146._object = (void *)0xE100000000000000;
    String.append(_:)(v146);
  }
  v147 = v193;
  static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
  Date.FormatStyle.Attributed.year(_:)();
  ((void (*)(char *, uint64_t))v166)(v147, v194);
  LOBYTE(v147) = dispatch thunk of static Equatable.== infix(_:_:)();
  v59(v52, v16);
  if ((v147 & 1) == 0)
  {
    v148._uint64_t countAndFlagsBits = 1499027801;
    v148._object = (void *)0xE400000000000000;
    String.append(_:)(v148);
  }
  v59(v196, v16);
  return v211;
}

uint64_t static Date.VerbatimFormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v9 = type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  uint64_t v30 = a3;
  uint64_t v31 = v9;
  uint64_t v32 = a4;
  uint64_t v33 = v13;
  uint64_t v34 = &protocol witness table for AttributedString;
  uint64_t v14 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  int v17 = *a2;
  uint64_t v18 = type metadata accessor for Date.VerbatimFormatStyle();
  uint64_t v19 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, MEMORY[0x263F073A0]);
  uint64_t v30 = a3;
  uint64_t v31 = v18;
  uint64_t v32 = a4;
  uint64_t v33 = v19;
  uint64_t v34 = &protocol witness table for String;
  if (v17 > 1)
  {
    uint64_t v23 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v23;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_1, v29, v23);
  }
  else
  {
    uint64_t v20 = type metadata accessor for TimeDataFormatting.Resolvable();
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    uint64_t v21 = v20;
    Date.VerbatimFormatStyle.attributedStyle.getter();
    TimeDataFormatting.Resolvable.replacingFormat<A>(with:)((uint64_t)v12, v21, v9, v13, (uint64_t)&protocol witness table for AttributedString, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    LOBYTE(v30) = v17;
    static Date.VerbatimFormatStyle.Attributed.representation<A>(of:for:)((uint64_t)v16, (char *)&v30, a3, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
}

uint64_t static Date.VerbatimFormatStyle.Attributed.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v87 = a4;
  uint64_t v86 = a3;
  uint64_t v88 = a1;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  _s10Foundation8TimeZoneVSgMaTm_2(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  long long v85 = (char *)&v76 - v9;
  uint64_t v84 = type metadata accessor for TimeZone();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  long long v82 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v92 = (char *)&v76 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v91 = (char *)&v76 - v14;
  uint64_t v81 = type metadata accessor for Calendar();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v79 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v90 = (char *)&v76 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v89 = (char *)&v76 - v19;
  _s10Foundation8TimeZoneVSgMaTm_2(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], v7);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v76 - v21;
  uint64_t v23 = type metadata accessor for Locale();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v78 = (char *)&v76 - v28;
  MEMORY[0x270FA5388](v29);
  id v77 = (char *)&v76 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v76 - v32;
  uint64_t v34 = type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v37 = (char *)&v76 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v38 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  if ((int)a2 > 1)
  {
    uint64_t v97 = v86;
    uint64_t v98 = v34;
    uint64_t v99 = v87;
    uint64_t v100 = v38;
    int v101 = &protocol witness table for AttributedString;
    uint64_t v43 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v43;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(boxed_opaque_existential_1, v88, v43);
  }
  else
  {
    uint64_t v76 = a5;
    uint64_t v97 = v86;
    uint64_t v98 = v34;
    uint64_t v99 = v87;
    uint64_t v100 = v38;
    int v101 = &protocol witness table for AttributedString;
    uint64_t v39 = v88 + *(int *)(type metadata accessor for TimeDataFormatting.Resolvable() + 60);
    uint64_t v87 = v35;
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    uint64_t v88 = v34;
    v40(v37, v39, v34);
    long long v96 = 0uLL;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v41 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v42 = static CoreGlue2.shared;
    v41(&v96);

    swift_getKeyPath();
    MEMORY[0x24C5213A0]();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    {
      outlined destroy of Locale?((uint64_t)v22);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v33, v22, v23);
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
      uint64_t v47 = v77;
      v46(v77, v33, v23);
      uint64_t v48 = v78;
      v46(v78, v47, v23);
      uint64_t v49 = v96;
      v46(v26, v48, v23);
      swift_retain_n();
      specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v96, (uint64_t)v26);
      swift_release();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v24 + 8);
      v50(v26, v23);
      if (*((void *)&v96 + 1))
      {
        uint64_t v51 = v96;
        swift_retain();
        swift_retain();
        specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v49, v51);
        swift_release();
        swift_release();
      }
      swift_release();
      v50(v78, v23);
      v50(v77, v23);
      v50(v33, v23);
    }
    swift_getKeyPath();
    uint64_t v52 = v89;
    MEMORY[0x24C5213A0]();
    swift_release();
    uint64_t v53 = v80;
    double v54 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
    uint64_t v55 = v90;
    uint64_t v56 = v52;
    uint64_t v57 = v81;
    v54(v90, v56, v81);
    uint64_t v58 = v96;
    uint64_t v59 = (uint64_t)v79;
    v54(v79, v55, v57);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v96, v59);
    uint64_t v86 = 0;
    swift_release();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v60(v59, v57);
    uint64_t v61 = v76;
    uint64_t v62 = v84;
    uint64_t v63 = v83;
    if (*((void *)&v96 + 1))
    {
      uint64_t v64 = v76;
      uint64_t v65 = v96;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v58, v65);
      swift_release();
      uint64_t v61 = v64;
      swift_release();
    }
    swift_release();
    v60((uint64_t)v90, v57);
    v60((uint64_t)v89, v57);
    swift_getKeyPath();
    uint64_t v66 = v91;
    MEMORY[0x24C5213A0]();
    swift_release();
    id v67 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    uint64_t v68 = v92;
    v67(v92, v66, v62);
    uint64_t v69 = v96;
    uint64_t v70 = (uint64_t)v82;
    v67(v82, v68, v62);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v96, v70);
    swift_release();
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    v71(v70, v62);
    if (*((void *)&v96 + 1))
    {
      uint64_t v72 = v96;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v69, v72);
      swift_release();
      swift_release();
    }
    swift_release();
    v71((uint64_t)v92, v62);
    v71((uint64_t)v91, v62);
    v94[0] = Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
    v94[1] = v73;
    char v95 = 0;
    swift_getKeyPath();
    uint64_t v74 = (uint64_t)v85;
    MEMORY[0x24C5213A0]();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v74, 0, 1, v62);
    long long v93 = v96;
    v61[3] = type metadata accessor for ResolvableCurrentDate();
    v61[4] = (uint64_t)&protocol witness table for ResolvableCurrentDate;
    uint64_t v75 = __swift_allocate_boxed_opaque_existential_1(v61);
    ResolvableCurrentDate.init(dateFormat:timeZone:in:)((uint64_t)v94, v74, (uint64_t *)&v93, (uint64_t)v75);
    return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v37, v88);
  }
}

uint64_t sub_246085764()
{
  return Date.VerbatimFormatStyle.locale.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.locale : Date.VerbatimFormatStyle(uint64_t a1)
{
  _s10Foundation8TimeZoneVSgMaTm_2(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v2 - 8);
  outlined init with copy of Locale?(a1, (uint64_t)&v5 - v3);
  return Date.VerbatimFormatStyle.locale.setter();
}

uint64_t sub_246085840()
{
  return Date.VerbatimFormatStyle.calendar.getter();
}

uint64_t sub_246085864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07920], MEMORY[0x263F07378]);
}

uint64_t key path getter for Date.VerbatimFormatStyle.timeZone : Date.VerbatimFormatStyle()
{
  return Date.VerbatimFormatStyle.timeZone.getter();
}

uint64_t sub_2460858C8()
{
  return Date.VerbatimFormatStyle.timeZone.getter();
}

uint64_t key path setter for Date.VerbatimFormatStyle.timeZone : Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F079C8], MEMORY[0x263F07388]);
}

uint64_t sub_246085918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F079C8], MEMORY[0x263F07388]);
}

uint64_t Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for Date.VerbatimFormatStyle.Attributed();
  lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, MEMORY[0x263F07358]);
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  swift_release();
  lazy protocol witness table accessor for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v0, v2);
  swift_release();
  return v4;
}

uint64_t static Date.ComponentsFormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void)@<X3>, uint64_t *a5@<X8>)
{
  v147 = a4;
  uint64_t v148 = a1;
  uint64_t v125 = type metadata accessor for Date.ComponentsFormatStyle.Style();
  uint64_t v124 = *(void *)(v125 - 8);
  MEMORY[0x270FA5388](v125);
  double v122 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v123 = (char *)&v119 - v10;
  type metadata accessor for Range<Date>();
  Swift::String v137 = v11;
  MEMORY[0x270FA5388](v11);
  unsigned int v138 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v149 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  Swift::String v126 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  Swift::String v139 = (char *)&v119 - v16;
  MEMORY[0x270FA5388](v17);
  float64x2_t v145 = (char *)&v119 - v18;
  uint64_t v143 = type metadata accessor for Calendar();
  uint64_t v136 = *(void *)(v143 - 8);
  MEMORY[0x270FA5388](v143);
  char v135 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v128 = (char *)&v119 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v130 = (char *)&v119 - v23;
  MEMORY[0x270FA5388](v24);
  Swift::String v129 = (char *)&v119 - v25;
  uint64_t v146 = type metadata accessor for Locale();
  v150 = *(void (**)(char *, uint64_t))(v146 - 8);
  MEMORY[0x270FA5388](v146);
  Swift::String v134 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)&v119 - v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v119 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v119 - v34;
  uint64_t v36 = type metadata accessor for Date.ComponentsFormatStyle();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  Swift::String v131 = (char *)&v119 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  v132 = (char *)&v119 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v133 = (char *)&v119 - v42;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v119 - v44;
  LODWORD(a2) = *a2;
  uint64_t v46 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, MEMORY[0x263F07408]);
  if ((int)a2 > 1)
  {
    uint64_t v158 = a3;
    uint64_t v159 = v36;
    uint64_t v160 = v147;
    uint64_t v161 = v46;
    uint64_t v162 = &protocol witness table for String;
    uint64_t v90 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v90;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v90 - 8) + 16))(boxed_opaque_existential_1, v148, v90);
  }
  else
  {
    uint64_t v141 = v13;
    Swift::String v121 = a5;
    uint64_t v120 = a3;
    uint64_t v158 = a3;
    uint64_t v159 = v36;
    uint64_t v160 = v147;
    uint64_t v161 = v46;
    uint64_t v162 = &protocol witness table for String;
    uint64_t v47 = v148 + *(int *)(type metadata accessor for TimeDataFormatting.Resolvable() + 60);
    uint64_t v144 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v45, v47, v36);
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v48 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v49 = static CoreGlue2.shared;
    v48(&v156);

    Date.ComponentsFormatStyle.locale.getter();
    uint64_t v50 = v150;
    uint64_t v51 = (void (*)(char *, char *, uint64_t))*((void *)v150 + 2);
    uint64_t v52 = v146;
    v51(v32, v35, v146);
    uint64_t v53 = v156;
    v51(v29, v32, v52);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v156, (uint64_t)v29);
    swift_release();
    double v54 = (void (*)(char *, uint64_t))*((void *)v50 + 1);
    v150 = (void (*)(char *, uint64_t))((char *)v50 + 8);
    uint64_t v127 = v54;
    v54(v29, v52);
    uint64_t v55 = v149;
    if (v157)
    {
      uint64_t v56 = v156;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v53, v56);
      swift_release();
      swift_release();
    }
    uint64_t v140 = v36;
    swift_release();
    uint64_t v57 = v146;
    uint64_t v58 = v127;
    v127(v32, v146);
    v58(v35, v57);
    uint64_t v59 = v129;
    Swift::String v142 = v45;
    Date.ComponentsFormatStyle.calendar.getter();
    uint64_t v60 = v136;
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v136 + 16);
    uint64_t v62 = v130;
    uint64_t v63 = v143;
    v61(v130, v59, v143);
    uint64_t v64 = v156;
    uint64_t v65 = (uint64_t)v128;
    v61(v128, v62, v63);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v156, v65);
    uint64_t v119 = 0;
    swift_release();
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v66(v65, v63);
    id v67 = v147;
    uint64_t v68 = v120;
    if (v157)
    {
      uint64_t v69 = v156;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v64, v69);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v70 = v143;
    v66((uint64_t)v62, v143);
    v66((uint64_t)v59, v70);
    uint64_t v71 = (uint64_t)v139;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v72 = (uint64_t)v138;
    (*((void (**)(uint64_t, uint64_t, void (*)(void, void)))v67 + 5))(v71, v68, v67);
    uint64_t v73 = v141;
    v147 = *(void (**)(void, void))(v55 + 8);
    uint64_t v148 = v55 + 8;
    v147(v71, v141);
    uint64_t v74 = v72 + v137[9];
    uint64_t v75 = *(int **)(v55 + 16);
    uint64_t v149 = v55 + 16;
    Swift::String v137 = v75;
    ((void (*)(char *, uint64_t, uint64_t))v75)(v145, v74, v73);
    outlined destroy of Range<Date>(v72);
    uint64_t v76 = v131;
    static FormatStyle<>.timeDuration.getter();
    id v77 = v135;
    Date.ComponentsFormatStyle.calendar.getter();
    uint64_t v78 = v132;
    Date.ComponentsFormatStyle.calendar(_:)();
    v66((uint64_t)v77, v70);
    uint64_t v80 = v144 + 8;
    uint64_t v79 = *(void (**)(char *, uint64_t))(v144 + 8);
    uint64_t v81 = v140;
    v79(v76, v140);
    long long v82 = v134;
    Date.ComponentsFormatStyle.locale.getter();
    uint64_t v83 = v133;
    Date.ComponentsFormatStyle.locale(_:)();
    v127(v82, v146);
    v79(v78, v81);
    lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle, MEMORY[0x263F07408]);
    LOBYTE(v82) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v144 = v80;
    v150 = v79;
    v79(v83, v81);
    if (v82)
    {
      uint64_t v84 = v145;
      uint64_t v85 = v141;
      ((void (*)(uint64_t, char *, uint64_t))v137)(v71, v145, v141);
      if (one-time initialization token for timer != -1) {
        swift_once();
      }
      v153[0] = static Text.DateStyle.timer;
      uint64_t v154 = qword_268EFC3D0;
      char v155 = byte_268EFC3D8;
      uint64_t v151 = v156;
      uint64_t v152 = v157;
      uint64_t v86 = type metadata accessor for ResolvableAbsoluteDate();
      uint64_t v87 = v121;
      v121[3] = v86;
      v87[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
      uint64_t v88 = __swift_allocate_boxed_opaque_existential_1(v87);
      swift_retain();
      swift_retain();
      ResolvableAbsoluteDate.init(_:style:in:)(v71, v153, &v151, (uint64_t)v88);
      v147(v84, v85);
      swift_release();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v150)(v142, v140);
    }
    else
    {
      uint64_t v92 = (void (*)(uint64_t, char *, uint64_t))v137;
      long long v93 = v123;
      Date.ComponentsFormatStyle.style.getter();
      int v94 = v122;
      static Date.ComponentsFormatStyle.Style.narrow.getter();
      lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style, MEMORY[0x263F073C0]);
      uint64_t v95 = v125;
      char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v97 = *(void (**)(char *, uint64_t))(v124 + 8);
      v97(v94, v95);
      uint64_t v98 = v141;
      if (v96)
      {
        v97(v93, v95);
        char v99 = 0;
        uint64_t v100 = (uint64_t)v126;
      }
      else
      {
        static Date.ComponentsFormatStyle.Style.abbreviated.getter();
        char v101 = dispatch thunk of static Equatable.== infix(_:_:)();
        v97(v94, v95);
        unsigned int v102 = v126;
        if (v101)
        {
          v97(v93, v95);
          char v99 = 1;
        }
        else
        {
          static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
          char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
          v97(v94, v95);
          v97(v93, v95);
          if (v103) {
            char v99 = 1;
          }
          else {
            char v99 = 2;
          }
        }
        uint64_t v100 = (uint64_t)v102;
      }
      uint64_t v104 = v145;
      v92(v100, v145, v98);
      uint64_t v105 = Date.ComponentsFormatStyle.fields.getter();
      if (v105)
      {
        uint64_t v106 = v105;
      }
      else
      {
        _s10Foundation8TimeZoneVSgMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
        type metadata accessor for Date.ComponentsFormatStyle.Field();
        uint64_t v107 = swift_allocObject();
        *(_OWORD *)(v107 + 16) = xmmword_2461BE290;
        static Date.ComponentsFormatStyle.Style.wide.getter();
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        static Date.ComponentsFormatStyle.Style.spellOut.getter();
        static Date.ComponentsFormatStyle.Field.minute.getter();
        uint64_t v98 = v141;
        static Date.ComponentsFormatStyle.Field.second.getter();
        uint64_t v106 = specialized Set.init(_nonEmptyArrayLiteral:)(v107);
        swift_setDeallocating();
        uint64_t v104 = v145;
        swift_arrayDestroy();
        swift_deallocClassInstance();
      }
      uint64_t v108 = swift_bridgeObjectRetain();
      uint64_t v109 = specialized Sequence.compactMap<A>(_:)(v108, v106);
      swift_bridgeObjectRelease_n();
      uint64_t v110 = *(void *)(v109 + 16);
      if (v110)
      {
        uint64_t v111 = 0;
        uint64_t v112 = (uint64_t *)(v109 + 32);
        uint64_t v113 = v142;
        do
        {
          uint64_t v115 = *v112++;
          uint64_t v114 = v115;
          if ((v115 & ~v111) == 0) {
            uint64_t v114 = 0;
          }
          v111 |= v114;
          --v110;
        }
        while (v110);
      }
      else
      {
        uint64_t v111 = 0;
        uint64_t v113 = v142;
      }
      swift_bridgeObjectRelease();
      v153[0] = 2;
      uint64_t v154 = v111;
      char v155 = v99;
      uint64_t v151 = v156;
      uint64_t v152 = v157;
      uint64_t v116 = type metadata accessor for ResolvableAbsoluteDate();
      char v117 = v121;
      v121[3] = v116;
      v117[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
      Swift::String v118 = __swift_allocate_boxed_opaque_existential_1(v117);
      swift_retain();
      swift_retain();
      ResolvableAbsoluteDate.init(_:style:in:)(v100, v153, &v151, (uint64_t)v118);
      v147(v104, v98);
      swift_release();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v150)(v113, v140);
    }
  }
}

uint64_t static Date.AnchoredRelativeFormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v85 = a3;
  uint64_t v86 = a4;
  uint64_t v87 = a1;
  uint64_t v7 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v84 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  uint64_t v82 = *(void *)(v9 - 8);
  uint64_t v83 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v80 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v81 = (char *)v73 - v12;
  uint64_t v79 = type metadata accessor for Calendar();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v75 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v77 = (char *)v73 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (char *)v73 - v17;
  uint64_t v18 = type metadata accessor for Locale();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v73 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v73 - v26;
  uint64_t v28 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v32 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle, MEMORY[0x263F07458]);
  if ((int)a2 > 1)
  {
    long long v93 = v85;
    uint64_t v94 = v28;
    uint64_t v95 = v86;
    uint64_t v96 = v32;
    uint64_t v97 = &protocol witness table for String;
    uint64_t v58 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v58;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(boxed_opaque_existential_1, v87, v58);
  }
  else
  {
    uint64_t v74 = a5;
    long long v93 = v85;
    uint64_t v94 = v28;
    uint64_t v95 = v86;
    uint64_t v96 = v32;
    uint64_t v97 = &protocol witness table for String;
    uint64_t v33 = v87 + *(int *)(type metadata accessor for TimeDataFormatting.Resolvable() + 60);
    uint64_t v86 = v29;
    uint64_t v87 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, v33, v28);
    long long v92 = 0uLL;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v34 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v35 = static CoreGlue2.shared;
    v34(&v92);

    Date.AnchoredRelativeFormatStyle.locale.getter();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v36(v24, v27, v18);
    uint64_t v37 = v92;
    v36(v21, v24, v18);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v92, (uint64_t)v21);
    swift_release();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v19 + 8);
    v38(v21, v18);
    if (*((void *)&v92 + 1))
    {
      uint64_t v39 = v92;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v37, v39);
      swift_release();
      swift_release();
    }
    swift_release();
    v38(v24, v18);
    v38(v27, v18);
    uint64_t v40 = v76;
    uint64_t v85 = v31;
    Date.AnchoredRelativeFormatStyle.calendar.getter();
    uint64_t v41 = v78;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
    uint64_t v43 = v77;
    uint64_t v44 = v79;
    v42(v77, v40, v79);
    uint64_t v45 = v92;
    uint64_t v46 = (uint64_t)v75;
    v42(v75, v43, v44);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v92, v46);
    v73[1] = 0;
    swift_release();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v47(v46, v44);
    if (*((void *)&v92 + 1))
    {
      uint64_t v48 = v92;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v45, v48);
      swift_release();
      swift_release();
    }
    swift_release();
    v47((uint64_t)v43, v44);
    v47((uint64_t)v40, v44);
    uint64_t v49 = v81;
    uint64_t v50 = v85;
    Date.AnchoredRelativeFormatStyle.unitsStyle.getter();
    uint64_t v51 = v80;
    static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
    lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle, MEMORY[0x263F07310]);
    uint64_t v52 = v83;
    char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v54 = *(void (**)(char *, uint64_t))(v82 + 8);
    v54(v51, v52);
    uint64_t v55 = v74;
    uint64_t v56 = v86;
    if (v53)
    {
      v54(v49, v52);
      char v57 = 0;
    }
    else
    {
      static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
      char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
      v54(v51, v52);
      v54(v49, v52);
      if (v61) {
        char v57 = 1;
      }
      else {
        char v57 = 2;
      }
    }
    uint64_t v62 = v50;
    if (one-time initialization token for offset != -1) {
      swift_once();
    }
    char v63 = static Text.DateStyle.offset;
    uint64_t v64 = Date.AnchoredRelativeFormatStyle.allowedFields.getter();
    uint64_t v65 = specialized Sequence.compactMap<A>(_:)(v64, v64);
    swift_bridgeObjectRelease();
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66)
    {
      uint64_t v67 = 0;
      uint64_t v68 = (uint64_t *)(v65 + 32);
      do
      {
        uint64_t v70 = *v68++;
        uint64_t v69 = v70;
        if ((v70 & ~v67) == 0) {
          uint64_t v69 = 0;
        }
        v67 |= v69;
        --v66;
      }
      while (v66);
    }
    else
    {
      uint64_t v67 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v71 = (uint64_t)v84;
    Date.AnchoredRelativeFormatStyle.anchor.getter();
    v89[0] = v63;
    uint64_t v90 = v67;
    char v91 = v57;
    long long v88 = v92;
    v55[3] = type metadata accessor for ResolvableAbsoluteDate();
    v55[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    uint64_t v72 = __swift_allocate_boxed_opaque_existential_1(v55);
    ResolvableAbsoluteDate.init(_:style:in:)(v71, v89, (uint64_t *)&v88, (uint64_t)v72);
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v62, v87);
  }
}

uint64_t static Duration.TimeFormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v9 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, MEMORY[0x263F07E58]);
  uint64_t v30 = a3;
  uint64_t v31 = v9;
  uint64_t v32 = a4;
  uint64_t v33 = v13;
  uint64_t v34 = &protocol witness table for AttributedString;
  uint64_t v14 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  int v17 = *a2;
  uint64_t v18 = type metadata accessor for Duration.TimeFormatStyle();
  uint64_t v19 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, MEMORY[0x263F07E80]);
  uint64_t v30 = a3;
  uint64_t v31 = v18;
  uint64_t v32 = a4;
  uint64_t v33 = v19;
  uint64_t v34 = &protocol witness table for String;
  if (v17 > 1)
  {
    uint64_t v23 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v23;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_1, v29, v23);
  }
  else
  {
    uint64_t v20 = type metadata accessor for TimeDataFormatting.Resolvable();
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    uint64_t v21 = v20;
    Duration.TimeFormatStyle.attributed.getter();
    TimeDataFormatting.Resolvable.replacingFormat<A>(with:)((uint64_t)v12, v21, v9, v13, (uint64_t)&protocol witness table for AttributedString, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    LOBYTE(v30) = v17;
    static Duration.TimeFormatStyle.Attributed.representation<A>(of:for:)((uint64_t)v16, (char *)&v30, a3, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
}

uint64_t static Duration.TimeFormatStyle.Attributed.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v108 = a1;
  uint64_t v9 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v9 - 8);
  long long v92 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  uint64_t v106 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  char v103 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for Duration.TimeFormatStyle();
  uint64_t v107 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  char v101 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v91 = (char *)&v84 - v14;
  MEMORY[0x270FA5388](v15);
  char v99 = (char *)&v84 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v100 = (char *)&v84 - v18;
  uint64_t v97 = type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v97);
  uint64_t v94 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for AttributedString();
  uint64_t v95 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  long long v93 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Locale();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v109 = v21;
  uint64_t v110 = v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v90 = (uint64_t)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v98 = (uint64_t)&v84 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v84 - v27;
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v84 - v30;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v84 - v33;
  uint64_t v35 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)&v84 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v39 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, MEMORY[0x263F07E58]);
  if ((int)a2 > 1)
  {
    uint64_t v120 = a3;
    uint64_t v121 = v35;
    uint64_t v122 = a4;
    uint64_t v123 = v39;
    uint64_t v124 = &protocol witness table for AttributedString;
    uint64_t v60 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v60;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(boxed_opaque_existential_1, v108, v60);
  }
  else
  {
    uint64_t v87 = a5;
    uint64_t v89 = a3;
    uint64_t v120 = a3;
    uint64_t v121 = v35;
    uint64_t v86 = a4;
    uint64_t v122 = a4;
    uint64_t v123 = v39;
    uint64_t v124 = &protocol witness table for AttributedString;
    uint64_t v40 = type metadata accessor for TimeDataFormatting.Resolvable();
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v38, v108 + *(int *)(v40 + 60), v35);
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v88 = v35;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v41 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v42 = static CoreGlue2.shared;
    v41(&v118);

    swift_getKeyPath();
    Duration.TimeFormatStyle.Attributed.subscript.getter();
    swift_release();
    uint64_t v44 = v109;
    uint64_t v43 = v110;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    v45(v31, v34, v109);
    uint64_t v46 = v118;
    v45(v28, v31, v44);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v118, (uint64_t)v28);
    swift_release();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    uint64_t v110 = v43 + 8;
    unsigned int v102 = v47;
    v47(v28, v44);
    if (v119)
    {
      uint64_t v48 = v118;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v46, v48);
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v49 = v109;
    uint64_t v50 = v102;
    v102(v31, v109);
    v50(v34, v49);
    uint64_t v51 = v93;
    Duration.TimeFormatStyle.Attributed.format(_:)();
    AttributedString.characters.getter();
    lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    uint64_t v52 = String.init<A>(_:)();
    uint64_t v54 = v53;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v51, v96);
    uint64_t v111 = v52;
    uint64_t v112 = v54;
    uint64_t v97 = v54;
    uint64_t v55 = v103;
    static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter();
    uint64_t v56 = v99;
    static FormatStyle<>.time(pattern:)();
    char v57 = *(void (**)(char *, uint64_t))(v106 + 8);
    v106 += 8;
    v57(v55, v104);
    uint64_t v58 = v118;
    if (v119)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v59 = v98;
      specialized PropertyList.Tracker.value<A>(_:for:)(v58, v98);
      swift_release_n();
    }
    else
    {
      uint64_t v63 = swift_retain_n();
      uint64_t v59 = v98;
      specialized closure #1 in PropertyList.subscript.getter(v63, v98);
      swift_release();
    }
    swift_release_n();
    uint64_t v64 = v100;
    Duration.TimeFormatStyle.locale(_:)();
    v102((char *)v59, v109);
    uint64_t v65 = v107 + 8;
    uint64_t v66 = *(void (**)(char *, uint64_t))(v107 + 8);
    uint64_t v67 = v105;
    v66(v56, v105);
    lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, MEMORY[0x263F07E80]);
    Duration.formatted<A>(_:)();
    uint64_t v107 = v65;
    v66(v64, v67);
    uint64_t v114 = v116;
    uint64_t v115 = v117;
    lazy protocol witness table accessor for type String and conformance String();
    LOBYTE(v67) = StringProtocol.contains<A>(_:)();
    swift_bridgeObjectRelease();
    if (v67)
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = 224;
      uint64_t v69 = v87;
      uint64_t v70 = (uint64_t)v92;
      uint64_t v71 = v86;
    }
    else
    {
      uint64_t v111 = v52;
      uint64_t v112 = v97;
      uint64_t v72 = v103;
      static Duration.TimeFormatStyle.Pattern.minuteSecond.getter();
      static FormatStyle<>.time(pattern:)();
      v57(v72, v104);
      uint64_t v73 = v118;
      uint64_t v85 = v38;
      if (v119)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v74 = v90;
        specialized PropertyList.Tracker.value<A>(_:for:)(v73, v90);
        uint64_t v75 = v74;
        swift_release_n();
      }
      else
      {
        uint64_t v76 = swift_retain_n();
        uint64_t v75 = v90;
        specialized closure #1 in PropertyList.subscript.getter(v76, v90);
        swift_release();
      }
      uint64_t v69 = v87;
      uint64_t v70 = (uint64_t)v92;
      uint64_t v71 = v86;
      swift_release_n();
      id v77 = v91;
      uint64_t v78 = v75;
      uint64_t v79 = v101;
      Duration.TimeFormatStyle.locale(_:)();
      v102((char *)v78, v109);
      uint64_t v80 = v79;
      uint64_t v81 = v105;
      v66(v80, v105);
      Duration.formatted<A>(_:)();
      v66(v77, v81);
      uint64_t v114 = v116;
      uint64_t v115 = v117;
      LOBYTE(v81) = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v81) {
        uint64_t v68 = 192;
      }
      else {
        uint64_t v68 = 96;
      }
      uint64_t v38 = v85;
    }
    uint64_t v111 = static Duration.zero.getter();
    uint64_t v112 = v82;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v71 + 48))(&v111, v89, v71);
    LOBYTE(v111) = 4;
    uint64_t v112 = v68;
    char v113 = 2;
    uint64_t v116 = v118;
    uint64_t v117 = v119;
    v69[3] = type metadata accessor for ResolvableAbsoluteDate();
    v69[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    uint64_t v83 = __swift_allocate_boxed_opaque_existential_1(v69);
    swift_retain();
    swift_retain();
    ResolvableAbsoluteDate.init(_:style:in:)(v70, (char *)&v111, &v116, (uint64_t)v83);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v88);
    swift_release();
    return swift_release();
  }
}

uint64_t static Duration.UnitsFormatStyle.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v29 = a1;
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
  uint64_t v30 = a3;
  uint64_t v31 = v9;
  uint64_t v32 = a4;
  uint64_t v33 = v13;
  uint64_t v34 = &protocol witness table for AttributedString;
  uint64_t v14 = type metadata accessor for TimeDataFormatting.Resolvable();
  uint64_t v27 = *(void *)(v14 - 8);
  uint64_t v28 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v25 - v15;
  int v17 = *a2;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v19 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, MEMORY[0x263F07F20]);
  uint64_t v30 = a3;
  uint64_t v31 = v18;
  uint64_t v32 = a4;
  uint64_t v33 = v19;
  uint64_t v34 = &protocol witness table for String;
  if (v17 > 1)
  {
    uint64_t v23 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v23;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_1, v29, v23);
  }
  else
  {
    uint64_t v20 = type metadata accessor for TimeDataFormatting.Resolvable();
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    uint64_t v21 = v20;
    Duration.UnitsFormatStyle.attributed.getter();
    TimeDataFormatting.Resolvable.replacingFormat<A>(with:)((uint64_t)v12, v21, v9, v13, (uint64_t)&protocol witness table for AttributedString, (uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    LOBYTE(v30) = v17;
    static Duration.UnitsFormatStyle.Attributed.representation<A>(of:for:)((uint64_t)v16, (char *)&v30, a3, v25, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  }
}

uint64_t static Duration.UnitsFormatStyle.Attributed.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v81 = a1;
  uint64_t v9 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v79 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v76 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  id v77 = (char *)&v68 - v15;
  uint64_t v16 = type metadata accessor for Locale();
  uint64_t v75 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v74 = (char *)&v68 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v80 = (char *)&v68 - v22;
  uint64_t v23 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v27 = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, MEMORY[0x263F07EA0]);
  if ((int)a2 > 1)
  {
    uint64_t v87 = a3;
    uint64_t v88 = v23;
    uint64_t v89 = a4;
    uint64_t v90 = v27;
    char v91 = &protocol witness table for AttributedString;
    uint64_t v51 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v51;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(boxed_opaque_existential_1, v81, v51);
  }
  else
  {
    uint64_t v72 = v11;
    uint64_t v73 = a5;
    uint64_t v68 = a3;
    uint64_t v87 = a3;
    uint64_t v88 = v23;
    uint64_t v69 = a4;
    uint64_t v89 = a4;
    uint64_t v90 = v27;
    char v91 = &protocol witness table for AttributedString;
    uint64_t v28 = v81 + *(int *)(type metadata accessor for TimeDataFormatting.Resolvable() + 60);
    uint64_t v70 = v24;
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v71 = v23;
    v29(v26, v28, v23);
    long long v86 = 0uLL;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v30 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v31 = static CoreGlue2.shared;
    v30(&v86);

    swift_getKeyPath();
    uint64_t v32 = v80;
    uint64_t v33 = v26;
    Duration.UnitsFormatStyle.Attributed.subscript.getter();
    swift_release();
    uint64_t v34 = v75;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    uint64_t v36 = v74;
    v35(v74, v32, v16);
    uint64_t v37 = v86;
    v35(v18, v36, v16);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v86, (uint64_t)v18);
    swift_release();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    v38(v18, v16);
    uint64_t v39 = v79;
    if (*((void *)&v86 + 1))
    {
      uint64_t v40 = v86;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v37, v40);
      swift_release();
      swift_release();
    }
    swift_release();
    v38(v36, v16);
    v38(v80, v16);
    swift_getKeyPath();
    uint64_t v41 = v77;
    uint64_t v42 = v33;
    Duration.UnitsFormatStyle.Attributed.subscript.getter();
    swift_release();
    uint64_t v43 = v76;
    static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
    lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, MEMORY[0x263F07EF0]);
    char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v45 = *(void (**)(char *, uint64_t))(v78 + 8);
    v45(v43, v39);
    if (v44)
    {
      v45(v41, v39);
      char v46 = 0;
      uint64_t v47 = (uint64_t)v72;
      uint64_t v48 = v70;
      uint64_t v49 = v69;
      uint64_t v50 = v68;
    }
    else
    {
      uint64_t v78 = 0;
      uint64_t v80 = v33;
      static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter();
      uint64_t v54 = v39;
      char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
      v45(v43, v39);
      uint64_t v56 = v43;
      uint64_t v49 = v69;
      uint64_t v50 = v68;
      if (v55)
      {
        v45(v41, v54);
        char v46 = 1;
      }
      else
      {
        static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
        char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
        v45(v56, v54);
        v45(v41, v54);
        if (v57) {
          char v46 = 1;
        }
        else {
          char v46 = 2;
        }
      }
      uint64_t v42 = v80;
      uint64_t v48 = v70;
      uint64_t v47 = (uint64_t)v72;
    }
    uint64_t v83 = static Duration.zero.getter();
    uint64_t v84 = v58;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(&v83, v50, v49);
    swift_getKeyPath();
    Duration.UnitsFormatStyle.Attributed.subscript.getter();
    swift_release();
    uint64_t v59 = specialized Sequence.compactMap<A>(_:)(v83);
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void *)(v59 + 16);
    if (v60)
    {
      uint64_t v61 = 0;
      uint64_t v62 = (uint64_t *)(v59 + 32);
      uint64_t v63 = v73;
      uint64_t v64 = v71;
      do
      {
        uint64_t v66 = *v62++;
        uint64_t v65 = v66;
        if ((v66 & ~v61) == 0) {
          uint64_t v65 = 0;
        }
        v61 |= v65;
        --v60;
      }
      while (v60);
    }
    else
    {
      uint64_t v61 = 0;
      uint64_t v63 = v73;
      uint64_t v64 = v71;
    }
    swift_bridgeObjectRelease();
    LOBYTE(v83) = 2;
    uint64_t v84 = v61;
    char v85 = v46;
    long long v82 = v86;
    v63[3] = type metadata accessor for ResolvableAbsoluteDate();
    v63[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    uint64_t v67 = __swift_allocate_boxed_opaque_existential_1(v63);
    ResolvableAbsoluteDate.init(_:style:in:)(v47, (char *)&v83, (uint64_t *)&v82, (uint64_t)v67);
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v42, v64);
  }
}

uint64_t key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return a6(v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return 0x615074616D726F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x615074616D726F66 && a2 == 0xED00006E72657474)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v15 = a2;
  type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>, (void (*)(void))lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  double v9 = v15;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *double v9 = v10;
  v9[1] = v12;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();

  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized init(from:) in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t outlined destroy of Range<Date>(uint64_t a1)
{
  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _s10Foundation8TimeZoneVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_246089448()
{
  return Duration.TimeFormatStyle.locale.getter();
}

uint64_t sub_24608946C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07690], MEMORY[0x263F07E68]);
}

uint64_t sub_2460894AC()
{
  return Duration.UnitsFormatStyle.locale.getter();
}

uint64_t sub_2460894D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07690], MEMORY[0x263F07EE8]);
}

uint64_t sub_246089510()
{
  return Duration.UnitsFormatStyle.unitWidth.getter();
}

uint64_t sub_246089534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Duration.UnitsFormatStyle.unitWidth : Duration.UnitsFormatStyle(a1, a2, a3, a4, MEMORY[0x263F07EF0], MEMORY[0x263F07F08]);
}

uint64_t sub_246089574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.allowedUnits.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2460895A0()
{
  return Duration.UnitsFormatStyle.allowedUnits.setter();
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in Date.FormatStyle()
{
  return &protocol witness table for String;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle and conformance Duration.TimeFormatStyle, MEMORY[0x263F07E80]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.TimeFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(&lazy protocol witness table cache variable for type Duration.TimeFormatStyle.Attributed and conformance Duration.TimeFormatStyle.Attributed, MEMORY[0x263F07E58]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static SafelySerializableDiscreteFormatStyle.representation<A>(of:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

unint64_t lazy protocol witness table accessor for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_26FA3EEC8;
}

void *specialized init(from:) in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>, (void (*)(void))lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v11 - v6;
  unint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
  uint64_t v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = v11;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v9;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result = lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

void *type metadata accessor for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_26FA3ED28;
}

void *type metadata accessor for Base in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_26FA3EE48;
}

void type metadata accessor for KeyedDecodingContainer<CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for KeyedDecodingContainer();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  unint64_t result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter;
  if (!lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter and conformance Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246089EDCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Base.CodingKeys in CodableRepresentation #1 in Date.VerbatimFormatStyle.Attributed.formatPattern.getter()
{
  return &unk_26FA3EDB8;
}

uint64_t View.testID<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return TestIDView.init(content:id:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t TestIDView.init(content:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for TestIDView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t TestIDView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TestIDView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TestIDView.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TestIDView.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t TestIDView.id.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*TestIDView.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static TestIDView._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v31)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  void *v32;
  _DWORD v34[3];
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  int v55;
  void v56[2];
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;

  uint64_t v53 = a6;
  uint64_t v54 = a7;
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  uint64_t v75 = a5;
  uint64_t v76 = a6;
  uint64_t v16 = type metadata accessor for TestIDView.IdentifiedView();
  unint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (_DWORD *)((char *)v34 - v22);
  LODWORD(a1) = *a1;
  uint64_t v50 = *(void *)a2;
  uint64_t v37 = *(_DWORD *)(a2 + 8);
  uint64_t v49 = *(void *)(a2 + 16);
  uint64_t v36 = *(_DWORD *)(a2 + 24);
  uint64_t v35 = *(_DWORD *)(a2 + 28);
  uint64_t v45 = *(_DWORD *)(a2 + 32);
  char v44 = *(_DWORD *)(a2 + 36);
  uint64_t v47 = *(void *)(a2 + 40);
  char v46 = *(void *)(a2 + 48);
  uint64_t v43 = *(_DWORD *)(a2 + 56);
  uint64_t v42 = *(_DWORD *)(a2 + 60);
  uint64_t v41 = *(_DWORD *)(a2 + 64);
  uint64_t v40 = *(_DWORD *)(a2 + 68);
  uint64_t v39 = *(_DWORD *)(a2 + 72);
  int v24 = *(_DWORD *)(a2 + 76);
  int v25 = *(_DWORD *)(a2 + 80);
  uint64_t v38 = v24;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a4 - 8) + 56))(v15, 1, 1, a4, v21);
  uint64_t v52 = a5;
  TestIDView.IdentifiedView.init(view:id:)((int)a1, (uint64_t)v15, v23);
  uint64_t v53 = v17;
  uint64_t v26 = *(void (**)(char *, _DWORD *, uint64_t))(v17 + 16);
  uint64_t v51 = v23;
  v26(v19, v23, v16);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v16;
  _GraphValue.init<A>(_:)((uint64_t)v19, a3, v16, WitnessTable, &v57);
  int v28 = v57;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v73 = v50;
  uint64_t v75 = v49;
  LODWORD(v74) = v37;
  uint64_t v76 = __PAIR64__(v35, v36);
  uint64_t v78 = v44;
  uint64_t v79 = v47;
  uint64_t v80 = v46;
  uint64_t v81 = v43;
  long long v82 = v42;
  uint64_t v83 = v41;
  uint64_t v84 = v40;
  char v85 = v39;
  long long v86 = v38;
  uint64_t v87 = v25;
  v34[2] = v28;
  char v55 = v28;
  uint64_t v58 = v50;
  uint64_t v59 = v37;
  uint64_t v60 = v49;
  uint64_t v61 = v36;
  uint64_t v62 = v35;
  uint64_t v63 = v44;
  uint64_t v64 = v47;
  uint64_t v65 = v46;
  uint64_t v66 = v43;
  uint64_t v67 = v42;
  uint64_t v68 = v41;
  uint64_t v69 = v40;
  uint64_t v70 = v39;
  uint64_t v71 = v38;
  uint64_t v72 = v25;
  uint64_t v30 = v52;
  uint64_t v31 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(v52 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31(v56, &v55, &v58, a3, v30);
  id v77 = v45;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v56, (uint64_t)&v73);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v32 = v54;
  *uint64_t v54 = v56[0];
  v32[1] = v56[1];
  return (*(uint64_t (**)(_DWORD *, uint64_t))(v53 + 8))(v51, v48);
}

uint64_t type metadata accessor for TestIDView.IdentifiedView()
{
  return swift_getGenericMetadata();
}

uint64_t TestIDView.IdentifiedView.init(view:id:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  unsigned int v4 = (char *)a3 + *(int *)(type metadata accessor for TestIDView.IdentifiedView() + 52);
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t TestIDView.IdentifiedView.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TestIDView();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TestIDView.IdentifiedView.updateValue()(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](a1);
  int v24 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v29 = v6;
  long long v22 = *(_OWORD *)(v4 + 24);
  long long v30 = v22;
  uint64_t v31 = v5;
  uint64_t v7 = type metadata accessor for TestIDView();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = v22;
  *(void *)&long long v22 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v14 = (char *)&v22 - v13;
  TestIDView.IdentifiedView.view.getter((uint64_t)v10);
  uint64_t v15 = *(void *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v14, &v10[*(int *)(v7 + 52)], v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v11);
  (*(void (**)(uint64_t, char *, void))(v12 + 40))(v1 + *(int *)(a1 + 52), v14, v22);
  TestIDView.IdentifiedView.view.getter((uint64_t)v10);
  uint64_t v18 = (uint64_t)v24;
  uint64_t v17 = v25;
  uint64_t v19 = v23;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v24, v10, v23);
  v16(v10, v7);
  uint64_t v27 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v18, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v26, v19, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
}

uint64_t TestIDView.IdentifiedView.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = type metadata accessor for Optional();
  double v14 = MEMORY[0x270FA5388](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v20 - v15, v4 + *(int *)(a2 + 52), v13, v14);
  int v17 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v11, v17 ^ 1u, 1, a3);
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = v12;
  uint64_t v25 = a3;
  long long v26 = *(_OWORD *)(a2 + 32);
  uint64_t v27 = v21;
  uint64_t v28 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TestIDView.IdentifiedView.matchesIdentifier<A>(_:), (uint64_t)v22, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v18, (uint64_t)&v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v29 & 1;
}

uint64_t TestIDView.IdentifiedView.description.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v16 - v6;
  uint64_t v8 = *(void *)(v3 - 8);
  double v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v1 + *(int *)(a1 + 52), v4, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 17481;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v7, v3);
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    v14._uint64_t countAndFlagsBits = 540689481;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v13 = v16[0];
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v3);
  }
  return v13;
}

uint64_t protocol witness for IdentifierProvider.matchesIdentifier<A>(_:) in conformance TestIDView<A, B>.IdentifiedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TestIDView.IdentifiedView.matchesIdentifier<A>(_:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TestIDView<A, B>.IdentifiedView()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TestIDView<A, B>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static TestIDView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t getEnumTagSinglePayload for TestIDView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for TestIDView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24608B6D8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TestIDView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for TestIDView.IdentifiedView()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TestIDView.IdentifiedView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v7 + 4) & ~(unint64_t)v7) + v9;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    BOOL v15 = (void *)(((unint64_t)a1 + v8 + 4) & ~v8);
    unsigned int v16 = (const void *)(((unint64_t)a2 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v15, v16, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t destroy for TestIDView.IdentifiedView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (a1 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_DWORD *initializeWithCopy for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithCopy for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    BOOL v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

_DWORD *initializeWithTake for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_DWORD *assignWithTake for TestIDView.IdentifiedView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 4) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 4) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    BOOL v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestIDView.IdentifiedView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 4) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 4) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TestIDView.IdentifiedView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 4) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24608C358);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (unint64_t)&a1[v10 + 4] & ~v10;
          uint64_t v20 = a2 + 1;
          int v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for TestIDView<A, B>.IdentifiedView(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in TestIDView<A, B>.IdentifiedView()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in TestIDView.IdentifiedView.matchesIdentifier<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SS_Sdts5NeverOTg503_s7d5UI10_f36_pSaySdGSSSdIgngod_AaB_p_ACtSS_Sdts5g48OIegnrzr_TR03_s7a23UI9summarizeySSSayAA10_C32_p_jk10GtGFSS_SdtN22C_p_ADtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = 0;
    uint64_t v2 = v19;
    uint64_t v5 = a1 + 32;
    do
    {
      int v6 = (void *)(v5 + 48 * v4);
      uint64_t v7 = v6[5];
      __swift_project_boxed_opaque_existential_1(v6, v6[3]);
      swift_getDynamicType();
      type metadata accessor for _Benchmark.Type();
      uint64_t v8 = String.init<A>(describing:)();
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(v7 + 16);
      if (v11)
      {
        size_t v12 = (double *)(v7 + 32);
        double v13 = 0.0;
        do
        {
          double v14 = *v12++;
          double v13 = v13 + v14;
          --v11;
        }
        while (v11);
      }
      else
      {
        double v13 = 0.0;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
      }
      unint64_t v16 = *(void *)(v19 + 16);
      unint64_t v15 = *(void *)(v19 + 24);
      if (v16 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      ++v4;
      *(void *)(v19 + 16) = v16 + 1;
      uint64_t v17 = v19 + 24 * v16;
      *(void *)(v17 + 32) = v8;
      *(void *)(v17 + 40) = v10;
      *(double *)(v17 + 48) = v13;
    }
    while (v4 != v1);
  }
  return v2;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SDySSAHGs5NeverOTg503_s7d5UI10_f35_pSaySdGSDySSACGIgngo_AaB_p_ACtADs5g32OIegnrzr_TR03_s7a21UI5write_2toyj13AA10_c3_p_H33K41GtG_SStKFSDySSAEGAaD_p_AEtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return v2;
  }
  uint64_t v22 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  type metadata accessor for [String : [Double]](0, &lazy cache variable for type metadata for _DictionaryStorage<String, [Double]>, MEMORY[0x263F8DFB0]);
  for (unint64_t i = (uint64_t *)(a1 + 72); ; i += 6)
  {
    uint64_t v5 = *i;
    __swift_project_boxed_opaque_existential_1(i - 5, *(i - 2));
    swift_getDynamicType();
    type metadata accessor for _Benchmark.Type();
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v8 = v7;
    type metadata accessor for _ContiguousArrayStorage<(String, [Double])>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = v8;
    *(void *)(inited + 48) = v5;
    uint64_t v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v11 = *(void *)(inited + 32);
    uint64_t v12 = *(void *)(inited + 40);
    uint64_t v13 = *(void *)(inited + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
    if (v15) {
      break;
    }
    v10[(result >> 6) + 8] |= 1 << result;
    unint64_t v16 = (uint64_t *)(v10[6] + 16 * result);
    *unint64_t v16 = v11;
    v16[1] = v12;
    *(void *)(v10[7] + 8 * result) = v13;
    uint64_t v17 = v10[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_12;
    }
    void v10[2] = v19;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = v22;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
      uint64_t v2 = v22;
    }
    unint64_t v21 = *(void *)(v2 + 16);
    unint64_t v20 = *(void *)(v2 + 24);
    if (v21 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      uint64_t v2 = v22;
    }
    *(void *)(v2 + 16) = v21 + 1;
    *(void *)(v2 + 8 * v21 + 32) = v10;
    if (!--v1) {
      return v2;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall _BenchmarkHost._renderAsyncForTest(interval:)(Swift::Double interval)
{
  return 0;
}

const char *one-time initialization function for enableProfiler(int a1)
{
  return one-time initialization function for enableProfiler(a1, "SWIFTUI_PROFILE_BENCHMARKS", &enableProfiler);
}

uint64_t enableProfiler.getter()
{
  return enableProfiler.getter(&one-time initialization token for enableProfiler, (unsigned __int8 *)&enableProfiler);
}

uint64_t enableProfiler.setter(char a1)
{
  return enableProfiler.setter(a1, &one-time initialization token for enableProfiler, &enableProfiler);
}

uint64_t (*enableProfiler.modify())()
{
  if (one-time initialization token for enableProfiler != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

const char *one-time initialization function for enableTracer(int a1)
{
  return one-time initialization function for enableProfiler(a1, "SWIFTUI_TRACE_BENCHMARKS", &enableTracer);
}

const char *one-time initialization function for enableProfiler(int a1, char *a2, BOOL *a3)
{
  unint64_t result = getenv(a2);
  if (result)
  {
    unint64_t result = (const char *)atoi(result);
    BOOL v5 = result != 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  *a3 = v5;
  return result;
}

uint64_t enableTracer.getter()
{
  return enableProfiler.getter(&one-time initialization token for enableTracer, (unsigned __int8 *)&enableTracer);
}

uint64_t enableProfiler.getter(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return *a2;
}

uint64_t enableTracer.setter(char a1)
{
  return enableProfiler.setter(a1, &one-time initialization token for enableTracer, &enableTracer);
}

uint64_t enableProfiler.setter(char a1, void *a2, unsigned char *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  *a3 = a1 & 1;
  return result;
}

uint64_t (*enableTracer.modify())()
{
  if (one-time initialization token for enableTracer != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

double _BenchmarkHost.measureAction(action:)(void (*a1)(uint64_t))
{
  double v3 = CACurrentMediaTime();
  if (one-time initialization token for enableTracer != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (enableTracer)
  {
    if (one-time initialization token for tracingOptions != -1) {
      swift_once();
    }
    uint64_t started = AGGraphStartTracing();
  }
  else
  {
    if (one-time initialization token for enableProfiler != -1) {
      swift_once();
    }
    uint64_t started = swift_beginAccess();
    if (enableProfiler)
    {
      swift_getObjectType();
      uint64_t started = swift_conformsToProtocol2();
      if (started ? v1 : 0)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        ViewRendererHost.startProfiling()();
        uint64_t started = swift_unknownObjectRelease();
      }
    }
  }
  a1(started);
  double v6 = CACurrentMediaTime();
  if (enableTracer)
  {
    AGGraphStopTracing();
  }
  else
  {
    if (one-time initialization token for enableProfiler != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (enableProfiler)
    {
      swift_getObjectType();
      if (swift_conformsToProtocol2()) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7)
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        ViewRendererHost.stopProfiling()();
        swift_unknownObjectRelease();
      }
    }
  }
  return v6 - v3;
}

Swift::Double __swiftcall _BenchmarkHost.measureRender(interval:)(Swift::Double interval)
{
  return _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
}

uint64_t partial apply for closure #1 in _BenchmarkHost.measureRender(interval:)()
{
  return (*(uint64_t (**)(void, double))(*(void *)(v0 + 24) + 8))(*(void *)(v0 + 16), *(double *)(v0 + 40));
}

void *_BenchmarkHost.measureRenders(duration:)(double a1)
{
  double v6 = a1 / 60.0;
  unint64_t v7 = *(void *)&v6;
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v7 = 0xC3E0000000000001;
  if (v6 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v7 = 0x43E0000000000000;
  if (v6 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = (uint64_t)v6;
  if ((uint64_t)v6 < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (!__OFADD__(v3, 1))
  {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 0, MEMORY[0x263F8EE78]);
    double v5 = _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
    unint64_t v4 = v1[2];
    unint64_t v7 = v1[3];
    int64_t v2 = v4 + 1;
    if (v4 < v7 >> 1) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v2, 1, v1);
LABEL_7:
  v1[2] = v2;
  for (*(double *)&v1[v4 + 4] = v5; v3; --v3)
  {
    double v8 = _BenchmarkHost.measureAction(action:)((void (*)(uint64_t))partial apply for closure #1 in _BenchmarkHost.measureRender(interval:));
    unint64_t v10 = v1[2];
    unint64_t v9 = v1[3];
    if (v10 >= v9 >> 1) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v1);
    }
    v1[2] = v10 + 1;
    *(double *)&v1[v10 + 4] = v8;
  }
  return v1;
}

Swift::String __swiftcall summarize(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SS_Sdts5NeverOTg503_s7d5UI10_f36_pSaySdGSSSdIgngod_AaB_p_ACtSS_Sdts5g48OIegnrzr_TR03_s7a23UI9summarizeySSSayAA10_C32_p_jk10GtGFSS_SdtN22C_p_ADtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)a1._rawValue);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = 0;
    uint64_t v5 = v1 + 40;
    uint64_t v6 = *(void *)(v1 + 16);
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v7 > v4) {
        uint64_t v4 = v7;
      }
      v5 += 24;
      --v6;
    }
    while (v6);
    double v8 = (double *)(v3 + 48);
    unint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v10 = MEMORY[0x263F8D5B8];
    while (1)
    {
      uint64_t v11 = *((void *)v8 - 2);
      uint64_t v12 = *((void *)v8 - 1);
      double v13 = *v8;
      swift_bridgeObjectRetain();
      uint64_t v14 = String.count.getter();
      uint64_t v16 = v4 - v14;
      if (__OFSUB__(v4, v14)) {
        break;
      }
      if (__OFADD__(v16, 1)) {
        goto LABEL_16;
      }
      uint64_t v17 = MEMORY[0x24C522AC0](32, 0xE100000000000000, v16 + 1);
      uint64_t v19 = v18;
      swift_bridgeObjectRetain();
      v20._uint64_t countAndFlagsBits = 58;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = v17;
      v21._object = v19;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_2461B9DC0;
      *(void *)(v22 + 56) = MEMORY[0x263F8D538];
      *(void *)(v22 + 64) = v10;
      *(double *)(v22 + 32) = v13 * 1000.0;
      uint64_t v23 = String.init(format:_:)();
      uint64_t v25 = v24;
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = v23;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      }
      unint64_t v28 = v9[2];
      unint64_t v27 = v9[3];
      if (v28 >= v27 >> 1) {
        unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v9);
      }
      v9[2] = v28 + 1;
      char v29 = &v9[2 * v28];
      v29[4] = v11;
      v29[5] = v12;
      v8 += 3;
      if (!--v2) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    _sSaySSGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    uint64_t v14 = v30;
    char v15 = v32;
  }
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> write(_:to:)(Swift::OpaquePointer _, Swift::String to)
{
  object = to._object;
  uint64_t countAndFlagsBits = to._countAndFlagsBits;
  void v26[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI10_Benchmark_p_SaySdGtG_SDySSAHGs5NeverOTg503_s7d5UI10_f35_pSaySdGSDySSACGIgngo_AaB_p_ACtADs5g32OIegnrzr_TR03_s7a21UI5write_2toyj13AA10_c3_p_H33K41GtG_SStKFSDySSAEGAaD_p_AEtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)_._rawValue);
  unint64_t v9 = self;
  type metadata accessor for [String : [Double]](0, (unint64_t *)&lazy cache variable for type metadata for [String : [Double]], MEMORY[0x263F8D060]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v26[0] = 0;
  id v11 = objc_msgSend(v9, sel_dataWithJSONObject_options_error_, isa, 1, v26);

  id v12 = v26[0];
  if (v11)
  {
    v24[1] = v2;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    id v16 = objc_msgSend(self, sel_defaultManager);
    uint64_t v17 = (void *)MEMORY[0x24C522820](countAndFlagsBits, object);
    id v18 = objc_msgSend(v17, sel_stringByDeletingLastPathComponent);

    if (!v18)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v18 = (id)MEMORY[0x24C522820](v19);
      swift_bridgeObjectRelease();
    }
    v26[0] = 0;
    unsigned int v20 = objc_msgSend(v16, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v18, 1, 0, v26);

    if (v20)
    {
      id v21 = v26[0];
      URL.init(fileURLWithPath:)();
      Data.write(to:options:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
    }
    else
    {
      id v23 = v26[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

    outlined consume of Data._Representation(v13, v15);
  }
  else
  {
    uint64_t v22 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

Swift::Void __swiftcall log(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v6 = summarize(_:)(a1);
  _sSaySSGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
  uint64_t v7 = swift_allocObject();
  v26[0] = xmmword_2461B9DC0;
  *(_OWORD *)(v7 + 16) = xmmword_2461B9DC0;
  uint64_t v8 = MEMORY[0x263F8D310];
  *(void *)(v7 + 56) = MEMORY[0x263F8D310];
  *(Swift::String *)(v7 + 32) = v6;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  unint64_t v9 = *(void *)(static CommandLine.arguments.getter() + 16);
  swift_bridgeObjectRelease();
  if (v9 < 2)
  {
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
    unint64_t v14 = (void *)MEMORY[0x24C522820](0xD000000000000011, 0x8000000246225580);
    objc_msgSend(v13, sel_setDateFormat_, v14);

    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v16 = objc_msgSend(v13, sel_stringFromDate_, isa);

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    unint64_t v27 = 0xD000000000000022;
    unint64_t v28 = 0x80000002462255A0;
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v21._uint64_t countAndFlagsBits = 0x6E6F736A2ELL;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();

    uint64_t v12 = v27;
    id v11 = (void *)v28;
  }
  else
  {
    uint64_t v10 = (void *)static CommandLine.arguments.getter();
    if (v10[2] < 2uLL)
    {
      __break(1u);
      return;
    }
    uint64_t v12 = v10[6];
    id v11 = (void *)v10[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v26[0];
  *(void *)(v22 + 56) = v8;
  *(void *)(v22 + 32) = v12;
  *(void *)(v22 + 40) = v11;
  swift_bridgeObjectRetain();
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = v12;
  v23._object = v11;
  write(_:to:)(a1, v23);
  uint64_t v25 = swift_bridgeObjectRelease();
  if (v24)
  {
    MEMORY[0x270FA5388](v25);
    *(void *)&v26[-1] = v24;
    specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #1 in log(_:));
  }
}

uint64_t implicit closure #1 in log(_:)()
{
  return Error.localizedDescription.getter();
}

uint64_t partial apply for implicit closure #1 in log(_:)()
{
  return implicit closure #1 in log(_:)();
}

uint64_t dispatch thunk of _BenchmarkHost._renderForTest(interval:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _BenchmarkHost._renderAsyncForTest(interval:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _BenchmarkHost._performScrollTest(startOffset:iterations:delta:length:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of _Benchmark.measure(host:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unint64_t type metadata accessor for _Benchmark.Type()
{
  unint64_t result = lazy cache variable for type metadata for _Benchmark.Type;
  if (!lazy cache variable for type metadata for _Benchmark.Type)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for _Benchmark);
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _Benchmark.Type);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(String, [Double])>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>)
  {
    type metadata accessor for (String, [Double])();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, [Double])>);
    }
  }
}

void type metadata accessor for (String, [Double])()
{
  if (!lazy cache variable for type metadata for (String, [Double]))
  {
    _sSaySSGMaTm_0(255, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, [Double]));
    }
  }
}

BOOL TransitionPhase.isIdentity.getter(char a1)
{
  return a1 == 1;
}

uint64_t Transition._makeContentTransition(transition:)(uint64_t result)
{
  if (*(unsigned char *)result == 3)
  {
    uint64_t v1 = result;
    unint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(result + 24), *(unsigned char *)(result + 32));
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

SwiftUI::TransitionProperties __swiftcall TransitionProperties.init(hasMotion:)(SwiftUI::TransitionProperties hasMotion)
{
  v1->hasMotion = hasMotion.hasMotion;
  return hasMotion;
}

BOOL static TransitionPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

SwiftUI::TransitionProperties __swiftcall TransitionProperties.union(_:)(SwiftUI::TransitionProperties result)
{
  unsigned char *v1 = (*v2 | *(unsigned char *)result.hasMotion) & 1;
  return result;
}

BOOL Transition.hasContentTransition.getter(uint64_t a1, uint64_t a2)
{
  v3[0] = 3;
  v3[1] = 0;
  void v3[2] = 0;
  uint64_t v4 = 0;
  char v5 = 2;
  (*(void (**)(void *, uint64_t))(a2 + 40))(v3, a1);
  if (v5)
  {
    outlined consume of _Transition_ContentTransition.Result(v4, v5);
    return 0;
  }
  return (v4 & 1) != 0;
}

uint64_t Transition.contentTransitionEffects(style:size:)(unsigned __int8 *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  v6[0] = *a1;
  *(double *)&v6[1] = a2;
  *(double *)&void v6[2] = a3;
  uint64_t v7 = 0;
  char v8 = 2;
  (*(void (**)(void *))(a5 + 40))(v6);
  uint64_t result = v7;
  if (v8 != 1)
  {
    outlined consume of _Transition_ContentTransition.Result(v7, v8);
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(a1, a2, a3, 0);
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance ModifierTransition<A>(uint64_t result)
{
  if (*(unsigned char *)result == 3)
  {
    uint64_t v1 = result;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(result + 24), *(unsigned char *)(result + 32));
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t ApplyTransitionModifier.transition.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ApplyTransitionModifier.transition.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ApplyTransitionModifier.transition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ApplyTransitionModifier.phase.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t ApplyTransitionModifier.phase.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*ApplyTransitionModifier.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ApplyTransitionModifier.viewListCount(inputs:body:)()
{
  return 0;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ApplyTransitionModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

__n128 _Transition_ContentTransition.operation.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

__n128 _Transition_ContentTransition.operation.setter(__n128 *a1)
{
  unint64_t v2 = a1[1].n128_u64[0];
  __n128 result = *a1;
  __n128 *v1 = *a1;
  v1[1].n128_u64[0] = v2;
  return result;
}

uint64_t (*_Transition_ContentTransition.operation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _Transition_ContentTransition.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = v2;
  char v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of _Transition_ContentTransition.Result(v2, v3);
}

uint64_t _Transition_ContentTransition.result.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 32) = v3;
  return result;
}

uint64_t (*_Transition_ContentTransition.result.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void TransitionPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int TransitionPhase.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

double TransitionPhase.value.getter(char a1)
{
  return dbl_24620A7F8[a1];
}

uint64_t TransitionProperties.hasMotion.getter()
{
  return *v0;
}

uint64_t TransitionProperties.hasMotion.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*TransitionProperties.hasMotion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static IdentityTransition.properties.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t IdentityTransition._makeContentTransition(transition:)(uint64_t result)
{
  if (*(unsigned char *)result == 3)
  {
    uint64_t v1 = result;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(result + 24), *(unsigned char *)(result + 32));
    *(void *)(v1 + 24) = 1;
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance IdentityTransition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(a1, a2, a3, 1);
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance SlideTransition(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)result == 3)
  {
    uint64_t v5 = result;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(result + 24), *(unsigned char *)(result + 32));
    *(void *)(v5 + 24) = a4;
    *(unsigned char *)(v5 + 32) = 0;
  }
  return result;
}

uint64_t outlined copy of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransitionPhase and conformance TransitionPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase;
  if (!lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransitionPhase and conformance TransitionPhase);
  }
  return result;
}

uint64_t dispatch thunk of Transition.body(content:phase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static Transition.properties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Transition._makeContentTransition(transition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t getEnumTagSinglePayload for ApplyTransitionModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 3) {
        return v15 - 2;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ApplyTransitionModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x24608E4A0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFD)
        {
          a1[v9] = a2 + 2;
        }
        else
        {
          id v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t destroy for _Transition_ContentTransition(uint64_t a1)
{
  return outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for _Transition_ContentTransition(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 32);
  outlined copy of _Transition_ContentTransition.Result(v3, v4);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for _Transition_ContentTransition(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = *((void *)a2 + 3);
  char v5 = *((unsigned char *)a2 + 32);
  outlined copy of _Transition_ContentTransition.Result(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  char v7 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of _Transition_ContentTransition.Result(v6, v7);
  return a1;
}

uint64_t assignWithTake for _Transition_ContentTransition(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  char v6 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of _Transition_ContentTransition.Result(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition()
{
  return &type metadata for _Transition_ContentTransition;
}

uint64_t getEnumTagSinglePayload for _Transition_ContentTransition.Operation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[24]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  unsigned int v5 = v3 - 3;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _Transition_ContentTransition.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTag for _Transition_ContentTransition.Operation(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for _Transition_ContentTransition.Operation(void *result, unsigned int a2)
{
  if (a2 > 0xFD)
  {
    result[1] = 0;
    result[2] = 0;
    *unint64_t result = a2 - 254;
  }
  else if (a2)
  {
    *(unsigned char *)unint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition.Operation()
{
  return &type metadata for _Transition_ContentTransition.Operation;
}

uint64_t initializeBufferWithCopyOfBuffer for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of _Transition_ContentTransition.Result(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for _Transition_ContentTransition.Result(uint64_t a1)
{
  return outlined consume of _Transition_ContentTransition.Result(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of _Transition_ContentTransition.Result(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of _Transition_ContentTransition.Result(v5, v6);
  return a1;
}

uint64_t assignWithTake for _Transition_ContentTransition.Result(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of _Transition_ContentTransition.Result(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for _Transition_ContentTransition.Result()
{
  return &type metadata for _Transition_ContentTransition.Result;
}

unsigned char *storeEnumTagSinglePayload for TransitionPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24608E888);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TransitionProperties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24608E97CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransitionProperties()
{
  return &type metadata for TransitionProperties;
}

uint64_t sub_24608E9B4()
{
  return swift_getWitnessTable();
}

uint64_t key path getter for EnvironmentValues.isVisionEnabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.isVisionEnabled.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isVisionEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isVisionEnabled.modify;
}

void EnvironmentValues.isVisionEnabled.modify(uint64_t a1)
{
  unsigned int v1 = *(void ***)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t static IsVisionEnabledKey.defaultValue.getter()
{
  return 0;
}

uint64_t sub_24608ED30(char *a1)
{
  return EnvironmentValues.isVisionEnabled.setter(*a1);
}

ValueMetadata *type metadata accessor for IsVisionEnabledKey()
{
  return &type metadata for IsVisionEnabledKey;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance VisualEffectModifier<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _OffsetEffect(a1, a2);
}

uint64_t View.geometryEffect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = type metadata accessor for VisualEffectModifier();
  return View.modifier<A>(_:)(v6, a3, v4);
}

uint64_t static EmptyVisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t dispatch thunk of static VisualEffect._makeVisualEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t sub_24608EE70()
{
  return swift_getWitnessTable();
}

BOOL CoordinateSpace.isGlobal.getter()
{
  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v3);
  if (v6)
  {
    if (v6 != 1)
    {
      int8x16_t v1 = vorrq_s8(v4, v5);
      return (*(void *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v3) == 0;
    }
  }
  else
  {
    outlined destroy of CoordinateSpace((uint64_t)&v3);
  }
  return 0;
}

BOOL static CoordinateSpace.ID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t static CoordinateSpace.root.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for root != -1) {
    swift_once();
  }

  return outlined init with copy of CoordinateSpace((uint64_t)&static CoordinateSpace.root, a1);
}

uint64_t CoordinateSpace.canonical.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace(v1, a1);
}

uint64_t CoordinateSpace.Name.space.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of CoordinateSpace.Name(v1, (uint64_t)v6);
  if (v8)
  {
    *(void *)a1 = *(void *)&v6[0];
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
    long long v5 = v6[1];
    *(_OWORD *)a1 = v6[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = v7;
  }
  *(unsigned char *)(a1 + 40) = v4;
  return result;
}

BOOL CoordinateSpace.isLocal.getter()
{
  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v3);
  if (v6)
  {
    if (v6 != 1)
    {
      int8x16_t v1 = vorrq_s8(v4, v5);
      return (*(void *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v3) != 0;
    }
  }
  else
  {
    outlined destroy of CoordinateSpace((uint64_t)&v3);
  }
  return 0;
}

void CoordinateSpace.hash(into:)()
{
  outlined init with copy of CoordinateSpace(v0, (uint64_t)&v5);
  if (v8)
  {
    Swift::UInt v1 = v5;
    if (v8 == 1)
    {
      Hasher._combine(_:)(3uLL);
      Swift::UInt v2 = v1;
    }
    else
    {
      Swift::UInt v2 = (*((void *)&v6 + 1) | v7 | (unint64_t)v5 | (unint64_t)v6 | *((void *)&v5 + 1)) != 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    v3[0] = v5;
    v3[1] = v6;
    uint64_t v4 = v7;
    Hasher._combine(_:)(2uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
}

Swift::Int CoordinateSpace.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CoordinateSpace()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CoordinateSpace()
{
  return Hasher._finalize()();
}

uint64_t NamedCoordinateSpace.name.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CoordinateSpace.Name(v1, a1);
}

uint64_t NamedCoordinateSpace.name.setter(uint64_t a1)
{
  return outlined assign with take of CoordinateSpace.Name(a1, v1);
}

uint64_t (*NamedCoordinateSpace.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_OWORD *NamedCoordinateSpace.init(name:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  return outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, a2);
}

void *static CoordinateSpaceProtocol<>.id(_:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 40) = 1;
  return result;
}

double LocalCoordinateSpace.coordinateSpace.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 2;
  return result;
}

double GlobalCoordinateSpace.coordinateSpace.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 2;
  return result;
}

uint64_t outlined assign with take of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpace and conformance CoordinateSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace;
  if (!lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpace and conformance CoordinateSpace);
  }
  return result;
}

uint64_t assignWithCopy for CoordinateSpace(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for CoordinateSpace(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for CoordinateSpace.ID()
{
  return &type metadata for CoordinateSpace.ID;
}

uint64_t assignWithCopy for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      char v6 = 0;
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t assignWithTake for CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

ValueMetadata *type metadata accessor for CoordinateSpace.Name()
{
  return &type metadata for CoordinateSpace.Name;
}

uint64_t dispatch thunk of CoordinateSpaceProtocol.coordinateSpace.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_OWORD *assignWithTake for NamedCoordinateSpace(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t ClosedRange<>.minimumValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  type metadata accessor for AccessibilityNumeric();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7))
    {
      outlined init with copy of AnyTrackedValue((uint64_t)v11, a2);
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    uint64_t result = outlined destroy of AccessibilityNumeric?((uint64_t)v9);
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

unint64_t type metadata accessor for AccessibilityNumeric()
{
  unint64_t result = lazy cache variable for type metadata for AccessibilityNumeric;
  if (!lazy cache variable for type metadata for AccessibilityNumeric)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNumeric);
  }
  return result;
}

uint64_t outlined destroy of AccessibilityNumeric?(uint64_t a1)
{
  type metadata accessor for AccessibilityNumeric?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ClosedRange<>.maximumValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  double v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v2 + *(int *)(v7 + 36), v4, v5);
  type metadata accessor for AccessibilityNumeric();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v12, (uint64_t)v14);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10))
    {
      outlined init with copy of AnyTrackedValue((uint64_t)v14, a2);
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    uint64_t result = outlined destroy of AccessibilityNumeric?((uint64_t)v12);
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t AccessibilityNumeric<>.isValidMinValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Numeric.isNaN.getter() || (Numeric.isFinite.getter(a1) & 1) == 0)
  {
    char v5 = 0;
  }
  else if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0 {
         && dispatch thunk of static FixedWidthInteger.bitWidth.getter() != 8)
  }
  {
    dispatch thunk of static FixedWidthInteger.min.getter();
    char v5 = dispatch thunk of static Comparable.> infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    char v5 = 1;
  }
  return v5 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, uint64_t);
  char v9;
  uint64_t v11;

  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isSignalingNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isFinite.getter() & 1) == 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
    dispatch thunk of static SignedNumeric.- prefix(_:)();
    uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
    v8(v4, a1);
    uint64_t v9 = dispatch thunk of static Comparable.> infix(_:_:)();
    v8(v7, a1);
  }
  return v9 & 1;
}

uint64_t AccessibilityNumeric<>.isValidMaxValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Numeric.isNaN.getter() || (Numeric.isFinite.getter(a1) & 1) == 0)
  {
    char v5 = 0;
  }
  else
  {
    dispatch thunk of static FixedWidthInteger.max.getter();
    char v5 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v5 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((dispatch thunk of FloatingPoint.isNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isSignalingNaN.getter() & 1) != 0
    || (dispatch thunk of FloatingPoint.isFinite.getter() & 1) == 0)
  {
    char v5 = 0;
  }
  else
  {
    dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
    char v5 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  return v5 & 1;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithInteger_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int()
{
  return *v0 != 0x8000000000000000;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int()
{
  return *v0 != 0x7FFFFFFFFFFFFFFFLL;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithInteger_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int8.asNumber()()
{
  uint64_t v2 = v1;
  Swift::Bool v3 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, v0);
  *uint64_t v2 = v3;
  result.value.base.super.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int8()
{
  return *v0 != 127;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int8@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int16.asNumber()()
{
  uint64_t v2 = v1;
  Swift::Bool v3 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, v0);
  *uint64_t v2 = v3;
  result.value.base.super.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int16()
{
  return *v0 != -32768;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int16()
{
  return *v0 != 0x7FFF;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int16@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int32.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithInt_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Int32()
{
  return *v0 != 0x80000000;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Int32()
{
  return *v0 != 0x7FFFFFFF;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int32@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int32((SEL *)&selRef_initWithInt_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall Int64.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithLongLong_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int64@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithLongLong_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedInteger_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt()
{
  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithUnsignedInteger_, a1);
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt8.asNumber()()
{
  uint64_t v2 = v1;
  Swift::Bool v3 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, v0);
  *uint64_t v2 = v3;
  result.value.base.super.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt8()
{
  return *v0 != 255;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt8@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt16.asNumber()()
{
  uint64_t v2 = v1;
  Swift::Bool v3 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, v0);
  *uint64_t v2 = v3;
  result.value.base.super.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt16()
{
  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt16@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt32.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedInt_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

id Int32.asNumber()@<X0>(uint64_t a1@<X0>, SEL *a2@<X1>, void *a3@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), *a2, a1);
  *a3 = result;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance UInt32()
{
  return *v0 != -1;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt32@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int32((SEL *)&selRef_initWithUnsignedInt_, a1);
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int32@<X0>(SEL *a1@<X2>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), *a1, *v2);
  *a2 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall UInt64.asNumber()()
{
  uint64_t v2 = (objc_class *)Int32.asNumber()(v0, (SEL *)&selRef_initWithUnsignedLongLong_, v1);
  result.value.base.super.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance UInt64@<X0>(void *a1@<X8>)
{
  return protocol witness for AccessibilityNumeric.asNumber() in conformance Int((SEL *)&selRef_initWithUnsignedLongLong_, a1);
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Int@<X0>(SEL *a1@<X2>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), *a1, *v2);
  *a2 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Double.asNumber()()
{
  uint64_t v2 = v0;
  Swift::Bool v3 = (objc_class *)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v1);
  *uint64_t v2 = v3;
  result.value.base.super.super.Class isa = v3;
  result.is_nil = v4;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Double()
{
  return *v0 > -1.79769313e308 && (~*(void *)v0 & 0x7FF0000000000000) != 0;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Double()
{
  return *v0 < 1.79769313e308 && (~*(void *)v0 & 0x7FF0000000000000) != 0;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Double@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, *v1);
  *a1 = result;
  return result;
}

SwiftUI::AccessibilityNumber_optional __swiftcall Float.asNumber()()
{
  int v2 = v1;
  Swift::Bool v3 = v0;
  id v4 = objc_allocWithZone(NSNumber);
  LODWORD(v5) = v2;
  uint64_t v6 = (objc_class *)objc_msgSend(v4, sel_initWithFloat_, v5);
  objc_class *v3 = v6;
  result.value.base.super.super.Class isa = v6;
  result.is_nil = v7;
  return result;
}

BOOL protocol witness for AccessibilityNumeric.isValidMinValue.getter in conformance Float()
{
  return *v0 > -3.4028e38 && (~*(_DWORD *)v0 & 0x7F800000) != 0;
}

BOOL protocol witness for AccessibilityNumeric.isValidMaxValue.getter in conformance Float()
{
  return *v0 < 3.4028e38 && (~*(_DWORD *)v0 & 0x7F800000) != 0;
}

id protocol witness for AccessibilityNumeric.asNumber() in conformance Float@<X0>(void *a1@<X8>)
{
  int v3 = *v1;
  id v4 = objc_allocWithZone(NSNumber);
  LODWORD(v5) = v3;
  id result = objc_msgSend(v4, sel_initWithFloat_, v5);
  *a1 = result;
  return result;
}

double AccessibilityValueStorage.init<A>(_:from:to:description:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  void (*v70)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  double result;
  id v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  uint64_t v109;
  uint64_t v110;
  long long v111;
  long long v112;
  long long v113;

  char v99 = a7;
  uint64_t v96 = a5;
  uint64_t v95 = a4;
  char v103 = a2;
  uint64_t v104 = a3;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v87 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v87 - v21;
  MEMORY[0x270FA5388](v23);
  *(void *)(a9 + 32) = 0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  uint64_t v98 = (_OWORD *)a9;
  unsigned int v102 = v25;
  uint64_t v26 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a8);
  unint64_t v27 = type metadata accessor for AccessibilityNumeric();
  char v101 = a8;
  char v28 = swift_dynamicCast();
  uint64_t v100 = v13;
  uint64_t v97 = a6;
  if (v28)
  {
    long long v93 = v19;
    char v91 = v27;
    long long v92 = v16;
    uint64_t v29 = v14;
    uint64_t v31 = *((void *)&v112 + 1);
    uint64_t v30 = v113;
    __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
    uint64_t v32 = v31;
    uint64_t v14 = v29;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 24))(&v105, v32, v30);
    uint64_t v33 = (void *)v105;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
    if (v33)
    {
      uint64_t v90 = v26;
      uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
      uint64_t v35 = v101;
      unsigned int v36 = v34((uint64_t)v103, 1, v101);
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      uint64_t v38 = v14;
      uint64_t v39 = v100;
      uint64_t v94 = v37;
      v37(v22, (uint64_t)v104, v100);
      if (v36 == 1 && v34((uint64_t)v22, 1, v35) == 1)
      {
        uint64_t v40 = *(void (**)(char *, uint64_t))(v38 + 8);
        v40(v22, v39);
        type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>();
        uint64_t v109 = v41;
        uint64_t v110 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityNumber>);
        *(void *)&uint64_t v108 = v33;
        *(void *)&uint64_t v107 = 0;
        uint64_t v105 = 0u;
        uint64_t v106 = 0u;
        id v42 = v33;
        outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v108, (uint64_t)&v105);
        uint64_t v43 = v99;
        if (v99)
        {
          type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
          uint64_t v44 = swift_allocObject();
          *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
          uint64_t v45 = v96;
          *(void *)(v44 + 32) = v95;
          *(void *)(v44 + 40) = v45;
          *(unsigned char *)(v44 + 48) = v97 & 1;
          *(void *)(v44 + 56) = v43;
        }
        else
        {
          uint64_t v44 = MEMORY[0x263F8EE78];
        }
        uint64_t v83 = v100;
        uint64_t v84 = v101;
        uint64_t v54 = v98;
        outlined destroy of AnyAccessibilityValue?((uint64_t)&v108);
        *((void *)&v107 + 1) = v44;
        uint64_t v111 = v105;
        uint64_t v112 = v106;
        char v113 = v107;

        v40(v104, v83);
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v90, v84);
        v40(v103, v83);
        goto LABEL_32;
      }
      uint64_t v56 = *(void (**)(char *, uint64_t))(v38 + 8);
      v56(v22, v39);
      char v57 = v34;
      uint64_t v58 = v93;
      v94(v93, (uint64_t)v103, v39);
      uint64_t v59 = (unsigned int (*)(char *, uint64_t, uint64_t))v57;
      LODWORD(v57) = v57((uint64_t)v58, 1, v35);
      id v60 = v33;
      uint64_t v89 = v38 + 8;
      uint64_t v88 = v56;
      uint64_t v87 = v60;
      if (v57 == 1)
      {
        v56(v58, v39);
      }
      else if (swift_dynamicCast())
      {
        uint64_t v61 = *((void *)&v112 + 1);
        uint64_t v54 = v98;
        if (*((void *)&v112 + 1))
        {
          uint64_t v62 = v113;
          __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 24))(&v105, v61, v62);
          uint64_t v63 = (void *)v105;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
          goto LABEL_19;
        }
LABEL_18:
        outlined destroy of AccessibilityNumeric?((uint64_t)&v111);
        uint64_t v63 = 0;
LABEL_19:
        uint64_t v64 = v92;
        uint64_t v65 = v101;
        v94(v92, (uint64_t)v104, v39);
        if (v59(v64, 1, v65) == 1)
        {
          v88(v64, v39);
        }
        else if (swift_dynamicCast())
        {
          uint64_t v66 = *((void *)&v112 + 1);
          uint64_t v67 = v103;
          uint64_t v68 = v99;
          if (*((void *)&v112 + 1))
          {
            uint64_t v69 = v113;
            __swift_project_boxed_opaque_existential_1(&v111, *((uint64_t *)&v112 + 1));
            uint64_t v70 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v69 + 24);
            uint64_t v71 = v69;
            uint64_t v68 = v99;
            v70(&v105, v66, v71);
            uint64_t v72 = (void *)v105;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v111);
LABEL_26:
            type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>();
            uint64_t v109 = v73;
            uint64_t v110 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<AccessibilityBoundedNumber>);
            uint64_t v74 = (void *)swift_allocObject();
            *(void *)&uint64_t v108 = v74;
            uint64_t v75 = v87;
            v74[2] = v87;
            v74[3] = v63;
            v74[4] = v72;
            v74[5] = 0;
            *(void *)&uint64_t v107 = 0;
            uint64_t v105 = 0u;
            uint64_t v106 = 0u;
            uint64_t v76 = v72;
            id v77 = v75;
            uint64_t v78 = v63;
            outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v108, (uint64_t)&v105);
            if (v68)
            {
              type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
              uint64_t v79 = swift_allocObject();
              *(_OWORD *)(v79 + 16) = xmmword_2461B9DC0;
              uint64_t v80 = v96;
              *(void *)(v79 + 32) = v95;
              *(void *)(v79 + 40) = v80;
              *(unsigned char *)(v79 + 48) = v97 & 1;
              *(void *)(v79 + 56) = v68;
            }
            else
            {
              uint64_t v79 = MEMORY[0x263F8EE78];
            }
            uint64_t v81 = (void (*)(uint64_t, uint64_t))v88;
            long long v82 = v90;
            outlined destroy of AnyAccessibilityValue?((uint64_t)&v108);
            *((void *)&v107 + 1) = v79;
            uint64_t v111 = v105;
            uint64_t v112 = v106;
            char v113 = v107;

            v81((uint64_t)v104, v39);
            (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v82, v65);
            v81((uint64_t)v67, v39);
            goto LABEL_32;
          }
LABEL_25:
          outlined destroy of AccessibilityNumeric?((uint64_t)&v111);
          uint64_t v72 = 0;
          goto LABEL_26;
        }
        *(void *)&char v113 = 0;
        uint64_t v111 = 0u;
        uint64_t v112 = 0u;
        uint64_t v67 = v103;
        uint64_t v68 = v99;
        goto LABEL_25;
      }
      *(void *)&char v113 = 0;
      uint64_t v111 = 0u;
      uint64_t v112 = 0u;
      uint64_t v54 = v98;
      goto LABEL_18;
    }
  }
  else
  {
    *(void *)&char v113 = 0;
    uint64_t v111 = 0u;
    uint64_t v112 = 0u;
    outlined destroy of AccessibilityNumeric?((uint64_t)&v111);
  }
  *(void *)&uint64_t v111 = 0;
  *((void *)&v111 + 1) = 0xE000000000000000;
  uint64_t v46 = v26;
  uint64_t v47 = v101;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  long long v48 = v111;
  type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>();
  uint64_t v109 = v49;
  uint64_t v110 = lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(&lazy protocol witness table cache variable for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>, (void (*)(uint64_t))type metadata accessor for AnyAccessibilityValue.ConcreteBase<String>);
  uint64_t v108 = v48;
  *(void *)&uint64_t v107 = 0;
  uint64_t v105 = 0u;
  uint64_t v106 = 0u;
  swift_bridgeObjectRetain();
  outlined assign with copy of AnyAccessibilityValue?((uint64_t)&v108, (uint64_t)&v105);
  uint64_t v50 = v99;
  if (v99)
  {
    type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_2461B9DC0;
    uint64_t v52 = v96;
    *(void *)(v51 + 32) = v95;
    *(void *)(v51 + 40) = v52;
    *(unsigned char *)(v51 + 48) = v97 & 1;
    *(void *)(v51 + 56) = v50;
  }
  else
  {
    uint64_t v51 = MEMORY[0x263F8EE78];
  }
  uint64_t v53 = v100;
  uint64_t v54 = v98;
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v108);
  *((void *)&v107 + 1) = v51;
  uint64_t v111 = v105;
  uint64_t v112 = v106;
  char v113 = v107;
  swift_bridgeObjectRelease();
  char v55 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v55((uint64_t)v104, v53);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v46, v47);
  v55((uint64_t)v103, v53);
LABEL_32:
  outlined destroy of AnyAccessibilityValue?((uint64_t)v54);
  char v85 = v112;
  *uint64_t v54 = v111;
  v54[1] = v85;
  id result = *(double *)&v113;
  v54[2] = v113;
  return result;
}

uint64_t outlined destroy of AnyAccessibilityValue?(uint64_t a1)
{
  type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type AnyAccessibilityValue.ConcreteBase<String> and conformance AnyAccessibilityValue.ConcreteBase<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2460910BC()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of AccessibilityNumeric.isValidMinValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AccessibilityNumeric.isValidMaxValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AccessibilityNumeric.asNumber()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t Group.init<A, B>(elementsOf:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Group.init<A, B>(elementsOf:transform:)(a1, a2, a3, a4, a5, a6, a7, partial apply for closure #1 in Group.init<A, B>(elementsOf:transform:));
}

uint64_t Group.init<A, B>(subviewsOf:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Group.init<A, B>(elementsOf:transform:)(a1, a2, a3, a4, a5, a6, a7, partial apply for closure #1 in Group.init<A, B>(elementsOf:transform:));
}

uint64_t SubviewsCollection.base.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children(v1, a1);
}

uint64_t SubviewsCollection.base.setter(uint64_t a1)
{
  return outlined assign with take of _VariadicView_Children(a1, v1);
}

uint64_t (*SubviewsCollection.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 SubviewsCollection.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  return result;
}

uint64_t SubviewsCollection.init(list:contentSubgraph:transform:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t result = outlined init with take of ScrollStateRequest(a1, a4);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = v6;
  return result;
}

Swift::Int __swiftcall SubviewsCollection.index(before:)(Swift::Int before)
{
  Swift::Int v2 = before - 1;
  if (__OFSUB__(before, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  uint64_t v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  Swift::Int result = _MovableLockUnlock(v3);
  if ((v2 & 0x8000000000000000) == 0 && v2 < v6) {
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t SubviewsCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = outlined init with copy of SubviewsCollection(v3, (uint64_t)(a3 + 2));
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t SubviewsCollection.startIndex.getter()
{
  return 0;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SubviewsCollection@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = outlined init with copy of SubviewsCollection(v2, (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SubviewsCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of SubviewsCollection((uint64_t)v0);
  return v1;
}

uint64_t static SubviewsCollection._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  void v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>();
  lazy protocol witness table accessor for type _VariadicView_Children.Child and conformance _VariadicView_Children.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

uint64_t static SubviewsCollection._viewListCount(inputs:)()
{
  return 0;
}

uint64_t SubviewsCollectionSlice.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*v2 <= result && v2[1] > result) {
    return _VariadicView_Children.subscript.getter(result, a2);
  }
  __break(1u);
  return result;
}

uint64_t SubviewsCollectionSlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = outlined init with copy of SubviewsCollection(v3 + 16, (uint64_t)(a3 + 2));
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t SubviewsCollectionSlice.startIndex.getter()
{
  return *(void *)v0;
}

uint64_t SubviewsCollectionSlice.endIndex.getter()
{
  return *(void *)(v0 + 8);
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance SubviewsCollectionSlice@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 >= *v2 && v3 < v2[1])
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SubviewsCollectionSlice(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 >= *v1 && v2 < v1[1])
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance SubviewsCollectionSlice(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SubviewsCollectionSlice(void *a1, uint64_t (**a2)()))()
{
  int v5 = malloc(0x60uLL);
  *a1 = v5;
  uint64_t result = *a2;
  if ((uint64_t)*a2 >= *v2 && (uint64_t)result < v2[1])
  {
    _VariadicView_Children.subscript.getter((uint64_t)result, (uint64_t)v5);
    return protocol witness for Collection.subscript.read in conformance SubviewsCollectionSlice;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SubviewsCollectionSlice@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t result = outlined init with copy of SubviewsCollection(v2 + 16, (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v5;
  return result;
}

void protocol witness for Collection.indices.getter in conformance SubviewsCollectionSlice(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  if (v2 < *v1)
  {
    __break(1u);
  }
  else
  {
    *a1 = *v1;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SubviewsCollectionSlice()
{
  return *v0 == v0[1];
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance SubviewsCollectionSlice@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 >= *v3 && v3[1] >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SubviewsCollectionSlice@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance SubviewsCollectionSlice(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  if (v6 < *a2 || v4 < v5 || v3 < v5 || v6 < v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t *)(v4 - v3);
  if (__OFSUB__(v4, v3)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance SubviewsCollectionSlice@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = v2[1];
  if (*result >= *v2)
  {
    BOOL v6 = __OFSUB__(v3, v4);
    BOOL v5 = v3 - v4 < 0;
  }
  else
  {
    BOOL v6 = 0;
    BOOL v5 = 0;
  }
  if (v5 != v6) {
    *a2 = v3 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance SubviewsCollectionSlice(uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v3 = v1[1];
  if (*result >= *v1)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 != v5) {
    *uint64_t result = v2 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SubviewsCollectionSlice@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of SubviewsCollectionSlice((uint64_t)v1, a1);
  uint64_t v3 = *v1;
  uint64_t result = outlined destroy of SubviewsCollectionSlice((uint64_t)v1);
  *(void *)(a1 + 72) = v3;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SubviewsCollectionSlice()
{
  uint64_t v1 = v0[1];
  uint64_t result = v1 - *v0;
  if (v1 < *v0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v1, *v0)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance SubviewsCollectionSlice()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  outlined destroy of SubviewsCollectionSlice((uint64_t)v0);
  return v1;
}

uint64_t static SubviewsCollectionSlice._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v3;
  void v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v4;
  AGGraphCreateOffsetAttribute2();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>();
  lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
  int v5 = Attribute.init<A>(body:value:flags:update:)();
  return specialized static ForEach<>._makeViewList(view:inputs:)(v5, (uint64_t)v7, a2);
}

uint64_t static SubviewsCollectionSlice._viewListCount(inputs:)()
{
  return 0;
}

double protocol witness for static Rule.initialValue.getter in conformance SubviewsCollectionSlice.Child@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance SubviewsCollectionSlice.Child@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for Slice<SubviewsCollection>(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of Slice<SubviewsCollection>(Value, (uint64_t)v4);
  return specialized ForEach<>.init(_:content:)((uint64_t)v4, (uint64_t)closure #1 in SubviewsCollectionSlice.Child.value.getter, 0, a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SubviewsCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SubviewsCollectionSlice()
{
  return lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SubviewsCollectionSlice> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SubviewsCollectionSlice>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollectionSlice and conformance SubviewsCollectionSlice, (uint64_t)&type metadata for SubviewsCollectionSlice);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<SubviewsCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SubviewsCollection>(255, a2, a3, a4, MEMORY[0x263F8DE58]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for GroupElementsOfContent(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v4 = (void *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x38uLL) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v9 = *(void *)a2;
    *long long v4 = *(void *)a2;
    long long v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v15 = v6 + 1;
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, unsigned __int8 *))(v5 + 16))(a1, a2);
      char v16 = 1;
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v17;
      (**(void (***)(uint64_t, unsigned __int8 *))(v17 - 8))(a1, a2);
      uint64_t v18 = (void *)*((void *)a2 + 5);
      uint64_t v19 = *((void *)a2 + 6);
      v4[5] = v18;
      v4[6] = v19;
      id v20 = v18;
      swift_bridgeObjectRetain();
      char v16 = 0;
    }
    *((unsigned char *)v4 + v6) = v16;
    uint64_t v21 = (void *)((unint64_t)&a2[v15 + 7] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21[1];
    uint64_t v23 = (void *)(((unint64_t)v4 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v21;
    v23[1] = v22;
  }
  swift_retain();
  return v4;
}

id *assignWithCopy for GroupElementsOfContent(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != (id *)a2)
  {
    if (*(void *)(v6 + 64) <= 0x38uLL) {
      uint64_t v7 = 56;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *(unsigned __int8 *)a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(id *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v7) = 1;
    }
    else
    {
      uint64_t v18 = (void *)*((void *)a2 + 3);
      a1[3] = v18;
      a1[4] = (id)*((void *)a2 + 4);
      (**((void (***)(unsigned __int8 *, unsigned __int8 *))v18 - 1))((unsigned __int8 *)a1, a2);
      uint64_t v19 = (void *)*((void *)a2 + 5);
      a1[5] = v19;
      a1[6] = (id)*((void *)a2 + 6);
      *((unsigned char *)a1 + v7) = 0;
      id v20 = v19;
      swift_bridgeObjectRetain();
    }
  }
  unint64_t v21 = *(void *)(v6 + 64);
  if (v21 <= 0x38) {
    unint64_t v21 = 56;
  }
  unint64_t v22 = v21 + 8;
  uint64_t v23 = (void *)(((unint64_t)a1 + v22) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)((unint64_t)&a2[v22] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for GroupElementsOfContent(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x38uLL) {
    uint64_t v5 = 56;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    long long v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
  }
  *(unsigned char *)(a1 + v5) = v11;
  *(_OWORD *)((v5 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

id *assignWithTake for GroupElementsOfContent(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != (id *)a2)
  {
    if (*(void *)(v6 + 64) <= 0x38uLL) {
      uint64_t v7 = 56;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *(unsigned __int8 *)a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(id *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = (id)*((void *)a2 + 6);
    }
    *((unsigned char *)a1 + v7) = v18;
  }
  unint64_t v20 = *(void *)(v6 + 64);
  if (v20 <= 0x38) {
    unint64_t v20 = 56;
  }
  *(_OWORD *)(((unint64_t)a1 + v20 + 8) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v20 + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupElementsOfContent(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x38) {
    unint64_t v3 = 56;
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v7 = v6 & 0xFFFFFFF8;
  unsigned int v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (v8 < 0x100) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 4)
  {
    int v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }
  else if (v10 == 2)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_5;
    }
  }
  else
  {
    int v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_5:
      unint64_t v4 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF) {
        LODWORD(v4) = -1;
      }
      return (v4 + 1);
    }
  }
  int v12 = v11 - 1;
  if (v7)
  {
    int v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void storeEnumTagSinglePayload for GroupElementsOfContent(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x38) {
    unint64_t v5 = 56;
  }
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((v5 & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x2460926ACLL);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t assignWithTake for SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  size_t v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for SubviewsCollectionSlice(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_246092780()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SubviewsCollectionSlice.Child()
{
  return &type metadata for SubviewsCollectionSlice.Child;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupElementsOfContent.Storage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = (uint64_t *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x38uLL) {
    uint64_t v6 = 56;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (unint64_t)(v6 + 1) > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v10 = *((unsigned __int8 *)a2 + v6);
    if (v10 >= 2) {
      unsigned int v10 = *(_DWORD *)a2 + 2;
    }
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, uint64_t *))(v5 + 16))(a1, a2);
      *((unsigned char *)v4 + v6) = 1;
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v11;
      (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
      int v12 = (void *)a2[5];
      uint64_t v13 = a2[6];
      v4[5] = (uint64_t)v12;
      v4[6] = v13;
      *((unsigned char *)v4 + v6) = 0;
      id v14 = v12;
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t destroy for GroupElementsOfContent.Storage(id *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v3 <= 0x38) {
    unint64_t v3 = 56;
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + v3);
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *(unsigned __int8 *)a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4 == 1)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
    return v9();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    return swift_bridgeObjectRelease();
  }
}

id *assignWithCopy for GroupElementsOfContent.Storage(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != (id *)a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x38uLL) {
      uint64_t v7 = 56;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *(unsigned __int8 *)a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(id *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v7) = 1;
    }
    else
    {
      char v18 = (void *)*((void *)a2 + 3);
      a1[3] = v18;
      a1[4] = (id)*((void *)a2 + 4);
      (**((void (***)(unsigned __int8 *, unsigned __int8 *))v18 - 1))((unsigned __int8 *)a1, a2);
      long long v19 = (void *)*((void *)a2 + 5);
      a1[5] = v19;
      a1[6] = (id)*((void *)a2 + 6);
      *((unsigned char *)a1 + v7) = 0;
      id v20 = v19;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t initializeWithTake for GroupElementsOfContent.Storage(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x38uLL) {
    uint64_t v4 = 56;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    long long v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
  }
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

id *assignWithTake for GroupElementsOfContent.Storage(id *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != (id *)a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x38uLL) {
      uint64_t v7 = 56;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = *((unsigned __int8 *)a1 + v7);
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *(unsigned __int8 *)a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1)
    {
      (*(void (**)(id *, uint64_t))(v6 + 8))(a1, v5);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

      swift_bridgeObjectRelease();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(id *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      a1[6] = (id)*((void *)a2 + 6);
    }
    *((unsigned char *)a1 + v7) = v18;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupElementsOfContent.Storage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 56;
  if (*(void *)(v3 + 64) > 0x38uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for GroupElementsOfContent.Storage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x38) {
    unint64_t v5 = 56;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x246093430);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for GroupElementsOfContent.Storage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 56;
  if (*(void *)(v2 + 64) > 0x38uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for GroupElementsOfContent.Storage(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x38uLL) {
    size_t v4 = 56;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t instantiation function for generic protocol witness table for SubviewsRoot<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SubviewsCollectionSlice.Child(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SubviewsCollectionSlice.Child and conformance SubviewsCollectionSlice.Child();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_246093654()
{
  return 48;
}

__n128 sub_246093660(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_246093674(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t ImageRenderer.objectWillChange.getter()
{
  protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID.ElementCollection();

  return swift_retain();
}

uint64_t ImageRenderer.renderer.getter()
{
  return swift_retain();
}

uint64_t ImageRenderer.observationEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t ImageRenderer.observationEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 36) = a1;
  return result;
}

uint64_t (*ImageRenderer.observationEnabled.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ImageRenderer.isObservationEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t ImageRenderer.isObservationEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 36) = a1;
  return result;
}

uint64_t ImageRenderer.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3] + *(void *)(*(void *)v1[3] + 232);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

void (*ImageRenderer.content.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  _OWORD v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  void v3[3] = malloc(v6);
  int v7 = malloc(v6);
  v3[4] = v7;
  ImageRenderer.content.getter((uint64_t)v7);
  return ImageRenderer.content.modify;
}

void ImageRenderer.content.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized ImageRendererHost.content.setter((uint64_t)v3);
    int v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized ImageRendererHost.content.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t ImageRenderer.proposedSize.getter()
{
  return *(void *)(*(void *)(v0 + 24) + *(void *)(**(void **)(v0 + 24) + 248));
}

void (*ImageRenderer.proposedSize.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *(void *)(v1 + 24) + *(void *)(**(void **)(v1 + 24) + 248);
  char v5 = *(unsigned char *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  char v8 = *(unsigned char *)(v4 + 24);
  void *v3 = *(void *)v4;
  *((unsigned char *)v3 + 8) = v5;
  _OWORD v3[2] = v6;
  *((unsigned char *)v3 + 24) = v8 & 1;
  return ImageRenderer.proposedSize.modify;
}

void ImageRenderer.proposedSize.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  ImageRendererHost.proposedSize.setter(**a1, *((unsigned char *)v1 + 8), v1[2], *((unsigned char *)v1 + 24));

  free(v1);
}

double ImageRenderer.scale.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 40);
}

uint64_t ImageRenderer.scale.setter(double a1)
{
  swift_beginAccess();
  double v3 = *(double *)(v1 + 40);
  *(double *)(v1 + 40) = a1;
  return ImageRenderer.scale.didset(v3);
}

uint64_t ImageRenderer.scale.didset(double a1)
{
  uint64_t result = swift_beginAccess();
  double v4 = *(double *)(v1 + 40);
  if (v4 != a1)
  {
    char v5 = *(uint64_t **)(v1 + 24);
    uint64_t v6 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 240));
    swift_beginAccess();
    uint64_t v7 = *v6;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v6, v4);
    swift_release();
    if (v6[1])
    {
      uint64_t v8 = *v6;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_endAccess();
    uint64_t v9 = *v5;
    v10[0] = 2;
    return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(v10, 1, v9, (uint64_t)&protocol witness table for ImageRendererHost<A>);
  }
  return result;
}

void (*ImageRenderer.scale.modify(void *a1))(uint64_t a1)
{
  double v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  swift_beginAccess();
  void v3[9] = *(void *)(v1 + 40);
  return ImageRenderer.scale.modify;
}

void ImageRenderer.scale.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(*(void *)a1 + 80);
  swift_beginAccess();
  double v4 = *(double *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  ImageRenderer.scale.didset(v4);

  free(v1);
}

uint64_t ImageRenderer.isOpaque.getter()
{
  return (*(unsigned __int8 *)(*(void *)(v0 + 24) + 28) >> 1) & 1;
}

uint64_t ImageRenderer.isOpaque.setter(uint64_t result)
{
  if (result) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(*(void *)(v1 + 24) + 28) = *(_DWORD *)(*(void *)(v1 + 24) + 28) & 0xFFFFFFFD | v2;
  return result;
}

unsigned char *(*ImageRenderer.isOpaque.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(*(void *)(v1 + 24) + 28) & 2) != 0;
  return ImageRenderer.isOpaque.modify;
}

unsigned char *ImageRenderer.isOpaque.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 2;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)result + 24) + 28) = *(_DWORD *)(*(void *)(*(void *)result + 24) + 28) & 0xFFFFFFFD | v1;
  return result;
}

void ImageRenderer.colorMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)(v1 + 24) + 16);
}

unsigned char *ImageRenderer.colorMode.setter(unsigned char *result)
{
  *(unsigned char *)(*(void *)(v1 + 24) + 16) = *result;
  return result;
}

unsigned char *(*ImageRenderer.colorMode.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(*(void *)(v1 + 24) + 16);
  return ImageRenderer.colorMode.modify;
}

unsigned char *ImageRenderer.colorMode.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)(*(void *)result + 24) + 16) = result[8];
  return result;
}

uint64_t *ImageRenderer.__allocating_init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  double v4 = specialized ImageRenderer.init(content:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t closure #1 in closure #1 in ImageRenderer.init(content:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ImageRenderer.accessSeed()();
    ImageRenderer.withSeedMutation(_:)();
    return swift_release();
  }
  return result;
}

uint64_t ImageRenderer.seed.getter()
{
  ImageRenderer.accessSeed()();
  return *(unsigned int *)(v0 + 32);
}

uint64_t ImageRenderer.seed.setter()
{
  return ImageRenderer.withSeedMutation(_:)();
}

void *ImageRenderer.cgImage.getter()
{
  ImageRenderer.accessSeed()();
  uint64_t v0 = (void *)specialized ImageRendererHost.cgImage.getter();
  id v1 = v0;
  return v0;
}

Swift::Void __swiftcall ImageRenderer.accessSeed()()
{
  uint64_t v1 = swift_beginAccess();
  if (*(unsigned char *)(v0 + 36) == 1)
  {
    MEMORY[0x270FA5388](v1);
    swift_getKeyPath();
    swift_getWitnessTable();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
  }
}

void *ImageRendererHost.cgImage.getter()
{
  uint64_t v0 = (void *)specialized ImageRendererHost.cgImage.getter();
  id v1 = v0;
  return v0;
}

uint64_t closure #1 in closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:)(CGContext *a1, uint64_t a2, void (*a3)(uint64_t *), double a4, double a5, double a6)
{
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v11, sel_setProfile_, 1);
  objc_msgSend(v11, sel_setDefaultColorSpace_, 1);
  CGRect ClipBoundingBox = CGContextGetClipBoundingBox(a1);
  objc_msgSend(v11, sel_setContentRect_, ClipBoundingBox.origin.x, ClipBoundingBox.origin.y, ClipBoundingBox.size.width, ClipBoundingBox.size.height);
  swift_beginAccess();
  objc_msgSend(v11, sel_setDeviceScale_, *(double *)(a2 + 40));
  objc_msgSend(v11, sel_translateByX_Y_, 0.0, a5);
  objc_msgSend(v11, sel_scaleByX_Y_, 1.0, -1.0);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v12 = one-time initialization token for shared;
  id v13 = v11;
  if (v12 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unsigned int v14 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v15 = static CoreGlue2.shared;
  v14(&v26);

  uint64_t v16 = v26;
  uint64_t v17 = v27;
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 32) = xmmword_24619B520;
  *(void *)(v18 + 48) = 1065353216;
  *(void *)(v18 + 56) = 0x7FF8000000000000;
  v25[0] = v16;
  v25[1] = v17;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v19 = v13;
  *(void *)(v18 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v19, v25);
  *(void *)(v18 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v18 + 64) = 0;

  uint64_t v26 = v18;
  a3(&v26);
  type metadata accessor for _ContiguousArrayStorage<(RBDisplayListRenderKey, Any)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  unint64_t v21 = (void *)*MEMORY[0x263F63908];
  *(void *)(inited + 32) = *MEMORY[0x263F63908];
  *(void *)(inited + 64) = MEMORY[0x263F8EF38];
  *(double *)(inited + 40) = a6;
  id v22 = v21;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for RBDisplayListRenderKey(0);
  lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListRenderKey and conformance RBDisplayListRenderKey, type metadata accessor for RBDisplayListRenderKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_renderInContext_options_, a1, isa);

  return swift_release();
}

uint64_t ImageRenderer.withSeedMutation(_:)()
{
  return swift_release();
}

uint64_t ImageRenderer.deinit()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for ImageRenderer.observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ImageRenderer.__deallocating_deinit()
{
  return ImageRenderer.__deallocating_deinit((void (*)(void))ImageRenderer.deinit);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance ImageRenderer<A>@<X0>(uint64_t *a1@<X8>)
{
  *a1 = protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID.ElementCollection();

  return swift_retain();
}

uint64_t (*variable initialization expression of ImageRendererHost.observer())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageRendererHost.viewGraph.getter()
{
  specialized ImageRendererHost.viewGraph.getter();

  return swift_retain();
}

uint64_t (*ImageRendererHost.renderingPhase.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t ImageRendererHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 72) = v2;
  return result;
}

uint64_t ImageRendererHost.externalUpdateCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 80);
}

uint64_t ImageRendererHost.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*ImageRendererHost.externalUpdateCount.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double ImageRendererHost.cgImageSize.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 112);
}

uint64_t ImageRendererHost.cgImageSize.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  return result;
}

uint64_t (*ImageRendererHost.cgImageSize.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double ImageRendererHost.cgImageScale.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 128);
}

uint64_t ImageRendererHost.cgImageScale.setter(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 128) = a1;
  return result;
}

uint64_t (*ImageRendererHost.cgImageScale.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t ImageRendererHost.cgImageNeedsUpdate.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t ImageRendererHost.cgImageNeedsUpdate.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 144) = a1;
  return result;
}

uint64_t (*ImageRendererHost.cgImageNeedsUpdate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t ImageRendererHost._platformImage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ImageRendererHost._platformImage.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 152) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*ImageRendererHost._platformImage.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t closure #3 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(__n128 **)(a2 + 96);
  unint64_t v9 = 0;
  int v7 = a4 & 0xFFFFFF;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)(&v9, v6, (uint64_t)v6, a3, v7, a1);
  swift_release();

  return swift_bridgeObjectRelease();
}

void closure #1 in ImageRendererHost.cgImage.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  *(void *)(a4 + 136) = a1;
  id v11 = (uint64_t *)(a4 + *(void *)(*(void *)a4 + 240));
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (v11[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v13 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release_n();
  }
  else
  {
    uint64_t v14 = swift_retain_n();
    double v13 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
  }
  swift_release_n();
  swift_endAccess();
  swift_beginAccess();
  *(double *)(a4 + 128) = v13;
  swift_beginAccess();
  *(double *)(a4 + 112) = a5;
  *(double *)(a4 + 120) = a6;
  swift_beginAccess();
  *(void *)(a4 + 152) = 0;
  swift_unknownObjectRelease();
  double v15 = *(double *)(a4 + 112);
  double v16 = *(double *)(a4 + 120);
  double v17 = *(double *)(a4 + 128);
  uint64_t v18 = v11[1];
  v30[0] = *v11;
  v30[1] = v18;
  int v19 = *(_DWORD *)(a4 + 20);
  char v20 = *(unsigned char *)(a4 + 24);
  int v21 = *(_DWORD *)(a4 + 28);
  char v22 = *(unsigned char *)(a4 + 32);
  v25[0] = *(unsigned char *)(a4 + 16);
  int v26 = v19;
  char v27 = v20;
  int v28 = v21;
  char v29 = v22;
  swift_retain();
  swift_retain();
  uint64_t v23 = specialized static CGImageRef.render(size:scale:environment:options:renderer:)(v30, v25, a2, a3, v15, v16, v17);
  swift_release();
  swift_release();
  uint64_t v24 = *(void **)(a4 + 104);
  *(void *)(a4 + 104) = v23;
}

Swift::Void __swiftcall ImageRendererHost.updateEnvironment()()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v2 = (void *)v1[2];
  uint64_t v3 = (void *)v1[3];
  double v4 = (void *)v1[4];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain();
  id v5 = v2;
  id v6 = v3;
  id v7 = v4;
  AGGraphSetValue();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
}

id *ImageRendererHost.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  (*(void (**)(char *))(*(void *)(v1[10] - 8) + 8))((char *)v0 + *((void *)*v0 + 29));
  swift_release();
  swift_release();
  return v0;
}

uint64_t ImageRendererHost.__deallocating_deinit()
{
  return ImageRenderer.__deallocating_deinit((void (*)(void))ImageRendererHost.deinit);
}

uint64_t ImageRenderer.__deallocating_deinit(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance ImageRendererHost<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ImageRendererHost.renderingPhase.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance ImageRendererHost<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ImageRendererHost.externalUpdateCount.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t specialized ImageRendererHost.cgImage.getter()
{
  if (objc_msgSend(self, sel_isMainThread))
  {
    uint64_t v1 = *(void *)(v0 + 104);
    if (!v1 || (swift_beginAccess(), (*(unsigned char *)(v0 + 144) & 1) != 0))
    {
      ImageRendererHost.render(ifNewerThan:renderer:)(*(void *)(v0 + 136), 0, (void (*)(uint64_t, uint64_t (*)(unint64_t *), double))partial apply for closure #1 in ImageRendererHost.cgImage.getter, v0);
      swift_beginAccess();
      *(unsigned char *)(v0 + 144) = 0;
      return *(void *)(v0 + 104);
    }
    return v1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_2460952A4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = ImageRenderer.seed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2460952D0()
{
  return ImageRenderer.seed.setter();
}

uint64_t sub_2460952F8()
{
  return 16;
}

__n128 sub_246095304(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246095310()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in ImageRenderer<A>()
{
  return lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>);
}

uint64_t sub_246095368@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ImageRenderer.isObservationEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_246095398(char *a1)
{
  return ImageRenderer.isObservationEnabled.setter(*a1);
}

uint64_t sub_2460953C0()
{
  return 16;
}

__n128 sub_2460953CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460953D8@<X0>(uint64_t a1@<X8>)
{
  return ImageRenderer.content.getter(a1);
}

uint64_t sub_2460953FC(uint64_t a1)
{
  return specialized ImageRenderer.content.setter(a1);
}

uint64_t sub_246095420()
{
  return 16;
}

__n128 sub_24609542C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246095438@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ImageRenderer.proposedSize.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5 & 1;
  return result;
}

uint64_t sub_246095478(uint64_t a1)
{
  return ImageRenderer.proposedSize.setter(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_2460954C4()
{
  return 16;
}

__n128 sub_2460954D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_2460954DC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  double result = *(double *)(v3 + 40);
  *a2 = result;
  return result;
}

uint64_t sub_246095524(double *a1)
{
  return ImageRenderer.scale.setter(*a1);
}

uint64_t sub_24609554C()
{
  return 16;
}

__n128 sub_246095558(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246095564@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ImageRenderer.isOpaque.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_246095594(unsigned __int8 *a1)
{
  return ImageRenderer.isOpaque.setter(*a1);
}

uint64_t sub_2460955BC()
{
  return 16;
}

__n128 sub_2460955C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_2460955D4(unsigned char *a1@<X8>)
{
}

unsigned char *sub_2460955F8(char *a1)
{
  char v2 = *a1;
  return ImageRenderer.colorMode.setter(&v2);
}

uint64_t sub_246095630()
{
  return 16;
}

__n128 sub_24609563C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for ImageRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImageRenderer);
}

uint64_t dispatch thunk of ImageRenderer.__allocating_init(content:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t method lookup function for ImageRendererHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImageRendererHost);
}

uint64_t partial apply for closure #3 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)(unint64_t *a1)
{
  return closure #3 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int16 *)(v1 + 32) | (*(unsigned __int8 *)(v1 + 34) << 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:)(CGContext *a1)
{
  return closure #1 in closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 40), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 56));
}

void partial apply for closure #1 in ImageRenderer.seed.setter()
{
  *(_DWORD *)(*(void *)(v0 + 16) + 32) = *(_DWORD *)(v0 + 24);
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void partial apply for closure #1 in ImageRendererHost.cgImage.getter(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  closure #1 in ImageRendererHost.cgImage.getter(a1, a2, a3, v5, a4, a5);
}

uint64_t sub_2460956F4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_24609572C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ImageRenderer.init(content:)()
{
  return closure #1 in closure #1 in ImageRenderer.init(content:)();
}

uint64_t sub_246095770()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2460957A8()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for ImageRendererHostViewGraph()
{
  return &unk_26FA937F8;
}

void _SaturationEffect.amount.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*_SaturationEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _SaturationEffect.animatableData.setter(double a1)
{
  double *v1 = a1;
}

double (*_SaturationEffect.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double _SaturationEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 7;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_2460958DC()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

BOOL static _SaturationEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _SaturationEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 7;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.saturation(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _SaturationEffect);
}

double sub_246095A08@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_246095A14(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_246095A20()
{
  return swift_getWitnessTable();
}

uint64_t Color.multiplyingHierarchicalOpacity(at:)(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, &lazy cache variable for type metadata for ColorBox<Color.HierarchicalOpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor;
  if (!lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor);
  }
  return result;
}

uint64_t Color.OpacityColor.description.getter(uint64_t result, double a2)
{
  double v2 = a2 * 100.0 + 0.5;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
  {
    uint64_t v3 = result;
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v4._uint64_t countAndFlagsBits = 8229;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 144);
    uint64_t v6 = swift_retain();
    v7._uint64_t countAndFlagsBits = v5(v6);
    String.append(_:)(v7);
    swift_release();
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.OpacityColor()
{
  return Color.OpacityColor.description.getter(*(void *)v0, *(double *)(v0 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.OpacityColor()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.OpacityColor()
{
  Swift::UInt64 v1 = v0[1];
  (*(void (**)(void))(*(void *)*v0 + 136))();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.OpacityColor()
{
  uint64_t v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v2;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t Color.HierarchicalOpacityColor.description.getter(uint64_t a1)
{
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  Swift::String v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 144);
  uint64_t v5 = swift_retain();
  v6._uint64_t countAndFlagsBits = v4(v5);
  String.append(_:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  return 0x206C6576654CLL;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.HierarchicalOpacityColor(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = a1[1];
  uint64_t v7 = *a1;
  uint64_t v4 = v7;
  uint64_t v8 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 152))(v2, &v7);
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  return (*(uint64_t (**)(uint64_t *))(*(void *)v3 + 104))(&v7);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.HierarchicalOpacityColor()
{
  return Color.HierarchicalOpacityColor.description.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.HierarchicalOpacityColor()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.HierarchicalOpacityColor()
{
  Swift::UInt v1 = v0[1];
  (*(void (**)(void))(*(void *)*v0 + 136))();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.HierarchicalOpacityColor()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.HierarchicalOpacityColor(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return (*a1 == *a2 || ((*(uint64_t (**)(void))(*(void *)*a1 + 88))() & 1) != 0) && v2 == v3;
}

uint64_t Color.over(_:)(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, &lazy cache variable for type metadata for ColorBox<Color.DestinationOverProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain();
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider;
  if (!lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider);
  }
  return result;
}

void protocol witness for ColorProvider.resolve(in:) in conformance Color.DestinationOverProvider(uint64_t *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = a1[1];
  uint64_t v17 = *a1;
  uint64_t v4 = v17;
  uint64_t v18 = v5;
  float v6 = (*(float (**)(uint64_t *))(*(void *)v2 + 104))(&v17);
  float v8 = v7;
  float v10 = v9;
  float v12 = v11;
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  (*(void (**)(uint64_t *))(*(void *)v3 + 104))(&v17);

  Color.Resolved.over(_:)(v13, v14, v15, v16, v6, v8, v10, v12);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.DestinationOverProvider()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v5);
  uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v2 + 136);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color.DestinationOverProvider(uint64_t a1)
{
  uint64_t v3 = v1[1];
  (*(void (**)(void))(*(void *)*v1 + 136))();
  uint64_t v4 = *(void (**)(uint64_t))(*(void *)v3 + 136);
  swift_retain();
  v4(a1);

  return swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.DestinationOverProvider()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v5);
  uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v2 + 136);
  swift_retain();
  v3(v5);
  swift_release();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color.DestinationOverProvider(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (*a1 != *a2 && ((*(uint64_t (**)(void))(*(void *)*a1 + 88))() & 1) == 0) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v3) & 1;
}

uint64_t Color.mix(with:by:in:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  char v6 = *a2;
  float v7 = a4;
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, &lazy cache variable for type metadata for ColorBox<Color.MixProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  *(unsigned char *)(v8 + 32) = v6;
  *(float *)(v8 + 36) = v7;
  swift_retain();
  swift_retain();
  return v8;
}

unint64_t lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider;
  if (!lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.MixProvider and conformance Color.MixProvider);
  }
  return result;
}

uint64_t Color.blend(with:in:by:)(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  char v6 = *a2;
  float v7 = a4;
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, &lazy cache variable for type metadata for ColorBox<Color.MixProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a1;
  *(unsigned char *)(v8 + 32) = v6;
  *(float *)(v8 + 36) = v7;
  swift_retain();
  swift_retain();
  return v8;
}

void Color.MixProvider.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 20);
  uint64_t v5 = *(void (**)(uint64_t))(**(void **)v1 + 136);
  Swift::UInt8 v6 = *(unsigned char *)(v1 + 16);
  swift_retain();
  v5(a1);
  swift_release();
  float v7 = *(void (**)(uint64_t))(*(void *)v3 + 136);
  swift_retain();
  v7(a1);
  swift_release();
  Hasher._combine(_:)(v6);
  if ((v4 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v8 = v4;
  }
  else {
    Swift::UInt32 v8 = 0;
  }
  Hasher._combine(_:)(v8);
}

Swift::Int Color.MixProvider.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Swift::UInt32 v3 = *((_DWORD *)v0 + 5);
  Swift::UInt8 v4 = *((unsigned char *)v0 + 16);
  Hasher.init(_seed:)();
  uint64_t v5 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
  swift_retain();
  v5(v9);
  swift_release();
  Swift::UInt8 v6 = *(void (**)(unsigned char *))(*(void *)v2 + 136);
  swift_retain();
  v6(v9);
  swift_release();
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v3;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for ColorProvider.resolve(in:) in conformance Color.MixProvider(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *((void *)v1 + 1);
  float v6 = v1[5];
  char v22 = *((unsigned char *)v1 + 16);
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  float v7 = (*(float (**)(uint64_t *))(*(void *)v4 + 104))(&v20);
  float v9 = v8;
  float v11 = v10;
  float v13 = v12;
  uint64_t v20 = v2;
  uint64_t v21 = v3;
  *(double *)v14.i64 = (*(double (**)(uint64_t *))(*(void *)v5 + 104))(&v20);
  float v15 = *(float *)v14.i32;
  v17.i32[0] = v16;
  *(float *)v14.i32 = v7;
  ResolvedGradient.ColorSpace.mix(_:_:by:)(v14, v9, v11, v13, v15, v17, v18, v19, v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.MixProvider()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Swift::UInt32 v3 = *((_DWORD *)v0 + 5);
  Swift::UInt8 v4 = *((unsigned char *)v0 + 16);
  Hasher.init(_seed:)();
  uint64_t v5 = *(void (**)(unsigned char *))(*(void *)v1 + 136);
  swift_retain();
  v5(v9);
  swift_release();
  float v6 = *(void (**)(unsigned char *))(*(void *)v2 + 136);
  swift_retain();
  v6(v9);
  swift_release();
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v7 = v3;
  }
  else {
    Swift::UInt32 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t Color._settingOpacity(_:)(uint64_t a1, double a2)
{
  float v3 = a2;
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, &lazy cache variable for type metadata for ColorBox<Color.SettingOpacityProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(float *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider;
  if (!lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider);
  }
  return result;
}

Swift::Int Color.SettingOpacityProvider.hashValue.getter(uint64_t a1, float a2)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 136))(v6);
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v4 = LODWORD(a2);
  }
  else {
    Swift::UInt32 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.SettingOpacityProvider(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)v2 + 104))(&v4);
}

CGColorRef protocol witness for ColorProvider.staticColor.getter in conformance Color.SettingOpacityProvider()
{
  float v1 = v0[2];
  uint64_t v2 = (CGColor *)(*(uint64_t (**)(void))(**(void **)v0 + 120))();
  if (!v2) {
    return 0;
  }
  float v3 = v2;
  CGColorRef CopyWithAlpha = CGColorCreateCopyWithAlpha(v2, v1);

  return CopyWithAlpha;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color.SettingOpacityProvider()
{
  return Color.SettingOpacityProvider.hashValue.getter(*(void *)v0, *(float *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Color.SettingOpacityProvider()
{
  Swift::UInt32 v1 = v0[2];
  (*(void (**)(void))(**(void **)v0 + 136))();
  if ((v1 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v2 = v1;
  }
  else {
    Swift::UInt32 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color.SettingOpacityProvider()
{
  uint64_t v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 2);
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 136))(v5);
  if ((v2 & 0x7FFFFFFF) != 0) {
    Swift::UInt32 v3 = v2;
  }
  else {
    Swift::UInt32 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.SettingOpacityProvider(float *a1, uint64_t a2)
{
  float v2 = a1[2];
  float v3 = *(float *)(a2 + 8);
  return (*(void *)a1 == *(void *)a2 || ((*(uint64_t (**)(void))(**(void **)a1 + 88))() & 1) != 0) && v2 == v3;
}

void Color.vibrancy(_:tertiaryOpacity:)()
{
}

uint64_t assignWithCopy for Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for Color.SettingOpacityProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

void *type metadata accessor for Color.SettingOpacityProvider()
{
  return &unk_26FA7CA98;
}

uint64_t initializeBufferWithCopyOfBuffer for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for Color.MixProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

void *type metadata accessor for Color.MixProvider()
{
  return &unk_26FA7C540;
}

void *type metadata accessor for Color.DestinationOverProvider()
{
  return &unk_26FA7C718;
}

void *type metadata accessor for Color.HierarchicalOpacityColor()
{
  return &unk_26FA7C2A0;
}

ValueMetadata *type metadata accessor for Color.OpacityColor()
{
  return &type metadata for Color.OpacityColor;
}

unint64_t instantiation function for generic protocol witness table for Color.SettingOpacityProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.SettingOpacityProvider and conformance Color.SettingOpacityProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.MixProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.MixProvider and conformance Color.MixProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.DestinationOverProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.DestinationOverProvider and conformance Color.DestinationOverProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.HierarchicalOpacityColor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.HierarchicalOpacityColor and conformance Color.HierarchicalOpacityColor();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL specialized static Color.MixProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 16);
  float v4 = *(float *)(a1 + 20);
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  float v7 = *(float *)(a2 + 20);
  if (*(void *)a1 != *(void *)a2 && ((*(uint64_t (**)(void))(**(void **)a1 + 88))() & 1) == 0) {
    return 0;
  }
  if (v2 == v5)
  {
    if (v3 == v6) {
      return v4 == v7;
    }
    return 0;
  }
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 88))(v5);
  BOOL result = 0;
  if ((v8 & 1) != 0 && v3 == v6) {
    return v4 == v7;
  }
  return result;
}

uint64_t static StyleWriterOverrideModifier.injectStyleOverride<A>(in:requiring:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[5];
  uint64_t v14 = *a1;
  int v15 = v9;
  uint64_t v16 = v10;
  long long v17 = *(_OWORD *)(a1 + 3);
  uint64_t v18 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a6 + 8))(&v14, a4, a6);
  if (result)
  {
    float v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 32);
    return v13(a1, a3, a5);
  }
  return result;
}

uint64_t dispatch thunk of AnyDefaultStyle.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static StyleWriterOverrideModifier.injectStyleOverride(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

double TextAlignment.value.getter(char a1)
{
  return dbl_24620BC30[a1];
}

void TextAlignment.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

void *static TextAlignment.allCases.getter()
{
  return &outlined read-only object #0 of static TextAlignment.allCases.getter;
}

Swift::Int TextAlignment.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance TextAlignment(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TextAlignment;
}

uint64_t static TextAlignment.unwrap(codingProxy:)(char a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

unsigned __int8 *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance TextAlignment@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 2) {
    char v3 = 2;
  }
  else {
    char v3 = v2 == 1;
  }
  *a2 = v3;
  return result;
}

uint64_t TextAlignment.protobufValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

SwiftUI::TextAlignment_optional __swiftcall TextAlignment.init(protobufValue:)(Swift::UInt protobufValue)
{
  if (protobufValue >= 4) {
    return (SwiftUI::TextAlignment_optional)3;
  }
  else {
    return (SwiftUI::TextAlignment_optional)(0x2010003u >> (8 * protobufValue));
  }
}

unint64_t lazy protocol witness table accessor for type TextAlignment and conformance TextAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment;
  if (!lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [TextAlignment] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TextAlignment] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TextAlignment] and conformance [A])
  {
    type metadata accessor for [TextAlignment]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TextAlignment] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [TextAlignment]()
{
  if (!lazy cache variable for type metadata for [TextAlignment])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [TextAlignment]);
    }
  }
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in TextAlignment()
{
  return MEMORY[0x263F8E7A0];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in TextAlignment()
{
  return MEMORY[0x263F8E780];
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance TextAlignment@<X0>(unint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = 0x2010003u >> (8 * result);
  if (result >= 4) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for TextAlignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246097864);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

double static Angle.zero.getter()
{
  return 0.0;
}

BOOL static Angle.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double Angle.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double Angle.animatableData.setter(double a1)
{
  double result = a1 * 0.0078125;
  double *v1 = result;
  return result;
}

double Angle.degrees.getter(double a1)
{
  return a1 * 57.2957795;
}

SwiftUI::Angle __swiftcall Angle.init()()
{
  return 0;
}

SwiftUI::Angle __swiftcall Angle.init(degrees:)(Swift::Double degrees)
{
  result.radians = degrees * 0.0174532925;
  return result;
}

double static Angle.degrees(_:)(double a1)
{
  return a1 * 0.0174532925;
}

void Angle.radians.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*Angle.radians.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Angle.degrees.setter(double a1)
{
  double result = a1 * 0.0174532925;
  double *v1 = result;
  return result;
}

double (*Angle.degrees.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 57.2957795;
  return Angle.degrees.modify;
}

double Angle.degrees.modify(uint64_t a1)
{
  double result = *(double *)a1 * 0.0174532925;
  **(double **)(a1 + 8) = result;
  return result;
}

BOOL static Angle.< infix(_:_:)(double a1, double a2)
{
  return a1 < a2;
}

void Angle.hash(into:)(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Angle.hashValue.getter(double a1)
{
  Hasher.init(_seed:)();
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Angle(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Angle(double *a1, double *a2)
{
  return *a2 < *a1;
}

double (*Angle.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 128.0;
  return Angle.animatableData.modify;
}

double Angle.animatableData.modify(uint64_t a1)
{
  double result = *(double *)a1 * 0.0078125;
  **(double **)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Angle and conformance Angle()
{
  unint64_t result = lazy protocol witness table cache variable for type Angle and conformance Angle;
  if (!lazy protocol witness table cache variable for type Angle and conformance Angle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Angle and conformance Angle);
  }
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance Angle@<D0>(double *a1@<X8>)
{
  double result = *v1 * 128.0;
  *a1 = result;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance Angle(double *a1)
{
  double result = *a1 * 0.0078125;
  double *v1 = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance Angle(uint64_t a1))()
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 128.0;
  return protocol witness for Animatable.animatableData.modify in conformance Angle;
}

double sub_246097B74@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * 57.2957795;
  *a2 = result;
  return result;
}

double sub_246097B8C(double *a1, double *a2)
{
  double result = *a1 * 0.0174532925;
  *a2 = result;
  return result;
}

double sub_246097BA4@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * 128.0;
  *a2 = result;
  return result;
}

double sub_246097BBC(double *a1, double *a2)
{
  double result = *a1 * 0.0078125;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for Angle()
{
  return &type metadata for Angle;
}

uint64_t _SafeAreaIgnoringLayout.edges.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*_SafeAreaIgnoringLayout.edges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _SafeAreaIgnoringLayout.placement(of:in:)@<D0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)a1 + 6);
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = v2;
  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)((int *)&v4, -1, a2);
}

uint64_t _SafeAreaIgnoringLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *((_DWORD *)a3 + 2);
  uint64_t v13 = *a3;
  int v14 = v7;
  uint64_t v9 = v3;
  char v10 = v4;
  uint64_t v11 = v5;
  char v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t _SafeAreaRegionsIgnoringLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *((_DWORD *)a3 + 2);
  uint64_t v13 = *a3;
  int v14 = v7;
  uint64_t v9 = v3;
  char v10 = v4;
  uint64_t v11 = v5;
  char v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

uint64_t _SafeAreaIgnoringLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _SafeAreaIgnoringLayout@<D0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)a1 + 6);
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  int v6 = v2;
  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)((int *)&v4, -1, a2);
}

uint64_t _SafeAreaRegionsIgnoringLayout.regions.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*_SafeAreaRegionsIgnoringLayout.regions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SafeAreaRegionsIgnoringLayout.edges.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _SafeAreaRegionsIgnoringLayout.edges.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*_SafeAreaRegionsIgnoringLayout.edges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SafeAreaRegionsIgnoringLayout.ignoresAutomaticPadding(child:)()
{
  return 1;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance _SafeAreaRegionsIgnoringLayout@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  return _SafeAreaRegionsIgnoringLayout.placement(of:in:)(a1, *v2, a2);
}

uint64_t View.edgesIgnoringSafeArea(_:)(char a1, uint64_t a2)
{
  char v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for _SafeAreaIgnoringLayout);
}

uint64_t sub_246097E10()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_246097E24()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

void UnsafeHeterogeneousBuffer.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL UnsafeHeterogeneousBuffer.isEmpty.getter()
{
  return *(_DWORD *)(v0 + 12) == 0;
}

uint64_t UnsafeHeterogeneousBuffer.subscript.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*v2) {
    *a2 = *v2 + *(int *)(result + 4);
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.address.getter()
{
  return *(void *)v0;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.vtable<A>(as:)()
{
  return **(void **)v0;
}

uint64_t _UnsafeHeterogeneousBuffer_Element.flags.getter()
{
  return *(unsigned int *)(*(void *)v0 + 12);
}

uint64_t _UnsafeHeterogeneousBuffer_Element.flags.setter(uint64_t result)
{
  *(_DWORD *)(*(void *)v1 + 12) = result;
  return result;
}

uint64_t _UnsafeHeterogeneousBuffer_VTable.deinit()
{
  return v0;
}

uint64_t static _UnsafeHeterogeneousBuffer_VTable.hasType<A>(_:)()
{
  return 0;
}

void static _UnsafeHeterogeneousBuffer_VTable.moveInitialize(elt:from:)()
{
}

void static _UnsafeHeterogeneousBuffer_VTable.deinitialize(elt:)()
{
}

BOOL static UnsafeHeterogeneousBuffer.Index.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL static UnsafeHeterogeneousBuffer.Index.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance UnsafeHeterogeneousBuffer.Index(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t UnsafeHeterogeneousBuffer.count.getter()
{
  return *(int *)(v0 + 12);
}

void UnsafeHeterogeneousBuffer.startIndex.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void UnsafeHeterogeneousBuffer.endIndex.getter(void *a1@<X8>)
{
  *a1 = *(unsigned int *)(v1 + 12);
}

int *UnsafeHeterogeneousBuffer.formIndex(after:)(int *result)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    int v3 = *((_DWORD *)v1 + 3);
    uint64_t v4 = result[1];
    int v5 = *result + 1;
    *double result = v5;
    if (v5 == v3) {
      result[1] = 0;
    }
    else {
      result[1] = *(_DWORD *)(v2 + v4 + 8) + v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_DWORD *UnsafeHeterogeneousBuffer.index(after:)@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  if (*(void *)v2)
  {
    int v3 = *result + 1;
    if (v3 == *(_DWORD *)(v2 + 12))
    {
      *a2 = v3;
      a2[1] = 0;
    }
    else
    {
      int v4 = *(_DWORD *)(*(void *)v2 + (int)result[1] + 8) + result[1];
      *a2 = v3;
      a2[1] = v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance UnsafeHeterogeneousBuffer(void *a1@<X8>)
{
  *a1 = *(unsigned int *)(v1 + 12);
}

void *protocol witness for Collection.subscript.read in conformance UnsafeHeterogeneousBuffer(void *result, uint64_t a2)
{
  if (*v2)
  {
    *double result = *v2 + *(int *)(a2 + 4);
    return _ViewInputs.base.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int *protocol witness for Collection.subscript.getter in conformance UnsafeHeterogeneousBuffer@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(v2 + 12);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    int v4 = *result;
    if ((*result & 0x80000000) == 0)
    {
      int v5 = result[2];
      if (v3 >= v5)
      {
        int v6 = *(_DWORD *)(v2 + 8);
        *(void *)(a2 + 16) = *(void *)v2;
        *(_DWORD *)(a2 + 24) = v6;
        *(_DWORD *)(a2 + 28) = v3;
        int v7 = result[1];
        int v8 = result[3];
        *(_DWORD *)a2 = v4;
        *(_DWORD *)(a2 + 4) = v7;
        *(_DWORD *)(a2 + 8) = v5;
        *(_DWORD *)(a2 + 12) = v8;
        return result;
      }
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance UnsafeHeterogeneousBuffer(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  unsigned int v3 = *(_DWORD *)(v1 + 12);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v3;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance UnsafeHeterogeneousBuffer()
{
  return *(_DWORD *)(v0 + 12) == 0;
}

int *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance UnsafeHeterogeneousBuffer(int *result, int *a2)
{
  int v2 = *result;
  int v3 = a2[2];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

_DWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance UnsafeHeterogeneousBuffer(_DWORD *result, _DWORD *a2)
{
  if (*result < *a2 || a2[2] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[2] < result[2]) {
    __break(1u);
  }
  return result;
}

_DWORD *protocol witness for Collection.index(after:) in conformance UnsafeHeterogeneousBuffer@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  if (*(void *)v2)
  {
    int v3 = *result + 1;
    if (v3 == *(_DWORD *)(v2 + 12))
    {
      *a2 = v3;
      a2[1] = 0;
    }
    else
    {
      int v4 = *(_DWORD *)(*(void *)v2 + (int)result[1] + 8) + result[1];
      *a2 = v3;
      a2[1] = v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

int *protocol witness for Collection.formIndex(after:) in conformance UnsafeHeterogeneousBuffer(int *result)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    int v3 = *((_DWORD *)v1 + 3);
    uint64_t v4 = result[1];
    int v5 = *result + 1;
    *double result = v5;
    if (v5 == v3) {
      result[1] = 0;
    }
    else {
      result[1] = *(_DWORD *)(v2 + v4 + 8) + v4;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance UnsafeHeterogeneousBuffer@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  double result = *(double *)(v1 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UnsafeHeterogeneousBuffer()
{
  return *(int *)(v0 + 12);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UnsafeHeterogeneousBuffer()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(v0);
}

_DWORD *(*_UnsafeHeterogeneousBuffer_Element.flags.modify(uint64_t a1))(_DWORD *result)
{
  uint64_t v2 = *v1;
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v2 + 12);
  return SecondaryLayerGeometryQuery.$primarySize.modify;
}

uint64_t _UnsafeHeterogeneousBuffer_VTable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer.Index and conformance UnsafeHeterogeneousBuffer.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer;
  if (!lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<UnsafeHeterogeneousBuffer>, MEMORY[0x263F8D0E0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<UnsafeHeterogeneousBuffer> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<UnsafeHeterogeneousBuffer>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultIndices<UnsafeHeterogeneousBuffer>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UnsafeHeterogeneousBuffer()
{
  return lazy protocol witness table accessor for type DefaultIndices<UnsafeHeterogeneousBuffer> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type IndexingIterator<UnsafeHeterogeneousBuffer> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<UnsafeHeterogeneousBuffer>, MEMORY[0x263F8DE58]);
}

void type metadata accessor for DefaultIndices<UnsafeHeterogeneousBuffer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type UnsafeHeterogeneousBuffer and conformance UnsafeHeterogeneousBuffer();
    unint64_t v7 = a3(a1, &type metadata for UnsafeHeterogeneousBuffer, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_246098570@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 12);
  return result;
}

_DWORD *sub_246098580(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 12) = *result;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer()
{
  return &type metadata for UnsafeHeterogeneousBuffer;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer.Index()
{
  return &type metadata for UnsafeHeterogeneousBuffer.Index;
}

ValueMetadata *type metadata accessor for UnsafeHeterogeneousBuffer.Item()
{
  return &type metadata for UnsafeHeterogeneousBuffer.Item;
}

ValueMetadata *type metadata accessor for _UnsafeHeterogeneousBuffer_Element()
{
  return &type metadata for _UnsafeHeterogeneousBuffer_Element;
}

uint64_t type metadata accessor for _UnsafeHeterogeneousBuffer_VTable()
{
  return self;
}

uint64_t method lookup function for _UnsafeHeterogeneousBuffer_VTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _UnsafeHeterogeneousBuffer_VTable);
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.hasType<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.moveInitialize(elt:from:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static _UnsafeHeterogeneousBuffer_VTable.deinitialize(elt:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t _ConditionalContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t static _ConditionalContent<>.canTransition.getter()
{
  return 1;
}

uint64_t _ConditionalContent<>.makeChildView(metadata:view:inputs:)(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  long long v11 = *(_OWORD *)(a3 + 48);
  v22[2] = *(_OWORD *)(a3 + 32);
  v22[3] = v11;
  v22[4] = *(_OWORD *)(a3 + 64);
  int v23 = *(_DWORD *)(a3 + 80);
  long long v12 = *(_OWORD *)(a3 + 16);
  v22[0] = *(_OWORD *)a3;
  v22[1] = v12;
  v14[1] = *(_OWORD *)(a4 + 16);
  uint64_t v15 = a5;
  uint64_t v16 = a6;
  long long v17 = *a1;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  int v20 = a2;
  uint64_t v21 = v22;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in _ConditionalContent<>.makeChildView(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x263F8E628], (uint64_t)&type metadata for _ViewOutputs, MEMORY[0x263F8E658], a8);
}

unint64_t *partial apply for closure #1 in _ConditionalContent<>.makeChildView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(v2 + 72);
  int v7 = *(_DWORD *)(v2 + 80);
  uint64_t v8 = *(void *)(v2 + 88);
  long long v15 = *(_OWORD *)(v2 + 48);
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  long long v9 = *(_OWORD *)(v8 + 48);
  void v13[2] = *(_OWORD *)(v8 + 32);
  v13[3] = v9;
  v13[4] = *(_OWORD *)(v8 + 64);
  int v14 = *(_DWORD *)(v8 + 80);
  long long v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  uint64_t v11 = type metadata accessor for _ConditionalContent();
  return ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance <> _ConditionalContent<A, B>(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _ConditionalContent<>.makeChildView(metadata:view:inputs:)(a1, a2, a3, a4, *(void *)(a5 - 8), *(void *)(a5 - 16), a7, a8);
}

uint64_t _ConditionalContent.Info.matches(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for _ConditionalContent();
  double v10 = MEMORY[0x270FA5388](v9);
  long long v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, double))(v13 + 16))((char *)&v19 - v11, v2, v10);
  int v14 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v15 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v12, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1, v4);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (a1 == 1)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, TupleTypeMetadata2);
      return 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    goto LABEL_3;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v14, v4);
  v18(v8, v4);
  return 1;
}

uint64_t _ConditionalContent.Info.init(content:subgraph:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for _ConditionalContent.Info();
  *(void *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t _ConditionalContent.Container.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalContent();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

id _ConditionalContent.Container.init(content:provider:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X4>, char *a4@<X8>)
{
  *(_DWORD *)a4 = a1;
  uint64_t v7 = type metadata accessor for _ConditionalContent.Container();
  uint64_t v8 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(&a4[*(int *)(v7 + 52)], a2, a3);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    id v10 = result;
    id result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
    *(void *)&a4[*(int *)(v7 + 56)] = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for _ConditionalContent.Container()
{
  return swift_getGenericMetadata();
}

Swift::Void __swiftcall _ConditionalContent.Container.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v50 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  long long v48 = (char *)&v46 - v6;
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (char *)&v46 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v14 = (char *)&v46 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v46 - v16;
  uint64_t v18 = type metadata accessor for _ConditionalContent();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v58 = (uint64_t)&v46 - v20;
  _ConditionalContent.Container.content.getter((uint64_t)&v46 - v20);
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v54 = v18;
  char v55 = (uint64_t *)v1;
  uint64_t v53 = v19;
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v17, OutputValue, v2);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, v22, 1, v2);
  int v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23(v14, v17, v9);
  uint64_t v24 = v10;
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v26 = v25(v14, 1, v2);
  uint64_t v56 = v24;
  uint64_t v57 = v9;
  uint64_t v51 = v17;
  uint64_t v52 = v3;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v9);
  }
  else
  {
    char v27 = _ConditionalContent.Info.matches(_:)(v58);
    int v28 = *(void (**)(char *, uint64_t))(v3 + 8);
    v28(v14, v2);
    if (v27)
    {
      uint64_t v29 = AGGraphGetOutputValue();
      if (v29)
      {
        uint64_t v30 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v47, v29, v2);
        uint64_t v32 = v53;
        uint64_t v31 = v54;
        uint64_t v33 = v58;
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 24))(v30, v58, v54);
        MEMORY[0x270FA5388](v34);
        *(&v46 - 2) = (uint64_t)v55;
        *(&v46 - 1) = swift_getWitnessTable();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v35);
        v28((char *)v30, v2);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v57);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  unsigned int v36 = v49;
  uint64_t v37 = v57;
  v23(v49, v17, v57);
  if (v25(v36, 1, v2) == 1)
  {
    uint64_t v38 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v37);
    uint64_t v39 = v55;
    uint64_t v40 = v52;
  }
  else
  {
    uint64_t v40 = v52;
    uint64_t v41 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v36, v2);
    uint64_t v39 = v55;
    _ConditionalContent.Container.eraseInfo(_:)(v41, (uint64_t)v55);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v2);
    uint64_t v38 = v56;
  }
  uint64_t v42 = v50;
  uint64_t v43 = v58;
  _ConditionalContent.Container.makeInfo(_:)(v58, v39, v50);
  MEMORY[0x270FA5388](v44);
  *(&v46 - 2) = (uint64_t)v39;
  *(&v46 - 1) = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v42, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v46 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v45);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v2);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v51, v37);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v43, v54);
}

uint64_t type metadata accessor for _ConditionalContent.Info()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ConditionalContent.Container.eraseInfo(_:)(uint64_t a1, uint64_t a2)
{
  return AGSubgraphInvalidate();
}

void _ConditionalContent.Container.makeInfo(_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v8 = CurrentAttribute;
    id v9 = (id)AGSubgraphGetGraph();
    id v11 = (id)AGSubgraphCreate();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v10 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in _ConditionalContent.Container.makeInfo(_:)(v3, a1, v8, (uint64_t)v11, a2[2], a2[3], a2[4], a2[5], a3);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

id closure #1 in _ConditionalContent.Container.makeInfo(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v89 = (void *)a4;
  int v76 = a3;
  uint64_t v96 = a2;
  uint64_t v94 = a1;
  uint64_t v88 = a9;
  v98[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for _ConditionalContent();
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v87 = v13;
  MEMORY[0x270FA5388](v13);
  char v85 = (char *)&v71 - v14;
  uint64_t v75 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v74 = (char *)&v71 - v18;
  uint64_t v73 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v71 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  id v77 = (char *)&v71 - v22;
  uint64_t v23 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  int v26 = (char *)&v71 - v25;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v84 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v95 = (char *)&v71 - v28;
  uint64_t v29 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v34 = (char *)&v71 - v33;
  uint64_t v90 = a5;
  uint64_t v91 = a6;
  v98[0] = a5;
  v98[1] = a6;
  v98[2] = a7;
  v98[3] = a8;
  uint64_t v35 = v94 + *(int *)(type metadata accessor for _ConditionalContent.Container() + 52);
  unsigned int v36 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v93 = v29 + 16;
  uint64_t v94 = v35;
  long long v92 = v36;
  ((void (*)(char *))v36)(v32);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(a8 + 72);
  uint64_t v79 = v34;
  uint64_t v78 = a8;
  v37(a7, a8);
  uint64_t v38 = *(char **)(v29 + 8);
  uint64_t v82 = v29 + 8;
  ((void (*)(char *, uint64_t))v38)(v32, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v96, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v77 = v38;
    uint64_t v39 = v75;
    uint64_t v40 = v74;
    uint64_t v41 = v91;
    uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v75 + 32))(v74, v26, v91);
    LODWORD(v98[0]) = v76;
    MEMORY[0x270FA5388](v42);
    *(&v71 - 4) = (char *)v41;
    uint64_t v43 = type metadata accessor for _ConditionalContent.FalseChild();
    *(&v71 - 3) = (char *)v43;
    *(&v71 - 2) = (char *)swift_getWitnessTable();
    uint64_t v44 = type metadata accessor for Attribute();
    uint64_t v45 = MEMORY[0x263F8E658];
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v98, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v71 - 6), v43, MEMORY[0x263F8E628], v44, MEMORY[0x263F8E658], v46);
    uint64_t v47 = v97;
    uint64_t v48 = (uint64_t)v72;
    uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v39 + 16))(v72, v40, v41);
    MEMORY[0x270FA5388](v49);
    *(&v71 - 2) = (char *)v41;
    *((_DWORD *)&v71 - 2) = v47;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v48, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)(&v71 - 4), v41, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v45, v50);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v51(v48, v41);
    v92(v32, v94, a7);
    uint64_t v52 = v78;
    uint64_t v53 = v47;
    uint64_t v54 = v79;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v78 + 88))(v53, v79, a7, v78);
    ((void (*)(char *, uint64_t))v77)(v32, a7);
    v51((uint64_t)v40, v41);
    uint64_t v38 = v77;
  }
  else
  {
    uint64_t v55 = v73;
    uint64_t v56 = v77;
    uint64_t v57 = v90;
    uint64_t v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(v77, v26, v90);
    LODWORD(v98[0]) = v76;
    MEMORY[0x270FA5388](v58);
    *(&v71 - 4) = (char *)v57;
    uint64_t v59 = type metadata accessor for _ConditionalContent.TrueChild();
    *(&v71 - 3) = (char *)v59;
    *(&v71 - 2) = (char *)swift_getWitnessTable();
    uint64_t v60 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v98, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v71 - 6), v59, MEMORY[0x263F8E628], v60, MEMORY[0x263F8E658], v61);
    uint64_t v62 = v97;
    uint64_t v63 = (uint64_t)v71;
    uint64_t v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v55 + 16))(v71, v56, v57);
    MEMORY[0x270FA5388](v64);
    *(&v71 - 2) = (char *)v57;
    *((_DWORD *)&v71 - 2) = v62;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v63, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)(&v71 - 4), v57, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v65);
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v66(v63, v57);
    v92(v32, v94, a7);
    uint64_t v52 = v78;
    uint64_t v54 = v79;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v78 + 80))(v62, v79, a7, v78);
    ((void (*)(char *, uint64_t))v38)(v32, a7);
    v66((uint64_t)v77, v57);
  }
  v92(v32, v94, a7);
  uint64_t v67 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 64))(v95, a7, v52);
  ((void (*)(char *, uint64_t))v38)(v32, a7);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v67, v84);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v81);
  uint64_t v68 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v85, v96, v87);
  _ConditionalContent.Info.init(content:subgraph:)(v68, (uint64_t)v89, v88);
  uint64_t v69 = v89;

  return v69;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance _ConditionalContent<A, B>.Container<A1>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.Container<A1>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall _ConditionalContent.TrueChild.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  uint64_t v35 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = type metadata accessor for _ConditionalContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v32 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v31 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v30 = (char *)&v29 - v19;
  int v36 = *v1;
  uint64_t v33 = v2;
  _ConditionalContent.TrueChild.info.getter((uint64_t)v15);
  uint64_t v20 = v34;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  uint64_t v21 = v15;
  uint64_t v22 = v35;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v7, v11, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v20);
  }
  else
  {
    uint64_t v23 = v32;
    uint64_t v24 = v30;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v7, v3);
    uint64_t v25 = (uint64_t)v31;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v31, v24, v3);
    MEMORY[0x270FA5388](v26);
    *(&v29 - 2) = v33;
    *(&v29 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v25, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v29 - 4), v3, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v27);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v28(v25, v3);
    v28((uint64_t)v24, v3);
  }
}

uint64_t _ConditionalContent.TrueChild.info.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalContent.Info();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.TrueChild()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

Swift::Void __swiftcall _ConditionalContent.FalseChild.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  uint64_t v35 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = type metadata accessor for _ConditionalContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v32 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v31 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v30 = (char *)&v29 - v19;
  int v36 = *v1;
  uint64_t v33 = v2;
  _ConditionalContent.TrueChild.info.getter((uint64_t)v15);
  uint64_t v20 = v34;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v15, v8);
  uint64_t v21 = v15;
  uint64_t v22 = v35;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v7, v11, v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = v32;
    uint64_t v24 = v30;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v7, v3);
    uint64_t v25 = (uint64_t)v31;
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v31, v24, v3);
    MEMORY[0x270FA5388](v26);
    *(&v29 - 2) = v33;
    *(&v29 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v25, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v29 - 4), v3, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v27);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v28(v25, v3);
    v28((uint64_t)v24, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v20);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ConditionalContent<A, B>.FalseChild()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t instantiation function for generic protocol witness table for <> _ConditionalContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.Container<A1>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.Container<A1>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.TrueChild()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.TrueChild(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _ConditionalContent<A, B>.FalseChild()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _ConditionalContent<A, B>.FalseChild(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for _ConditionalContent(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    void *v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

unsigned __int8 *assignWithTake for _ConditionalContent(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t type metadata completion function for _ConditionalContent.Info()
{
  uint64_t result = type metadata accessor for _ConditionalContent.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _ConditionalContent.Info(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  int v8 = *(_DWORD *)(*(void *)(v5 - 8) + 80) | *(_DWORD *)(v6 + 80);
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18 && (v8 & 0x1000F8) == 0)
  {
    uint64_t v11 = v7 + 1;
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_18;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_18:
          int v16 = (v15 | (v13 << (8 * v7))) + 2;
          unsigned int v12 = v15 + 2;
          if (v7 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    BOOL v17 = v12 == 1;
    if (v12 == 1)
    {
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v18 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + 16);
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v18);
    *((unsigned char *)v4 + v7) = v17;
    uint64_t v19 = *(void **)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = v19;
    id v20 = v19;
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v10 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
    swift_retain();
  }
  return v4;
}

void destroy for _ConditionalContent.Info(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(void *)(*(void *)(v3 - 8) + 64) <= *(void *)(v4 + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v11 = *(void *)(a2 + 24);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 16);
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v11);
  unsigned int v12 = *(void **)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t initializeWithCopy for _ConditionalContent.Info(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  int v15 = *(void **)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = v15;
  id v16 = v15;
  return a1;
}

unsigned __int8 *assignWithCopy for _ConditionalContent.Info(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = *v30;
  *uint64_t v30 = v31;
  id v33 = v31;

  return a1;
}

uint64_t initializeWithTake for _ConditionalContent.Info(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithTake for _ConditionalContent.Info(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *v30;
  *uint64_t v30 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent.Info(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = v7 & 0xFFFFFFF8;
  unsigned int v9 = a2 - 2147483646;
  if ((v7 & 0xFFFFFFF8) != 0) {
    unsigned int v9 = 2;
  }
  if (v9 >= 0x10000) {
    int v10 = 4;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x100) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 4)
  {
    int v12 = *(_DWORD *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else if (v11 == 2)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else
  {
    int v12 = *((unsigned __int8 *)a1 + v7);
    if (!v12)
    {
LABEL_5:
      unint64_t v5 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v5 >= 0xFFFFFFFF) {
        LODWORD(v5) = -1;
      }
      return (v5 + 1);
    }
  }
  int v13 = v12 - 1;
  if (v8)
  {
    int v13 = 0;
    LODWORD(v8) = *a1;
  }
  return (v8 | v13) ^ 0x80000000;
}

void storeEnumTagSinglePayload for _ConditionalContent.Info(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((v5 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x24609BEE4);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _ConditionalContent.Container()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ConditionalContent.Container(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 4) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 4) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    int v12 = *(void **)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    *(void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8) = v12;
    id v13 = v12;
  }
  return v3;
}

void destroy for _ConditionalContent.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  uint64_t v5 = *(void **)((*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
}

_DWORD *initializeWithCopy for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void **)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = v11;
  id v12 = v11;
  return a1;
}

_DWORD *assignWithCopy for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  uint64_t v10 = (void **)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void **)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  id v12 = *v10;
  *uint64_t v10 = v11;
  id v13 = v11;

  return a1;
}

_DWORD *initializeWithTake for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(void *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for _ConditionalContent.Container(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  uint64_t v10 = (void **)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *v10;
  *uint64_t v10 = *(void **)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent.Container(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 4) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24609C55CLL);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 4) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for _ConditionalContent.Container(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64) + 7;
  unint64_t v11 = ((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (unint64_t)&a1[v9 + 4] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v22 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v22 = a2 - 1;
              }
              void *v21 = v22;
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24609C770);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for _ConditionalContent.TrueChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ConditionalContent.FalseChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of ConditionalContentProvider.inputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConditionalContentProvider.outputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ConditionalContentProvider.detachOutputs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ConditionalContentProvider.attachOutputs(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeChildInputs()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of ConditionalContentProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t PinnedScrollableViews.rawValue.getter()
{
  return *v0;
}

uint64_t PinnedScrollableViews.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static PinnedScrollableViews.sectionHeaders.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static PinnedScrollableViews.sectionFooters.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentValues.locale.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, MEMORY[0x263F07690], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.calendar.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, MEMORY[0x263F07920], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.timeZone.setter(uint64_t a1)
{
  return EnvironmentValues.locale.setter(a1, MEMORY[0x263F079C8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t EnvironmentValues.locale.setter(uint64_t a1, uint64_t (*a2)(void), void (*a3)(char *))
{
  uint64_t v5 = a2(0);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v12 - v8, a1, v5, v7);
  a3(v9);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v9, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1, v5);
}

uint64_t EnvironmentValues.defaultRenderingMode.getter()
{
  return EnvironmentValues.defaultRenderingMode.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.legibilityWeight.getter()
{
  return EnvironmentValues.legibilityWeight.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void _diagnoseUnavailableCodeReached()()
{
}

uint64_t EnvironmentValues.timeZone.getter()
{
  return EnvironmentValues.locale.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultBaselineOffset.getter()
{
  return EnvironmentValues.defaultBaselineOffset.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultKerning.getter()
{
  return EnvironmentValues.defaultBaselineOffset.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.defaultTracking.getter()
{
  return EnvironmentValues.defaultBaselineOffset.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.effectiveSymbolFont.getter()
{
  unint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    v5[0] = *v0;
    v5[1] = 0;
    swift_retain();
    uint64_t v4 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)(v5);
    swift_release();
    return v4;
  }
}

uint64_t EnvironmentValues.imageScale.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t DisplayGamut.rawValue.getter()
{
  return *v0;
}

uint64_t key path setter for EnvironmentValues.fontModifiers : EnvironmentValues()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.allowsVibrantBlending.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    char v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
  }
  swift_release_n();
  return (v2 == 2) | v2 & 1u;
}

uint64_t EnvironmentValues.defaultFont.getter()
{
  return EnvironmentValues.defaultFont.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.fallbackFont.getter()
{
  unint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v9);
    swift_release_n();
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    v8[0] = v1;
    v8[1] = 0;
    uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 8))(v8, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    swift_release_n();
    return v7;
  }
}

unint64_t static DisplayGamut.deviceDefault.getter@<X0>(BOOL *a1@<X8>)
{
  unint64_t result = _CUIDefaultDisplayGamut();
  if (result > 1) {
    __break(1u);
  }
  else {
    *a1 = result != 0;
  }
  return result;
}

BOOL static Image.Scale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Image.Scale.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Image.Scale.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

SwiftUI::DisplayGamut_optional __swiftcall DisplayGamut.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  char *v1 = v2;
  return (SwiftUI::DisplayGamut_optional)rawValue;
}

void ControlActiveState.hash(into:)()
{
}

void static ControlActiveState.== infix(_:_:)()
{
}

void static ControlActiveState.allCases.getter()
{
}

void ControlActiveState.hashValue.getter()
{
}

BOOL static LegibilityWeight.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void LegibilityWeight.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t View.imageScale(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.imageScale : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t View.adjustsTextFrameForOversizedCharacters(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  if (a1)
  {
    if (one-time initialization token for adjustsForOversizedCharacters != -1) {
      swift_once();
    }
    uint64_t v7 = &static Text.Sizing.adjustsForOversizedCharacters;
  }
  else
  {
    if (one-time initialization token for standard != -1) {
      swift_once();
    }
    uint64_t v7 = &static Text.Sizing.standard;
  }
  uint64_t v8 = *((void *)v7 + 1);
  v10[0] = *v7;
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v10, a2, a3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.defaultFont.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t View.monospaced(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_26FA93880, (uint64_t)partial apply for closure #1 in View.monospaced(_:));
}

uint64_t View.fontWidth(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(unsigned char *)(v6 + 24) = v4;
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.fontWidth(_:), v6, a2);
  swift_release();

  return swift_release();
}

uint64_t closure #1 in View.fontWidth(_:)(uint64_t *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier);
    *(void *)(swift_allocObject() + 16) = a2;
    MEMORY[0x24C522D60]();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_61;
    }
    goto LABEL_3;
  }
  uint64_t v6 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_6:
      uint64_t v8 = 0;
      while (1)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          MEMORY[0x24C523D60](v8, v6);
        }
        else {
          swift_retain();
        }
        type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier);
        if (swift_dynamicCastClass()) {
          break;
        }
        swift_release();
        uint64_t v9 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          return specialized Array._endMutation()();
        }
        ++v8;
        if (v9 == v7) {
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
      }
      else if (!((unint64_t)*a1 >> 62))
      {
        if (v11 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_15;
        }
LABEL_21:
        uint64_t v12 = v8 + 5;
        while (1)
        {
          unint64_t v13 = v12 - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            MEMORY[0x24C523D60](v12 - 4);
          }
          else
          {
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
            if (v13 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_58;
            }
            swift_retain();
          }
          uint64_t v14 = swift_dynamicCastClass();
          swift_release();
          if (!v14) {
            break;
          }
LABEL_47:
          uint64_t v22 = v12 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_59;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v23 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v12;
          if (v22 == v23) {
            goto LABEL_15;
          }
        }
        if (v13 == v8)
        {
LABEL_46:
          if (__OFADD__(v8++, 1)) {
            goto LABEL_60;
          }
          goto LABEL_47;
        }
        uint64_t v15 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v16 = MEMORY[0x24C523D60](v8, *a1);
          uint64_t v15 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_32:
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_68;
            }
            if (v13 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_69;
            }
            uint64_t v17 = *(void *)(v15 + 8 * v12);
            swift_retain();
            goto LABEL_35;
          }
        }
        else
        {
          if (v8 < 0) {
            goto LABEL_66;
          }
          if ((unint64_t)v8 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_67;
          }
          uint64_t v16 = *(void *)(v15 + 8 * v8 + 32);
          swift_retain();
          if ((v15 & 0xC000000000000001) == 0) {
            goto LABEL_32;
          }
        }
        uint64_t v17 = MEMORY[0x24C523D60](v12 - 4, v15);
        uint64_t v15 = *a1;
LABEL_35:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v15;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v15 < 0 || (v15 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          *a1 = v15;
        }
        *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v17;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v19 = *a1;
        int v20 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v19;
        if (!v20 || v19 < 0 || (v19 & 0x4000000000000000) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          *a1 = v19;
        }
        if ((v13 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        if (v13 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_71;
        }
        *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v12) = v16;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_46;
      }
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 == v24) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_72;
  }
  uint64_t v8 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  while (!((unint64_t)*a1 >> 62))
  {
    uint64_t v10 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10 >= v8) {
      return specialized Array.replaceSubrange<A>(_:with:)(v8, v10);
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 < v8) {
    goto LABEL_65;
  }
  return specialized Array.replaceSubrange<A>(_:with:)(v8, v10);
}

uint64_t View.bold(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_26FA938F8, (uint64_t)partial apply for closure #1 in View.bold(_:));
}

uint64_t closure #1 in View.bold(_:)(uint64_t *a1, char a2)
{
  if (a2)
  {
    specialized static AnyFontModifier.static<A>(_:)();
    MEMORY[0x24C522D60]();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
LABEL_3:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
LABEL_30:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_3;
  }
  uint64_t v4 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62) {
      goto LABEL_35;
    }
    uint64_t v6 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_23:
      if ((unint64_t)*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11 >= v6) {
          return specialized Array.replaceSubrange<A>(_:with:)(v6, v11);
        }
      }
      else
      {
        uint64_t v11 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v6) {
          return specialized Array.replaceSubrange<A>(_:with:)(v6, v11);
        }
      }
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](v6, v4);
    }
    else {
      swift_retain();
    }
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    if (swift_dynamicCastClass())
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v10 = v6 + 1;
      if (!__OFADD__(v6, 1)) {
        goto LABEL_21;
      }
      goto LABEL_28;
    }
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    uint64_t v7 = swift_dynamicCastClass();
    if (!v7)
    {
      swift_release();
      uint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    double v8 = *(double *)(v7 + 16);
    swift_release();
    if (v8 >= 0.3) {
      break;
    }
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_29;
    }
LABEL_17:
    ++v6;
    if (v9 == v5) {
      goto LABEL_18;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_21:
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 == v12) {
      goto LABEL_23;
    }
  }
  else if (v10 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_23;
  }
  uint64_t v13 = v6 + 5;
  while (1)
  {
    unint64_t v14 = v13 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C523D60](v13 - 4);
      goto LABEL_42;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      break;
    }
    if (v14 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_78;
    }
    swift_retain();
LABEL_42:
    if (swift_dynamicCastClass())
    {
      uint64_t result = swift_release();
      goto LABEL_68;
    }
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    uint64_t v15 = swift_dynamicCastClass();
    if (!v15)
    {
      uint64_t result = swift_release();
      if (v14 == v6) {
        goto LABEL_67;
      }
LABEL_49:
      uint64_t v17 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t result = MEMORY[0x24C523D60](v6, *a1);
        uint64_t v18 = result;
        uint64_t v17 = *a1;
        if ((*a1 & 0xC000000000000001) == 0) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v6 < 0) {
          goto LABEL_81;
        }
        if ((unint64_t)v6 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_82;
        }
        uint64_t v18 = *(void *)(v17 + 8 * v6 + 32);
        uint64_t result = swift_retain();
        if ((v17 & 0xC000000000000001) == 0)
        {
LABEL_53:
          if ((v14 & 0x8000000000000000) != 0) {
            goto LABEL_83;
          }
          if (v14 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_84;
          }
          uint64_t v19 = *(void *)(v17 + 8 * v13);
          swift_retain();
          goto LABEL_56;
        }
      }
      uint64_t v19 = MEMORY[0x24C523D60](v13 - 4, v17);
      uint64_t v17 = *a1;
LABEL_56:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        *a1 = v17;
      }
      *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v19;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v21 = *a1;
      uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v21;
      if (!result || v21 < 0 || (v21 & 0x4000000000000000) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        uint64_t v21 = result;
        *a1 = result;
      }
      if ((v14 & 0x8000000000000000) != 0) {
        goto LABEL_85;
      }
      if (v14 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_86;
      }
      *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v18;
      swift_release();
      uint64_t result = specialized Array._endMutation()();
      goto LABEL_67;
    }
    double v16 = *(double *)(v15 + 16);
    uint64_t result = swift_release();
    if (v16 >= 0.3) {
      goto LABEL_68;
    }
    if (v14 != v6) {
      goto LABEL_49;
    }
LABEL_67:
    if (__OFADD__(v6++, 1)) {
      goto LABEL_80;
    }
LABEL_68:
    uint64_t v23 = v13 - 3;
    if (__OFADD__(v14, 1)) {
      goto LABEL_79;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    ++v13;
    if (v23 == v24) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

uint64_t View.italic(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.monospaced(_:)(a1, a2, a3, (uint64_t)&unk_26FA93920, (uint64_t)partial apply for closure #1 in View.italic(_:));
}

uint64_t View.monospaced(_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = a1;
  View.transformEnvironment<A>(_:transform:)(KeyPath, a5, v9, a2);
  swift_release();

  return swift_release();
}

uint64_t closure #1 in View.monospaced(_:)(uint64_t *a1, char a2, void (*a3)(void), unint64_t *a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    a3();
    MEMORY[0x24C522D60]();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_61;
    }
    goto LABEL_3;
  }
  uint64_t v11 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
    {
LABEL_6:
      uint64_t v13 = 0;
      while (1)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          MEMORY[0x24C523D60](v13, v11);
        }
        else {
          swift_retain();
        }
        type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
        if (swift_dynamicCastClass()) {
          break;
        }
        swift_release();
        uint64_t v14 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          return specialized Array._endMutation()();
        }
        ++v13;
        if (v14 == v12) {
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
      }
      else if (!((unint64_t)*a1 >> 62))
      {
        if (v16 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_15;
        }
LABEL_21:
        uint64_t v17 = v13 + 5;
        while (1)
        {
          unint64_t v18 = v17 - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            MEMORY[0x24C523D60](v17 - 4);
          }
          else
          {
            if ((v18 & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
            if (v18 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_58;
            }
            swift_retain();
          }
          uint64_t v19 = swift_dynamicCastClass();
          swift_release();
          if (!v19) {
            break;
          }
LABEL_47:
          uint64_t v27 = v17 - 3;
          if (__OFADD__(v18, 1)) {
            goto LABEL_59;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v28 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v17;
          if (v27 == v28) {
            goto LABEL_15;
          }
        }
        if (v18 == v13)
        {
LABEL_46:
          if (__OFADD__(v13++, 1)) {
            goto LABEL_60;
          }
          goto LABEL_47;
        }
        uint64_t v20 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v21 = MEMORY[0x24C523D60](v13, *a1);
          uint64_t v20 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_32:
            if ((v18 & 0x8000000000000000) != 0) {
              goto LABEL_68;
            }
            if (v18 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_69;
            }
            uint64_t v22 = *(void *)(v20 + 8 * v17);
            swift_retain();
            goto LABEL_35;
          }
        }
        else
        {
          if (v13 < 0) {
            goto LABEL_66;
          }
          if ((unint64_t)v13 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_67;
          }
          uint64_t v21 = *(void *)(v20 + 8 * v13 + 32);
          swift_retain();
          if ((v20 & 0xC000000000000001) == 0) {
            goto LABEL_32;
          }
        }
        uint64_t v22 = MEMORY[0x24C523D60](v17 - 4, v20);
        uint64_t v20 = *a1;
LABEL_35:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v20;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v20 < 0 || (v20 & 0x4000000000000000) != 0)
        {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
          *a1 = v20;
        }
        *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20) = v22;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v24 = *a1;
        int v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v24;
        if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
        {
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          *a1 = v24;
        }
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        if (v18 >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_71;
        }
        *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v17) = v21;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_46;
      }
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v16 == v29) {
        goto LABEL_15;
      }
      goto LABEL_21;
    }
  }
LABEL_13:
  swift_bridgeObjectRelease();
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_72;
  }
  uint64_t v13 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  while (!((unint64_t)*a1 >> 62))
  {
    uint64_t v15 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v15 >= v13) {
      return specialized Array.replaceSubrange<A>(_:with:)(v13, v15);
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 < v13) {
    goto LABEL_65;
  }
  return specialized Array.replaceSubrange<A>(_:with:)(v13, v15);
}

uint64_t View.symbolFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.symbolFont.getter()
{
  return EnvironmentValues.defaultFont.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues.symbolFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.symbolFont : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.symbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t EnvironmentValues.symbolFont.setter(uint64_t a1)
{
  return EnvironmentValues.font.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.defaultFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t View.defaultSymbolFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultForegroundColor(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.defaultSymbolFont.getter()
{
  return EnvironmentValues.defaultFont.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultFont.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t key path getter for EnvironmentValues.defaultSymbolFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.symbolFont : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultSymbolFont : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.symbolFont : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t EnvironmentValues.defaultSymbolFont.setter(uint64_t a1)
{
  return EnvironmentValues.font.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t View.kerning(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultKerning : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultKerning : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultKerning.setter(*a1);
}

uint64_t EnvironmentValues.defaultKerning.setter(double a1)
{
  return EnvironmentValues.displayScale.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t View.tracking(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultTracking : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultTracking : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultTracking.setter(*a1);
}

uint64_t EnvironmentValues.defaultTracking.setter(double a1)
{
  return EnvironmentValues.displayScale.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t View.baselineOffset(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.defaultBaselineOffset : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.defaultBaselineOffset : EnvironmentValues(double *a1)
{
  return EnvironmentValues.defaultBaselineOffset.setter(*a1);
}

uint64_t EnvironmentValues.defaultBaselineOffset.setter(double a1)
{
  return EnvironmentValues.displayScale.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

void EnvironmentValues.configuredForRoot()(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  swift_retain();
  EnvironmentValues.configureForRoot()();
}

void (*EnvironmentValues.font.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.font.modify;
}

void EnvironmentValues.font.modify(uint64_t **a1, char a2)
{
}

uint64_t EnvironmentValues.fallbackFontProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.FallbackFontKey@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized static EnvironmentValues.FallbackFontKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.fallbackFontProvider : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.fallbackFontProvider : EnvironmentValues(uint64_t a1)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v3);
  outlined init with copy of AnyTrackedValue((uint64_t)v3, (uint64_t)v2);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t EnvironmentValues.fallbackFontProvider.setter(uint64_t a1)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v3);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*EnvironmentValues.fallbackFontProvider.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  return EnvironmentValues.fallbackFontProvider.modify;
}

void EnvironmentValues.fallbackFontProvider.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 40;
  if (a2)
  {
    outlined init with copy of AnyTrackedValue(*a1, v3);
    outlined init with copy of AnyTrackedValue(v3, (uint64_t)v2 + 80);
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2 + 80);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2 + 80);
  }
  else
  {
    outlined init with copy of AnyTrackedValue(*a1, v3);
    specialized EnvironmentValues._set<A>(_:for:)(v3);
  }
  __swift_destroy_boxed_opaque_existential_1(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);

  free(v2);
}

void (*EnvironmentValues.defaultFont.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.defaultFont.modify;
}

void EnvironmentValues.defaultFont.modify(uint64_t **a1, char a2)
{
}

void (*EnvironmentValues.defaultSymbolFont.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.defaultSymbolFont.modify;
}

void EnvironmentValues.defaultSymbolFont.modify(uint64_t **a1, char a2)
{
}

void (*EnvironmentValues.symbolFont.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  void *v3 = v5;
  return EnvironmentValues.symbolFont.modify;
}

void EnvironmentValues.symbolFont.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.font.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = **a1;
  uint64_t v8 = (uint64_t *)(*a1)[4];
  uint64_t v9 = *v8;
  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    a3(v8, v7, (void **)v6 + 2);
    swift_release();
    swift_release();
    if (v8[1])
    {
      uint64_t v10 = *(void *)v6[4];
      swift_retain();
      swift_retain();
      a4(v9, v10);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    a3(v8, v7, (void **)v6 + 3);
    swift_release();
    swift_release();
    if (v8[1])
    {
      uint64_t v11 = *(void *)v6[4];
      swift_retain();
      swift_retain();
      a4(v9, v11);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  swift_release();

  free(v6);
}

uint64_t (*EnvironmentValues.imageScale.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>, (uint64_t)&type metadata for ImageScaleKey, (uint64_t)&protocol witness table for ImageScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 1;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.imageScale.modify;
}

uint64_t EnvironmentValues.imageScale.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.imageScale.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.isInTouchBar.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path getter for EnvironmentValues.isInTouchBar : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t EnvironmentValues.isInTouchBar.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.isInTouchBar.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.isInTouchBar.modify;
}

void EnvironmentValues.isInTouchBar.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  char v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t DefaultFallbackFontProvider.makeFont(in:)()
{
  if (one-time initialization token for body != -1) {
    swift_once();
  }

  return swift_retain();
}

void (*EnvironmentValues.displayScale.modify(double **a1))(double **a1, char a2)
{
  char v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  double *v3 = v5;
  return EnvironmentValues.displayScale.modify;
}

void EnvironmentValues.displayScale.modify(double **a1, char a2)
{
}

uint64_t EnvironmentValues.defaultPixelLength.getter()
{
  return EnvironmentValues.defaultPixelLength.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultPixelLength.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultPixelLength.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.defaultPixelLength.modify(void *a1))(uint64_t **a1, char a2)
{
  char v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    char v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    char v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  *((unsigned char *)v3 + 8) = v7 & 1;
  return EnvironmentValues.defaultPixelLength.modify;
}

void EnvironmentValues.defaultPixelLength.modify(uint64_t **a1, char a2)
{
}

uint64_t EnvironmentValues.dividerThickness.setter(double a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, *(uint64_t *)&a1, 0);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.dividerThickness.modify(void *a1))(uint64_t *a1)
{
  a1[3] = v1;
  EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return EnvironmentValues.dividerThickness.modify;
}

uint64_t EnvironmentValues.dividerThickness.modify(uint64_t *a1)
{
  char v2 = (uint64_t *)a1[3];
  uint64_t v3 = *a1;
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, 0);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *(void *)a1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.defaultRenderingMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.displayGamut.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.defaultRenderingMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultRenderingModeKey>, (uint64_t)&type metadata for DefaultRenderingModeKey, (uint64_t)&protocol witness table for DefaultRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 1;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.defaultRenderingMode.modify;
}

uint64_t EnvironmentValues.defaultRenderingMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultRenderingMode.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.displayCornerRadius.getter()
{
  return EnvironmentValues.defaultPixelLength.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultPixelLength.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v5 = a2(v7, &v9);
  }
  swift_release_n();
  return v5;
}

uint64_t key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v7 = a2(v5);
    char v9 = v8;
    swift_release_n();
  }
  else
  {
    uint64_t v11 = swift_retain_n();
    uint64_t v7 = a3(v11, &v14);
    char v9 = v12;
  }
  uint64_t result = swift_release_n();
  *(void *)a4 = v7;
  *(unsigned char *)(a4 + 8) = v9 & 1;
  return result;
}

void (*EnvironmentValues.displayCornerRadius.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    char v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    char v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  *((unsigned char *)v3 + 8) = v7 & 1;
  return EnvironmentValues.displayCornerRadius.modify;
}

void EnvironmentValues.displayCornerRadius.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.defaultPixelLength.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *a1;
  uint64_t v8 = (uint64_t *)(*a1)[5];
  uint64_t v9 = **a1;
  uint64_t v10 = *((unsigned __int8 *)*a1 + 8);
  uint64_t v11 = *v8;
  swift_retain_n();
  if (a2) {
    char v12 = (void **)(v7 + 3);
  }
  else {
    char v12 = (void **)(v7 + 4);
  }
  a3(v8, v9, v10, v12);
  swift_release();
  if (v8[1])
  {
    uint64_t v13 = *(void *)v7[5];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t (*EnvironmentValues.legibilityWeight.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.legibilityWeight.modify;
}

uint64_t EnvironmentValues.legibilityWeight.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.imageScale.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.locale.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = type metadata accessor for Locale();
  _OWORD v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[3] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.locale.modify;
}

void EnvironmentValues.locale.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues.calendar.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = type metadata accessor for Calendar();
  _OWORD v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[3] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.calendar.modify;
}

void EnvironmentValues.calendar.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.locale : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a4(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a5(v8, &v10);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(char *))
{
  uint64_t v8 = a5(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  ((void (*)(char *, uint64_t, uint64_t, double))v16)((char *)&v19 - v14, a1, v8, v13);
  v16(v11, v15, v8);
  a6(v11);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v8);
}

void (*EnvironmentValues.timeZone.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = type metadata accessor for TimeZone();
  _OWORD v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[3] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, (uint64_t)v7);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v9, (uint64_t)v7);
  }
  swift_release_n();
  return EnvironmentValues.timeZone.modify;
}

void EnvironmentValues.timeZone.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.locale.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 24) + 16);
  v5(*(void *)(*(void *)a1 + 40), v4[6], v4[2]);
  size_t v6 = (void *)v4[5];
  uint64_t v7 = (void *)v4[6];
  uint64_t v9 = v4[3];
  uint64_t v8 = (void *)v4[4];
  uint64_t v10 = v4[2];
  if (a2)
  {
    v5(v4[4], v4[5], v4[2]);
    a3(v8);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v9 + 8);
    v11(v8, v10);
  }
  else
  {
    a3((void *)v4[5]);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v9 + 8);
  }
  v11(v6, v10);
  v11(v7, v10);
  free(v7);
  free(v6);
  free(v8);

  free(v4);
}

uint64_t key path getter for EnvironmentValues.defaultRenderingMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X3>, void (*a3)(uint64_t *__return_ptr, uint64_t, unsigned char *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a3(&v11, v8, v10);
  }
  uint64_t result = swift_release_n();
  *a4 = v11;
  return result;
}

uint64_t (*EnvironmentValues.displayGamut.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.displayGamut.modify;
}

uint64_t EnvironmentValues.displayGamut.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.defaultRenderingMode.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultRenderingMode.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = *(void **)(a1 + 16);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1 + 8;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v8[1])
  {
    uint64_t v14 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void EnvironmentValues.controlActiveState.getter()
{
}

void EnvironmentValues.controlActiveState.setter()
{
}

uint64_t EnvironmentValues.realHorizontalSizeClass.getter()
{
  return EnvironmentValues.legibilityWeight.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.realHorizontalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.imageScale.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.horizontalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.horizontalSizeClass.modify;
}

uint64_t EnvironmentValues.horizontalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.horizontalSizeClass.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.realHorizontalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HorizontalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for HorizontalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for HorizontalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.realHorizontalSizeClass.modify;
}

uint64_t EnvironmentValues.realHorizontalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.imageScale.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.realVerticalSizeClass.getter()
{
  return EnvironmentValues.legibilityWeight.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.legibilityWeight.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.realVerticalSizeClass.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.imageScale.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.verticalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.verticalSizeClass.modify;
}

uint64_t EnvironmentValues.verticalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.horizontalSizeClass.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.horizontalSizeClass.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 16);
  uint64_t v10 = *v9;
  swift_retain_n();
  if (a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v8;
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1 + 8;
    uint64_t v11 = v9;
    uint64_t v12 = v8;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v9[1])
  {
    uint64_t v14 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t (*EnvironmentValues.realVerticalSizeClass.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VerticalUserInterfaceSizeClassKey>, (uint64_t)&type metadata for VerticalUserInterfaceSizeClassKey, (uint64_t)&protocol witness table for VerticalUserInterfaceSizeClassKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.realVerticalSizeClass.modify;
}

uint64_t EnvironmentValues.realVerticalSizeClass.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.imageScale.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.imageScale.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 16);
  uint64_t v10 = *v9;
  swift_retain_n();
  if (a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v8;
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1 + 8;
    uint64_t v11 = v9;
    uint64_t v12 = v8;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v9[1])
  {
    uint64_t v14 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.allowsVibrantBlending.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1 & 1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.allowsVibrantBlending.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  void v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = (v5 == 2) | v5 & 1;
  return EnvironmentValues.allowsVibrantBlending.modify;
}

void EnvironmentValues.allowsVibrantBlending.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  char v2 = *(uint64_t **)(*(void *)a1 + 24);
  unsigned __int8 v3 = *(unsigned char *)(*(void *)a1 + 40);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void EnvironmentValues._useVibrantStyling.getter()
{
}

void EnvironmentValues._useVibrantStyling.setter()
{
}

void EnvironmentValues._useVibrantStyling.modify()
{
}

void EnvironmentValues.reduceDesktopTinting.getter()
{
}

void (*EnvironmentValues.defaultKerning.modify(double **a1))(double **a1, char a2)
{
  unsigned __int8 v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  double *v3 = v5;
  return EnvironmentValues.defaultKerning.modify;
}

void EnvironmentValues.defaultKerning.modify(double **a1, char a2)
{
}

void (*EnvironmentValues.defaultTracking.modify(double **a1))(double **a1, char a2)
{
  unsigned __int8 v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  double *v3 = v5;
  return EnvironmentValues.defaultTracking.modify;
}

void EnvironmentValues.defaultTracking.modify(double **a1, char a2)
{
}

void (*EnvironmentValues.defaultBaselineOffset.modify(double **a1))(double **a1, char a2)
{
  unsigned __int8 v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  double *v3 = v5;
  return EnvironmentValues.defaultBaselineOffset.modify;
}

void EnvironmentValues.defaultBaselineOffset.modify(double **a1, char a2)
{
}

void EnvironmentValues.displayScale.modify(double **a1, char a2, void (*a3)(uint64_t *, void **, double), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v8 = (uint64_t *)*((void *)*a1 + 4);
  double v9 = **a1;
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = (void **)(v7 + 2);
  }
  else {
    uint64_t v11 = (void **)(v7 + 3);
  }
  a3(v8, v11, v9);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = **((void **)v7 + 4);
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DisplayScaleKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, static DisplayScaleKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FallbackFontProviderKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of AnyTrackedValue((uint64_t)&static FallbackFontProviderKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, MEMORY[0x263F07690], (uint64_t)static LocaleKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance CalendarKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, MEMORY[0x263F07920], (uint64_t)static CalendarKey.defaultValue, a1);
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  __swift_project_value_buffer(v6, (uint64_t)a3);
  return a4();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TimeZoneKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey(&one-time initialization token for defaultValue, MEMORY[0x263F079C8], (uint64_t)static TimeZoneKey.defaultValue, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance LocaleKey@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  double v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

void DisplayGamut.codingProxy.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

SwiftUI::CodableDisplayGamut __swiftcall CodableDisplayGamut.init(_:)(SwiftUI::CodableDisplayGamut result)
{
  unsigned char *v1 = *(unsigned char *)result.base;
  return result;
}

void CodableDisplayGamut.base.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *CodableDisplayGamut.base.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*CodableDisplayGamut.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CodableDisplayGamut::CodingKind_optional __swiftcall CodableDisplayGamut.CodingKind.init(rawValue:)(SwiftUI::CodableDisplayGamut::CodingKind_optional rawValue)
{
  if (rawValue.value == SwiftUI_CodableDisplayGamut_CodingKind_displayP3) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue.value == SwiftUI_CodableDisplayGamut_CodingKind_sRGB) {
    char v2 = 0;
  }
  char *v1 = v2;
  return rawValue;
}

uint64_t CodableDisplayGamut.CodingKind.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableDisplayGamut.CodingKind()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableDisplayGamut.CodingKind()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t CodableDisplayGamut.encode(to:)(void *a1)
{
  char v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  char v6 = v2;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t CodableDisplayGamut.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *a2 = v6;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableDisplayGamut@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CodableDisplayGamut.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableDisplayGamut(void *a1)
{
  return CodableDisplayGamut.encode(to:)(a1);
}

uint64_t specialized static EnvironmentValues.FallbackFontKey.value(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, (uint64_t)v9);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)v9);
  }
  swift_release_n();
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v8[0] = v1;
  v8[1] = v2;
  uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 8))(v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t sub_2460A2048(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.imageScale.setter(&v2);
}

uint64_t sub_2460A208C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_2460A20D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.monospaced(_:)(uint64_t *a1)
{
  return closure #1 in View.monospaced(_:)(a1, *(unsigned char *)(v1 + 16), (void (*)(void))specialized static AnyFontModifier.static<A>(_:), &lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedModifier>, (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&protocol witness table for Font.MonospacedModifier);
}

uint64_t sub_2460A2128()
{
  return swift_deallocObject();
}

uint64_t sub_2460A2138()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fontWidth(_:)(uint64_t *a1)
{
  return closure #1 in View.fontWidth(_:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_2460A2154()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.bold(_:)(uint64_t *a1)
{
  return closure #1 in View.bold(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_2460A216C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.italic(_:)(uint64_t *a1)
{
  return closure #1 in View.monospaced(_:)(a1, *(unsigned char *)(v1 + 16), (void (*)(void))specialized static AnyFontModifier.static<A>(_:), &lazy cache variable for type metadata for AnyStaticFontModifier<Font.ItalicModifier>, (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&protocol witness table for Font.ItalicModifier);
}

uint64_t sub_2460A21C4()
{
  return swift_deallocObject();
}

uint64_t sub_2460A21D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_30Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_2460A21F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_30Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_2460A2210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_30Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_2460A222C(double *a1)
{
  return EnvironmentValues.defaultKerning.setter(*a1);
}

uint64_t sub_2460A2258(double *a1)
{
  return EnvironmentValues.defaultTracking.setter(*a1);
}

uint64_t sub_2460A2284(double *a1)
{
  return EnvironmentValues.defaultBaselineOffset.setter(*a1);
}

unint64_t lazy protocol witness table accessor for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut.CodingKind and conformance CodableDisplayGamut.CodingKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode;
  if (!lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.TemplateRenderingMode and conformance Image.TemplateRenderingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Scale and conformance Image.Scale()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale;
  if (!lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Scale and conformance Image.Scale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass()
{
  unint64_t result = lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass;
  if (!lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserInterfaceSizeClass and conformance UserInterfaceSizeClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayGamut and conformance DisplayGamut()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut;
  if (!lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayGamut and conformance DisplayGamut);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlActiveState and conformance ControlActiveState()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState;
  if (!lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlActiveState and conformance ControlActiveState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ControlActiveState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A])
  {
    type metadata accessor for [ControlActiveState](255, &lazy cache variable for type metadata for [ControlActiveState], (uint64_t)&type metadata for ControlActiveState, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ControlActiveState] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LegibilityWeight and conformance LegibilityWeight()
{
  unint64_t result = lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight;
  if (!lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegibilityWeight and conformance LegibilityWeight);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut;
  if (!lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableDisplayGamut and conformance CodableDisplayGamut);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for CodableDisplayGamut(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut();
  unint64_t result = lazy protocol witness table accessor for type CodableDisplayGamut and conformance CodableDisplayGamut();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_2460A271C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.symbolFont : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_30Tm(a1, a2, a3, a4, (void (*)(uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_2460A2780(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.imageScale.setter(&v2);
}

uint64_t sub_2460A27BC(char *a1)
{
  return EnvironmentValues.isInTouchBar.setter(*a1);
}

uint64_t sub_2460A27E4@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultKerning : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2824(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_2460A284C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A288C(uint64_t a1)
{
  return EnvironmentValues.defaultPixelLength.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_2460A28BC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dividerThickness.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_2460A28F8(double *a1)
{
  return EnvironmentValues.dividerThickness.setter(*a1);
}

uint64_t sub_2460A2920@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultRenderingMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2960(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.defaultRenderingMode.setter(&v2);
}

uint64_t sub_2460A2998@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultPixelLength : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A29D8(uint64_t a1)
{
  return EnvironmentValues.displayCornerRadius.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_2460A2A08@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.legibilityWeight : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2A48(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.legibilityWeight.setter(&v2);
}

uint64_t sub_2460A2A80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_2460A2AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F07690], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_2460A2B00(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_2460A2B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F07920], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_2460A2B80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, (void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t sub_2460A2BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x263F079C8], (void (*)(char *))specialized EnvironmentValues._set<A>(_:for:));
}

uint64_t sub_2460A2C00@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.defaultRenderingMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2C40(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.displayGamut.setter(&v2);
}

void sub_2460A2C78()
{
}

void *sub_2460A2CA0@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_96Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalSizeClass.getter, a1);
}

uint64_t sub_2460A2CB8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.horizontalSizeClass.setter(&v2);
}

uint64_t sub_2460A2CF0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.legibilityWeight : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2D30(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.realHorizontalSizeClass.setter(&v2);
}

void *sub_2460A2D68@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_96Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalSizeClass.getter, a1);
}

uint64_t sub_2460A2D80(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.verticalSizeClass.setter(&v2);
}

uint64_t sub_2460A2DB8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.legibilityWeight : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460A2DF8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.realVerticalSizeClass.setter(&v2);
}

uint64_t sub_2460A2E30@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsVibrantBlending.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2460A2E70(char *a1)
{
  return EnvironmentValues.allowsVibrantBlending.setter(*a1);
}

void sub_2460A2E98()
{
}

void sub_2460A2EA8()
{
}

void sub_2460A2EBC()
{
}

void keypath_get_106Tm()
{
}

unsigned char *storeEnumTagSinglePayload for Image.Scale(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460A2FC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ControlActiveState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460A30B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlActiveState()
{
  return &type metadata for ControlActiveState;
}

uint64_t dispatch thunk of FallbackFontProvider.makeFont(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for DefaultFallbackFontProvider()
{
  return &type metadata for DefaultFallbackFontProvider;
}

ValueMetadata *type metadata accessor for CodableDisplayGamut()
{
  return &type metadata for CodableDisplayGamut;
}

ValueMetadata *type metadata accessor for CodableDisplayGamut.CodingKind()
{
  return &type metadata for CodableDisplayGamut.CodingKind;
}

uint64_t sub_2460A3158(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, (uint64_t)&type metadata for Image.Scale);
}

uint64_t sub_2460A316C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Sizing>, (uint64_t)&type metadata for Text.Sizing);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return swift_getWitnessTable();
}

uint64_t sub_2460A3200(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
}

uint64_t sub_2460A3220(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVySayAA07AnyFontI0CGGGAaBHPxAaBHD1__AjA0cI0HPyHCHCTm(a1, type metadata accessor for _EnvironmentKeyTransformModifier<[AnyFontModifier]>);
}

uint64_t sub_2460A3240(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA5ImageV5ScaleOGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x263F8EF38]);
}

void type metadata accessor for [ControlActiveState](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for VerticalUserInterfaceSizeClassKey()
{
  return &type metadata for VerticalUserInterfaceSizeClassKey;
}

ValueMetadata *type metadata accessor for HorizontalUserInterfaceSizeClassKey()
{
  return &type metadata for HorizontalUserInterfaceSizeClassKey;
}

ValueMetadata *type metadata accessor for ImageScaleKey()
{
  return &type metadata for ImageScaleKey;
}

ValueMetadata *type metadata accessor for LegibilityWeightKey()
{
  return &type metadata for LegibilityWeightKey;
}

ValueMetadata *type metadata accessor for DisplayGamutKey()
{
  return &type metadata for DisplayGamutKey;
}

ValueMetadata *type metadata accessor for DefaultRenderingModeKey()
{
  return &type metadata for DefaultRenderingModeKey;
}

ValueMetadata *type metadata accessor for TimeZoneKey()
{
  return &type metadata for TimeZoneKey;
}

ValueMetadata *type metadata accessor for LocaleKey()
{
  return &type metadata for LocaleKey;
}

ValueMetadata *type metadata accessor for CalendarKey()
{
  return &type metadata for CalendarKey;
}

ValueMetadata *type metadata accessor for DisplayScaleKey()
{
  return &type metadata for DisplayScaleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FallbackFontKey()
{
  return &type metadata for EnvironmentValues.FallbackFontKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.EffectiveFontKey()
{
  return &type metadata for EnvironmentValues.EffectiveFontKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.EffectiveSymbolFontKey()
{
  return &type metadata for EnvironmentValues.EffectiveSymbolFontKey;
}

ValueMetadata *type metadata accessor for FontKey()
{
  return &type metadata for FontKey;
}

ValueMetadata *type metadata accessor for SymbolFontKey()
{
  return &type metadata for SymbolFontKey;
}

ValueMetadata *type metadata accessor for DefaultFontKey()
{
  return &type metadata for DefaultFontKey;
}

ValueMetadata *type metadata accessor for DefaultSymbolFontKey()
{
  return &type metadata for DefaultSymbolFontKey;
}

ValueMetadata *type metadata accessor for DefaultKerningKey()
{
  return &type metadata for DefaultKerningKey;
}

ValueMetadata *type metadata accessor for DefaultTrackingKey()
{
  return &type metadata for DefaultTrackingKey;
}

ValueMetadata *type metadata accessor for DefaultBaselineOffsetKey()
{
  return &type metadata for DefaultBaselineOffsetKey;
}

ValueMetadata *type metadata accessor for FallbackFontProviderKey()
{
  return &type metadata for FallbackFontProviderKey;
}

ValueMetadata *type metadata accessor for InTouchBarKey()
{
  return &type metadata for InTouchBarKey;
}

ValueMetadata *type metadata accessor for DefaultPixelLengthKey()
{
  return &type metadata for DefaultPixelLengthKey;
}

ValueMetadata *type metadata accessor for DividerThicknessKey()
{
  return &type metadata for DividerThicknessKey;
}

ValueMetadata *type metadata accessor for DisplayCornerRadiusKey()
{
  return &type metadata for DisplayCornerRadiusKey;
}

ValueMetadata *type metadata accessor for AllowsVibrantBlendingKey()
{
  return &type metadata for AllowsVibrantBlendingKey;
}

void EnvironmentValues.reduceDesktopTinting.setter()
{
}

void sub_2460A34AC()
{
}

void sub_2460A34BC()
{
}

uint64_t WeakUncheckedSendable.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t UncheckedSendable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UncheckedSendable.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*UncheckedSendable.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t UncheckedSendable.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static UncheckedSendable<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> UncheckedSendable<A>()
{
  return static UncheckedSendable<A>.== infix(_:_:)();
}

uint64_t UncheckedSendable<A>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int UncheckedSendable<A>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> UncheckedSendable<A>()
{
  return UncheckedSendable<A>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <A> UncheckedSendable<A>()
{
  return UncheckedSendable<A>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> UncheckedSendable<A>()
{
  return Hasher._finalize()();
}

uint64_t key path getter for WeakUncheckedSendable.value : <A>WeakUncheckedSendable<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeakUncheckedSendable();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v6 = MEMORY[0x24C527E00](v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v6;
  return result;
}

void WeakUncheckedSendable.value.getter()
{
}

uint64_t WeakUncheckedSendable.value.setter()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*WeakUncheckedSendable.value.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x24C527E00](v1);
  return WeakBox.base.modify;
}

uint64_t base witness table accessor for Equatable in <A> UncheckedSendable<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_2460A387C()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_2460A388C()
{
  return 8;
}

void *sub_2460A3898(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for UncheckedSendable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for UncheckedSendable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460A3C18);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for UncheckedSendable()
{
  return __swift_instantiateGenericMetadata();
}

SwiftUI::TransactionID __swiftcall TransactionID.init()()
{
  *uint64_t v0 = 0;
  return result;
}

void TransactionID.init(context:)(uint64_t *a1@<X8>)
{
  id v2 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  *a1 = Counter;
}

BOOL static TransactionID.< infix(_:_:)(void *a1, void *a2)
{
  return *a1 < *a2;
}

void TransactionID.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static TransactionID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int TransactionID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TransactionID and conformance TransactionID()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionID and conformance TransactionID;
  if (!lazy protocol witness table cache variable for type TransactionID and conformance TransactionID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionID and conformance TransactionID);
  }
  return result;
}

void static Gradient.ColorSpace.device.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

BOOL static Gradient.ColorSpace.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static Gradient.ColorSpace.perceptual.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static Gradient.ColorSpace.linear.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void Gradient.ColorSpace.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Gradient.ColorSpace.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Gradient.colorSpace(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for GradientBox<ColorSpaceGradientProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 25) = v3;
  swift_bridgeObjectRetain();
  return v4;
}

void type metadata accessor for GradientBox<ColorSpaceGradientProvider>()
{
  if (!lazy cache variable for type metadata for GradientBox<ColorSpaceGradientProvider>)
  {
    lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider();
    unint64_t v0 = type metadata accessor for GradientBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GradientBox<ColorSpaceGradientProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider;
  if (!lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider);
  }
  return result;
}

uint64_t AnyGradient.colorSpace(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for GradientBox<ColorSpaceGradientProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = 1;
  *(unsigned char *)(v4 + 25) = v3;
  swift_retain();
  return v4;
}

unint64_t lazy protocol witness table accessor for type Gradient.ColorSpace and conformance Gradient.ColorSpace()
{
  unint64_t result = lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace;
  if (!lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Gradient.ColorSpace and conformance Gradient.ColorSpace);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Gradient.ColorSpace(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460A40E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Gradient.ColorSpace()
{
  return &type metadata for Gradient.ColorSpace;
}

uint64_t initializeBufferWithCopyOfBuffer for ColorSpaceGradientProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t assignWithCopy for ColorSpaceGradientProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of EitherGradient(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t assignWithTake for ColorSpaceGradientProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of EitherGradient(v6, v7);
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorSpaceGradientProvider(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorSpaceGradientProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for ColorSpaceGradientProvider()
{
  return &unk_26FA6E050;
}

uint64_t ColorSpaceGradientProvider.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v8)(uint64_t *__return_ptr, void *);
  uint64_t result;
  uint64_t v10;
  void v11[2];
  uint64_t v12;

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *(void *)v2;
  char v7 = *(unsigned char *)(v2 + 9);
  if (*(unsigned char *)(v2 + 8))
  {
    v11[0] = *a1;
    v11[1] = v4;
    size_t v8 = *(void (**)(uint64_t *__return_ptr, void *))(*(void *)v6 + 104);
    swift_retain();
    v8(&v12, v11);
    unint64_t result = outlined consume of EitherGradient(v6, 1);
    unsigned int v10 = v12;
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined copy of EitherGradient(v6, 0);
    unsigned int v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(v6, v5, v4);
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    unint64_t result = outlined consume of EitherGradient(v6, 0);
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v7;
  return result;
}

Swift::Int ColorSpaceGradientProvider.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    uint64_t v4 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v4(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for GradientProvider.fallbackColor(in:) in conformance ColorSpaceGradientProvider(long long *a1)
{
  if (*(unsigned char *)(v1 + 8) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)v1;
  long long v6 = *a1;
  Swift::UInt8 v3 = *(uint64_t (**)(long long *))(*(void *)v2 + 112);
  swift_retain();
  uint64_t v4 = v3(&v6);
  outlined consume of EitherGradient(v2, 1);
  return v4;
}

void protocol witness for Hashable.hash(into:) in conformance ColorSpaceGradientProvider(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  Swift::UInt8 v5 = *(unsigned char *)(v1 + 9);
  if (v4)
  {
    Hasher._combine(_:)(1uLL);
    long long v6 = *(void (**)(uint64_t))(*(void *)v3 + 120);
    swift_retain();
    v6(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)(a1, v3);
  }
  outlined consume of EitherGradient(v3, v4);
  Hasher._combine(_:)(v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ColorSpaceGradientProvider()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 9);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    char v4 = *(void (**)(unsigned char *))(*(void *)v1 + 120);
    swift_retain();
    v4(v6);
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
    specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  }
  outlined consume of EitherGradient(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for ColorSpaceGradientProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ColorSpaceGradientProvider and conformance ColorSpaceGradientProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL specialized static ColorSpaceGradientProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 9);
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 9);
  if (v3)
  {
    if (*(unsigned char *)(a2 + 8))
    {
      if (v2 == v5)
      {
        outlined copy of EitherGradient(*(void *)a2, 1);
        outlined copy of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v5, 1);
      }
      else
      {
        size_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
        outlined copy of EitherGradient(*(void *)a2, 1);
        outlined copy of EitherGradient(v2, 1);
        LOBYTE(v8) = v8(v5);
        outlined consume of EitherGradient(v2, 1);
        outlined consume of EitherGradient(v5, 1);
        if ((v8 & 1) == 0) {
          return 0;
        }
      }
      return v4 == v7;
    }
LABEL_7:
    outlined copy of EitherGradient(*(void *)a2, *(unsigned char *)(a2 + 8));
    outlined copy of EitherGradient(v2, v3);
    outlined consume of EitherGradient(v2, v3);
    outlined consume of EitherGradient(v5, v6);
    return 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    goto LABEL_7;
  }
  outlined copy of EitherGradient(*(void *)a2, 0);
  outlined copy of EitherGradient(v2, 0);
  char v10 = specialized static Array<A>.== infix(_:_:)(v2, v5);
  outlined consume of EitherGradient(v2, 0);
  outlined consume of EitherGradient(v5, 0);
  BOOL result = 0;
  if (v10) {
    return v4 == v7;
  }
  return result;
}

uint64_t _GraphInputs.tryToReuse(by:indirectMap:testOnly:)(uint64_t *a1, uint64_t a2, char a3)
{
  unsigned int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = a1[2];
  uint64_t v16 = a1[5];
  uint64_t v17 = *a1;
  uint64_t v8 = *v3;
  unsigned int v9 = *((_DWORD *)v3 + 2);
  uint64_t v10 = v3[2];
  long long v18 = *(_OWORD *)(v3 + 3);
  long long v19 = *(_OWORD *)(a1 + 3);
  uint64_t v11 = v3[5];
  if ((specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v6, a2, a3, v9, 1701669204, (void *)0xE400000000000000) & 1) != 0&& (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v19, a2, a3 & 1, v18, 0x6573616850, (void *)0xE500000000000000) & 1) != 0&& (swift_beginAccess(), unsigned int v12 = *(_DWORD *)(v10 + 16), swift_beginAccess(), (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v7 + 16), a2,
           a3 & 1,
           v12,
           0xD000000000000011,
           (void *)0x8000000246225940) & 1) != 0)
    && (char v13 = a3 & 1,
        (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(DWORD1(v19), a2, v13, DWORD1(v18), 0x746361736E617254, (void *)0xEB000000006E6F69) & 1) != 0))
  {
    unsigned int v25 = v9;
    uint64_t v26 = v10;
    long long v27 = v18;
    uint64_t v28 = v11;
    *(void *)&long long v20 = v17;
    DWORD2(v20) = v6;
    uint64_t v21 = v7;
    long long v22 = v19;
    uint64_t v23 = v16;
    uint64_t v24 = v8;
    char v14 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v20, a2, v13);
  }
  else
  {
    specialized static Log.graphReuse(_:)();
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 1701669204, (void *)0xE400000000000000);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0x6573616850, (void *)0xE500000000000000);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0xD000000000000011, (void *)0x8000000246225940);
}

{
  return specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(a1, a2, a3, a4, 0x746361736E617254, (void *)0xEB000000006E6F69);
}

uint64_t specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4, uint64_t a5, void *a6)
{
  swift_beginAccess();
  if (*(void *)(*(void *)(a2 + 24) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a4), (v11 & 1) != 0))
  {
    swift_endAccess();
    if ((a3 & 1) == 0) {
      AGGraphSetIndirectAttribute();
    }
    return 1;
  }
  else
  {
    swift_endAccess();
    specialized static Log.graphReuse(_:)(a5, a6);
    return 0;
  }
}

uint64_t Attribute.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  swift_beginAccess();
  if (*(void *)(*(void *)(a2 + 24) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a4), (v7 & 1) != 0))
  {
    swift_endAccess();
    if ((a3 & 1) == 0) {
      AGGraphSetIndirectAttribute();
    }
    return 1;
  }
  else
  {
    uint64_t v9 = swift_endAccess();
    MEMORY[0x270FA5388](v9);
    specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:));
    return 0;
  }
}

uint64_t static GraphReusable.isTriviallyReusable.getter()
{
  return 0;
}

uint64_t IndirectAttributeMap.map.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t IndirectAttributeMap.init(subgraph:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v2;
  return v1;
}

uint64_t IndirectAttributeMap.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IndirectAttributeMap.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _GraphValue.makeReusable(indirectMap:)(uint64_t a1)
{
  type metadata accessor for Attribute();

  return Attribute.makeReusable(indirectMap:)(a1);
}

uint64_t _GraphValue.tryToReuse(by:indirectMap:testOnly:)(unsigned int *a1, uint64_t a2, char a3)
{
  return Attribute.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3, *v3);
}

uint64_t static _GraphValue<A>.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(long long *a1, uint64_t a2, char a3)
{
  long long v6 = a1[1];
  v47[0] = *a1;
  v47[1] = v6;
  v47[2] = a1[2];
  long long v7 = v3[1];
  v46[0] = *v3;
  v46[1] = v7;
  v46[2] = v3[2];
  unint64_t v8 = *(void *)&v46[0];
  v49[0] = *(void *)&v46[0];
  outlined retain of _GraphInputs((uint64_t)v46);
  outlined retain of ViewTransform((uint64_t)v49);
  uint64_t v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v9 + 72);
    char v11 = (uint64_t *)(v9 + 80);
  }
  else
  {
    uint64_t v10 = &static ReusableInputs.defaultValue;
    char v11 = &qword_26B1119A8;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  unsigned int v12 = (void *)*v11;
  uint64_t v13 = *v10;
  swift_retain();
  outlined release of ViewTransform((uint64_t)v49);
  outlined release of _GraphInputs((uint64_t)v46);
  unint64_t v14 = *(void *)&v47[0];
  uint64_t v48 = *(void *)&v47[0];
  outlined retain of _GraphInputs((uint64_t)v47);
  outlined retain of ViewTransform((uint64_t)&v48);
  uint64_t v15 = specialized find<A>(_:key:)(v14);
  if (v15)
  {
    uint64_t v16 = (uint64_t *)(v15 + 72);
    uint64_t v17 = (uint64_t *)(v15 + 80);
  }
  else
  {
    uint64_t v16 = &static ReusableInputs.defaultValue;
    uint64_t v17 = &qword_26B1119A8;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v18 = *v17;
  uint64_t v19 = *v16;
  swift_retain();
  outlined release of ViewTransform((uint64_t)&v48);
  outlined release of _GraphInputs((uint64_t)v47);
  if (v13 == v19)
  {
    char v42 = a3;
    uint64_t v43 = a2;
    swift_retain();
    long long v20 = (void *)MEMORY[0x263F8EE78];
    if (v12)
    {
      uint64_t v21 = v12;
      do
      {
        long long v22 = (void *)v21[4];
        uint64_t v23 = v21[2];
        swift_retain();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v25 = v20[2];
        unint64_t v24 = v20[3];
        if (v25 >= v24 >> 1) {
          long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v20);
        }
        v20[2] = v25 + 1;
        v20[v25 + 4] = v23;
        uint64_t v21 = v22;
      }
      while (v22);
    }
    swift_retain();
    uint64_t v26 = (void *)MEMORY[0x263F8EE78];
    if (v18)
    {
      uint64_t v27 = v18;
      do
      {
        uint64_t v28 = *(void *)(v27 + 32);
        uint64_t v29 = *(void *)(v27 + 16);
        swift_retain();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
        }
        unint64_t v31 = v26[2];
        unint64_t v30 = v26[3];
        if (v31 >= v30 >> 1) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v26);
        }
        _OWORD v26[2] = v31 + 1;
        v26[v31 + 4] = v29;
        uint64_t v27 = v28;
      }
      while (v28);
    }
    char v32 = specialized static Array<A>.== infix(_:_:)(v20, v26);
    swift_bridgeObjectRelease();
    if (v32)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      }
      unint64_t v34 = v20[2];
      unint64_t v33 = v20[3];
      if (v34 >= v33 >> 1) {
        long long v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v20);
      }
      v20[2] = v34 + 1;
      v20[v34 + 4] = &type metadata for ReusableInputs;
      uint64_t v45 = v20;
      if (v8)
      {
        uint64_t v35 = v43;
        if (v14)
        {
          uint64_t v44 = v20;
          swift_bridgeObjectRetain();
          outlined retain of ViewTransform((uint64_t)v49);
          outlined retain of ViewTransform((uint64_t)&v48);
          swift_bridgeObjectRetain();
          BOOL v36 = compareLists(_:_:ignoredTypes:)(v8, v14, (uint64_t)&v44);
          swift_bridgeObjectRelease();
          outlined release of ViewTransform((uint64_t)&v48);
          outlined release of ViewTransform((uint64_t)v49);
          swift_bridgeObjectRelease();
          if (v36)
          {
            unint64_t v34 = v20[2] - 1;
            goto LABEL_38;
          }
        }
      }
      else
      {
        uint64_t v35 = v43;
        if (!v14)
        {
LABEL_38:
          uint64_t v44 = (void *)v34;
          swift_retain();
          uint64_t v38 = v12;
          while (v38)
          {
            uint64_t v39 = v38[3];
            uint64_t v40 = (void *)v38[4];
            uint64_t v41 = v38[2];
            swift_retain();
            swift_release();
            uint64_t v38 = v40;
            if ((specialized project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(v41, (uint64_t *)&v45, (unint64_t *)&v44, v46, v47, v35, v42 & 1, v41, v39) & 1) == 0)
            {
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              return 0;
            }
          }
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      swift_bridgeObjectRelease();
      specialized static Log.graphReuse(_:)();
    }
    else
    {
      swift_bridgeObjectRelease();
      specialized static Log.graphReuse(_:)();
    }
  }
  swift_release();
  swift_release();
  return 0;
}

uint64_t specialized project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(uint64_t a1, uint64_t *a2, unint64_t *a3, long long *a4, long long *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v39 = a7;
  BOOL v36 = a4;
  uint64_t v37 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v34 - v18;
  swift_beginAccess();
  unint64_t v20 = *a3;
  uint64_t result = swift_beginAccess();
  unint64_t v22 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v23 = *a2;
  if (*(void *)(*a2 + 16) < v22)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v35 = a6;
  uint64_t v24 = 1;
  uint64_t v25 = specialized Collection<>.firstIndex(of:)(a1, v23 + 32, 0, (2 * v22) | 1);
  if ((v26 & 1) == 0)
  {
    unint64_t v27 = v25;
    swift_beginAccess();
    specialized MutableCollection.swapAt(_:_:)(v27, v20);
    swift_endAccess();
    uint64_t v24 = 1;
    swift_beginAccess();
    --*a3;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a9 + 16))(a8, a9) & 1) == 0)
    {
      long long v28 = v36[1];
      long long v40 = *v36;
      long long v41 = v28;
      long long v42 = v36[2];
      _GraphInputs.subscript.getter(a1, a8, a9);
      long long v29 = v37[1];
      long long v40 = *v37;
      long long v41 = v29;
      long long v42 = v37[2];
      _GraphInputs.subscript.getter(a1, a8, a9);
      char v30 = (*(uint64_t (**)(char *, char *, uint64_t, void, uint64_t, uint64_t))(a9 + 32))(v19, v16, v35, v39 & 1, a8, a9);
      unint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
      uint64_t v32 = v34;
      v31(v16, v34);
      uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v31)(v19, v32);
      if (v30)
      {
        return 1;
      }
      else
      {
        MEMORY[0x270FA5388](v33);
        *(&v34 - 2) = a8;
        *(&v34 - 1) = a9;
        specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:));
        return 0;
      }
    }
  }
  return v24;
}

uint64_t implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)()
{
  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x80000002462258F0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)()
{
  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x8000000246225890;
  v0._uint64_t countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for GraphReusable.tryToReuse(by:indirectMap:testOnly:) in conformance Attribute<A>(unsigned int *a1, uint64_t a2, char a3)
{
  return Attribute.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3, *v3);
}

uint64_t one-time initialization function for graphReuseLog()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.graphReuseLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.graphReuseLog);
  return Logger.init(subsystem:category:)();
}

void specialized static Log.graphReuse(_:)(uint64_t (*a1)(void))
{
  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    uint64_t v9 = a1();
    unint64_t v11 = v10;
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(void *)&v17[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245728000, v13, v14, "%s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v16, -1, -1);
      MEMORY[0x24C527CC0](v15, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  Swift::String v2 = self;
  id v3 = objc_msgSend(v2, sel_standardUserDefaults);
  int v4 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (!v5)
  {
    memset(v17, 0, sizeof(v17));
    outlined destroy of Any?((uint64_t)v17);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v17);
  id v6 = objc_msgSend(v2, sel_standardUserDefaults);
  long long v7 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  static EnableGraphReuseLogging.cacheduint64_t Value = v8;
  if (v8) {
    goto LABEL_6;
  }
}

void specialized static Log.graphReuse(_:)(uint64_t a1, void *a2)
{
  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    *(void *)&v20[0] = 0;
    *((void *)&v20[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v11._uint64_t countAndFlagsBits = 0xD000000000000026;
    v11._object = (void *)0x8000000246225890;
    String.append(_:)(v11);
    v12._uint64_t countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    long long v14 = v20[0];
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(void *)&v20[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, *((unint64_t *)&v14 + 1), (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245728000, v16, v17, "%s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v19, -1, -1);
      MEMORY[0x24C527CC0](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  int v4 = self;
  id v5 = objc_msgSend(v4, sel_standardUserDefaults);
  id v6 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    memset(v20, 0, sizeof(v20));
    outlined destroy of Any?((uint64_t)v20);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v20);
  id v8 = objc_msgSend(v4, sel_standardUserDefaults);
  uint64_t v9 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v10 = objc_msgSend(v8, sel_BOOLForKey_, v9);

  static EnableGraphReuseLogging.cacheduint64_t Value = v10;
  if (v10) {
    goto LABEL_6;
  }
}

void specialized static Log.graphReuse(_:)()
{
  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v12[0] = v11;
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x8000000246225960, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v11, -1, -1);
      MEMORY[0x24C527CC0](v10, -1, -1);
    }

    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v12[0] = v11;
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x8000000246225910, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v11, -1, -1);
      MEMORY[0x24C527CC0](v10, -1, -1);
    }

    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v12[0] = v11;
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000002462258C0, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v11, -1, -1);
      MEMORY[0x24C527CC0](v10, -1, -1);
    }

    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  long long v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _OWORD v16[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    *(void *)&v16[0] = 0;
    *((void *)&v16[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v7._uint64_t countAndFlagsBits = 0x207475706E49;
    v7._object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0xD000000000000014;
    v9._object = (void *)0x8000000246225840;
    String.append(_:)(v9);
    unsigned __int8 v10 = v16[0];
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Log.graphReuseLog);
    swift_bridgeObjectRetain();
    Swift::String v12 = Logger.logObject.getter();
    Swift::String v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      long long v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(void *)&v16[0] = v15;
      *(_DWORD *)long long v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, *((unint64_t *)&v10 + 1), (uint64_t *)v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245728000, v12, v13, "%s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v15, -1, -1);
      MEMORY[0x24C527CC0](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v12[0] = v11;
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000246225980, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v11, -1, -1);
      MEMORY[0x24C527CC0](v10, -1, -1);
    }

    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  swift_beginAccess();
  if (static EnableGraphReuseLogging.cachedValue != 2)
  {
    if ((static EnableGraphReuseLogging.cachedValue & 1) == 0) {
      return;
    }
LABEL_6:
    if (one-time initialization token for graphReuseLog != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Log.graphReuseLog);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unsigned __int8 v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(void *)&v12[0] = v11;
      *(_DWORD *)unsigned __int8 v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000246225860, (uint64_t *)v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_245728000, v8, v9, "%s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C527CC0](v11, -1, -1);
      MEMORY[0x24C527CC0](v10, -1, -1);
    }

    return;
  }
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_standardUserDefaults);
  Swift::String v2 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (!v3)
  {
    memset(v12, 0, sizeof(v12));
    outlined destroy of Any?((uint64_t)v12);
    static EnableGraphReuseLogging.cacheduint64_t Value = 0;
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v12);
  id v4 = objc_msgSend(v0, sel_standardUserDefaults);
  id v5 = (void *)MEMORY[0x24C522820](0xD000000000000023, 0x8000000246225810);
  unsigned __int8 v6 = objc_msgSend(v4, sel_BOOLForKey_, v5);

  static EnableGraphReuseLogging.cacheduint64_t Value = v6;
  if (v6) {
    goto LABEL_6;
  }
}

uint64_t partial apply for implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in Attribute.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t method lookup function for IndirectAttributeMap(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IndirectAttributeMap);
}

uint64_t dispatch thunk of IndirectAttributeMap.__allocating_init(subgraph:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static GraphReusable.isTriviallyReusable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of GraphReusable.makeReusable(indirectMap:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GraphReusable.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t partial apply for implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in project #1 <A>(_:) in _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)();
}

uint64_t ForEach.data.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ForEach.data.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ForEach.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = (void *)(v3 + *(int *)(a3 + 60));
  uint64_t result = swift_release();
  *unsigned __int8 v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*ForEach.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL ForEach.IDGenerator.isConstant.getter()
{
  return *v0 == 0;
}

uint64_t ForEach.idGenerator.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 64));
  return swift_retain();
}

uint64_t ForEach.idGenerator.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(a2 + 64);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = v3;
  return result;
}

uint64_t (*ForEach.idGenerator.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ForEach.reuseID.getter()
{
  return swift_retain();
}

uint64_t ForEach.reuseID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 68);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*ForEach.reuseID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ForEach.init<A>(_:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v37 = a7;
  uint64_t v38 = a2;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v32 = a9;
  uint64_t v41 = a5;
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v44 = a10;
  uint64_t v35 = a10;
  uint64_t v36 = a8;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = a8;
  uint64_t v44 = a10;
  uint64_t v19 = (int *)type metadata accessor for ForEach();
  uint64_t v20 = v32;
  *(void *)(v32 + v19[17]) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v20, a1, a4);
  *(void *)(v20 + v19[16]) = *(void *)(a1 + *(int *)(v15 + 64));
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v22 = (char *)swift_allocObject();
  uint64_t v23 = v33;
  *((void *)v22 + 2) = a4;
  *((void *)v22 + 3) = v23;
  uint64_t v24 = v37;
  *((void *)v22 + 4) = v34;
  *((void *)v22 + 5) = v24;
  uint64_t v25 = v35;
  *((void *)v22 + 6) = v36;
  *((void *)v22 + 7) = v25;
  uint64_t v26 = v39;
  *((void *)v22 + 8) = v38;
  *((void *)v22 + 9) = v26;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v22[v21], v18, v15);
  unint64_t v27 = (uint64_t (**)(uint64_t))(v20 + v19[15]);
  *unint64_t v27 = partial apply for closure #1 in ForEach.init<A>(_:transform:);
  v27[1] = (uint64_t (*)(uint64_t))v22;
  uint64_t v28 = *(void *)(a1 + *(int *)(v15 + 72));
  long long v29 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
  swift_retain();
  uint64_t result = v29(a1, v15);
  *(void *)(v20 + v19[18]) = v28;
  return result;
}

uint64_t closure #1 in ForEach.init<A>(_:transform:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](a1);
  long long v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = v15;
  v22[2] = v16;
  v22[3] = v17;
  v22[4] = v18;
  _OWORD v22[5] = v19;
  uint64_t v20 = type metadata accessor for ForEach();
  (*(void (**)(uint64_t))(a4 + *(int *)(v20 + 60)))(a1);
  a2(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a8);
}

uint64_t static ForEach<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, void *a8@<X8>)
{
  int v13 = *a1;
  uint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  unsigned int v18 = *(_DWORD *)(a2 + 24);
  unsigned int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 32);
  unsigned int v20 = *(_DWORD *)(a2 + 36);
  uint64_t v21 = *(void *)(a2 + 40);
  uint64_t v22 = *(void *)(a2 + 48);
  int v23 = *(_DWORD *)(a2 + 56);
  int v24 = *(_DWORD *)(a2 + 60);
  int v25 = *(_DWORD *)(a2 + 64);
  int v26 = *(_DWORD *)(a2 + 68);
  int v28 = *(_DWORD *)(a2 + 72);
  int v27 = *(_DWORD *)(a2 + 76);
  int v29 = *(_DWORD *)(a2 + 80);
  int v61 = v13;
  uint64_t v47 = v14;
  LODWORD(v48) = v15;
  uint64_t v49 = v16;
  unint64_t v50 = __PAIR64__(v17, v18);
  unsigned int v44 = v19;
  unsigned int v45 = v17;
  unint64_t v51 = __PAIR64__(v20, v19);
  unsigned int v43 = v20;
  uint64_t v41 = v22;
  uint64_t v42 = v21;
  uint64_t v52 = v21;
  uint64_t v53 = v22;
  int v39 = v24;
  int v40 = v23;
  int v54 = v23;
  int v55 = v24;
  int v37 = v26;
  int v38 = v25;
  int v56 = v25;
  int v57 = v26;
  int v35 = v27;
  int v36 = v28;
  int v58 = v28;
  int v59 = v27;
  int v34 = v29;
  int v60 = v29;
  uint64_t result = static ForEach<>.makeForEachView(view:inputs:)(&v61, (uint64_t)&v47, a5, v62);
  if (v62[0])
  {
    uint64_t v31 = v62[1];
    *a8 = v62[0];
    a8[1] = v31;
  }
  else
  {
    uint64_t v47 = a3;
    uint64_t v48 = a4;
    uint64_t v49 = a5;
    unint64_t v50 = a6;
    unint64_t v51 = a7;
    uint64_t v32 = type metadata accessor for ForEach();
    LODWORD(v62[0]) = v13;
    uint64_t v47 = v14;
    LODWORD(v48) = v15;
    uint64_t v49 = v16;
    unint64_t v50 = __PAIR64__(v45, v18);
    unint64_t v51 = __PAIR64__(v43, v44);
    uint64_t v52 = v42;
    uint64_t v53 = v41;
    int v54 = v40;
    int v55 = v39;
    int v56 = v38;
    int v57 = v37;
    int v58 = v36;
    int v59 = v35;
    int v60 = v34;
    uint64_t WitnessTable = swift_getWitnessTable();
    return static View.makeImplicitRoot(view:inputs:)((int *)v62, &v47, v32, WitnessTable, (uint64_t)a8);
  }
  return result;
}

uint64_t static ForEach<>.makeForEachView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  int v6 = *a1;
  long long v7 = *(_OWORD *)(a2 + 48);
  v21[2] = *(_OWORD *)(a2 + 32);
  v21[3] = v7;
  v21[4] = *(_OWORD *)(a2 + 64);
  int v22 = *(_DWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v8;
  int v20 = v6;
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v15 = type metadata accessor for ForEachSubviewCollection();
  uint64_t v16 = &type metadata for Subview.ID;
  uint64_t v17 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t v9 = swift_dynamicCast();
  if (v9)
  {
    MEMORY[0x270FA5388](v9);
    LODWORD(v15) = v10;
    uint64_t v11 = (void (*)(uint64_t))partial apply for closure #1 in static ForEach<>.makeForEachView(view:inputs:);
LABEL_5:
    _GraphValue.subscript.getter(v11, (uint64_t)&type metadata for AnyView, &v20);
    uint64_t result = specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v20, (uint64_t)v21, (uint64_t)&v15);
    uint64_t v14 = v16;
    *a4 = v15;
    a4[1] = (uint64_t)v14;
    return result;
  }
  int v20 = v6;
  uint64_t v15 = type metadata accessor for ForEachSectionCollection();
  uint64_t v16 = &type metadata for SectionConfiguration.ID;
  uint64_t v17 = a3;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  type metadata accessor for ForEach();
  type metadata accessor for _GraphValue();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    MEMORY[0x270FA5388](result);
    LODWORD(v15) = v13;
    uint64_t v11 = (void (*)(uint64_t))partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:);
    goto LABEL_5;
  }
  *a4 = 0;
  a4[1] = 0;
  return result;
}

uint64_t *ForEachState.__allocating_init(inputs:)(uint64_t *a1)
{
  return ForEachState.init(inputs:)(a1);
}

uint64_t closure #2 in static ForEach<>.makeForEachViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = type metadata accessor for ForEachSectionCollection();
  uint64_t v16 = &type metadata for SectionConfiguration.ID;
  uint64_t v17 = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type SectionConfiguration.ID and conformance SectionConfiguration.ID();
  _OWORD v14[2] = type metadata accessor for ForEach();
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a8, (uint64_t)v14, (uint64_t)&type metadata for AnyView, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v15;
}

uint64_t closure #1 in static ForEach<>.makeForEachView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = type metadata accessor for ForEachSubviewCollection();
  uint64_t v16 = &type metadata for Subview.ID;
  uint64_t v17 = a4;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  _OWORD v14[2] = type metadata accessor for ForEach();
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a8, (uint64_t)v14, (uint64_t)&type metadata for AnyView, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  return v15;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> ForEach<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static ForEach<>._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), a4);
}

uint64_t static ForEachEvictionInput.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return static ForEachEvictionInput.defaultValue;
}

uint64_t static ForEachEvictionInput.evictByDefault.getter()
{
  if (one-time initialization token for evictByDefault != -1) {
    swift_once();
  }
  return static ForEachEvictionInput.evictByDefault;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance ForEachEvictionInput@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static ForEachEvictionInput.defaultValue;
  *a1 = static ForEachEvictionInput.defaultValue;
  return result;
}

uint64_t sub_2460A7BEC()
{
  return 48;
}

__n128 sub_2460A7BF8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t ForEachState.uneraseItem(_:)(_DWORD *a1)
{
  *((unsigned char *)a1 + *(void *)(*(void *)a1 + 240)) = 0;
  *((unsigned char *)a1 + *(void *)(*(void *)a1 + 232)) = 8;
  AGSubgraphAddChild();
  return AGSubgraphApply();
}

uint64_t closure #1 in ForEachState.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, unsigned char *a6, uint64_t *a7)
{
  outlined init with copy of _ViewListOutputs.Views(a3 + *(void *)(*(void *)a3 + 176), (uint64_t)v32);
  if ((v33 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t result = swift_release();
  if (a6[124] == 1) {
    goto LABEL_20;
  }
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Inputuint64_t Value = AGGraphGetInputValue();
  outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v29);
  uint64_t v13 = v30;
  uint64_t v14 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  unint64_t v28 = a5;
  uint64_t v15 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v14 + 8))(&v28, v13, v14);
  uint64_t v16 = *a4 + v15;
  if (__OFADD__(*a4, v15))
  {
    __break(1u);
LABEL_6:
    outlined init with take of ScrollStateRequest(v32, (uint64_t)v29);
    uint64_t v17 = v30;
    uint64_t v18 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
    if ((a5 & 1) == 0
      || (uint64_t v19 = (unsigned __int128)(result * (__int128)(a5 >> 1)) >> 64, result *= a5 >> 1, v19 == result >> 63))
    {
      uint64_t v16 = *a4 + result;
      if (!__OFADD__(*a4, result)) {
        goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
LABEL_9:
  *a4 = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  int v20 = &a6[*(void *)(*(void *)a6 + 176)];
  swift_beginAccess();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  if (!v21
    || (uint64_t v22 = *a7, v21 == *a7)
    && (uint64_t v22 = *(void *)(*(void *)v20 + 16), *(void *)&a6[*(void *)(*(void *)a6 + 184)] == a5))
  {
    uint64_t v23 = *a4;
    swift_beginAccess();
    int v24 = *(void **)v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)int v20 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      *(void *)int v20 = v24;
    }
    unint64_t v27 = v24[2];
    unint64_t v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      int v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
      *(void *)int v20 = v24;
    }
    void v24[2] = v27 + 1;
    v24[v27 + 4] = v23;
    swift_endAccess();
    *(void *)&a6[*(void *)(*(void *)a6 + 184)] = a5;
    uint64_t v22 = *a7;
  }
  *a7 = v22 + 1;
  return 1;
}

uint64_t closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6, uint64_t a7)
{
  uint64_t v7 = *a4;
  uint64_t v8 = *a5;
  if (*a4 == *a5) {
    return v7 != v8;
  }
  unint64_t v11 = *a2;
  *a4 = v7 + 1;
  outlined init with copy of _ViewListOutputs.Views(a3 + *(void *)(*(void *)a3 + 176), (uint64_t)v25);
  if (v26)
  {
    uint64_t result = swift_release();
    if (*(unsigned char *)(a7 + 124) == 1) {
      goto LABEL_14;
    }
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)v22);
    uint64_t v14 = v23;
    uint64_t v15 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    unint64_t v21 = v11;
    uint64_t v16 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v15 + 8))(&v21, v14, v15);
    uint64_t v17 = *a6 + v16;
    if (!__OFADD__(*a6, v16)) {
      goto LABEL_10;
    }
    __break(1u);
  }
  outlined init with take of ScrollStateRequest(v25, (uint64_t)v22);
  uint64_t v18 = v23;
  uint64_t v19 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  if ((v11 & 1) == 0
    || (uint64_t v20 = (unsigned __int128)(result * (__int128)(v11 >> 1)) >> 64, result *= v11 >> 1, v20 == result >> 63))
  {
    uint64_t v17 = *a6 + result;
    if (!__OFADD__(*a6, result))
    {
LABEL_10:
      *a6 = v17;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v7 != v8;
    }
    __break(1u);
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.bindID(_:) in conformance ForEachState<A, B, C>.Transform(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(unsigned char *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  return ForEachState.Transform.bindID(_:)(a1, *(void **)v1, v3 | v4);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForEachState<A, B, C>.Info.Init()
{
  return 0x697463656C6C6F43;
}

BOOL closure #1 in ForEachState.Item.invalidate()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v5 = *(void *)(*(void *)a3 + 120);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.n128_f64[0] = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v15((char *)&v20 - v11, a1, v5, v10);
  *(void *)&v12[*(int *)(TupleTypeMetadata2 + 48)] = v13;
  uint64_t v16 = *(int *)(TupleTypeMetadata2 + 48);
  ((void (*)(char *, char *, uint64_t))v15)(v8, v12, v5);
  *(void *)&v8[v16] = v13;
  BOOL v17 = v13 != v21;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v20 + 8);
  swift_retain();
  v18(v12, TupleTypeMetadata2);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v5);
  return v17;
}

uint64_t ForEachState.Item.__ivar_destroyer()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 160));
  outlined destroy of _ViewListOutputs.Views(v0 + *(void *)(*(void *)v0 + 176));
  swift_weakDestroy();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 192);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t ForEachState.ItemList.value.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v7);
  a2[3] = type metadata accessor for ForEachState.ItemList.WrappedList();
  a2[4] = (uint64_t)&protocol witness table for ForEachState<A, B, C>.ItemList.WrappedList;
  uint64_t v5 = swift_allocObject();
  *a2 = v5;
  outlined init with take of ScrollStateRequest(v7, v5 + 16);
  *(void *)(v5 + 56) = a1;
  return swift_retain();
}

void *ForEachState.ItemList.WrappedList.traits.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(&v6, v3, v4);
  if (v1[5]) {
    uint64_t result = (void *)ForEachState.Item.applyTraits(to:)();
  }
  *a1 = v6;
  return result;
}

uint64_t ForEachState.ItemList.WrappedList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  uint64_t v13 = v6[3];
  uint64_t v14 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v13);
  uint64_t v16 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, &v16, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v13, v14) & 1;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ForEachState<A, B, C>.ItemList.WrappedList(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ForEachState.ItemList.WrappedList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t protocol witness for Rule.value.getter in conformance ForEachState<A, B, C>.ItemList@<X0>(uint64_t *a1@<X8>)
{
  return ForEachState.ItemList.value.getter(*(void *)(v1 + 8), a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t *a1, uint64_t *a2)
{
  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = _ViewInputs.base.modify(*v2, *(void *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t (**a1)(), uint64_t *a2))()
{
  uint64_t v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((void *)v4 + 4) = ForEachState.StaticViewIDCollection.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance UnsafeMutableBufferProjectionPointer<A, B>;
}

uint64_t (*ForEachState.StaticViewIDCollection.subscript.read(uint64_t (*result)(), uint64_t a2))()
{
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v2 = MEMORY[0x263F8EE78];
    *(_DWORD *)uint64_t result = a2;
    *((_DWORD *)result + 1) = 0;
    *((void *)result + 1) = v2;
    return destroy for Image.Location.Error;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.StaticViewIDCollection(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachState<A, B, C>.StaticViewIDCollection(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ForEachState<A, B, C>.StaticViewIDCollection()
{
  return MEMORY[0x24C522BA0]();
}

uint64_t closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v19 = a5;
  uint64_t v20 = a7;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v18 - v14;
  v24[0] = a3;
  v24[1] = a4;
  void v24[2] = v19;
  v24[3] = a6;
  v24[4] = v20;
  v24[5] = a9;
  type metadata accessor for ForEachState.ForEachViewIDCollection();
  uint64_t v16 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v13 + 16))(v15);
  v16(v24, 0);
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t static ForEachState.ForEachViewIDCollection.== infix(_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v48 = a3;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  __n128 v10 = (int *)type metadata accessor for ForEachState.ForEachViewIDCollection();
  uint64_t v11 = *((void *)v10 - 1);
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v51 = (char *)&v46 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v53 = (char *)&v46 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v46 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v46 - v21;
  double v24 = MEMORY[0x270FA5388](v23);
  char v26 = (char *)&v46 - v25;
  char v27 = (*(uint64_t (**)(void, double))(**(void **)a1 + 104))(*a2, v24);
  unint64_t v28 = *(void (**)(char *, uint64_t, int *))(v11 + 16);
  uint64_t v49 = a1;
  v28(v26, a1, v10);
  unint64_t v50 = a2;
  v28(v22, (uint64_t)a2, v10);
  if (v27)
  {
    int v29 = v26[v10[20]];
    uint64_t v30 = *(void (**)(char *, int *))(v11 + 8);
    v30(v26, v10);
    int v31 = v22[v10[20]];
    v30(v22, v10);
    uint64_t v32 = v49;
    v28(v19, v49, v10);
    char v33 = v50;
    v28(v53, (uint64_t)v50, v10);
    BOOL v34 = v29 == v31;
    int v35 = v33;
    if (v34)
    {
      int v38 = v52;
      int v37 = v53;
      uint64_t v36 = *(_DWORD *)&v19[v10[21]] == *(_DWORD *)&v53[v10[21]];
    }
    else
    {
      uint64_t v36 = 0;
      int v38 = v52;
      int v37 = v53;
    }
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, int *))(v11 + 8);
    v30(v22, v10);
    v30(v26, v10);
    uint64_t v32 = v49;
    v28(v19, v49, v10);
    uint64_t v47 = v19;
    int v39 = v53;
    int v35 = v50;
    v28(v53, (uint64_t)v50, v10);
    uint64_t v36 = 0;
    int v38 = v52;
    int v37 = v39;
    uint64_t v19 = v47;
  }
  v30(v37, v10);
  v30(v19, v10);
  int v40 = v51;
  v28(v51, v32, v10);
  v28(v38, (uint64_t)v35, v10);
  if (v36)
  {
    MEMORY[0x270FA5388](&v40[v10[17]]);
    uint64_t v41 = v48;
    *(&v46 - 4) = v48;
    *(&v46 - 3) = v42;
    *((_DWORD *)&v46 - 4) = 515;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v43, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v46 - 6), v41, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v44);
    uint64_t v36 = v54;
  }
  v30(v38, v10);
  v30(v40, v10);
  return v36;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, void *a2, uint64_t *a3)
{
  return static ForEachState.ForEachViewIDCollection.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7]);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D870], MEMORY[0x263F8D170]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x263F8D1A0], MEMORY[0x263F8D180]);
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachState<A, B, C>.ForEachViewIDCollection(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ForEachState<A, B, C>.ForEachViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachState<A, B, C>.ForEachViewIDCollection(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = specialized Collection._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

id *ForEachState.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  uint64_t v1 = (char *)v0 + *((void *)*v0 + 20);
  type metadata accessor for ForEach();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ForEachState.__deallocating_deinit()
{
  return ForEachState.Item.__deallocating_deinit((uint64_t (*)(void))ForEachState.deinit);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ForEachList<A, B, C>.Init()
{
  return 0x697463656C6C6F43;
}

void protocol witness for ViewList.traits.getter in conformance ForEachList<A, B, C>(void *a1@<X8>)
{
}

uint64_t ForEachChild.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0x697463656C6C6F43;
  v0._object = (void *)0xEB000000005B6E6FLL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._uint64_t countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t sub_2460A9AB0()
{
  long long v4 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = *(void *)(type metadata accessor for ForEach() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEach.init<A>(_:transform:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(type metadata accessor for ForEach() - 8);
  return closure #1 in ForEach.init<A>(_:transform:)(a1, *(void (**)(char *))(v1 + 64), *(void *)(v1 + 72), v1 + ((*(unsigned __int8 *)(v7 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4, v5, v6);
}

uint64_t sub_2460A9CA0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t initializeWithTake for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  __n128 v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

ValueMetadata *type metadata accessor for ForEachEvictionInput()
{
  return &type metadata for ForEachEvictionInput;
}

uint64_t dispatch thunk of HasCustomIDRepresentation.toCustomIDRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t assignWithCopy for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ForEachState.Evictor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t base witness table accessor for Equatable in ForEachState<A, B, C>.IDTypeMatchingStrategy()
{
  return swift_getWitnessTable();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v8, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return MEMORY[0x270F9FA60]();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

BOOL partial apply for closure #1 in ForEachState.Item.invalidate()(uint64_t a1, uint64_t *a2)
{
  return closure #1 in ForEachState.Item.invalidate()(a1, a2, v2);
}

uint64_t partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #2 in static ForEach<>.makeForEachViewList(view:inputs:));
}

uint64_t partial apply for closure #1 in static ForEach<>.makeForEachView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:)(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5, closure #1 in static ForEach<>.makeForEachView(view:inputs:));
}

uint64_t partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], a2);
}

uint64_t partial apply for closure #1 in static ForEach<>.makeForEachViewList(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #2 in static ForEach<>.makeForEachView(view:inputs:)(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, closure #1 in static ForEach<>.makeForEachView(view:inputs:));
}

uint64_t partial apply for closure #4 in ForEachState.item(at:offset:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v1;
  return result;
}

uint64_t type metadata accessor for ForEachState.ItemList()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  return closure #1 in closure #1 in ForEachState.firstOffset<A>(forID:style:)(a1, a2, a3, *(uint64_t **)(v3 + 32), *(uint64_t **)(v3 + 40), *(void **)(v3 + 48), *(void *)(v3 + 56)) & 1;
}

uint64_t type metadata accessor for ForEachState.StaticViewIDCollection()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in ForEachState.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in ForEachState.count(style:)(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(unsigned char **)(v3 + 32), *(uint64_t **)(v3 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEachState.ForEachViewIDCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  int v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  uint64_t v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((((((v6 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    uint64_t v11 = a1;
    uint64_t v12 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v13 = ((unint64_t)a2 + v5 + 8) & ~v5;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v14(v12, v13, v3);
    uint64_t v15 = (void *)((v6 + v12) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((v6 + v13) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
    *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
    char v19 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v20 = (void *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    *char v19 = *v20;
    *(void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v11;
}

void *assignWithCopy for ForEachState.ForEachViewIDCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v12 = *(void *)(v13 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v14;
  swift_retain();
  swift_release();
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v14 + 8);
  *(_DWORD *)(v15 + 12) = *(_DWORD *)(v14 + 12);
  uint64_t v16 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for ForEachState.ForEachViewIDCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  uint64_t v10 = (void *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  unint64_t v14 = (void *)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ForEachState.ForEachViewIDCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  unint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  swift_release();
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  swift_release();
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(v15 + 12);
  uint64_t v16 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEachState.ForEachViewIDCollection(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460AAB74);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ForEachState.ForEachViewIDCollection(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
              char v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 7) & 0xFFFFFFF8)
           + 15) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x2460AAD90);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t assignWithCopy for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t assignWithTake for ForEachState.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for ForEachChild(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

_DWORD *assignWithCopy for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ForEachChild(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for ForEachChild(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460AB450);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t assignWithCopy for ForEachState.ItemList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ForEachState.ItemList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_7(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_7(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_7((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachState<A, B, C>.StaticViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachState<A, B, C>.ForEachViewIDCollection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForEachState<A, B, C>.ItemList()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ForEachState.ItemList.WrappedList()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ForEachState.ForEachViewIDCollection.subscript.getter(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], a1, v1[7]);
}

uint64_t *assignWithCopy for ForEachState.ItemList.WrappedList(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ForEachState.ItemList.WrappedList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

void static VersionSeed.empty.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned int *VersionSeed.merge(_:)(unsigned int *result)
{
  unint64_t v2 = *result;
  uint64_t v3 = *v1;
  if (v3 != -1 && v2 != 0)
  {
    if (v3) {
      BOOL v5 = v2 == -1;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      unint64_t v6 = (v2 | (v3 << 32)) + ~(v2 << 32);
      unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
      unint64_t v2 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
      LODWORD(v2) = ((v2 + ~(v2 << 27)) >> 31) ^ (v2 + ~(v2 << 27));
    }
    _DWORD *v1 = v2;
  }
  return result;
}

uint64_t VersionSeed.init(nodeId:viewSeed:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unint64_t v3 = (a2 | (unint64_t)(result << 32)) + ~((unint64_t)a2 << 32);
  unint64_t v4 = (v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13);
  unint64_t v5 = (9 * (v4 ^ (v4 >> 8))) ^ ((9 * (v4 ^ (v4 >> 8))) >> 15);
  *a3 = ((v5 + ~(v5 << 27)) >> 31) ^ (v5 + ~(v5 << 27));
  return result;
}

void static VersionSeed.invalid.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

BOOL VersionSeed.matches(_:)(int *a1)
{
  int v2 = *a1;
  return *v1 != -1 && v2 != -1 && *v1 == v2;
}

BOOL VersionSeed.isEmpty.getter()
{
  return *v0 == 0;
}

uint64_t VersionSeed.init(value:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL VersionSeed.isInvalid.getter()
{
  return *v0 == -1;
}

Swift::Void __swiftcall VersionSeed.mergeValue(_:)(Swift::UInt32 a1)
{
  uint64_t v2 = *v1;
  if (v2 != -1)
  {
    if (v2)
    {
      unint64_t v3 = (~((unint64_t)a1 << 32) + a1 + (v2 << 32)) ^ ((~((unint64_t)a1 << 32) + a1 + (v2 << 32)) >> 22);
      unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
      unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
      a1 = (v5 >> 31) ^ v5;
    }
    Swift::UInt32 *v1 = a1;
  }
}

uint64_t VersionSeed.description.getter()
{
  if (!*v0) {
    return 0x7974706D65;
  }
  if (*v0 == -1) {
    return 0x64696C61766E69;
  }
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance VersionSeed()
{
  if (*v0 == -1) {
    return 0x64696C61766E69;
  }
  if (*v0) {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
  return 0x7974706D65;
}

BOOL static InterfaceIdiomKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void InterfaceIdiomKind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int InterfaceIdiomKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static InterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(a3, a3, a5, a2, a4);
}

void static CarPlayInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ClarityUIInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ComplicationInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ComplicationInterfaceIdiom.accepts<A>(_:)(ValueMetadata *a1)
{
  return a1 == &type metadata for WidgetInterfaceIdiom || a1 == &type metadata for ComplicationInterfaceIdiom;
}

void static WidgetInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static MacInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static MacCatalystInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

BOOL static MacCatalystInterfaceIdiom.accepts<A>(_:)(ValueMetadata *a1)
{
  return a1 == &type metadata for PadInterfaceIdiom || a1 == &type metadata for MacCatalystInterfaceIdiom;
}

void static PhoneInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static PadInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void static TVInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void static TouchBarInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static WatchInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

void static VisionInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

void static NoKitInterfaceIdiom.hashValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

void protocol witness for static InterfaceIdiom.hashValue.getter in conformance NoKitInterfaceIdiom(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

uint64_t AnyInterfaceIdiom.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 8) + 24))();
}

uint64_t AnyInterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 16))(a2) & 1;
}

Swift::Int AnyInterfaceIdiom.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 24))(v4, v1, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnyInterfaceIdiom()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 24))(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyInterfaceIdiom()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 8) + 24))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnyInterfaceIdiom()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)(v0 + 8) + 24))(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomKind and conformance InterfaceIdiomKind()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomKind and conformance InterfaceIdiomKind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom;
  if (!lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyInterfaceIdiom and conformance AnyInterfaceIdiom);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyInterfaceIdiom(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 8) + 8))(*a2, a2[1]) & 1;
}

uint64_t dispatch thunk of static InterfaceIdiom.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static InterfaceIdiom.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t getEnumTagSinglePayload for InterfaceIdiomKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InterfaceIdiomKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460AC118);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InterfaceIdiomKind()
{
  return &type metadata for InterfaceIdiomKind;
}

ValueMetadata *type metadata accessor for MacCatalystInterfaceIdiom()
{
  return &type metadata for MacCatalystInterfaceIdiom;
}

ValueMetadata *type metadata accessor for PhoneInterfaceIdiom()
{
  return &type metadata for PhoneInterfaceIdiom;
}

ValueMetadata *type metadata accessor for TVInterfaceIdiom()
{
  return &type metadata for TVInterfaceIdiom;
}

ValueMetadata *type metadata accessor for TouchBarInterfaceIdiom()
{
  return &type metadata for TouchBarInterfaceIdiom;
}

ValueMetadata *type metadata accessor for WatchInterfaceIdiom()
{
  return &type metadata for WatchInterfaceIdiom;
}

ValueMetadata *type metadata accessor for NoKitInterfaceIdiom()
{
  return &type metadata for NoKitInterfaceIdiom;
}

void static InterfaceIdiomBox.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v3, a2, a3);
  Hasher._combine(_:)(v3);
}

void protocol witness for static AnyInterfaceIdiomBox.hash(into:) in conformance InterfaceIdiomBox<A>(uint64_t a1, uint64_t a2)
{
}

uint64_t base witness table accessor for Equatable in InterfaceIdiomBox<A>()
{
  return swift_getWitnessTable();
}

uint64_t (*OffsetShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double OffsetShape.offset.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t OffsetShape.offset.setter(uint64_t result, double a2, double a3)
{
  unsigned int v4 = (double *)(v3 + *(int *)(result + 36));
  *unsigned int v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*OffsetShape.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t OffsetShape.init(shape:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for OffsetShape();
  size_t v9 = (double *)(a3 + *(int *)(result + 36));
  *size_t v9 = a4;
  v9[1] = a5;
  return result;
}

uint64_t OffsetShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  return OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized OffsetShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
}

void (*OffsetShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  int v14 = malloc(v13);
  v5[9] = v14;
  OffsetShape.animatableData.getter(a2, (uint64_t)v14);
  return OffsetShape.animatableData.modify;
}

void OffsetShape.animatableData.modify(uint64_t a1, char a2)
{
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized OffsetShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>, (unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
}

void (*protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  int v14 = malloc(v13);
  v5[9] = v14;
  OffsetShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(uint64_t a1, char a2)
{
}

uint64_t OffsetShape<>.inset(by:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v17 - v10;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(v7, a2, a3);
  uint64_t v12 = (double *)(v3 + *(int *)(a1 + 36));
  double v13 = *v12;
  double v14 = v12[1];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Shape.offset(x:y:)(AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8), v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for InsettableShape.inset(by:) in conformance <> OffsetShape<A>(uint64_t a1, uint64_t a2, double a3)
{
  return OffsetShape<>.inset(by:)(a1, *(void *)(a2 - 8), a3);
}

uint64_t (*ScaledShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*ScaledShape.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScaledShape.anchor.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 40));
}

uint64_t ScaledShape.anchor.setter(uint64_t result, double a2, double a3)
{
  unsigned int v4 = (double *)(v3 + *(int *)(result + 40));
  *unsigned int v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*ScaledShape.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScaledShape.init(shape:scale:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for ScaledShape();
  double v13 = (double *)(a3 + *(int *)(result + 36));
  *double v13 = a4;
  v13[1] = a5;
  double v14 = (double *)(a3 + *(int *)(result + 40));
  double *v14 = a6;
  v14[1] = a7;
  return result;
}

CGFloat ScaledShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double v13 = (double *)(v6 + *(int *)(a1 + 40));
  CGFloat v14 = *v13 * a5 + a3;
  CGFloat v15 = v13[1] * a6 + a4;
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  long long v28 = *(_OWORD *)&t1.c;
  long long v30 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeScale(&t1, *(CGFloat *)(v6 + *(int *)(a1 + 36)), *(CGFloat *)(v6 + *(int *)(a1 + 36) + 8));
  long long v18 = *(_OWORD *)&t1.a;
  long long v19 = *(_OWORD *)&t1.c;
  long long v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v30;
  *(_OWORD *)&t1.CC_SHA1_CTX c = v28;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.a = v18;
  *(_OWORD *)&t2.CC_SHA1_CTX c = v19;
  *(_OWORD *)&t2.CGFloat tx = v20;
  CGAffineTransformConcat(&v32, &t1, &t2);
  long long v29 = *(_OWORD *)&v32.c;
  long long v31 = *(_OWORD *)&v32.a;
  CGFloat v21 = v32.tx;
  CGFloat v22 = v32.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  long long v23 = *(_OWORD *)&t1.a;
  long long v24 = *(_OWORD *)&t1.c;
  long long v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v31;
  *(_OWORD *)&t1.CC_SHA1_CTX c = v29;
  t1.CGFloat tx = v21;
  t1.CGFloat ty = v22;
  *(_OWORD *)&t2.a = v23;
  *(_OWORD *)&t2.CC_SHA1_CTX c = v24;
  *(_OWORD *)&t2.CGFloat tx = v25;
  CGAffineTransformConcat(&v32, &t1, &t2);
  CGAffineTransform t1 = v32;
  (*(void (**)(CGAffineTransform *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 24)
                                                                                                  + 24))(&v32, *(void *)(a1 + 16), a3, a4, a5, a6);
  Path.applying(_:)(&t1.a, (uint64_t)&t2);
  outlined release of Path((uint64_t)&v32);
  CGFloat result = t2.a;
  long long v27 = *(_OWORD *)&t2.c;
  *(_OWORD *)a2 = *(_OWORD *)&t2.a;
  *(_OWORD *)(a2 + 16) = v27;
  *(unsigned char *)(a2 + 32) = LOBYTE(t2.tx);
  return result;
}

uint64_t ScaledShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  float64x2_t v11 = vmulq_f64(*(float64x2_t *)(v2 + *(int *)(a1 + 40)), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v15[0] = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  v15[1] = v11;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v13 = v12;
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)v15, AssociatedTypeWitness, v13, a2);
}

uint64_t ScaledShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  return OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized ScaledShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t OffsetShape.animatableData.setter(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(uint64_t), unint64_t *a5, void (*a6)(uint64_t))
{
  a3();
  swift_getAssociatedTypeWitness();
  a4(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(a5, a6);
  uint64_t v10 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
}

void (*ScaledShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  CGFloat v14 = malloc(v13);
  v5[9] = v14;
  ScaledShape.animatableData.getter(a2, (uint64_t)v14);
  return ScaledShape.animatableData.modify;
}

void ScaledShape.animatableData.modify(uint64_t a1, char a2)
{
}

double protocol witness for Shape.path(in:) in conformance ScaledShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  ScaledShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance ScaledShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized ScaledShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t), unint64_t *a6, void (*a7)(uint64_t))
{
  a4();
  swift_getAssociatedTypeWitness();
  a5(255);
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(a6, a7);
  uint64_t v11 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
}

void (*protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  CGFloat v14 = malloc(v13);
  v5[9] = v14;
  ScaledShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance ScaledShape<A>(uint64_t a1, char a2)
{
}

uint64_t (*RotatedShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RotatedShape.angle.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t RotatedShape.angle.setter(uint64_t result, double a2)
{
  *(double *)(v2 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t (*RotatedShape.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RotatedShape.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t RotatedShape.init(shape:angle:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for RotatedShape();
  *(double *)(a3 + *(int *)(result + 36)) = a4;
  uint64_t v11 = (double *)(a3 + *(int *)(result + 40));
  *uint64_t v11 = a5;
  v11[1] = a6;
  return result;
}

uint64_t RotatedShape.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v13 = (double *)(v6 + *(int *)(a1 + 40));
  CGFloat v14 = *v13 * a5 + a3;
  CGFloat v15 = v13[1] * a6 + a4;
  CGAffineTransformMakeTranslation(&t1, -v14, -v15);
  long long v26 = *(_OWORD *)&t1.c;
  long long v28 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  __double2 v18 = __sincos_stret(*(double *)(v6 + *(int *)(a1 + 36)));
  *(_OWORD *)&t1.a = v28;
  *(_OWORD *)&t1.CC_SHA1_CTX c = v26;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  t2.a = v18.__cosval;
  t2.b = v18.__sinval;
  t2.CC_SHA1_CTX c = -v18.__sinval;
  t2.d = v18.__cosval;
  t2.CGFloat tx = 0.0;
  t2.CGFloat ty = 0.0;
  CGAffineTransformConcat(&v31, &t1, &t2);
  long long v27 = *(_OWORD *)&v31.c;
  long long v29 = *(_OWORD *)&v31.a;
  CGFloat v19 = v31.tx;
  CGFloat v20 = v31.ty;
  CGAffineTransformMakeTranslation(&t1, v14, v15);
  long long v21 = *(_OWORD *)&t1.a;
  long long v22 = *(_OWORD *)&t1.c;
  long long v23 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v29;
  *(_OWORD *)&t1.CC_SHA1_CTX c = v27;
  t1.CGFloat tx = v19;
  t1.CGFloat ty = v20;
  *(_OWORD *)&t2.a = v21;
  *(_OWORD *)&t2.CC_SHA1_CTX c = v22;
  *(_OWORD *)&t2.CGFloat tx = v23;
  CGAffineTransformConcat(&v31, &t1, &t2);
  CGAffineTransform t1 = v31;
  (*(void (**)(CGAffineTransform *__return_ptr, void, double, double, double, double))(*(void *)(a1 + 24)
                                                                                                  + 24))(&v31, *(void *)(a1 + 16), a3, a4, a5, a6);
  Path.applying(_:)(&t1.a, (uint64_t)&t2);
  uint64_t result = outlined release of Path((uint64_t)&v31);
  long long v25 = *(_OWORD *)&t2.c;
  *(_OWORD *)a2 = *(_OWORD *)&t2.a;
  *(_OWORD *)(a2 + 16) = v25;
  *(unsigned char *)(a2 + 32) = LOBYTE(t2.tx);
  return result;
}

uint64_t RotatedShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  uint64_t v11 = *(int *)(a1 + 40);
  double v16 = *(double *)(v2 + *(int *)(a1 + 36)) * 128.0;
  float64x2_t v17 = vmulq_f64(*(float64x2_t *)(v2 + v11), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v13 = v12;
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)&v16, AssociatedTypeWitness, v13, a2);
}

uint64_t RotatedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  return OffsetShape.animatableData.setter(a1, a2, (void (*)(void))specialized RotatedShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

void (*RotatedShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  CGFloat v14 = malloc(v13);
  v5[9] = v14;
  RotatedShape.animatableData.getter(a2, (uint64_t)v14);
  return RotatedShape.animatableData.modify;
}

void RotatedShape.animatableData.modify(uint64_t a1, char a2)
{
}

void OffsetShape.animatableData.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t))
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 64);
  uint64_t v6 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void *)(*(void *)a1 + 48);
  uint64_t v8 = *(void *)(*(void *)a1 + 56);
  uint64_t v9 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 64), v6, v7);
    a3(v5, v9);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v7);
    v10(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 72), v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

double protocol witness for Shape.path(in:) in conformance RotatedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  RotatedShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance RotatedShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Animatable.animatableData.setter in conformance OffsetShape<A>(a1, a2, a3, (void (*)(void))specialized RotatedShape.animatableData.setter, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>, &lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

void (*protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  void v5[4] = v2;
  v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  unint64_t v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  CGFloat v14 = malloc(v13);
  v5[9] = v14;
  RotatedShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance RotatedShape<A>(uint64_t a1, char a2)
{
}

void protocol witness for Animatable.animatableData.modify in conformance OffsetShape<A>(uint64_t a1, char a2, void (*a3)(void *, uint64_t))
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)(*(void *)a1 + 64);
  uint64_t v6 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void *)(*(void *)a1 + 48);
  uint64_t v8 = *(void *)(*(void *)a1 + 56);
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v8 + 16))(*(void *)(*(void *)a1 + 64), v6, v7);
    a3(v5, v9);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v7);
    v10(v6, v7);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 72), v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);

  free(v4);
}

uint64_t RotatedShape<>.inset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v13 = (char *)&v19 - v12;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(v9, a2, a4);
  uint64_t v14 = *(int *)(a1 + 40);
  double v15 = *(double *)(v4 + *(int *)(a1 + 36));
  double v16 = *(double *)(v4 + v14);
  double v17 = *(double *)(v4 + v14 + 8);
  swift_getAssociatedConformanceWitness();
  Shape.rotation(_:anchor:)(AssociatedTypeWitness, a3, v15, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t Shape.rotation(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v11 = *(void *)(a1 - 8);
  double v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a1, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v14, a1);
  uint64_t result = type metadata accessor for RotatedShape();
  *(double *)(a2 + *(int *)(result + 36)) = a3;
  double v16 = (double *)(a2 + *(int *)(result + 40));
  *double v16 = a4;
  v16[1] = a5;
  return result;
}

uint64_t protocol witness for InsettableShape.inset(by:) in conformance <> RotatedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  return RotatedShape<>.inset(by:)(a1, *(void *)(a2 - 8), a3, a4);
}

uint64_t (*TransformedShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 TransformedShape.transform.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 36);
  long long v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(v3 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 TransformedShape.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + *(int *)(a2 + 36);
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v3 + 32) = result;
  return result;
}

uint64_t (*TransformedShape.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 TransformedShape.init(shape:transform:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for TransformedShape() + 36);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v6 + 32) = result;
  return result;
}

double TransformedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v9, *(void *)(a1 + 16));
  uint64_t v5 = (_OWORD *)(v2 + *(int *)(a1 + 36));
  long long v6 = v5[1];
  v12[0] = *v5;
  v12[1] = v6;
  _OWORD v12[2] = v5[2];
  Path.applying(_:)((double *)v12, (uint64_t)v10);
  outlined release of Path((uint64_t)v9);
  double result = *(double *)v10;
  long long v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v11;
  return result;
}

uint64_t TransformedShape.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8) + 24))(*(void *)(a1 + 16));
}

uint64_t TransformedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized TransformedShape.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*TransformedShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v7 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5[2] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  void v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return TransformedShape.animatableData.modify;
}

void TransformedShape.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  long long v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized TransformedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized TransformedShape.animatableData.setter((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

double protocol witness for Shape.path(in:) in conformance TransformedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  TransformedShape.path(in:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance TransformedShape<A>(uint64_t a1, uint64_t a2)
{
  specialized TransformedShape.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*protocol witness for Animatable.animatableData.modify in conformance TransformedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v5[2] = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  TransformedShape.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance TransformedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance TransformedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  long long v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    specialized TransformedShape.animatableData.setter((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized TransformedShape.animatableData.setter(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Shape.offset(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  double v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, a1);
  uint64_t result = type metadata accessor for OffsetShape();
  uint64_t v14 = (double *)(a2 + *(int *)(result + 36));
  double *v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t Shape.scale(x:y:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(a1 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  double v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a1, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v16, a1);
  uint64_t result = type metadata accessor for ScaledShape();
  __double2 v18 = (double *)(a2 + *(int *)(result + 36));
  *__double2 v18 = a3;
  v18[1] = a4;
  uint64_t v19 = (double *)(a2 + *(int *)(result + 40));
  *uint64_t v19 = a5;
  v19[1] = a6;
  return result;
}

uint64_t Shape.scale(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  return Shape.scale(x:y:anchor:)(a1, a2, a3, a3, a4, a5);
}

__n128 Shape.transform(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  double v8 = MEMORY[0x270FA5388](a1);
  double v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a2, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, a2);
  uint64_t v11 = a3 + *(int *)(type metadata accessor for TransformedShape() + 36);
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 16) = v12;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v11 + 32) = result;
  return result;
}

uint64_t specialized TransformedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

float64x2_t specialized RotatedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  *(double *)&uint64_t v7 = COERCE_DOUBLE(swift_getAssociatedTypeWitness());
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v17 - v9;
  type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
  float64_t v12 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
  double v17 = *(double *)&v7;
  v18.f64[0] = v12;
  *(void *)&v18.f64[1] = AssociatedConformanceWitness;
  uint64_t v19 = v14;
  uint64_t v15 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v17, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v17, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(double *)(v3 + *(int *)(a2 + 36)) = v17 * 0.0078125;
  float64x2_t result = vmulq_f64(v18, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v3 + *(int *)(a2 + 40)) = result;
  return result;
}

float64x2_t specialized ScaledShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v10 = (char *)&v18 - v9;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v12 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *(void *)&long long v18 = AssociatedTypeWitness;
  *((void *)&v18 + 1) = v12;
  *(void *)&v19.f64[0] = AssociatedConformanceWitness;
  *(void *)&v19.f64[1] = v14;
  uint64_t v15 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v18, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  AnimatablePair.subscript.getter((uint64_t)v10, (uint64_t)&v18, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  float64x2_t v16 = v19;
  *(_OWORD *)(v3 + *(int *)(a2 + 36)) = v18;
  float64x2_t result = vmulq_f64(v16, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v3 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t specialized OffsetShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v18 - v7;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v10 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
  uint64_t v18 = AssociatedTypeWitness;
  uint64_t v19 = v10;
  uint64_t v20 = AssociatedConformanceWitness;
  uint64_t v21 = v12;
  uint64_t v13 = type metadata accessor for AnimatablePair();
  AnimatablePair.subscript.getter((uint64_t)v8, (uint64_t)&v18, v13);
  uint64_t v14 = v18;
  uint64_t v15 = v19;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v4, v5);
  double v17 = (uint64_t *)(v2 + *(int *)(a2 + 36));
  uint64_t *v17 = v14;
  v17[1] = v15;
  return result;
}

uint64_t type metadata accessor for RotatedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TransformedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>()
{
  return associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>();
}

{
  swift_getAssociatedConformanceWitness();
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for <> OffsetShape<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for RotatedShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> RotatedShape<A>()
{
  return associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in <> OffsetShape<A>();
}

uint64_t instantiation function for generic protocol witness table for <> RotatedShape<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TransformedShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t sub_2460AF13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for OffsetShape, (uint64_t (*)(uint64_t))OffsetShape.animatableData.getter);
}

uint64_t sub_2460AF168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for OffsetShape, specialized OffsetShape.animatableData.setter);
}

uint64_t sub_2460AF194()
{
  return 16;
}

__n128 sub_2460AF1A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460AF1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for ScaledShape, (uint64_t (*)(uint64_t))ScaledShape.animatableData.getter);
}

uint64_t sub_2460AF1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for ScaledShape, (uint64_t (*)(uint64_t, uint64_t))specialized ScaledShape.animatableData.setter);
}

uint64_t sub_2460AF204()
{
  return 16;
}

__n128 sub_2460AF210(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460AF21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for RotatedShape, (uint64_t (*)(uint64_t))RotatedShape.animatableData.getter);
}

uint64_t sub_2460AF248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for RotatedShape, (uint64_t (*)(uint64_t, uint64_t))specialized RotatedShape.animatableData.setter);
}

uint64_t sub_2460AF274()
{
  return 16;
}

__n128 sub_2460AF280(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460AF28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for TransformedShape, TransformedShape.animatableData.getter);
}

uint64_t keypath_getTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t sub_2460AF308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for TransformedShape, specialized TransformedShape.animatableData.setter);
}

uint64_t sub_2460AF334()
{
  return 16;
}

__n128 sub_2460AF340(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for OffsetShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460AF460);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for OffsetShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            float64x2_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460AF620);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ScaledShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460AF764);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ScaledShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            float64x2_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460AF92CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for RotatedShape()
{
  return type metadata completion function for ScaledShape();
}

uint64_t *initializeBufferWithCopyOfBuffer for RotatedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t initializeWithTake for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for RotatedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for RotatedShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460AFDD0);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for RotatedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            float64x2_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460AFF98);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for TransformedShape()
{
  return type metadata completion function for _OverlayModifier();
}

uint64_t *initializeBufferWithCopyOfBuffer for TransformedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v12 = v10[1];
    long long v11 = v10[2];
    int v13 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v13 = *v10;
    v13[1] = v12;
    void v13[2] = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  *int v7 = *v8;
  v7[1] = v10;
  long long v7[2] = v9;
  return a1;
}

uint64_t assignWithCopy for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  long long v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  _OWORD v7[5] = v8[5];
  return a1;
}

uint64_t assignWithTake for TransformedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  long long v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  _OWORD v7[5] = v8[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformedShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460B03ACLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TransformedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            float64x2_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460B056CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t _ColorMultiplyEffect.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*_ColorMultiplyEffect.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ColorMultiplyEffect.resolve(in:)(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *a1;
  *(float *)a3 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v7);
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
}

uint64_t static _ColorMultiplyEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ColorMultiplyEffect._requiresMainThread.getter()
{
  return 0;
}

float _ColorMultiplyEffect._Resolved.animatableData.getter()
{
  float v1 = *(float *)v0;
  float v2 = *(float *)(v0 + 4);
  unsigned __int32 v3 = *(_DWORD *)(v0 + 8);
  float v4 = *(float *)(v0 + 12);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v5.i32 = v1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v8, v5, v2, v3, v4, v6);
    float v1 = v8;
  }
  return v1 * 128.0;
}

void _ColorMultiplyEffect._Resolved.animatableData.setter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  float v9 = a1 * 0.0078125;
  float v10 = a2 * 0.0078125;
  float v11 = a3 * 0.0078125;
  float v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    char v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    void v16[2] = v11;
    v16[3] = v12;
    float v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    float v10 = v13;
    float v11 = v14;
    float v12 = v15;
  }
  *float v4 = v9;
  v4[1] = v10;
  _OWORD v4[2] = v11;
  v4[3] = v12;
}

void (*_ColorMultiplyEffect._Resolved.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  unsigned __int32 v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  int8x16_t v8 = *v1;
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, v8, *(float *)&v8.i32[1], v8.u32[2], *(float *)&v8.i32[3], v4);
    float32x4_t v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  _OWORD v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

double _ColorMultiplyEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  double result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_DWORD *)(v5 + 128) = 0;
  *(unsigned char *)(v5 + 132) = 5;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_2460B09A4()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMultiplyEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  double result = 0.0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_DWORD *)(v5 + 128) = 0;
  *(unsigned char *)(v5 + 132) = 5;
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance _ColorMultiplyEffect._Resolved(uint64_t a1@<X8>)
{
  *(float *)a1 = _ColorMultiplyEffect._Resolved.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void protocol witness for Animatable.animatableData.setter in conformance _ColorMultiplyEffect._Resolved(float *a1)
{
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ColorMultiplyEffect._Resolved(float32x4_t ***a1))(void *a1)
{
  int v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)_ColorMultiplyEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t static _ColorMultiplyEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1;
  }
}

uint64_t View.colorMultiply(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for _ColorMultiplyEffect);
}

unint64_t instantiation function for generic protocol witness table for _ColorMultiplyEffect._Resolved(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ColorMultiplyEffect()
{
  return &protocol witness table for _ColorMultiplyEffect._Resolved;
}

void sub_2460B0BD4(uint64_t a1@<X8>)
{
  *(float *)a1 = _ColorMultiplyEffect._Resolved.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_2460B0C14(float *a1)
{
}

ValueMetadata *type metadata accessor for _ColorMultiplyEffect()
{
  return &type metadata for _ColorMultiplyEffect;
}

ValueMetadata *type metadata accessor for _ColorMultiplyEffect._Resolved()
{
  return &type metadata for _ColorMultiplyEffect._Resolved;
}

uint64_t sub_2460B0C60()
{
  return swift_getWitnessTable();
}

uint64_t Canvas.symbols.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Canvas.symbols.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*Canvas.symbols.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for Canvas.renderer : <A>Canvas<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1, double *a2)@<X8>)
{
  int v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Canvas() + 36));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @unowned CGSize) -> ();
  a2[1] = (uint64_t (*)(uint64_t, double *))v6;

  return swift_retain();
}

uint64_t key path setter for Canvas.renderer : <A>Canvas<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = (uint64_t (**)(uint64_t, double, double))(a2 + *(int *)(type metadata accessor for Canvas() + 36));
  swift_retain();
  uint64_t result = swift_release();
  *uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @in_guaranteed CGSize) -> (@out ());
  v6[1] = (uint64_t (*)(uint64_t, double, double))v5;
  return result;
}

uint64_t Canvas.renderer.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_retain();
  return v2;
}

uint64_t Canvas.renderer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*Canvas.renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Canvas.preservesMetadata.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t (*Canvas.preservesMetadata.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Canvas.isOpaque.getter(uint64_t a1)
{
  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 1) & 1;
}

uint64_t Canvas.isOpaque.setter(uint64_t result, uint64_t a2)
{
  if (result) {
    int v3 = 2;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFD | v3;
  return result;
}

uint64_t (*Canvas.isOpaque.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = (*(unsigned char *)(v2 + *(int *)(a2 + 40) + 12) & 2) != 0;
  return Canvas.isOpaque.modify;
}

uint64_t Canvas.isOpaque.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    int v2 = 2;
  }
  else {
    int v2 = 0;
  }
  uint64_t v1 = *(void *)(result + 8) + *(int *)(*(void *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFD | v2;
  return result;
}

uint64_t Canvas.colorMode.getter@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(v2 + *(int *)(result + 40));
  return result;
}

unsigned char *Canvas.colorMode.setter(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = *result;
  return result;
}

uint64_t (*Canvas.colorMode.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v2 + *(int *)(a2 + 40));
  return Canvas.colorMode.modify;
}

uint64_t Canvas.colorMode.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + *(int *)(*(void *)result + 40)) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t Canvas.rendersAsynchronously.getter(uint64_t a1)
{
  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 2) & 1;
}

uint64_t Canvas.rendersAsynchronously.setter(uint64_t result, uint64_t a2)
{
  if (result) {
    int v3 = 4;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFFB | v3;
  return result;
}

uint64_t (*Canvas.rendersAsynchronously.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = (*(unsigned char *)(v2 + *(int *)(a2 + 40) + 12) & 4) != 0;
  return Canvas.rendersAsynchronously.modify;
}

uint64_t Canvas.rendersAsynchronously.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  uint64_t v1 = *(void *)(result + 8) + *(int *)(*(void *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.getter(uint64_t a1)
{
  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 4) & 1;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.setter(uint64_t result, uint64_t a2)
{
  if (result) {
    int v3 = 16;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFEF | v3;
  return result;
}

uint64_t (*Canvas.rendersFirstFrameAsynchronously.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = (*(unsigned char *)(v2 + *(int *)(a2 + 40) + 12) & 0x10) != 0;
  return Canvas.rendersFirstFrameAsynchronously.modify;
}

uint64_t Canvas.rendersFirstFrameAsynchronously.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  uint64_t v1 = *(void *)(result + 8) + *(int *)(*(void *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFEF | v2;
  return result;
}

uint64_t Canvas.isAccelerated.getter(uint64_t a1)
{
  return *(_DWORD *)(v1 + *(int *)(a1 + 40) + 12) & 1;
}

uint64_t (*Canvas.isAccelerated.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v2 + *(int *)(a2 + 40) + 12) & 1;
  return Canvas.isAccelerated.modify;
}

uint64_t Canvas.isAccelerated.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8) + *(int *)(*(void *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFE | *(unsigned __int8 *)(result + 16);
  return result;
}

uint64_t Canvas.allowsPackedDrawable.getter(uint64_t a1)
{
  return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 40) + 12) >> 5) & 1;
}

uint64_t Canvas.allowsPackedDrawable.setter(uint64_t result, uint64_t a2)
{
  if (result) {
    int v3 = 32;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) = *(_DWORD *)(v2 + *(int *)(a2 + 40) + 12) & 0xFFFFFFDF | v3;
  return result;
}

uint64_t (*Canvas.allowsPackedDrawable.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = (*(unsigned char *)(v2 + *(int *)(a2 + 40) + 12) & 0x20) != 0;
  return Canvas.allowsPackedDrawable.modify;
}

uint64_t Canvas.allowsPackedDrawable.modify(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    int v2 = 32;
  }
  else {
    int v2 = 0;
  }
  uint64_t v1 = *(void *)(result + 8) + *(int *)(*(void *)result + 40);
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFDF | v2;
  return result;
}

uint64_t SymbolRenderer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

double *protocol witness for Rule.value.getter in conformance CanvasSymbols.SymbolSize@<X0>(double *a1@<X8>)
{
  return CanvasSymbols.SymbolSize.value.getter(*v1, a1);
}

uint64_t sub_2460B12E8()
{
  return 16;
}

__n128 sub_2460B12F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B1300@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_8Tm(Canvas.isOpaque.getter, a1);
}

uint64_t sub_2460B1318(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm_0(a1, a2, a3, a4, Canvas.isOpaque.setter);
}

uint64_t sub_2460B1330()
{
  return 16;
}

__n128 sub_2460B133C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B1348@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Canvas();
  uint64_t result = Canvas.colorMode.getter(v2, &v4);
  *a1 = v4;
  return result;
}

unsigned char *sub_2460B1394(char *a1)
{
  char v3 = *a1;
  uint64_t v1 = type metadata accessor for Canvas();
  return Canvas.colorMode.setter(&v3, v1);
}

uint64_t sub_2460B13E0()
{
  return 16;
}

__n128 sub_2460B13EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B13F8@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_8Tm(Canvas.rendersAsynchronously.getter, a1);
}

uint64_t sub_2460B1410(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm_0(a1, a2, a3, a4, Canvas.rendersAsynchronously.setter);
}

uint64_t sub_2460B1428()
{
  return 16;
}

__n128 sub_2460B1434(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B1440@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_8Tm(Canvas.rendersFirstFrameAsynchronously.getter, a1);
}

uint64_t sub_2460B1458(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm_0(a1, a2, a3, a4, Canvas.rendersFirstFrameAsynchronously.setter);
}

uint64_t sub_2460B1470()
{
  return 16;
}

__n128 sub_2460B147C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B1488@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_8Tm(Canvas.isAccelerated.getter, a1);
}

uint64_t sub_2460B14A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm_0(a1, a2, a3, a4, Canvas.isAccelerated.setter);
}

uint64_t sub_2460B14B8()
{
  return 16;
}

__n128 sub_2460B14C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460B14D0@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_8Tm(Canvas.allowsPackedDrawable.getter, a1);
}

uint64_t keypath_get_8Tm@<X0>(uint64_t (*a1)(uint64_t)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Canvas();
  uint64_t result = a1(v4);
  *a2 = result & 1;
  return result;
}

uint64_t sub_2460B1538(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_9Tm_0(a1, a2, a3, a4, Canvas.allowsPackedDrawable.setter);
}

uint64_t keypath_set_9Tm_0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = type metadata accessor for Canvas();
  return a5(v6, v7);
}

uint64_t sub_2460B15A0()
{
  return 16;
}

__n128 sub_2460B15AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Canvas(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    float v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    float v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *float v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFFFF8;
    char v15 = *(unsigned char *)(v14 + 16);
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    *(unsigned char *)(v13 + 16) = v15;
    *(unsigned char *)(v13 + 17) = *(unsigned char *)(v14 + 17);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = v6 + a1;
  int8x16_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 17) = *(unsigned char *)(v10 + 17);
  return a1;
}

uint64_t assignWithTake for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 19;
  *unint64_t v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)(v9 & 0xFFFFFFFFFFFFFFF8);
  int v11 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(unsigned char *)(v10 + 8) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_DWORD *)(v10 + 4) = v11;
  *(_DWORD *)(v10 + 12) = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 12);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v10 + 17) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Canvas(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460B19ACLL);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Canvas(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v20 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v21 = a2 ^ 0x80000000;
                v20[1] = 0;
              }
              else
              {
                uint64_t v21 = a2 - 1;
              }
              *uint64_t v20 = v21;
            }
            else
            {
              uint64_t v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x2460B1BD4);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for SymbolRenderer.CachedResolvedSymbol(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SymbolRenderer.CachedResolvedSymbol(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for SymbolRenderer.CachedResolvedSymbol(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SymbolRenderer.CachedResolvedSymbol()
{
  return &type metadata for SymbolRenderer.CachedResolvedSymbol;
}

uint64_t assignWithCopy for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for CanvasDisplayList(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasDisplayList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasDisplayList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for CanvasSymbols(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  long long v4 = *(void **)(a2 + 96);
  unsigned int v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  id v6 = v4;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for CanvasSymbols(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasSymbols(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 116)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasSymbols(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 116) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 116) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for CanvasSymbols()
{
  return &unk_26FA48540;
}

uint64_t initializeWithCopy for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  id v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CanvasSymbols.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CanvasSymbols.Child()
{
  return &type metadata for CanvasSymbols.Child;
}

unint64_t instantiation function for generic protocol witness table for CanvasSymbols(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CanvasSymbols and conformance CanvasSymbols();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2460B22B8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_2460B22F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @in_guaranteed CGSize) -> (@out ())(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, void *))(v3 + 16);
  *(double *)id v6 = a2;
  *(double *)&v6[1] = a3;
  return v4(a1, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout GraphicsContext, @unowned CGSize) -> ()(uint64_t a1, double *a2)
{
  return (*(uint64_t (**)(double, double))(v2 + 16))(*a2, a2[1]);
}

void *type metadata accessor for CanvasSymbols.SymbolSize()
{
  return &unk_26FA48418;
}

unint64_t instantiation function for generic protocol witness table for CanvasSymbols.SymbolSize(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Animatable.makeAnimatable(value:inputs:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (void (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (void (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

{
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<SummarySymbol>();
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>, (void (*)(uint64_t))type metadata accessor for AnimatableAttribute<SummarySymbol>);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned char v9[80];
  _DWORD v10[6];
  long long v11;
  long long v12;
  long long v13;
  int v14;
  uint64_t v15;

  int v15 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    id v5 = *(_DWORD *)(a2 + 24);
    id v6 = *(_DWORD *)(a2 + 28);
    swift_beginAccess();
    unsigned int v7 = *(_DWORD *)(v4 + 16);
    v10[0] = a1;
    v10[1] = v7;
    char v11 = 0u;
    unsigned int v12 = 0u;
    unsigned int v13 = 0u;
    _OWORD v10[2] = v5;
    v10[3] = v3;
    int v14 = 0;
    v10[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v10, (uint64_t)v9);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (void (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (void (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape);
    a1 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v9);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10);
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return a1;
}

void ColorView.init(_:)(float *a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

float ColorView.color.getter()
{
  return *(float *)v0;
}

void ColorView.color.setter(float a1, float a2, float a3, float a4)
{
  *uint64_t v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ColorView.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ColorView._makeView(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v10 = v5;
  long long v11 = *(_OWORD *)(a2 + 64);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  v13[1] = v6;
  void v13[2] = v9;
  v13[0] = v8[0];
  if ((BYTE4(v9) & 1) == 0)
  {
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)v13);
    type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (void (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (void (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView);
    uint64_t v4 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)v13);
  }
  return specialized static RendererLeafView.makeLeafView(view:inputs:)(v4, (uint64_t)v8, a3);
}

void *ColorView.descriptionAttributes.getter()
{
  float v2 = *v0;
  float v1 = v0[1];
  float v3 = v0[2];
  if (*v0 == 0.0 && v1 == 0.0 && v3 == 0.0 && v0[3] == 0.0) {
    return (void *)MEMORY[0x263F8EE78];
  }
  float v5 = -v2;
  if (v2 > 0.0) {
    float v5 = *v0;
  }
  if (v5 > 0.0031308 && v5 != 1.0) {
    powf(v5, 0.41667);
  }
  float v6 = -v1;
  if (v1 > 0.0) {
    float v6 = v1;
  }
  if (v6 > 0.0031308 && v6 != 1.0) {
    powf(v6, 0.41667);
  }
  float v7 = -v3;
  if (v3 > 0.0) {
    float v7 = v3;
  }
  if (v7 > 0.0031308 && v7 != 1.0) {
    powf(v7, 0.41667);
  }
  type metadata accessor for (Float, Float, Float, Float)();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v9 = v4[2];
  unint64_t v8 = v4[3];
  if (v9 >= v8 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v4);
  }
  _OWORD v4[2] = v9 + 1;
  long long v10 = &v4[4 * v9];
  v10[4] = 0x726F6C6F63;
  v10[5] = 0xE500000000000000;
  v10[6] = 0;
  v10[7] = 0xE000000000000000;
  return v4;
}

uint64_t ColorView.contains(points:size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v6 = 0;
  BOOL v7 = *(float *)(v5 + 12) <= 0.0 || result == 0;
  if (!v7 && a2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = (double *)(result + 8);
    for (uint64_t i = 16 * a2; i; i -= 16)
    {
      double v12 = *(v9 - 1);
      if (v12 >= 0.0 && ((double v13 = *v9, *v9 >= 0.0) ? (v14 = v12 < a4) : (v14 = 0), v14))
      {
        if (v8 < 0x40)
        {
          uint64_t v15 = 1 << v8;
          uint64_t v11 = 1 << v8;
          if (v13 < a5)
          {
LABEL_22:
            v6 |= v15;
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v11 = 0;
          if (v13 < a5) {
            goto LABEL_22;
          }
        }
      }
      else if (v8 >= 0x40)
      {
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 1 << v8;
      }
      v6 &= ~v11;
LABEL_11:
      v9 += 2;
      ++v8;
    }
  }
  *a3 = v6;
  return result;
}

__n128 ColorView.content()@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_allocObject();
  __n128 result = *v1;
  *(__n128 *)(v3 + 16) = *v1;
  *a1 = v3 | 0x1000000000000000;
  return result;
}

float ColorView.animatableData.getter()
{
  float v1 = *(float *)v0;
  float v2 = *(float *)(v0 + 4);
  unsigned __int32 v3 = *(_DWORD *)(v0 + 8);
  float v4 = *(float *)(v0 + 12);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    *(float *)v5.i32 = v1;
    ResolvedGradient.ColorSpace.convertIn(_:)(&v8, v5, v2, v3, v4, v6);
    float v1 = v8;
  }
  return v1 * 128.0;
}

void ColorView.animatableData.setter(float a1, float a2, float a3, float a4)
{
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  float v9 = a1 * 0.0078125;
  float v10 = a2 * 0.0078125;
  float v11 = a3 * 0.0078125;
  float v12 = a4 * 0.0078125;
  swift_beginAccess();
  if ((static Color.Resolved.legacyInterpolation & 1) == 0)
  {
    char v17 = 2;
    v16[0] = v9;
    v16[1] = v10;
    void v16[2] = v11;
    v16[3] = v12;
    float v9 = ResolvedGradient.ColorSpace.convertOut(_:)(v16);
    float v10 = v13;
    float v11 = v14;
    float v12 = v15;
  }
  *float v4 = v9;
  v4[1] = v10;
  _OWORD v4[2] = v11;
  v4[3] = v12;
}

void (*ColorView.animatableData.modify(float32x4_t **a1))(float32x4_t **a1, char a2)
{
  unsigned __int32 v3 = (float32x4_t *)malloc(0x30uLL);
  *a1 = v3;
  v3[1].i64[1] = (uint64_t)v1;
  int8x16_t v8 = *v1;
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, v8, *(float *)&v8.i32[1], v8.u32[2], *(float *)&v8.i32[3], v4);
    float32x4_t v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  _OWORD v3[2] = vmulq_f32(v5, v6);
  return Color.Resolved.animatableData.modify;
}

__n128 protocol witness for RendererLeafView.content() in conformance ColorView@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_allocObject();
  __n128 result = *v1;
  *(__n128 *)(v3 + 16) = *v1;
  *a1 = v3 | 0x1000000000000000;
  return result;
}

void protocol witness for Animatable.animatableData.getter in conformance ColorView(uint64_t a1@<X8>)
{
  *(float *)a1 = ColorView.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void protocol witness for Animatable.animatableData.setter in conformance ColorView(float *a1)
{
}

void (*protocol witness for Animatable.animatableData.modify in conformance ColorView(float32x4_t ***a1))(void *a1)
{
  int v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)ColorView.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ColorView@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = v5;
  long long v12 = *(_OWORD *)(a2 + 64);
  int v13 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v15[0] = v9[0];
  v15[1] = v6;
  _OWORD v15[2] = v10;
  v14[1] = v6;
  _OWORD v14[2] = v10;
  v14[0] = v9[0];
  outlined retain of _GraphInputs((uint64_t)v15);
  uint64_t v7 = specialized static Animatable.makeAnimatable(value:inputs:)(v4, (uint64_t)v14);
  outlined release of _GraphInputs((uint64_t)v15);
  return specialized static RendererLeafView.makeLeafView(view:inputs:)(v7, (uint64_t)v9, a3);
}

void type metadata accessor for (Float, Float, Float, Float)()
{
  if (!lazy cache variable for type metadata for (Float, Float, Float, Float))
  {
    TupleTypeMetaint data = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (Float, Float, Float, Float));
    }
  }
}

uint64_t sub_2460B31F0()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ColorView()
{
  return lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_2460B3290(uint64_t a1@<X8>)
{
  *(float *)a1 = ColorView.animatableData.getter();
  *(_DWORD *)(a1 + 4) = v2;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_2460B32D0(float *a1)
{
}

ValueMetadata *type metadata accessor for ColorView()
{
  return &type metadata for ColorView;
}

void type metadata accessor for AnimatableAttribute<SummarySymbol>()
{
  if (!lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>)
  {
    unint64_t v0 = type metadata accessor for AnimatableAttribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>);
    }
  }
}

uint64_t outlined init with copy of AnimatableAttribute<AnyShape>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (void (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnimatableAttribute<ColorView>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AnimatableAttribute();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnimatableAttribute<ColorView>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of AnimatableAttribute<AnyShape>(uint64_t a1)
{
  type metadata accessor for AnimatableAttribute<ColorView>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (void (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Text.storedAccessibilityLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Text.storedAccessibilityLabel.getter(a4);
}

BOOL AccessibilityTextStorage.hasResolvableAttributes.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32))
  {
    outlined copy of AccessibilityText.Storage(*(void **)(v0 + 16), *(void *)(v0 + 24), 1);
    id v3 = v1;
  }
  else
  {
    id v4 = objc_allocWithZone(MEMORY[0x263F086A0]);
    outlined copy of AccessibilityText.Storage(v1, v2, 0);
    uint64_t v5 = (void *)MEMORY[0x24C522820](v1, v2);
    id v3 = objc_msgSend(v4, sel_initWithString_, v5);

    outlined consume of AccessibilityText.Storage(v1, v2, 0);
  }
  BOOL v6 = NSAttributedString.isDynamic.getter();

  return v6;
}

uint64_t AccessibilityText.init(_:environment:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, long long *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10 = a5[1];
  v16[0] = *a5;
  v16[1] = v10;
  long long v15 = *a6;
  char v11 = a3 & 1;
  uint64_t v12 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(a1, a2, a3 & 1, a4, v16, 1, 1, 0, 0, &v15);
  outlined consume of Text.Storage(a1, a2, v11);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v12) {
    __int16 v14 = 1;
  }
  else {
    __int16 v14 = 255;
  }
  *(void *)a7 = v12;
  *(void *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = v14;
  return result;
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v13;
    unint64_t v6 = v14;
    outlined copy of Data._Representation((uint64_t)v13, v14);
    ProtobufDecoder.init(_:)((uint64_t)v13, v14, &v13);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v15 = v7;
    ResolvedGradient.init(from:)((unint64_t)&v13, (uint64_t)&v11);
    outlined consume of Data._Representation((uint64_t)v5, v6);
    char v8 = v12;
    *(void *)a2 = v11;
    *(unsigned char *)(a2 + 8) = v8;
    float32x4_t v9 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

{
  uint64_t v2;
  objc_class *v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  objc_class *v10;
  long long v12;
  char v13;
  char v14;
  objc_class *v15;
  unint64_t v16;
  uint64_t v17;
  void v18[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v18, v18[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v15;
    unint64_t v6 = v16;
    outlined copy of Data._Representation((uint64_t)v15, v16);
    ProtobufDecoder.init(_:)((uint64_t)v15, v16, &v15);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    char v17 = v7;
    AccessibilityText.init(from:)((uint64_t)&v15, (id **)&v12);
    outlined consume of Data._Representation((uint64_t)v5, v6);
    char v8 = v13;
    float32x4_t v9 = v14;
    *(_OWORD *)a2 = v12;
    *(unsigned char *)(a2 + 16) = v8;
    *(unsigned char *)(a2 + 17) = v9;
    uint64_t v10 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v11;
    unint64_t v6 = v12;
    outlined copy of Data._Representation((uint64_t)v11, v12);
    ProtobufDecoder.init(_:)((uint64_t)v11, v12, &v11);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v7;
    ContentTransition.Style.init(from:)((unint64_t)&v11, &v10);
    outlined consume of Data._Representation((uint64_t)v5, v6);
    *a2 = v10;
    char v8 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v5 = v11;
    unint64_t v6 = v12;
    outlined copy of Data._Representation((uint64_t)v11, v12);
    ProtobufDecoder.init(_:)((uint64_t)v11, v12, &v11);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v7;
    CodableNSAttributes.init(from:)((id *)&v11, &v10);
    outlined consume of Data._Representation((uint64_t)v5, v6);
    *a2 = v10;
    char v8 = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t specialized CodableByProtobuf.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned char v8[24];
  uint64_t v9;
  uint64_t v10;

  uint64_t v10 = a2;
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  char v12 = a3;
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v9, v10);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v7, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(void *a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  __int16 v14 = a4 & 0x101;
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = v7;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v8, v9);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  return result;
}

uint64_t specialized CodableByProtobuf.encode(to:)(void *a1, char a2)
{
  char v10 = a2;
  uint64_t result = specialized static ProtobufEncoder.encoding(_:)((void (*)(void **))partial apply for specialized closure #1 in CodableByProtobuf.encode(to:));
  if (!v2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  return result;
}

uint64_t AccessibilityText.text.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 17);
  type metadata accessor for AccessibilityTextStorage();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *(unsigned char *)(v5 + 32) = v3;
  *(unsigned char *)(v5 + 33) = v4;
  outlined copy of AccessibilityText.Storage(v1, v2, v3);
  return v5;
}

uint64_t _ViewInputs.textAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    char v3 = (long long *)(v2 + 72);
  }
  else
  {
    char v3 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t AccessibilityText.init(texts:environment:optional:idiom:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a2[1];
  *(void *)&long long v12 = *a2;
  *((void *)&v12 + 1) = v7;
  long long v11 = *a4;
  uint64_t v8 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, &v12, 1, 1, 0, 0, &v11, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __int16 v10 = 257;
  }
  else {
    __int16 v10 = 1;
  }
  if (!v8) {
    __int16 v10 = 255;
  }
  *(void *)a5 = v8;
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = v10;
  return result;
}

uint64_t AccessibilityImageLabel.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v5 = a3 & 1;
  if (a4) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a4) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  *a5 = v6;
  a5[1] = v7;
  if (!a4) {
    uint64_t v5 = 0x1FFFFFFFELL;
  }
  a5[2] = v5;
  a5[3] = a4;
  return result;
}

uint64_t _GraphInputs.textAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    char v3 = (long long *)(v2 + 72);
  }
  else
  {
    char v3 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.textAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.textAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.textAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.textAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.textAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = (long long *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    uint64_t v7 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.textAccessibilityProvider.modify;
}

void _GraphInputs.textAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.TextAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t key path getter for _ViewInputs.textAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.textAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_ViewInputs.textAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = (long long *)(v5 + 72);
    uint64_t v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = &static _GraphInputs.TextAccessibilityProviderKey.defaultValue;
    uint64_t v7 = (uint64_t *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  void *v3 = v9;
  v3[1] = v8;
  return _GraphInputs.textAccessibilityProvider.modify;
}

id AccessibilityText.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of AccessibilityText.Storage(v2, v3, v4);
}

void AccessibilityText.storage.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  outlined consume of AccessibilityText.Storage(*(void **)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
}

uint64_t (*AccessibilityText.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityText.optional.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AccessibilityText.optional.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*AccessibilityText.optional.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityText.init(storage:optional:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u8[1] = a2;
  return result;
}

__n128 AccessibilityTextStorage.__allocating_init(_:)(__n128 *a1)
{
  uint64_t v2 = swift_allocObject();
  unsigned __int8 v3 = a1[1].n128_u8[0];
  unsigned __int8 v4 = a1[1].n128_u8[1];
  __n128 result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  *(unsigned char *)(v2 + 32) = v3;
  *(unsigned char *)(v2 + 33) = v4;
  return result;
}

id AccessibilityText.attributedString.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(unsigned char *)(v0 + 16))
  {
    return v1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 8);
    uint64_t v7 = *(void **)v0;
    id v4 = objc_allocWithZone(MEMORY[0x263F086A0]);
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)MEMORY[0x24C522820](v7, v3);
    outlined consume of AccessibilityText.Storage(v7, v3, 0);
    id v6 = objc_msgSend(v4, sel_initWithString_, v5);

    return v6;
  }
}

BOOL AccessibilityText.isEmpty.getter()
{
  unint64_t v1 = *(void *)v0;
  if (*(unsigned char *)(v0 + 16)) {
    return (uint64_t)objc_msgSend((id)v1, sel_length) < 1;
  }
  unint64_t v3 = *(void *)(v0 + 8);
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  return v4 == 0;
}

id AccessibilityTextStorage.base.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 32);
  char v6 = *(unsigned char *)(v1 + 33);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 17) = v6;
  return outlined copy of AccessibilityText.Storage(v3, v4, v5);
}

void AccessibilityTextStorage.base.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 17);
  swift_beginAccess();
  char v6 = *(void **)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  char v8 = *(unsigned char *)(v1 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  *(unsigned char *)(v1 + 33) = v5;
  outlined consume of AccessibilityText.Storage(v6, v7, v8);
}

uint64_t (*AccessibilityTextStorage.base.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t AccessibilityTextStorage.init(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(unsigned char *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 33) = v3;
  return v1;
}

void AccessibilityTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *a3;
  swift_beginAccess();
  long long v11 = *(void **)(v5 + 16);
  uint64_t v12 = *(void *)(v5 + 24);
  if (*(unsigned char *)(v5 + 32))
  {
    outlined copy of AccessibilityText.Storage(*(void **)(v5 + 16), *(void *)(v5 + 24), 1);
    id v13 = v11;
  }
  else
  {
    id v14 = objc_allocWithZone(MEMORY[0x263F086A0]);
    outlined copy of AccessibilityText.Storage(v11, v12, 0);
    uint64_t v15 = a4;
    uint64_t v16 = a5;
    char v17 = (void *)MEMORY[0x24C522820](v11, v12);
    id v13 = objc_msgSend(v14, sel_initWithString_, v17);

    a5 = v16;
    a4 = v15;
    outlined consume of AccessibilityText.Storage(v11, v12, 0);
  }
  v19[0] = v8;
  v19[1] = v9;
  uint64_t v18 = v10;
  ResolvedTextContainer.append(_:in:with:)((uint64_t)v13, v19, &v18, a4, a5);
}

BOOL AccessibilityTextStorage.resolvesToEmpty(in:with:)()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 32)) {
    return (uint64_t)objc_msgSend((id)v1, sel_length) < 1;
  }
  unint64_t v3 = *(void *)(v0 + 24);
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  return v4 == 0;
}

void AccessibilityTextStorage.__ivar_destroyer()
{
  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t AccessibilityTextStorage.deinit()
{
  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  return v0;
}

void AccessibilityText.encode(to:)()
{
  char v2 = *(void **)v0;
  uint64_t v3 = *(void *)(v0 + 8);
  char v4 = *(unsigned char *)(v0 + 17);
  if (*(unsigned char *)(v0 + 16))
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(2, (uint64_t)v2);
    outlined consume of AccessibilityText.Storage(v2, v3, 1);
    if (v1) {
      return;
    }
    goto LABEL_10;
  }
  if (v2) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v3 == 0xE000000000000000;
  }
  if (v5
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (swift_bridgeObjectRetain(),
        ProtobufEncoder.stringFieldAlways(_:_:)(1),
        outlined consume of AccessibilityText.Storage(v2, v3, 0),
        !v1))
  {
LABEL_10:
    if (v4)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

void AccessibilityText.init(from:)(uint64_t a1@<X0>, id **a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v5 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if (v7 >= v8)
  {
    BOOL v54 = 0;
    uint64_t v9 = 0;
    char v10 = 0;
    unint64_t v11 = 0xE000000000000000;
LABEL_4:
    *(void *)(a1 + 24) = 0;
    uint64_t v12 = v52;
    char *v52 = v9;
    v12[1] = (id *)v11;
    *((unsigned char *)v12 + 16) = v10 & 1;
    *((unsigned char *)v12 + 17) = v54;
    return;
  }
  BOOL v54 = 0;
  uint64_t v9 = 0;
  char v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  while (1)
  {
    unint64_t v14 = *(void *)(a1 + 24);
    if (v14)
    {
      unint64_t v15 = *(void *)(a1 + 32);
      if (v7 < v15) {
        goto LABEL_14;
      }
      if (v15 < v7) {
        goto LABEL_59;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v14 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_60;
    }
    if (v14 < 8) {
      goto LABEL_59;
    }
LABEL_14:
    unint64_t v16 = v14 >> 3;
    if (v14 >> 3 == 3)
    {
      if ((v14 & 7) != 0)
      {
        if ((v14 & 7) != 2) {
          goto LABEL_59;
        }
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_60;
        }
        if (v28 < 0) {
          goto LABEL_72;
        }
        unint64_t v29 = *(void *)(a1 + 8) + v28;
        if (v8 < v29) {
          goto LABEL_59;
        }
        *(void *)(a1 + 24) = 24;
        *(void *)(a1 + 32) = v29;
      }
      uint64_t v30 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_60;
      }
      BOOL v54 = v30 != 0;
      goto LABEL_7;
    }
    if (v16 == 2)
    {
      if ((v14 & 7) != 2) {
        goto LABEL_59;
      }
      uint64_t v3 = v9;
      CGAffineTransform v31 = *(void **)(a1 + 40);
      uint64_t v9 = (id *)v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        CGAffineTransform v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
      }
      unint64_t v11 = v31[2];
      unint64_t v32 = v31[3];
      if (v11 >= v32 >> 1) {
        CGAffineTransform v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v11 + 1, 1, v31);
      }
      v31[2] = v11 + 1;
      v31[v11 + 4] = v8;
      *(void *)(a1 + 40) = v31;
      uint64_t v33 = ProtobufDecoder.decodeVarint()();
      if (v2)
      {
        char v44 = v10;
        unsigned int v45 = v3;
        uint64_t v46 = (uint64_t)v9;
      }
      else
      {
        if (v33 < 0) {
          goto LABEL_68;
        }
        unint64_t v11 = (unint64_t)v9;
        unint64_t v34 = *(void *)(a1 + 8) + v33;
        if (v8 < v34)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          char v44 = v10 & 1;
          unsigned int v45 = v3;
        }
        else
        {
          *(void *)(a1 + 16) = v34;
          CodableAttributedString.init(from:)((id *)a1, &v55);
          uint64_t v9 = v3;
          int v35 = *(void **)(a1 + 40);
          if (!v35[2]) {
            goto LABEL_69;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v36 = v35[2];
            if (!v36) {
              goto LABEL_58;
            }
            goto LABEL_44;
          }
          int v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          uint64_t v36 = v35[2];
          if (v36)
          {
LABEL_44:
            uint64_t v37 = v36 - 1;
            uint64_t v38 = v35[v37 + 4];
            v35[2] = v37;
            outlined consume of AccessibilityText.Storage(v3, v11, v10 & 1);
            unint64_t v11 = 0;
            *(void *)(a1 + 40) = v35;
            *(void *)(a1 + 16) = v38;
            char v10 = 1;
            uint64_t v9 = v55;
            goto LABEL_7;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_60:
          char v44 = v10;
          unsigned int v45 = v9;
        }
        uint64_t v46 = v11;
      }
LABEL_62:
      outlined consume of AccessibilityText.Storage(v45, v46, v44);
      return;
    }
    if (v16 != 1)
    {
      switch(v14 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_60;
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v13 = *(void *)(a1 + 8) + 8;
          if (v8 < v13) {
            goto LABEL_59;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t v43 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_60;
          }
          if (v43 < 0) {
            goto LABEL_73;
          }
          unint64_t v13 = *(void *)(a1 + 8) + v43;
          if (v8 < v13) {
            goto LABEL_59;
          }
LABEL_6:
          *(void *)(a1 + 8) = v13;
          break;
        case 5uLL:
          unint64_t v13 = *(void *)(a1 + 8) + 4;
          if (v8 < v13) {
            goto LABEL_59;
          }
          goto LABEL_6;
        default:
          goto LABEL_59;
      }
      goto LABEL_7;
    }
    if ((v14 & 7) != 2) {
      goto LABEL_59;
    }
    uint64_t v17 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_60;
    }
    uint64_t v18 = v17;
    if (v17 < 0) {
      break;
    }
    uint64_t v19 = *(void *)(a1 + 8);
    if (v8 < v19 + v17) {
      goto LABEL_59;
    }
    uint64_t v3 = (id *)v11;
    *(void *)(a1 + 8) = v19 + v17;
    if (v17)
    {
      uint64_t v20 = v19 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
      uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;
      if (__OFADD__(v20, v18)) {
        goto LABEL_70;
      }
      if (v20 + v18 < v20) {
        goto LABEL_71;
      }
      uint64_t v24 = v21;
      uint64_t v25 = Data._Representation.subscript.getter();
      unint64_t v27 = v26;
      outlined consume of Data._Representation(v24, v23);
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v27 = 0xC000000000000000;
    }
    static String.Encoding.utf8.getter();
    uint64_t v39 = String.init(data:encoding:)();
    if (!v40)
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v25, v27);
      char v44 = v10 & 1;
      unsigned int v45 = v9;
      uint64_t v46 = (uint64_t)v3;
      goto LABEL_62;
    }
    uint64_t v41 = (id *)v39;
    unint64_t v42 = v40;
    outlined consume of Data._Representation(v25, v27);
    outlined consume of AccessibilityText.Storage(v9, (uint64_t)v3, v10 & 1);
    char v10 = 0;
    uint64_t v9 = v41;
    unint64_t v11 = v42;
LABEL_7:
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v7 >= v8) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  __break(1u);
  uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  uint64_t v50 = v49[2];
  if (!v50)
  {
    __break(1u);
    JUMPOUT(0x2460B548CLL);
  }
  uint64_t v47 = v50 - 1;
  uint64_t v48 = v49[v47 + 4];
  void v49[2] = v47;
  outlined consume of AccessibilityText.Storage(v9, v11, v10 & 1);
  *(void *)(a1 + 40) = v49;
  *(void *)(a1 + 16) = v48;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityText()
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityText(uint64_t a1@<X0>, id **a2@<X8>)
{
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityText@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized CodableByProtobuf.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityText(void *a1)
{
  if (*(unsigned char *)(v1 + 17)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return specialized CodableByProtobuf.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 16));
}

uint64_t CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (!a1)
  {
LABEL_23:
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_24;
  }
  uint64_t v11 = *a4;
  uint64_t v10 = a4[1];
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  if ((static CodableAccessibilityVersion.current & 1) == 0)
  {
    *(void *)&v29[0] = v7;
    *((void *)&v29[0] + 1) = v6;
    *(void *)&long long v35 = v11;
    *((void *)&v35 + 1) = v10;
    unint64_t v15 = (void *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, v29, 0, 1, 0, 0, &v35, 8236, 0xE200000000000000);
    if (v15)
    {
      unint64_t v16 = v15;
      *(void *)&long long v35 = v7;
      *((void *)&v35 + 1) = v6;
      uint64_t v17 = *(void *)(a1 + 16);
      if (v17)
      {
        uint64_t v18 = a1 + 32;
        unint64_t v27 = v15;
        id v26 = v15;
        swift_bridgeObjectRetain();
        uint64_t v19 = 0;
        while (1)
        {
          uint64_t v20 = *(void *)(v18 + 32 * v19 + 24);
          uint64_t v21 = *(void *)(v20 + 16);
          if (v21) {
            break;
          }
LABEL_14:
          if (++v19 == v17)
          {
            swift_bridgeObjectRelease();
            char v23 = 0;
            goto LABEL_21;
          }
        }
        swift_bridgeObjectRetain();
        unint64_t v22 = (unsigned char *)(v20 + 40);
        while (1)
        {
          if ((*v22 & 0xE0) == 0xC0)
          {
            type metadata accessor for CollapsibleTextModifier();
            if (swift_dynamicCastClass()) {
              break;
            }
          }
          v22 += 16;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = a1 + 32;
            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease_n();
        char v23 = 1;
LABEL_21:
        id v24 = v26;
        unint64_t v16 = v27;
      }
      else
      {
        id v24 = v15;
        char v23 = 0;
      }
      swift_bridgeObjectRelease();
      unsigned __int8 v34 = 2;
      __int16 v33 = 512;
      __int16 v32 = 0;
      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      long long v31 = xmmword_24619B530;
      uint64_t v28 = MEMORY[0x263F8EE78];
      uint64_t v25 = specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v16, (unint64_t *)&v35, (char *)&v33, v23, &v32, v29, &v28, MEMORY[0x263F8EE78], 0.0, 0.0, 0.0, 0.0, MEMORY[0x263F8EE78], &v34, 0);

      swift_release();
      uint64_t result = swift_release();
      *(void *)a5 = v25;
      *(void *)(a5 + 8) = 0;
      *(unsigned char *)(a5 + 18) = 0;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  *(void *)&v29[0] = v7;
  *((void *)&v29[0] + 1) = v6;
  *(void *)&long long v35 = v11;
  *((void *)&v35 + 1) = v10;
  uint64_t v12 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(a1, v29, 1, 1, 0, 0, &v35, 8236, 0xE200000000000000);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (!v12)
  {
LABEL_24:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 18) = -1;
LABEL_27:
    *(_WORD *)(a5 + 16) = 0;
    return result;
  }
  *(void *)a5 = v12;
  *(void *)(a5 + 8) = 0;
  if (a3) {
    __int16 v14 = 257;
  }
  else {
    __int16 v14 = 1;
  }
  *(unsigned char *)(a5 + 18) = 1;
  *(_WORD *)(a5 + 16) = v14;
  return result;
}

void AccessibilityTextAttributes.contentType.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *AccessibilityTextAttributes.contentType.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.contentType.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.headingLevel.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AccessibilityTextAttributes.headingLevel.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.headingLevel.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.durationTimeMMSS.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AccessibilityTextAttributes.durationTimeMMSS.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*AccessibilityTextAttributes.durationTimeMMSS.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityTextAttributes.label.getter()
{
  uint64_t v1 = v0[1];
  outlined copy of Text?(v1, v0[2], v0[3], v0[4]);
  return v1;
}

uint64_t AccessibilityTextAttributes.label.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = outlined consume of Text?(v4[1], v4[2], v4[3], v4[4]);
  v4[1] = a1;
  _OWORD v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
  return result;
}

uint64_t (*AccessibilityTextAttributes.label.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *AccessibilityTextAttributes.init(contentType:headingLevel:durationTimeMMSS:label:)@<X0>(unsigned char *result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(unsigned char *)a8 = *result;
  *(unsigned char *)(a8 + 1) = a2;
  *(unsigned char *)(a8 + 2) = a3;
  *(void *)(a8 + 8) = a4;
  *(void *)(a8 + 16) = a5;
  *(void *)(a8 + 24) = a6;
  *(void *)(a8 + 32) = a7;
  return result;
}

uint64_t AccessibilityTextAttributes.combined(with:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  uint64_t v7 = *((void *)a1 + 4);
  char v8 = v2[1];
  char v16 = *v2;
  char v17 = v2[2];
  if (v7)
  {
    uint64_t v10 = *((void *)a1 + 2);
    uint64_t v9 = *((void *)a1 + 3);
    uint64_t v11 = *((void *)a1 + 1);
    outlined copy of Text.Storage(v11, v10, a1[24] & 1);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = *((void *)v2 + 3);
    uint64_t v7 = *((void *)v2 + 4);
    uint64_t v11 = *((void *)v2 + 1);
    uint64_t v10 = *((void *)v2 + 2);
    uint64_t result = outlined copy of Text?(v11, v10, v9, v7);
  }
  if (v5 == 7) {
    char v13 = v8;
  }
  else {
    char v13 = v5;
  }
  char v14 = v16;
  if (v4 != 8) {
    char v14 = v4;
  }
  *(unsigned char *)a2 = v14;
  *(unsigned char *)(a2 + 1) = v13;
  char v15 = v17;
  if (v6 != 2) {
    char v15 = v6;
  }
  *(unsigned char *)(a2 + 2) = v15;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v7;
  return result;
}

uint64_t AccessibilityTextModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 18);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(unsigned char *)(a1 + 2) = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  return outlined copy of Text?(v3, v4, v5, v6);
}

__n128 AccessibilityTextModifier.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  char v3 = *(unsigned char *)(a1 + 2);
  *(_WORD *)(v2 + 16) = *(_WORD *)a1;
  *(unsigned char *)(v2 + 18) = v3;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

uint64_t AccessibilityTextModifier.init(_:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 2);
  *(_WORD *)(v1 + 16) = *(_WORD *)a1;
  *(unsigned char *)(v1 + 18) = v2;
  *(_OWORD *)(v1 + 24) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  return v1;
}

Swift::Bool __swiftcall AccessibilityTextModifier.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  return *(_DWORD *)options.rawValue & 1;
}

uint64_t AccessibilityTextModifier.modify(style:environment:)(void *a1)
{
  uint64_t v3 = a1[36];
  if (v3 == 1)
  {
    unsigned int v4 = *(unsigned __int8 *)(v1 + 16);
    unsigned int v5 = *(unsigned __int8 *)(v1 + 17);
    unsigned int v6 = *(unsigned __int8 *)(v1 + 18);
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 32);
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t result = outlined copy of Text?(v8, v7, v10, v9);
  }
  else
  {
    uint64_t v12 = a1[32];
    uint64_t v19 = a1[33];
    uint64_t v14 = a1[34];
    uint64_t v13 = a1[35];
    unsigned int v15 = v12;
    unsigned int v18 = *(unsigned __int8 *)(v1 + 18);
    if (v12 == 8) {
      unsigned int v15 = *(unsigned __int8 *)(v1 + 16);
    }
    unsigned int v21 = v15;
    if (BYTE1(v12) == 7) {
      unsigned int v16 = *(unsigned __int8 *)(v1 + 17);
    }
    else {
      unsigned int v16 = BYTE1(v12);
    }
    unsigned int v20 = v16;
    if (v3)
    {
      uint64_t v17 = a1[33];
      outlined copy of Text.Storage(v19, v14, v13 & 1);
      swift_bridgeObjectRetain();
      uint64_t v10 = v13;
      uint64_t v7 = v14;
      uint64_t v8 = v19;
      uint64_t v9 = v3;
    }
    else
    {
      uint64_t v10 = *(void *)(v1 + 40);
      uint64_t v9 = *(void *)(v1 + 48);
      uint64_t v8 = *(void *)(v1 + 24);
      uint64_t v7 = *(void *)(v1 + 32);
      outlined copy of Text?(v8, v7, v10, v9);
      uint64_t v17 = v19;
      outlined consume of AccessibilityTextAttributes?(v12, v19, v14, v13, 0);
    }
    uint64_t result = outlined consume of AccessibilityTextAttributes?(v12, v17, v14, v13, v3);
    if (BYTE2(v12) == 2) {
      unsigned int v6 = v18;
    }
    else {
      unsigned int v6 = BYTE2(v12);
    }
    unsigned int v5 = v20;
    unsigned int v4 = v21;
  }
  a1[32] = v4 | ((unint64_t)v5 << 8) | ((unint64_t)v6 << 16);
  a1[33] = v8;
  a1[34] = v7;
  a1[35] = v10;
  a1[36] = v9;
  return result;
}

uint64_t AccessibilityTextModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 24);
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = *(void *)(v1 + 40);
    uint64_t v5 = *(void *)(v1 + 48);
    __int16 v6 = *(_WORD *)(v0 + 16);
    char v7 = *(unsigned char *)(v0 + 18);
    unint64_t v19 = *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 18) << 16);
    uint64_t v20 = v2;
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    __int16 v15 = v6;
    char v16 = v7;
    long long v17 = *(_OWORD *)(v0 + 24);
    long long v18 = *(_OWORD *)(v0 + 40);
    outlined copy of Text?(v2, v3, v4, v5);
    outlined copy of Text?(v2, v3, v4, v5);
    char v8 = specialized static AccessibilityTextAttributes.== infix(_:_:)((unsigned __int8 *)&v19, (unsigned __int8 *)&v15);
    outlined consume of Text?(v20, v21, v22, v23);
    outlined consume of Text?(v2, v3, v4, v5);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 24);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v11 = *(void *)(v0 + 40);
    uint64_t v12 = *(void *)(v0 + 48);
    unint64_t v13 = *(unsigned __int16 *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 18) << 16);
    outlined copy of Text?(v9, v10, v11, v12);
    outlined consume of AccessibilityTextAttributes?(0, 0, 0, 0, 1);
    outlined consume of AccessibilityTextAttributes?(v13, v9, v10, v11, v12);
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t AccessibilityTextModifier.__ivar_destroyer()
{
  return outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t *AccessibilityTextModifier.deinit()
{
  outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);
  return v0;
}

uint64_t AccessibilityTextModifier.__deallocating_deinit()
{
  outlined consume of Text?(v0[3], v0[4], v0[5], v0[6]);

  return swift_deallocClassInstance();
}

uint64_t AccessibilityImageLabel.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    uint64_t result = String.init<A>(_:)();
    long long v5 = v4;
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = 0;
    long long v5 = xmmword_24620EF60;
  }
  *(void *)a2 = result;
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = *a3;
  if ((*a3 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = *(void *)(v5 + 24);
  uint64_t v23 = *a2;
  uint64_t v24 = v8;
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized static AccessibilityCore.description(for:in:)(v11, v12, &v23);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v23 = v13;
    uint64_t v24 = v15;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    uint64_t v20 = v10;
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v23, &v21, &v20, a4, MEMORY[0x263F8D310], a5, v16);
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_4:
    uint64_t v18 = *(void *)(v5 + 24);
    uint64_t v23 = *(void *)(v5 + 16);
    uint64_t v24 = v18;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    uint64_t v20 = v10;
    unint64_t v19 = lazy protocol witness table accessor for type String and conformance String();
    return ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v23, &v21, &v20, a4, MEMORY[0x263F8D310], a5, v19);
  }
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, void *a2, void **a3)
{
  unint64_t v4 = *a3;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v5 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v5;
  CodablePlatformFont.encode(to:)((const __CTFontDescriptor **)a1, v4);
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(void *a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v3 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  a1[4] = v3;
  ResolvedGradient.encode(to:)(a1);
}

void specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v3 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v3;
  AccessibilityText.encode(to:)();
}

{
  uint64_t v3;

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v3 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v3;
  CodableNSAttributes.encode(to:)(a1);
}

uint64_t specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v3 = dispatch thunk of Encoder.userInfo.getter();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = v3;
  return ContentTransition.Style.encode(to:)(a1);
}

uint64_t specialized static AccessibilityText.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  if (v4)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      char v4 = 1;
      outlined copy of AccessibilityText.Storage(v5, v6, 1);
      outlined copy of AccessibilityText.Storage(v2, v3, 1);
      char v8 = static NSObject.== infix(_:_:)();
      char v7 = 1;
      goto LABEL_13;
    }
LABEL_5:
    outlined copy of AccessibilityText.Storage(*(void **)a2, *(void *)(a2 + 8), v7);
    outlined copy of AccessibilityText.Storage(v2, v3, v4);
    char v8 = 0;
    goto LABEL_13;
  }
  if (*(unsigned char *)(a2 + 16)) {
    goto LABEL_5;
  }
  if (v2 == v5 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of AccessibilityText.Storage(v5, v6, 0);
  outlined copy of AccessibilityText.Storage(v2, v3, 0);
  char v4 = 0;
  char v7 = 0;
LABEL_13:
  outlined consume of AccessibilityText.Storage(v2, v3, v4);
  outlined consume of AccessibilityText.Storage(v5, v6, v7);
  return v8 & 1;
}

uint64_t specialized static AccessibilityTextAttributes.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  int v4 = a1[2];
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 4);
  int v9 = *a2;
  int v10 = a2[1];
  int v11 = a2[2];
  uint64_t v13 = *((void *)a2 + 1);
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v15 = *((void *)a2 + 3);
  uint64_t v14 = *((void *)a2 + 4);
  if (v2 == 8)
  {
    if (v9 != 8) {
      goto LABEL_22;
    }
  }
  else
  {
    char v16 = 0;
    if (v9 == 8 || v2 != v9) {
      return v16 & 1;
    }
  }
  if (v3 == 7)
  {
    if (v10 != 7) {
      goto LABEL_22;
    }
  }
  else
  {
    char v16 = 0;
    if (v10 == 7 || v3 != v10) {
      return v16 & 1;
    }
  }
  if (!v7)
  {
    if (!v14) {
      goto LABEL_29;
    }
LABEL_22:
    char v16 = 0;
    return v16 & 1;
  }
  if (!v14) {
    goto LABEL_22;
  }
  if (v8)
  {
    if (v15)
    {
      unint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 96);
      outlined copy of Text?(v5, v6, v8, v7);
      outlined copy of Text?(v5, v6, v8, v7);
      outlined copy of Text?(v13, v12, v15, v14);
      outlined copy of Text.Storage(v5, v6, 1);
      outlined copy of Text.Storage(v13, v12, 1);
      LOBYTE(v19) = v19(v13);
      outlined consume of Text.Storage(v13, v12, 1);
      outlined consume of Text.Storage(v5, v6, 1);
      char v17 = 1;
      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v15)
  {
LABEL_20:
    outlined copy of Text?(*((void *)a1 + 1), v6, v8, v7);
    outlined copy of Text?(v5, v6, v8, v7);
    outlined copy of Text?(v13, v12, v15, v14);
    char v17 = (v8 & 1) == 0;
LABEL_21:
    outlined consume of Text.Storage(v13, v12, v17);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v5, v6, v8 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v5, v6, v8, v7);
    goto LABEL_22;
  }
  if (v5 == v13 && v6 == v12)
  {
    outlined copy of Text?(*((void *)a1 + 1), v6, v8, v7);
    outlined copy of Text?(v5, v6, v8, v7);
    outlined copy of Text?(v5, v6, v15, v14);
    goto LABEL_28;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v5, v6, v8, v7);
  outlined copy of Text?(v5, v6, v8, v7);
  outlined copy of Text?(v13, v12, v15, v14);
  char v17 = 0;
  if ((v20 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_28:
  char v21 = specialized static Array<A>.== infix(_:_:)(v7, v14);
  outlined consume of Text.Storage(v13, v12, v15 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v5, v6, v8 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v5, v6, v8, v7);
  if ((v21 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_29:
  char v16 = v4 == 2;
  if (v11 != 2) {
    char v16 = 0;
  }
  if (v4 != 2 && v11 != 2) {
    char v16 = ((v4 & 1) == 0) ^ v11;
  }
  return v16 & 1;
}

uint64_t specialized Text.storedAccessibilityLabel.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    int v2 = (unsigned char *)(a1 + 16 * v1 + 24);
    uint64_t v3 = *(void *)(a1 + 16);
    while (1)
    {
      if ((*v2 & 0xE0) == 0xC0)
      {
        type metadata accessor for AccessibilityTextModifier();
        uint64_t result = swift_dynamicCastClass();
        if (result)
        {
          if (*(void *)(result + 48)) {
            break;
          }
        }
      }
      v2 -= 16;
      if (!--v3) {
        return 0;
      }
    }
    if (!v3) {
      return 0;
    }
    if (v3 > v1)
    {
      __break(1u);
    }
    else if ((*v2 & 0xE0) == 0xC0)
    {
      uint64_t result = swift_dynamicCastClass();
      if (result)
      {
        if (*(void *)(result + 48))
        {
          uint64_t v5 = *(void *)(result + 24);
          outlined copy of Text.Storage(v5, *(void *)(result + 32), *(unsigned char *)(result + 40) & 1);
          swift_bridgeObjectRetain();
          return v5;
        }
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityText(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityText and conformance AccessibilityText();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t dispatch thunk of static TextAccessibilityProvider.makeView(content:text:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a8 + 24))(a1, a2, a3, a4 & 1);
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityText(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for AccessibilityText(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of AccessibilityText.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for AccessibilityText(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of AccessibilityText.Storage(v5, v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityText()
{
  return &type metadata for AccessibilityText;
}

void destroy for AccessibilityText.Storage(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityText.Storage(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AccessibilityText.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityText.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AccessibilityText.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityText.Storage()
{
  return &type metadata for AccessibilityText.Storage;
}

uint64_t method lookup function for AccessibilityTextStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AccessibilityTextStorage);
}

uint64_t dispatch thunk of AccessibilityTextStorage.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t destroy for AccessibilityTextAttributes(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    outlined consume of Text.Storage(*(void *)(result + 8), *(void *)(result + 16), *(unsigned char *)(result + 24));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 24);
    outlined copy of Text.Storage(v4, v5, v6);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 8);
      uint64_t v8 = *(void *)(a2 + 16);
      char v9 = *(unsigned char *)(a2 + 24);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 16);
      char v12 = *(unsigned char *)(a1 + 24);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 8);
      long long v16 = v5[1];
      *uint64_t v4 = *v5;
      v4[1] = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(void *)(a2 + 16);
    char v15 = *(unsigned char *)(a2 + 24);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v14;
    *(unsigned char *)(a1 + 24) = v15;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 24);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v17;
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityTextAttributes(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v4 = (_OWORD *)(a2 + 8);
  if (!*(void *)(a1 + 32)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 32);
  if (!v5)
  {
    outlined destroy of Text(a1 + 8);
LABEL_5:
    long long v10 = v4[1];
    _OWORD *v3 = *v4;
    v3[1] = v10;
    return a1;
  }
  char v6 = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityTextAttributes()
{
  return &type metadata for AccessibilityTextAttributes;
}

uint64_t type metadata accessor for AccessibilityTextModifier()
{
  return self;
}

uint64_t method lookup function for AccessibilityTextModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AccessibilityTextModifier);
}

uint64_t dispatch thunk of AccessibilityTextModifier.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t destroy for AccessibilityImageLabel(uint64_t *a1)
{
  return outlined consume of AccessibilityImageLabel(*a1, a1[1], a1[2]);
}

uint64_t *initializeWithCopy for AccessibilityImageLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AccessibilityImageLabel(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessibilityImageLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of AccessibilityImageLabel(*a2, v4, v5);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of AccessibilityImageLabel(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for AccessibilityImageLabel(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of AccessibilityImageLabel(v3, v5, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityImageLabel()
{
  return &type metadata for AccessibilityImageLabel;
}

void partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 16));
}

{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 16));
}

{
  uint64_t v1;

  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 16), *(void ***)(v1 + 24));
}

void *specialized CodableByProtobuf.init(from:)(void *a1)
{
  uint64_t v3 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v4 = v9;
    unint64_t v5 = v10;
    outlined copy of Data._Representation((uint64_t)v9, v10);
    ProtobufDecoder.init(_:)((uint64_t)v9, v10, &v9);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v6 = dispatch thunk of Decoder.userInfo.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v6;
    uint64_t v3 = specialized CodablePlatformFont.init(from:)(&v9);
    outlined consume of Data._Representation((uint64_t)v4, v5);
    uint64_t v7 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(uint64_t a1)
{
  return specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 16));
}

void partial apply for specialized closure #1 in CodableByProtobuf.encode(to:)(void *a1)
{
  specialized closure #1 in CodableByProtobuf.encode(to:)(a1, *(void **)(v1 + 16));
}

ValueMetadata *type metadata accessor for EmptyTextAccessibilityProvider()
{
  return &type metadata for EmptyTextAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.TextAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.TextAccessibilityProviderKey;
}

_UNKNOWN **sub_2460B7138()
{
  return &protocol witness table for StyledTextContentView;
}

void static _GraphInputs.defaultInterfaceIdiom.getter(void *a1@<X8>)
{
  type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>();
  *a1 = v2;
  a1[1] = &protocol witness table for InterfaceIdiomBox<A>;
}

uint64_t static AnyInterfaceIdiom.~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v4);
  AnyInterfaceIdiom.init<A>(_:)(a3, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(v12[0], v12[1], v7, v8) & 1;
}

void static InterfaceIdiomInput.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

ValueMetadata *type metadata accessor for InterfaceIdiomInput()
{
  return &type metadata for InterfaceIdiomInput;
}

uint64_t _AnchorTransformModifier.anchor.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  void *v1 = a1;
  return result;
}

uint64_t (*_AnchorTransformModifier.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _AnchorTransformModifier.transform : <A, B>_AnchorTransformModifier<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @guaranteed Anchor<A>) -> ();
  a4[1] = v9;

  return swift_retain();
}

uint64_t key path setter for _AnchorTransformModifier.transform : <A, B>_AnchorTransformModifier<A, B>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 24);
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 8) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @in_guaranteed Transaction) -> (@out ());
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t _AnchorTransformModifier.transform.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AnchorTransformModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*_AnchorTransformModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnchorTransformModifier2.base.getter(uint64_t a1)
{
  return a1;
}

uint64_t _AnchorTransformModifier2.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release();
  uint64_t result = swift_release();
  void *v3 = a1;
  v3[1] = a2;
  _OWORD v3[2] = a3;
  return result;
}

uint64_t (*_AnchorTransformModifier2.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, ValueMetadata *a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v12 = *(void *)a2;
  int v13 = *(_DWORD *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  int v15 = *(_DWORD *)(a2 + 80);
  LODWORD(v23) = *a1;
  type metadata accessor for _AnchorTransformModifier2();
  type metadata accessor for _GraphValue();
  uint64_t v16 = type metadata accessor for _AnchorTransformModifier();
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 32);
  long long v20 = *(_OWORD *)(a2 + 56);
  long long v21 = *(_OWORD *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:), v16, v32);
  uint64_t v23 = v12;
  int v24 = v13;
  uint64_t v25 = v14;
  uint64_t v26 = v17;
  uint64_t v27 = v18;
  long long v28 = v21;
  long long v29 = v20;
  uint64_t v30 = v19;
  int v31 = v15;
  static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(v32, &v23, 0, a3, a4, a5, a6, a7);
}

uint64_t closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for _AnchorTransformModifier2();
  uint64_t v6 = type metadata accessor for _AnchorTransformModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, v6, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t partial apply for closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _AnchorTransformModifier2._makeView(modifier:inputs:body:)(a1);
}

uint64_t type metadata accessor for _AnchorTransformModifier2()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AnchorTransformModifier2<A, B>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
}

uint64_t sub_2460B7790()
{
  return 24;
}

__n128 sub_2460B779C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_2460B77B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_2460B7824()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout B.PreferenceKey.Value, @guaranteed Anchor<A>) -> ()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 40))(a1, *a2);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnchorTransform<A, B>()
{
  return specialized AnchorTransform.description.getter();
}

uint64_t sub_2460B789C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t specialized AnchorTransform.description.getter()
{
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

uint64_t static MaterialProviderBoxBase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
}

uint64_t static Material.Layers.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

__n128 Material.Context.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 3;
  return result;
}

ValueMetadata *specialized EnvironmentValues.getValue<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    uint64_t v3 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(a1);
    swift_release();
  }
  else
  {
    uint64_t v4 = swift_retain();
    uint64_t v5 = specialized find<A>(_:key:)(v4);
    if (v5) {
      uint64_t v3 = *(ValueMetadata **)(v5 + 72);
    }
    else {
      uint64_t v3 = &type metadata for CoreUIDefaultSystemColorDefinition;
    }
  }
  swift_release();
  return v3;
}

double MaterialProvider.resolveForegroundStyle(level:in:)@<D0>(uint64_t a1@<X8>)
{
  return MaterialProvider.resolveForegroundStyle(level:in:)(a1);
}

{
  double result;

  __n128 result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 80) = -1;
  return result;
}

uint64_t Material.init<A>(provider:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for MaterialProviderBox();
  uint64_t result = GradientBox.__allocating_init(_:)(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 12) = 0;
  return result;
}

uint64_t type metadata accessor for MaterialProviderBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Material.Context.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t Material.Context.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  void *v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*Material.Context.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Material.Context.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *Material.Context.role.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Material.Context.role.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static Material.Layer.Filter.== infix(_:_:)(uint64_t a1, int8x16_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  char v3 = *(unsigned char *)(a1 + 116);
  __int32 v4 = a2[7].i32[0];
  __int8 v5 = a2[7].i8[4];
  long long v6 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  void v16[4] = *(_OWORD *)(a1 + 64);
  v16[5] = v8;
  v16[6] = *(_OWORD *)(a1 + 96);
  int v17 = v2;
  char v18 = v3;
  int8x16_t v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  int8x16_t v10 = a2[3];
  void v13[2] = a2[2];
  _OWORD v13[3] = v10;
  int8x16_t v11 = a2[5];
  v13[4] = a2[4];
  _OWORD v13[5] = v11;
  v13[6] = a2[6];
  __int32 v14 = v4;
  __int8 v15 = v5;
  return specialized static GraphicsFilter.== infix(_:_:)((uint64_t)v16, v13) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Material.Layer.Filter(uint64_t a1, int8x16_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  char v3 = *(unsigned char *)(a1 + 116);
  __int32 v4 = a2[7].i32[0];
  __int8 v5 = a2[7].i8[4];
  long long v6 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  uint64_t v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  void v16[4] = *(_OWORD *)(a1 + 64);
  v16[5] = v8;
  v16[6] = *(_OWORD *)(a1 + 96);
  int v17 = v2;
  char v18 = v3;
  int8x16_t v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  int8x16_t v10 = a2[3];
  void v13[2] = a2[2];
  _OWORD v13[3] = v10;
  int8x16_t v11 = a2[5];
  v13[4] = a2[4];
  _OWORD v13[5] = v11;
  v13[6] = a2[6];
  __int32 v14 = v4;
  __int8 v15 = v5;
  return specialized static GraphicsFilter.== infix(_:_:)((uint64_t)v16, v13) & 1;
}

uint64_t Material.Layers.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Int Material.Layers.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Material.Layers(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

void MaterialProviderBoxBase.resolveLayers(in:)()
{
}

void MaterialProviderBoxBase.applyForegroundStyle(to:)()
{
}

void MaterialProviderBoxBase.isEqual(to:)()
{
}

void MaterialProviderBoxBase.hash(into:)()
{
}

uint64_t MaterialProviderBoxBase.deinit()
{
  return v0;
}

uint64_t MaterialProviderBoxBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

Swift::Int MaterialProviderBoxBase.hashValue.getter()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v0 + 104))(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MaterialProviderBoxBase()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MaterialProviderBoxBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialProviderBoxBase()
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(**(void **)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MaterialProviderBoxBase(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t MaterialProviderBox.resolveLayers(in:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  char v5 = *((unsigned char *)a1 + 16);
  long long v7 = *a1;
  char v8 = v5;
  uint64_t result = (*(uint64_t (**)(long long *, void))(*(void *)(v4 + 136) + 16))(&v7, *(void *)(v4 + 128));
  *a2 = result;
  return result;
}

uint64_t MaterialProviderBox.applyForegroundStyle(to:)(uint64_t result)
{
  void (*v13)(int8x16_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t);
  int v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(int8x16_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t);
  unsigned int v19;
  int8x16_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v48;
  ValueMetadata *v49;
  _UNKNOWN **v50;
  _UNKNOWN **v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  long long v55;
  long long v56;
  void *v57;
  long long v58;
  long long v59;
  long long v60;
  uint64_t v61;
  long long v62;
  long long v63;
  long long v64;
  uint64_t v65;
  char v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  long long v70;
  uint64_t v71;
  long long v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  unsigned int v79;
  unsigned __int8 v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  unsigned int v88;
  __int32 v89;
  int32x2_t v90;
  unsigned int v91;
  int8x16_t v92;
  uint64_t v93;
  long long v94;
  long long v95;
  long long v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  uint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  long long v110;
  uint64_t v111;
  int8x16_t v112;
  char v113;
  int v114;
  uint64_t v115;
  void (*v116)(int8x16_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t);
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned __int8 v123;
  void *v124;
  int8x16_t v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  unsigned __int8 v136;
  void v137[2];
  char v138;

  uint64_t v2 = result;
  uint64_t v3 = *v1;
  char v4 = *(unsigned char *)(result + 106);
  if ((v4 & 8) != 0) {
    return SystemColorsStyle._apply(to:)(result);
  }
  *(unsigned char *)(result + 106) = v4 | 8;
  uint64_t v5 = *(void *)(result + 48);
  uint64_t v6 = *(void *)(result + 56);
  char v7 = *(unsigned char *)(result + 105);
  uint64_t v9 = *(void *)result;
  uint64_t v8 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (*(void *)result)
      {
        uint64_t result = SystemColorsStyle._apply(to:)(result);
        goto LABEL_12;
      }
      if (v8 == v10) {
        goto LABEL_12;
      }
      uint64_t v118 = *(unsigned char *)(result + 105);
      uint64_t v119 = *(void *)(result + 16);
      if (v10 < v8) {
        goto LABEL_95;
      }
      uint64_t v22 = *(unsigned char *)(result + 40);
      uint64_t v23 = *(void *)(result + 32);
      uint64_t v117 = *(void *)(v3 + 136);
      uint64_t v116 = *(void (**)(int8x16_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v117 + 24);
      int v24 = v3;
      swift_retain();
      swift_retain();
      uint64_t v25 = v24;
      uint64_t v100 = v4;
      uint64_t v98 = v6;
      char v99 = v5;
      uint64_t v115 = v24;
      uint64_t v26 = v119;
      break;
    case 2:
      uint64_t v133 = *(void *)(result + 48);
      Swift::String v134 = v6;
      char v135 = v7;
      int v17 = *(void *)(v3 + 128);
      uint64_t v16 = *(void *)(v3 + 136);
      char v18 = *(void (**)(int8x16_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(v16 + 24);
      swift_retain();
      swift_retain();
      v18(&v125, v9, &v133, v17, v16);
      uint64_t v19 = v130;
      if (v130 == 255) {
        goto LABEL_11;
      }
      long long v20 = v125;
      swift_release();
      uint64_t result = swift_release();
      if (v19 <= 1)
      {
        type metadata accessor for ColorBox<ResolvedColorProvider>();
        long long v21 = swift_allocObject();
        *(int8x16_t *)(v21 + 16) = v20;
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v2 + 32), *(unsigned char *)(v2 + 40));
        *(void *)(v2 + 32) = v21;
        *(unsigned char *)(v2 + 40) = 3;
      }
      goto LABEL_12;
    case 3:
    case 4:
    case 5:
      goto LABEL_12;
    default:
      uint64_t v133 = *(void *)(result + 48);
      Swift::String v134 = v6;
      char v135 = v7;
      uint64_t v11 = *(void *)(v3 + 128);
      uint64_t v12 = *(void *)(v3 + 136);
      int v13 = *(void (**)(int8x16_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t))(v12 + 24);
      swift_retain();
      swift_retain();
      v13(&v125, v9, &v133, v11, v12);
      __int32 v14 = v130;
      if (v130 == 255)
      {
LABEL_11:
        SystemColorsStyle._apply(to:)(v2);
        swift_release();
        uint64_t result = swift_release();
      }
      else
      {
        __int8 v15 = v125;
        swift_release();
        swift_release();
        if (v14)
        {
          uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v2 + 32), *(unsigned char *)(v2 + 40));
          *(void *)(v2 + 32) = 0;
        }
        else
        {
          type metadata accessor for ColorBox<ResolvedColorProvider>();
          unsigned int v97 = swift_allocObject();
          *(int8x16_t *)(v97 + 16) = v15;
          uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v2 + 32), *(unsigned char *)(v2 + 40));
          *(void *)(v2 + 32) = v97;
        }
        *(unsigned char *)(v2 + 40) = 0;
      }
      goto LABEL_12;
  }
  while (2)
  {
    if (v8 >= v26) {
      goto LABEL_94;
    }
    v137[0] = v5;
    v137[1] = v6;
    unsigned int v138 = v118;
    uint64_t v37 = *(void *)(v25 + 128);
    swift_retain();
    swift_retain();
    v116(&v125, v8, v137, v37, v117);
    swift_release();
    swift_release();
    uint64_t v122 = v8 + 1;
    uint64_t v123 = v8;
    if (v130 == 255)
    {
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = v8;
      *(void *)(v2 + 16) = v8 + 1;
      *(unsigned char *)(v2 + 24) = 1;
      if (v8 <= 4)
      {
        if (v8 > 4u) {
          goto LABEL_96;
        }
        uint64_t v38 = v8 + 13;
      }
      else
      {
        uint64_t v38 = 17;
      }
      swift_retain();
      if (v6)
      {
        swift_retain_n();
        uint64_t v48 = swift_retain();
        uint64_t v49 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(v48);
        uint64_t v51 = v50;
        swift_release_n();
      }
      else
      {
        uint64_t v52 = swift_retain();
        uint64_t v53 = specialized find<A>(_:key:)(v52);
        if (v53)
        {
          uint64_t v49 = *(ValueMetadata **)(v53 + 72);
          uint64_t v51 = *(_UNKNOWN ***)(v53 + 80);
        }
        else
        {
          uint64_t v49 = &type metadata for CoreUIDefaultSystemColorDefinition;
          uint64_t v51 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
        }
      }
      swift_release_n();
      LOBYTE(v137[0]) = v38;
      v125.i64[0] = v5;
      v125.i64[1] = v6;
      *(float *)&uint64_t v88 = ((float (*)(void *, int8x16_t *, ValueMetadata *, _UNKNOWN **))v51[1])(v137, &v125, v49, v51);
      v90.i32[1] = v89;
      v92.i64[0] = v88;
      v92.i64[1] = v91;
      uint64_t v125 = vorrq_s8((int8x16_t)vshll_n_s32(v90, 0x20uLL), v92);
      Swift::String v126 = 0u;
      uint64_t v127 = 0u;
      uint64_t v128 = 0u;
      Swift::String v129 = 0u;
      LOBYTE(v130) = 0;
      DWORD1(v130) = 1065353216;
      *((void *)&v130 + 1) = 0;
      LOBYTE(v131) = -1;
      *((void *)&v131 + 1) = MEMORY[0x263F8EE78];
      uint64_t v136 = 0;
      if (v22 == 1) {
        uint64_t v93 = v23;
      }
      else {
        uint64_t v93 = MEMORY[0x263F8EE78];
      }
      if (v22 == 1)
      {
        uint64_t v23 = 0;
        uint64_t v22 = 5;
      }
      v137[0] = v93;
      _ShapeStyle_Pack.subscript.setter(v125.i64, &v136, v123);
      long long v35 = v23;
      uint64_t v36 = v22;
      goto LABEL_20;
    }
    uint64_t v39 = MEMORY[0x263F8EE78];
    if (v22 == 1)
    {
      uint64_t v39 = v23;
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v40 = v23;
    }
    if (v22 == 1) {
      uint64_t v41 = 5;
    }
    else {
      uint64_t v41 = v22;
    }
    v137[0] = v39;
    unint64_t v42 = *(void *)(v39 + 16);
    uint64_t v111 = v40;
    char v113 = v41;
    uint64_t v114 = v130;
    uint64_t v112 = v125;
    uint64_t v110 = v126;
    unsigned int v102 = v128;
    char v103 = v127;
    char v101 = v129;
    if (!v42) {
      goto LABEL_53;
    }
    uint64_t v43 = 0;
    char v44 = (unsigned __int8 *)(v39 + 33);
    while (1)
    {
      unsigned int v45 = *v44;
      if (*(v44 - 1)) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = v45 == v8;
      }
      if (v46)
      {
        BOOL v54 = *(_OWORD *)(v44 + 47);
        uint64_t v55 = *(_OWORD *)(v44 + 31);
        uint64_t v56 = *(_OWORD *)(v44 + 15);
        uint64_t v125 = *(int8x16_t *)(v44 - 1);
        Swift::String v126 = v56;
        uint64_t v127 = v55;
        uint64_t v128 = v54;
        uint64_t v57 = *(void **)(v44 + 111);
        uint64_t v58 = *(_OWORD *)(v44 + 95);
        uint64_t v59 = *(_OWORD *)(v44 + 79);
        uint64_t v60 = *(_OWORD *)(v44 + 63);
LABEL_50:
        Swift::String v129 = v60;
        uint64_t v130 = v59;
        Swift::String v131 = v58;
        uint64_t v124 = v57;
        v132 = v57;
        int v61 = *((void *)&v126 + 1);
        uint64_t v106 = v126;
        uint64_t v108 = v125.i64[1];
        uint64_t v62 = v127;
        uint64_t v63 = v128;
        uint64_t v64 = v60;
        uint64_t v65 = v59;
        uint64_t v66 = BYTE8(v59);
        uint64_t v67 = HIDWORD(v59);
        uint64_t v120 = v58;
        uint64_t v121 = BYTE8(v58);
        outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v125);
        outlined consume of _ShapeStyle_Pack.Fill(v108, v106, v61, v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v64, *((uint64_t *)&v64 + 1), v65, v66);
        goto LABEL_56;
      }
      if (*(v44 - 1) || v45 > v8) {
        break;
      }
      ++v43;
      v44 += 120;
      if (v42 == v43) {
        goto LABEL_53;
      }
    }
    if (v43)
    {
      uint64_t v69 = *(v44 - 121);
      uint64_t v68 = v44 - 121;
      if (!v69)
      {
        uint64_t v95 = *((_OWORD *)v68 + 2);
        uint64_t v94 = *((_OWORD *)v68 + 3);
        uint64_t v96 = *((_OWORD *)v68 + 1);
        uint64_t v125 = *(int8x16_t *)v68;
        Swift::String v126 = v96;
        uint64_t v127 = v95;
        uint64_t v128 = v94;
        uint64_t v57 = (void *)*((void *)v68 + 14);
        uint64_t v59 = *((_OWORD *)v68 + 5);
        uint64_t v58 = *((_OWORD *)v68 + 6);
        uint64_t v60 = *((_OWORD *)v68 + 4);
        goto LABEL_50;
      }
    }
LABEL_53:
    if (one-time initialization token for clear != -1) {
      swift_once();
    }
    uint64_t v70 = static _ShapeStyle_Pack.Style.clear;
    uint64_t v104 = xmmword_268EEF140;
    uint64_t v71 = qword_268EEF150;
    uint64_t v107 = xmmword_268EEF160;
    uint64_t v109 = qword_268EEF158;
    uint64_t v105 = *((void *)&xmmword_268EEF160 + 1);
    uint64_t v72 = xmmword_268EEF170;
    uint64_t v73 = byte_268EEF180;
    uint64_t v67 = dword_268EEF184;
    uint64_t v74 = qword_268EEF188;
    uint64_t v75 = byte_268EEF190;
    int v76 = qword_268EEF198;
    outlined copy of _ShapeStyle_Pack.Fill((id)static _ShapeStyle_Pack.Style.clear, BYTE8(static _ShapeStyle_Pack.Style.clear), (void *)xmmword_268EEF140, *((void **)&xmmword_268EEF140 + 1), qword_268EEF150, qword_268EEF158, xmmword_268EEF160, *((uint64_t *)&xmmword_268EEF160 + 1), xmmword_268EEF170, *((uint64_t *)&xmmword_268EEF170 + 1), byte_268EEF180);
    uint64_t v120 = v74;
    uint64_t v121 = v75;
    outlined copy of GraphicsBlendMode?(v74, v75);
    uint64_t v124 = (void *)v76;
    swift_bridgeObjectRetain();
    outlined consume of _ShapeStyle_Pack.Fill(v70, BYTE8(v70), v104, BYTE8(v104), v71, v109, v107, v105, v72, *((uint64_t *)&v72 + 1), v73);
LABEL_56:
    char v4 = v100;
    uint64_t v27 = v114;
    if (!v114)
    {
      int v31 = 0uLL;
      __int16 v32 = 0uLL;
      __int16 v33 = 0uLL;
      unsigned __int8 v34 = 0uLL;
      uint64_t v6 = v98;
      uint64_t v5 = v99;
      id v77 = v123;
      long long v29 = v124;
      goto LABEL_80;
    }
    uint64_t v6 = v98;
    uint64_t v5 = v99;
    id v77 = v123;
    if (v114 == 1)
    {
      uint64_t v78 = qword_24620F850[(char)v110];
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      uint64_t v79 = static _SemanticFeature_v6.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC == 1)
      {
        if ((dyld_program_sdk_at_least() & 1) == 0) {
          goto LABEL_64;
        }
LABEL_67:
        uint64_t v80 = v123;
        uint64_t v81 = 1;
        uint64_t v30 = v121;
        long long v29 = v124;
        if (v121 == 255) {
          goto LABEL_68;
        }
      }
      else
      {
        if (static Semantics.forced >= v79) {
          goto LABEL_67;
        }
LABEL_64:
        uint64_t v80 = v123;
        outlined consume of GraphicsBlendMode?(v120, v121);
        uint64_t v81 = 0;
        long long v29 = v124;
LABEL_68:
        uint64_t v30 = 0;
        uint64_t v120 = v78;
      }
      uint64_t v82 = v29[2];
      if (v82)
      {
        LOBYTE(v121) = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew()(v124);
        }
        uint64_t v83 = 0;
        long long v29 = v124;
        uint64_t v84 = (unsigned __int8 *)(v124 + 12);
        do
        {
          char v85 = v29[2];
          if (!v81) {
            goto LABEL_77;
          }
          if (v83 >= v85) {
            goto LABEL_93;
          }
          if (*v84 == 255)
          {
LABEL_77:
            if (v83 >= v85)
            {
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
              JUMPOUT(0x2460B8AD0);
            }
            uint64_t v86 = *((void *)v84 - 1);
            *((void *)v84 - 1) = v78;
            uint64_t v87 = *v84;
            char *v84 = 0;
            outlined consume of GraphicsBlendMode?(v86, v87);
            long long v29 = v124;
          }
          ++v83;
          v84 += 72;
        }
        while (v82 != v83);
        uint64_t v27 = 0;
        int v31 = 0uLL;
        __int16 v32 = 0uLL;
        __int16 v33 = 0uLL;
        unsigned __int8 v34 = 0uLL;
        id v77 = v80;
LABEL_80:
        long long v28 = v111;
        uint64_t v30 = v121;
      }
      else
      {
        uint64_t v27 = 0;
        int v31 = 0uLL;
        __int16 v32 = 0uLL;
        __int16 v33 = 0uLL;
        unsigned __int8 v34 = 0uLL;
        id v77 = v80;
        long long v28 = v111;
      }
    }
    else
    {
      uint64_t v27 = 5;
      long long v28 = v111;
      long long v29 = v124;
      uint64_t v30 = v121;
      int v31 = v110;
      __int16 v33 = v102;
      __int16 v32 = v103;
      unsigned __int8 v34 = v101;
    }
    uint64_t v125 = v112;
    Swift::String v126 = v31;
    uint64_t v127 = v32;
    uint64_t v128 = v33;
    Swift::String v129 = v34;
    LOBYTE(v130) = v27;
    DWORD1(v130) = v67;
    *((void *)&v130 + 1) = v120;
    LOBYTE(v131) = v30;
    *((void *)&v131 + 1) = v29;
    uint64_t v136 = 0;
    _ShapeStyle_Pack.subscript.setter(v125.i64, &v136, v77);
    long long v35 = v28;
    uint64_t v36 = v113;
LABEL_20:
    outlined consume of _ShapeStyle_Shape.Result(v35, v36);
    uint64_t v23 = v137[0];
    uint64_t v22 = 1;
    uint64_t v8 = v122;
    uint64_t v26 = v119;
    uint64_t v25 = v115;
    if (v122 != v119) {
      continue;
    }
    break;
  }
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v2 + 32) = v23;
  *(unsigned char *)(v2 + 40) = 1;
LABEL_12:
  *(unsigned char *)(v2 + 106) = v4 & 0xF7;
  return result;
}

uint64_t static Material.Layer.color(_:)@<X0>(int8x16_t *a1@<X8>, unsigned int a2@<S0>, int32x2_t a3@<D1>, unsigned int a4@<S2>, float a5@<S3>)
{
  if (one-time initialization token for normal != -1)
  {
    __int32 v13 = a3.i32[0];
    unsigned int v11 = a4;
    unsigned int v12 = a2;
    float v10 = a5;
    swift_once();
    a5 = v10;
    a4 = v11;
    a2 = v12;
    a3.i32[0] = v13;
  }
  *(float *)&a3.i32[1] = a5;
  uint64_t v6 = static GraphicsBlendMode.normal;
  char v7 = byte_26B0EB4A0;
  v8.i64[0] = a2;
  v8.i64[1] = a4;
  *a1 = vorrq_s8((int8x16_t)vshll_n_s32(a3, 0x20uLL), v8);
  a1[1].i64[0] = 0;
  a1[1].i64[1] = 0;
  a1[2].i32[0] = 1065353216;
  a1[2].i64[1] = v6;
  a1[3].i8[0] = v7;

  return outlined copy of GraphicsBlendMode(v6, v7);
}

uint64_t static Material.Layer.backdrop(scale:color:filters:)@<X0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>, double a3@<D0>, unsigned int a4@<S1>, unsigned int a5@<S2>, unsigned int a6@<S3>, unsigned int a7@<S4>)
{
  uint64_t v11 = one-time initialization token for normal;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  *(float *)&unsigned int v12 = a3;
  uint64_t v13 = static GraphicsBlendMode.normal;
  char v14 = byte_26B0EB4A0;
  v15.i64[0] = v12;
  v15.i64[1] = a5;
  *a2 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)__PAIR64__(a6, a4), 0x20uLL), v15);
  a2[1].i64[0] = a7 | 0x8000000000000000;
  a2[1].i64[1] = a1;
  a2[2].i32[0] = 1065353216;
  a2[2].i64[1] = v13;
  a2[3].i8[0] = v14;

  return outlined copy of GraphicsBlendMode(v13, v14);
}

uint64_t Material.Layer.opacity(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 40);
  char v8 = *(unsigned char *)(v2 + 48);
  float v9 = a2;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(float *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = v8;
  outlined copy of Material.Layer.Storage(v3, v4, v5);

  return outlined copy of GraphicsBlendMode(v7, v8);
}

uint64_t Material.Layer.blendMode(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)v2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  int v8 = *(_DWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  char v10 = *(unsigned char *)(v2 + 48);
  char v14 = *a1;
  GraphicsBlendMode.init(_:)(&v14, (uint64_t)&v15);
  outlined copy of Material.Layer.Storage(v4, v5, v6);
  outlined copy of GraphicsBlendMode(v9, v10);
  uint64_t result = outlined consume of GraphicsBlendMode(v9, v10);
  uint64_t v12 = v15;
  char v13 = v16;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(_DWORD *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v12;
  *(unsigned char *)(a2 + 48) = v13;
  return result;
}

int8x16_t static Material.ForegroundStyle.color(_:)@<Q0>(uint64_t a1@<X8>, unsigned int a2@<S0>, int32x2_t a3@<D1>, unsigned int a4@<S2>, __int32 a5@<S3>)
{
  a3.i32[1] = a5;
  v5.i64[0] = a2;
  v5.i64[1] = a4;
  int8x16_t result = vorrq_s8((int8x16_t)vshll_n_s32(a3, 0x20uLL), v5);
  *(int8x16_t *)a1 = result;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

double static Material.ForegroundStyle.color(_:blendMode:)@<D0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>, int32x2_t a4@<D1>, unsigned int a5@<S2>, __int32 a6@<S3>)
{
  uint64_t v6 = *a1;
  a4.i32[1] = a6;
  v7.i64[0] = a3;
  v7.i64[1] = a5;
  *(int8x16_t *)a2 = vorrq_s8((int8x16_t)vshll_n_s32(a4, 0x20uLL), v7);
  *(void *)(a2 + 16) = v6;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 1;
  return result;
}

__n128 static Material.ForegroundStyle.colorMatrix(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(unsigned char *)(a2 + 80) = 2;
  return result;
}

double static Material.Layer.Filter.averageColor.getter@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 116) = 16;
  return result;
}

double static Material.Layer.Filter.brightness(amount:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(unsigned char *)(a1 + 116) = 8;
  return result;
}

void static Material.Layer.Filter.colorCurves(red:green:blue:alpha:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[7].n128_u8[4] = 14;
}

double static Material.Layer.Filter.saturation(amount:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(unsigned char *)(a1 + 116) = 7;
  return result;
}

__n128 static Material.Layer.Filter.colorMatrix(_:isPremultiplied:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v4;
  __n128 result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a3 + 64) = result;
  *(void *)(a3 + 80) = a2 & 1;
  *(unsigned char *)(a3 + 116) = 4;
  return result;
}

double static Material.Layer.Filter.gaussianBlur(radius:isOpaque:isDithered:)@<D0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  uint64_t v4 = 256;
  if ((a2 & 1) == 0) {
    uint64_t v4 = 0;
  }
  *(void *)(a3 + 8) = v4 & 0xFFFFFFFFFFFFFFFELL | a1 & 1;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 109) = 0;
  return result;
}

double static Material.Layer.Filter.luminanceCurve(_:amount:)@<D0>(uint64_t a1@<X8>, int8x16_t a2@<Q0>, double a3@<D1>)
{
  *(float *)&unsigned int v3 = a3;
  uint64_t v4 = v3;
  int32x2_t v5 = (int32x2_t)vextq_s8(a2, a2, 8uLL).u64[0];
  int32x2_t v6 = vzip1_s32(*(int32x2_t *)a2.i8, v5);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  *(int8x16_t *)a1 = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32(*(int32x2_t *)a2.i8, v5), 0x20uLL), v7);
  *(void *)(a1 + 16) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(unsigned char *)(a1 + 116) = 13;
  return result;
}

CGImageRef static Material.Layer.Filter.variableBlur(radius:isOpaque:isDithered:mask:)@<X0>(CGImageRef image@<X2>, char a2@<W0>, char a3@<W1>, uint64_t a4@<X8>, double a5@<D0>)
{
  double Width = (double)(uint64_t)CGImageGetWidth(image);
  double Height = (double)(uint64_t)CGImageGetHeight(image);
  *(double *)a4 = a5;
  uint64_t v11 = 256;
  if ((a3 & 1) == 0) {
    uint64_t v11 = 0;
  }
  *(void *)(a4 + 8) = v11 & 0xFFFFFFFFFFFFFFFELL | a2 & 1;
  *(void *)(a4 + 16) = image;
  *(_OWORD *)(a4 + 24) = xmmword_2461C55F0;
  *(double *)(a4 + 40) = Width;
  *(double *)(a4 + 48) = Height;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0x100000000;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_DWORD *)(a4 + 112) = 50397442;
  *(unsigned char *)(a4 + 116) = 1;

  return image;
}

double Material.Layer.opacity.getter()
{
  return *(float *)(v0 + 32);
}

unint64_t Material.Layer.blendMode.getter()
{
  if (*(unsigned char *)(v0 + 48)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(unsigned int *)(v0 + 40);
  }
  return v1 | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

uint64_t Material.Layer.compositingFilter.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  if (*(unsigned char *)(v1 + 48))
  {
    a1[3] = swift_getObjectType();
    *a1 = v3;
    return swift_unknownObjectRetain();
  }
  else
  {
    if (_RBBlendModeGetCompositingFilter(*(void *)(v1 + 40)))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v5, 0, sizeof(v5));
    }
    return outlined init with take of Any?((uint64_t)v5, (uint64_t)a1);
  }
}

double Material.Layer.Contents.Backdrop.scale.getter()
{
  return *(float *)v0;
}

float Material.Layer.Contents.Backdrop.color.getter()
{
  return *(float *)(v0 + 4);
}

uint64_t Material.Layer.Contents.Backdrop.filters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Material.Layer.contents.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *v1;
  if ((v1[1] & 0x8000000000000000) != 0)
  {
    unint64_t v4 = *((void *)v1 + 2) | 0x8000000000000000;
    long long v6 = v3;
    uint64_t result = swift_bridgeObjectRetain();
    long long v3 = v6;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t result = 0;
  }
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = result;
  return result;
}

double Material.Layer.Filter.Contents.Brightness.amount.getter()
{
  return *(double *)v0;
}

__n128 Material.Layer.Filter.Contents.ColorCurves.redCurve.getter()
{
  return *(__n128 *)v0;
}

__n128 Material.Layer.Filter.Contents.ColorCurves.greenCurve.getter()
{
  return v0[1];
}

__n128 Material.Layer.Filter.Contents.ColorCurves.blueCurve.getter()
{
  return v0[2];
}

__n128 Material.Layer.Filter.Contents.ColorCurves.opacityCurve.getter()
{
  return v0[3];
}

double Material.Layer.Filter.Contents.Saturation.amount.getter()
{
  return *(double *)v0;
}

__n128 Material.Layer.Filter.Contents.ColorMatrix.matrix.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t Material.Layer.Filter.Contents.ColorMatrix.isPremultiplied.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

double Material.Layer.Filter.Contents.GaussianBlur.radius.getter()
{
  return *(double *)v0;
}

uint64_t Material.Layer.Filter.Contents.GaussianBlur.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Material.Layer.Filter.Contents.GaussianBlur.isDithered.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

__n128 Material.Layer.Filter.Contents.LuminanceCurve.curve.getter()
{
  return *(__n128 *)v0;
}

double Material.Layer.Filter.Contents.LuminanceCurve.amount.getter()
{
  return *(float *)(v0 + 16);
}

double Material.Layer.Filter.Contents.VariableBlur.radius.getter()
{
  return *(double *)v0;
}

uint64_t Material.Layer.Filter.Contents.VariableBlur.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Material.Layer.Filter.Contents.VariableBlur.isDithered.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

id Material.Layer.Filter.Contents.VariableBlur.mask.getter@<X0>(void *a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 0xFF00) == 0x200 || (uint64_t v3 = *(void *)(v1 + 24), (_BYTE)v3))
  {
    *a1 = 0;
  }
  else
  {
    unint64_t v4 = *(void **)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 32);
    uint64_t v6 = *(void *)(v1 + 40);
    uint64_t v7 = *(void *)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    uint64_t v9 = *(void *)(v1 + 64);
    uint64_t v10 = *(void *)(v1 + 72);
    uint64_t v11 = *(void *)(v1 + 80);
    uint64_t v12 = *(void *)(v1 + 88);
    uint64_t v13 = *(void *)(v1 + 96);
    uint64_t v14 = *(void *)(v1 + 104);
    *a1 = v4;
    return outlined copy of VariableBlurStyle.Mask(v4, 0, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v2, BYTE1(v2));
  }
  return result;
}

id Material.Layer.Filter.contents.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(unsigned __int8 *)(v1 + 116);
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  unint64_t v18 = *(void *)v1;
  uint64_t v17 = *(void *)(v1 + 8);
  unint64_t v19 = *(void *)(v1 + 16);
  uint64_t v20 = *(void *)(v1 + 24);
  uint64_t v21 = *(void *)(v1 + 32);
  uint64_t v22 = *(void *)(v1 + 40);
  uint64_t v23 = *(void *)(v1 + 48);
  uint64_t v24 = *(void *)(v1 + 56);
  uint64_t v35 = *(void *)(v1 + 64);
  uint64_t v34 = *(void *)(v1 + 72);
  uint64_t v33 = *(void *)(v1 + 80);
  uint64_t v32 = *(void *)(v1 + 88);
  uint64_t v31 = *(void *)(v1 + 96);
  uint64_t v30 = *(void *)(v1 + 104);
  char v25 = 1;
  unint64_t v26 = *(void *)v1;
  int v27 = *(_DWORD *)(v1 + 112);
  switch(v2)
  {
    case 0:
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      int v16 = 0;
      uint64_t v3 = v17 & 0x101;
      char v25 = 5;
      unint64_t v26 = v18;
      goto LABEL_14;
    case 1:
      uint64_t v3 = v17 & 0x101;
      char v25 = 7;
      unint64_t v26 = v18;
      unint64_t v4 = v19;
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      uint64_t v9 = v24;
      uint64_t v10 = v35;
      uint64_t v12 = v33;
      uint64_t v11 = v34;
      uint64_t v14 = v31;
      uint64_t v13 = v32;
      uint64_t v15 = v30;
      int v16 = v27;
      goto LABEL_14;
    case 4:
      uint64_t v14 = v33;
      uint64_t v11 = v34;
      uint64_t v12 = v33 & 1;
      char v25 = 4;
      unint64_t v26 = v18;
      uint64_t v3 = v17;
      unint64_t v4 = v19;
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      uint64_t v9 = v24;
      uint64_t v10 = v35;
      goto LABEL_14;
    case 7:
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      int v16 = 0;
      char v25 = 3;
      unint64_t v26 = v18;
      goto LABEL_14;
    case 8:
      goto LABEL_14;
    case 13:
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      int v16 = 0;
      unint64_t v4 = v19;
      char v25 = 6;
      unint64_t v26 = v18;
      uint64_t v3 = v17;
      goto LABEL_14;
    case 14:
      char v25 = 2;
      unint64_t v26 = v18;
      uint64_t v3 = v17;
      unint64_t v4 = v19;
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      uint64_t v9 = v24;
      goto LABEL_14;
    case 16:
      if (v17 | v18 | v19 | v20 | v21 | v22 | v23 | v24 | v35 | v34 | v33 | v32 | v31 | v30) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v27 == 0;
      }
      if (!v28) {
        goto LABEL_15;
      }
      unint64_t v26 = 0;
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      int v16 = 0;
      char v25 = 0;
LABEL_14:
      *(void *)a1 = v26;
      *(void *)(a1 + 8) = v3;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 64) = v10;
      *(void *)(a1 + 72) = v11;
      *(void *)(a1 + 80) = v12;
      *(void *)(a1 + 88) = v13;
      *(void *)(a1 + 96) = v14;
      *(void *)(a1 + 104) = v15;
      *(_DWORD *)(a1 + 112) = v16;
      *(unsigned char *)(a1 + 116) = v25;
      return outlined copy of GraphicsFilter((id)v18, v17, (id)v19, v20, v21, v22, v23, v24, v35, v34, v33, v32, v31, v30, v27, SBYTE2(v27));
    default:
LABEL_15:
      __break(1u);
      JUMPOUT(0x2460B960CLL);
  }
}

uint64_t Material.ForegroundStyle.Contents.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 80);
  long long v3 = 0uLL;
  if (*(unsigned char *)(result + 80))
  {
    if (v2 == 1)
    {
      uint64_t v2 = *(void *)(result + 16);
      char v4 = 0;
      uint64_t v5 = v2;
      long long v6 = 0uLL;
      long long v7 = 0uLL;
      switch(*(void *)(result + 16))
      {
        case 1u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 1;
          break;
        case 2u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 2;
          break;
        case 3u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 3;
          break;
        case 4u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 4;
          break;
        case 5u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 5;
          break;
        case 6u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 6;
          break;
        case 7u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 7;
          break;
        case 8u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 8;
          break;
        case 9u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 9;
          break;
        case 0xAu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 10;
          break;
        case 0xBu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 11;
          break;
        case 0xCu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 12;
          break;
        case 0xDu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 13;
          break;
        case 0xEu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 14;
          break;
        case 0xFu:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 15;
          break;
        case 0x10u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 20;
          break;
        case 0x11u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 21;
          break;
        case 0x12u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 23;
          break;
        case 0x13u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 26;
          break;
        case 0x14u:
          uint64_t v5 = 0;
          char v4 = 0;
          uint64_t v2 = 27;
          break;
        default:
          break;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(result + 72);
      long long v7 = *(_OWORD *)(result + 56);
      long long v6 = *(_OWORD *)(result + 40);
      char v4 = 1;
      uint64_t v2 = *(void *)(result + 16);
      long long v3 = *(_OWORD *)(result + 24);
    }
  }
  else
  {
    char v4 = 0;
    uint64_t v5 = *(unsigned __int8 *)(result + 80);
    long long v6 = 0uLL;
    long long v7 = 0uLL;
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(void *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 56) = v7;
  *(void *)(a2 + 72) = v5;
  *(unsigned char *)(a2 + 80) = v4;
  return result;
}

uint64_t Material.ForegroundStyle.contents.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  long long v3 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v3;
  long long v4 = *(_OWORD *)(v1 + 48);
  void v6[2] = *(_OWORD *)(v1 + 32);
  void v6[3] = v4;
  v6[4] = *(_OWORD *)(v1 + 64);
  char v7 = v2;
  return Material.ForegroundStyle.Contents.init(_:)((uint64_t)v6, a1);
}

uint64_t specialized static Material.ForegroundStyle.Storage.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  int v6 = *((unsigned __int8 *)a2 + 80);
  if (!*((unsigned char *)a1 + 80))
  {
    if (!*((unsigned char *)a2 + 80))
    {
      BOOL v15 = *(float *)&v2 == *(float *)&v5;
      if (*((float *)&v2 + 1) != *((float *)&v5 + 1)) {
        BOOL v15 = 0;
      }
      if (*(float *)&v3 != COERCE_FLOAT(a2[1])) {
        BOOL v15 = 0;
      }
      char v14 = *((float *)&v3 + 1) == *((float *)&v4 + 1) && v15;
      return v14 & 1;
    }
LABEL_26:
    char v14 = 0;
    return v14 & 1;
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = a2[2];
  if (*((unsigned char *)a1 + 80) != 1)
  {
    unint64_t v17 = a2[3];
    unint64_t v16 = a2[4];
    unint64_t v19 = a2[5];
    unint64_t v18 = a2[6];
    unint64_t v20 = a2[7];
    unint64_t v29 = a2[8];
    unint64_t v30 = a2[9];
    uint64_t v22 = a1[8];
    uint64_t v21 = a1[9];
    uint64_t v24 = a1[6];
    uint64_t v23 = a1[7];
    uint64_t v26 = a1[4];
    uint64_t v25 = a1[5];
    uint64_t v27 = a1[3];
    v31[0] = v2;
    v31[1] = v3;
    v31[2] = v7;
    v31[3] = v27;
    v31[4] = v26;
    v31[5] = v25;
    v31[6] = v24;
    v31[7] = v23;
    v31[8] = v22;
    v31[9] = v21;
    if (v6 == 2)
    {
      v32[0] = v5;
      v32[1] = v4;
      long long v32[2] = v8;
      int v32[3] = v17;
      v32[4] = v16;
      v32[5] = v19;
      _OWORD v32[6] = v18;
      void v32[7] = v20;
      v32[8] = v29;
      v32[9] = v30;
      char v14 = specialized static _ColorMatrix.== infix(_:_:)(v31, v32);
      return v14 & 1;
    }
    goto LABEL_26;
  }
  if (v6 != 1) {
    goto LABEL_26;
  }
  unint64_t v9 = HIDWORD(v5);
  unint64_t v10 = HIDWORD(v4);
  BOOL v11 = *(float *)&v2 == COERCE_FLOAT(*a2) && *((float *)&v2 + 1) == *(float *)&v9;
  BOOL v12 = v11 && *(float *)&v3 == COERCE_FLOAT(a2[1]);
  if (!v12 || *((float *)&v3 + 1) != *(float *)&v10) {
    goto LABEL_26;
  }
  char v14 = v8 == v7;
  return v14 & 1;
}

uint64_t specialized static Material.ForegroundStyle.== infix(_:_:)(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  int v6 = *((unsigned __int8 *)a2 + 80);
  if (!*((unsigned char *)a1 + 80))
  {
    if (*((unsigned char *)a2 + 80)) {
      return 0;
    }
    unint64_t v14 = HIDWORD(v5);
    unint64_t v15 = HIDWORD(v4);
    BOOL v16 = *(float *)&v2 == COERCE_FLOAT(*a2) && *((float *)&v2 + 1) == *(float *)&v14;
    BOOL v17 = v16 && *(float *)&v3 == COERCE_FLOAT(a2[1]);
    return v17 && *((float *)&v3 + 1) == *(float *)&v15;
  }
  uint64_t v7 = a1[2];
  unint64_t v8 = a2[2];
  if (*((unsigned char *)a1 + 80) == 1)
  {
    if (v6 != 1) {
      return 0;
    }
    unint64_t v9 = HIDWORD(v5);
    BOOL v10 = *(float *)&v2 == COERCE_FLOAT(*a2) && *((float *)&v2 + 1) == *(float *)&v9;
    BOOL v11 = v10 && *(float *)&v3 == *(float *)&v4;
    BOOL v12 = v11 && *((float *)&v3 + 1) == *((float *)&v4 + 1);
    return v12 && (v8 ^ v7) == 0;
  }
  unint64_t v20 = a2[3];
  unint64_t v19 = a2[4];
  unint64_t v22 = a2[5];
  unint64_t v21 = a2[6];
  unint64_t v23 = a2[7];
  unint64_t v32 = a2[8];
  unint64_t v33 = a2[9];
  uint64_t v25 = a1[8];
  uint64_t v24 = a1[9];
  uint64_t v27 = a1[6];
  uint64_t v26 = a1[7];
  uint64_t v29 = a1[4];
  uint64_t v28 = a1[5];
  uint64_t v30 = a1[3];
  v34[0] = v2;
  v34[1] = v3;
  v34[2] = v7;
  v34[3] = v30;
  v34[4] = v29;
  v34[5] = v28;
  v34[6] = v27;
  v34[7] = v26;
  v34[8] = v25;
  v34[9] = v24;
  if (v6 == 2)
  {
    v35[0] = v5;
    v35[1] = v4;
    v35[2] = v8;
    v35[3] = v20;
    v35[4] = v19;
    v35[5] = v22;
    v35[6] = v21;
    v35[7] = v23;
    id v35[8] = v32;
    v35[9] = v33;
    if (specialized static _ColorMatrix.== infix(_:_:)(v34, v35)) {
      return 1;
    }
  }
  return 0;
}

BOOL specialized static Material.Layer.Storage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v4 = (int8x16_t *)a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v9 = a2[2];
  unint64_t v8 = (int8x16_t *)a2[3];
  if (v5 < 0)
  {
    if (v9 < 0)
    {
      if (*(float *)&v3 == *(float *)&v7)
      {
        outlined copy of Material.Layer.Storage(*a2, v6, v9);
        outlined copy of Material.Layer.Storage(v3, v2, v5);
        if (*((float *)&v3 + 1) == *((float *)&v7 + 1)
          && *(float *)&v2 == *(float *)&v6
          && *((float *)&v2 + 1) == *((float *)&v6 + 1)
          && *(float *)&v5 == *(float *)&v9)
        {
          outlined copy of Material.Layer.Storage(v7, v6, v9);
          outlined copy of Material.Layer.Storage(v3, v2, v5);
          char v18 = specialized static Array<A>.== infix(_:_:)(v4, v8);
          outlined consume of Material.Layer.Storage(v3, v2, v5);
          outlined consume of Material.Layer.Storage(v7, v6, v9);
          outlined consume of Material.Layer.Storage(v7, v6, v9);
          outlined consume of Material.Layer.Storage(v3, v2, v5);
          return (v18 & 1) != 0;
        }
LABEL_14:
        outlined consume of Material.Layer.Storage(v3, v2, v5);
        outlined consume of Material.Layer.Storage(v7, v6, v9);
        return 0;
      }
      outlined copy of Material.Layer.Storage(*a2, a2[1], v9);
      uint64_t v12 = v3;
      uint64_t v13 = v2;
      uint64_t v14 = v5;
LABEL_13:
      outlined copy of Material.Layer.Storage(v12, v13, v14);
      goto LABEL_14;
    }
    swift_bridgeObjectRetain();
LABEL_12:
    uint64_t v12 = v7;
    uint64_t v13 = v6;
    uint64_t v14 = v9;
    goto LABEL_13;
  }
  if (v9 < 0) {
    goto LABEL_12;
  }
  outlined consume of Material.Layer.Storage(v3, v2, v5);
  outlined consume of Material.Layer.Storage(v7, v6, v9);
  BOOL v10 = *(float *)&v3 == *(float *)&v7;
  if (*((float *)&v3 + 1) != *((float *)&v7 + 1)) {
    BOOL v10 = 0;
  }
  if (*(float *)&v2 != *(float *)&v6) {
    BOOL v10 = 0;
  }
  return *((float *)&v2 + 1) == *((float *)&v6 + 1) && v10;
}

BOOL specialized static Material.Layer.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  float v5 = *(float *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  long long v8 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v9;
  uint64_t v10 = 0;
  if (specialized static Material.Layer.Storage.== infix(_:_:)((uint64_t *)v13, (uint64_t *)v12) && v2 == v5)
  {
    if (v4)
    {
      if (v7)
      {
        uint64_t v10 = 1;
        outlined copy of GraphicsBlendMode(v6, 1);
        outlined copy of GraphicsBlendMode(v3, 1);
        outlined consume of GraphicsBlendMode(v3, 1);
        outlined consume of GraphicsBlendMode(v6, 1);
        if (v3 == v6) {
          return v10;
        }
        return 0;
      }
      swift_unknownObjectRetain_n();
      goto LABEL_11;
    }
    if (v7)
    {
LABEL_11:
      outlined copy of GraphicsBlendMode(v6, v7);
      outlined consume of GraphicsBlendMode(v3, v4);
      outlined consume of GraphicsBlendMode(v6, v7);
      outlined consume of GraphicsBlendMode(v3, v4);
      return 0;
    }
    outlined consume of GraphicsBlendMode(v3, 0);
    outlined consume of GraphicsBlendMode(v6, 0);
    return v3 == v6;
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type Material.Layers and conformance Material.Layers()
{
  unint64_t result = lazy protocol witness table cache variable for type Material.Layers and conformance Material.Layers;
  if (!lazy protocol witness table cache variable for type Material.Layers and conformance Material.Layers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Material.Layers and conformance Material.Layers);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialProviderBoxBase and conformance MaterialProviderBoxBase()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialProviderBoxBase and conformance MaterialProviderBoxBase;
  if (!lazy protocol witness table cache variable for type MaterialProviderBoxBase and conformance MaterialProviderBoxBase)
  {
    type metadata accessor for MaterialProviderBoxBase();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialProviderBoxBase and conformance MaterialProviderBoxBase);
  }
  return result;
}

uint64_t type metadata accessor for MaterialProviderBoxBase()
{
  return self;
}

uint64_t dispatch thunk of MaterialProvider.resolveLayers(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of MaterialProvider.resolveForegroundStyle(level:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t assignWithCopy for Material.Context(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material.Context(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.Context(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.Context()
{
  return &type metadata for Material.Context;
}

uint64_t destroy for Material.Layer(uint64_t a1)
{
  outlined consume of Material.Layer.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 48);

  return outlined consume of GraphicsBlendMode(v2, v3);
}

uint64_t initializeWithCopy for Material.Layer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  outlined copy of Material.Layer.Storage(*a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v2 + 8);
  uint64_t v8 = v2[5];
  LOBYTE(v2) = *((unsigned char *)v2 + 48);
  outlined copy of GraphicsBlendMode(v8, (char)v2);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = (_BYTE)v2;
  return a1;
}

uint64_t assignWithCopy for Material.Layer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  outlined copy of Material.Layer.Storage(*a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  outlined consume of Material.Layer.Storage(v8, v9, v10);
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v2 + 8);
  uint64_t v11 = v2[5];
  LOBYTE(v2) = *((unsigned char *)v2 + 48);
  outlined copy of GraphicsBlendMode(v11, (char)v2);
  uint64_t v12 = *(void *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = (_BYTE)v2;
  outlined consume of GraphicsBlendMode(v12, v13);
  return a1;
}

uint64_t assignWithTake for Material.Layer(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of Material.Layer.Storage(v4, v5, v6);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  char v10 = *(unsigned char *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v8;
  outlined consume of GraphicsBlendMode(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material.Layer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  HIDWORD(v3) = *(_DWORD *)(a1 + 20);
  LODWORD(v3) = HIDWORD(v3);
  unsigned int v2 = v3 >> 31;
  if (v2 > 0x80000000) {
    int v4 = ~v2;
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.Layer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      HIDWORD(v3) = -a2;
      LODWORD(v3) = -a2;
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(v3 >> 1) << 32;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.Layer()
{
  return &type metadata for Material.Layer;
}

uint64_t destroy for Material.Layer.Filter(uint64_t a1, uint64_t a2)
{
  return destroy for Material.Layer.Filter(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))outlined consume of GraphicsFilter);
}

uint64_t initializeWithCopy for Material.Layer.Filter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for Material.Layer.Filter(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of GraphicsFilter);
}

uint64_t *assignWithCopy for Material.Layer.Filter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Material.Layer.Filter(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of GraphicsFilter, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))outlined consume of GraphicsFilter);
}

uint64_t *assignWithTake for Material.Layer.Filter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Material.Layer.Filter(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))outlined consume of GraphicsFilter);
}

ValueMetadata *type metadata accessor for Material.Layer.Filter()
{
  return &type metadata for Material.Layer.Filter;
}

__n128 __swift_memcpy81_4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *type metadata accessor for Material.ForegroundStyle()
{
  return &type metadata for Material.ForegroundStyle;
}

ValueMetadata *type metadata accessor for Material.Layers()
{
  return &type metadata for Material.Layers;
}

uint64_t method lookup function for MaterialProviderBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MaterialProviderBoxBase);
}

uint64_t dispatch thunk of MaterialProviderBoxBase.hash(into:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MaterialProviderBoxBase.hashValue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

void *initializeWithCopy for Material.Layer.Contents(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for Material.Layer.Contents(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Contents);
}

uint64_t *assignWithCopy for Material.Layer.Contents(uint64_t *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for Material.Layer.Contents(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Contents, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Contents);
}

void *assignWithTake for Material.Layer.Contents(void *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Material.Layer.Contents(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Contents);
}

ValueMetadata *type metadata accessor for Material.Layer.Contents()
{
  return &type metadata for Material.Layer.Contents;
}

uint64_t initializeWithCopy for Material.Layer.Contents.Backdrop(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Material.Layer.Contents.Backdrop(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Material.Layer.Contents.Backdrop(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Material.Layer.Contents.Backdrop()
{
  return &type metadata for Material.Layer.Contents.Backdrop;
}

id outlined copy of Material.Layer.Filter.Contents(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, unsigned __int8 a16, __int16 a17, char a18)
{
  if (a18 == 7) {
    return outlined copy of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t destroy for Material.Layer.Filter.Contents(uint64_t a1, uint64_t a2)
{
  return destroy for Material.Layer.Filter(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))outlined consume of Material.Layer.Filter.Contents);
}

uint64_t destroy for Material.Layer.Filter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, uint64_t))
{
  BYTE4(v4) = *(unsigned char *)(a1 + 116);
  LODWORD(v4) = *(_DWORD *)(a1 + 112);
  return a3(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), v4);
}

void outlined consume of Material.Layer.Filter.Contents(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, unsigned __int8 a16, __int16 a17, char a18)
{
  if (a18 == 7) {
    outlined consume of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t initializeWithCopy for Material.Layer.Filter.Contents(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for Material.Layer.Filter(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Filter.Contents);
}

uint64_t initializeWithCopy for Material.Layer.Filter(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  uint64_t v13 = a2[8];
  uint64_t v16 = a2[9];
  uint64_t v17 = a2[10];
  uint64_t v18 = a2[11];
  uint64_t v19 = a2[12];
  uint64_t v20 = a2[13];
  int v21 = *((_DWORD *)a2 + 28);
  char v22 = *((unsigned char *)a2 + 116);
  BYTE4(v15) = v22;
  LODWORD(v15) = v21;
  a4(*a2, v6, v7, v8, v9, v10, v11, v12, v13, v16, v17, v18, v19, v20, v15);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = v17;
  *(void *)(a1 + 88) = v18;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v20;
  *(_DWORD *)(a1 + 112) = v21;
  *(unsigned char *)(a1 + 116) = v22;
  return a1;
}

uint64_t *assignWithCopy for Material.Layer.Filter.Contents(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for Material.Layer.Filter(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Filter.Contents, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Filter.Contents);
}

uint64_t *assignWithCopy for Material.Layer.Filter(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v32 = a2[9];
  uint64_t v33 = a2[10];
  uint64_t v34 = a2[11];
  uint64_t v35 = a2[12];
  uint64_t v36 = a2[13];
  int v37 = *((_DWORD *)a2 + 28);
  char v38 = *((unsigned char *)a2 + 116);
  BYTE4(v30) = v38;
  LODWORD(v30) = v37;
  a4(*a2, v7, v8, v9, v10, v11, v12, v13, v14, v32, v33, v34, v35, v36, v30);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v20 = a1[5];
  uint64_t v21 = a1[6];
  uint64_t v22 = a1[7];
  long long v23 = *((_OWORD *)a1 + 4);
  long long v24 = *((_OWORD *)a1 + 5);
  uint64_t v25 = a1[12];
  uint64_t v26 = a1[13];
  int v27 = *((_DWORD *)a1 + 28);
  char v28 = *((unsigned char *)a1 + 116);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  a1[7] = v13;
  a1[8] = v14;
  a1[9] = v32;
  a1[10] = v33;
  a1[11] = v34;
  a1[12] = v35;
  a1[13] = v36;
  *((_DWORD *)a1 + 28) = v37;
  *((unsigned char *)a1 + 116) = v38;
  BYTE4(v31) = v28;
  LODWORD(v31) = v27;
  a5(v15, v16, v17, v18, v19, v20, v21, v22, v23, *((void *)&v23 + 1), v24, *((void *)&v24 + 1), v25, v26, v31);
  return a1;
}

uint64_t *assignWithTake for Material.Layer.Filter.Contents(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for Material.Layer.Filter(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Filter.Contents);
}

uint64_t *assignWithTake for Material.Layer.Filter(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t))
{
  int v6 = *(_DWORD *)(a2 + 112);
  char v7 = *(unsigned char *)(a2 + 116);
  uint64_t v8 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[7];
  long long v16 = *((_OWORD *)a1 + 4);
  long long v17 = *((_OWORD *)a1 + 5);
  uint64_t v18 = a1[12];
  uint64_t v19 = a1[13];
  int v20 = *((_DWORD *)a1 + 28);
  char v21 = *((unsigned char *)a1 + 116);
  long long v22 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v22;
  long long v23 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v23;
  long long v24 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)a1 + 5) = v24;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  *((_DWORD *)a1 + 28) = v6;
  *((unsigned char *)a1 + 116) = v7;
  BYTE4(v26) = v21;
  LODWORD(v26) = v20;
  a4(v8, v10, v9, v11, v12, v13, v14, v15, v16, *((void *)&v16 + 1), v17, *((void *)&v17 + 1), v18, v19, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material.Layer.Filter.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 117)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 116);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.Layer.Filter.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)id result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 117) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 117) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 116) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Material.Layer.Filter.Contents(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

uint64_t destructiveInjectEnumTag for Material.Layer.Filter.Contents(uint64_t result, char a2)
{
  *(unsigned char *)(result + 116) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents()
{
  return &type metadata for Material.Layer.Filter.Contents;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.AverageColor()
{
  return &type metadata for Material.Layer.Filter.Contents.AverageColor;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.Brightness()
{
  return &type metadata for Material.Layer.Filter.Contents.Brightness;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.ColorCurves()
{
  return &type metadata for Material.Layer.Filter.Contents.ColorCurves;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.Saturation()
{
  return &type metadata for Material.Layer.Filter.Contents.Saturation;
}

uint64_t getEnumTagSinglePayload for Material.Layer.Filter.Contents.ColorMatrix(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.Layer.Filter.Contents.ColorMatrix(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.ColorMatrix()
{
  return &type metadata for Material.Layer.Filter.Contents.ColorMatrix;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.GaussianBlur()
{
  return &type metadata for Material.Layer.Filter.Contents.GaussianBlur;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.LuminanceCurve()
{
  return &type metadata for Material.Layer.Filter.Contents.LuminanceCurve;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.VariableBlur()
{
  return &type metadata for Material.Layer.Filter.Contents.VariableBlur;
}

void **assignWithCopy for Material.Layer.Filter.Contents.VariableBlur.Mask(void **a1, void **a2)
{
  unsigned int v3 = *a2;
  BOOL v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for Material.Layer.Filter.Contents.VariableBlur.Mask(void **a1, void **a2)
{
  unsigned int v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Material.Layer.Filter.Contents.VariableBlur.Mask()
{
  return &type metadata for Material.Layer.Filter.Contents.VariableBlur.Mask;
}

uint64_t getEnumTagSinglePayload for Material.ForegroundStyle.Contents(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.ForegroundStyle.Contents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Material.ForegroundStyle.Contents(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Material.ForegroundStyle.Contents()
{
  return &type metadata for Material.ForegroundStyle.Contents;
}

uint64_t getEnumTagSinglePayload for Material.ForegroundStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.ForegroundStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)id result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for Material.ForegroundStyle.Storage()
{
  return &unk_26FA946D8;
}

uint64_t destroy for Material.Layer.Storage(uint64_t *a1)
{
  return outlined consume of Material.Layer.Storage(*a1, a1[1], a1[2]);
}

void *initializeWithCopy for Material.Layer.Storage(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for Material.Layer.Contents(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Storage);
}

void *initializeWithCopy for Material.Layer.Contents(void *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a4(*a2, v6, v7, v8);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return a1;
}

uint64_t *assignWithCopy for Material.Layer.Storage(uint64_t *a1, void *a2, uint64_t a3)
{
  return assignWithCopy for Material.Layer.Contents(a1, a2, a3, (void (*)(void, uint64_t, uint64_t, uint64_t))outlined copy of Material.Layer.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Storage);
}

uint64_t *assignWithCopy for Material.Layer.Contents(uint64_t *a1, void *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  a4(*a2, v8, v9, v10);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v9;
  a1[3] = v10;
  a5(v11, v12, v13, v14);
  return a1;
}

void *assignWithTake for Material.Layer.Storage(void *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for Material.Layer.Contents(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Material.Layer.Storage);
}

void *assignWithTake for Material.Layer.Contents(void *a1, _OWORD *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v9 = a1[3];
  long long v10 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v10;
  a4(v6, v8, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Material.Layer.Contents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  HIDWORD(v3) = *(_DWORD *)(a1 + 20);
  LODWORD(v3) = HIDWORD(v3);
  unsigned int v2 = v3 >> 31;
  if (v2 > 0x80000000) {
    int v4 = ~v2;
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.Layer.Contents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      HIDWORD(v3) = -a2;
      LODWORD(v3) = -a2;
      *(void *)id result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(v3 >> 1) << 32;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Material.Layer.Storage(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2 << 31;
  return result;
}

void *type metadata accessor for Material.Layer.Storage()
{
  return &unk_26FA94768;
}

uint64_t _ClipEffect.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ClipEffect.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ClipEffect.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ClipEffect.style.getter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 36));
  unsigned int v3 = *v2;
  if (v2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return v4 | v3;
}

uint64_t _ClipEffect.style.setter(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (unsigned char *)(v2 + *(int *)(a2 + 36));
  unsigned char *v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_ClipEffect.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ClipEffect.init(shape:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _ClipEffect();
  uint64_t v7 = (unsigned char *)(a4 + *(int *)(result + 36));
  *uint64_t v7 = a2 & 1;
  v7[1] = HIBYTE(a2) & 1;
  return result;
}

uint64_t _ClipEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _ClipEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*_ClipEffect.animatableData.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v7 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v5[2] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  void v5[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  void v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _ClipEffect.animatableData.modify;
}

void _ClipEffect.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = (void *)(*a1)[4];
  int v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized _ClipEffect.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _ClipEffect.animatableData.setter((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _ClipEffect<A>(uint64_t a1, uint64_t a2)
{
  specialized _ClipEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ClipEffect<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _OWORD v5[2] = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  void v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _ClipEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance _ClipEffect<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _ClipEffect<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  unsigned int v3 = *(void **)(*(void *)a1 + 32);
  int v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    specialized _ClipEffect.animatableData.setter((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _ClipEffect.animatableData.setter(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t View.cornerRadius(_:antialiased:)(char a1, uint64_t a2, uint64_t a3, double a4)
{
  char v10 = 1;
  *(double *)uint64_t v9 = a4;
  *(double *)&v9[1] = a4;
  lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  if (a1) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  return View.clipShape<A>(_:style:)((uint64_t)v9, v7, a2, (uint64_t)&type metadata for RoundedRectangle, a3);
}

void HoverEffectContent.clipShape<A>(_:style:)()
{
}

uint64_t VisualEffect.clipShape<A>(_:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _ClipEffect();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, a4, v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a4);
  uint64_t v19 = &v18[*(int *)(v14 + 36)];
  *uint64_t v19 = a2 & 1;
  v19[1] = HIBYTE(a2) & 1;
  swift_getWitnessTable();
  VisualEffect.rendererEffect<A>(_:)((uint64_t)v18, a3, v14, v21, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t specialized _ClipEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

uint64_t sub_2460BBC4C()
{
  outlined consume of Path.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t sub_2460BBC8C()
{
  uint64_t v0 = type metadata accessor for _ClipEffect();
  return _ClipEffect.animatableData.getter(v0);
}

uint64_t sub_2460BBCC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ClipEffect();
  return specialized _ClipEffect.animatableData.setter(a1, v2);
}

uint64_t sub_2460BBD08()
{
  return 16;
}

__n128 sub_2460BBD14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ClipEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_WORD *)((char *)v4 + v6) = *(_WORD *)((char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithTake for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_WORD *)(*(void *)(v5 + 32) + a1) = *(_WORD *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  size_t v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _ClipEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 2;
  char v10 = 8 * (v6 + 2);
  if ((v6 + 2) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _ClipEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 2;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -2)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 2);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x2460BC2B4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          if (a2 > 0xFE) {
            *(_WORD *)&a1[v9] = a2 - 255;
          }
          else {
            a1[v9] = a2 + 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t sub_2460BC2DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_2460BC34C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(a1, &lazy cache variable for type metadata for _ClipEffect<Rectangle>, (void (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle);
}

uint64_t sub_2460BC374(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(a1, &lazy cache variable for type metadata for _ClipEffect<RoundedRectangle>, (void (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA11_ClipEffectVyAA9RectangleVGGAaBHPxAaBHD1__AiA0C8ModifierHPyHCHCTm(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

void type metadata accessor for _ClipEffect<Rectangle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ClipEffect();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2460BC468(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_2460BC470()
{
  return swift_getWitnessTable();
}

uint64_t TupleTypeDescription.contentTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static TupleDescriptor.typeCache.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t View.animation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  v6[0] = partial apply for closure #1 in View.animation(_:);
  v6[1] = v4;
  View.modifier<A>(_:)(v6, a2, &type metadata for _TransactionModifier);
  swift_retain();
  return swift_release();
}

uint64_t _PushPopTransactionModifier.init(content:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueTransactionModifier.init(value:transform:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _PushPopTransactionModifier, a6);
}

uint64_t ViewModifier.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  ViewModifier.transaction(_:)((uint64_t)partial apply for closure #1 in ViewModifier.animation(_:), v6, a2, a3);
  swift_retain();

  return swift_release();
}

uint64_t closure #1 in View.animation(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t result = swift_release();
  if ((v5 & 1) == 0)
  {
    swift_retain_n();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(a1, a2);
    swift_release_n();
    return swift_release();
  }
  return result;
}

uint64_t static PlaceholderContentView.withPlaceholderContent<A>(result:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = PlaceholderContentView.init()(v10, v7);
  a1(v11);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
}

uint64_t key path setter for _TransactionModifier.transform : _TransactionModifier(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout CGRect) -> (@out ());
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t _TransactionModifier.transform.getter(uint64_t a1)
{
  return a1;
}

uint64_t _TransactionModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TransactionModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _TransactionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t (*_ValueTransactionModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path setter for _ValueTransactionModifier.transform : <A>_ValueTransactionModifier<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = (void *)(a2 + *(int *)(type metadata accessor for _ValueTransactionModifier() + 36));
  swift_retain();
  uint64_t result = swift_release();
  *uint64_t v6 = thunk for @escaping @callee_guaranteed (@inout Transaction) -> (@out ())partial apply;
  v6[1] = v5;
  return result;
}

uint64_t _ValueTransactionModifier.transform.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_release();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*_ValueTransactionModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_PushPopTransactionModifier.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_PushPopTransactionModifier.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.savedTransactions.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v4;
}

uint64_t _ViewInputs.savedTransactions.setter(uint64_t a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in ChildTransaction.value.getter(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t protocol witness for Rule.value.getter in conformance ChildTransaction@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v5 = *(void *)AGGraphGetValue();
  swift_retain();
  uint64_t result = specialized Attribute.syncMainIfReferences<A>(do:)(v3, (uint64_t)&v5);
  *a1 = v5;
  return result;
}

_DWORD *protocol witness for Rule.value.getter in conformance ChildValueTransaction@<X0>(void *a1@<X8>)
{
  uint64_t result = ChildValueTransaction.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t _GraphInputs.savedTransactions.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (uint64_t *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.savedTransactions : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.savedTransactions.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _GraphInputs.savedTransactions : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t _GraphInputs.savedTransactions.setter(uint64_t a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t (*_GraphInputs.savedTransactions.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v5 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = v6;
  return _GraphInputs.savedTransactions.modify;
}

uint64_t _GraphInputs.savedTransactions.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)a1[3];
  uint64_t v4 = *a1;
  swift_retain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v3, v4);
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.SavedTransactionKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static _GraphInputs.SavedTransactionKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t sub_2460BD154()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewModifier.animation(_:)(uint64_t *a1)
{
  return closure #1 in View.animation(_:)(a1, *(void *)(v1 + 16));
}

uint64_t key path getter for _ViewInputs.savedTransactions : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.savedTransactions.getter();
  *a1 = result;
  return result;
}

uint64_t (*_ViewInputs.savedTransactions.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v5 = (uint64_t *)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  *a1 = v6;
  return _GraphInputs.savedTransactions.modify;
}

uint64_t sub_2460BD320()
{
  return 16;
}

__n128 sub_2460BD32C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460BD338@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  a2[1] = (uint64_t (*)())v5;

  return swift_retain();
}

uint64_t sub_2460BD3A8()
{
  return 16;
}

__n128 sub_2460BD3B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2460BD40C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_2460BD470()
{
  return &protocol witness table for _PushPopTransactionModifier<A>;
}

uint64_t sub_2460BD47C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_2460BD504()
{
  return &protocol witness table for CustomModifier<A, B>;
}

ValueMetadata *type metadata accessor for _GraphInputs.SavedTransactionKey()
{
  return &type metadata for _GraphInputs.SavedTransactionKey;
}

ValueMetadata *type metadata accessor for ChildValueTransaction()
{
  return &type metadata for ChildValueTransaction;
}

unint64_t instantiation function for generic protocol witness table for ChildValueTransaction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2460BD934()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t ViewGraphGeometryObservers.Observer.Storage.transition(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = a1;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v56 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v53 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v53 - v10;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v53 - v18;
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v55 = (char *)&v53 - v22;
  uint64_t v58 = v2;
  uint64_t v59 = (void (*)(void))v4;
  long long v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v23(v11, v2, a2, v21);
  uint64_t v62 = v11;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v34 = v56;
      ((void (*)(char *, char *, uint64_t))v23)(v56, v62, a2);
      BOOL v54 = &v34[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v35 = v60;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v36(v16, v34, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v37 = v61;
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v49 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
        v49(v58, a2);
        uint64_t v46 = v55;
        uint64_t v59 = *(void (**)(void))(v35 + 32);
        ((void (*)(char *, char *, uint64_t))v59)(v55, v16, AssociatedTypeWitness);
        uint64_t v50 = *(void (**)(char *, uint64_t))(v35 + 8);
        v50(v54, AssociatedTypeWitness);
        v50(v56, AssociatedTypeWitness);
        uint64_t v48 = v61;
        uint64_t v45 = v58;
        v49((uint64_t)v62, a2);
        goto LABEL_11;
      }
      uint64_t v57 = (void (*)(uint64_t, uint64_t, uint64_t))v36;
      char v38 = v34;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v16, AssociatedTypeWitness);
      char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      v39(v38, AssociatedTypeWitness);
      if (v40)
      {
        uint64_t v41 = v58;
        unint64_t v42 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
        v42(v58, a2);
        v57(v41, v37, AssociatedTypeWitness);
        swift_storeEnumTagMultiPayload();
        v39(v54, AssociatedTypeWitness);
        v42((uint64_t)v62, a2);
        return 0;
      }
      v39(v54, AssociatedTypeWitness);
      int v27 = v62;
      uint64_t v26 = v59;
      goto LABEL_13;
    case 2u:
      uint64_t v28 = v58;
      uint64_t v29 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
      v29(v58, a2);
      uint64_t v30 = v28 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      (*((void (**)(uint64_t))v57 + 7))(v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v30, v61, AssociatedTypeWitness);
      uint64_t v31 = 1;
      swift_storeEnumTagMultiPayload();
      v29((uint64_t)v62, a2);
      return v31;
    case 3u:
      uint64_t v32 = v58;
      uint64_t v33 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
      v33(v58, a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v32, v61, AssociatedTypeWitness);
      swift_storeEnumTagMultiPayload();
      v33((uint64_t)v62, a2);
      return 0;
    default:
      ((void (*)(char *, char *, uint64_t))v23)(v8, v62, a2);
      uint64_t v24 = v60;
      uint64_t v25 = *(void (**)(void))(v60 + 32);
      ((void (*)(char *, char *, uint64_t))v25)(v19, v8, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v19, AssociatedTypeWitness);
        uint64_t v26 = v59;
        int v27 = v62;
LABEL_13:
        (*((void (**)(char *, uint64_t))v26 + 1))(v27, a2);
        return 0;
      }
      else
      {
        uint64_t v43 = (void (*)(uint64_t, uint64_t))*((void *)v59 + 1);
        char v44 = v25;
        uint64_t v45 = v58;
        v43(v58, a2);
        uint64_t v46 = v55;
        uint64_t v59 = v44;
        v44();
        uint64_t v47 = (void (*)(char *, uint64_t))v43;
        uint64_t v48 = v61;
        uint64_t v35 = v24;
        v47(v62, a2);
LABEL_11:
        uint64_t v51 = v45 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        ((void (*)(uint64_t, char *, uint64_t))v59)(v45, v46, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v51, v48, AssociatedTypeWitness);
        uint64_t v31 = 1;
        swift_storeEnumTagMultiPayload();
      }
      return v31;
  }
}

uint64_t ViewGraphGeometryObservers.Observer.sizeToNotifyIfNeeded()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for ViewGraphGeometryObservers.Observer.Storage();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v30 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)v30 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  uint64_t v31 = v3;
  v18(v9, v3, v6, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *(int *)(swift_getTupleTypeMetadata2() + 48);
    v30[0] = v5;
    v30[1] = v4;
    uint64_t v20 = &v9[v19];
    double v21 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v21(v17, v9, AssociatedTypeWitness);
    uint64_t v22 = v20;
    long long v23 = (void (*)(uint64_t, char *, uint64_t))v21;
    uint64_t v24 = v32;
    v21(v13, v22, AssociatedTypeWitness);
    uint64_t v25 = v31;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v31, v6);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(v25, v13, AssociatedTypeWitness);
    swift_storeEnumTagMultiPayload();
    swift_getAssociatedConformanceWitness();
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v27 = *(void (**)(char *, uint64_t))(v11 + 8);
    v27(v17, AssociatedTypeWitness);
    uint64_t v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    if (v26)
    {
      v27(v13, AssociatedTypeWitness);
      return (*v28)(v24, 1, 1, AssociatedTypeWitness);
    }
    else
    {
      v23(v24, v13, AssociatedTypeWitness);
      return (*v28)(v24, 0, 1, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v32, 1, 1, AssociatedTypeWitness);
  }
}

uint64_t dispatch thunk of static ViewGraphGeometryMeasurer.measure(given:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static ViewGraphGeometryMeasurer.measure(proposal:layoutComputer:insets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static ViewGraphGeometryMeasurer.invalidValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

void *initializeBufferWithCopyOfBuffer for ViewGraphGeometryObservers.Observer(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = v6 + v7;
  if (((v6 + v8) & ~v8) + v6 <= v6) {
    uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v10 = ((v6 + v7) & ~(unint64_t)v7) + v6;
  }
  if (v10 > 3) {
    goto LABEL_8;
  }
  unsigned int v11 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  uint64_t v12 = 2;
  if (v11 > 0xFFFD) {
    uint64_t v12 = 4;
  }
  if (v11 <= 0xFD) {
LABEL_8:
  }
    uint64_t v12 = 1;
  int v13 = v7 & 0x100000;
  BOOL v14 = v8 <= 7 && v13 == 0;
  if (v14 && ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18)
  {
    if (v10 > 3)
    {
LABEL_16:
      unsigned int v15 = a2[v10];
      goto LABEL_22;
    }
    unsigned int v17 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    if (v17 > 0xFFFD)
    {
      unsigned int v15 = *(_DWORD *)&a2[v10];
    }
    else
    {
      if (v17 <= 0xFD) {
        goto LABEL_16;
      }
      unsigned int v15 = *(unsigned __int16 *)&a2[v10];
    }
LABEL_22:
    unsigned int v18 = v15 - 2;
    if (v15 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v10 < 4) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v10 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_34;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v10 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_34;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v10 < 4) {
LABEL_34:
          }
            v20 |= v18 << (8 * v10);
LABEL_35:
          unsigned int v15 = v20 + 2;
          break;
        default:
          break;
      }
    }
    if (v15 != 1)
    {
      if (v15)
      {
        if (v10 > 3) {
          goto LABEL_50;
        }
        unsigned int v24 = ((1 << (8 * v10)) + 1) >> (8 * v10);
        uint64_t v25 = 2;
        if (v24 > 0xFFFD) {
          uint64_t v25 = 4;
        }
        if (v24 <= 0xFD) {
LABEL_50:
        }
          uint64_t v25 = 1;
        memcpy(a1, a2, v25 + v10);
        if (v10 > 3) {
          goto LABEL_55;
        }
        goto LABEL_52;
      }
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      if (v10 > 3) {
        goto LABEL_41;
      }
      unsigned int v21 = ((1 << (8 * v10)) + 1) >> (8 * v10);
      if (v21 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v10) = 0;
      }
      else
      {
        if (v21 <= 0xFD)
        {
LABEL_41:
          *((unsigned char *)a1 + v10) = 0;
          if (v10 > 3)
          {
LABEL_55:
            uint64_t v27 = 1;
LABEL_64:
            uint64_t v29 = v27 + v10 + 7;
            unint64_t v30 = (unint64_t)a1 + v29;
            uint64_t v31 = (uint64_t *)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);
            uint64_t v33 = *v31;
            uint64_t v32 = v31[1];
            uint64_t v34 = (void *)(v30 & 0xFFFFFFFFFFFFFFF8);
            void *v34 = v33;
            v34[1] = v32;
            goto LABEL_65;
          }
LABEL_52:
          unsigned int v26 = ((1 << (8 * v10)) + 1) >> (8 * v10);
          uint64_t v27 = 2;
          if (v26 > 0xFFFD) {
            uint64_t v27 = 4;
          }
          if (v26 > 0xFD) {
            goto LABEL_64;
          }
          goto LABEL_55;
        }
        *(_WORD *)((char *)a1 + v10) = 0;
      }
LABEL_62:
      BOOL v28 = v21 > 0xFFFD;
      uint64_t v27 = 2;
      if (v28) {
        uint64_t v27 = 4;
      }
      goto LABEL_64;
    }
    uint64_t v22 = ~v8;
    long long v23 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
    v23(a1, a2, AssociatedTypeWitness);
    v23((void *)(((unint64_t)a1 + v9) & v22), (unsigned __int8 *)((unint64_t)&a2[v9] & v22), AssociatedTypeWitness);
    if (v10 <= 3)
    {
      unsigned int v21 = ((1 << (8 * v10)) + 1) >> (8 * v10);
      if (v21 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v10) = 1;
        goto LABEL_62;
      }
      if (v21 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v10) = 1;
        goto LABEL_62;
      }
    }
    *((unsigned char *)a1 + v10) = 1;
    if (v10 > 3) {
      goto LABEL_55;
    }
    goto LABEL_52;
  }
  uint64_t v16 = *(void *)a2;
  *a1 = *(void *)a2;
  a1 = (void *)(v16 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
LABEL_65:
  swift_retain();
  return a1;
}

unsigned __int8 *assignWithCopy for ViewGraphGeometryObservers.Observer(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = AssociatedTypeWitness;
  if (a1 == a2) {
    goto LABEL_70;
  }
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  if (v10 > 3) {
    goto LABEL_6;
  }
  unsigned int v12 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  if (v12 > 0xFFFD)
  {
    unsigned int v11 = *(_DWORD *)&a1[v10];
  }
  else
  {
    if (v12 <= 0xFD)
    {
LABEL_6:
      unsigned int v11 = a1[v10];
      goto LABEL_11;
    }
    unsigned int v11 = *(unsigned __int16 *)&a1[v10];
  }
LABEL_11:
  unsigned int v13 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        if (v10 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        if (v10 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v10 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v15 = *(_DWORD *)a1;
        if (v10 < 4) {
LABEL_23:
        }
          v15 |= v13 << (8 * v10);
LABEL_24:
        unsigned int v11 = v15 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v8;
  if (v11 == 1)
  {
    unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
    v17(a1, AssociatedTypeWitness);
    v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
    if (v10 > 3) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!v11) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, AssociatedTypeWitness);
    }
    if (v10 > 3) {
      goto LABEL_33;
    }
  }
  unsigned int v18 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  if (v18 > 0xFFFD)
  {
    unsigned int v19 = *(_DWORD *)&a2[v10];
    unsigned int v20 = v19 - 2;
    if (v19 < 2) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  if (v18 <= 0xFD)
  {
LABEL_33:
    unsigned int v19 = a2[v10];
    unsigned int v20 = v19 - 2;
    if (v19 < 2) {
      goto LABEL_48;
    }
LABEL_38:
    if (v10 <= 3) {
      uint64_t v21 = v10;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *a2;
        if (v10 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 2:
        int v22 = *(unsigned __int16 *)a2;
        if (v10 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 3:
        int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v10 < 4) {
          goto LABEL_47;
        }
        goto LABEL_61;
      case 4:
        int v22 = *(_DWORD *)a2;
        if (v10 < 4)
        {
LABEL_47:
          unsigned int v19 = (v22 | (v20 << (8 * v10))) + 2;
          goto LABEL_48;
        }
LABEL_61:
        unsigned int v19 = v22 + 2;
        if (v19 == 1) {
          goto LABEL_62;
        }
        goto LABEL_49;
      default:
        goto LABEL_48;
    }
  }
  unsigned int v19 = *(unsigned __int16 *)&a2[v10];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2) {
    goto LABEL_38;
  }
LABEL_48:
  if (v19 == 1)
  {
LABEL_62:
    unsigned int v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
    v26(a1, a2, v5);
    v26((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
    if (v10 <= 3)
    {
      unsigned int v27 = ((1 << (8 * v10)) + 1) >> (8 * v10);
      if (v27 > 0xFFFD)
      {
        *(_DWORD *)&a1[v10] = 1;
        goto LABEL_70;
      }
      if (v27 > 0xFD)
      {
        *(_WORD *)&a1[v10] = 1;
        goto LABEL_70;
      }
    }
    a1[v10] = 1;
    goto LABEL_70;
  }
LABEL_49:
  if (v19)
  {
    if (v10 > 3) {
      goto LABEL_58;
    }
    unsigned int v24 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    uint64_t v25 = 2;
    if (v24 > 0xFFFD) {
      uint64_t v25 = 4;
    }
    if (v24 <= 0xFD) {
LABEL_58:
    }
      uint64_t v25 = 1;
    memcpy(a1, a2, v25 + v10);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    if (v10 > 3)
    {
LABEL_53:
      a1[v10] = 0;
      goto LABEL_70;
    }
    unsigned int v23 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    if (v23 > 0xFFFD)
    {
      *(_DWORD *)&a1[v10] = 0;
    }
    else
    {
      if (v23 <= 0xFD) {
        goto LABEL_53;
      }
      *(_WORD *)&a1[v10] = 0;
    }
  }
LABEL_70:
  uint64_t v28 = *(void *)(v5 - 8);
  unint64_t v29 = *(void *)(v28 + 64);
  unint64_t v30 = ((v29 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)) + v29;
  if (v30 > v29) {
    unint64_t v29 = v30;
  }
  if (v29 > 3) {
    goto LABEL_76;
  }
  unsigned int v31 = ((1 << (8 * v29)) + 1) >> (8 * v29);
  uint64_t v32 = 2;
  if (v31 > 0xFFFD) {
    uint64_t v32 = 4;
  }
  if (v31 <= 0xFD) {
LABEL_76:
  }
    uint64_t v32 = 1;
  uint64_t v33 = v32 + v29 + 7;
  uint64_t v34 = (void *)((unint64_t)&a1[v33] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)((unint64_t)&a2[v33] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v35[1];
  void *v34 = *v35;
  v34[1] = v36;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for ViewGraphGeometryObservers.Observer(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_5;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a2[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_5:
      unsigned int v10 = a2[v9];
      goto LABEL_10;
    }
    unsigned int v10 = *(unsigned __int16 *)&a2[v9];
  }
LABEL_10:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        if (v9 < 4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 4:
        int v14 = *(_DWORD *)a2;
        if (v9 < 4) {
LABEL_22:
        }
          v14 |= v12 << (8 * v9);
LABEL_23:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v16 = ~v7;
    unsigned int v17 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
    v17(a1, a2, AssociatedTypeWitness);
    v17((unsigned char *)((unint64_t)&a1[v8] & v16), (unsigned __int8 *)((unint64_t)&a2[v8] & v16), AssociatedTypeWitness);
    if (v9 <= 3)
    {
      unsigned int v15 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v15 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 1;
        goto LABEL_50;
      }
      if (v15 > 0xFD)
      {
        *(_WORD *)&a1[v9] = 1;
        goto LABEL_50;
      }
    }
    a1[v9] = 1;
    if (v9 > 3) {
      goto LABEL_43;
    }
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      if (v9 > 3) {
        goto LABEL_29;
      }
      unsigned int v15 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v15 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 0;
      }
      else
      {
        if (v15 <= 0xFD)
        {
LABEL_29:
          a1[v9] = 0;
          if (v9 > 3)
          {
LABEL_43:
            uint64_t v21 = 1;
            goto LABEL_52;
          }
          goto LABEL_40;
        }
        *(_WORD *)&a1[v9] = 0;
      }
LABEL_50:
      BOOL v22 = v15 > 0xFFFD;
      uint64_t v21 = 2;
      if (v22) {
        uint64_t v21 = 4;
      }
      goto LABEL_52;
    }
    if (v9 > 3) {
      goto LABEL_38;
    }
    unsigned int v18 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    uint64_t v19 = 2;
    if (v18 > 0xFFFD) {
      uint64_t v19 = 4;
    }
    if (v18 <= 0xFD) {
LABEL_38:
    }
      uint64_t v19 = 1;
    memcpy(a1, a2, v19 + v9);
    if (v9 > 3) {
      goto LABEL_43;
    }
  }
LABEL_40:
  unsigned int v20 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  uint64_t v21 = 2;
  if (v20 > 0xFFFD) {
    uint64_t v21 = 4;
  }
  if (v20 <= 0xFD) {
    goto LABEL_43;
  }
LABEL_52:
  *(_OWORD *)((unint64_t)&a1[v21 + 7 + v9] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v21 + 7 + v9] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithTake for ViewGraphGeometryObservers.Observer(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = AssociatedTypeWitness;
  if (a1 == a2) {
    goto LABEL_70;
  }
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v7 + v8;
  if (((v7 + v8) & ~v8) + v7 <= v7) {
    uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v10 = ((v7 + v8) & ~v8) + v7;
  }
  if (v10 > 3) {
    goto LABEL_6;
  }
  unsigned int v12 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  if (v12 > 0xFFFD)
  {
    unsigned int v11 = *(_DWORD *)&a1[v10];
  }
  else
  {
    if (v12 <= 0xFD)
    {
LABEL_6:
      unsigned int v11 = a1[v10];
      goto LABEL_11;
    }
    unsigned int v11 = *(unsigned __int16 *)&a1[v10];
  }
LABEL_11:
  unsigned int v13 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        if (v10 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        if (v10 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v10 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v15 = *(_DWORD *)a1;
        if (v10 < 4) {
LABEL_23:
        }
          v15 |= v13 << (8 * v10);
LABEL_24:
        unsigned int v11 = v15 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v8;
  if (v11 == 1)
  {
    unsigned int v17 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
    v17(a1, AssociatedTypeWitness);
    v17((unsigned __int8 *)((unint64_t)&a1[v9] & v16), v5);
    if (v10 > 3) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!v11) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, AssociatedTypeWitness);
    }
    if (v10 > 3) {
      goto LABEL_33;
    }
  }
  unsigned int v18 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  if (v18 > 0xFFFD)
  {
    unsigned int v19 = *(_DWORD *)&a2[v10];
    unsigned int v20 = v19 - 2;
    if (v19 < 2) {
      goto LABEL_48;
    }
    goto LABEL_38;
  }
  if (v18 <= 0xFD)
  {
LABEL_33:
    unsigned int v19 = a2[v10];
    unsigned int v20 = v19 - 2;
    if (v19 < 2) {
      goto LABEL_48;
    }
LABEL_38:
    if (v10 <= 3) {
      uint64_t v21 = v10;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *a2;
        if (v10 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 2:
        int v22 = *(unsigned __int16 *)a2;
        if (v10 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 3:
        int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v10 < 4) {
          goto LABEL_47;
        }
        goto LABEL_61;
      case 4:
        int v22 = *(_DWORD *)a2;
        if (v10 < 4)
        {
LABEL_47:
          unsigned int v19 = (v22 | (v20 << (8 * v10))) + 2;
          goto LABEL_48;
        }
LABEL_61:
        unsigned int v19 = v22 + 2;
        if (v19 == 1) {
          goto LABEL_62;
        }
        goto LABEL_49;
      default:
        goto LABEL_48;
    }
  }
  unsigned int v19 = *(unsigned __int16 *)&a2[v10];
  unsigned int v20 = v19 - 2;
  if (v19 >= 2) {
    goto LABEL_38;
  }
LABEL_48:
  if (v19 == 1)
  {
LABEL_62:
    unsigned int v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
    v26(a1, a2, v5);
    v26((unsigned __int8 *)((unint64_t)&a1[v9] & v16), (unsigned __int8 *)((unint64_t)&a2[v9] & v16), v5);
    if (v10 <= 3)
    {
      unsigned int v27 = ((1 << (8 * v10)) + 1) >> (8 * v10);
      if (v27 > 0xFFFD)
      {
        *(_DWORD *)&a1[v10] = 1;
        goto LABEL_70;
      }
      if (v27 > 0xFD)
      {
        *(_WORD *)&a1[v10] = 1;
        goto LABEL_70;
      }
    }
    a1[v10] = 1;
    goto LABEL_70;
  }
LABEL_49:
  if (v19)
  {
    if (v10 > 3) {
      goto LABEL_58;
    }
    unsigned int v24 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    uint64_t v25 = 2;
    if (v24 > 0xFFFD) {
      uint64_t v25 = 4;
    }
    if (v24 <= 0xFD) {
LABEL_58:
    }
      uint64_t v25 = 1;
    memcpy(a1, a2, v25 + v10);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    if (v10 > 3)
    {
LABEL_53:
      a1[v10] = 0;
      goto LABEL_70;
    }
    unsigned int v23 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    if (v23 > 0xFFFD)
    {
      *(_DWORD *)&a1[v10] = 0;
    }
    else
    {
      if (v23 <= 0xFD) {
        goto LABEL_53;
      }
      *(_WORD *)&a1[v10] = 0;
    }
  }
LABEL_70:
  uint64_t v28 = *(void *)(v5 - 8);
  unint64_t v29 = *(void *)(v28 + 64);
  unint64_t v30 = ((v29 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)) + v29;
  if (v30 > v29) {
    unint64_t v29 = v30;
  }
  if (v29 > 3) {
    goto LABEL_76;
  }
  unsigned int v31 = ((1 << (8 * v29)) + 1) >> (8 * v29);
  uint64_t v32 = 2;
  if (v31 > 0xFFFD) {
    uint64_t v32 = 4;
  }
  if (v31 <= 0xFD) {
LABEL_76:
  }
    uint64_t v32 = 1;
  *(_OWORD *)((unint64_t)&a1[v32 + 7 + v29] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v32 + 7 + v29] & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ViewGraphGeometryObservers.Observer.Storage(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = v6 + v7;
  if (((v6 + v8) & ~v8) + v6 <= v6) {
    uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v10 = ((v6 + v7) & ~(unint64_t)v7) + v6;
  }
  if (v10 > 3) {
    goto LABEL_8;
  }
  unsigned int v11 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  uint64_t v12 = 2;
  if (v11 > 0xFFFD) {
    uint64_t v12 = 4;
  }
  if (v11 <= 0xFD) {
LABEL_8:
  }
    uint64_t v12 = 1;
  unint64_t v13 = ~(unint64_t)v7;
  unint64_t v14 = v12 + v10;
  int v15 = v7 & 0x100000;
  if (v8 > 7 || v15 != 0 || v14 > 0x18)
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + ((v8 + 16) & v13));
    swift_retain();
    return a1;
  }
  if (v10 > 3) {
    goto LABEL_19;
  }
  unsigned int v20 = ((1 << (8 * v10)) + 1) >> (8 * v10);
  if (v20 > 0xFFFD)
  {
    unsigned int v19 = *(_DWORD *)&a2[v10];
  }
  else
  {
    if (v20 <= 0xFD)
    {
LABEL_19:
      unsigned int v19 = a2[v10];
      goto LABEL_24;
    }
    unsigned int v19 = *(unsigned __int16 *)&a2[v10];
  }
LABEL_24:
  unsigned int v21 = v19 - 2;
  if (v19 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v22 = v10;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *a2;
        if (v10 < 4) {
          goto LABEL_36;
        }
        goto LABEL_37;
      case 2:
        int v23 = *(unsigned __int16 *)a2;
        if (v10 >= 4) {
          goto LABEL_37;
        }
        goto LABEL_36;
      case 3:
        int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v10 >= 4) {
          goto LABEL_37;
        }
        goto LABEL_36;
      case 4:
        int v23 = *(_DWORD *)a2;
        if (v10 < 4) {
LABEL_36:
        }
          v23 |= v21 << (8 * v10);
LABEL_37:
        unsigned int v19 = v23 + 2;
        break;
      default:
        break;
    }
  }
  if (v19 == 1)
  {
    uint64_t v25 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
    v25(a1, a2, AssociatedTypeWitness);
    v25((void *)(((unint64_t)a1 + v9) & v13), (unsigned __int8 *)((unint64_t)&a2[v9] & v13), AssociatedTypeWitness);
    if (v10 > 3) {
      goto LABEL_45;
    }
    unsigned int v28 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    if (v28 > 0xFFFD)
    {
      *(_DWORD *)((char *)a1 + v10) = 1;
      return a1;
    }
    if (v28 <= 0xFD) {
LABEL_45:
    }
      *((unsigned char *)a1 + v10) = 1;
    else {
      *(_WORD *)((char *)a1 + v10) = 1;
    }
  }
  else if (v19)
  {
    if (v10 > 3) {
      goto LABEL_50;
    }
    unsigned int v26 = ((1 << (8 * v10)) + 1) >> (8 * v10);
    uint64_t v27 = 2;
    if (v26 > 0xFFFD) {
      uint64_t v27 = 4;
    }
    if (v26 <= 0xFD) {
LABEL_50:
    }
      uint64_t v27 = 1;
    memcpy(a1, a2, v27 + v10);
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v10 <= 3)
    {
      unsigned int v24 = ((1 << (8 * v10)) + 1) >> (8 * v10);
      if (v24 > 0xFFFD)
      {
        *(_DWORD *)((char *)a1 + v10) = 0;
        return a1;
      }
      if (v24 > 0xFD)
      {
        *(_WORD *)((char *)a1 + v10) = 0;
        return a1;
      }
    }
    *((unsigned char *)a1 + v10) = 0;
  }
  return a1;
}

uint64_t destroy for ViewGraphGeometryObservers.Observer.Storage(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((v5 + v6) & ~v6) + v5 > v5) {
    v5 += (v5 + v6) & ~v6;
  }
  if (v5 > 3) {
    goto LABEL_4;
  }
  unsigned int v9 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v9 > 0xFFFD)
  {
    unsigned int v8 = *(_DWORD *)&a1[v5];
  }
  else
  {
    if (v9 <= 0xFD)
    {
LABEL_4:
      unsigned int v8 = a1[v5];
      goto LABEL_9;
    }
    unsigned int v8 = *(unsigned __int16 *)&a1[v5];
  }
LABEL_9:
  unsigned int v10 = v8 - 2;
  if (v8 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v5))) + 2;
        unsigned int v8 = v12 + 2;
        if (v5 < 4) {
          unsigned int v8 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    uint64_t v17 = ~v6;
    uint64_t v18 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    v18(a1, result);
    int v15 = (unsigned __int8 *)((unint64_t)&a1[v7] & v17);
    uint64_t v16 = v3;
    unint64_t v14 = (uint64_t (*)(unsigned __int8 *, uint64_t))v18;
  }
  else
  {
    if (v8) {
      return result;
    }
    unint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    int v15 = a1;
    uint64_t v16 = v3;
  }

  return v14(v15, v16);
}

unsigned char *initializeWithCopy for ViewGraphGeometryObservers.Observer.Storage(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_5;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a2[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_5:
      unsigned int v10 = a2[v9];
      goto LABEL_10;
    }
    unsigned int v10 = *(unsigned __int16 *)&a2[v9];
  }
LABEL_10:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_19;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_19:
        int v15 = (v14 | (v12 << (8 * v9))) + 2;
        unsigned int v10 = v14 + 2;
        if (v9 < 4) {
          unsigned int v10 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v17 = ~v7;
    uint64_t v18 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v18(a1, a2, AssociatedTypeWitness);
    v18((unsigned char *)((unint64_t)&a1[v8] & v17), (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_28;
    }
    unsigned int v21 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v21 > 0xFFFD)
    {
      *(_DWORD *)&a1[v9] = 1;
      return a1;
    }
    if (v21 <= 0xFD) {
LABEL_28:
    }
      a1[v9] = 1;
    else {
      *(_WORD *)&a1[v9] = 1;
    }
  }
  else if (v10)
  {
    if (v9 > 3) {
      goto LABEL_33;
    }
    unsigned int v19 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    uint64_t v20 = 2;
    if (v19 > 0xFFFD) {
      uint64_t v20 = 4;
    }
    if (v19 <= 0xFD) {
LABEL_33:
    }
      uint64_t v20 = 1;
    memcpy(a1, a2, v20 + v9);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    if (v9 <= 3)
    {
      unsigned int v16 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v16 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 0;
        return a1;
      }
      if (v16 > 0xFD)
      {
        *(_WORD *)&a1[v9] = 0;
        return a1;
      }
    }
    a1[v9] = 0;
  }
  return a1;
}

unsigned __int8 *assignWithCopy for ViewGraphGeometryObservers.Observer.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_6;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a1[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_6:
      unsigned int v10 = a1[v9];
      goto LABEL_11;
    }
    unsigned int v10 = *(unsigned __int16 *)&a1[v9];
  }
LABEL_11:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v9 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v9 < 4) {
LABEL_23:
        }
          v14 |= v12 << (8 * v9);
LABEL_24:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v15 = ~v7;
  if (v10 == 1)
  {
    unsigned int v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
    v16(a1, AssociatedTypeWitness);
    v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!v10) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    if (v9 > 3) {
      goto LABEL_33;
    }
  }
  unsigned int v17 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v17 <= 0xFFFD)
  {
    if (v17 > 0xFD)
    {
      unsigned int v18 = *(unsigned __int16 *)&a2[v9];
      unsigned int v19 = v18 - 2;
      if (v18 < 2) {
        goto LABEL_48;
      }
      goto LABEL_38;
    }
LABEL_33:
    unsigned int v18 = a2[v9];
    unsigned int v19 = v18 - 2;
    if (v18 < 2) {
      goto LABEL_48;
    }
LABEL_38:
    if (v9 <= 3) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *a2;
        if (v9 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 2:
        int v21 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 3:
        int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 < 4) {
          goto LABEL_47;
        }
        goto LABEL_61;
      case 4:
        int v21 = *(_DWORD *)a2;
        if (v9 < 4)
        {
LABEL_47:
          unsigned int v18 = (v21 | (v19 << (8 * v9))) + 2;
          goto LABEL_48;
        }
LABEL_61:
        unsigned int v18 = v21 + 2;
        if (v18 == 1) {
          goto LABEL_62;
        }
        goto LABEL_49;
      default:
        goto LABEL_48;
    }
  }
  unsigned int v18 = *(_DWORD *)&a2[v9];
  unsigned int v19 = v18 - 2;
  if (v18 >= 2) {
    goto LABEL_38;
  }
LABEL_48:
  if (v18 == 1)
  {
LABEL_62:
    uint64_t v25 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
    v25(a1, a2, AssociatedTypeWitness);
    v25((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)((unint64_t)&a2[v8] & v15), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_63;
    }
    unsigned int v26 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v26 > 0xFFFD)
    {
      *(_DWORD *)&a1[v9] = 1;
      return a1;
    }
    if (v26 <= 0xFD) {
LABEL_63:
    }
      a1[v9] = 1;
    else {
      *(_WORD *)&a1[v9] = 1;
    }
  }
  else
  {
LABEL_49:
    if (v18)
    {
      if (v9 > 3) {
        goto LABEL_58;
      }
      unsigned int v23 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      uint64_t v24 = 2;
      if (v23 > 0xFFFD) {
        uint64_t v24 = 4;
      }
      if (v23 <= 0xFD) {
LABEL_58:
      }
        uint64_t v24 = 1;
      memcpy(a1, a2, v24 + v9);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      if (v9 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v9)) + 1) >> (8 * v9);
        if (v22 > 0xFFFD)
        {
          *(_DWORD *)&a1[v9] = 0;
          return a1;
        }
        if (v22 > 0xFD)
        {
          *(_WORD *)&a1[v9] = 0;
          return a1;
        }
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

unsigned char *initializeWithTake for ViewGraphGeometryObservers.Observer.Storage(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_5;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a2[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_5:
      unsigned int v10 = a2[v9];
      goto LABEL_10;
    }
    unsigned int v10 = *(unsigned __int16 *)&a2[v9];
  }
LABEL_10:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_19;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_19:
        int v15 = (v14 | (v12 << (8 * v9))) + 2;
        unsigned int v10 = v14 + 2;
        if (v9 < 4) {
          unsigned int v10 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    uint64_t v17 = ~v7;
    unsigned int v18 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
    v18(a1, a2, AssociatedTypeWitness);
    v18((unsigned char *)((unint64_t)&a1[v8] & v17), (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_28;
    }
    unsigned int v21 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v21 > 0xFFFD)
    {
      *(_DWORD *)&a1[v9] = 1;
      return a1;
    }
    if (v21 <= 0xFD) {
LABEL_28:
    }
      a1[v9] = 1;
    else {
      *(_WORD *)&a1[v9] = 1;
    }
  }
  else if (v10)
  {
    if (v9 > 3) {
      goto LABEL_33;
    }
    unsigned int v19 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    uint64_t v20 = 2;
    if (v19 > 0xFFFD) {
      uint64_t v20 = 4;
    }
    if (v19 <= 0xFD) {
LABEL_33:
    }
      uint64_t v20 = 1;
    memcpy(a1, a2, v20 + v9);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    if (v9 <= 3)
    {
      unsigned int v16 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      if (v16 > 0xFFFD)
      {
        *(_DWORD *)&a1[v9] = 0;
        return a1;
      }
      if (v16 > 0xFD)
      {
        *(_WORD *)&a1[v9] = 0;
        return a1;
      }
    }
    a1[v9] = 0;
  }
  return a1;
}

unsigned __int8 *assignWithTake for ViewGraphGeometryObservers.Observer.Storage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  if (((v6 + v7) & ~v7) + v6 <= v6) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = ((v6 + v7) & ~v7) + v6;
  }
  if (v9 > 3) {
    goto LABEL_6;
  }
  unsigned int v11 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v11 > 0xFFFD)
  {
    unsigned int v10 = *(_DWORD *)&a1[v9];
  }
  else
  {
    if (v11 <= 0xFD)
    {
LABEL_6:
      unsigned int v10 = a1[v9];
      goto LABEL_11;
    }
    unsigned int v10 = *(unsigned __int16 *)&a1[v9];
  }
LABEL_11:
  unsigned int v12 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        if (v9 < 4) {
          goto LABEL_23;
        }
        goto LABEL_24;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_23;
      case 4:
        int v14 = *(_DWORD *)a1;
        if (v9 < 4) {
LABEL_23:
        }
          v14 |= v12 << (8 * v9);
LABEL_24:
        unsigned int v10 = v14 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v15 = ~v7;
  if (v10 == 1)
  {
    unsigned int v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
    v16(a1, AssociatedTypeWitness);
    v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_33;
    }
  }
  else
  {
    if (!v10) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    if (v9 > 3) {
      goto LABEL_33;
    }
  }
  unsigned int v17 = ((1 << (8 * v9)) + 1) >> (8 * v9);
  if (v17 <= 0xFFFD)
  {
    if (v17 > 0xFD)
    {
      unsigned int v18 = *(unsigned __int16 *)&a2[v9];
      unsigned int v19 = v18 - 2;
      if (v18 < 2) {
        goto LABEL_48;
      }
      goto LABEL_38;
    }
LABEL_33:
    unsigned int v18 = a2[v9];
    unsigned int v19 = v18 - 2;
    if (v18 < 2) {
      goto LABEL_48;
    }
LABEL_38:
    if (v9 <= 3) {
      uint64_t v20 = v9;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *a2;
        if (v9 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 2:
        int v21 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_61;
        }
        goto LABEL_47;
      case 3:
        int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 < 4) {
          goto LABEL_47;
        }
        goto LABEL_61;
      case 4:
        int v21 = *(_DWORD *)a2;
        if (v9 < 4)
        {
LABEL_47:
          unsigned int v18 = (v21 | (v19 << (8 * v9))) + 2;
          goto LABEL_48;
        }
LABEL_61:
        unsigned int v18 = v21 + 2;
        if (v18 == 1) {
          goto LABEL_62;
        }
        goto LABEL_49;
      default:
        goto LABEL_48;
    }
  }
  unsigned int v18 = *(_DWORD *)&a2[v9];
  unsigned int v19 = v18 - 2;
  if (v18 >= 2) {
    goto LABEL_38;
  }
LABEL_48:
  if (v18 == 1)
  {
LABEL_62:
    uint64_t v25 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
    v25(a1, a2, AssociatedTypeWitness);
    v25((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)((unint64_t)&a2[v8] & v15), AssociatedTypeWitness);
    if (v9 > 3) {
      goto LABEL_63;
    }
    unsigned int v26 = ((1 << (8 * v9)) + 1) >> (8 * v9);
    if (v26 > 0xFFFD)
    {
      *(_DWORD *)&a1[v9] = 1;
      return a1;
    }
    if (v26 <= 0xFD) {
LABEL_63:
    }
      a1[v9] = 1;
    else {
      *(_WORD *)&a1[v9] = 1;
    }
  }
  else
  {
LABEL_49:
    if (v18)
    {
      if (v9 > 3) {
        goto LABEL_58;
      }
      unsigned int v23 = ((1 << (8 * v9)) + 1) >> (8 * v9);
      uint64_t v24 = 2;
      if (v23 > 0xFFFD) {
        uint64_t v24 = 4;
      }
      if (v23 <= 0xFD) {
LABEL_58:
      }
        uint64_t v24 = 1;
      memcpy(a1, a2, v24 + v9);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      if (v9 <= 3)
      {
        unsigned int v22 = ((1 << (8 * v9)) + 1) >> (8 * v9);
        if (v22 > 0xFFFD)
        {
          *(_DWORD *)&a1[v9] = 0;
          return a1;
        }
        if (v22 > 0xFD)
        {
          *(_WORD *)&a1[v9] = 0;
          return a1;
        }
      }
      a1[v9] = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewGraphGeometryObservers.Observer.Storage(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 > v5) {
    unint64_t v5 = v6;
  }
  if (v5 > 3)
  {
    int v7 = 3;
LABEL_7:
    char v9 = 8;
    goto LABEL_8;
  }
  unsigned int v8 = ((1 << (8 * v5)) + 1) >> (8 * v5);
  if (v8 > 0xFFFD) {
    goto LABEL_11;
  }
  int v7 = v8 + 2;
  if (v8 <= 0xFD) {
    goto LABEL_7;
  }
  char v9 = 16;
LABEL_8:
  unsigned int v10 = (1 << v9) - v7;
  if ((v10 & 0x80000000) == 0)
  {
    if (v5 > 3) {
      goto LABEL_15;
    }
LABEL_12:
    unsigned int v11 = ((1 << (8 * v5)) + 1) >> (8 * v5);
    uint64_t v12 = 2;
    if (v11 > 0xFFFD) {
      uint64_t v12 = 4;
    }
    if (v11 > 0xFD) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_11:
  unsigned int v10 = 0x7FFFFFFF;
  if (v5 <= 3) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v12 = 1;
LABEL_16:
  if (!a2) {
    return 0;
  }
  if (a2 <= v10) {
    goto LABEL_35;
  }
  unint64_t v13 = v12 + v5;
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_35;
      }
      goto LABEL_27;
    }
    if (v16 < 2)
    {
LABEL_35:
      if (v10)
      {
        if (v5 <= 3)
        {
          unsigned int v24 = ((1 << (8 * v5)) + 1) >> (8 * v5);
          if (v24 > 0xFFFD)
          {
            unsigned int v19 = *(_DWORD *)((char *)a1 + v5);
            unsigned int v20 = ~v19;
LABEL_45:
            unsigned int v27 = 0x7FFFFFFF;
LABEL_46:
            if (v27 > v20) {
              return -v19;
            }
            else {
              return 0;
            }
          }
          int v22 = v24 + 2;
          if (v24 > 0xFD)
          {
            int v26 = *(unsigned __int16 *)((char *)a1 + v5);
            unsigned int v19 = v26 | 0xFFFF0000;
            unsigned int v20 = v26 ^ 0xFFFF;
            char v21 = 16;
          }
          else
          {
            int v25 = *((unsigned __int8 *)a1 + v5);
            unsigned int v19 = v25 | 0xFFFFFF00;
            unsigned int v20 = v25 ^ 0xFF;
            char v21 = 8;
          }
        }
        else
        {
          int v18 = *((unsigned __int8 *)a1 + v5);
          unsigned int v19 = v18 | 0xFFFFFF00;
          unsigned int v20 = v18 ^ 0xFF;
          char v21 = 8;
          int v22 = 3;
        }
        unsigned int v27 = (1 << v21) - v22;
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_35;
  }
LABEL_27:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *a1;
        break;
      case 3:
        LODWORD(v13) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v10 + (v13 | v17) + 1;
}

void storeEnumTagSinglePayload for ViewGraphGeometryObservers.Observer.Storage(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + v7;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  char v9 = 8 * v7;
  if (v7 > 3)
  {
    int v10 = 3;
LABEL_5:
    char v11 = 8;
    goto LABEL_6;
  }
  unsigned int v13 = ((1 << v9) + 1) >> v9;
  if (v13 > 0xFFFD) {
    goto LABEL_12;
  }
  int v10 = v13 + 2;
  if (v13 <= 0xFD) {
    goto LABEL_5;
  }
  char v11 = 16;
LABEL_6:
  unsigned int v12 = (1 << v11) - v10;
  if ((v12 & 0x80000000) == 0)
  {
    if (v7 > 3) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  unsigned int v12 = 0x7FFFFFFF;
  if (v7 > 3)
  {
LABEL_16:
    uint64_t v15 = 1;
    goto LABEL_17;
  }
LABEL_13:
  unsigned int v14 = ((1 << v9) + 1) >> v9;
  uint64_t v15 = 2;
  if (v14 > 0xFFFD) {
    uint64_t v15 = 4;
  }
  if (v14 <= 0xFD) {
    goto LABEL_16;
  }
LABEL_17:
  size_t v16 = v15 + v7;
  if (a3 <= v12)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v12 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x2460C0F90);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (!a2) {
        return;
      }
LABEL_37:
      int v22 = -a2;
      if (v7 > 3) {
        goto LABEL_38;
      }
      unsigned int v23 = ((1 << v9) + 1) >> v9;
      if (v23 > 0xFFFD)
      {
        *(_DWORD *)&a1[v7] = v22;
      }
      else if (v23 <= 0xFD)
      {
LABEL_38:
        a1[v7] = v22;
      }
      else
      {
        *(_WORD *)&a1[v7] = v22;
      }
      return;
  }
}

uint64_t getEnumTag for ViewGraphGeometryObservers.Observer.Storage(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  if (v3 > 3) {
    goto LABEL_4;
  }
  unsigned int v6 = ((1 << (8 * v3)) + 1) >> (8 * v3);
  if (v6 > 0xFFFD)
  {
    uint64_t result = *(unsigned int *)&a1[v3];
  }
  else
  {
    if (v6 <= 0xFD)
    {
LABEL_4:
      uint64_t result = a1[v3];
      goto LABEL_9;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v3];
  }
LABEL_9:
  if (result >= 2)
  {
    if (v3 <= 3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_18;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v3))) + 2;
        unsigned int v10 = v8 + 2;
        if (v3 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for ViewGraphGeometryObservers.Observer.Storage(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v5 = *(void *)(v4 + 64);
  size_t v6 = ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
  if (v6 <= v5) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      int v10 = (v8 >> (8 * v7)) + 2;
      v8 &= ~(-1 << (8 * v7));
      char v11 = (int *)&a1[v7];
      unsigned int v12 = ((1 << (8 * v7)) + 1) >> (8 * v7);
      if (v12 > 0xFFFD)
      {
        *char v11 = v10;
      }
      else if (v12 > 0xFD)
      {
        *(_WORD *)char v11 = v10;
      }
      else
      {
        *(unsigned char *)char v11 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
    }
    if (v7 <= 3) {
      int v13 = v7;
    }
    else {
      int v13 = 4;
    }
    bzero(a1, v7);
    switch(v13)
    {
      case 2:
        *(_WORD *)a1 = v8;
        break;
      case 3:
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
        break;
      case 4:
        *(_DWORD *)a1 = v8;
        break;
      default:
        *a1 = v8;
        break;
    }
  }
  else
  {
    if (v7 > 3)
    {
LABEL_6:
      a1[v7] = a2;
      return;
    }
    unsigned int v9 = ((1 << (8 * v7)) + 1) >> (8 * v7);
    if (v9 > 0xFFFD)
    {
      *(_DWORD *)&a1[v7] = a2;
    }
    else
    {
      if (v9 <= 0xFD) {
        goto LABEL_6;
      }
      *(_WORD *)&a1[v7] = a2;
    }
  }
}

uint64_t ViewGraphGeometryObservers.needsUpdate(graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  size_t v7 = (char *)&v43 - v6;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unsigned int v14 = (char *)&v43 - v13;
  MEMORY[0x270FA5388](v15);
  int v17 = (char *)&v43 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v62 = (char *)&v43 - v19;
  swift_beginAccess();
  uint64_t v63 = a1;
  if (*(unsigned char *)(a1 + 41))
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  else
  {
    BOOL v54 = v17;
    uint64_t v55 = v11;
    uint64_t v56 = v7;
    uint64_t v59 = v2;
    uint64_t v20 = *v2;
    uint64_t v21 = type metadata accessor for ViewGraphGeometryObservers.Observer();
    uint64_t v51 = v21;
    uint64_t v57 = v5;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    _ViewInputs.base.modify(v20);
    swift_bridgeObjectRetain();
    uint64_t v53 = AssociatedConformanceWitness;
    uint64_t result = _NativeDictionary.makeIterator()();
    LOBYTE(v2) = 0;
    uint64_t v60 = v67;
    uint64_t v44 = v68;
    uint64_t v64 = v70;
    int64_t v45 = (unint64_t)(v69 + 64) >> 6;
    uint64_t v52 = v9 + 16;
    uint64_t v50 = v9 + 32;
    uint64_t v58 = v4;
    uint64_t v49 = v4 + 40;
    unint64_t v24 = v71;
    uint64_t v48 = v21 - 8;
    uint64_t v47 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v46 = (void (**)(uint64_t, uint64_t))(v65 + 8);
    int v25 = v54;
    int v26 = v55;
    LODWORD(v65) = 0;
    if (!v71) {
      goto LABEL_5;
    }
LABEL_4:
    unint64_t v27 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    unint64_t v28 = v27 | (v64 << 6);
    while (1)
    {
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v34 = v62;
      v33(v62, *(void *)(v60 + 48) + *(void *)(v9 + 72) * v28, v8);
      uint64_t v35 = v9;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v25, v34, v8);
      uint64_t v36 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t))(v58 + 40))(v25, v63);
      v33(v14, (unint64_t)v25, v8);
      v33(v26, (unint64_t)v14, v8);
      uint64_t v37 = v51;
      type metadata accessor for Dictionary._Variant();
      char v38 = (void (*)(char *, void))Dictionary._Variant.subscript.modify();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v39, 1, v37);
      if (result == 1) {
        break;
      }
      uint64_t v40 = type metadata accessor for ViewGraphGeometryObservers.Observer.Storage();
      int v41 = ViewGraphGeometryObservers.Observer.Storage.transition(to:)(v36, v40);
      v38(v66, 0);
      unint64_t v42 = *v47;
      (*v47)(v26, v8);
      v42(v14, v8);
      (*v46)(v36, AssociatedTypeWitness);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v25, v8);
      LODWORD(v2) = v41 | v65;
      uint64_t v9 = v35;
      LODWORD(v65) = v2;
      if (v24) {
        goto LABEL_4;
      }
LABEL_5:
      int64_t v29 = v64 + 1;
      if (__OFADD__(v64, 1))
      {
        __break(1u);
        break;
      }
      if (v29 >= v45) {
        goto LABEL_24;
      }
      unint64_t v30 = *(void *)(v44 + 8 * v29);
      uint64_t v31 = v64 + 1;
      if (!v30)
      {
        uint64_t v31 = v64 + 2;
        if (v64 + 2 >= v45) {
          goto LABEL_24;
        }
        unint64_t v30 = *(void *)(v44 + 8 * v31);
        if (!v30)
        {
          uint64_t v31 = v64 + 3;
          if (v64 + 3 >= v45) {
            goto LABEL_24;
          }
          unint64_t v30 = *(void *)(v44 + 8 * v31);
          if (!v30)
          {
            uint64_t v31 = v64 + 4;
            if (v64 + 4 >= v45) {
              goto LABEL_24;
            }
            unint64_t v30 = *(void *)(v44 + 8 * v31);
            if (!v30)
            {
              uint64_t v31 = v64 + 5;
              if (v64 + 5 >= v45) {
                goto LABEL_24;
              }
              unint64_t v30 = *(void *)(v44 + 8 * v31);
              if (!v30)
              {
                uint64_t v32 = v64 + 6;
                while (v45 != v32)
                {
                  unint64_t v30 = *(void *)(v44 + 8 * v32++);
                  if (v30)
                  {
                    uint64_t v31 = v32 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_24:
                swift_release();
                return v2 & 1;
              }
            }
          }
        }
      }
LABEL_20:
      unint64_t v24 = (v30 - 1) & v30;
      unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
      uint64_t v64 = v31;
    }
    __break(1u);
  }
  return result;
}

uint64_t ViewGraphGeometryObservers.notifySizes()()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = AssociatedTypeWitness;
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v49 = *(uint64_t (***)(uint64_t, uint64_t))(v58 - 8);
  MEMORY[0x270FA5388](v58);
  uint64_t v57 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (uint64_t)&v49 - v4;
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v49 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v49 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v70 = (char *)&v49 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v75 = (char *)&v49 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v64 = (char *)&v49 - v19;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v77 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v68 = v0;
  uint64_t v21 = *v0;
  uint64_t v22 = type metadata accessor for ViewGraphGeometryObservers.Observer();
  _ViewInputs.base.modify(v21);
  swift_bridgeObjectRetain();
  uint64_t v74 = AssociatedConformanceWitness;
  uint64_t result = _NativeDictionary.makeIterator()();
  uint64_t v69 = v78;
  uint64_t v59 = v79;
  uint64_t i = v81;
  int64_t v60 = (unint64_t)(v80 + 64) >> 6;
  uint64_t v73 = v9 + 16;
  uint64_t v65 = v22 - 8;
  uint64_t v66 = v9 + 32;
  uint64_t v67 = v9;
  uint64_t v62 = v9 + 8;
  uint64_t v61 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v5 + 16);
  unint64_t v24 = v82;
  uint64_t v51 = (void (**)(char *, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v50 = (void (**)(char *, uint64_t))(v5 + 8);
  ++v49;
  BOOL v54 = v13;
  int v25 = (void (**)(char *, uint64_t))(v9 + 8);
  if (v82) {
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v33 = v70;
  int64_t v35 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v35 < v60)
    {
      unint64_t v36 = *(void *)(v59 + 8 * v35);
      uint64_t v37 = i + 1;
      if (v36) {
        goto LABEL_20;
      }
      uint64_t v37 = i + 2;
      if (i + 2 >= v60) {
        goto LABEL_25;
      }
      unint64_t v36 = *(void *)(v59 + 8 * v37);
      if (v36) {
        goto LABEL_20;
      }
      uint64_t v37 = i + 3;
      if (i + 3 >= v60) {
        goto LABEL_25;
      }
      unint64_t v36 = *(void *)(v59 + 8 * v37);
      if (v36) {
        goto LABEL_20;
      }
      uint64_t v37 = i + 4;
      if (i + 4 >= v60) {
        goto LABEL_25;
      }
      unint64_t v36 = *(void *)(v59 + 8 * v37);
      if (v36)
      {
LABEL_20:
        unint64_t v24 = (v36 - 1) & v36;
        unint64_t v34 = __clz(__rbit64(v36)) + (v37 << 6);
        for (i = v37; ; unint64_t v34 = v32 | (i << 6))
        {
          uint64_t v39 = v67;
          uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
          int v41 = v64;
          v40(v64, *(void *)(v69 + 48) + *(void *)(v67 + 72) * v34, v8);
          unint64_t v42 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
          uint64_t v43 = v75;
          v42(v75, v41, v8);
          v40(v33, (unint64_t)v43, v8);
          v40(v13, (unint64_t)v33, v8);
          type metadata accessor for Dictionary._Variant();
          uint64_t v44 = (void (*)(char *, void))Dictionary._Variant.subscript.modify();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v45, 1, v22);
          if (result == 1) {
            break;
          }
          uint64_t v46 = v63;
          ViewGraphGeometryObservers.Observer.sizeToNotifyIfNeeded()(v22, v63);
          v44(v76, 0);
          uint64_t v47 = *v25;
          (*v25)(v13, v8);
          v47(v33, v8);
          uint64_t v48 = v72;
          if ((*v61)(v46, 1, v72) == 1)
          {
            v47(v75, v8);
            uint64_t result = (*v49)(v46, v58);
            if (!v24) {
              goto LABEL_5;
            }
          }
          else
          {
            int v26 = v56;
            (*v53)(v56, v46, v48);
            uint64_t v27 = v22;
            unint64_t v28 = v75;
            v40(v55, (unint64_t)v75, v8);
            int64_t v29 = v57;
            (*v52)(v57, v26, v48);
            (*v51)(v29, 0, 1, v48);
            type metadata accessor for Dictionary();
            Dictionary.subscript.setter();
            unint64_t v30 = v26;
            uint64_t v13 = v54;
            (*v50)(v30, v72);
            uint64_t v31 = v28;
            uint64_t v22 = v27;
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v31, v8);
            if (!v24) {
              goto LABEL_5;
            }
          }
LABEL_4:
          unint64_t v32 = __clz(__rbit64(v24));
          v24 &= v24 - 1;
          uint64_t v33 = v70;
        }
        goto LABEL_27;
      }
      uint64_t v37 = i + 5;
      if (i + 5 < v60)
      {
        unint64_t v36 = *(void *)(v59 + 8 * v37);
        if (!v36)
        {
          uint64_t v38 = i + 6;
          while (v60 != v38)
          {
            unint64_t v36 = *(void *)(v59 + 8 * v38++);
            if (v36)
            {
              uint64_t v37 = v38 - 1;
              goto LABEL_20;
            }
          }
          goto LABEL_25;
        }
        goto LABEL_20;
      }
    }
LABEL_25:
    swift_release();
    return v77;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t ViewGraphGeometryObservers.init()@<X0>(uint64_t *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for ViewGraphGeometryObservers.Observer();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  *a1 = result;
  return result;
}

uint64_t static Font.custom(_:size:)(uint64_t a1, uint64_t a2, double a3)
{
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 40) = 6;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t static Font.custom(_:size:relativeTo:)(uint64_t a1, uint64_t a2, char *a3, double a4)
{
  char v7 = *a3;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(double *)(v8 + 32) = a4;
  *(unsigned char *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t static Font._custom(_:size:textStyle:)(uint64_t a1, uint64_t a2, char *a3, double a4)
{
  char v7 = *a3;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(double *)(v8 + 32) = a4;
  *(unsigned char *)(v8 + 40) = v7;
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t static Font.custom(_:fixedSize:)(uint64_t a1, uint64_t a2, double a3)
{
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 40) = 14;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t static Font._custom(_:verbatimSize:)(uint64_t a1, uint64_t a2, double a3)
{
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V08PlatformC8Provider33_A1A6E08ED7787270EADAD2AE750791A9LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.NamedProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(double *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 40) = 14;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t initializeWithCopy for Font.NamedProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Font.NamedProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Font.NamedProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for Font.NamedProvider()
{
  return &type metadata for Font.NamedProvider;
}

ValueMetadata *type metadata accessor for Font.PlatformFontProvider()
{
  return &type metadata for Font.PlatformFontProvider;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PlatformFontProvider()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type CTFontRef and conformance CTFontRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PlatformFontProvider()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type CTFontRef and conformance CTFontRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int Font.NamedProvider.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    switch((int)v2)
    {
      case 1:
        Swift::UInt v2 = 1;
        break;
      case 2:
        Swift::UInt v2 = 2;
        break;
      case 3:
        Swift::UInt v2 = 3;
        break;
      case 4:
        Swift::UInt v2 = 4;
        break;
      case 5:
        Swift::UInt v2 = 5;
        break;
      case 6:
        Swift::UInt v2 = 6;
        break;
      case 7:
        Swift::UInt v2 = 7;
        break;
      case 8:
        Swift::UInt v2 = 8;
        break;
      case 9:
        Swift::UInt v2 = 9;
        break;
      case 10:
        Swift::UInt v2 = 10;
        break;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x2460C2820);
      default:
        break;
    }
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.NamedProvider(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  double v7 = *v1;
  uint64_t v8 = *((void *)v1 + 1);
  double v9 = v1[2];
  char v16 = *((unsigned char *)v1 + 24);
  __int16 v11 = v2;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  char v15 = v6;
  return (*(uint64_t (**)(double, uint64_t, char *, __int16 *, double))(v4 + 32))(COERCE_DOUBLE(*(void *)&v7), v8, &v16, &v11, v9);
}

void protocol witness for Hashable.hash(into:) in conformance Font.NamedProvider()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    switch((int)v2)
    {
      case 1:
        Swift::UInt v2 = 1;
        break;
      case 2:
        Swift::UInt v2 = 2;
        break;
      case 3:
        Swift::UInt v2 = 3;
        break;
      case 4:
        Swift::UInt v2 = 4;
        break;
      case 5:
        Swift::UInt v2 = 5;
        break;
      case 6:
        Swift::UInt v2 = 6;
        break;
      case 7:
        Swift::UInt v2 = 7;
        break;
      case 8:
        Swift::UInt v2 = 8;
        break;
      case 9:
        Swift::UInt v2 = 9;
        break;
      case 10:
        Swift::UInt v2 = 10;
        break;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x2460C29B4);
      default:
        break;
    }
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.NamedProvider()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    switch((int)v2)
    {
      case 1:
        Swift::UInt v2 = 1;
        break;
      case 2:
        Swift::UInt v2 = 2;
        break;
      case 3:
        Swift::UInt v2 = 3;
        break;
      case 4:
        Swift::UInt v2 = 4;
        break;
      case 5:
        Swift::UInt v2 = 5;
        break;
      case 6:
        Swift::UInt v2 = 6;
        break;
      case 7:
        Swift::UInt v2 = 7;
        break;
      case 8:
        Swift::UInt v2 = 8;
        break;
      case 9:
        Swift::UInt v2 = 9;
        break;
      case 10:
        Swift::UInt v2 = 10;
        break;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x2460C2B00);
      default:
        break;
    }
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for Font.NamedProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.NamedProvider and conformance Font.NamedProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Font.NamedProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a1 + 24);
  double v4 = *(double *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    if (v2 != v4) {
      return 0;
    }
LABEL_9:
    if (v3 == 14)
    {
      if (v5 != 14) {
        return 0;
      }
    }
    else
    {
      char v10 = v3;
      if (v5 == 14) {
        return 0;
      }
      char v9 = v5;
      if ((specialized static Font.TextStyle.== infix(_:_:)(&v10, &v9) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v7 & 1) != 0 && v2 == v4) {
    goto LABEL_9;
  }
  return result;
}

uint64_t EnvironmentValues.fontDefinition.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5;
  }
}

uint64_t static FontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(char *a1, unsigned __int8 *a2, uint64_t a3, char a4, __int16 *a5)
{
  return static FontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(a1, a2, a3, a4 & 1, a5);
}

{
  unsigned __int8 v5;
  __int16 v6;
  char v7;
  char v8;
  char v10[8];
  long long v11;
  char v12;
  char v13;
  unsigned __int8 v14;
  char v15;

  uint64_t v5 = *a2;
  char v6 = *a5;
  char v7 = *((unsigned char *)a5 + 24);
  uint64_t v8 = *((unsigned char *)a5 + 25);
  char v15 = *a1;
  char v14 = v5;
  *(_WORD *)char v10 = v6;
  __int16 v11 = *(_OWORD *)(a5 + 4);
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  return specialized static DefaultFontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(&v15, &v14, a3, a4 & 1, v10);
}

uint64_t static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:)@<X0>(double a1@<X2>, char a2@<W3>, uint64_t a3@<X8>)
{
  return static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:)(a1, a2 & 1, a3);
}

{
  return Font.ResolvedTraits.init(textStyle:weight:dynamicTypeSize:)(a1, a2 & 1, a3);
}

uint64_t static FontDefinition.resolveSystemFont(size:design:weight:in:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  return static FontDefinition.resolveSystemFont(size:design:weight:in:)(a1, a2, a3 & 1, a4, a5);
}

{
  unsigned __int8 v5;
  void *v8;
  char v9;
  id v10;
  uint64_t v11;
  unsigned __int8 v13;

  uint64_t v5 = *(unsigned char *)(a4 + 1);
  switch(*a1)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_6;
    default:
      uint64_t v8 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      uint64_t v8 = (void *)*MEMORY[0x263F03B98];
      if (*MEMORY[0x263F03B98]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      uint64_t v8 = (void *)*MEMORY[0x263F03B88];
      if (!*MEMORY[0x263F03B88])
      {
        __break(1u);
LABEL_8:
        uint64_t v8 = (void *)*MEMORY[0x263F03B90];
        if (!*MEMORY[0x263F03B90])
        {
          __break(1u);
          JUMPOUT(0x2460C2F60);
        }
      }
LABEL_9:
      char v9 = a3 & 1;
      uint64_t v13 = v5;
      char v10 = v8;
      __int16 v11 = specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(v10, a2, v9, &v13, a5);

      return v11;
  }
}

CTFontDescriptorRef static FontDefinition.resolveCustomFont(name:size:textStyle:in:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, CGFloat a5)
{
  return static FontDefinition.resolveCustomFont(name:size:textStyle:in:)(a1, a2, a3, a4, a5);
}

{
  int v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  __CFString *v13;
  CTFontDescriptorRef v14;
  unsigned __int8 v16;
  unsigned __int8 v17;

  uint64_t v8 = *a3;
  char v9 = *a4;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  char v10 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    __int16 v11 = dyld_program_sdk_at_least();
  }
  else {
    __int16 v11 = static Semantics.forced >= v10;
  }
  if (v11) {
    uint64_t v12 = v8 == 14;
  }
  else {
    uint64_t v12 = 1;
  }
  if (!v12)
  {
    uint64_t v17 = v8;
    char v16 = v9;
    a5 = round(specialized static Font.scaleFactor(textStyle:in:)(&v17, &v16) * a5);
  }
  uint64_t v13 = (__CFString *)MEMORY[0x24C522820](a1, a2);
  char v14 = CTFontDescriptorCreateWithNameAndSize(v13, a5);

  return v14;
}

CTFontDescriptorRef specialized static FontDefinition.resolveCustomFont(name:size:textStyle:in:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4, CGFloat a5)
{
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v10 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    int v11 = dyld_program_sdk_at_least();
  }
  else {
    int v11 = static Semantics.forced >= v10;
  }
  if (v11) {
    BOOL v12 = a3 == 14;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    unsigned __int8 v17 = a3;
    unsigned __int8 v16 = a4;
    a5 = round(specialized static Font.scaleFactor(textStyle:in:)(&v17, &v16) * a5);
  }
  uint64_t v13 = (__CFString *)MEMORY[0x24C522820](a1, a2);
  CTFontDescriptorRef v14 = CTFontDescriptorCreateWithNameAndSize(v13, a5);

  return v14;
}

void static FontDefinition.resolvePrivateTextStyleFont(textStyle:design:weight:in:)(uint64_t a1, void *a2, uint64_t a3, char a4, char *a5)
{
}

{
  unsigned __int8 v5;
  unsigned __int8 v6;
  char v7;

  uint64_t v5 = a5[1];
  char v7 = *a5;
  char v6 = v5;
  specialized static CTFontDescriptorRef.fontDescriptor(textStyle:design:weight:sizeCategory:legibilityWeight:)(a1, a2, a3, a4 & 1, &v7, &v6);
}

uint64_t static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:)@<X0>(double a1@<X2>, char a2@<W3>, unsigned __int8 *a3@<X4>, uint64_t a4@<X8>)
{
  return static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:)(a1, a2 & 1, a3, a4);
}

{
  uint64_t result;
  uint64_t v8;
  double v9;
  long long v10;

  BYTE8(v10) = 0;
  *(void *)&unsigned int v10 = *a3;
  specialized DynamicTypeSize.ctTextSize.getter();
  uint64_t result = CTFontDescriptorGetTextStyleSize();
  char v9 = *(double *)((char *)&v10 + 1);
  if ((a2 & 1) == 0) {
    char v9 = a1;
  }
  *(void *)a4 = v8;
  *(double *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = 1;
  return result;
}

uint64_t specialized static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:)@<X0>(double a1@<X2>, char a2@<W3>, uint64_t a3@<X8>)
{
  specialized DynamicTypeSize.ctTextSize.getter();
  uint64_t result = CTFontDescriptorGetTextStyleSize();
  double v8 = 0.0;
  if ((a2 & 1) == 0) {
    double v8 = a1;
  }
  *(void *)a3 = v7;
  *(double *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

uint64_t static FontDefinition.resolvePrivateSystemDesignFont(size:design:weight:in:)(void *a1, uint64_t a2, double a3, double a4)
{
  return static FontDefinition.resolvePrivateSystemDesignFont(size:design:weight:in:)(a1, a2, a3, a4);
}

{
  unsigned __int8 v5;

  uint64_t v5 = *(unsigned char *)(a2 + 1);
  return specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(a1, *(uint64_t *)&a4, 0, &v5, a3);
}

void static FontDefinition.resolvePrivateSystemDesignFontInfo(size:design:weight:in:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
}

{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

CTFontDescriptorRef static FontDefinition.resolveFont(_:)(const __CTFont *a1)
{
  return static FontDefinition.resolveFont(_:)(a1);
}

uint64_t static FontDefinition.resolveFontInfo(_:)@<X0>(const __CTFont *a1@<X0>, uint64_t a2@<X8>)
{
  return static FontDefinition.resolveFontInfo(_:)(a1, a2);
}

{
  CGFloat Size;
  uint64_t result;
  uint64_t v5;

  Size = CTFontGetSize(a1);
  uint64_t result = CTFontGetWeight();
  *(CGFloat *)a2 = Size;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t static DefaultFontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(char *a1, unsigned __int8 *a2, uint64_t a3, char a4, char *a5)
{
  return specialized static DefaultFontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(a1, a2, a3, a4 & 1, a5);
}

uint64_t static DefaultFontDefinition.resolveSystemFont(size:design:weight:in:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4, double a5)
{
  unsigned __int8 v5 = *(unsigned char *)(a4 + 1);
  switch(*a1)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_6;
    default:
      double v8 = (void *)*MEMORY[0x263F03B80];
      if (*MEMORY[0x263F03B80]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_4:
      double v8 = (void *)*MEMORY[0x263F03B98];
      if (*MEMORY[0x263F03B98]) {
        goto LABEL_9;
      }
      __break(1u);
LABEL_6:
      double v8 = (void *)*MEMORY[0x263F03B88];
      if (!*MEMORY[0x263F03B88])
      {
        __break(1u);
LABEL_8:
        double v8 = (void *)*MEMORY[0x263F03B90];
        if (!*MEMORY[0x263F03B90])
        {
          __break(1u);
          JUMPOUT(0x2460C35ECLL);
        }
      }
LABEL_9:
      char v9 = a3 & 1;
      unsigned __int8 v13 = v5;
      id v10 = v8;
      uint64_t v11 = specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(v10, a2, v9, &v13, a5);

      return v11;
  }
}

CTFontDescriptorRef protocol witness for static FontDefinition.resolveCustomFont(name:size:textStyle:in:) in conformance DefaultFontDefinition(uint64_t a1, uint64_t a2, unsigned __int8 *a3, _WORD *a4, CGFloat a5)
{
  return specialized static FontDefinition.resolveCustomFont(name:size:textStyle:in:)(a1, a2, *a3, *a4, a5);
}

uint64_t protocol witness for static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:) in conformance DefaultFontDefinition@<X0>(double a1@<X2>, char a2@<W3>, uint64_t a3@<X8>)
{
  return specialized static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:)(a1, a2 & 1, a3);
}

uint64_t protocol witness for static FontDefinition.resolvePrivateSystemDesignFont(size:design:weight:in:) in conformance DefaultFontDefinition(void *a1, uint64_t a2, double a3, double a4)
{
  unsigned __int8 v5 = *(unsigned char *)(a2 + 1);
  return specialized static CTFontDescriptorRef.fontDescriptor(size:design:weight:legibilityWeight:)(a1, *(uint64_t *)&a4, 0, &v5, a3);
}

void protocol witness for static FontDefinition.resolvePrivateSystemDesignFontInfo(size:design:weight:in:) in conformance DefaultFontDefinition(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

uint64_t key path getter for EnvironmentValues.fontDefinition : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7);
    uint64_t v6 = v8;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t EnvironmentValues.fontDefinition.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.fontDefinition.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8);
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  void *v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.fontDefinition.modify;
}

void EnvironmentValues.fontDefinition.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FontDefinitionType()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  Hasher.init(_seed:)();
  long long v2 = *v0;
  Hasher._combine(_:)((Swift::UInt)&v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FontDefinitionType()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  long long v1 = *v0;
  Hasher._combine(_:)((Swift::UInt)&v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FontDefinitionType()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  Hasher.init(_seed:)();
  long long v2 = *v0;
  Hasher._combine(_:)((Swift::UInt)&v2);
  return Hasher._finalize()();
}

unint64_t FontDefinitionType.debugDescription.getter()
{
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000013;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FontDefinitionType()
{
  return FontDefinitionType.debugDescription.getter();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance FontDefinitionKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static FontDefinitionKey.defaultValue;
  *a1 = static FontDefinitionKey.defaultValue;
  return result;
}

uint64_t sub_2460C3C3C(uint64_t *a1)
{
  return EnvironmentValues.fontDefinition.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static FontDefinition.resolveTextStyleFont(textStyle:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a7 + 8))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static FontDefinition.resolveTextStyleFontInfo(textStyle:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a7 + 16))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static FontDefinition.resolveSystemFont(size:design:weight:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a6 + 24))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of static FontDefinition.resolveCustomFont(name:size:textStyle:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static FontDefinition.resolvePrivateTextStyleFont(textStyle:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a7 + 40))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static FontDefinition.resolvePrivateTextStyleFontInfo(textStyle:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a7 + 48))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of static FontDefinition.resolvePrivateSystemDesignFont(size:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static FontDefinition.resolvePrivateSystemDesignFontInfo(size:design:weight:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of static FontDefinition.resolveFont(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static FontDefinition.resolveFontInfo(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

ValueMetadata *type metadata accessor for DefaultFontDefinition()
{
  return &type metadata for DefaultFontDefinition;
}

unint64_t lazy protocol witness table accessor for type FontDefinitionType and conformance FontDefinitionType()
{
  unint64_t result = lazy protocol witness table cache variable for type FontDefinitionType and conformance FontDefinitionType;
  if (!lazy protocol witness table cache variable for type FontDefinitionType and conformance FontDefinitionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FontDefinitionType and conformance FontDefinitionType);
  }
  return result;
}

ValueMetadata *type metadata accessor for FontDefinitionKey()
{
  return &type metadata for FontDefinitionKey;
}

uint64_t type metadata completion function for TextEffectImplementation()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a1;
  uint64_t v39 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v6 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12)
  {
    CTFontDescriptorRef v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v37 = v14;
    uint64_t v15 = a3 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v16 = *(void *)(v13 + 56);
    unint64_t v34 = v8;
    int64_t v35 = (uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v31 = v16;
    unint64_t v32 = (void (**)(char *))(v13 + 16);
    uint64_t v33 = (void (**)(char *, uint64_t))(v13 - 8);
    long long v29[2] = a3;
    swift_bridgeObjectRetain();
    unint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    v29[1] = (v13 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v17 = v39;
      uint64_t v18 = v13;
      v37(v11, v15, v39);
      uint64_t v19 = *v36;
      (*v36)(v11, 0, 1, v17);
      int v20 = (*v35)(v11, 1, v17);
      BOOL v21 = v20 != 1;
      if (v20 == 1) {
        break;
      }
      unint64_t v30 = v19;
      uint64_t v22 = v11;
      unsigned int v23 = v34;
      unint64_t v24 = v22;
      (*v32)(v34);
      char v25 = v38(v23);
      if (v4)
      {
        (*v33)(v23, v17);
        swift_bridgeObjectRelease();
        return v21;
      }
      char v26 = v25;
      (*v33)(v23, v17);
      if (v26) {
        break;
      }
      v15 += v31;
      --v12;
      uint64_t v4 = 0;
      uint64_t v13 = v18;
      uint64_t v11 = v24;
      if (!v12)
      {
        v30(v24, 1, 1, v39);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v27(v11, 1, 1, v39);
LABEL_9:
    BOOL v21 = 0;
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2)
{
  v27[5] = a2;
  char v26 = a1;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v23 - v7;
  type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>();
  uint64_t v10 = v9 - 8;
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  uint64_t v25 = v6 + 16;
  v24(v8, v2, v5, v11);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  dispatch thunk of Sequence.makeIterator()();
  CTFontDescriptorRef v14 = &v13[*(int *)(v10 + 44)];
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  uint64_t v15 = *(void *)v14;
  dispatch thunk of Collection.endIndex.getter();
  if (v15 == v27[0])
  {
LABEL_6:
    _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    return 0;
  }
  else
  {
    unsigned int v23 = (void (**)(char *, uint64_t))(v6 + 8);
    while (1)
    {
      uint64_t v16 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      v16(v27, 0);
      ((void (*)(char *, char *, uint64_t))v24)(v8, v13, v5);
      dispatch thunk of Collection.formIndex(after:)();
      (*v23)(v8, v5);
      v27[0] = v18;
      v27[1] = v19;
      char v20 = v26(v27);
      if (v3 || (v20 & 1) != 0) {
        break;
      }
      uint64_t v21 = *(void *)v14;
      dispatch thunk of Collection.endIndex.getter();
      if (v21 == v27[0]) {
        goto LABEL_6;
      }
    }
    _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IndexingIterator<RangeSet<Text.Layout.CharacterIndex>.Ranges>);
    return 1;
  }
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if (v13) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 0;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t specialized RangeSet.lowerBound.getter()
{
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v12[-1] - v3;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  RangeSet.ranges.getter();
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v5 = 0;
  uint64_t v6 = v13;
  uint64_t v7 = v12[0];
  if (v13 != v12[0])
  {
    uint64_t v8 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v5 = *v9;
    v8(v12, 0);
  }
  LOBYTE(v12[0]) = v6 == v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (LOBYTE(v12[0])) {
    return 0;
  }
  else {
    return v5;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, void);
  uint64_t *v9;
  void v12[4];
  uint64_t v13;

  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v12[-1] - v3;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  RangeSet.ranges.getter();
  lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v5 = 0;
  uint64_t v6 = v13;
  uint64_t v7 = v12[0];
  if (v13 != v12[0])
  {
    uint64_t v8 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v5 = *v9;
    v8(v12, 0);
  }
  LOBYTE(v12[0]) = v6 == v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (LOBYTE(v12[0])) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v40 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v40 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  unint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  unint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = Array.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    unint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v22, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v22, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v22, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v22, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        unint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  unint64_t v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t TextEffectImplementation.ResolvedMap.Key.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance <> RangeSet<A>();
  return dispatch thunk of Hashable.hash(into:)();
}

void *static TextEffectImplementation.ResolvedMap.Key.== infix(_:_:)(void *result, void *a2)
{
  if (__OFSUB__(*a2, *result))
  {
    __break(1u);
  }
  else if (*a2 == *result)
  {
    type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    return (void *)static RangeSet.== infix(_:_:)();
  }
  else
  {
    return 0;
  }
  return result;
}

Swift::Int TextEffectImplementation.ResolvedMap.Key.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t TextEffectImplementation.ResolvedMap.Key.init(fragment:ranges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for TextEffectImplementation.ResolvedMap.Key() + 36);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextEffectImplementation<A>.ResolvedMap.Key()
{
  return Hasher._finalize()();
}

void *protocol witness for static Equatable.== infix(_:_:) in conformance TextEffectImplementation<A>.ResolvedMap.Key(void *result, void *a2)
{
  return static TextEffectImplementation.ResolvedMap.Key.== infix(_:_:)(result, a2);
}

uint64_t TextEffectImplementation.ResolvedMap.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x24C522390](&v7, a1, a2, v4, &type metadata for Text.Effect.ResolvedDrawing, WitnessTable);
  return v7;
}

void TextEffectImplementation.ResolvedMap.reset()()
{
  type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
  swift_getWitnessTable();
  type metadata accessor for Dictionary();

  Dictionary.removeAll(keepingCapacity:)(0);
}

uint64_t TextEffectImplementation.ResolvedMap.init()()
{
  type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
  swift_getWitnessTable();

  return Dictionary.init()();
}

uint64_t TextEffectImplementation.AnimationInfo.updateLayout(effect:identifier:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v72 = a6;
  uint64_t v64 = a4;
  uint64_t v63 = a3;
  uint64_t v75 = a1;
  uint64_t v10 = *(void *)(*v6 + 120);
  uint64_t v62 = *(void *)(*v6 + 128);
  uint64_t v11 = *(void *)(v62 + 16);
  uint64_t v12 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v74 = &v55[-v14];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v66 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v16);
  uint64_t v73 = &v55[-v17];
  uint64_t v18 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = &v55[-v19];
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(uint64_t, uint64_t))(v11 + 128))(v10, v11);
  uint64_t v21 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v20);
  swift_beginAccess();
  uint64_t v22 = *(void *)(a5 + 48);
  if (!*(void *)(v22 + 16)) {
    goto LABEL_17;
  }
  swift_retain();
  Swift::UInt64 v71 = a2;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v21);
  if ((v24 & 1) == 0)
  {
    swift_release();
LABEL_17:
    swift_endAccess();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v69 = v13;
  uint64_t v70 = v12;
  uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 16 * v23);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v76 = v21;
  uint64_t v77 = v7;
  uint64_t v65 = a5;
  if (v26)
  {
    v80[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = 0;
    uint64_t v28 = v80[0];
    unint64_t v29 = *(void *)(v80[0] + 16);
    do
    {
      uint64_t v30 = *(void *)(*(void *)(*(void *)(v25 + 8 * v27 + 32) + 96) + 16);
      v80[0] = v28;
      unint64_t v31 = *(void *)(v28 + 24);
      if (v29 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v29 + 1, 1);
        uint64_t v28 = v80[0];
      }
      ++v27;
      *(void *)(v28 + 16) = v29 + 1;
      *(void *)(v28 + 8 * v29++ + 32) = v30;
    }
    while (v26 != v27);
    swift_bridgeObjectRelease();
    uint64_t v21 = v76;
    uint64_t v7 = v77;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
  }
  uint64_t v32 = v72;
  int v33 = specialized static Array<A>.== infix(_:_:)(v28, v7[2]);
  char v34 = v33;
  uint64_t v35 = v71;
  if (v33)
  {
    int v58 = v33;
    v79[0] = *(double *)(v32 + 56);
    TextEffectsAnimationController.state(for:time:)(v71, v79, (uint64_t)v80);
    uint64_t v36 = v81;
    uint64_t v61 = v81;
    uint64_t v60 = v82;
    uint64_t v72 = v83;
    uint64_t v59 = v84;
    v7[3] = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v62 + 24))(0x6C6F686563616C50, 0xEB00000000726564, v10);
    void v7[4] = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Text.Effect.BaseContext.content<A>(for:key:)(v10, v35, v21, v63, v64, v65, v32, v10, v11);
    uint64_t v64 = _ViewInputs.base.modify(v36);
    uint64_t v65 = v38;
    uint64_t v62 = _ViewInputs.base.modify(v72);
    uint64_t v63 = v39;
    Swift::UInt64 v71 = (Swift::UInt64)v7 + *(void *)(*v7 + 160);
    Swift::UInt64 v40 = v71;
    swift_beginAccess();
    uint64_t v41 = v67;
    uint64_t v42 = v66;
    uint64_t v43 = AssociatedTypeWitness;
    (*(void (**)(unsigned char *, Swift::UInt64, uint64_t))(v67 + 16))(v66, v40, AssociatedTypeWitness);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v57 = v45(v43, AssociatedConformanceWitness);
    unsigned int v56 = v46 & 1;
    (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v42, v43);
    uint64_t v47 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v11 + 136);
    uint64_t v54 = v11;
    uint64_t v48 = v74;
    v47(v74, v64, v65, v62, v63, v57, v56, v10, v54);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v49 = v77;
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v69 + 8))(v48, v70);
    Swift::UInt64 v50 = v71;
    swift_beginAccess();
    (*(void (**)(Swift::UInt64, unsigned char *, uint64_t))(v41 + 40))(v50, v73, v43);
    swift_endAccess();
    uint64_t v51 = v49 + 5;
    swift_beginAccess();
    if (*(void *)(v49[5] + 16))
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = *v51;
      *uint64_t v51 = 0x8000000000000000;
      type metadata accessor for _NativeDictionary<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>();
      _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      *uint64_t v51 = v78;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    void v49[2] = v28;
    char v34 = v58;
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v34 & 1;
}

uint64_t TextEffectImplementation.AnimationInfo.clearFrameCache()()
{
  swift_beginAccess();
  swift_retain();
  Text.Effect.AttributeTracker.Tracker.commitUpdates()();
  swift_endAccess();
  swift_release();
  *(void *)(v0 + *(void *)(*(void *)v0 + 176)) = 0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for TextEffectImplementation.ResolvedMap();
  TextEffectImplementation.ResolvedMap.reset()();
  return swift_endAccess();
}

uint64_t TextEffectImplementation.AnimationInfo.restart()()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 168));
  swift_beginAccess();
  *(unsigned char *)(v1 + 48) = 1;
  *(void *)(v0 + *(void *)(*(void *)v0 + 176)) = 0;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for TextEffectImplementation.ResolvedMap();
  TextEffectImplementation.ResolvedMap.reset()();
  return swift_endAccess();
}

BOOL TextEffectImplementation.AnimationInfo.isSettled.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 168));
  swift_beginAccess();
  return *(void *)(v1 + 32) == 0;
}

unint64_t TextEffectImplementation.AnimationInfo.layout(for:state:context:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v36 = a6;
  uint64_t v8 = *v6;
  uint64_t v9 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (void *)((char *)&v26 - v11);
  uint64_t v13 = *(void *)(v8 + 176);
  uint64_t v14 = *(uint64_t *)((char *)v6 + v13);
  if (v14)
  {
    type metadata accessor for Text.Effect.DrawableFragment();
    unint64_t result = Text.Effect.DrawableFragment.fragmentIndex.getter();
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v16 = result;
      if (result < *(void *)(v14 + 16))
      {
        uint64_t v17 = *(void *)(type metadata accessor for Text.Effect.Layout.Fragment() - 8);
        return outlined init with copy of Text.Effect.Layout.Fragment(v14+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v16, v36, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
      }
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = *((void *)a1 + 11);
  uint64_t v30 = *((void *)a1 + 10);
  uint64_t v31 = v18;
  long long v29 = *((_OWORD *)a1 + 4);
  int v28 = a1[56];
  uint64_t v19 = *((void *)a1 + 6);
  int v27 = a1[40];
  uint64_t v20 = *((void *)a1 + 4);
  uint64_t v21 = *((void *)a1 + 3);
  long long v26 = *(_OWORD *)(a1 + 8);
  char v22 = *a1;
  type metadata accessor for Text.Effect.DrawableFragment();
  Text.Effect.DrawableFragment.content.getter(v12);
  char v37 = v22;
  long long v38 = v26;
  uint64_t v39 = v21;
  uint64_t v40 = v20;
  char v41 = v27;
  uint64_t v42 = v19;
  char v43 = v28;
  long long v44 = v29;
  uint64_t v45 = v30;
  uint64_t v46 = v31;
  uint64_t v23 = TextEffectImplementation.AnimationInfo.performLayout(for:state:context:)((uint64_t)v12, (long long *)&v37, v32, v33, v34, v35);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  *(uint64_t *)((char *)v6 + v13) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t result = Text.Effect.DrawableFragment.fragmentIndex.getter();
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v24 = result;
  if (result < *(void *)(v23 + 16))
  {
    uint64_t v25 = *(void *)(type metadata accessor for Text.Effect.Layout.Fragment() - 8);
    outlined init with copy of Text.Effect.Layout.Fragment(v23+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v24, v36, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    return swift_bridgeObjectRelease();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t TextEffectImplementation.AnimationInfo.performLayout(for:state:context:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v73 = a5;
  uint64_t v74 = a6;
  uint64_t v71 = a3;
  uint64_t v72 = a4;
  uint64_t v75 = a1;
  uint64_t v8 = *v6;
  uint64_t v9 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v61 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = v6;
  uint64_t v11 = *(void *)(v8 + 120);
  uint64_t v12 = *(void *)(v8 + 128);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v67 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v66 = (char *)&v60 - v15;
  uint64_t v65 = v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v64 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v62 = (char *)&v60 - v17;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(255, &lazy cache variable for type metadata for Range<Text.Effect.FragmentIdentifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, MEMORY[0x263F8D870]);
  uint64_t v19 = v18;
  uint64_t v69 = v18;
  unint64_t v20 = lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>();
  unint64_t v68 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v83 = v19;
  *((void *)&v83 + 1) = v14;
  *(void *)&long long v84 = v20;
  *((void *)&v84 + 1) = WitnessTable;
  uint64_t v22 = type metadata accessor for Zip2Sequence();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v60 - v24;
  long long v26 = a2[3];
  long long v85 = a2[2];
  long long v86 = v26;
  long long v27 = a2[5];
  long long v87 = a2[4];
  long long v88 = v27;
  long long v28 = a2[1];
  long long v83 = *a2;
  long long v84 = v28;
  swift_getWitnessTable();
  lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
  RandomAccessCollection<>.indices.getter();
  long long v81 = v78;
  uint64_t v69 = v14;
  long long v29 = v70;
  zip<A, B>(_:_:)();
  v77[2] = v29;
  v77[3] = &v83;
  v77[4] = v71;
  v77[5] = v72;
  v77[6] = v73;
  v77[7] = v74;
  v76[2] = v11;
  v76[3] = v12;
  v76[4] = partial apply for closure #1 in TextEffectImplementation.AnimationInfo.performLayout(for:state:context:);
  v76[5] = v77;
  uint64_t v30 = (char *)type metadata accessor for Text.Effect.Layout.Fragment();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v33 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned Text.Effect.FragmentIdentifier, @guaranteed Text.Effect.DrawableFragment<A>) -> (@out Text.Effect.Layout.Fragment), (uint64_t)v76, v22, v30, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v82 = v33;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12) != 1) {
    return v82;
  }
  uint64_t v34 = (uint64_t)v29 + *(void *)(*v29 + 160);
  swift_beginAccess();
  uint64_t v36 = v62;
  uint64_t v35 = v63;
  uint64_t v37 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v34, v64);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v37, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  uint64_t v40 = (uint64_t)v66;
  uint64_t v41 = v67;
  uint64_t v42 = v75;
  uint64_t v43 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v75, v69);
  long long v44 = (char *)v40;
  if (v39)
  {
    uint64_t v45 = v41;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v43);
    uint64_t v55 = v39[2];
    if (v55)
    {
      unsigned int v56 = v39 + 6;
      do
      {
        int64_t v57 = *(v56 - 2);
        int64_t v58 = *v56;
        v56 += 4;
        specialized TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)((unint64_t *)&v82, v57, v58, v42, v11, v12);
        --v55;
      }
      while (v55);
    }
    swift_bridgeObjectRelease();
    return v82;
  }
  uint64_t v46 = v61;
  outlined init with copy of Text.Effect.Layout.Fragment(v40, (uint64_t)v61, type metadata accessor for Text.Effect.BaseContent);
  specialized BidirectionalCollection.last.getter((uint64_t)&v78);
  if (!(void)v78) {
    goto LABEL_8;
  }
  uint64_t v47 = v80;
  uint64_t v48 = *(void *)(*(void *)(v79 + 96) + 16);
  outlined consume of (fragment: Text.Effect.BaseFragment, cluster: Text.Effect.ClusterIndex)?(v78);
  uint64_t v49 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
    __break(1u);
LABEL_18:
    swift_release();
    goto LABEL_19;
  }
  if (v49 < v47)
  {
    __break(1u);
LABEL_8:
    uint64_t v49 = 0;
  }
  uint64_t v50 = *v46;
  Swift::UInt64 v51 = v46[1];
  uint64_t v52 = v46[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v50 + 48) + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v51, v52);
    if (v53)
    {
      swift_endAccess();
      swift_release();
      uint64_t v54 = specialized Text.Effect.DrawableContent.endIndex.getter();
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Chunk>, (uint64_t)&type metadata for Text.Effect.Chunk, MEMORY[0x263F8E0F8]);
      uint64_t v39 = (void *)swift_allocObject();
      *((_OWORD *)v39 + 1) = xmmword_2461B9DC0;
      v39[4] = 0;
      v39[5] = 0;
      v39[6] = v54;
      v39[7] = v49;
      _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0((uint64_t)v46, type metadata accessor for Text.Effect.BaseContent);
      long long v44 = v66;
      uint64_t v45 = v67;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
LABEL_19:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t TextEffectImplementation.AnimationInfo.drawable(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = (uint64_t *)(v5 + 40);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 40);
  if (*(void *)(v13 + 16))
  {
    uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
      swift_endAccess();
      swift_bridgeObjectRetain();
      return v16;
    }
  }
  uint64_t v17 = swift_endAccess();
  uint64_t v23 = 0;
  MEMORY[0x270FA5388](v17);
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  _OWORD v21[5] = a5;
  v21[6] = v6;
  v21[7] = a1;
  v21[8] = &v23;
  uint64_t result = TextEffectsAnimationController.evaluateWithTraitCollection(_:)((uint64_t)partial apply for closure #1 in TextEffectImplementation.AnimationInfo.drawable(_:context:), (uint64_t)v21);
  uint64_t v19 = v23;
  if (v23)
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, a1, isUniquelyReferenced_nonNull_native);
    *uint64_t v12 = v22;
    swift_bridgeObjectRelease();
    uint64_t result = swift_endAccess();
    uint64_t v16 = v23;
    if (v23) {
      return v16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TextEffectImplementation.AnimationInfo.drawable(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, uint64_t *a7)
{
  long long v29 = a7;
  uint64_t v27 = a4;
  uint64_t v10 = *a5;
  uint64_t v28 = *(void *)(*a5 + 128);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v26 - v13;
  char v15 = (void *)((char *)a5 + *(void *)(v10 + 192));
  Swift::UInt64 v17 = *v15;
  uint64_t v16 = v15[1];
  swift_retain();
  specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v17, v16, a6, a3, (uint64_t)v30);
  swift_release();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  unint64_t v20 = (char *)a5 + *(void *)(*a5 + 160);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v20, AssociatedTypeWitness);
  uint64_t v21 = MEMORY[0x24C527E00](v27 + 16);
  if (v21)
  {
    uint64_t v22 = (void *)v21;
    double v23 = *(double *)(v21 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double v23 = 1.0;
  }
  memset(v31, 0, sizeof(v31));
  char v32 = 1;
  double v33 = v23;
  uint64_t v24 = Text.Effect.Configuration.drawable(for:timing:quantization:)((uint64_t)v30, (uint64_t)v14, (uint64_t)v31, v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  uint64_t *v29 = v24;
  return swift_bridgeObjectRelease();
}

uint64_t TextEffectImplementation.AnimationInfo.needsUpdate(for:state:consideringRestart:)(Swift::UInt a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  v21[0] = *(unsigned char *)a2;
  long long v22 = *(_OWORD *)(a2 + 8);
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  char v25 = v7;
  uint64_t v26 = v8;
  char v27 = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v28 = *(_OWORD *)(a2 + 64);
  long long v29 = v10;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = *(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = v12(a1, v13, AssociatedConformanceWitness);
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  swift_retain();
  char v19 = Text.Effect.AttributeTracker.needsUpdate(for:state:interval:consideringRestart:)(a1, (uint64_t)v21, v14, v16, v18, a3);
  swift_release();
  return v19 & 1;
}

uint64_t closure #1 in TextEffectImplementation.AnimationInfo.performLayout(for:state:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, BOOL a9@<X8>)
{
  *(void *)&long long v159 = a8;
  *(void *)&long long v158 = a7;
  uint64_t v156 = a5;
  *(void *)&long long v157 = a6;
  long long v10 = a3;
  uint64_t v155 = a1;
  BOOL v145 = a9;
  uint64_t v12 = *a3;
  LODWORD(v153) = *a4;
  uint64_t v13 = *((void *)a4 + 1);
  uint64_t v117 = (long long *)(a4 + 8);
  uint64_t v140 = *((void *)a4 + 2);
  uint64_t v141 = v13;
  uint64_t v139 = *((void *)a4 + 3);
  uint64_t v138 = *((void *)a4 + 4);
  LODWORD(v154) = a4[40];
  uint64_t v137 = *((void *)a4 + 6);
  int v136 = a4[56];
  uint64_t v14 = *((void *)a4 + 8);
  uint64_t v134 = *((void *)a4 + 9);
  uint64_t v135 = v14;
  uint64_t v15 = *((void *)a4 + 10);
  uint64_t v132 = *((void *)a4 + 11);
  uint64_t v133 = v15;
  uint64_t v16 = *(void *)(*(void *)(v12 + 128) + 16);
  uint64_t v17 = *(void *)(v12 + 120);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  unint64_t v20 = (char *)&v117 - v19;
  uint64_t v21 = type metadata accessor for Text.Effect.DrawableFragment();
  Swift::UInt v22 = Text.Effect.DrawableFragment.fragmentIndex.getter();
  long long v23 = *((_OWORD *)a4 + 3);
  v197[1] = *((_OWORD *)a4 + 2);
  long long v198 = v23;
  long long v24 = *((_OWORD *)a4 + 5);
  long long v199 = *((_OWORD *)a4 + 4);
  long long v200 = v24;
  long long v25 = *(_OWORD *)a4;
  long long v26 = *((_OWORD *)a4 + 1);
  Swift::String v142 = a4;
  long long v196 = v25;
  v197[0] = v26;
  Swift::UInt v144 = v22;
  int v118 = TextEffectImplementation.AnimationInfo.needsUpdate(for:state:consideringRestart:)(v22, (uint64_t)&v196, 0);
  if ((v118 & 1) == 0)
  {
    type metadata accessor for Text.Effect.ConcreteLayoutState();
    (*(void (**)(uint64_t, uint64_t))(v16 + 128))(v17, v16);
    uint64_t v35 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v20);
    uint64_t v36 = *(void *)(a2 + 24);
    uint64_t v37 = v36
        + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    BOOL v39 = v145;
    (*(void (**)(BOOL, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v145, v37, v38);
    long long v159 = *(_OWORD *)(v36 + 184);
    uint64_t v40 = *(void *)(v36 + 200);
    uint64_t v41 = *(void *)(v36 + 208);
    uint64_t result = type metadata accessor for Text.Effect.Layout.Fragment();
    uint64_t v42 = v39 + *(int *)(result + 20);
    *(_OWORD *)uint64_t v42 = v159;
    *(void *)(v42 + 16) = v40;
    *(void *)(v42 + 24) = v41;
    uint64_t v43 = v39 + *(int *)(result + 24);
    *(void *)uint64_t v43 = v35;
LABEL_79:
    *(void *)(v43 + 8) = 0;
    *(unsigned char *)(v43 + 16) = (v118 & 1) == 0;
    return result;
  }
  uint64_t v146 = TextEffectImplementation.AnimationInfo.drawable(_:context:)(v155, v156, v157, v158, v159);
  Text.Effect.DrawableFragment.lineBreakingFragment.getter(v21, (uint64_t)v227);
  uint64_t result = Text.Effect.DrawableFragment.range.getter();
  if (!__OFSUB__(v28, result))
  {
    uint64_t v143 = a2;
    if (v28 == result)
    {
      swift_bridgeObjectRelease();
      long long v29 = (void *)MEMORY[0x263F8EE78];
      double v30 = 0.0;
      double v31 = 0.0;
      double v32 = 0.0;
      double v33 = 0.0;
      *(void *)&long long v159 = MEMORY[0x263F8EE78];
      BOOL v34 = v145;
      goto LABEL_45;
    }
    if (v28 < result) {
      goto LABEL_96;
    }
    uint64_t v131 = v21;
    uint64_t v130 = *(void *)(*v10 + 168);
    if (result < v28)
    {
      int v129 = LOBYTE(v153) & 1;
      uint64_t v147 = *(void *)(v146 + 16);
      uint64_t v127 = (char *)&v198 + 9;
      uint64_t v128 = (_DWORD *)((char *)v197 + 1);
      Swift::String v126 = (char *)&v199 + 9;
      uint64_t v122 = (char *)&v195;
      uint64_t v123 = &v224;
      uint64_t v119 = v146 + 40;
      int v125 = v154 & 1;
      long long v29 = (void *)MEMORY[0x263F8EE78];
      *(void *)&long long v159 = MEMORY[0x263F8EE78];
      double v44 = 0.0;
      double v45 = 0.0;
      double v46 = 0.0;
      double v30 = 0.0;
      uint64_t v47 = result;
      uint64_t v120 = result;
      uint64_t v121 = v10;
      uint64_t v124 = v28;
      while (1)
      {
        Text.Effect.DrawableFragment.typographicBounds(for:)(v47, &v228);
        long long v157 = v229;
        long long v158 = v228;
        double v48 = v230;
        double v49 = v231;
        Text.Effect.DrawableFragment.typographicBounds(for:)(v47, &v232);
        long long v50 = v229;
        double v51 = v230;
        double v52 = v231;
        uint64_t v53 = v235;
        uint64_t v54 = v233;
        uint64_t v55 = *(void *)((char *)v10 + v130);
        char v56 = v125;
        char v226 = v125;
        char v225 = 1;
        *(void *)&long long v196 = v47;
        *((void *)&v196 + 1) = v144;
        LOBYTE(v197[0]) = v129;
        int64_t v57 = v128;
        *uint64_t v128 = v237[0];
        *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)((char *)v237 + 3);
        *((void *)&v197[0] + 1) = v141;
        *(void *)&v197[1] = v140;
        *((void *)&v197[1] + 1) = v139;
        *(void *)&long long v198 = v138;
        BYTE8(v198) = v56;
        int64_t v58 = v127;
        *(_DWORD *)(v127 + 3) = *(_DWORD *)&v236[3];
        *int64_t v58 = *(_DWORD *)v236;
        *(void *)&long long v199 = v137;
        BYTE8(v199) = v136;
        uint64_t v59 = v126;
        *(_DWORD *)(v126 + 3) = *(_DWORD *)((char *)&v160 + 3);
        *uint64_t v59 = v160;
        *(void *)&long long v200 = v135;
        *((void *)&v200 + 1) = v134;
        *(void *)&long long v201 = v133;
        *((void *)&v201 + 1) = v132;
        double v202 = *((double *)&v50 + 1);
        double v203 = v51;
        double v204 = v52;
        long long v205 = v50;
        double v206 = v51;
        double v207 = v52;
        uint64_t v208 = v50;
        long long v209 = v234;
        uint64_t v210 = v53;
        uint64_t v211 = v54;
        long long v212 = v158;
        long long v213 = v157;
        *(double *)&long long v214 = v48;
        *((double *)&v214 + 1) = v49;
        uint64_t v215 = v55;
        uint64_t v216 = MEMORY[0x263F8EE78];
        long long v217 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v222 = 0u;
        uint64_t v223 = 0;
        char v224 = v225;
        outlined retain of Text.Effect.State((uint64_t)v142);
        uint64_t result = swift_retain();
        if (v147)
        {
          swift_bridgeObjectRetain();
          uint64_t v60 = v119;
          uint64_t v61 = v147;
          do
          {
            uint64_t v62 = *(void (**)(uint64_t, long long *))(v60 - 8);
            swift_retain();
            v62(v47, &v196);
            swift_release();
            v60 += 16;
            --v61;
          }
          while (v61);
          uint64_t result = swift_bridgeObjectRelease();
        }
        uint64_t v63 = v196;
        if (__OFSUB__((void)v196, v47)) {
          goto LABEL_85;
        }
        double v151 = v30;
        double v152 = *(double *)&v50;
        double v64 = v202;
        double v65 = v203;
        double v66 = v204;
        uint64_t v67 = v205;
        double v68 = 0.0;
        if ((void)v196 == v47) {
          double v69 = v202;
        }
        else {
          double v69 = 0.0;
        }
        if ((void)v196 == v47) {
          double v70 = v203;
        }
        else {
          double v70 = 0.0;
        }
        if ((void)v196 == v47) {
          double v71 = v204;
        }
        else {
          double v71 = 0.0;
        }
        if ((void)v196 == v47) {
          double v68 = *(double *)&v205;
        }
        double v153 = v68;
        if (v44 <= v69) {
          double v44 = v69;
        }
        if (v45 <= v70) {
          double v45 = v70;
        }
        double v148 = v44;
        double v149 = v45;
        if (v46 <= v71) {
          double v46 = v71;
        }
        double v150 = v46;
        uint64_t v72 = *((void *)&v205 + 1);
        double v73 = v206;
        double v74 = v207;
        *(void *)&long long v158 = v208;
        uint64_t v156 = *((void *)&v209 + 1);
        *(void *)&long long v157 = v209;
        uint64_t v154 = v211;
        uint64_t v155 = v210;
        uint64_t v75 = v216;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        unint64_t v77 = v29[2];
        unint64_t v76 = v29[3];
        if (v77 >= v76 >> 1) {
          long long v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v29);
        }
        long long v29[2] = v77 + 1;
        long long v78 = (double *)&v29[16 * v77];
        *((void *)v78 + 4) = v63;
        v78[5] = v64;
        v78[6] = v65;
        v78[7] = v66;
        *((void *)v78 + 8) = v67;
        uint64_t v79 = v72;
        *((void *)v78 + 9) = v72;
        v78[10] = v73;
        uint64_t v80 = v158;
        v78[11] = v74;
        *((void *)v78 + 12) = v80;
        uint64_t v81 = v156;
        *((void *)v78 + 13) = v157;
        *((void *)v78 + 14) = v81;
        uint64_t v82 = v154;
        *((void *)v78 + 15) = v155;
        *((void *)v78 + 16) = v82;
        v78[17] = 0.0;
        v78[18] = 0.0;
        *((void *)v78 + 19) = v75;
        double v83 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          *(void *)&long long v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v159 + 16) + 1, 1, (void *)v159);
        }
        unint64_t v85 = *(void *)(v159 + 16);
        unint64_t v84 = *(void *)(v159 + 24);
        double v86 = v153;
        if (v85 >= v84 >> 1)
        {
          uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, (void *)v159);
          double v86 = v153;
          *(void *)&long long v159 = v90;
        }
        double v87 = v86 - v152;
        uint64_t v88 = v159;
        *(void *)(v159 + 16) = v85 + 1;
        *(double *)(v88 + 8 * v85 + 32) = v87;
        ++v47;
        char v89 = *v123;
        v161[0] = v63;
        v161[1] = *((void *)&v196 + 1);
        char v162 = v197[0];
        long long v163 = *(_OWORD *)((char *)v197 + 8);
        uint64_t v164 = *((void *)&v197[1] + 1);
        uint64_t v165 = v198;
        char v166 = BYTE8(v198);
        uint64_t v167 = v199;
        char v168 = BYTE8(v199);
        long long v169 = v200;
        long long v170 = v201;
        double v171 = v64;
        double v172 = v65;
        double v173 = v66;
        uint64_t v174 = v67;
        uint64_t v175 = v79;
        double v176 = v83;
        double v177 = v74;
        uint64_t v178 = v158;
        uint64_t v179 = v157;
        uint64_t v180 = v156;
        uint64_t v181 = v155;
        uint64_t v182 = v154;
        long long v183 = v212;
        long long v184 = v213;
        long long v185 = v214;
        uint64_t v186 = v215;
        uint64_t v187 = v75;
        long long v188 = v217;
        long long v189 = v218;
        long long v190 = v219;
        long long v191 = v220;
        long long v192 = v221;
        long long v193 = v222;
        uint64_t v194 = v223;
        *uint64_t v122 = v89;
        uint64_t result = outlined release of Text.Effect.TransformContext((uint64_t)v161);
        if (__OFSUB__(v124, v47))
        {
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        double v30 = v151 + v86;
        if (v124 == v47) {
          break;
        }
        uint64_t result = v120;
        long long v10 = v121;
        double v45 = v149;
        double v46 = v150;
        double v44 = v148;
        if (v120 == 0x7FFFFFFFFFFFFFFFLL || v47 >= v124) {
          goto LABEL_87;
        }
      }
      swift_bridgeObjectRelease();
      BOOL v34 = v145;
      a2 = v143;
      double v32 = v149;
      double v31 = v150;
      double v33 = v148;
LABEL_45:
      long long v91 = v117[1];
      long long v196 = *v117;
      v197[0] = v91;
      v197[1] = v117[2];
      outlined init with take of Time?((uint64_t)v197 + 8, (uint64_t)v236);
      outlined init with take of Time?((uint64_t)v236, (uint64_t)v237);
      if ((v238 & 1) == 0)
      {
        swift_beginAccess();
        swift_retain();
        specialized Set._Variant.insert(_:)(&v160, v144);
        swift_endAccess();
        swift_release();
      }
      uint64_t v92 = specialized Text.Effect.DrawableFragment.visualOrder.getter();
      uint64_t v94 = v92;
      unint64_t v95 = *(void *)(v92 + 16);
      if (v95)
      {
        uint64_t v96 = v93;
        *(void *)&long long v157 = *(void *)(a2 + 48);
        *(void *)&long long v158 = v92 + 32;
        uint64_t v97 = v159 + 32;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v98 = 0;
        unint64_t v99 = 0;
        double v100 = 0.0;
        uint64_t v101 = v96;
        while (1)
        {
          if (v99 >= *(void *)(v94 + 16))
          {
            __break(1u);
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
            goto LABEL_86;
          }
          unsigned int v102 = (uint64_t *)(v158 + 24 * v99);
          uint64_t v103 = *v102;
          uint64_t v104 = v102[1];
          int v105 = *((unsigned __int8 *)v102 + 16);
          if (v105)
          {
            if (v105 != 1)
            {
              BOOL v34 = 1;
              BOOL v107 = __OFADD__(v101, v103);
              uint64_t v111 = v101 + v103;
              if (v107) {
                goto LABEL_81;
              }
              goto LABEL_68;
            }
            uint64_t v106 = v104 - 1;
            if (__OFSUB__(v104, 1)) {
              goto LABEL_88;
            }
            BOOL v107 = __OFSUB__(v106, v98);
            uint64_t v108 = v106 - v98;
            if (v107) {
              goto LABEL_89;
            }
            uint64_t v109 = v98 + 1;
            if (__OFADD__(v98, 1)) {
              goto LABEL_90;
            }
            BOOL v107 = __OFSUB__(v104, v103);
            uint64_t v110 = v104 - v103;
            if (v107) {
              goto LABEL_91;
            }
          }
          else
          {
            uint64_t v108 = v103 + v98;
            if (__OFADD__(v103, v98)) {
              goto LABEL_92;
            }
            uint64_t v109 = v98 + 1;
            if (__OFADD__(v98, 1)) {
              goto LABEL_93;
            }
            BOOL v107 = __OFSUB__(v104, v103);
            uint64_t v110 = v104 - v103;
            if (v107) {
              goto LABEL_94;
            }
          }
          BOOL v34 = v109 >= v110;
          if (v109 < v110) {
            uint64_t v98 = v109;
          }
          else {
            uint64_t v98 = 0;
          }
          uint64_t v111 = v101 + v108;
          if (__OFADD__(v101, v108)) {
            goto LABEL_81;
          }
LABEL_68:
          unint64_t v112 = v111 - v157;
          if (__OFSUB__(v111, (void)v157)) {
            goto LABEL_82;
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            if ((v112 & 0x8000000000000000) != 0) {
              goto LABEL_76;
            }
          }
          else
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            long long v29 = (void *)result;
            if ((v112 & 0x8000000000000000) != 0)
            {
LABEL_76:
              __break(1u);
              break;
            }
          }
          if (v112 >= v29[2]) {
            goto LABEL_83;
          }
          char v113 = (double *)&v29[16 * v112];
          v113[17] = v100;
          v113[18] = 0.0;
          if (v112 >= *(void *)(v159 + 16)) {
            goto LABEL_84;
          }
          v99 += v34;
          double v100 = v100 + *(double *)(v97 + 8 * v112);
          BOOL v34 = v145;
          if (v99 >= v95) {
            goto LABEL_78;
          }
        }
      }
      swift_bridgeObjectRetain();
LABEL_78:
      outlined release of Text.Effect.BaseFragment((uint64_t)v227);
      swift_bridgeObjectRelease();
      uint64_t v114 = *(void *)(v143 + 24)
           + OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges;
      _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
      (*(void (**)(BOOL, uint64_t, uint64_t))(*(void *)(v115 - 8) + 16))(v34, v114, v115);
      swift_bridgeObjectRelease();
      uint64_t result = type metadata accessor for Text.Effect.Layout.Fragment();
      uint64_t v116 = (double *)(v34 + *(int *)(result + 20));
      double *v116 = v33;
      v116[1] = v32;
      v116[2] = v31;
      v116[3] = v30;
      uint64_t v43 = v34 + *(int *)(result + 24);
      *(void *)uint64_t v43 = v29;
      goto LABEL_79;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
  }
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

BOOL closure #1 in TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)(unint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v29 - v11;
  unint64_t v13 = *a1;
  if (v13 == a2) {
    return 1;
  }
  uint64_t v30 = v10;
  uint64_t v31 = v4;
  HIDWORD(v29) = a4;
  type metadata accessor for Text.Effect.DrawableContent();
  Text.Effect.DrawableContent.subscript.getter(v13, (uint64_t)v32);
  uint64_t v15 = v33;
  uint64_t v34 = v33;
  BOOL v16 = *(void *)(v33 + 16) == 0;
  uint64_t v17 = *(void **)(v33 + 32);
  uint64_t v18 = *(void *)(v33 + 40);
  char v19 = *(unsigned char *)(v33 + 48);
  if ((v19 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(*(void **)(v33 + 32), *(void *)(v33 + 40), 0);
    outlined copy of Text.Layout.Line.Line(v17, v18, 0);
    outlined retain of ViewTransform((uint64_t)&v34);
    swift_release();
    unint64_t v20 = (const __CTLine *)v17;
    goto LABEL_7;
  }
  outlined copy of Text.Layout.Line.Line(*(void **)(v33 + 32), *(void *)(v33 + 40), 1);
  outlined retain of ViewTransform((uint64_t)&v34);
  unint64_t v20 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v17);
  if (v20)
  {
LABEL_7:
    CFArrayRef RunCount = _CTLineGetRunCount(v20);

    goto LABEL_8;
  }
  CFArrayRef RunCount = 0;
  char v19 = 1;
LABEL_8:
  outlined consume of Text.Layout.Line.Line(v17, v18, v19);
  if (RunCount == *(const __CFArray **)(v15 + 24)) {
    char v22 = v16 | 2;
  }
  else {
    char v22 = v16;
  }
  uint64_t v23 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v15+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v30);
  uint64_t v24 = specialized RangeSet.lowerBound.getter();
  int v26 = v25 & 1;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v23);
  outlined release of Text.Effect.BaseFragment((uint64_t)v32);
  outlined release of ViewTransform((uint64_t)&v34);
  if (v24) {
    BOOL v27 = 0;
  }
  else {
    BOOL v27 = v26 == 0;
  }
  char v28 = v22 | 4;
  if (!v27) {
    char v28 = v22;
  }
  return (BYTE4(v29) & ~v28) == 0;
}

uint64_t closure #2 in TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)@<X0>(double *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v7 = type metadata accessor for Text.Effect.Layout.Fragment();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v11 = *a1;
  unint64_t v12 = *a2;
  type metadata accessor for Text.Effect.DrawableContent();
  Text.Effect.DrawableContent.subscript.getter(v12, (uint64_t)v18);
  uint64_t v13 = type metadata accessor for Text.Effect.DrawableFragment();
  Text.Effect.DrawableFragment.defaultDrawingFragment.getter(v13, (uint64_t)v19);
  double v14 = Text.Effect.DrawableFragment.width.getter();
  uint64_t result = outlined release of Text.Effect.BaseFragment((uint64_t)v19);
  if ((v12 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v12 < *(void *)(*(void *)a3 + 16))
  {
    outlined init with copy of Text.Effect.Layout.Fragment(*(void *)a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v12, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    outlined release of Text.Effect.BaseFragment((uint64_t)v18);
    double v16 = *(double *)&v10[*(int *)(v7 + 20) + 24];
    uint64_t result = _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    double *v17 = v11 + v14 - v16;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:)(Swift::UInt64 a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  BOOL v107 = a5;
  uint64_t v116 = a3;
  unint64_t v115 = a2;
  Swift::UInt64 v114 = a1;
  uint64_t v8 = *v5;
  uint64_t v113 = type metadata accessor for Text.Effect.Layout.Fragment();
  MEMORY[0x270FA5388](v113);
  uint64_t v104 = (uint64_t)v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v14 = (char *)v97 - v13;
  unint64_t v15 = *(void *)(v8 + 120);
  unint64_t v16 = *(void *)(v8 + 128);
  uint64_t v106 = type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v18 = (unint64_t *)((char *)v97 - v17);
  LODWORD(v112) = *a4;
  uint64_t v19 = *((void *)a4 + 1);
  uint64_t v20 = *((void *)a4 + 2);
  uint64_t v21 = *((void *)a4 + 3);
  *(void *)&long long v111 = *((void *)a4 + 4);
  LODWORD(v110) = a4[40];
  uint64_t v22 = *((void *)a4 + 6);
  LODWORD(v109) = a4[56];
  uint64_t v108 = *((void *)a4 + 8);
  uint64_t v103 = *((void *)a4 + 9);
  uint64_t v102 = *((void *)a4 + 10);
  uint64_t v101 = *((void *)a4 + 11);
  unint64_t v23 = *(void *)(v16 + 16);
  type metadata accessor for Text.Effect.DrawableFragment();
  unint64_t v24 = v15;
  unint64_t v25 = Text.Effect.DrawableFragment.fragmentIndex.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v116, v11);
  TextEffectImplementation.ResolvedMap.Key.init(fragment:ranges:)(v25, (uint64_t)v14, v18);
  int v26 = (void *)((char *)v6 + *(void *)(*v6 + 184));
  swift_beginAccess();
  uint64_t v27 = TextEffectImplementation.ResolvedMap.subscript.getter((uint64_t)v18, *v26);
  if (v27)
  {
    uint64_t v28 = v27;
    swift_endAccess();
    Text.Effect.DrawingContext.Storage.append(_:)(v28);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void *, uint64_t))(v105 + 8))(v18, v106);
  }
  else
  {
    v97[0] = v25;
    v97[1] = v23;
    v97[2] = (unint64_t)v26;
    unint64_t v98 = v16;
    unint64_t v100 = v24;
    unint64_t v99 = v18;
    swift_endAccess();
    v121[0] = v112;
    uint64_t v122 = v19;
    uint64_t v123 = v20;
    uint64_t v124 = v21;
    uint64_t v125 = v111;
    char v126 = v110;
    uint64_t v127 = v22;
    char v128 = (char)v109;
    uint64_t v129 = v108;
    uint64_t v130 = v103;
    uint64_t v131 = v102;
    uint64_t v132 = v101;
    uint64_t v30 = *v107;
    uint64_t v31 = *(void **)(*v107 + 16);
    uint64_t v32 = v31[4];
    uint64_t v33 = v31[5];
    uint64_t v34 = v31[6];
    uint64_t v35 = v31[7];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    unint64_t v36 = v115;
    TextEffectImplementation.AnimationInfo.layout(for:state:context:)(v121, v32, v33, v34, v35, v104);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void **)(v30 + 16);
    uint64_t v38 = v37[3];
    uint64_t v40 = v37[4];
    uint64_t v39 = v37[5];
    uint64_t v41 = v37[6];
    uint64_t v42 = v37[7];
    uint64_t v44 = v37[8];
    uint64_t v43 = v37[9];
    type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
    double v45 = (void *)swift_allocObject();
    v45[3] = v38;
    v45[4] = v40;
    v45[5] = v39;
    v45[6] = v41;
    v45[7] = v42;
    v45[8] = v44;
    v45[9] = v43;
    v45[2] = MEMORY[0x263F8EE78];
    type metadata accessor for Text.Effect.DrawingContext.Storage();
    uint64_t v46 = swift_allocObject();
    *(void *)(v46 + 32) = 0;
    *(void *)(v46 + 40) = 0;
    *(void *)(v46 + 48) = 0x3FF0000000000000;
    *(void *)(v46 + 56) = 0;
    *(void *)(v46 + 64) = 0;
    *(void *)(v46 + 72) = 0x3FF0000000000000;
    *(void *)(v46 + 80) = 0;
    *(void *)(v46 + 88) = 0;
    *(unsigned char *)(v46 + 96) = 1;
    *(_OWORD *)(v46 + 104) = 0u;
    *(_OWORD *)(v46 + 120) = 0u;
    *(_OWORD *)(v46 + 136) = 0u;
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v46 + 152) = _Q1;
    *(void *)(v46 + 168) = 0x3FF0000000000000;
    *(unsigned char *)(v46 + 176) = 0;
    *(_OWORD *)(v46 + 184) = 0u;
    *(_OWORD *)(v46 + 200) = 0u;
    *(void *)(v46 + 216) = 0;
    *(void *)(v46 + 16) = v45;
    *(void *)(v46 + 24) = 0x3FF0000000000000;
    uint64_t v52 = MEMORY[0x24C527E00](v42 + 16);
    if (v52)
    {
      uint64_t v53 = (void *)v52;
      double v54 = *(double *)(v52 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v55 = swift_bridgeObjectRetain();
      double v54 = 1.0;
    }
    uint64_t v56 = v116;
    v118[0] = v46;
    memset(&v118[1], 0, 24);
    char v119 = 1;
    double v120 = v54;
    uint64_t v57 = v104;
    uint64_t v58 = v104 + *(int *)(v113 + 24);
    Swift::UInt64 v59 = v114;
    if (*(unsigned char *)(v58 + 16) == 1)
    {
      uint64_t v60 = *(void *)(*(void *)(v30 + 16) + 48);
      uint64_t v61 = *(void *)v58;
      uint64_t v62 = *(void *)(v58 + 8);
      outlined copy of Text.Effect.Layout.Fragment.Storage(*(void *)v58, v62, 1);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v59, v61, v97[0], v60, (uint64_t)v121);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v63 = v124;
      swift_retain();
      double v64 = Text.Effect.KeyframeLayout.Fragment.runIndices(for:)(v56, v63);
      swift_release();
      uint64_t v65 = v64[2];
      if (v65)
      {
        uint64_t v102 = v61;
        uint64_t v103 = v62;
        uint64_t v66 = 0;
        uint64_t v108 = v65 - 1;
        uint64_t v109 = v64;
        while (1)
        {
          LODWORD(v115) = *(unsigned __int8 *)(v46 + 96);
          if (v115)
          {
            uint64_t v113 = 0;
            Swift::UInt64 v114 = 0;
          }
          else
          {
            Swift::UInt64 v114 = *(void *)(v46 + 88);
            uint64_t v113 = *(void *)(v46 + 80);
          }
          uint64_t v116 = v66;
          long long v112 = *(_OWORD *)&v64[2 * v66 + 4];
          uint64_t v67 = *(void **)(v63 + 32);
          uint64_t v68 = *(void *)(v63 + 40);
          uint64_t v69 = *(unsigned __int8 *)(v63 + 48);
          long long v111 = *(_OWORD *)(v63 + 56);
          uint64_t v110 = *(unsigned int *)(v63 + 72);
          uint64_t v70 = *(void *)(v46 + 24);
          uint64_t v71 = *(void *)(v46 + 32);
          uint64_t v72 = *(void *)(v46 + 40);
          uint64_t v73 = *(void *)(v46 + 48);
          uint64_t v74 = *(void *)(v46 + 56);
          uint64_t v75 = *(void *)(v46 + 64);
          unint64_t v76 = (void **)(*(void *)(v46 + 16) + 16);
          uint64_t v77 = *(void *)(v46 + 72);
          swift_beginAccess();
          long long v78 = *v76;
          outlined copy of Text.Layout.Line.Line(v67, v68, v69);
          outlined copy of Text.Layout.Line.Line(v67, v68, v69);
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *unint64_t v76 = v78;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            long long v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
            *unint64_t v76 = v78;
          }
          unint64_t v81 = v78[2];
          unint64_t v80 = v78[3];
          if (v81 >= v80 >> 1)
          {
            long long v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v78);
            *unint64_t v76 = v78;
          }
          double v64 = v109;
          v78[2] = v81 + 1;
          uint64_t v82 = &v78[18 * v81];
          v82[4] = v67;
          v82[5] = v68;
          v82[6] = v69;
          *(_OWORD *)(v82 + 7) = v111;
          v82[9] = v110;
          *((_OWORD *)v82 + 5) = v112;
          Swift::UInt64 v83 = v114;
          v82[12] = v113;
          v82[13] = v83;
          *((unsigned char *)v82 + 112) = v115;
          LODWORD(v83) = *(_DWORD *)((char *)v117 + 3);
          *(_DWORD *)((char *)v82 + 113) = v117[0];
          *((_DWORD *)v82 + 29) = v83;
          v82[15] = v77;
          v82[16] = v70;
          v82[17] = v71;
          v82[18] = v72;
          v82[19] = v73;
          v82[20] = v74;
          v82[21] = v75;
          swift_endAccess();
          swift_release();
          outlined consume of Text.Layout.Line.Line(v67, v68, v69);
          if (v108 == v116) {
            break;
          }
          uint64_t v66 = v116 + 1;
        }
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.Layout.Fragment.Storage(v102, v103, 1);
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.Layout.Fragment.Storage(v61, v62, 1);
      }
      outlined release of Text.Effect.BaseFragment((uint64_t)v121);
      uint64_t v57 = v104;
      uint64_t v91 = v106;
      uint64_t v92 = v105;
    }
    else
    {
      double v84 = *(double *)(v58 + 8);
      MEMORY[0x270FA5388](v55);
      unint64_t v85 = v36;
      unint64_t v86 = v98;
      v97[-8] = v100;
      v97[-7] = v86;
      v97[-6] = v88;
      v97[-5] = v87;
      v97[-4] = v57;
      v97[-3] = v56;
      v97[-2] = v85;
      uint64_t v89 = v88;
      uint64_t v90 = v87;
      outlined copy of Text.Effect.Layout.Fragment.Storage(v88, v87, 0);
      specialized Text.Effect.DrawingContext.withStopCollector(prepare:perform:)(partial apply for closure #2 in TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:), v84, (uint64_t)&v97[-10], v118, v89);
      outlined consume of Text.Effect.Layout.Fragment.Storage(v89, v90, 0);
      uint64_t v91 = v106;
      uint64_t v92 = v105;
    }
    uint64_t v93 = *(void *)(v118[0] + 16);
    swift_beginAccess();
    uint64_t v94 = *(void *)(v93 + 16);
    *(void *)(v93 + 16) = MEMORY[0x263F8EE78];
    swift_beginAccess();
    type metadata accessor for TextEffectImplementation.ResolvedMap();
    uint64_t v95 = swift_bridgeObjectRetain();
    uint64_t v96 = (uint64_t)v99;
    specialized TextEffectImplementation.ResolvedMap.subscript.setter(v95, (uint64_t)v99);
    swift_endAccess();
    Text.Effect.DrawingContext.Storage.append(_:)(v94);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v96, v91);
    return _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(v57, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
  }
}

void closure #2 in TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v110 = a3;
  uint64_t v111 = a4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v101 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v100 = (char *)&v88 - v12;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v88 - v16;
  uint64_t v109 = *(void *)(a2 + 16);
  if (!v109) {
    return;
  }
  uint64_t v108 = a2 + 32;
  uint64_t v88 = a2;
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  BOOL v107 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  unint64_t v99 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v105 = 0;
  uint64_t v106 = (void (**)(char *, uint64_t))(v15 + 8);
  __asm { FMOV            V0.2D, #1.0 }
  long long v94 = _Q0;
  uint64_t v102 = v14;
  uint64_t v103 = a5;
  uint64_t v104 = v17;
  while (1)
  {
    uint64_t v117 = v18;
    unint64_t v25 = (_OWORD *)(v108 + (v18 << 7));
    long long v26 = v25[5];
    v122[4] = v25[4];
    v122[5] = v26;
    long long v27 = v25[7];
    long long v123 = v25[6];
    long long v124 = v27;
    long long v28 = v25[1];
    v122[0] = *v25;
    v122[1] = v28;
    long long v29 = v25[3];
    v122[2] = v25[2];
    v122[3] = v29;
    uint64_t v30 = *(void *)&v122[0];
    outlined retain of Text.Effect.DisplayInfo((uint64_t)v122);
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    uint64_t v31 = v111;
    char v32 = static RangeSet.== infix(_:_:)();
    (*v107)(v17, v31, v14);
    if (v32)
    {
      (*v106)(v17, v14);
LABEL_11:
      uint64_t v40 = *((void *)&v124 + 1);
      long long v41 = *(_OWORD *)(a5 + 16);
      v125[0] = *(_OWORD *)a5;
      v125[1] = v41;
      v125[2] = *(_OWORD *)(a5 + 32);
      uint64_t v126 = *(void *)(a5 + 48);
      uint64_t v42 = *(void *)a1;
      float64x2_t v43 = *(float64x2_t *)(*(void *)a1 + 152);
      float64x2_t v44 = *(float64x2_t *)(*(void *)a1 + 136);
      float64x2_t v45 = *(float64x2_t *)(*(void *)a1 + 120);
      float64x2_t v46 = *(float64x2_t *)(*(void *)a1 + 104);
      double v47 = *(double *)(*(void *)a1 + 168);
      LODWORD(v48) = *(unsigned __int8 *)(*(void *)a1 + 176);
      unint64_t v49 = *(void *)(*((void *)&v124 + 1) + 16);
      float64x2_t v115 = v44;
      float64x2_t v116 = v43;
      float64x2_t v113 = v46;
      float64x2_t v114 = v45;
      if (v49)
      {
        int v112 = v48;
        uint64_t v50 = *((void *)&v124 + 1) + 32;
        outlined init with take of Text.Effect.DisplayInfo.DrawOperation(*((void *)&v124 + 1) + 32, (uint64_t)v120);
        outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v120, (uint64_t)v121);
        if (_s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v121) == 2)
        {
          unint64_t v51 = 0;
LABEL_18:
          _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v121);
          if (v51 >= v49) {
            goto LABEL_40;
          }
          outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v50 + 216 * v51, (uint64_t)v118);
          outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v118, (uint64_t)v119);
          if (_s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v119) != 2) {
            goto LABEL_41;
          }
          uint64_t v59 = _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOj0_((uint64_t)v119);
          double v60 = *(double *)(v59 + 152);
          LODWORD(v61) = *(unsigned __int8 *)(v59 + 160);
          float64x2_t v62 = *(float64x2_t *)(v59 + 88);
          float64x2_t v63 = *(float64x2_t *)(v59 + 104);
          float64x2_t v64 = *(float64x2_t *)(v59 + 120);
          uint64_t v17 = v104;
          LODWORD(v48) = v112;
          if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v62, *(float64x2_t *)(v42 + 104)), (int32x4_t)vceqq_f64(v63, *(float64x2_t *)(v42 + 120))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v64, *(float64x2_t *)(v42 + 136)), (int32x4_t)vceqq_f64(*(float64x2_t *)(v59 + 136), *(float64x2_t *)(v42 + 152))))), 7uLL))) & 1) == 0|| v60 != *(double *)(v42 + 168)|| v61 != *(unsigned __int8 *)(v42 + 176))
          {
            long long v95 = *(_OWORD *)(v59 + 136);
            float64x2_t v96 = v64;
            float64x2_t v97 = v63;
            float64x2_t v98 = v62;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v65 = *(void *)a1;
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              uint64_t v66 = swift_allocObject();
              *(void *)(v66 + 24) = 0x3FF0000000000000;
              *(void *)(v66 + 32) = 0;
              *(void *)(v66 + 40) = 0;
              *(void *)(v66 + 48) = 0x3FF0000000000000;
              *(void *)(v66 + 56) = 0;
              *(void *)(v66 + 64) = 0;
              *(void *)(v66 + 80) = 0;
              *(void *)(v66 + 88) = 0;
              *(void *)(v66 + 72) = 0x3FF0000000000000;
              *(unsigned char *)(v66 + 96) = 1;
              *(_OWORD *)(v66 + 104) = 0u;
              *(_OWORD *)(v66 + 120) = 0u;
              *(_OWORD *)(v66 + 136) = 0u;
              *(_OWORD *)(v66 + 152) = v94;
              *(void *)(v66 + 168) = 0x3FF0000000000000;
              *(unsigned char *)(v66 + 176) = 0;
              *(_OWORD *)(v66 + 184) = 0u;
              *(_OWORD *)(v66 + 200) = 0u;
              *(void *)(v66 + 216) = 0;
              uint64_t v92 = *(void *)(v65 + 16);
              *(void *)(v66 + 16) = v92;
              long long v67 = *(_OWORD *)(v65 + 40);
              long long v68 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)(v66 + 24) = *(_OWORD *)(v65 + 24);
              *(_OWORD *)(v66 + 40) = v67;
              *(_OWORD *)(v66 + 56) = v68;
              *(void *)(v66 + 72) = *(void *)(v65 + 72);
              int v93 = v61;
              uint64_t v69 = *(void *)(v65 + 184);
              uint64_t v70 = *(void *)(v65 + 192);
              uint64_t v71 = *(void *)(v65 + 200);
              uint64_t v90 = *(void *)(v65 + 208);
              uint64_t v72 = v90;
              uint64_t v91 = v71;
              uint64_t v89 = *(void *)(v65 + 216);
              uint64_t v73 = v89;
              *(void *)(v66 + 184) = v69;
              *(void *)(v66 + 192) = v70;
              *(void *)(v66 + 200) = v71;
              *(void *)(v66 + 208) = v72;
              *(void *)(v66 + 216) = v73;
              swift_retain();
              swift_retain();
              outlined copy of Text.Effect.StopCollector?(v69, v70, v91, v90);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              uint64_t v48 = *(void *)(v65 + 80);
              uint64_t v61 = *(void *)(v65 + 88);
              LODWORD(v92) = *(unsigned __int8 *)(v65 + 96);
              swift_release();
              *(void *)(v66 + 80) = v48;
              *(void *)(v66 + 88) = v61;
              LODWORD(v48) = v112;
              LOBYTE(v61) = v93;
              *(unsigned char *)(v66 + 96) = v92;
              *(void *)a1 = v66;
              uint64_t v17 = v104;
              swift_release();
            }
            uint64_t v74 = *(void *)a1;
            *(float64x2_t *)(v74 + 104) = v98;
            *(float64x2_t *)(v74 + 120) = v97;
            *(float64x2_t *)(v74 + 136) = v96;
            *(_OWORD *)(v74 + 152) = v95;
            *(double *)(v74 + 168) = v60;
            *(unsigned char *)(v74 + 176) = v61;
          }
        }
        else
        {
          unint64_t v51 = 0;
          uint64_t v58 = v40 + 248;
          while (v49 - 1 != v51)
          {
            outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v58, (uint64_t)v120);
            outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v120, (uint64_t)v121);
            v58 += 216;
            ++v51;
            if (_s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOg((uint64_t)v121) == 2) {
              goto LABEL_18;
            }
          }
          uint64_t v17 = v104;
          LODWORD(v48) = v112;
        }
        double v75 = *(double *)&v124;
        double v76 = *((double *)&v123 + 1) + a6;
        swift_bridgeObjectRetain();
        do
        {
          outlined init with take of Text.Effect.DisplayInfo.DrawOperation(v50, (uint64_t)v127);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.DisplayInfo.DrawOperation);
          Text.Effect.DisplayInfo.DrawOperation.resolve(_:fragment:displacement:in:)(v30, (unint64_t)v125, a1, v76, v75);
          outlined retain of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.DisplayInfo.DrawOperation);
          v50 += 216;
          --v49;
        }
        while (v49);
        outlined release of Text.Effect.DisplayInfo((uint64_t)v122);
        float64x2_t v57 = *(float64x2_t *)(*(void *)a1 + 152);
        float64x2_t v56 = *(float64x2_t *)(*(void *)a1 + 136);
        float64x2_t v55 = *(float64x2_t *)(*(void *)a1 + 120);
        float64x2_t v54 = *(float64x2_t *)(*(void *)a1 + 104);
        double v53 = *(double *)(*(void *)a1 + 168);
        int v52 = *(unsigned __int8 *)(*(void *)a1 + 176);
        uint64_t v14 = v102;
        a5 = v103;
        float64x2_t v44 = v115;
        float64x2_t v43 = v116;
        float64x2_t v46 = v113;
        float64x2_t v45 = v114;
      }
      else
      {
        int v52 = v48;
        double v53 = v47;
        float64x2_t v54 = v46;
        float64x2_t v55 = v45;
        float64x2_t v56 = v44;
        float64x2_t v57 = v43;
      }
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v46, v54), (int32x4_t)vceqq_f64(v45, v55)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v44, v56), (int32x4_t)vceqq_f64(v43, v57)))), 7uLL))) & 1) == 0|| v47 != v53|| v48 != v52)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v77 = *(void *)a1;
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v78 = swift_allocObject();
          *(void *)(v78 + 24) = 0x3FF0000000000000;
          *(void *)(v78 + 32) = 0;
          *(void *)(v78 + 40) = 0;
          *(void *)(v78 + 48) = 0x3FF0000000000000;
          *(void *)(v78 + 56) = 0;
          *(void *)(v78 + 64) = 0;
          *(void *)(v78 + 80) = 0;
          *(void *)(v78 + 88) = 0;
          *(void *)(v78 + 72) = 0x3FF0000000000000;
          *(unsigned char *)(v78 + 96) = 1;
          *(_OWORD *)(v78 + 104) = 0u;
          *(_OWORD *)(v78 + 120) = 0u;
          *(_OWORD *)(v78 + 136) = 0u;
          *(_OWORD *)(v78 + 152) = v94;
          *(void *)(v78 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v78 + 176) = 0;
          *(_OWORD *)(v78 + 184) = 0u;
          *(_OWORD *)(v78 + 200) = 0u;
          *(void *)(v78 + 216) = 0;
          *(void *)(v78 + 16) = *(void *)(v77 + 16);
          long long v79 = *(_OWORD *)(v77 + 40);
          long long v80 = *(_OWORD *)(v77 + 56);
          *(_OWORD *)(v78 + 24) = *(_OWORD *)(v77 + 24);
          *(_OWORD *)(v78 + 40) = v79;
          *(_OWORD *)(v78 + 56) = v80;
          *(void *)(v78 + 72) = *(void *)(v77 + 72);
          int v112 = v48;
          uint64_t v81 = *(void *)(v77 + 184);
          uint64_t v82 = *(void *)(v77 + 192);
          uint64_t v83 = *(void *)(v77 + 200);
          uint64_t v84 = *(void *)(v77 + 208);
          uint64_t v85 = *(void *)(v77 + 216);
          *(void *)(v78 + 184) = v81;
          *(void *)(v78 + 192) = v82;
          *(void *)(v78 + 200) = v83;
          *(void *)(v78 + 208) = v84;
          *(void *)(v78 + 216) = v85;
          swift_retain();
          swift_retain();
          uint64_t v86 = v84;
          uint64_t v14 = v102;
          a5 = v103;
          outlined copy of Text.Effect.StopCollector?(v81, v82, v83, v86);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v87 = *(void *)(v77 + 80);
          uint64_t v48 = *(void *)(v77 + 88);
          LOBYTE(v82) = *(unsigned char *)(v77 + 96);
          swift_release();
          *(void *)(v78 + 80) = v87;
          *(void *)(v78 + 88) = v48;
          LOBYTE(v48) = v112;
          *(unsigned char *)(v78 + 96) = v82;
          uint64_t v17 = v104;
          *(void *)a1 = v78;
          swift_release();
        }
        uint64_t v24 = *(void *)a1;
        *(float64x2_t *)(v24 + 104) = v113;
        *(float64x2_t *)(v24 + 120) = v114;
        *(float64x2_t *)(v24 + 136) = v115;
        *(float64x2_t *)(v24 + 152) = v116;
        *(double *)(v24 + 168) = v47;
        *(unsigned char *)(v24 + 176) = v48;
      }
      goto LABEL_4;
    }
    uint64_t v33 = *(void *)(a5 + 48);
    _VF = __OFSUB__(v30, v33);
    unint64_t v34 = v30 - v33;
    if (_VF) {
      break;
    }
    if ((v34 & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    uint64_t v35 = *(void *)(*(void *)(a5 + 24) + 96);
    if (v34 >= *(void *)(v35 + 16)) {
      goto LABEL_39;
    }
    v121[0] = *(_OWORD *)(v35 + 24 * v34 + 32);
    unint64_t v36 = v100;
    uint64_t v37 = RangeSet.ranges.getter();
    MEMORY[0x270FA5388](v37);
    *(&v88 - 2) = (uint64_t)v121;
    uint64_t v38 = v105;
    char v39 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.overlaps(_:)specialized partial apply, (uint64_t)(&v88 - 4));
    uint64_t v105 = v38;
    (*v99)(v36, v101);
    (*v106)(v17, v14);
    if (v39) {
      goto LABEL_11;
    }
LABEL_4:
    uint64_t v18 = v117 + 1;
    outlined release of Text.Effect.DisplayInfo((uint64_t)v122);
    if (v18 == v109)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t TextEffectImplementation.AnimationInfo.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t TextEffectImplementation.AnimationInfo.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t TextEffectImplementation.AnimationInfo.__deallocating_deinit()
{
  TextEffectImplementation.AnimationInfo.deinit();

  return swift_deallocClassInstance();
}

id @objc TextEffectImplementation.name.getter(void *a1)
{
  uint64_t v1 = specialized TextEffectImplementation.name.getter(*(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x118), *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x120));
  uint64_t v2 = (void *)MEMORY[0x24C522820](v1);
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t TextEffectImplementation.name.getter()
{
  return specialized TextEffectImplementation.name.getter(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x118), *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120));
}

uint64_t TextEffectImplementation.updateInfo(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *MEMORY[0x263F8EED0] & *(void *)v5;
  uint64_t v10 = *(void *)(v9 + 0x118);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v17 - v12;
  type metadata accessor for TextEffectImplementation.AnimationInfo();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v5[*(void *)(v9 + 296)], v10);
    Swift::UInt64 v14 = *(void *)&v5[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
    swift_retain();
    char v15 = TextEffectImplementation.AnimationInfo.updateLayout(effect:identifier:context:)((uint64_t)v13, v14, a2, a3, a4, v18);
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

unint64_t TextEffectImplementation.applyKeyframe(_:to:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  char v32 = a2;
  uint64_t v5 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v2);
  uint64_t v6 = v5[36];
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v5[35];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v34 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(v8 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v32 - v15;
  (*(void (**)(char *, char *, uint64_t, double))(v12 + 16))((char *)&v32 - v15, &v3[v5[37]], v8, v14);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v6 + 24))(0x6C6F686563616C50, 0xEB00000000726564, v8, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v8);
  uint64_t v18 = a1;
  uint64_t v19 = v32;
  v35[0] = v32;
  v35[1] = (id)MEMORY[0x263F8EE78];
  v35[2] = (id)MEMORY[0x263F8EE78];
  if (v18
    && (type metadata accessor for TextEffectKeyframeBox(), (uint64_t v20 = swift_dynamicCastClass()) != 0)
    && *(void *)(*(void *)(v20 + OBJC_IVAR____TtC7SwiftUI21TextEffectKeyframeBox_entry) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(*(void *)&v3[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id]),
        (v21 & 1) != 0)
    && (type metadata accessor for Text.Effect.ConcreteLayoutState(), (uint64_t v22 = swift_dynamicCastClass()) != 0))
  {
    unint64_t v23 = v19;
    uint64_t v25 = v33;
    uint64_t v24 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v11, v22 + *(void *)(*(void *)v22 + 128), v34);
    id v26 = v23;
    swift_unknownObjectRetain();
    swift_retain();
    Text.Effect.Configuration.updateContent(_:for:)((uint64_t *)v35, (uint64_t)v11, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v24);
    id v27 = v35[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = (unint64_t)Text.Effect.Content.resolveIfModified()();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    long long v29 = *(void (**)(uint64_t, uint64_t))(v7 + 120);
    id v30 = v19;
    v29(v8, v7);
    Text.Effect.Configuration.updateContent(_:for:)((uint64_t *)v35, (uint64_t)v11, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
    id v27 = v35[0];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v28 = (unint64_t)Text.Effect.Content.resolveIfModified()();
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  return v28;
}

id @objc TextEffectImplementation.applyKeyframe(_:to:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_unknownObjectRetain();
  id v7 = a4;
  id v8 = a1;
  uint64_t v9 = (void *)TextEffectImplementation.applyKeyframe(_:to:)(a3, v7);
  swift_unknownObjectRelease();

  return v9;
}

uint64_t TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(char a1)
{
  if (TextEffectsAnimationController.animationInfo(for:persist:default:)(*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id), a1, (uint64_t (*)(uint64_t))partial apply for implicit closure #1 in TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)))
  {
    type metadata accessor for TextEffectImplementation.AnimationInfo();
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
    swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v39 = a7;
  uint64_t v30 = a2;
  uint64_t v36 = a12;
  uint64_t v37 = a10;
  uint64_t v35 = a9;
  int v38 = a8 & 1;
  uint64_t v15 = *MEMORY[0x263F8EED0] & *a1;
  uint64_t v16 = *(void *)(v15 + 0x118);
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = (char *)&v30 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v30 - v19, v21 + *(void *)(v15 + 296), v16, v18);
  Swift::UInt64 v34 = *(void *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v22 = _ViewInputs.base.modify(a2);
  uint64_t v32 = v23;
  uint64_t v33 = v22;
  uint64_t v24 = _ViewInputs.base.modify(a4);
  uint64_t v31 = v25;
  swift_retain();
  uint64_t v26 = v35;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v27 = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v28 = specialized TextEffectImplementation.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)((uint64_t)v20, v34, v33, v32, v24, v31, v39, v38, v26, v37, a11, v27);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return v28;
}

uint64_t TextEffectImplementation.states.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x118);
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 + 16) + 112))(v1, *(void *)(v2 + 16));
  if (!v3) {
    return 0;
  }
  MEMORY[0x270FA5388](v3);
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v11 = _ArrayProtocol.filter(_:)();
  MEMORY[0x270FA5388](v11);
  _OWORD v10[2] = v1;
  v10[3] = v2;
  uint64_t v5 = type metadata accessor for Text.Effect.AnyLayoutState();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in TextEffectImplementation.states.getter, (uint64_t)v10, v4, v5, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  swift_bridgeObjectRelease();
  return v8;
}

BOOL closure #1 in TextEffectImplementation.states.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 120))(a2, v4, v7);
  swift_getAssociatedConformanceWitness();
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return (a2 & 1) == 0;
}

uint64_t closure #2 in TextEffectImplementation.states.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v7 = (char *)&v9 - v6;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, AssociatedTypeWitness);
  uint64_t result = Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v7);
  *a2 = result;
  return result;
}

uint64_t TextEffectImplementation.lineBreakingState.getter()
{
  return TextEffectImplementation.lineBreakingState.getter(specialized TextEffectImplementation.lineBreakingState.getter);
}

uint64_t TextEffectImplementation.defaultDrawingState.getter()
{
  return TextEffectImplementation.lineBreakingState.getter(specialized TextEffectImplementation.defaultDrawingState.getter);
}

uint64_t TextEffectImplementation.lineBreakingState.getter(uint64_t (*a1)(void, void))
{
  return a1(*(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x118), *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x120));
}

uint64_t TextEffectImplementation.staticUnitProgress()()
{
  return (*(uint64_t (**)(void))(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120) + 32))();
}

uint64_t TextEffectImplementation.clipDrawingBounds.getter()
{
  return (*(uint64_t (**)(void))(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120) + 40))() & 1;
}

uint64_t TextEffectImplementation.delay(for:duration:)()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120) + 16) + 144))();
}

uint64_t TextEffectImplementation.appendInteractionMetrics(for:to:at:context:)(Swift::UInt64 a1, unint64_t a2, void **a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  *(void *)&long long v118 = a7;
  unint64_t v110 = a5;
  uint64_t v111 = a6;
  uint64_t v105 = a3;
  uint64_t v14 = *MEMORY[0x263F8EED0] & *v9;
  uint64_t v104 = type metadata accessor for Text.Effect.Layout.Fragment();
  MEMORY[0x270FA5388](v104);
  uint64_t v103 = (uint64_t)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v132[0] = *a4;
  uint64_t v112 = a8;
  TextEffectsAnimationController.state(for:time:)(a1, (double *)v132, (uint64_t)v122);
  LODWORD(v109) = LOBYTE(v122[0]);
  uint64_t v16 = *((void *)&v122[0] + 1);
  long long v17 = v122[1];
  uint64_t v107 = *(void *)&v122[2];
  LODWORD(v108) = BYTE8(v122[2]);
  uint64_t v18 = v123;
  LODWORD(v119) = BYTE8(v123);
  *(void *)&long long v116 = *(void *)&v124[0];
  uint64_t v113 = *((void *)&v124[1] + 1);
  *(void *)&long long v117 = *(void *)&v124[1];
  uint64_t v114 = *((void *)&v124[0] + 1);
  uint64_t v19 = *(void *)(v14 + 280);
  uint64_t v20 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
  Swift::UInt64 v21 = *(void *)((char *)v9 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v22 = *(void *)(v14 + 288);
  uint64_t v23 = specialized TextEffectImplementation.lineBreakingState.getter(v19, v22);
  uint64_t v24 = *(char **)(v22 + 16);
  Swift::UInt64 v25 = v21;
  uint64_t v26 = v118;
  specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v25, v23, a2, v118, (uint64_t)v127);
  swift_release();
  uint64_t v106 = v20;
  Swift::UInt64 v27 = *(void *)((char *)v9 + v20);
  uint64_t v115 = v22;
  uint64_t v28 = specialized TextEffectImplementation.defaultDrawingState.getter(v19, v22);
  specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v27, v28, a2, v26, (uint64_t)&v128);
  swift_release();
  if ((v119 & 0xFE) != 2)
  {
    v122[0] = v128;
    v122[1] = v129;
    v122[2] = v130;
    *(void *)&long long v123 = v131;
    outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)&v128);
    appendMetrics #1 <A>(_:) in TextEffectImplementation.appendInteractionMetrics(for:to:at:context:)((uint64_t)v122, (uint64_t)v127, v105);
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    outlined release of Text.Effect.BaseFragment((uint64_t)v127);
    swift_release();
    swift_release();
LABEL_7:
    swift_release();
    return swift_release();
  }
  uint64_t v101 = v24;
  uint64_t v29 = v116;
  uint64_t v31 = v113;
  uint64_t v30 = v114;
  uint64_t v32 = v117;
  char v33 = v109;
  uint64_t v34 = TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(1);
  LOBYTE(v122[0]) = v33;
  *((void *)&v122[0] + 1) = v16;
  v122[1] = v17;
  uint64_t v35 = v107;
  *(void *)&v122[2] = v107;
  BYTE8(v122[2]) = v108;
  *(void *)&long long v123 = v18;
  BYTE8(v123) = (_BYTE)v119;
  *(void *)&v124[0] = v29;
  *((void *)&v124[0] + 1) = v30;
  *(void *)&v124[1] = v32;
  *((void *)&v124[1] + 1) = v31;
  if ((TextEffectImplementation.AnimationInfo.needsUpdate(for:state:consideringRestart:)(a2, (uint64_t)v122, 1) & 1) == 0)
  {
    v122[0] = v128;
    v122[1] = v129;
    v122[2] = v130;
    *(void *)&long long v123 = v131;
    outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)&v128);
    appendMetrics #1 <A>(_:) in TextEffectImplementation.appendInteractionMetrics(for:to:at:context:)((uint64_t)v122, (uint64_t)v127, v105);
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    outlined release of Text.Effect.BaseFragment((uint64_t)v127);
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  LOBYTE(v122[0]) = v109;
  *((void *)&v122[0] + 1) = v16;
  v122[1] = v17;
  *(void *)&v122[2] = v35;
  BYTE8(v122[2]) = v108;
  *(void *)&long long v123 = v18;
  BYTE8(v123) = (_BYTE)v119;
  *(void *)&v124[0] = v29;
  *((void *)&v124[0] + 1) = v114;
  *(void *)&v124[1] = v32;
  *((void *)&v124[1] + 1) = v113;
  uint64_t v36 = v29;
  uint64_t v37 = v103;
  TextEffectImplementation.AnimationInfo.layout(for:state:context:)((char *)v122, v110, v111, v118, v112, v103);
  uint64_t v38 = v37 + *(int *)(v104 + 24);
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *(void *)(v38 + 8);
  if (*(unsigned char *)(v38 + 16) == 1)
  {
    Swift::UInt64 v41 = *(void *)((char *)v9 + v106);
    swift_retain();
    specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v41, v40, a2, v118, (uint64_t)v132);
    v122[0] = v132[0];
    v122[1] = v132[1];
    v122[2] = v132[2];
    *(void *)&long long v123 = v133;
    appendMetrics #1 <A>(_:) in TextEffectImplementation.appendInteractionMetrics(for:to:at:context:)((uint64_t)v122, (uint64_t)v127, v105);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)v132);
    outlined consume of Text.Effect.Layout.Fragment.Storage(v40, v39, 1);
    outlined release of Text.Effect.BaseFragment((uint64_t)v127);
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    return _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(v37, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
  }
  uint64_t v99 = v34;
  uint64_t v100 = v39;
  uint64_t v102 = v40;
  uint64_t v43 = v36;
  uint64_t v44 = type metadata accessor for Text.Effect.DrawableFragment();
  uint64_t v45 = specialized Text.Effect.DrawableFragment.visualOrder.getter();
  float64x2_t v46 = v105;
  uint64_t v47 = v37;
  uint64_t v48 = v43;
  unint64_t v110 = *(void *)(v45 + 16);
  uint64_t v111 = v49;
  if (v110)
  {
    uint64_t v98 = v44;
    uint64_t v112 = v45;
    uint64_t v50 = type metadata accessor for Text.Effect.InteractionMetrics();
    unint64_t v51 = (char *)v46 + *(int *)(v50 + 28);
    uint64_t v107 = v127[3];
    uint64_t v108 = v127[6];
    double v52 = *(double *)v51;
    uint64_t v53 = *((void *)v51 + 1);
    float64x2_t v97 = (double *)v51;
    uint64_t v54 = *(int *)(v50 + 20);
    char v119 = *v46;
    uint64_t v55 = v102;
    uint64_t v56 = v100;
    outlined copy of Text.Effect.Layout.Fragment.Storage(v102, v100, 0);
    uint64_t v57 = *(void *)(v112 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (v57)
    {
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      double v60 = *(double *)&v56;
      uint64_t v101 = (char *)v105 + v54;
      uint64_t v109 = v112 + 32;
      uint64_t v106 = v55 + 32;
      do
      {
        uint64_t v61 = (uint64_t *)(v109 + 24 * v58);
        uint64_t v62 = *v61;
        uint64_t v63 = v61[1];
        int v64 = *((unsigned __int8 *)v61 + 16);
        if (v64)
        {
          if (v64 != 1)
          {
            BOOL v69 = 1;
            goto LABEL_26;
          }
          uint64_t v65 = v63 - 1;
          if (__OFSUB__(v63, 1)) {
            goto LABEL_50;
          }
          BOOL v66 = __OFSUB__(v65, v59);
          uint64_t v67 = v65 - v59;
          if (v66) {
            goto LABEL_51;
          }
          BOOL v66 = __OFADD__(v59++, 1);
          if (v66) {
            goto LABEL_52;
          }
          BOOL v66 = __OFSUB__(v63, v62);
          uint64_t v68 = v63 - v62;
          if (v66) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v67 = v62 + v59;
          if (__OFADD__(v62, v59)) {
            goto LABEL_54;
          }
          BOOL v66 = __OFADD__(v59++, 1);
          if (v66) {
            goto LABEL_55;
          }
          BOOL v66 = __OFSUB__(v63, v62);
          uint64_t v68 = v63 - v62;
          if (v66) {
            goto LABEL_56;
          }
        }
        BOOL v69 = v59 >= v68;
        if (v59 >= v68) {
          uint64_t v59 = 0;
        }
        uint64_t v62 = v67;
LABEL_26:
        BOOL v66 = __OFADD__(v111, v62);
        uint64_t v70 = v111 + v62;
        if (v66)
        {
          __break(1u);
          break;
        }
        BOOL v66 = __OFSUB__(v70, v108);
        unint64_t v71 = v70 - v108;
        if (v66) {
          goto LABEL_45;
        }
        if ((v71 & 0x8000000000000000) != 0) {
          goto LABEL_46;
        }
        if (v71 >= *(void *)(v55 + 16)) {
          goto LABEL_47;
        }
        uint64_t v72 = (_OWORD *)(v106 + (v71 << 7));
        long long v74 = v72[6];
        long long v73 = v72[7];
        long long v75 = v72[5];
        v124[0] = v72[4];
        v124[1] = v75;
        long long v125 = v74;
        long long v77 = v72[2];
        long long v76 = v72[3];
        long long v78 = v72[1];
        v122[0] = *v72;
        v122[1] = v78;
        long long v126 = v73;
        v122[2] = v77;
        long long v123 = v76;
        uint64_t v79 = *(void *)(v107 + 96);
        if (v71 >= *(void *)(v79 + 16)) {
          goto LABEL_48;
        }
        uint64_t v80 = v48;
        uint64_t v82 = *((void *)&v124[1] + 1);
        double v81 = *(double *)&v125;
        double v83 = *(double *)v124;
        long long v117 = *(_OWORD *)((char *)&v122[1] + 8);
        long long v118 = *(_OWORD *)((char *)v122 + 8);
        double v84 = *((double *)&v125 + 1);
        uint64_t v85 = v79 + 24 * v71;
        uint64_t v87 = *(void *)(v85 + 32);
        uint64_t v86 = *(void *)(v85 + 40);
        uint64_t v120 = v87;
        uint64_t v121 = v86;
        if (__OFSUB__(v86, v87)) {
          goto LABEL_49;
        }
        long long v116 = *(_OWORD *)((char *)v124 + 8);
        uint64_t v115 = v59;
        outlined retain of Text.Effect.DisplayInfo((uint64_t)v122);
        if (v86 != v87)
        {
          _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
          uint64_t v88 = (void (*)(_OWORD *, void))RangeSet._ranges.modify();
          _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
          RangeSet.Ranges._insert(contentsOf:)();
          v88(v132, 0);
          uint64_t v55 = v102;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v119[2] + 1, 1, v119);
        }
        unint64_t v90 = v119[2];
        unint64_t v89 = v119[3];
        if (v90 >= v89 >> 1) {
          char v119 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1, v119);
        }
        v58 += v69;
        uint64_t v91 = v119;
        v119[2] = v90 + 1;
        uint64_t v92 = (double *)&v91[12 * v90];
        *((void *)v92 + 4) = v87;
        *((void *)v92 + 5) = v86;
        v92[6] = v52 + v84 + v60;
        *((void *)v92 + 7) = v53;
        *((_OWORD *)v92 + 4) = v116;
        *((void *)v92 + 10) = v82;
        v92[11] = v81;
        long long v93 = v117;
        *((_OWORD *)v92 + 6) = v118;
        *((_OWORD *)v92 + 7) = v93;
        uint64_t result = outlined release of Text.Effect.DisplayInfo((uint64_t)v122);
        double v52 = v52 + v83 - v81;
        if (v58 >= v110)
        {
          swift_bridgeObjectRelease();
          outlined consume of Text.Effect.Layout.Fragment.Storage(v55, v100, 0);
          float64x2_t v46 = v105;
          unsigned char *v105 = v119;
          *float64x2_t v97 = v52;
          uint64_t v47 = v103;
          goto LABEL_42;
        }
        uint64_t v48 = v80;
        uint64_t v59 = v115;
      }
      while (v58 < *(void *)(v112 + 16));
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  else
  {
LABEL_42:
    double v94 = *(double *)(v47 + *(int *)(v104 + 20) + 24);
    double v95 = Text.Effect.DrawableFragment.width.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)v127);
    outlined release of Text.Effect.BaseFragment((uint64_t)&v128);
    _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(v47, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    uint64_t result = type metadata accessor for Text.Effect.InteractionMetrics();
    *(double *)((char *)v46 + *(int *)(result + 28)) = v94 - v95 + *(double *)((char *)v46 + *(int *)(result + 28));
  }
  return result;
}

void appendMetrics #1 <A>(_:) in TextEffectImplementation.appendInteractionMetrics(for:to:at:context:)(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v6 = *(void **)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 40);
  char v7 = *(unsigned char *)(v3 + 48);
  uint64_t v54 = *(void *)(v3 + 64);
  uint64_t v55 = *(void *)(v3 + 56);
  uint64_t v56 = v3;
  int v53 = *(_DWORD *)(v3 + 72);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void **)(v8 + 32);
  uint64_t v10 = *(void *)(v8 + 40);
  char v11 = *(unsigned char *)(v8 + 48);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v58 = *(void *)(v8 + 56);
  int v57 = *(_DWORD *)(v8 + 72);
  uint64_t v59 = v4;
  uint64_t v60 = v8;
  uint64_t v13 = *(void *)(v8 + 104);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v62 = v5;
  uint64_t v63 = v6;
  char v61 = v7;
  outlined copy of Text.Layout.Line.Line(v6, v5, v7);
  uint64_t v65 = v10;
  BOOL v66 = v9;
  char v64 = v11;
  outlined copy of Text.Layout.Line.Line(v9, v10, v11);
  uint64_t v15 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (!v15)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    outlined consume of Text.Layout.Line.Line(v66, v65, v64);
    outlined consume of Text.Layout.Line.Line(v63, v62, v61);
    return;
  }
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  double v18 = 0.0;
  while (1)
  {
    uint64_t v19 = v13 + 32 + 24 * v16;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    int v22 = *(unsigned __int8 *)(v19 + 16);
    unint64_t v69 = v16;
    if (!v22)
    {
      uint64_t v25 = v20 + v17;
      if (__OFADD__(v20, v17)) {
        goto LABEL_48;
      }
      uint64_t v26 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_49;
      }
      BOOL v24 = __OFSUB__(v21, v20);
      uint64_t v27 = v21 - v20;
      if (v24) {
        goto LABEL_50;
      }
      goto LABEL_14;
    }
    if (v22 == 1) {
      break;
    }
    BOOL v28 = 1;
    uint64_t v29 = v14 + v20;
    if (__OFADD__(v14, v20)) {
      goto LABEL_36;
    }
LABEL_21:
    unint64_t v30 = v29 - v14;
    if (__OFSUB__(v29, v14)) {
      goto LABEL_37;
    }
    if ((v30 & 0x8000000000000000) != 0) {
      goto LABEL_38;
    }
    uint64_t v31 = *(void *)(v60 + 96);
    if (v30 >= *(void *)(v31 + 16)) {
      goto LABEL_39;
    }
    uint64_t v32 = (void *)(v31 + 24 * v30);
    uint64_t v33 = v32[4];
    uint64_t v34 = v32[5];
    uint64_t v35 = v32[6];
    unint64_t v71 = v66;
    uint64_t v72 = v65;
    char v73 = v64;
    uint64_t v74 = v58;
    uint64_t v75 = v12;
    int v76 = v57;
    swift_bridgeObjectRetain();
    Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v71, v35, (uint64_t)v77);
    unint64_t v36 = v29 - v59;
    if (__OFSUB__(v29, v59)) {
      goto LABEL_40;
    }
    if ((v36 & 0x8000000000000000) != 0) {
      goto LABEL_41;
    }
    uint64_t v37 = *(void *)(v56 + 96);
    if (v36 >= *(void *)(v37 + 16)) {
      goto LABEL_42;
    }
    uint64_t v38 = *(void *)(v37 + 24 * v36 + 48);
    unint64_t v71 = v63;
    uint64_t v72 = v62;
    char v73 = v61;
    uint64_t v74 = v55;
    uint64_t v75 = v54;
    int v76 = v53;
    swift_bridgeObjectRetain();
    Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v71, v38, (uint64_t)v81);
    swift_bridgeObjectRelease();
    uint64_t v39 = v84;
    double v40 = v82;
    double v41 = v78;
    long long v67 = v79;
    long long v68 = v83;
    uint64_t v42 = v80;
    uint64_t v43 = (char *)a3 + *(int *)(type metadata accessor for Text.Effect.InteractionMetrics() + 28);
    double v44 = *(double *)v43;
    uint64_t v45 = *((void *)v43 + 1);
    if (__OFSUB__(v34, v33)) {
      goto LABEL_43;
    }
    if (v34 != v33)
    {
      uint64_t v52 = v17;
      _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
      float64x2_t v46 = (void (*)(void **, void))RangeSet._ranges.modify();
      _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
      RangeSet.Ranges._insert(contentsOf:)();
      v46(&v71, 0);
      uint64_t v17 = v52;
    }
    uint64_t v47 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v47;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
      *a3 = v47;
    }
    unint64_t v50 = v47[2];
    unint64_t v49 = v47[3];
    if (v50 >= v49 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v47);
    }
    unint64_t v16 = v69 + v28;
    v47[2] = v50 + 1;
    unint64_t v51 = (double *)&v47[12 * v50];
    *((void *)v51 + 4) = v33;
    *((void *)v51 + 5) = v34;
    v51[6] = v18 + v44;
    *((void *)v51 + 7) = v45;
    *((_OWORD *)v51 + 4) = v68;
    *((void *)v51 + 10) = v39;
    v51[11] = v40;
    *((_OWORD *)v51 + 6) = v67;
    *((void *)v51 + 14) = v42;
    v51[15] = v41;
    *a3 = v47;
    *(double *)uint64_t v43 = v41 - v40 + v44;
    swift_bridgeObjectRelease();
    double v18 = v18 + v41 - v40;
    if (v16 >= *(void *)(v13 + 16)) {
      goto LABEL_35;
    }
  }
  uint64_t v23 = v21 - 1;
  if (__OFSUB__(v21, 1)) {
    goto LABEL_44;
  }
  BOOL v24 = __OFSUB__(v23, v17);
  uint64_t v25 = v23 - v17;
  if (v24) {
    goto LABEL_45;
  }
  uint64_t v26 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_46;
  }
  BOOL v24 = __OFSUB__(v21, v20);
  uint64_t v27 = v21 - v20;
  if (v24) {
    goto LABEL_47;
  }
LABEL_14:
  BOOL v28 = v26 >= v27;
  if (v26 < v27) {
    uint64_t v17 = v26;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v29 = v14 + v25;
  if (!__OFADD__(v14, v25)) {
    goto LABEL_21;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

uint64_t TextEffectImplementation.resolve(_:ranges:in:)(Swift::UInt64 a1, unint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)a4 + 16) + 48);
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
  Swift::UInt64 v10 = *(void *)((char *)v4 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v11 = *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x118);
  uint64_t v12 = *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x120);
  swift_retain();
  uint64_t v13 = specialized TextEffectImplementation.defaultDrawingState.getter(v11, v12);
  swift_beginAccess();
  uint64_t v14 = *(void *)(v8 + 48);
  if (!*(void *)(v14 + 16) || (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v13), (v16 & 1) == 0))
  {
    swift_endAccess();
    swift_release();
    return swift_release();
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 16 * v15);
  swift_endAccess();
  uint64_t v86 = v17;
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  v107[0] = *(double *)(*(void *)(*(void *)a4 + 16) + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  TextEffectsAnimationController.state(for:time:)(a1, v107, (uint64_t)&v98);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  char a_low = LOBYTE(v98.a);
  CGFloat b = v98.b;
  CGFloat c = v98.c;
  CGFloat d = v98.d;
  CGFloat tx = v98.tx;
  char ty_low = LOBYTE(v98.ty);
  uint64_t v21 = v99;
  char v22 = v100;
  uint64_t v74 = v101;
  uint64_t v75 = v102;
  uint64_t v76 = v103;
  uint64_t v77 = v104;
  long long v23 = a4[1];
  long long v108 = *a4;
  long long v109 = v23;
  long long v110 = a4[2];
  Swift::UInt64 v24 = *(void *)((char *)v5 + v9);
  uint64_t v25 = specialized TextEffectImplementation.defaultDrawingState.getter(v11, v12);
  Text.Effect.DrawingContext.fragment<A>(for:key:fragment:)(v24, v25, a2, (uint64_t)v105);
  swift_release();
  uint64_t v26 = type metadata accessor for Text.Effect.DrawableFragment();
  Text.Effect.DrawableFragment.lineBreakingFragment.getter(v26, (uint64_t)v107);
  double v27 = *(double *)(*(void *)&v107[3] + 64) - *(double *)(v106 + 64);
  uint64_t v28 = *(void *)a4;
  uint64_t v29 = *((void *)a4 + 3);
  char v30 = *((unsigned char *)a4 + 32);
  uint64_t v31 = *((void *)a4 + 5);
  uint64_t v93 = *(void *)a4;
  long long v94 = *(long long *)((char *)a4 + 8);
  uint64_t v95 = v29;
  char v96 = v30;
  uint64_t v97 = v31;
  uint64_t result = swift_retain();
  if (v27 != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v33 = *(void *)a4;
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v34 + 152) = _Q0;
      *(void *)(v34 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v34 + 176) = 0;
      *(void *)(v34 + 16) = *(void *)(v33 + 16);
      long long v40 = *(_OWORD *)(v33 + 40);
      long long v41 = *(_OWORD *)(v33 + 56);
      *(_OWORD *)(v34 + 24) = *(_OWORD *)(v33 + 24);
      *(_OWORD *)(v34 + 40) = v40;
      *(_OWORD *)(v34 + 56) = v41;
      *(void *)(v34 + 72) = *(void *)(v33 + 72);
      uint64_t v42 = *(void *)(v33 + 184);
      uint64_t v43 = *(void *)(v33 + 192);
      uint64_t v44 = *(void *)(v33 + 200);
      uint64_t v78 = *(void *)(v33 + 208);
      uint64_t v45 = *(void *)(v33 + 216);
      *(void *)(v34 + 184) = v42;
      *(void *)(v34 + 192) = v43;
      *(void *)(v34 + 200) = v44;
      *(void *)(v34 + 208) = v78;
      *(void *)(v34 + 216) = v45;
      swift_retain();
      swift_retain();
      outlined copy of Text.Effect.StopCollector?(v42, v43, v44, v78);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v46 = *(void *)(v33 + 80);
      uint64_t v47 = *(void *)(v33 + 88);
      LOBYTE(v43) = *(unsigned char *)(v33 + 96);
      swift_release();
      *(void *)(v34 + 80) = v46;
      *(void *)(v34 + 88) = v47;
      *(unsigned char *)(v34 + 96) = v43;
      *(void *)a4 = v34;
      swift_release();
    }
    uint64_t v48 = *(void *)a4;
    long long v49 = *(_OWORD *)(*(void *)a4 + 40);
    *(_OWORD *)&v98.a = *(_OWORD *)(*(void *)a4 + 24);
    *(_OWORD *)&v98.CGFloat c = v49;
    *(_OWORD *)&v98.CGFloat tx = *(_OWORD *)(v48 + 56);
    uint64_t result = (uint64_t)CGAffineTransformTranslate(&v92, &v98, 0.0, v27);
    long long v50 = *(_OWORD *)&v92.c;
    long long v51 = *(_OWORD *)&v92.tx;
    *(_OWORD *)(v48 + 24) = *(_OWORD *)&v92.a;
    *(_OWORD *)(v48 + 40) = v50;
    *(_OWORD *)(v48 + 56) = v51;
  }
  if ((v22 & 0xFE) == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    LOBYTE(v98.a) = a_low;
    v98.CGFloat b = b;
    v98.CGFloat c = c;
    v98.CGFloat d = d;
    v98.CGFloat tx = tx;
    LOBYTE(v98.ty) = ty_low;
    uint64_t v99 = v21;
    char v100 = v22;
    uint64_t v101 = v74;
    uint64_t v102 = v75;
    uint64_t v103 = v76;
    uint64_t v104 = v77;
    TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:)(a1, (unint64_t)v105, a3, (unsigned __int8 *)&v98, &v93);
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)v105);
    outlined release of Text.Effect.BaseFragment((uint64_t)v107);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v86 + 16) > a2)
  {
    uint64_t v52 = *(void *)(v86 + 8 * a2 + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    int v53 = (char *)Text.Effect.KeyframeLayout.Fragment.runIndices(for:)(a3, v52);
    uint64_t v54 = *((void *)v53 + 2);
    if (v54)
    {
      uint64_t v55 = (long long *)(v53 + 32);
      uint64_t v56 = v54 - 1;
      while (1)
      {
        char v57 = *(unsigned char *)(v28 + 96);
        uint64_t v91 = v56;
        if (v57)
        {
          uint64_t v87 = 0;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v87 = *(void *)(v28 + 80);
          uint64_t v89 = *(void *)(v28 + 88);
        }
        uint64_t v58 = *(void **)(v52 + 32);
        uint64_t v59 = *(void *)(v52 + 40);
        uint64_t v60 = *(unsigned __int8 *)(v52 + 48);
        long long v84 = *(_OWORD *)(v52 + 56);
        long long v85 = *v55;
        uint64_t v82 = *(unsigned int *)(v52 + 72);
        uint64_t v61 = *(void *)(v28 + 24);
        uint64_t v62 = *(void *)(v28 + 32);
        uint64_t v63 = *(void *)(v28 + 40);
        uint64_t v64 = *(void *)(v28 + 48);
        uint64_t v65 = *(void *)(v28 + 56);
        uint64_t v66 = *(void *)(v28 + 64);
        uint64_t v67 = *(void *)(v28 + 72);
        long long v79 = (void **)(*(void *)(v28 + 16) + 16);
        swift_beginAccess();
        long long v68 = *v79;
        outlined copy of Text.Layout.Line.Line(v58, v59, v60);
        outlined copy of Text.Layout.Line.Line(v58, v59, v60);
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char *v79 = v68;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
          char *v79 = v68;
        }
        unint64_t v71 = v68[2];
        unint64_t v70 = v68[3];
        if (v71 >= v70 >> 1)
        {
          long long v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v68);
          char *v79 = v68;
        }
        v68[2] = v71 + 1;
        uint64_t v72 = &v68[18 * v71];
        v72[4] = v58;
        v72[5] = v59;
        v72[6] = v60;
        *(_OWORD *)(v72 + 7) = v84;
        v72[9] = v82;
        *((_OWORD *)v72 + 5) = v85;
        v72[12] = v87;
        v72[13] = v89;
        *((unsigned char *)v72 + 112) = v57;
        int v73 = *(_DWORD *)((char *)&v92.a + 3);
        *(_DWORD *)((char *)v72 + 113) = LODWORD(v92.a);
        *((_DWORD *)v72 + 29) = v73;
        v72[15] = v67;
        v72[16] = v61;
        v72[17] = v62;
        v72[18] = v63;
        v72[19] = v64;
        v72[20] = v65;
        v72[21] = v66;
        swift_endAccess();
        swift_release();
        outlined consume of Text.Layout.Line.Line(v58, v59, v60);
        if (!v91) {
          break;
        }
        uint64_t v56 = v91 - 1;
        ++v55;
      }
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)v105);
    outlined release of Text.Effect.BaseFragment((uint64_t)v107);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t TextEffectImplementation.needsUpdate(_:at:context:)(Swift::UInt64 a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t v19 = *a3;
  TextEffectsAnimationController.state(for:time:)(a1, (double *)&v19, (uint64_t)v20);
  char v4 = v27;
  uint64_t v6 = v28;
  uint64_t v5 = v29;
  uint64_t v8 = v30;
  uint64_t v7 = v31;
  if ((v27 & 0xFE) == 2)
  {
    Swift::UInt v18 = a2;
    char v9 = v20[0];
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    uint64_t v17 = v24;
    char v16 = v25;
    uint64_t v13 = v26;
    TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(1);
    v20[0] = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v11;
    uint64_t v23 = v12;
    uint64_t v24 = v17;
    char v25 = v16;
    uint64_t v26 = v13;
    char v27 = v4;
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    uint64_t v30 = v8;
    uint64_t v31 = v7;
    char v14 = TextEffectImplementation.AnimationInfo.needsUpdate(for:state:consideringRestart:)(v18, (uint64_t)v20, 1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    char v14 = 0;
  }
  return v14 & 1;
}

double TextEffectImplementation.lineBreakingMetrics(_:ranges:context:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized TextEffectImplementation.lineBreakingMetrics(_:ranges:context:)(a1, a2, a3, a6);
}

uint64_t TextEffectImplementation.metrics(_:ranges:at:context:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = v8;
  uint64_t v95 = (long long *)a7;
  uint64_t v91 = a6;
  uint64_t v90 = a5;
  *(void *)&v97.f64[0] = a3;
  *(void *)&v96.f64[0] = a2;
  uint64_t v13 = *MEMORY[0x263F8EED0] & *v9;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v94 = v14;
  uint64_t v84 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v93 = (char *)v79 - v15;
  uint64_t v86 = type metadata accessor for Text.Effect.Layout.Fragment();
  MEMORY[0x270FA5388](v86);
  uint64_t v87 = (uint64_t)v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106[0] = *a4;
  uint64_t v92 = a8;
  TextEffectsAnimationController.state(for:time:)(a1, v106, (uint64_t)v99);
  int v17 = LOBYTE(v99[0]);
  uint64_t v18 = *((void *)&v99[0] + 1);
  long long v19 = v99[1];
  uint64_t v89 = v100;
  int v88 = BYTE8(v100);
  uint64_t v20 = v101;
  char v21 = BYTE8(v101);
  long long v22 = v102;
  long long v23 = v103;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v24;
  *(_OWORD *)(v24 + 16) = 0u;
  uint64_t v26 = v24 + 16;
  *(_OWORD *)(v24 + 32) = 0u;
  if ((v21 & 0xFE) != 2)
  {
    uint64_t v44 = specialized TextEffectImplementation.defaultDrawingState.getter(*(void *)(v13 + 280), *(void *)(v13 + 288));
    specialized appendMetrics #1 <A>(_:) in TextEffectImplementation.metrics(_:ranges:at:context:)(v44, (uint64_t)v95, (uint64_t)v9, *(unint64_t *)&v96.f64[0], *(uint64_t *)&v97.f64[0], (float64x2_t *)v25);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    float64x2_t v97 = *(float64x2_t *)(v25 + 32);
    float64x2_t v96 = *(float64x2_t *)(v25 + 16);
    return swift_release();
  }
  uint64_t v82 = (float64x2_t *)v24;
  uint64_t v78 = v92;
  uint64_t v77 = v95;
  v76[1] = v91;
  v76[0] = v90;
  long long v83 = v9;
  uint64_t v27 = TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(0);
  int v81 = v17;
  LOBYTE(v99[0]) = v17;
  *((void *)&v99[0] + 1) = v18;
  v99[1] = v19;
  *(void *)&long long v100 = v89;
  BYTE8(v100) = v88;
  *(void *)&long long v101 = v20;
  BYTE8(v101) = v21;
  uint64_t v85 = v22;
  long long v102 = v22;
  uint64_t v28 = v27;
  long long v103 = v23;
  char v29 = TextEffectImplementation.AnimationInfo.needsUpdate(for:state:consideringRestart:)(*(Swift::UInt *)&v96.f64[0], (uint64_t)v99, 1);
  uint64_t v30 = *(void *)(v13 + 280);
  if ((v29 & 1) == 0)
  {
    uint64_t v45 = specialized TextEffectImplementation.defaultDrawingState.getter(*(void *)(v13 + 280), *(void *)(v13 + 288));
    uint64_t v42 = v82;
    specialized appendMetrics #1 <A>(_:) in TextEffectImplementation.metrics(_:ranges:at:context:)(v45, (uint64_t)v95, (uint64_t)v83, *(unint64_t *)&v96.f64[0], *(uint64_t *)&v97.f64[0], v82);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_26:
    swift_beginAccess();
    float64x2_t v97 = v42[2];
    float64x2_t v96 = v42[1];
    return swift_release();
  }
  v79[1] = v26;
  uint64_t v31 = (uint64_t)v83;
  Swift::UInt64 v32 = *(void *)((char *)v83 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v33 = specialized TextEffectImplementation.defaultDrawingState.getter(v30, *(void *)(v13 + 288));
  uint64_t v80 = *((void *)&v23 + 1);
  uint64_t v34 = (uint64_t)v95;
  specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v32, v33, *(unint64_t *)&v96.f64[0], (uint64_t)v95, (uint64_t)v106);
  uint64_t v35 = v80;
  swift_release();
  LOBYTE(v99[0]) = v81;
  *((void *)&v99[0] + 1) = v18;
  v99[1] = v19;
  *(void *)&long long v100 = v89;
  BYTE8(v100) = v88;
  *(void *)&long long v101 = v20;
  BYTE8(v101) = v21;
  *(void *)&long long v102 = v85;
  *((void *)&v102 + 1) = *((void *)&v22 + 1);
  *(void *)&long long v103 = v23;
  *((void *)&v103 + 1) = v35;
  uint64_t v36 = v87;
  TextEffectImplementation.AnimationInfo.layout(for:state:context:)((char *)v99, v90, v91, v34, v92, v87);
  lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
  uint64_t v37 = *(void *)&v97.f64[0];
  char v38 = static RangeSet.== infix(_:_:)();
  uint64_t v39 = v28;
  unint64_t v40 = *(void *)&v96.f64[0];
  uint64_t v41 = v31;
  uint64_t v42 = v82;
  if (v38)
  {
    outlined release of Text.Effect.BaseFragment((uint64_t)v106);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v43 = (float64x2_t *)(v36 + *(int *)(v86 + 20));
    float64x2_t v97 = v43[1];
    float64x2_t v96 = *v43;
    _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(v36, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    return swift_release();
  }
  uint64_t v92 = v23;
  uint64_t v46 = v36 + *(int *)(v86 + 24);
  uint64_t v47 = *(void *)v46;
  uint64_t v48 = *(void *)(v46 + 8);
  if (*(unsigned char *)(v46 + 16) == 1)
  {
    outlined copy of Text.Effect.Layout.Fragment.Storage(v47, v48, 1);
    specialized appendMetrics #1 <A>(_:) in TextEffectImplementation.metrics(_:ranges:at:context:)(v47, v34, v41, v40, v37, v42);
    swift_release();
    outlined consume of Text.Effect.Layout.Fragment.Storage(v47, v48, 1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined release of Text.Effect.BaseFragment((uint64_t)v106);
LABEL_25:
    _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(v36, (uint64_t (*)(void))type metadata accessor for Text.Effect.Layout.Fragment);
    goto LABEL_26;
  }
  v96.f64[0] = *(float64_t *)(v46 + 8);
  uint64_t v49 = *(void *)(v47 + 16);
  if (!v49)
  {
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_24:
    outlined release of Text.Effect.BaseFragment((uint64_t)v106);
    outlined consume of Text.Effect.Layout.Fragment.Storage(v47, *(uint64_t *)&v96.f64[0], 0);
    goto LABEL_25;
  }
  uint64_t v90 = v39;
  uint64_t v91 = *((void *)&v22 + 1);
  double v50 = v106[3];
  double v51 = v106[6];
  uint64_t result = swift_bridgeObjectRetain();
  long long v53 = *(_OWORD *)(v47 + 32);
  long long v54 = *(_OWORD *)(v47 + 112);
  long long v102 = *(_OWORD *)(v47 + 96);
  long long v103 = v54;
  long long v55 = *(_OWORD *)(v47 + 144);
  long long v104 = *(_OWORD *)(v47 + 128);
  long long v105 = v55;
  long long v56 = *(_OWORD *)(v47 + 48);
  long long v57 = *(_OWORD *)(v47 + 64);
  v99[0] = v53;
  v99[1] = v56;
  uint64_t v95 = (long long *)v47;
  long long v58 = *(_OWORD *)(v47 + 80);
  long long v100 = v57;
  long long v101 = v58;
  unint64_t v59 = *(void *)&v99[0] - *(void *)&v51;
  if (__OFSUB__(*(void *)&v99[0], *(void *)&v51))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v36 = v87;
    uint64_t v47 = (uint64_t)v95;
    goto LABEL_24;
  }
  uint64_t v60 = (void (**)(char *, uint64_t))(v84 + 8);
  uint64_t v61 = v95 + 10;
  uint64_t v62 = v93;
  while ((v59 & 0x8000000000000000) == 0)
  {
    uint64_t v63 = *(void *)(*(void *)&v50 + 96);
    if (v59 >= *(void *)(v63 + 16)) {
      goto LABEL_29;
    }
    long long v98 = *(_OWORD *)(v63 + 24 * v59 + 32);
    outlined retain of Text.Effect.DisplayInfo((uint64_t)v99);
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    uint64_t v64 = RangeSet.ranges.getter();
    MEMORY[0x270FA5388](v64);
    uint64_t v77 = &v98;
    char v65 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.overlaps(_:)specialized partial apply, (uint64_t)v76);
    (*v60)(v62, v94);
    uint64_t result = outlined release of Text.Effect.DisplayInfo((uint64_t)v99);
    if (v65)
    {
      double v66 = *((double *)&v99[1] + 1);
      double v67 = *(double *)&v100;
      v42[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)((char *)v99 + 8), v42[1]), *(int8x16_t *)((char *)v99 + 8), (int8x16_t)v42[1]);
      double v68 = v42[2].f64[1];
      if (v42[2].f64[0] > v66) {
        double v66 = v42[2].f64[0];
      }
      v42[2].f64[0] = v66;
      v42[2].f64[1] = v67 + v68;
    }
    if (!--v49) {
      goto LABEL_22;
    }
    long long v69 = v61[2];
    long long v71 = *v61;
    long long v70 = v61[1];
    long long v101 = v61[3];
    long long v100 = v69;
    v99[0] = v71;
    v99[1] = v70;
    long long v72 = v61[4];
    long long v73 = v61[5];
    long long v74 = v61[6];
    long long v75 = v61[7];
    v61 += 8;
    long long v105 = v75;
    long long v103 = v73;
    long long v104 = v74;
    long long v102 = v72;
    unint64_t v59 = *(void *)&v99[0] - *(void *)&v51;
    if (__OFSUB__(*(void *)&v99[0], *(void *)&v51)) {
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

double TextEffectImplementation.widthDifference(_:ranges:at:context:)(Swift::UInt64 a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = v8;
  uint64_t v40 = a3;
  uint64_t v41 = a7;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a2;
  uint64_t v13 = *(void *)((*MEMORY[0x263F8EED0] & *v9) + 0x120);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)((*MEMORY[0x263F8EED0] & *v9) + 0x118);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  long long v22 = (char *)v35 - v21;
  double v23 = *a4;
  double v24 = 0.0;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t, double))(v13 + 48))(v15, v13, v20) != 1)
  {
    double v42 = v23;
    v35[0] = a8;
    TextEffectsAnimationController.state(for:time:)(a1, &v42, (uint64_t)v43);
    v35[1] = v45;
    v35[2] = v46;
    id v35[3] = v47;
    if ((v44 & 0xFE) == 2
      || ((*(void (**)(uint64_t, uint64_t))(v14 + 120))(v15, v14),
          (*(void (**)(uint64_t, uint64_t))(v14 + 128))(v15, v14),
          swift_getAssociatedConformanceWitness(),
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)(),
          uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8),
          v26(v18, AssociatedTypeWitness),
          v26(v22, AssociatedTypeWitness),
          (v25 & 1) == 0))
    {
      v43[0] = v23;
      unint64_t v28 = v39;
      uint64_t v27 = v40;
      uint64_t v29 = v41;
      TextEffectImplementation.metrics(_:ranges:at:context:)(a1, v39, v40, v43, v37, v38, v41, v35[0]);
      double v31 = v30;
      specialized TextEffectImplementation.lineBreakingMetrics(_:ranges:context:)(a1, v28, v27, v29);
      double v33 = v32;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return v31 - v33;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  return v24;
}

uint64_t TextEffectImplementation.duration(from:to:variant:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[0] = a8;
  v17[1] = a7;
  void v17[2] = a6;
  v17[3] = a3;
  void v17[4] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)v17 - v10;
  uint64_t v12 = TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(1);
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 160);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return v15;
}

id TextEffectImplementation.saveSnapshot(animationController:)(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x118);
  uint64_t v40 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v39 = (uint64_t)&v30 - v3;
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id;
  Swift::UInt64 v7 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
  *(void *)&v54[0] = v5;
  TextEffectsAnimationController.state(for:time:)(v7, (double *)v54, (uint64_t)v42);
  LODWORD(v36) = v42[0];
  uint64_t v8 = v43;
  uint64_t v9 = v44;
  uint64_t v10 = v45;
  uint64_t v35 = v46;
  int v34 = v47;
  uint64_t v11 = v48;
  char v12 = v49;
  uint64_t v14 = v50;
  uint64_t v13 = v51;
  uint64_t v15 = v52;
  uint64_t v16 = v53;
  if (!TextEffectsAnimationController.animationInfo(for:)(*(void *)&v1[v6]))
  {
    swift_release();
    swift_release();
    swift_release();
LABEL_6:
    swift_release();
    return 0;
  }
  uint64_t v37 = v14;
  uint64_t v38 = v13;
  uint64_t v32 = v15;
  uint64_t v33 = v16;
  type metadata accessor for TextEffectImplementation.AnimationInfo();
  uint64_t v17 = swift_dynamicCastClass();
  if (!v17)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  uint64_t v18 = v17;
  Class v31 = (Class)type metadata accessor for TextEffectStateSnapshot();
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v39, &v1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x128)], v2);
  uint64_t v41 = v5;
  v42[0] = v36;
  uint64_t v43 = v8;
  uint64_t v44 = v9;
  uint64_t v45 = v10;
  uint64_t v46 = v35;
  unsigned __int8 v47 = v34;
  uint64_t v48 = v11;
  char v49 = v12;
  uint64_t v50 = v37;
  uint64_t v51 = v38;
  uint64_t v52 = v32;
  uint64_t v53 = v33;
  uint64_t v19 = *(void **)(v18 + *(void *)(*(void *)v18 + 168));
  type metadata accessor for Text.Effect.AttributeTracker();
  uint64_t v20 = swift_allocObject();
  swift_beginAccess();
  uint64_t v36 = v2;
  uint64_t v21 = v19[3];
  uint64_t v22 = v19[4];
  uint64_t v23 = v19[5];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized Text.Effect.AttributeTracker.Tracker.deepCopy()(v21, v22, v23, (uint64_t)v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v24 = v54[1];
  *(_OWORD *)(v20 + 16) = v54[0];
  *(_OWORD *)(v20 + 32) = v24;
  *(unsigned char *)(v20 + 48) = v55;
  swift_beginAccess();
  uint64_t v25 = v19[7];
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v20 + 56) = v25;
  id v26 = objc_allocWithZone(v31);
  uint64_t v27 = v39;
  id v28 = specialized TextEffectStateSnapshot.init(effect:time:state:attributes:)(v39, &v41, (uint64_t)v42, v20);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v27, v36);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v28;
}

void TextEffectImplementation.restoreSnapshot(_:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v62 = a2;
  uint64_t v9 = *MEMORY[0x263F8EED0];
  uint64_t v10 = *(void *)((*MEMORY[0x263F8EED0] & *(void *)v5) + 0x118);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v54 - v15;
  type metadata accessor for TextEffectStateSnapshot();
  uint64_t v17 = (void *)swift_dynamicCastClass();
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v59 = a5;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v19(v16, (char *)v17 + *(void *)((*v17 & v9) + 0x60), v10);
    v19(v13, &v6[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v6) + 0x128)], v10);
    id v20 = a1;
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v13, v10);
    v22(v16, v10);
    if ((v21 & 1) == 0)
    {

      return;
    }
    id v58 = v20;
    uint64_t v23 = (unsigned __int8 *)v18 + *(void *)((*MEMORY[0x263F8EED0] & *v18) + 0x70);
    uint64_t v25 = *((void *)v23 + 8);
    uint64_t v24 = *((void *)v23 + 9);
    uint64_t v26 = *((void *)v23 + 10);
    uint64_t v27 = *((void *)v23 + 11);
    int v57 = *v23;
    uint64_t v28 = *((void *)v23 + 6);
    uint64_t v56 = v25;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v55 = v26;
    uint64_t v62 = TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(1);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v29 = *(void **)((char *)v18 + *(void *)((*MEMORY[0x263F8EED0] & *v18) + 0x78));
    type metadata accessor for Text.Effect.AttributeTracker();
    uint64_t v30 = swift_allocObject();
    swift_beginAccess();
    uint64_t v31 = v29[3];
    uint64_t v33 = v29[4];
    uint64_t v32 = v29[5];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v34 = v33;
    uint64_t v35 = v62;
    specialized Text.Effect.AttributeTracker.Tracker.deepCopy()(v31, v34, v32, (uint64_t)v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v36 = v63[1];
    *(_OWORD *)(v30 + 16) = v63[0];
    *(_OWORD *)(v30 + 32) = v36;
    *(unsigned char *)(v30 + 48) = v64;
    swift_beginAccess();
    uint64_t v37 = v29[7];
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)(v30 + 56) = v37;
    *(void *)(v35 + *(void *)(*(void *)v35 + 168)) = v30;
    uint64_t v38 = v59;
    swift_release();
    uint64_t v39 = *((void *)v23 + 3);
    uint64_t v40 = *((void *)v23 + 4);
    unsigned __int8 v41 = v23[40];
    unsigned __int8 v42 = v23[56];
    v65[0] = v57;
    long long v66 = *(_OWORD *)(v23 + 8);
    uint64_t v67 = v39;
    uint64_t v68 = v40;
    unsigned __int8 v69 = v41;
    uint64_t v70 = v28;
    unsigned __int8 v71 = v42;
    uint64_t v72 = v56;
    uint64_t v73 = v24;
    uint64_t v74 = v55;
    uint64_t v75 = v27;
    Swift::UInt64 v43 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
    if (*(unsigned char *)(v38 + 40) == 1)
    {
      double v44 = *(double *)(v38 + 56);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      double v44 = CACurrentMediaTime();
    }
    swift_beginAccess();
    uint64_t v45 = *(void *)(*(void *)(v38 + 72) + 16);
    closure #1 in TextEffectsAnimationController.restoreState(_:for:)((uint64_t)v65, v38, v43, v44);
    uint64_t v46 = *(void *)(*(void *)(v38 + 72) + 16);
    unsigned __int8 v47 = v58;
    if (v45)
    {
      if (!v46) {
        TextEffectsAnimationController.clearDisplayLink()();
      }
LABEL_14:
      swift_release();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return;
    }
    if (!v46) {
      goto LABEL_14;
    }
    if (*(unsigned char *)(v38 + 40)) {
      goto LABEL_14;
    }
    *(unsigned char *)(v38 + 40) = 1;
    *(CFTimeInterval *)(v38 + 56) = CACurrentMediaTime();
    if (TextEffectsAnimationController.startExternalDisplayLink()() || *(void *)(v38 + 48)) {
      goto LABEL_14;
    }
    id v48 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v38, sel_displayLink_);
    char v49 = *(void **)(v38 + 48);
    *(void *)(v38 + 48) = v48;

    uint64_t v50 = *(void **)(v38 + 48);
    if (v50)
    {
      uint64_t v51 = self;
      id v52 = v50;
      id v53 = objc_msgSend(v51, sel_mainRunLoop);
      objc_msgSend(v52, sel_addToRunLoop_forMode_, v53, *MEMORY[0x263EFF588]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t TextEffectImplementation.phase(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v4 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x120) + 16);
  uint64_t v5 = *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x118);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v21 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v4 + 88))(a1, v22, v5, v4, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    id v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v20(v18, v10, AssociatedTypeWitness);
    type metadata accessor for Text.Effect.ConcretePhase();
    v20(v14, v18, AssociatedTypeWitness);
    return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v14);
  }
}

uint64_t TextEffectImplementation.defaultAnimatorPhase.getter()
{
  uint64_t v1 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x120) + 16);
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x118);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v5 = (char *)&v7 - v4;
  type metadata accessor for Text.Effect.ConcretePhase();
  (*(void (**)(uint64_t, uint64_t))(v1 + 72))(v2, v1);
  return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v5);
}

uint64_t TextEffectImplementation.configuration(from:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x120) + 16);
  uint64_t v4 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x118);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v20 - v16;
  if (!a1) {
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 64))(a1, v4, v3, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v17, v9, AssociatedTypeWitness);
  type metadata accessor for Text.Effect.ConcreteConfiguration();
  v19(v13, v17, AssociatedTypeWitness);
  return Text.Effect.ConcreteConfiguration.__allocating_init(_:)((uint64_t)v13);
}

void @objc TextEffectImplementation.init()()
{
}

uint64_t TextEffectImplementation.__ivar_destroyer()
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x118)
                                                       - 8)
                                           + 8))(&v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x128)]);
}

uint64_t @objc TextEffectImplementation.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x118)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x128)]);
}

uint64_t type metadata accessor for TextEffectImplementation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TextEffectImplementation.AnimationInfo()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for TextEffectImplementation.AnimationInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TextEffectStateSnapshot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void @objc TextEffectStateSnapshot.init()()
{
}

uint64_t TextEffectStateSnapshot.__ivar_destroyer()
{
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x50) - 8) + 8))(&v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0x60)]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t @objc TextEffectStateSnapshot.__ivar_destroyer(char *a1)
{
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x60)]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for TextEffectStateSnapshot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TextEffectImplementation.ResolvedMap()
{
  return __swift_instantiateGenericMetadata();
}

__n128 closure #1 in Text.Effect.DrawableFragment.transform(with:transform:)(uint64_t a1, __n128 *a2, uint64_t a3, void (*a4)(uint64_t, __n128 *))
{
  unint64_t v7 = *(void *)(a3 + 8);
  __n128 v8 = *(__n128 *)(a3 + 48);
  __n128 v9 = *(__n128 *)(a3 + 64);
  unint64_t v10 = *(void *)(a3 + 80);
  __n128 v18 = a2[17];
  __n128 v16 = a2[19];
  __n128 v17 = a2[18];
  __n128 v14 = a2[21];
  __n128 v15 = a2[20];
  unint64_t v11 = a2[22].n128_u64[0];
  a2[17].n128_u64[0] = *(void *)a3;
  a2[17].n128_u64[1] = v7;
  __n128 v12 = *(__n128 *)(a3 + 32);
  a2[18] = *(__n128 *)(a3 + 16);
  a2[19] = v12;
  a2[20] = v8;
  a2[21] = v9;
  a2[22].n128_u64[0] = v10;
  outlined retain of Text.Effect.PathInterpolator(a3);
  a4(a1, a2);
  outlined consume of Text.Effect.TransformContext.DrawingMode(a2[17].n128_u64[0], a2[17].n128_i64[1], a2[18].n128_i64[0], a2[18].n128_i64[1], a2[19].n128_i64[0], a2[19].n128_i64[1], a2[20].n128_i64[0], a2[20].n128_i64[1], a2[21].n128_i64[0], a2[21].n128_i64[1], a2[22].n128_u64[0]);
  a2[17] = v18;
  a2[18] = v17;
  a2[19] = v16;
  a2[20] = v15;
  __n128 result = v14;
  a2[21] = v14;
  a2[22].n128_u64[0] = v11;
  return result;
}

uint64_t *specialized closure #1 in RangeSet.overlaps(_:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*result < v5)
  {
    BOOL v7 = __OFSUB__(v4, v3);
    BOOL v6 = v4 - v3 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if (v6 == v7) {
    return 0;
  }
  if (__OFSUB__(v3, v2))
  {
    __break(1u);
  }
  else
  {
    if (v3 == v2) {
      return 0;
    }
    if (!__OFSUB__(v5, v4)) {
      return (uint64_t *)(v5 != v4);
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.Key.key<A>(for:state:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  __n128 v8 = (char *)&v10 - v7;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, AssociatedTypeWitness);
  Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v8);
  return a3;
}

uint64_t specialized TextEffectImplementation.defaultDrawingState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v6 = (char *)&v8 - v5;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(uint64_t, uint64_t))(v3 + 128))(a1, v3);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v6);
}

void specialized TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)(unint64_t *a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v105 = a6;
  uint64_t v118 = a5;
  long long v123 = a1;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v117 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  long long v104 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v108 = (char *)&v102 - v13;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v124 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v103 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v120 = (char *)&v102 - v18;
  MEMORY[0x270FA5388](v19);
  long long v102 = (char *)&v102 - v20;
  if (a3 < a2) {
    goto LABEL_115;
  }
  if (a2 != a3)
  {
    uint64_t v106 = *(void *)(v105 + 16);
    uint64_t v126 = type metadata accessor for Text.Effect.DrawableContent();
    uint64_t v121 = (void (**)(char *, uint64_t))(v15 + 8);
    uint64_t v122 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v115 = a4;
    long long v116 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v114 = a3;
    while (1)
    {
      Text.Effect.DrawableContent.subscript.getter(a2, (uint64_t)v131);
      uint64_t v22 = a2 + 1;
      if (__OFADD__(a2, 1))
      {
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        return;
      }
      int64_t v127 = a2;
      if (v22 >= *(void *)(*v123 + 16))
      {
        LODWORD(v111) = 0;
        goto LABEL_22;
      }
      Text.Effect.DrawableContent.subscript.getter(a2 + 1, (uint64_t)v133);
      uint64_t v23 = v134;
      v143[0] = v134;
      uint64_t v24 = *(void *)(v134 + 16);
      uint64_t v25 = *(void **)(v134 + 32);
      uint64_t v26 = *(void *)(v134 + 40);
      char v27 = *(unsigned char *)(v134 + 48);
      if ((v27 & 1) == 0) {
        break;
      }
      outlined copy of Text.Layout.Line.Line(*(void **)(v134 + 32), *(void *)(v134 + 40), 1);
      outlined retain of ViewTransform((uint64_t)v143);
      uint64_t v28 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v25);
      if (v28) {
        goto LABEL_14;
      }
      CFArrayRef v125 = 0;
      char v27 = 1;
LABEL_15:
      outlined consume of Text.Layout.Line.Line(v25, v26, v27);
      CFArrayRef v29 = *(const __CFArray **)(v23 + 24);
      uint64_t v30 = v102;
      uint64_t v31 = v124;
      (*v122)(v102, v23+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v124);
      specialized RangeSet.lowerBound.getter();
      (*v121)(v30, v31);
      outlined release of ViewTransform((uint64_t)v143);
      outlined release of Text.Effect.BaseFragment((uint64_t)v133);
      BOOL v32 = v125 == v29 && v24 == 0;
      int v33 = v32;
      LODWORD(v111) = v33;
LABEL_22:
      uint64_t v34 = type metadata accessor for Text.Effect.DrawableFragment();
      Text.Effect.DrawableFragment.baseWritingDirection.getter((BOOL *)v129);
      if (LOBYTE(v129[0])) {
        int v35 = 1;
      }
      else {
        int v35 = 2;
      }
      LODWORD(v110) = v35;
      if (LOBYTE(v129[0])) {
        int v36 = 2;
      }
      else {
        int v36 = 1;
      }
      LODWORD(v125) = v36;
      uint64_t v37 = v132;
      uint64_t v142 = v132;
      BOOL v38 = *(void *)(v132 + 16) == 0;
      uint64_t v40 = *(void **)(v132 + 32);
      uint64_t v39 = *(void *)(v132 + 40);
      LODWORD(v119) = *(unsigned __int8 *)(v132 + 48);
      if (v119)
      {
        outlined copy of Text.Layout.Line.Line(v40, v39, 1);
        outlined retain of ViewTransform((uint64_t)&v142);
        unsigned __int8 v41 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v40);
        if (!v41)
        {
          CFArrayRef RunCount = 0;
          char v43 = 1;
          goto LABEL_33;
        }
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v40, v39, 0);
        outlined copy of Text.Layout.Line.Line(v40, v39, 0);
        outlined retain of ViewTransform((uint64_t)&v142);
        swift_release();
        unsigned __int8 v41 = (const __CTLine *)v40;
      }
      CFArrayRef RunCount = _CTLineGetRunCount(v41);

      char v43 = (char)v119;
LABEL_33:
      outlined consume of Text.Layout.Line.Line(v40, v39, v43);
      if (RunCount == *(const __CFArray **)(v37 + 24)) {
        int v44 = v38 | 2;
      }
      else {
        int v44 = v38;
      }
      LODWORD(v119) = v44;
      uint64_t v112 = *v122;
      v112(v120, v37+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v124);
      uint64_t v45 = v108;
      RangeSet.ranges.getter();
      uint64_t v46 = _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex>.Ranges and conformance RangeSet<A>.Ranges);
      uint64_t v47 = v117;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      unint64_t v48 = v130;
      unint64_t v49 = v129[0];
      uint64_t v113 = v46;
      if (v130 == v129[0])
      {
        uint64_t v50 = 0;
      }
      else
      {
        uint64_t v51 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v50 = *v52;
        v51(v129, 0);
      }
      uint64_t v53 = v47;
      uint64_t v21 = v114;
      LOBYTE(v129[0]) = v48 == v49;
      uint64_t v54 = *v116;
      (*v116)(v45, v53);
      int v55 = LOBYTE(v129[0]);
      uint64_t v56 = *v121;
      (*v121)(v120, v124);
      outlined release of ViewTransform((uint64_t)&v142);
      unsigned int v57 = v119 | 4;
      if (v50) {
        unsigned int v57 = v119;
      }
      if (v55) {
        unsigned int v57 = v119;
      }
      uint64_t v58 = v115;
      if ((~v57 & 3) != 0)
      {
        BOOL v32 = (v57 & v110) == 0;
        int v59 = (int)v111;
        if (v32) {
          int v59 = 0;
        }
        if (v59 != 1)
        {
          unint64_t v93 = v127;
          if (v127 >= v21) {
            goto LABEL_110;
          }
          if (v22 > v21) {
            goto LABEL_111;
          }
          Text.Effect.DrawableFragment.defaultDrawingFragment.getter(v34, (uint64_t)v140);
          double v94 = Text.Effect.DrawableFragment.width.getter();
          outlined release of Text.Effect.BaseFragment((uint64_t)v140);
          if ((v93 & 0x8000000000000000) != 0) {
            goto LABEL_112;
          }
          unint64_t v95 = *v123;
          if (v93 >= *(void *)(*v123 + 16)) {
            goto LABEL_113;
          }
          uint64_t v96 = type metadata accessor for Text.Effect.Layout.Fragment();
          unint64_t v97 = (*(unsigned __int8 *)(*(void *)(v96 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v96 - 8) + 80);
          unint64_t v98 = *(void *)(*(void *)(v96 - 8) + 72) * v93;
          double v99 = *(double *)(v95 + v97 + *(int *)(v96 + 20) + v98 + 24);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew()(v95);
          }
          if ((unint64_t)v127 >= *(void *)(v95 + 16)) {
            goto LABEL_114;
          }
          unint64_t v100 = v95 + v97 + v98;
          *(double *)(v100 + *(int *)(v96 + 20) + 24) = v94;
          unint64_t v101 = v100 + *(int *)(v96 + 24);
          if ((*(unsigned char *)(v101 + 16) & 1) == 0)
          {
            *(double *)(v101 + 8) = (v94 - v99) * 0.5;
            *(unsigned char *)(v101 + 16) = 0;
          }
          outlined release of Text.Effect.BaseFragment((uint64_t)v131);
          unint64_t *v123 = v95;
          goto LABEL_6;
        }
      }
      uint64_t v111 = v56;
      char v119 = v54;
      uint64_t v60 = v127;
      if (v127 == v21)
      {
        uint64_t v22 = v21;
        uint64_t v61 = v127;
        uint64_t v62 = (uint64_t)v123;
      }
      else
      {
        if (v127 <= v21) {
          uint64_t v63 = v21;
        }
        else {
          uint64_t v63 = v127;
        }
        uint64_t v22 = v127;
        while (1)
        {
          v129[0] = v22;
          if (!closure #1 in TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)(v129, v60, v58, (int)v125))break; {
          if (v60 > v21)
          }
          {
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
            goto LABEL_103;
          }
          if (v63 == v22) {
            goto LABEL_102;
          }
          if (v21 == ++v22)
          {
            uint64_t v22 = v21;
            break;
          }
        }
        BOOL v64 = v22 < v60;
        uint64_t v61 = v60;
        uint64_t v62 = (uint64_t)v123;
        if (v64) {
          goto LABEL_105;
        }
      }
      v129[0] = 0;
      if (v61 == v22) {
        goto LABEL_116;
      }
      if (v61 >= v22) {
        goto LABEL_104;
      }
      unint64_t v65 = v127;
      do
      {
        unint64_t v66 = v65 + 1;
        unint64_t v130 = v65;
        closure #2 in TextEffectImplementation.AnimationInfo.centerAlign(fragments:chunk:content:)((double *)v129, &v130, v62, &v128);
        double v67 = v128;
        *(double *)long long v129 = v128;
        unint64_t v65 = v66;
      }
      while (v22 != v66);
      if (__OFSUB__(v22, v127)) {
        goto LABEL_106;
      }
      CFArrayRef v125 = (const __CFArray *)(v22 - v127);
      unint64_t v107 = v22 - 1;
      Text.Effect.DrawableContent.subscript.getter(v22 - 1, (uint64_t)v135);
      uint64_t v68 = v136;
      uint64_t v141 = v136;
      uint64_t v109 = *(void *)(v136 + 16);
      unsigned __int8 v69 = *(void **)(v136 + 32);
      uint64_t v70 = *(void *)(v136 + 40);
      char v71 = *(unsigned char *)(v136 + 48);
      if ((v71 & 1) == 0)
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v136 + 32), *(void *)(v136 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v69, v70, 0);
        outlined retain of ViewTransform((uint64_t)&v141);
        swift_release();
        uint64_t v72 = (const __CTLine *)v69;
LABEL_68:
        CFArrayRef v110 = _CTLineGetRunCount(v72);

        goto LABEL_69;
      }
      outlined copy of Text.Layout.Line.Line(*(void **)(v136 + 32), *(void *)(v136 + 40), 1);
      outlined retain of ViewTransform((uint64_t)&v141);
      uint64_t v72 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v69);
      if (v72) {
        goto LABEL_68;
      }
      CFArrayRef v110 = 0;
      char v71 = 1;
LABEL_69:
      outlined consume of Text.Layout.Line.Line(v69, v70, v71);
      CFArrayRef v73 = *(const __CFArray **)(v68 + 24);
      uint64_t v74 = v103;
      v112(v103, v68+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v124);
      uint64_t v75 = v104;
      RangeSet.ranges.getter();
      uint64_t v76 = v117;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (v130 != v129[0])
      {
        uint64_t v77 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
        v77(v129, 0);
      }
      double v78 = v67 * 0.5 / (double)(uint64_t)v125;
      v119(v75, v76);
      v111(v74, v124);
      outlined release of ViewTransform((uint64_t)&v141);
      long long v79 = v123;
      if (v110 == v73 && !v109)
      {
        unint64_t v80 = *v123;
        unint64_t v81 = v127;
        goto LABEL_78;
      }
      Text.Effect.DrawableFragment.defaultDrawingFragment.getter(v34, (uint64_t)v137);
      double v82 = Text.Effect.DrawableFragment.width.getter();
      outlined release of Text.Effect.BaseFragment((uint64_t)v137);
      unint64_t v81 = v127;
      if (v22 < 1) {
        goto LABEL_108;
      }
      unint64_t v80 = *v79;
      unint64_t v83 = v107;
      if (v107 >= *(void *)(*v79 + 16)) {
        goto LABEL_109;
      }
      uint64_t v84 = type metadata accessor for Text.Effect.Layout.Fragment();
      uint64_t v87 = *(void *)(v84 - 8);
      uint64_t v85 = v84 - 8;
      uint64_t v86 = v87;
      uint64_t v88 = v87;
      if (v78 >= (v82
                 - *(double *)(v80
                             + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
                             + *(void *)(v87 + 72) * v83
                             + *(int *)(v85 + 28)
                             + 24))
                * 0.5)
        double v78 = (v82
             - *(double *)(v80
                         + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
                         + *(void *)(v86 + 72) * v83
                         + *(int *)(v85 + 28)
                         + 24))
            * 0.5;
      do
      {
LABEL_78:
        Text.Effect.DrawableContent.subscript.getter(v81, (uint64_t)v138);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (v127 < 0) {
            goto LABEL_98;
          }
        }
        else
        {
          unint64_t v80 = specialized _ArrayBuffer._consumeAndCreateNew()(v80);
          if (v127 < 0)
          {
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
        }
        if (v81 >= *(void *)(v80 + 16)) {
          goto LABEL_99;
        }
        uint64_t v89 = type metadata accessor for Text.Effect.Layout.Fragment();
        unint64_t v90 = v80
            + ((*(unsigned __int8 *)(*(void *)(v89 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v89 - 8) + 80))
            + *(void *)(*(void *)(v89 - 8) + 72) * v81;
        unint64_t v91 = v90 + *(int *)(v89 + 24);
        if ((*(unsigned char *)(v91 + 16) & 1) == 0)
        {
          *(double *)(v91 + 8) = v78;
          *(unsigned char *)(v91 + 16) = 0;
        }
        Text.Effect.DrawableFragment.defaultDrawingFragment.getter(v34, (uint64_t)v139);
        double v92 = Text.Effect.DrawableFragment.width.getter();
        outlined release of Text.Effect.BaseFragment((uint64_t)v139);
        if (v81 >= *(void *)(v80 + 16)) {
          goto LABEL_100;
        }
        ++v81;
        *(double *)(v90 + *(int *)(v89 + 20) + 24) = v92;
        outlined release of Text.Effect.BaseFragment((uint64_t)v138);
      }
      while (v22 != v81);
      outlined release of Text.Effect.BaseFragment((uint64_t)v131);
      outlined release of Text.Effect.BaseFragment((uint64_t)v135);
      unint64_t *v123 = v80;
      uint64_t v21 = v114;
      if (v22 > v114) {
        goto LABEL_107;
      }
LABEL_6:
      a2 = v22;
      if (v22 == v21) {
        return;
      }
    }
    outlined copy of Text.Layout.Line.Line(*(void **)(v134 + 32), *(void *)(v134 + 40), 0);
    outlined copy of Text.Layout.Line.Line(v25, v26, 0);
    outlined retain of ViewTransform((uint64_t)v143);
    swift_release();
    uint64_t v28 = (const __CTLine *)v25;
LABEL_14:
    CFArrayRef v125 = _CTLineGetRunCount(v28);

    goto LABEL_15;
  }
}

uint64_t specialized appendMetrics #1 <A>(_:) in TextEffectImplementation.metrics(_:ranges:at:context:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, float64x2_t *a6)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v58 = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unsigned int v57 = (char *)&v52 - v14;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  BOOL v64 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  int v59 = (char *)&v52 - v20;
  Swift::UInt64 v21 = *(void *)(a3 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  swift_beginAccess();
  uint64_t v22 = *(void *)(a2 + 48);
  if (!*(void *)(v22 + 16)) {
    return swift_endAccess();
  }
  swift_retain();
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, a1);
  if (v24)
  {
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 16 * v23);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_30;
    }
    if (*(void *)(v25 + 16) <= a4)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    uint64_t v26 = *(void *)(v25 + 8 * a4 + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v52 = v17;
    char v27 = v59;
    uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
    uint64_t v63 = v17 + 16;
    v62(v59, v26+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v16);
    CFIndex v28 = *(void *)(v26 + 16);
    swift_retain();
    swift_beginAccess();
    CFArrayRef v29 = v64;
    if (v28 == *(void *)(v26 + 24))
    {
LABEL_6:
      swift_release_n();
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v16);
    }
    uint64_t v60 = 0;
    uint64_t v56 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v61 = (void (**)(char *, uint64_t))(v52 + 8);
    int v55 = a6;
    uint64_t v54 = a5;
    uint64_t v53 = v26;
    while (1)
    {
      BOOL v38 = *(void **)(v26 + 32);
      uint64_t v39 = *(void *)(v26 + 40);
      if (*(unsigned char *)(v26 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v26 + 32), *(void *)(v26 + 40), 1);
        id v40 = (id)_NSTextLineFragmentGetCTLine(v38);
        if (!v40) {
          goto LABEL_32;
        }
        id v41 = v40;
        outlined consume of Text.Layout.Line.Line(v38, v39, 1);
        BOOL v38 = v41;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v26 + 32), *(void *)(v26 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v38, v39, 0);

        swift_release();
      }
      if (v28 < *(void *)(v26 + 16) || v28 >= *(void *)(v26 + 24))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
      char v42 = static RangeSet.== infix(_:_:)();
      v62(v29, a5, v16);
      if (v42) {
        break;
      }
      uint64_t v43 = v16;
      swift_retain();
      int v44 = v38;
      uint64_t v45 = (id)_CTLineGetRunAtIndex(v44, v28);
      CFRange StringRange = CTRunGetStringRange((CTRunRef)v45);
      swift_release();

      if (__OFADD__(StringRange.location, StringRange.length)) {
        goto LABEL_28;
      }
      if (StringRange.location + StringRange.length < StringRange.location) {
        goto LABEL_29;
      }
      *(void *)&buffer.x = StringRange.location;
      *(void *)&buffer.y = StringRange.location + StringRange.length;
      uint64_t v47 = v57;
      uint64_t v16 = v43;
      unint64_t v48 = v64;
      uint64_t v49 = RangeSet.ranges.getter();
      MEMORY[0x270FA5388](v49);
      *(&v52 - 2) = (uint64_t)&buffer;
      uint64_t v50 = v60;
      char v51 = specialized Sequence.contains(where:)((uint64_t (*)(void *))closure #1 in RangeSet.overlaps(_:)specialized partial apply, (uint64_t)(&v52 - 4));
      uint64_t v60 = v50;
      (*v56)(v47, v58);
      (*v61)(v48, v43);
      if (v51)
      {
        a5 = v54;
        a6 = v55;
        char v27 = v59;
        uint64_t v26 = v53;
        goto LABEL_11;
      }
      swift_release();

      a5 = v54;
      a6 = v55;
      char v27 = v59;
      uint64_t v26 = v53;
LABEL_14:
      ++v28;
      CFArrayRef v29 = v64;
      if (v28 == *(void *)(v26 + 24)) {
        goto LABEL_6;
      }
    }
    (*v61)(v29, v16);
LABEL_11:
    uint64_t v31 = v38;
    swift_retain();
    BOOL v32 = (id)_CTLineGetRunAtIndex(v31, v28);
    buffer.x = 0.0;
    buffer.y = 0.0;
    CGFloat descent = 0.0;
    ascent[0] = 0.0;
    originsBuffer.y = 0.0;
    CGFloat leading = 0.0;
    originsBuffer.x = 0.0;
    v71.location = 0;
    v71.length = 1;
    CTRunGetPositions((CTRunRef)v32, v71, &buffer);
    v72.location = 0;
    v72.length = 1;
    CTRunGetBaseAdvancesAndOrigins((CTRunRef)v32, v72, 0, &originsBuffer);
    v73.location = 0;
    v73.length = 0;
    double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v32, v73, ascent, &descent, &leading);
    swift_release_n();

    v34.f64[0] = ascent[0];
    double v35 = leading;
    v34.f64[1] = fabs(descent);
    a6[1] = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v34, a6[1]), (int8x16_t)v34, (int8x16_t)a6[1]);
    double v36 = a6[2].f64[0];
    if (v36 <= v35) {
      double v36 = v35;
    }
    double v37 = TypographicBounds + a6[2].f64[1];
    a6[2].f64[0] = v36;
    a6[2].f64[1] = v37;
    goto LABEL_14;
  }
  swift_endAccess();
  return swift_release();
}