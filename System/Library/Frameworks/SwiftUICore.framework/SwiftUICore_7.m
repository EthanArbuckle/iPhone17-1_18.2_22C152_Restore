void ScrollGeometry.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[4] = a1;
  v4[5] = a2;
  v4[6] = a3;
  v4[7] = a4;
}

uint64_t (*ScrollGeometry.contentInsets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.containerSize.getter()
{
  return *(double *)(v0 + 64);
}

float64x2_t (*ScrollGeometry.containerSize.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  return ScrollGeometry.containerSize.modify;
}

float64x2_t ScrollGeometry.containerSize.modify(uint64_t a1)
{
  uint64_t v1 = *(float64x2_t **)(a1 + 16);
  float64x2_t v2 = *(float64x2_t *)a1;
  float64x2_t v3 = v1[4];
  v1[4] = *(float64x2_t *)a1;
  float64x2_t result = vaddq_f64(vsubq_f64(v2, v3), v1[6]);
  v1[6] = result;
  return result;
}

void ScrollGeometry.visibleRect.setter(double a1, double a2, double a3, double a4)
{
  v4[10] = a1;
  v4[11] = a2;
  v4[12] = a3;
  v4[13] = a4;
}

uint64_t (*ScrollGeometry.visibleRect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScrollGeometry.bounds.getter()
{
  return *(double *)v0;
}

void ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10, uint64_t a11)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(void *)(a1 + 64) = a10;
  *(void *)(a1 + 72) = a11;
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = a10;
  *(void *)(a1 + 104) = a11;
}

Swift::Void __swiftcall ScrollGeometry.outsetForAX(limit:)(CGSize limit)
{
  float64x2_t v2 = v1[4];
  if (v2.f64[0] >= limit.width)
  {
    double v9 = v1[4].f64[0];
  }
  else
  {
    float64x2_t v3 = *v1;
    double v4 = vsubq_f64(*v1, v2).f64[0];
    if (v4 < 0.0) {
      double v4 = 0.0;
    }
    if (v4 >= v3.f64[0]) {
      double v4 = v1->f64[0];
    }
    v5.f64[1] = v1->f64[1];
    v5.f64[0] = v4;
    float64x2_t v6 = v1[6];
    float64x2_t v7 = vaddq_f64(v1[5], vsubq_f64(v5, v3));
    v1->f64[0] = v4;
    double v8 = v2.f64[0] + v3.f64[0] - v4;
    double v9 = limit.width - v3.f64[0];
    if (v2.f64[0] + v8 < v9) {
      double v9 = v2.f64[0] + v8;
    }
    if (v8 > v9) {
      double v9 = v8;
    }
    v1[4].f64[0] = v9;
    v10.f64[1] = v2.f64[1];
    v10.f64[0] = v8;
    float64x2_t v11 = vsubq_f64(v10, v2);
    float64x2_t v12 = vaddq_f64(v6, v11);
    v11.f64[0] = v9 - v8;
    v1[5] = v7;
    v1[6] = vaddq_f64(v12, v11);
  }
  if (v2.f64[1] < limit.height)
  {
    double v13 = v1->f64[0];
    double v14 = v1->f64[1];
    double v15 = v14 - v2.f64[1];
    if (v14 - v2.f64[1] < 0.0) {
      double v15 = 0.0;
    }
    if (v15 >= v14) {
      double v15 = v1->f64[1];
    }
    v1->f64[1] = v15;
    float64_t v16 = v1[5].f64[1] + v15 - v14;
    v1[5].f64[0] = v13 - v13 + v1[5].f64[0];
    v1[5].f64[1] = v16;
    double v17 = v2.f64[1] + v14 - v15;
    double v18 = v9 - v9 + v1[6].f64[0];
    double v19 = v17 - v2.f64[1] + v1[6].f64[1];
    double v20 = limit.height - v14;
    if (v2.f64[1] + v17 < v20) {
      double v20 = v2.f64[1] + v17;
    }
    if (v17 > v20) {
      double v20 = v2.f64[1] + v14 - v15;
    }
    v1[4].f64[0] = v9;
    v1[4].f64[1] = v20;
    v1[6].f64[0] = v9 - v9 + v18;
    v1[6].f64[1] = v19 + v20 - v17;
  }
}

uint64_t ScrollGeometry.debugDescription.getter()
{
  _StringGuts.grow(_:)(102);
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  v0._object = (void *)0x800000024621A530;
  String.append(_:)(v0);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v1._object = (void *)0xEE0020657A695374;
  String.append(_:)(v1);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x800000024621A550;
  v2._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._object = (void *)0x800000024621A570;
  v3._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x6C6269736976202CLL;
  v4._object = (void *)0xEE00207463655265;
  String.append(_:)(v4);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t ScrollGeometry.EdgeInsetDescription.debugDescription.getter()
{
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x6E696461656C202CLL;
  v1._object = (void *)0xEB00000000203A67;
  String.append(_:)(v1);
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x6D6F74746F62202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x696C69617274202CLL;
  v5._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x203A706F743CLL;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ScrollGeometry.EdgeInsetDescription()
{
  return ScrollGeometry.EdgeInsetDescription.debugDescription.getter();
}

double _ScrollLayout.contentOffset.getter()
{
  return *(double *)v0;
}

void _ScrollLayout.contentOffset.setter(double a1, double a2)
{
  *Swift::String v2 = a1;
  v2[1] = a2;
}

uint64_t (*_ScrollLayout.contentOffset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.size.getter()
{
  return *(double *)(v0 + 48);
}

void _ScrollLayout.size.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*_ScrollLayout.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.visibleRect.getter()
{
  return *(double *)(v0 + 64);
}

void _ScrollLayout.visibleRect.setter(double a1, double a2, double a3, double a4)
{
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = a4;
}

uint64_t (*_ScrollLayout.visibleRect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ScrollLayout.init(contentOffset:size:visibleRect:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(double *)(a1 + 48) = a4;
  *(double *)(a1 + 56) = a5;
  *(double *)(a1 + 64) = a6;
  *(double *)(a1 + 72) = a7;
  *(double *)(a1 + 80) = a8;
  *(double *)(a1 + 88) = a9;
  return result;
}

BOOL specialized static _ScrollLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48))))), 7uLL))) & 1) != 0&& CGRectEqualToRect(*(CGRect *)(a1 + 64), *(CGRect *)(a2 + 64));
}

__n128 sub_245A13320@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

float64x2_t sub_245A1332C(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = *a1;
  float64x2_t v3 = *a2;
  *a2 = *a1;
  float64x2_t result = vaddq_f64(vsubq_f64(v2, v3), a2[5]);
  a2[5] = result;
  return result;
}

__n128 sub_245A1334C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[4];
  *a2 = result;
  return result;
}

float64x2_t sub_245A13358(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2 = *a1;
  float64x2_t v3 = a2[4];
  a2[4] = *a1;
  float64x2_t result = vaddq_f64(vsubq_f64(v2, v3), a2[6]);
  a2[6] = result;
  return result;
}

ValueMetadata *type metadata accessor for _ScrollLayout()
{
  return &type metadata for _ScrollLayout;
}

void *type metadata accessor for ScrollGeometry.EdgeInsetDescription()
{
  return &unk_26FA4DAD0;
}

BOOL static Image.ResizingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Image.ResizingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Image.ResizingMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double Image.ResizingInfo.capInsets.getter()
{
  return *(double *)v0;
}

void Image.ResizingInfo.capInsets.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Image.ResizingInfo.capInsets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.ResizingInfo.mode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *Image.ResizingInfo.mode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*Image.ResizingInfo.mode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double one-time initialization function for resizable()
{
  double result = 0.0;
  static Image.ResizingInfo.resizable = 0u;
  xmmword_268EEEF70 = 0u;
  byte_268EEEF80 = 1;
  return result;
}

char *Image.ResizingInfo.init(capInsets:mode:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6 = *result;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

double static Image.ResizingInfo.resizable.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for resizable != -1) {
    swift_once();
  }
  char v2 = byte_268EEEF80;
  double result = *(double *)&static Image.ResizingInfo.resizable;
  long long v4 = xmmword_268EEEF70;
  *(_OWORD *)a1 = static Image.ResizingInfo.resizable;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t Image.ResizableProvider.base.getter()
{
  return swift_retain();
}

uint64_t Image.ResizableProvider.base.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*Image.ResizableProvider.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.ResizableProvider.capInsets.getter()
{
  return *(double *)(v0 + 8);
}

void Image.ResizableProvider.capInsets.setter(double a1, double a2, double a3, double a4)
{
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*Image.ResizableProvider.capInsets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.ResizableProvider.resizingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

unsigned char *Image.ResizableProvider.resizingMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 40) = *result;
  return result;
}

uint64_t (*Image.ResizableProvider.resizingMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 Image.ResizableProvider.resolve(in:)@<Q0>(uint64_t a1@<X8>)
{
  long long v7 = *(_OWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  (*(void (**)(void))(**(void **)v1 + 80))();
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = v5;
  Image.Resolved.image.didset();
  return result;
}

uint64_t Image.ResizableProvider.resolveNamedImage(in:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.ResizableProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

void Image.ResizingInfo.encode(to:)()
{
  double v1 = *(double *)v0;
  double v2 = *(double *)(v0 + 8);
  double v3 = *(double *)(v0 + 16);
  double v4 = *(double *)(v0 + 24);
  if (*(unsigned char *)(v0 + 32) != 1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  if (v1 != 0.0 || v2 != 0.0 || v3 != 0.0 || v4 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(v1, v2, v3, v4);
  }
}

unint64_t Image.ResizingInfo.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3 = (void *)result;
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (one-time initialization token for resizable != -1) {
    __n128 result = swift_once();
  }
  long long v22 = xmmword_268EEEF70;
  long long v23 = static Image.ResizingInfo.resizable;
  char v5 = byte_268EEEF80;
  char v24 = byte_268EEEF80;
  unint64_t v6 = v3[1];
  unint64_t v7 = v3[2];
  if (v6 >= v7)
  {
LABEL_49:
    v3[3] = 0;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v22;
    *(unsigned char *)(a2 + 32) = v5;
    return result;
  }
  while (1)
  {
    __n128 result = v3[3];
    if (result)
    {
      unint64_t v9 = v3[4];
      if (v6 < v9) {
        goto LABEL_14;
      }
      if (v9 < v6) {
        goto LABEL_47;
      }
      v3[3] = 0;
    }
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_47;
    }
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_47;
          }
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_54;
          }
          unint64_t v10 = v3[1] + result;
          if (v7 < v10) {
            goto LABEL_47;
          }
          v3[3] = 8;
          v3[4] = v10;
        }
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        char v24 = result != 1;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              goto LABEL_7;
            }
            return result;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            if (v7 < v8) {
              goto LABEL_47;
            }
            goto LABEL_6;
          case 2uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_55;
            }
            unint64_t v8 = v3[1] + result;
            if (v7 < v8) {
              goto LABEL_47;
            }
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            if (v7 < v8) {
              goto LABEL_47;
            }
            goto LABEL_6;
          default:
            goto LABEL_47;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_47;
    }
    float64x2_t v11 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float64x2_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    }
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1) {
      float64x2_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
    }
    v11[2] = v13 + 1;
    v11[v13 + 4] = v7;
    v3[5] = v11;
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v14 = v3[1] + result;
    if (v7 < v14) {
      goto LABEL_47;
    }
    v3[2] = v14;
    long long v26 = 0u;
    long long v27 = 0u;
    closure #1 in EdgeInsets.init(from:)((unint64_t)&v26, v3, &v25);
    double v15 = (void *)v3[5];
    if (!v15[2]) {
      goto LABEL_53;
    }
    long long v22 = v27;
    long long v23 = v26;
    __n128 result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v16 = v15[2];
      if (!v16) {
        goto LABEL_46;
      }
    }
    else
    {
      __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      double v15 = (void *)result;
      uint64_t v16 = *(void *)(result + 16);
      if (!v16)
      {
LABEL_46:
        __break(1u);
LABEL_47:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    uint64_t v17 = v16 - 1;
    uint64_t v18 = v15[v17 + 4];
    v15[2] = v17;
    v3[5] = v15;
    v3[2] = v18;
LABEL_7:
    unint64_t v6 = v3[1];
    unint64_t v7 = v3[2];
    if (v6 >= v7)
    {
      char v5 = v24;
      goto LABEL_49;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  __break(1u);
  __n128 result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v21 = *(void *)(result + 16);
  if (!v21) {
    __break(1u);
  }
  uint64_t v19 = v21 - 1;
  uint64_t v20 = *(void *)(result + 8 * v19 + 32);
  *(void *)(result + 16) = v19;
  v3[5] = result;
  v3[2] = v20;
  return result;
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.ResizingInfo()
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.ResizingInfo@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Image.ResizingInfo.init(from:)(a1, a2);
}

uint64_t Image.ResizingMode.protobufValue.getter()
{
  return ~*v0 & 1;
}

uint64_t Image.ResizingMode.init(protobufValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2 * (result != 1);
  if (!result) {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Image.ResizingMode()
{
  return ~*v0 & 1;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.ResizingMode@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2 * (result != 1);
  if (!result) {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(double a1, double a2, double a3, double a4)
{
  v14[4] = *(double *)MEMORY[0x263EF8340];
  uint64_t v9 = v4[1];
  unint64_t v10 = (void *)v4[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  v10[2] = v12 + 1;
  v10[v12 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1)) {
    __break(1u);
  }
  v4[1] = v9 + 1;
  v14[0] = a1;
  v14[1] = a2;
  v14[2] = a3;
  v14[3] = a4;
  closure #1 in EdgeInsets.encode(to:)(v14, v4);
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(Swift::UInt a1, Swift::UInt a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v6 = *(void **)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    unint64_t v6 = (void *)result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    unint64_t v6 = (void *)result;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(void *)(v2 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 8) = v5 + 1;
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if (a2)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(a2);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  double v4 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    double v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    double v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(void *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::UInt v8 = HIDWORD(a1);
    *(void *)(v1 + 8) = v3 + 1;
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if (v8)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(v8);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

void specialized ProtobufEncoder.encodeMessage<A>(_:)(void *a1, uint64_t a2, int a3)
{
  uint64_t v8 = v3[1];
  unint64_t v9 = (void *)v3[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  v9[2] = v11 + 1;
  v9[v11 + 4] = v8;
  v3[3] = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_19:
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    goto LABEL_8;
  }
  v3[1] = v8 + 1;
  if ((a3 & 0x10000) != 0)
  {
    outlined copy of AccessibilityText.Storage(a1, a2, a3 & 1);
    specialized ProtobufEncoder.messageField<A>(_:_:)(3);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 1);
    if (v4) {
      return;
    }
    goto LABEL_16;
  }
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v8 = v3[1];
  unint64_t v9 = (void *)v3[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_19;
  }
LABEL_8:
  unint64_t v13 = v9[2];
  unint64_t v12 = v9[3];
  if (v13 >= v12 >> 1) {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v9);
  }
  v9[2] = v13 + 1;
  v9[v13 + 4] = v8;
  v3[3] = v9;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  v3[1] = v8 + 1;
  CodableResolvedStyledText.encode(to:)(v3, (uint64_t)a1);
  if (v4)
  {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 0);
    return;
  }
  ProtobufEncoder.endLengthDelimited()();
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(a1, a2, a3, 0);
LABEL_16:
  ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[1];
  unint64_t v6 = (void *)v2[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    unint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    unint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v2[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v2[1] = v5 + 1;
  if (!a1) {
    goto LABEL_11;
  }
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  uint64_t v10 = v2[1];
  int64_t isUniquelyReferenced_nonNull_native = v10 + 8;
  if (__OFADD__(v10, 8)) {
    goto LABEL_18;
  }
  if (v2[2] < isUniquelyReferenced_nonNull_native)
  {
LABEL_19:
    unint64_t v11 = (void *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
    goto LABEL_10;
  }
  v2[1] = isUniquelyReferenced_nonNull_native;
  unint64_t v11 = (void *)(*v2 + v10);
LABEL_10:
  *unint64_t v11 = a1;
LABEL_11:
  if (a2)
  {
    ProtobufEncoder.encodeVarint(_:)(0x11uLL);
    uint64_t v12 = v2[1];
    int64_t v13 = v12 + 8;
    if (__OFADD__(v12, 8))
    {
      __break(1u);
    }
    else if (v2[2] >= v13)
    {
      v2[1] = v13;
      unint64_t v14 = (void *)(*v2 + v12);
LABEL_15:
      *unint64_t v14 = a2;
      return ProtobufEncoder.endLengthDelimited()();
    }
    unint64_t v14 = (void *)ProtobufEncoder.growBufferSlow(to:)(v13);
    goto LABEL_15;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = v2[1];
  unint64_t v8 = (void *)v2[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  v4[3] = v8;
  if (__OFADD__(v7, 1)) {
    __break(1u);
  }
  v4[1] = v7 + 1;
  uint64_t v11 = v4[2];
  uint64_t v12 = v4[4];
  *(void *)&into.state.h0 = *v4;
  *(void *)&into.state.h2 = v7 + 1;
  *(void *)&into.state.CC_LONG h4 = v11;
  *(void *)&into.state.Nh = v8;
  *(void *)&into.state.data[1] = v12;
  uint64_t v13 = ProtobufEncoder.archiveWriter.getter();
  if (!v13)
  {
    ProtobufEncoder.dataField(_:_:)(2, a1, a2);
    return ProtobufEncoder.endLengthDelimited()();
  }
  uint64_t v14 = v13;
  memset(&c, 0, sizeof(c));
  outlined copy of Data._Representation(a1, a2);
  CC_SHA1_Init(&c);
  into.state = c;
  Data.hash(into:)(&into);
  memset(&c, 0, 20);
  CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
  outlined consume of Data._Representation(a1, a2);
  CC_LONG h4 = c.h4;
  uint64_t v17 = *(void *)&c.h0;
  uint64_t v16 = *(void *)&c.h2;
  swift_beginAccess();
  uint64_t v18 = specialized Collection<>.firstIndex(of:)(v17, v16, h4, *(void *)(v14 + 32));
  if (v19)
  {
    *(void *)&c.h0 = v17;
    *(void *)&c.h2 = v16;
    c.CC_LONG h4 = h4;
    LOBYTE(c.Nl) = 0;
    outlined copy of Data._Representation(a1, a2);
    Swift::UInt v20 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&c.h0, (const char *)v14, a1, a2);
    outlined consume of Data._Representation(a1, a2);
    if (v3) {
      return swift_release();
    }
  }
  else
  {
    Swift::UInt v20 = v18;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v20);
    swift_release();
    return ProtobufEncoder.endLengthDelimited()();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(float a1, float a2, float a3, float a4)
{
  uint64_t v9 = v4[1];
  unint64_t v10 = (void *)v4[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    unint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    unint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v4[1] = v9 + 1;
  if (a1 == 0.0)
  {
    if (a2 == 0.0) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  ProtobufEncoder.encodeVarint(_:)(0xDuLL);
  uint64_t v14 = v4[1];
  int64_t isUniquelyReferenced_nonNull_native = v14 + 4;
  if (__OFADD__(v14, 4)) {
    goto LABEL_29;
  }
  if (v4[2] >= isUniquelyReferenced_nonNull_native)
  {
    v4[1] = isUniquelyReferenced_nonNull_native;
    double v15 = (float *)(*v4 + v14);
    goto LABEL_13;
  }
LABEL_30:
  double v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_13:
  *double v15 = a1;
  if (a2 == 0.0)
  {
LABEL_8:
    if (a3 == 0.0) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_14:
  ProtobufEncoder.encodeVarint(_:)(0x15uLL);
  uint64_t v16 = v4[1];
  int64_t v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
  }
  else if (v4[2] >= v17)
  {
    v4[1] = v17;
    uint64_t v18 = (float *)(*v4 + v16);
    goto LABEL_17;
  }
  uint64_t v18 = (float *)ProtobufEncoder.growBufferSlow(to:)(v17);
LABEL_17:
  *uint64_t v18 = a2;
  if (a3 == 0.0) {
    goto LABEL_22;
  }
LABEL_18:
  ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
  uint64_t v19 = v4[1];
  int64_t v20 = v19 + 4;
  if (__OFADD__(v19, 4))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v4[2] < v20)
  {
LABEL_34:
    uint64_t v21 = (float *)ProtobufEncoder.growBufferSlow(to:)(v20);
    goto LABEL_21;
  }
  v4[1] = v20;
  uint64_t v21 = (float *)(*v4 + v19);
LABEL_21:
  *uint64_t v21 = a3;
LABEL_22:
  if (a4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    uint64_t v22 = v4[1];
    int64_t v23 = v22 + 4;
    if (__OFADD__(v22, 4))
    {
      __break(1u);
    }
    else if (v4[2] >= v23)
    {
      v4[1] = v23;
      uint64_t v24 = (float *)(*v4 + v22);
LABEL_26:
      *uint64_t v24 = a4;
      return ProtobufEncoder.endLengthDelimited()();
    }
    uint64_t v24 = (float *)ProtobufEncoder.growBufferSlow(to:)(v23);
    goto LABEL_26;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = v1[1];
  unint64_t v6 = (void *)v1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    unint64_t v6 = (void *)result;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    unint64_t v6 = (void *)result;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v3[3] = v6;
  BOOL v10 = __OFADD__(v5, 1);
  uint64_t v11 = v5 + 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v3[1] = v11;
    int Identifier = CGImageGetIdentifier();
    uint64_t v13 = v3[2];
    uint64_t v14 = v3[4];
    v16[4] = *v3;
    v16[5] = v11;
    v16[6] = v13;
    v16[7] = v6;
    v16[8] = v14;
    ProtobufEncoder.archiveHost.getter((uint64_t)v17);
    MEMORY[0x270FA5388](v15);
    v16[2] = v17;
    v16[3] = a1;
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:encoder:)(Identifier, (void (*)(void))partial apply for closure #1 in CodableCGImage.encode(to:), (unint64_t)v16);
    uint64_t result = outlined destroy of AnyArchivedViewHost?((uint64_t)v17);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  void *v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  long long v7;
  long long v8;
  _OWORD v10[4];
  uint64_t v11;
  uint64_t v12;

  unint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  uint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1)) {
    __break(1u);
  }
  v1[1] = v3 + 1;
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v7;
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v8 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v8;
  closure #1 in ProjectionTransform.encode(to:)((double *)v10, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  uint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(void *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 8) = v3 + 1;
    if ((a1 & 0x10000000000) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(a1);
    }
    if ((a1 & 0x100000000) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  uint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  *(void *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  *(void *)(v1 + 8) = v3 + 1;
  if ((a1 & 0x80000000) != 0)
  {
LABEL_11:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(8uLL);
  ProtobufEncoder.encodeVarint(_:)(a1);
  if ((a1 & 0x100000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  return ProtobufEncoder.endLengthDelimited()();
}

{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  double v13;
  unint64_t v14;
  unint64_t v15;

  uint64_t v5 = v1;
  uint64_t v7 = *(void *)(v1 + 8);
  unint64_t v8 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  BOOL v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(void *)(v5 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
LABEL_14:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
    goto LABEL_9;
  }
  *(void *)(v5 + 8) = v7 + 1;
  (*(void (**)(void))(*(void *)a1 + 96))();
  uint64_t v11 = specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  if (v2) {
    return swift_unknownObjectRelease();
  }
  uint64_t v3 = (*(double (**)(uint64_t))(*(void *)a1 + 88))(v11);
  uint64_t v4 = v13;
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v7 = *(void *)(v5 + 8);
  unint64_t v8 = *(void **)(v5 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v15 = v8[2];
  uint64_t v14 = v8[3];
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  v8[2] = v15 + 1;
  v8[v15 + 4] = v7;
  *(void *)(v5 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 8) = v7 + 1;
    CGSize.encode(to:)((double *)v5, v3, v4);
    ProtobufEncoder.endLengthDelimited()();
    swift_unknownObjectRelease();
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  uint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    uint64_t v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v1 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 8) = v4 + 1;
    if ((*(unsigned char *)(a1 + 32) & 1) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    unint64_t v9 = *(double *)a1;
    BOOL v10 = *(double *)(a1 + 8);
    uint64_t v11 = *(double *)(a1 + 16);
    unint64_t v12 = *(double *)(a1 + 24);
    if (*(double *)a1 == 0.0 && v10 == 0.0 && v11 == 0.0 && v12 == 0.0) {
      return ProtobufEncoder.endLengthDelimited()();
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v9, v10, v11, v12);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, EllipticalGradient._Paint.encode(to:));
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, AngularGradient._Paint.encode(to:));
}

{
  return specialized ProtobufEncoder.encodeMessage<A>(_:)(a1, RadialGradient._Paint.encode(to:));
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, float a2)
{
  uint64_t v5 = v2[1];
  unint64_t v6 = (void *)v2[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    unint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    unint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  v2[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2[1] = v5 + 1;
  if (a1)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(a1);
  }
  if ((a1 & 0x100000000) == 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(0);
  }
  if (a2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v10 = v2[1];
    int64_t isUniquelyReferenced_nonNull_native = v10 + 4;
    if (!__OFADD__(v10, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        uint64_t v11 = (float *)(*v2 + v10);
LABEL_14:
        *uint64_t v11 = a2;
        return ProtobufEncoder.endLengthDelimited()();
      }
LABEL_18:
      uint64_t v11 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_14;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(_OWORD *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1)) {
    __break(1u);
  }
  v1[1] = v3 + 1;
  long long v7 = a1[3];
  v10[2] = a1[2];
  v10[3] = v7;
  v10[4] = a1[4];
  long long v8 = a1[1];
  v10[0] = *a1;
  v10[1] = v8;
  closure #1 in _ColorMatrix.encode(to:)((float *)v10, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

{
  void *v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  long long v7;
  _OWORD v9[3];
  uint64_t v10;

  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v1[3] = v4;
  if (__OFADD__(v3, 1)) {
    __break(1u);
  }
  v1[1] = v3 + 1;
  long long v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[2] = a1[2];
  closure #1 in CGAffineTransform.encode(to:)((double *)v9, v1);
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(int a1, unint64_t a2, char a3, float a4)
{
  uint64_t v9 = v4[1];
  uint64_t v10 = (void *)v4[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    uint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    uint64_t v10 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v10[2] = v13 + 1;
  v10[v13 + 4] = v9;
  v4[3] = v10;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  v4[1] = v9 + 1;
  if (a4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v14 = v4[1];
    int64_t v15 = v14 + 4;
    if (__OFADD__(v14, 4))
    {
      __break(1u);
    }
    else if (v4[2] >= v15)
    {
      v4[1] = v15;
      uint64_t v16 = (float *)(*v4 + v14);
      goto LABEL_12;
    }
    uint64_t v16 = (float *)ProtobufEncoder.growBufferSlow(to:)(v15);
LABEL_12:
    *uint64_t v16 = a4;
    if (a2) {
      goto LABEL_18;
    }
    goto LABEL_13;
  }
  if (a2) {
    goto LABEL_18;
  }
LABEL_13:
  if ((a1 & 0x7FFFFFFF) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v17 = v4[1];
    int64_t isUniquelyReferenced_nonNull_native = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      if (v4[2] >= isUniquelyReferenced_nonNull_native)
      {
        v4[1] = isUniquelyReferenced_nonNull_native;
        uint64_t v18 = (_DWORD *)(*v4 + v17);
LABEL_17:
        *uint64_t v18 = a1;
        goto LABEL_18;
      }
LABEL_27:
      uint64_t v18 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_17;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_18:
  if ((a3 & 1) == 0)
  {
    unint64_t v19 = HIDWORD(a2);
    if ((v19 & 0x7FFFFFFF) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
      uint64_t v20 = v4[1];
      int64_t v21 = v20 + 4;
      if (__OFADD__(v20, 4))
      {
        __break(1u);
      }
      else if (v4[2] >= v21)
      {
        v4[1] = v21;
        uint64_t v22 = (_DWORD *)(*v4 + v20);
LABEL_23:
        *uint64_t v22 = v19;
        return ProtobufEncoder.endLengthDelimited()();
      }
      uint64_t v22 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v21);
      goto LABEL_23;
    }
  }
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(double a1, double a2, double a3)
{
  uint64_t v7 = *(void *)(v3 + 8);
  long long v8 = *(void **)(v3 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    long long v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  *(void *)(v3 + 8) = v7 + 1;
  if (a1 == 0.0) {
    goto LABEL_11;
  }
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  uint64_t v11 = *(void *)(v3 + 8);
  int64_t isUniquelyReferenced_nonNull_native = v11 + 8;
  if (__OFADD__(v11, 8)) {
    goto LABEL_19;
  }
  if (*(void *)(v3 + 16) < isUniquelyReferenced_nonNull_native) {
    goto LABEL_20;
  }
  *(void *)(v3 + 8) = isUniquelyReferenced_nonNull_native;
  for (i = (double *)(*(void *)v3 + v11);
        ;
        i = (double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native))
  {
    double *i = a1;
LABEL_11:
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v7 = *(void *)(v3 + 8);
    long long v8 = *(void **)(v3 + 24);
    int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_17:
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      long long v8 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v15 = v8[2];
    unint64_t v14 = v8[3];
    if (v15 >= v14 >> 1)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
      long long v8 = (void *)isUniquelyReferenced_nonNull_native;
    }
    v8[2] = v15 + 1;
    v8[v15 + 4] = v7;
    *(void *)(v3 + 24) = v8;
    if (!__OFADD__(v7, 1)) {
      break;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    ;
  }
  *(void *)(v3 + 8) = v7 + 1;
  CGPoint.encode(to:)((double *)v3, a2, a3);
  ProtobufEncoder.endLengthDelimited()();
  return ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    uint64_t v3 = (void *)result;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
    uint64_t v3 = (void *)result;
  }
  v3[2] = v6 + 1;
  v3[v6 + 4] = v2;
  *(void *)(v0 + 24) = v3;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 8) = v2 + 1;
    if (!Locale.identifier.getter() && v7 == 0xE000000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (ProtobufEncoder.stringFieldAlways(_:_:)(1), !v1))
    {
      swift_bridgeObjectRelease();
      return ProtobufEncoder.endLengthDelimited()();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 + 8);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  uint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(void *)(v2 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 8) = v3 + 1;
    uint64_t result = LinearGradient._Paint.encode(to:)(v2);
    if (!v1) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  uint64_t v2 = v0;
  uint64_t v3 = v0[1];
  uint64_t v4 = (void *)v0[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  uint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  v2[3] = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v2[1] = v3 + 1;
    uint64_t result = ImagePaint._Paint.encode(to:)(v2);
    if (!v1) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(__int16 a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(void *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 8) = v3 + 1;
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((a1 & 0x100) != 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  unint64_t v7 = v4[2];
  unint64_t v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v4);
    uint64_t v4 = (void *)result;
  }
  v4[2] = v7 + 1;
  v4[v7 + 4] = v3;
  *(void *)(v1 + 24) = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + 8) = v3 + 1;
    if (a1)
    {
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
    if ((a1 & 0x100) == 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x10uLL);
      ProtobufEncoder.encodeVarint(_:)(0);
    }
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

uint64_t specialized ProtobufEncoder.encodeMessage<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = v2;
  uint64_t v6 = *(void *)(v2 + 8);
  unint64_t v7 = *(void **)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  *(void *)(v5 + 24) = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 8) = v6 + 1;
    uint64_t result = a2(v5);
    if (!v3) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x270F9DBA0]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = result + 1;
  *(void *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return outlined init with take of Text.Effect.PathInterpolator.Glyph(a2, v3 + 120 * a1 + 32);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, double a2, double a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(double *)(v5 + 32) = a2;
  *(double *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v3 = v1[2];
    if (v3)
    {
LABEL_3:
      uint64_t v4 = v3 - 1;
      uint64_t result = v1[v4 + 4];
      v1[2] = v4;
      *uint64_t v0 = v1;
      return result;
    }
  }
  else
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = (void *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static Image.ResizingInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))))return (*(unsigned __int8 *)(a2 + 32) ^ *(unsigned __int8 *)(a1 + 32) ^ 1) & 1; {
  else
  }
    return 0;
}

unint64_t lazy protocol witness table accessor for type Image.ResizingMode and conformance Image.ResizingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode;
  if (!lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizingMode and conformance Image.ResizingMode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Image.ResizingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A162DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Image.ResizingInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.ResizingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizingInfo()
{
  return &type metadata for Image.ResizingInfo;
}

uint64_t initializeWithCopy for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Image.ResizableProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.ResizableProvider(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.ResizableProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizableProvider()
{
  return &type metadata for Image.ResizableProvider;
}

void outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(void *a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    outlined consume of AccessibilityText.Storage(a1, a2, a3 & 1);
  }
  else {
    swift_release();
  }
}

void partial apply for closure #1 in CodableCGImage.encode(to:)(CGDataConsumer *a1)
{
  closure #1 in CodableCGImage.encode(to:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined destroy of AnyArchivedViewHost?(uint64_t a1)
{
  type metadata accessor for AnyArchivedViewHost?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AnyArchivedViewHost?()
{
  if (!lazy cache variable for type metadata for AnyArchivedViewHost?)
  {
    type metadata accessor for AnyArchivedViewHost();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost?);
    }
  }
}

unint64_t type metadata accessor for AnyArchivedViewHost()
{
  unint64_t result = lazy cache variable for type metadata for AnyArchivedViewHost;
  if (!lazy cache variable for type metadata for AnyArchivedViewHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyArchivedViewHost);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t outlined init with take of Text.Effect.PathInterpolator.Glyph(uint64_t a1, uint64_t a2)
{
  return a2;
}

double EnvironmentValues.defaultPadding.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    double v2 = specialized closure #1 in PropertyList.subscript.getter(v3);
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.defaultPadding.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *v4;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v4, a1, a2, a3, a4);
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.defaultPadding.modify(double **a1))(double **a1)
{
  uint64_t v3 = (double *)malloc(0x48uLL);
  *a1 = v3;
  *((void *)v3 + 7) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_release_n();
  }
  else
  {
    uint64_t v12 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v12);
    uint64_t v7 = v13;
    uint64_t v9 = v14;
    uint64_t v11 = v15;
  }
  swift_release_n();
  v3[8] = 0.0;
  *uint64_t v3 = v5;
  *((void *)v3 + 1) = v7;
  *((void *)v3 + 2) = v9;
  *((void *)v3 + 3) = v11;
  return EnvironmentValues.defaultPadding.modify;
}

void EnvironmentValues.defaultPadding.modify(double **a1)
{
  uint64_t v1 = *a1;
  double v2 = (uint64_t *)*((void *)*a1 + 7);
  double v4 = **a1;
  double v3 = (*a1)[1];
  double v6 = (*a1)[2];
  double v5 = (*a1)[3];
  uint64_t v7 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3, v6, v5);
  swift_release();
  if (v2[1])
  {
    uint64_t v8 = **((void **)v1 + 7);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultPaddingKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static DefaultPaddingKey.defaultValue;
  long long v3 = *(_OWORD *)&qword_26B0E8938;
  *a1 = static DefaultPaddingKey.defaultValue;
  a1[1] = v3;
  return result;
}

uint64_t View._ignoresAutomaticPadding(_:)(char a1, uint64_t a2)
{
  char v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for IgnoresAutomaticPaddingLayout);
}

uint64_t View._automaticPadding(_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of EdgeInsets?(a1, (uint64_t)v6);
  v4[0] = v6[0];
  v4[1] = v6[1];
  char v5 = v7;
  return View.modifier<A>(_:)(v4, a2, &type metadata for AutomaticPaddingViewModifier);
}

uint64_t protocol witness for UnaryLayout.layoutPriority(child:) in conformance IgnoresAutomaticPaddingLayout()
{
  LayoutProxy.layoutComputer.getter(&v2);
  uint64_t v0 = v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    (*(void (**)(void))(*(void *)v0 + 88))();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for UnaryLayout.ignoresAutomaticPadding(child:) in conformance IgnoresAutomaticPaddingLayout()
{
  return *v0;
}

uint64_t static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v10 = v5;
  long long v11 = *(_OWORD *)(a1 + 64);
  int v12 = *(_DWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  if ((BYTE4(v9) & 0x22) == 0) {
    return a2();
  }
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>();
  lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout();
  Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  return specialized static ModifiedContent<>._makeView(modifier:inputs:body:)((uint64_t)v8, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))a2, a3);
}

uint64_t closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 8);
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  int v10 = *((_DWORD *)a1 + 20);
  int v11 = *((_DWORD *)a1 + 9) | 2;
  uint64_t v17 = *a1;
  int v18 = v5;
  uint64_t v19 = v6;
  uint64_t v20 = a1[3];
  int v21 = v7;
  int v22 = v11;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  long long v25 = *(_OWORD *)(a1 + 7);
  uint64_t v26 = a1[9];
  int v27 = v10;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v12 = swift_bridgeObjectRetain_n();
  a2(&v28, v12, &v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v28;
  int v14 = v29;
  int v15 = v30;
  AGGraphMutateAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a3 = v13;
  *(_DWORD *)(a3 + 8) = v14;
  *(_DWORD *)(a3 + 12) = v15;
  return result;
}

uint64_t AutomaticPaddingViewModifier.PaddingLayout.value.getter@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == a1) {
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)AGGraphGetValue();
  uint64_t v4 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    char v5 = (*(uint64_t (**)(void))(*(void *)v3 + 96))();
    swift_release();
    double v6 = 0.0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v5)
    {
LABEL_15:
      type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
      uint64_t result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_2461B9DC0;
      *(void *)(result + 32) = 1;
      *(double *)(result + 40) = v6;
      *(void *)(result + 48) = v7;
      *(void *)(result + 56) = v8;
      *(void *)(result + 64) = v9;
      *(unsigned char *)a2 = 15;
      *(double *)(a2 + 8) = v6;
      *(void *)(a2 + 16) = v7;
      *(void *)(a2 + 24) = v8;
      *(void *)(a2 + 32) = v9;
      *(unsigned char *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = result;
      *(void *)(a2 + 56) = 1;
      return result;
    }
LABEL_9:
    uint64_t Value = AGGraphGetValue();
    if (*(unsigned char *)(Value + 32))
    {
      int v11 = (uint64_t *)AGGraphGetValue();
      uint64_t v12 = *v11;
      if (v11[1])
      {
        swift_retain_n();
        swift_retain_n();
        double v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
        uint64_t v7 = v13;
        uint64_t v8 = v14;
        uint64_t v9 = v15;
        swift_release_n();
      }
      else
      {
        uint64_t v16 = swift_retain_n();
        double v6 = specialized closure #1 in PropertyList.subscript.getter(v16);
        uint64_t v7 = v17;
        uint64_t v8 = v18;
        uint64_t v9 = v19;
      }
      swift_release_n();
    }
    else
    {
      uint64_t v8 = *(void *)(Value + 16);
      uint64_t v9 = *(void *)(Value + 24);
      double v6 = *(double *)Value;
      uint64_t v7 = *(void *)(Value + 8);
    }
    goto LABEL_15;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  long long v3 = v2[1];
  long long v13 = *v2;
  v14[0] = v3;
  *(_OWORD *)((char *)v14 + 9) = *(long long *)((char *)v2 + 25);
  int v4 = *((_DWORD *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 48);
  uint64_t v8 = *a1;
  int v9 = v4;
  long long v6 = *((_OWORD *)a1 + 2);
  long long v10 = *((_OWORD *)a1 + 1);
  long long v11 = v6;
  char v12 = v5;
  return _PaddingLayout.placement(of:in:)((int *)&v8, a2);
}

uint64_t protocol witness for UnaryLayout.sizeThatFits(in:context:child:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = v3[1];
  long long v19 = *v3;
  v20[0] = v4;
  *(_OWORD *)((char *)v20 + 9) = *(long long *)((char *)v3 + 25);
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  int v8 = *((_DWORD *)a2 + 2);
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v15 = *a1;
  char v16 = v5;
  uint64_t v17 = v6;
  char v18 = v7;
  uint64_t v13 = *a2;
  int v14 = v8;
  uint64_t v11 = *(void *)a3;
  int v12 = v9;
  return _PaddingLayout.sizeThatFits(in:context:child:)((uint64_t)&v15, (uint64_t)&v13, &v11);
}

double protocol witness for static Rule.initialValue.getter in conformance AutomaticPaddingViewModifier.PaddingLayout@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AutomaticPaddingViewModifier.PaddingLayout@<X0>(uint64_t a1@<X8>)
{
  return AutomaticPaddingViewModifier.PaddingLayout.value.getter(*(_DWORD *)(v1 + 8), a1);
}

uint64_t sub_245A17448()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_245A1745C()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)double result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AutomaticPaddingViewModifier()
{
  return &type metadata for AutomaticPaddingViewModifier;
}

unsigned char *storeEnumTagSinglePayload for IgnoresAutomaticPaddingLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A1759CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IgnoresAutomaticPaddingLayout()
{
  return &type metadata for IgnoresAutomaticPaddingLayout;
}

unint64_t instantiation function for generic protocol witness table for IgnoresAutomaticPaddingLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout;
  if (!lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout;
  if (!lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout);
  }
  return result;
}

void type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultPaddingKey()
{
  return &type metadata for DefaultPaddingKey;
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void *type metadata accessor for AutomaticPaddingViewModifier.PaddingLayout()
{
  return &unk_26FA705F0;
}

uint64_t getEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
  return &type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
}

unint64_t instantiation function for generic protocol witness table for AutomaticPaddingViewModifier.PaddingLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout and conformance AutomaticPaddingViewModifier.PaddingLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout;
  if (!lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout);
  }
  return result;
}

uint64_t ZStack._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ZStack._tree.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ZStack._tree.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ZStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static _ZStackLayout._makeView(root:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  long long v17 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v10 = a2[9];
  int v11 = *((_DWORD *)a2 + 20);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int v12 = static CoreGlue.shared;
  int v27 = v6;
  uint64_t v19 = v7;
  int v20 = v8;
  uint64_t v21 = v9;
  long long v22 = v18;
  long long v23 = v17;
  long long v24 = v16;
  uint64_t v25 = v10;
  int v26 = v11;
  uint64_t v13 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, ValueMetadata *, unint64_t))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0xB0);
  unint64_t v14 = lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
  id v15 = v12;
  v13(&v27, &v19, a3, a4, &type metadata for _ZStackLayout, v14);
}

void static _ZStackLayout.layoutProperties.getter(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10, unint64_t a11, unint64_t a12)
{
  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4, a10, a11, a12);
}

uint64_t static _ZStackLayout.implicitRoot.getter()
{
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  return static Alignment.center;
}

uint64_t ZStackLayout.alignment.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*ZStackLayout.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AttributeTracker.AnyValue, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  char v6 = a2;
  int v29 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int v27 = (void *)(v5 + 64);
    uint64_t v8 = -1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    unint64_t v9 = v8 & *(void *)(v5 + 64);
    uint64_t v25 = v2;
    int64_t v26 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v11 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v12 = v11 | (v10 << 6);
      }
      else
      {
        int64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return;
        }
        if (v13 >= v26) {
          goto LABEL_22;
        }
        unint64_t v14 = v27[v13];
        ++v10;
        if (!v14)
        {
          int64_t v10 = v13 + 1;
          if (v13 + 1 >= v26) {
            goto LABEL_22;
          }
          unint64_t v14 = v27[v10];
          if (!v14)
          {
            int64_t v15 = v13 + 2;
            if (v15 >= v26)
            {
LABEL_22:
              swift_release();
              uint64_t v3 = v25;
              if (v6)
              {
                uint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 > 63) {
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v27 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v14 = v27[v15];
            if (!v14)
            {
              while (1)
              {
                int64_t v10 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_29;
                }
                if (v10 >= v26) {
                  goto LABEL_22;
                }
                unint64_t v14 = v27[v10];
                ++v15;
                if (v14) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v10 = v15;
          }
        }
LABEL_19:
        unint64_t v9 = (v14 - 1) & v14;
        unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
      }
      uint64_t v16 = *(void *)(v5 + 48) + 56 * v12;
      uint64_t v17 = *(void *)v16;
      long long v18 = *(_OWORD *)(v16 + 8);
      uint64_t v19 = *(void *)(v16 + 24);
      char v20 = *(unsigned char *)(v16 + 32);
      uint64_t v21 = *(void *)(v16 + 40);
      char v22 = *(unsigned char *)(v16 + 48);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
      if ((v6 & 1) == 0)
      {
        long long v28 = *(_OWORD *)(v16 + 8);
        swift_retain();
        long long v18 = v28;
      }
      uint64_t v30 = v17;
      long long v31 = v18;
      uint64_t v32 = v19;
      char v33 = v20;
      uint64_t v34 = v21;
      char v35 = v22;
      specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)&v30, v23, v29);
    }
  }
  swift_release();
  *uint64_t v3 = v29;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7 = v6;
  uint64_t v9 = *v6;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, a3, a4);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = result;
  if (*(void *)(v9 + 16))
  {
    char v36 = a2;
    int64_t v12 = 0;
    v37 = (void *)(v9 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v9 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & *(void *)(v9 + 64);
    int64_t v16 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v12 << 6);
      }
      else
      {
        int64_t v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v9 + 64;
        if (v22 >= v16) {
          goto LABEL_31;
        }
        unint64_t v23 = v37[v22];
        ++v12;
        if (!v23)
        {
          int64_t v12 = v22 + 1;
          if (v22 + 1 >= v16) {
            goto LABEL_31;
          }
          unint64_t v23 = v37[v12];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v16)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v7 = v6;
                goto LABEL_38;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v9 + 32);
              if (v35 >= 64) {
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v37 = -1 << v35;
              }
              uint64_t v7 = v6;
              *(void *)(v9 + 16) = 0;
              break;
            }
            unint64_t v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v12 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v12 >= v16) {
                  goto LABEL_31;
                }
                unint64_t v23 = v37[v12];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v12 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      uint64_t v25 = 8 * v21;
      uint64_t v26 = *(void *)(*(void *)(v9 + 48) + v25);
      uint64_t v27 = *(void *)(*(void *)(v9 + 56) + v25);
      Hasher.init(_seed:)();
      a6(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v11 + 48) + v19) = v26;
      *(void *)(*(void *)(v11 + 56) + v19) = v27;
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v7 = v11;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>();
  char v33 = a2;
  uint64_t v34 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v32 = (void *)(v5 + 64);
    uint64_t v7 = -1;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    unint64_t v8 = v7 & *(void *)(v5 + 64);
    unint64_t v30 = v2;
    int64_t v31 = (unint64_t)(v6 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      unint64_t v35 = a2;
      if (v8)
      {
        unint64_t v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_24;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_24;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v31)
            {
LABEL_24:
              swift_release();
              uint64_t v3 = v30;
              if (v33)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v10 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_31;
                }
                if (v10 >= v31) {
                  goto LABEL_24;
                }
                unint64_t v16 = v32[v10];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v10 = v17;
          }
        }
LABEL_21:
        unint64_t v8 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = *(void *)(v5 + 56);
      uint64_t v19 = v5;
      uint64_t v20 = *(void *)(v5 + 48) + 16 * v14;
      unint64_t v21 = *(void *)v20;
      int v22 = *(unsigned __int8 *)(v20 + 10);
      int v23 = *(unsigned __int16 *)(v20 + 8);
      uint64_t v24 = *(unsigned __int8 *)(v20 + 11);
      uint64_t v25 = *(unsigned __int8 *)(v20 + 12);
      int v26 = *(unsigned __int8 *)(v20 + 13);
      uint64_t v27 = *(void **)(v18 + 8 * v14);
      if ((v33 & 1) == 0) {
        id v28 = v27;
      }
      unint64_t v11 = v35 & 0xFFFF000000000000 | (v23 | (v22 << 16)) & 0xFFFFFF | (v24 << 24) | (v25 << 32);
      uint64_t v12 = 0x10000000000;
      if (!v26) {
        uint64_t v12 = 0;
      }
      a2 = v11 | v12;
      unint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v21, v11 | v12, (uint64_t)v27, v34);
      uint64_t v5 = v19;
    }
  }
  unint64_t result = swift_release();
  *uint64_t v3 = v34;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v10 = 0;
    uint64_t v34 = (void *)(v7 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v7 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v7 + 64);
    int64_t v33 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v10 << 6);
      }
      else
      {
        int64_t v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v7 + 64;
        if (v22 >= v33) {
          goto LABEL_33;
        }
        unint64_t v23 = v34[v22];
        ++v10;
        if (!v23)
        {
          int64_t v10 = v22 + 1;
          if (v22 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v23 = v34[v10];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v5 = v4;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v7 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              uint64_t v5 = v4;
              *(void *)(v7 + 16) = 0;
              break;
            }
            unint64_t v23 = v34[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v10 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v10 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v23 = v34[v10];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v10 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      uint64_t v29 = 8 * v21;
      Swift::UInt64 v30 = *(void *)(*(void *)(v7 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v7 + 56) + v29);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v9 + 48) + v19) = v30;
      *(void *)(*(void *)(v9 + 56) + v19) = v31;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v5 = v9;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt64 v30;
  void *v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  void *v35;

  uint64_t v5 = v4;
  uint64_t v7 = *v4;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = result;
  if (*(void *)(v7 + 16))
  {
    int64_t v10 = 0;
    unint64_t v35 = (void *)(v7 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v7 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v7 + 64);
    uint64_t v34 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v10 << 6);
      }
      else
      {
        int64_t v22 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v7 + 64;
        if (v22 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = v35[v22];
        ++v10;
        if (!v23)
        {
          int64_t v10 = v22 + 1;
          if (v22 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v23 = v35[v10];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v5 = v4;
                goto LABEL_40;
              }
              int64_t v33 = 1 << *(unsigned char *)(v7 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v35 = -1 << v33;
              }
              uint64_t v5 = v4;
              *(void *)(v7 + 16) = 0;
              break;
            }
            unint64_t v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v10 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v10 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v23 = v35[v10];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v10 = v24;
          }
        }
LABEL_30:
        unint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v10 << 6);
      }
      uint64_t v29 = 8 * v21;
      Swift::UInt64 v30 = *(void *)(*(void *)(v7 + 48) + v29);
      uint64_t v31 = *(void **)(*(void *)(v7 + 56) + v29);
      if ((a2 & 1) == 0) {
        uint64_t v32 = v31;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v9 + 48) + v19) = v30;
      *(void *)(*(void *)(v9 + 56) + v19) = v31;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v5 = v9;
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unsigned int a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  Swift::UInt v12 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v12);
  unsigned int v13 = (a1 >> 8) & 1;
  Hasher._combine(_:)(v13);
  Swift::UInt v14 = HIWORD(a1) & 1;
  Hasher._combine(_:)(v14);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    id v15 = a4;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v17 = a6[6] + 32 * result;
  *(unsigned char *)uint64_t v17 = v12;
  *(unsigned char *)(v17 + 1) = v13;
  *(unsigned char *)(v17 + 2) = v14;
  *(void *)(v17 + 8) = a2;
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  *(void *)(a6[7] + 8 * result) = a5;
  ++a6[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, void *a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)a1);
  Hasher._combine(_:)(*(void *)(a1 + 8));
  Hasher._combine(_:)(*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v6 = *(void *)(a1 + 24);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v7 = *(void *)(a1 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v7);
  }
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a3[6] + 56 * v8;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 16) = v10;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v9 + 32) = result;
  *(unsigned char *)(v9 + 48) = *(unsigned char *)(a1 + 48);
  *(void *)(a3[7] + 8 * v8) = a2;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, Swift::UInt16 a3, uint64_t a4, void *a5, double a6)
{
  Swift::UInt32 v10 = a2;
  Swift::UInt32 v11 = a1;
  unint64_t v12 = HIDWORD(a1);
  unint64_t v13 = HIDWORD(a2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(a3);
  if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = *(void *)&a6;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v16 = a5[6] + 32 * result;
  *(_DWORD *)uint64_t v16 = v11;
  *(_DWORD *)(v16 + 4) = v12;
  *(_DWORD *)(v16 + 8) = v10;
  *(_DWORD *)(v16 + 12) = v13;
  *(_WORD *)(v16 + 16) = a3;
  *(double *)(v16 + 24) = a6;
  *(void *)(a5[7] + 8 * result) = a4;
  ++a5[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  Hasher.init(_seed:)();
  uint64_t v8 = (a1 >> 38) & 3;
  if (v8)
  {
    if (v8 == 1)
    {
      Hasher._combine(_:)(6uLL);
      ContentTransition.NumericTextConfiguration.hash(into:)();
    }
    else
    {
      switch(a1)
      {
        case 0x8000000001uLL:
          Swift::UInt v9 = 1;
          break;
        case 0x8000000002uLL:
          Swift::UInt v9 = 2;
          break;
        case 0x8000000003uLL:
          Swift::UInt v9 = 3;
          break;
        case 0x8000000004uLL:
          Swift::UInt v9 = 4;
          break;
        default:
          Swift::UInt v9 = 0;
          break;
      }
      Hasher._combine(_:)(v9);
    }
  }
  else
  {
    Hasher._combine(_:)(5uLL);
    Hasher._combine(_:)(a1 & 1);
  }
  if (BYTE3(a2) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a2 >> 24) & 1);
  }
  if (BYTE4(a2) == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE4(a2));
  }
  Hasher._combine(_:)(BYTE5(a2) & 1);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  uint64_t v11 = a4[6] + 16 * result;
  *(void *)uint64_t v11 = a1;
  *(unsigned char *)(v11 + 10) = BYTE2(a2);
  *(_WORD *)(v11 + 8) = a2;
  *(unsigned char *)(v11 + 11) = BYTE3(a2);
  *(unsigned char *)(v11 + 12) = BYTE4(a2);
  *(unsigned char *)(v11 + 13) = BYTE5(a2) & 1;
  *(void *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ResolvedShapeStyles, Attribute<_ShapeStyle_Pack>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (char *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (char *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = (char *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    int v18 = *(_DWORD *)(v17 + 16);
    char v19 = *(unsigned char *)(v17 + 20);
    char v20 = *(unsigned char *)(v17 + 21);
    uint64_t v21 = 4 * v15;
    int v22 = *(_DWORD *)(*(void *)(v2 + 56) + v21);
    unint64_t result = *(char **)(v4 + 48);
    unint64_t v23 = &result[v16];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v17;
    *((_DWORD *)v23 + 4) = v18;
    v23[20] = v19;
    v23[21] = v20;
    *(_DWORD *)(*(void *)(v4 + 56) + v21) = v22;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  long long v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, CGSize>, type metadata accessor for CGSize, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (char *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (char *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = (char *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    int v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    char v20 = *(void *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 24);
    uint64_t v21 = 16 * v15;
    unint64_t result = *(char **)(v4 + 48);
    int v22 = &result[v16];
    unint64_t v23 = *(_OWORD *)(*(void *)(v2 + 56) + v21);
    *(void *)int v22 = v18;
    v22[8] = v19;
    *((void *)v22 + 2) = v20;
    v22[24] = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v21) = v23;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>(0, a1, a2, a3, a4);
  uint64_t v6 = *v4;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v5 = v8;
    return result;
  }
  unint64_t result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v17) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v20 = 8 * v19;
    uint64_t v21 = *(void *)(*(void *)(v6 + 56) + v20);
    *(void *)(*(void *)(v8 + 48) + v20) = *(void *)(*(void *)(v6 + 48) + v20);
    *(void *)(*(void *)(v8 + 56) + v20) = v21;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v17) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CUIDesignLibraryCacheKey, CUIDesignLibraryCacheKey.Entry>, (void (*)(void))lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = v3 + 64;
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7) {
    unint64_t result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v31 = __clz(__rbit64(v29));
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = v31 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 9);
    unint64_t result = *(unsigned __int8 *)(v17 + 10);
    uint64_t v21 = *(void *)(v17 + 16);
    uint64_t v22 = 20 * v15;
    uint64_t v23 = *(void *)(v2 + 56) + v22;
    char v24 = *(unsigned char *)(v23 + 16);
    uint64_t v25 = *(void *)(v4 + 48) + v16;
    long long v26 = *(_OWORD *)v23;
    *(void *)uint64_t v25 = v18;
    *(unsigned char *)(v25 + 8) = v19;
    *(unsigned char *)(v25 + 9) = v20;
    *(unsigned char *)(v25 + 10) = result;
    *(void *)(v25 + 16) = v21;
    uint64_t v27 = *(void *)(v4 + 56) + v22;
    *(_OWORD *)uint64_t v27 = v26;
    *(unsigned char *)(v27 + 16) = v24;
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, a1, a2);
  uint64_t v4 = *v2;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t result = (void *)(v5 + 64);
  uint64_t v8 = v4 + 64;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v8 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = v23 + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + v18);
    *(void *)(*(void *)(v6 + 48) + v18) = *(void *)(*(void *)(v4 + 48) + v18);
    *(void *)(*(void *)(v6 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v8 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = v4;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>(0, a1, a2);
  uint64_t v7 = *v4;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v6 = v9;
    return result;
  }
  uint64_t v27 = v6;
  unint64_t result = (void *)(v8 + 64);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12) {
    unint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v18) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v11 + 8 * v24);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v18) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v11 + 8 * v14);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 8 * v20;
    uint64_t v22 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    uint64_t v23 = 40 * v20;
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v20, (uint64_t)v28);
    *(void *)(*(void *)(v9 + 48) + v21) = v22;
    unint64_t result = (void *)a4(v28, *(void *)(v9 + 56) + v23);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v18)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v6 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v11 + 8 * v26);
  if (v25)
  {
    int64_t v14 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v11 + 8 * v14);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, a1, a2, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t v4 = *v2;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t result = (void *)(v5 + 64);
  uint64_t v8 = v4 + 64;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v8 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + v18);
    *(void *)(*(void *)(v6 + 48) + v18) = *(void *)(*(void *)(v4 + 48) + v18);
    *(void *)(*(void *)(v6 + 56) + v18) = v19;
    unint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v8 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = *(void *)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v14) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, a1, a2, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t v4 = *v2;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v3 = v6;
    return result;
  }
  id result = (id)(v5 + 64);
  uint64_t v8 = v4 + 64;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v8 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    int64_t v19 = *(void **)(*(void *)(v4 + 56) + v18);
    *(void *)(*(void *)(v6 + 48) + v18) = *(void *)(*(void *)(v4 + 48) + v18);
    *(void *)(*(void *)(v6 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v15) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v8 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void (*a3)(_OWORD *__return_ptr, id *, void *))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v40 = v5;
  while (1)
  {
    if (v7 >= *(void *)(v5 + 16))
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v8 = v5 + v6;
    Swift::UInt v9 = *(void *)(v5 + v6 + 32);
    if (v9 == 1) {
      goto LABEL_18;
    }
    unint64_t v44 = v7;
    uint64_t v45 = v6;
    Swift::UInt8 v10 = *(unsigned char *)(v8 + 40);
    uint64_t v12 = *(void *)(v8 + 48);
    uint64_t v11 = *(void *)(v8 + 56);
    uint64_t v14 = *(void *)(v8 + 64);
    uint64_t v13 = *(void *)(v8 + 72);
    char v15 = *(unsigned char *)(v8 + 80);
    Swift::UInt v53 = v9;
    Swift::UInt8 v54 = v10;
    v51[0] = v12;
    v51[1] = v11;
    uint64_t v42 = v11;
    v51[2] = v14;
    v51[3] = v13;
    char v43 = v15;
    char v52 = v15;
    unint64_t v16 = *(void **)v55;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_22;
    }
    char v22 = v17;
    if (v16[3] < v21) {
      break;
    }
    if (a2)
    {
      if (v17) {
        goto LABEL_13;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v22) {
        goto LABEL_13;
      }
    }
LABEL_16:
    int64_t v30 = *(void **)v55;
    v30[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v31 = v30[6] + 16 * v18;
    *(void *)uint64_t v31 = v9;
    *(unsigned char *)(v31 + 8) = v10;
    uint64_t v32 = v30[7] + 40 * v18;
    *(void *)uint64_t v32 = v12;
    *(void *)(v32 + 8) = v42;
    *(void *)(v32 + 16) = v14;
    *(void *)(v32 + 24) = v13;
    *(unsigned char *)(v32 + 32) = v43;
    uint64_t v33 = v30[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_23;
    }
    v30[2] = v35;
LABEL_3:
    unint64_t v7 = v44 + 1;
    uint64_t v6 = v45 + 56;
    a2 = 1;
    uint64_t v5 = v40;
    if (v4 == v44 + 1) {
      goto LABEL_18;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a2 & 1);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10);
  if ((v22 & 1) != (v24 & 1)) {
    goto LABEL_24;
  }
  unint64_t v18 = v23;
  if ((v22 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v25 = *(void **)v55;
  uint64_t v26 = *(void *)(*(void *)v55 + 56) + 40 * v18;
  char v27 = *(unsigned char *)(v26 + 32);
  *(_OWORD *)v46 = *(_OWORD *)v26;
  long long v47 = *(_OWORD *)(v26 + 16);
  char v48 = v27;
  a3(v49, v46, v51);
  if (!v41)
  {
    uint64_t v28 = v25[7] + 40 * v18;
    char v29 = v50;
    *(_OWORD *)uint64_t v28 = v49[0];
    *(_OWORD *)(v28 + 16) = v49[1];
    *(unsigned char *)(v28 + 32) = v29;
    goto LABEL_3;
  }
  v46[0] = v41;
  id v36 = v41;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_25:
  *(void *)&v49[0] = 0;
  *((void *)&v49[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v37._object = (void *)0x800000024621A6C0;
  v37._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)();
  v38._countAndFlagsBits = 39;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), void (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    a5(0);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    a6(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v11 = a4[3];
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = a4[2];
  if (v12 <= v13) {
    uint64_t v14 = a4[2];
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    a5(0);
    uint64_t v15 = (void *)swift_allocObject();
    int64_t v16 = _swift_stdlib_malloc_size(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 25;
    }
    v15[2] = v13;
    v15[3] = 2 * (v17 >> 3);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v18 = (unint64_t)(v15 + 4);
  unint64_t v19 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v15 != a4 || v18 >= v19 + 8 * v13) {
      memmove(v15 + 4, a4 + 4, 8 * v13);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v19 >= v18 + 8 * v13 || v18 >= v19 + 8 * v13)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, a6, a7, MEMORY[0x263F8D488]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v15;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, a5, a6, MEMORY[0x263F8E0F8]);
    int64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 25;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    int64_t v12 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v12 + 32;
  int64_t v16 = a4 + 32;
  if (a1)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10]) {
      memmove(v15, v16, 8 * v10);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[8 * v10] || v15 >= &v16[8 * v10])
  {
    memcpy(v15, v16, 8 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, a5, a6, MEMORY[0x263F8E0F8]);
    int64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    int64_t v12 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v15 = v12 + 32;
  int64_t v16 = a4 + 32;
  if (a1)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10]) {
      memmove(v15, v16, 16 * v10);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v10] || v15 >= &v16[16 * v10])
  {
    memcpy(v15, v16, 16 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(0, a5, a6, MEMORY[0x263F8E0F8]);
    int64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 120);
  }
  else
  {
    int64_t v12 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  int64_t v16 = 120 * v10;
  if (a1)
  {
    if (v12 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[2];
  int v21;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    int v10 = *(_DWORD *)(*(void *)(v1 + 56) + 4 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    uint64_t v21 = v10;
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    return v19;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      uint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              unint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    uint64_t v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    int v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    v10(&v18, v19);
    return v18;
  }
  int64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      uint64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      int64_t v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          int64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            int64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            int64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              uint64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  int64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v14 = (unint64_t)(v1[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v1[1];
      unint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_9:
        uint64_t v7 = (v16 - 1) & v16;
        unint64_t v8 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v6 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_12:
          int64_t v13 = v17;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v5 + 3));
          if (v16)
          {
            int64_t v13 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v17 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_12;
            }
            int64_t v13 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v14)
            {
              unint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_9;
              }
              int64_t v6 = v14 - 1;
              int64_t v18 = v5 + 6;
              while (v14 != v18)
              {
                unint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0;
    a1[1] = 0;
    return result;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  char v9 = *(unsigned char *)(*(void *)(v3 + 48) + v8);
  uint64_t v10 = *(void *)(*(void *)(v3 + 56) + 8 * v8);
  v1[3] = v6;
  v1[4] = v7;
  uint64_t v11 = (void (*)(char *))v1[5];
  v19[0] = v9;
  uint64_t v20 = v10;
  swift_bridgeObjectRetain();
  v11(v19);

  return swift_bridgeObjectRelease();
}

void specialized LazyMapSequence.Iterator.next()()
{
  void (*v10)(uint64_t *__return_ptr, void *);
  id v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    char v9 = *(void **)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    uint64_t v11 = v9;
    v10(&v18, v19);

    return;
  }
  int64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      int64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      unint64_t v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          int64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            int64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            int64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              int64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  int64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
    outlined init with copy of AnyTrackedValue(*(void *)(v3 + 56) + 40 * v10, (uint64_t)v22 + 8);
    *(void *)&v22[0] = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  int64_t v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v22, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyTrackedValue)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue));
  if ((void)v21)
  {
    v19[0] = v20[0];
    v19[1] = v20[1];
    v19[2] = v21;
    v17(v19);
    return outlined destroy of (key: NSAttributedStringKey, value: Any)((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (key: ObjectIdentifier, value: AnyTrackedValue));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

BOOL specialized max<A>(_:_:)@<W0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  char v8 = *((unsigned char *)a1 + 32);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[3];
  char v13 = *((unsigned char *)a2 + 32);
  v18[0] = *a1;
  v18[1] = v5;
  v18[2] = v6;
  v18[3] = v7;
  char v19 = v8;
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v11;
  v16[3] = v12;
  char v15 = v13;
  char v17 = v13;
  BOOL result = specialized static Spacing.Value.< infix(_:_:)((uint64_t)v16, (uint64_t)v18);
  if (!result)
  {
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    char v8 = v15;
  }
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v5;
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v7;
  *(unsigned char *)(a3 + 32) = v8;
  return result;
}

uint64_t sub_245A32AEC()
{
  return swift_deallocObject();
}

uint64_t sub_245A32AFC()
{
  return swift_deallocObject();
}

uint64_t sub_245A32B0C()
{
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for ZStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ZStackLayout and conformance ZStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout;
  if (!lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout;
  if (!lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStackLayout and conformance ZStackLayout);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ZStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 16) & ~v5, ((unint64_t)a2 + v5 + 16) & ~v5);
  }
  return v3;
}

ValueMetadata *type metadata accessor for ZStackLayout()
{
  return &type metadata for ZStackLayout;
}

unint64_t lazy protocol witness table accessor for type ColorCacheKey and conformance ColorCacheKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey;
  if (!lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey;
  if (!lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorCacheKey and conformance ColorCacheKey);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<GesturePhase<()>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<GesturePhase<()>>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<GesturePhase<()>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey()
{
  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey;
  if (!lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  }
  return result;
}

uint64_t outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_retain();
    return swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>)
  {
    type metadata accessor for RBDisplayListInterpolatorOptionKey(255);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef((unint64_t *)&lazy protocol witness table cache variable for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey, type metadata accessor for RBDisplayListInterpolatorOptionKey);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<RBDisplayListInterpolatorOptionKey, Any>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  return lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key;
  if (!lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Key and conformance Text.Effect.Key);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [Text.Effect.KeyframeLayout.Fragment], (uint64_t)&type metadata for Text.Effect.KeyframeLayout.Fragment, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>)
  {
    type metadata accessor for Set<Int>(255, &lazy cache variable for type metadata for Set<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6D8], MEMORY[0x263F8D680]);
    lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
    }
  }
}

uint64_t outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item()
{
  if (!lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item)
  {
    type metadata accessor for Set<Int>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for ForEachState.Item();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>)
  {
    type metadata accessor for Set<Int>(255, &lazy cache variable for type metadata for _ValueTransactionModifier<Double>, MEMORY[0x263F8D538], MEMORY[0x263F8D568], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    type metadata accessor for Set<Int>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, (void (*)(void))lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SummarySymbol and conformance SummarySymbol()
{
  unint64_t result = lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol;
  if (!lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SummarySymbol and conformance SummarySymbol);
  }
  return result;
}

void type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item()
{
  if (!lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item)
  {
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    unint64_t v0 = type metadata accessor for ForEachState.Item();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, Double)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (String, Double));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Double)>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Property and conformance _ViewDebug.Property);
  }
  return result;
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item()
{
  if (!lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for ForEachState.Item();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item);
    }
  }
}

void type metadata accessor for _DictionaryStorage<EventID, EventType>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey;
  if (!lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey;
  if (!lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachedVectorImageContents.CacheKey and conformance CachedVectorImageContents.CacheKey);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(label: String, value: Double)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(label: String, value: Double)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (label: String, value: Double));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(label: String, value: Double)>);
    }
  }
}

unint64_t type metadata accessor for Decodable & AnyViewFactory.Type()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & AnyViewFactory.Type;
  if (!lazy cache variable for type metadata for Decodable & AnyViewFactory.Type)
  {
    type metadata accessor for Decodable & AnyViewFactory();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & AnyViewFactory.Type);
  }
  return result;
}

unint64_t type metadata accessor for Decodable & AnyViewFactory()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & AnyViewFactory;
  if (!lazy cache variable for type metadata for Decodable & AnyViewFactory)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & AnyViewFactory);
  }
  return result;
}

void type metadata accessor for [ScrapeableContent.Node](uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key;
  if (!lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key;
  if (!lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>)
  {
    type metadata accessor for URL();
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>);
    }
  }
}

uint64_t outlined init with copy of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of NamedImage.Cache.WeakCatalog(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>)
  {
    type metadata accessor for NamedImage.BitmapKey(255);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type NamedImage.BitmapKey and conformance NamedImage.BitmapKey, (void (*)(uint64_t))type metadata accessor for NamedImage.BitmapKey);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _NSRange and conformance _NSRange()
{
  return lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type _NSRange and conformance _NSRange, type metadata accessor for _NSRange);
}

void type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<UUID, NamedImage.DecodedInfo>)
  {
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, NamedImage.DecodedInfo>);
    }
  }
}

void type metadata accessor for (arg: UInt64, destructor: (())?)?(uint64_t a1)
{
}

void type metadata accessor for (arg: UInt64, destructor: (())?)()
{
  if (!lazy cache variable for type metadata for (arg: UInt64, destructor: (())?))
  {
    type metadata accessor for _ContiguousArrayStorage<[Path?]>(255, (unint64_t *)&lazy cache variable for type metadata for (())?, (uint64_t (*)(uint64_t))type metadata accessor for (), MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (arg: UInt64, destructor: (())?));
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel;
  if (!lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>)
  {
    type metadata accessor for CAPresentationModifier(255, (unint64_t *)&lazy cache variable for type metadata for RBTransition);
    lazy protocol witness table accessor for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContentTransition.NamedKey, RBTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey;
  if (!lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransition.NamedKey and conformance ContentTransition.NamedKey);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
    lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey;
  if (!lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.GraphicsRenderer.Cache.AnimatorKey and conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey);
  }
  return result;
}

uint64_t sub_245A3417C()
{
  return swift_deallocObject();
}

uint64_t sub_245A3418C()
{
  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<[Path]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Path]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [Path], (uint64_t)&type metadata for Path, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Path]>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<[CGPoint]>(uint64_t a1)
{
}

void type metadata accessor for [CGPoint](uint64_t a1)
{
}

void type metadata accessor for _ContiguousArrayStorage<[Path?]>(uint64_t a1)
{
}

void type metadata accessor for [Path?]()
{
  if (!lazy cache variable for type metadata for [Path?])
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Path?]);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<[Text.Layout.Cluster]>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<[Text.Layout.Cluster]>)
  {
    type metadata accessor for _ContiguousArrayStorage<PreferencesOutputs>(255, &lazy cache variable for type metadata for [Text.Layout.Cluster], (uint64_t)&type metadata for Text.Layout.Cluster, MEMORY[0x263F8D488]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[Text.Layout.Cluster]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex;
  if (!lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
  }
  return result;
}

uint64_t ScrollStateRequest.updateScrollable(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ViewInputs.base.modify(a2, a3);
}

{
  return _ViewInputs.base.modify(a2, a3);
}

double ScrollStateRequestKind.UpdateValueConfig.targetDistance.getter()
{
  return *(double *)v0;
}

void ScrollStateRequestKind.UpdateValueConfig.targetDistance.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ScrollStateRequestKind.UpdateValueConfig.targetDistance.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollStateRequest.overrides(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of ScrollStateRequest?(a1, (uint64_t)&v13);
  if (!v14)
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    return 1;
  }
  outlined init with take of ScrollStateRequest(&v13, (uint64_t)v15);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a2, a3);
  double v5 = *(double *)&v13;
  char v6 = BYTE8(v13);
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v11, v7, v8);
  if ((v12 & 1) == 0)
  {
    if ((v6 & 1) == 0)
    {
      BOOL v9 = v5 < v11;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return v9;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return 0;
}

uint64_t _GraphInputs.updateScrollStateRequest.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (int *)(v2 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
  }
  uint64_t v4 = *v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

BOOL ScrollPhaseState.shouldUpdateValue.getter()
{
  return (*v0 & 0xFB) != 0;
}

uint64_t closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  outlined retain of ScrollStateEnqueueRequests(a2);
  uint64_t v5 = swift_retain();
  specialized closure #1 in withTransaction<A>(_:_:)(v5, a2, a3);
  return swift_release();
}

uint64_t closure #1 in closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 56) + 16;
  swift_beginAccess();
  uint64_t v4 = *(void *)v3;
  if (!*(void *)(*(void *)v3 + 16) || (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v6 & 1) == 0))
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    goto LABEL_6;
  }
  outlined init with copy of AnyTrackedValue(*(void *)(v4 + 56) + 40 * v5, (uint64_t)&v13);
  if (!*((void *)&v14 + 1))
  {
LABEL_6:
    outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    swift_endAccess();
    goto LABEL_7;
  }
  outlined init with copy of AnyTrackedValue((uint64_t)&v13, (uint64_t)v10);
  outlined destroy of ScrollStateRequest?((uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
  swift_endAccess();
  uint64_t v7 = v11;
  uint64_t v8 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
LABEL_7:
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v13, a2);
  return swift_endAccess();
}

uint64_t ScrollToScrollStateRequest.binding.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<ScrollPosition>(v1, a1);
}

uint64_t ScrollToScrollStateRequest.binding.setter(uint64_t a1)
{
  return outlined assign with take of Binding<ScrollPosition>(a1, v1);
}

uint64_t (*ScrollToScrollStateRequest.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.anchor.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ScrollToScrollStateRequest.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 96) = result;
  *(void *)(v3 + 104) = a2;
  *(unsigned char *)(v3 + 112) = a3 & 1;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.id.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t ScrollToScrollStateRequest.id.setter(uint64_t result)
{
  *(void *)(v1 + 120) = result;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.value.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ScrollPosition(v1 + 128, a1);
}

uint64_t ScrollToScrollStateRequest.value.setter(uint64_t a1)
{
  return outlined assign with take of ScrollPosition(a1, v1 + 128);
}

uint64_t (*ScrollToScrollStateRequest.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollToScrollStateRequest.baseTransaction.getter()
{
  return swift_retain();
}

uint64_t ScrollToScrollStateRequest.baseTransaction.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 208) = a1;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.baseTransaction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScrollToScrollStateRequest.scrollable.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t ScrollToScrollStateRequest.$scrollable.getter()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = Attribute;
  }
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x263F288F8]) << 32);
}

uint64_t ScrollToScrollStateRequest.$scrollable.setter()
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v0 + 216) = result;
  return result;
}

uint64_t (*ScrollToScrollStateRequest.$scrollable.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  int Attribute = AGWeakAttributeGetAttribute();
  int v4 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v5 = Attribute == v4;
  if (Attribute == v4) {
    int v6 = 0;
  }
  else {
    int v6 = Attribute;
  }
  *(_DWORD *)(a1 + 8) = v6;
  char v7 = v5;
  *(unsigned char *)(a1 + 12) = v7;
  return ScrollToScrollStateRequest.$scrollable.modify;
}

uint64_t ScrollToScrollStateRequest.$scrollable.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v1 + 216) = result;
  return result;
}

double ScrollToScrollStateRequest.init(binding:anchor:id:value:baseTransaction:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)(a8 + 216) = 0;
  outlined init with copy of Binding<ScrollPosition>(a1, a8);
  *(void *)(a8 + 96) = a2;
  *(void *)(a8 + 104) = a3;
  *(unsigned char *)(a8 + 112) = a4 & 1;
  *(void *)(a8 + 120) = a5;
  outlined init with copy of ScrollPosition(a6, a8 + 128);
  *(void *)(a8 + 208) = a7;
  outlined destroy of ScrollPosition(a6);
  outlined destroy of UpdateScrollStateRequest?(a1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  double result = 0.0;
  *(void *)(a8 + 216) = 0;
  return result;
}

void ScrollToScrollStateRequest.kind.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t ScrollToScrollStateRequest.transaction.getter()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v9 = v1;
  uint64_t v2 = swift_retain_n();
  specialized closure #1 in PropertyList.subscript.getter(v2);
  char v4 = v3;
  swift_release();
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 104);
    char v7 = *(unsigned char *)(v0 + 112);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v9, v5, v6, v7);
    swift_release();
    return v9;
  }
  return v1;
}

uint64_t ScrollToScrollStateRequest.updateScrollable(_:)()
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v0 + 216) = result;
  return result;
}

uint64_t ScrollToScrollStateRequest.hasUpdate.getter()
{
  return 1;
}

Swift::Bool __swiftcall ScrollToScrollStateRequest.update()()
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v13);
    uint64_t v2 = *(void *)(v0 + 208);
    v12[0] = v2;
    uint64_t v3 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v3);
    char v5 = v4;
    uint64_t v6 = swift_release();
    if (v5)
    {
      uint64_t v7 = *(void *)(v0 + 96);
      uint64_t v8 = *(void *)(v0 + 104);
      char v9 = *(unsigned char *)(v0 + 112);
      swift_retain();
      specialized closure #1 in PropertyList.subscript.setter(v12, v7, v8, v9);
      uint64_t v6 = swift_release();
      uint64_t v2 = v12[0];
    }
    MEMORY[0x270FA5388](v6);
    char v10 = specialized closure #1 in withTransaction<A>(_:_:)(v2, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in ScrollToScrollStateRequest.update());
    swift_release();
    if (v10)
    {
      outlined init with copy of ScrollPosition(v0 + 128, (uint64_t)v12);
      (*(void (**)(uint64_t *, void))(**(void **)(v0 + 8) + 128))(v12, *(void *)v0);
      outlined destroy of ScrollPosition((uint64_t)v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      LOBYTE(WeakValue) = 1;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      LOBYTE(WeakValue) = 0;
    }
  }
  return WeakValue;
}

uint64_t protocol witness for ScrollStateRequest.id.getter in conformance ScrollToScrollStateRequest()
{
  return *(void *)(v0 + 120);
}

void protocol witness for ScrollStateRequest.kind.getter in conformance ScrollToScrollStateRequest(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for ScrollStateRequest.transaction.getter in conformance ScrollToScrollStateRequest()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v9 = v1;
  uint64_t v2 = swift_retain_n();
  specialized closure #1 in PropertyList.subscript.getter(v2);
  char v4 = v3;
  swift_release();
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 104);
    char v7 = *(unsigned char *)(v0 + 112);
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(&v9, v5, v6, v7);
    swift_release();
    return v9;
  }
  return v1;
}

uint64_t protocol witness for ScrollStateRequest.updateScrollable(_:) in conformance ScrollToScrollStateRequest()
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v0 + 216) = result;
  return result;
}

uint64_t UpdateScrollStateRequest.binding.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<ScrollPosition>(v1, a1);
}

uint64_t UpdateScrollStateRequest.binding.setter(uint64_t a1)
{
  return outlined assign with take of Binding<ScrollPosition>(a1, v1);
}

uint64_t (*UpdateScrollStateRequest.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.newPosition.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ScrollPosition(v1 + 96, a1);
}

uint64_t UpdateScrollStateRequest.newPosition.setter(uint64_t a1)
{
  return outlined assign with take of ScrollPosition(a1, v1 + 96);
}

uint64_t (*UpdateScrollStateRequest.newPosition.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.isVisible.getter()
{
  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t UpdateScrollStateRequest.isVisible.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 176) = result;
  return result;
}

uint64_t (*UpdateScrollStateRequest.isVisible.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double UpdateScrollStateRequest.targetDistance.getter()
{
  return *(double *)(v0 + 184);
}

void UpdateScrollStateRequest.targetDistance.setter(double a1)
{
  *(double *)(v1 + 184) = a1;
}

uint64_t (*UpdateScrollStateRequest.targetDistance.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t UpdateScrollStateRequest.id.getter()
{
  return *(void *)(v0 + 8);
}

void UpdateScrollStateRequest.kind.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 184);
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t UpdateScrollStateRequest.hasUpdate.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(v0 + 16, (uint64_t)v3);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(**(void **)(v0 + 8) + 120))(v3);
  }
  char v1 = ScrollPosition.wantsUpdate(toPosition:)(v0 + 96);
  outlined destroy of ScrollPosition((uint64_t)v3);
  return v1 & 1;
}

Swift::Bool __swiftcall UpdateScrollStateRequest.update()()
{
  uint64_t v8 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v8, 1);
  uint64_t v0 = v8;
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2 && !*(void *)(v2 + 72))
  {
    v4.value = v0;
  }
  else
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
    *(void *)(swift_allocObject() + 72) = 0;
    type metadata accessor for TransactionPropertyKey<AnimationKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
    v4.value = PropertyList.Element.init(keyType:before:after:)(v3, 0, v0).value;
  }
  uint64_t v5 = swift_release();
  MEMORY[0x270FA5388](v5);
  char v6 = specialized closure #1 in withTransaction<A>(_:_:)(v4.value, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in UpdateScrollStateRequest.update());
  swift_release();
  return v6 & 1;
}

uint64_t closure #1 in UpdateScrollStateRequest.update()@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(result + 176) == 1)
  {
    uint64_t v3 = result;
    outlined init with copy of ScrollPosition(result + 96, (uint64_t)v5);
    (*(void (**)(unsigned char *, void))(**(void **)(v3 + 8) + 128))(v5, *(void *)v3);
    uint64_t result = outlined destroy of ScrollPosition((uint64_t)v5);
    char v4 = *(unsigned char *)(v3 + 176);
  }
  else
  {
    char v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t protocol witness for ScrollStateRequest.id.getter in conformance UpdateScrollStateRequest()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for ScrollStateRequest.transaction.getter in conformance UpdateScrollStateRequest()
{
  return UpdateScrollStateRequest.transaction.getter();
}

Swift::UInt UpdateScrollStateRequest.transaction.getter()
{
  uint64_t v6 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v6, 1);
  uint64_t v0 = v6;
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (!v2 || (Swift::UInt value = v0, *(void *)(v2 + 72)))
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
    *(void *)(swift_allocObject() + 72) = 0;
    type metadata accessor for TransactionPropertyKey<AnimationKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v4, 0, v0).value;
  }
  swift_release();
  return value;
}

uint64_t PositionedByUserScrollStateRequest.hasUpdate.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(void **)(v0 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(v0 + 16, (uint64_t)v3);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(**(void **)(v0 + 8) + 120))(v3);
  }
  char v1 = ScrollPosition.wantsUpdate(toPosition:)(v0 + 96);
  outlined destroy of ScrollPosition((uint64_t)v3);
  return v1 & 1;
}

Swift::Bool __swiftcall PositionedByUserScrollStateRequest.update()()
{
  uint64_t v7 = 0;
  specialized closure #1 in PropertyList.subscript.setter(&v7, 1);
  uint64_t v0 = v7;
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2 && !*(void *)(v2 + 72))
  {
    v4.Swift::UInt value = v0;
  }
  else
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
    *(void *)(swift_allocObject() + 72) = 0;
    type metadata accessor for TransactionPropertyKey<AnimationKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
    v4.Swift::UInt value = PropertyList.Element.init(keyType:before:after:)(v3, 0, v0).value;
  }
  uint64_t v5 = swift_release();
  MEMORY[0x270FA5388](v5);
  specialized closure #1 in withTransaction<A>(_:_:)(v4.value, (void (*)(void *))partial apply for closure #1 in PositionedByUserScrollStateRequest.update());
  swift_release();
  return 1;
}

uint64_t closure #1 in PositionedByUserScrollStateRequest.update()(uint64_t a1)
{
  outlined init with copy of ScrollPosition(a1 + 96, (uint64_t)v3);
  (*(void (**)(unsigned char *, void))(**(void **)(a1 + 8) + 128))(v3, *(void *)a1);
  return outlined destroy of ScrollPosition((uint64_t)v3);
}

void protocol witness for ScrollStateRequest.kind.getter in conformance PositionedByUserScrollStateRequest(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

Swift::UInt protocol witness for ScrollStateRequest.transaction.getter in conformance PositionedByUserScrollStateRequest()
{
  return UpdateScrollStateRequest.transaction.getter();
}

uint64_t protocol witness for ScrollStateRequest.update() in conformance PositionedByUserScrollStateRequest()
{
  return 1;
}

uint64_t key path getter for _GraphInputs.updateScrollStateRequest : _GraphInputs@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _GraphInputs.updateScrollStateRequest.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _GraphInputs.updateScrollStateRequest : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t (*_GraphInputs.updateScrollStateRequest.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (int *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v5 = &static _GraphInputs.ScrollStateRequestKey.defaultValue;
  }
  int v6 = *v5;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = v6;
  return _GraphInputs.updateScrollStateRequest.modify;
}

uint64_t _GraphInputs.updateScrollStateRequest.modify(uint64_t a1, char a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if (a2)
  {
    int v6 = v5;
    int v7 = v4;
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a1 + 8;
    int v6 = v5;
    int v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);

  return swift_release();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollStateRequestKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.ScrollStateRequestKey.defaultValue;
  return result;
}

__n128 ScrollGeometryState.geometry.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

__n128 ScrollGeometryState.geometry.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v1 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 96);
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t (*ScrollGeometryState.geometry.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollGeometryState.scrollableAxes.getter()
{
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t ScrollGeometryState.scrollableAxes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 112) = result;
  return result;
}

uint64_t (*ScrollGeometryState.scrollableAxes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollGeometryState.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    long long v6 = *(_OWORD *)result;
    long long v7 = *(_OWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t result = swift_retain();
    long long v4 = v6;
    long long v5 = v7;
  }
  else
  {
    uint64_t v3 = 0;
    long long v4 = xmmword_24619B520;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

unint64_t ScrollGeometryState.$transform.getter()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = Attribute;
  }
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x263F288F8]) << 32);
}

uint64_t ScrollGeometryState.$transform.setter()
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v0 + 116) = result;
  return result;
}

uint64_t (*ScrollGeometryState.$transform.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  int Attribute = AGWeakAttributeGetAttribute();
  int v4 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v5 = Attribute == v4;
  if (Attribute == v4) {
    int v6 = 0;
  }
  else {
    int v6 = Attribute;
  }
  *(_DWORD *)(a1 + 8) = v6;
  char v7 = v5;
  *(unsigned char *)(a1 + 12) = v7;
  return ScrollGeometryState.$transform.modify;
}

uint64_t ScrollGeometryState.$transform.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(v1 + 116) = result;
  return result;
}

__n128 ScrollGeometryState.init(geometry:scrollableAxes:transform:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v6;
  __n128 result = *(__n128 *)(a1 + 96);
  *(__n128 *)(a4 + 96) = result;
  *(unsigned char *)(a4 + 112) = a2;
  *(void *)(a4 + 116) = a3;
  return result;
}

double static ScrollGeometryState.zero.getter@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t static ScrollGeometryPreferenceKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(a1, a2, a3, specialized Array.append<A>(contentsOf:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(a1, a2, a3, a4, a5, specialized Array.append<A>(contentsOf:));
}

uint64_t ScrollGeometryTransformProvider.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  double v3 = *(double *)(Value + 8);
  double v4 = *(double *)(Value + 16);
  double v5 = *(double *)(Value + 24);
  double v6 = *(double *)(Value + 32);
  *(void *)a1 = *(void *)Value;
  uint64_t v7 = AGGraphGetValue();
  double v8 = *(double *)v7;
  double v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;

  return swift_retain();
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollGeometryTransformProvider@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollGeometryStateProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScrollGeometryStateProvider.value.getter();
  *a1 = result;
  return result;
}

uint64_t static UpdateScrollStateRequestKey.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t static UpdateScrollStateRequestKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(a1, a2, a3, specialized Array.append<A>(contentsOf:));
}

uint64_t static ScrollGeometryPreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = a2();
  return a4(v5);
}

uint64_t ScrollStateRequestKind.description.getter()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x6F546C6C6F726373;
  }
  else {
    return 0x6156657461647075;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ScrollStateRequestKind()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x6F546C6C6F726373;
  }
  else {
    return 0x6156657461647075;
  }
}

uint64_t ScrollToScrollStateRequest.description.getter()
{
  *(void *)&v6[0] = 0;
  *((void *)&v6[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  long long v8 = v6[0];
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  v0._object = (void *)0x800000024621A6E0;
  String.append(_:)(v0);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v6);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
  }
  outlined destroy of ScrollStateRequest?((uint64_t)v6, &lazy cache variable for type metadata for Scrollable?, &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable);
  v2._object = (void *)0x800000024621A700;
  v2._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x615677656E202C29;
  v3._object = (void *)0xED0000282065756CLL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 15913;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return v8;
}

uint64_t UpdateScrollStateRequest.description.getter()
{
  _StringGuts.grow(_:)(67);
  v1._object = (void *)0x800000024621A720;
  v1._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x7369567369202C29;
  v2._object = (void *)0xEE002820656C6269;
  String.append(_:)(v2);
  if (*(unsigned char *)(v0 + 176)) {
    uint64_t v3 = 1702195828;
  }
  else {
    uint64_t v3 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 176)) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6174736964202C29;
  v6._object = (void *)0xED0000282065636ELL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 15913;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t one-time initialization function for scrollLog()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.scrollLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.scrollLog);
  return Logger.init(subsystem:category:)();
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(void *))
{
  _threadTransactionData();
  uint64_t v4 = one-time initialization token for v5;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504)
  {
    if (!dyld_program_minos_at_least()) {
      goto LABEL_13;
    }
  }
  else if (dword_26B0F4500 < v5)
  {
    goto LABEL_13;
  }
  if (_threadTransactionData())
  {
    swift_unknownObjectRetain();
    swift_release();
    type metadata accessor for PropertyList.Element();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_release();
  }
  PropertyList.merge(_:)(a1);
LABEL_13:
  Swift::String v6 = _setThreadTransactionData();
  a2(v6);
  _setThreadTransactionData();
  return swift_release();
}

uint64_t specialized closure #1 in withTransaction<A>(_:_:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, void *))
{
  uint64_t v3 = v2;
  _threadTransactionData();
  uint64_t v6 = one-time initialization token for v5;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  unsigned int v7 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504 != 1)
  {
    if (dword_26B0F4500 < v7) {
      goto LABEL_13;
    }
LABEL_9:
    if (_threadTransactionData())
    {
      swift_unknownObjectRetain();
      swift_release();
      type metadata accessor for PropertyList.Element();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_release();
    }
    PropertyList.merge(_:)(a1);
    goto LABEL_13;
  }
  if (dyld_program_minos_at_least()) {
    goto LABEL_9;
  }
LABEL_13:
  Swift::String v8 = _setThreadTransactionData();
  a2(&v11, v8);
  _setThreadTransactionData();
  swift_release();
  if (!v3) {
    char v9 = v11;
  }
  return v9 & 1;
}

uint64_t outlined assign with take of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ScrollPosition(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in ScrollToScrollStateRequest.update()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  uint64_t result = Scrollable.scrollToPosition(_:)(v4 + 128, v5, v6);
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in UpdateScrollStateRequest.update()@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in UpdateScrollStateRequest.update()(*(void *)(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests;
  if (!lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateEnqueueRequests and conformance ScrollStateEnqueueRequests);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform;
  if (!lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider;
  if (!lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider);
  }
  return result;
}

uint64_t sub_245A366E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGWeakAttributeGetAttribute();
  BOOL v3 = result == *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8]) {
    int v4 = 0;
  }
  else {
    int v4 = result;
  }
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_245A36728(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(a2 + 216) = result;
  return result;
}

uint64_t sub_245A36770@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGWeakAttributeGetAttribute();
  BOOL v3 = result == *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8]) {
    int v4 = 0;
  }
  else {
    int v4 = result;
  }
  *(_DWORD *)a1 = v4;
  *(unsigned char *)(a1 + 4) = v3;
  return result;
}

uint64_t sub_245A367B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)(a2 + 116) = result;
  return result;
}

uint64_t dispatch thunk of ScrollStateRequest.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScrollStateRequest.kind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ScrollStateRequest.transaction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ScrollStateRequest.updateScrollable(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ScrollStateRequest.hasUpdate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ScrollStateRequest.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t storeEnumTagSinglePayload for ScrollStateRequestKind(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for ScrollStateRequestKind(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for ScrollStateRequestKind(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateRequestKind()
{
  return &type metadata for ScrollStateRequestKind;
}

ValueMetadata *type metadata accessor for ScrollStateRequestKind.UpdateValueConfig()
{
  return &type metadata for ScrollStateRequestKind.UpdateValueConfig;
}

uint64_t destroy for ScrollStateEnqueueRequests()
{
  return swift_release();
}

uint64_t assignWithCopy for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScrollStateEnqueueRequests(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 53);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollStateEnqueueRequests(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateEnqueueRequests(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateEnqueueRequests()
{
  return &type metadata for ScrollStateEnqueueRequests;
}

uint64_t destroy for ScrollToScrollStateRequest(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(unsigned char *)(a1 + 73))
  {
    if (*(unsigned char *)(a1 + 185)) {
      goto LABEL_3;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    if (*(unsigned char *)(a1 + 185)) {
      goto LABEL_3;
    }
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
LABEL_3:

  return swift_release();
}

uint64_t initializeWithCopy for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    long long v8 = v6[1];
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  long long v10 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v11 = (_OWORD *)(a1 + 128);
  uint64_t v12 = (_OWORD *)(a2 + 128);
  if (*(unsigned char *)(a2 + 185))
  {
    long long v13 = *(_OWORD *)(a2 + 144);
    *uint64_t v11 = *v12;
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 152) = v14;
    (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v11, v12);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_WORD *)(a1 + 184) = *(unsigned __int8 *)(a2 + 184);
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  uint64_t v15 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(unsigned char *)(a2 + 73))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      unsigned __int8 v8 = *(unsigned char *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 128);
    if (*(unsigned char *)(a2 + 185))
    {
      long long v10 = *(_OWORD *)(a2 + 128);
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v12 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
      *(_OWORD *)(a1 + 144) = v11;
      *(_OWORD *)(a1 + 160) = v12;
      *(_OWORD *)(a1 + 128) = v10;
    }
    else
    {
      uint64_t v13 = *(void *)(a2 + 152);
      *(void *)(a1 + 152) = v13;
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 128, a2 + 128);
      unsigned __int8 v14 = *(unsigned char *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_WORD *)(a1 + 184) = v14;
    }
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  return a1;
}

__n128 __swift_memcpy224_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for ScrollToScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  }
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 128);
    long long v6 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v6;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 170) = *(_OWORD *)(a2 + 170);
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollToScrollStateRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollToScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollToScrollStateRequest()
{
  return &type metadata for ScrollToScrollStateRequest;
}

uint64_t assignWithCopy for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v4)
    {
      *(void *)(a1 + 96) = v4;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 72, a2 + 72);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v5;
    *(_OWORD *)(a1 + 88) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72));
LABEL_8:
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy116_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 72);
  }
  long long v4 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollStateRequestTransform(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 116)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateRequestTransform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 116) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 116) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateRequestTransform()
{
  return &type metadata for ScrollStateRequestTransform;
}

uint64_t assignWithCopy for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(unsigned char *)(a2 + 73))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      unsigned __int8 v8 = *(unsigned char *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    if (*(unsigned char *)(a2 + 153))
    {
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 112);
      long long v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 96) = v9;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 120);
      *(void *)(a1 + 120) = v12;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 96, a2 + 96);
      unsigned __int8 v13 = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = v13;
    }
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

uint64_t assignWithTake for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    long long v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

uint64_t storeEnumTagSinglePayload for UpdateScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 192) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollGeometryPreferenceKey()
{
  return &type metadata for ScrollGeometryPreferenceKey;
}

ValueMetadata *type metadata accessor for ScrollGeometryTransformProvider()
{
  return &type metadata for ScrollGeometryTransformProvider;
}

ValueMetadata *type metadata accessor for ScrollGeometryStateProvider()
{
  return &type metadata for ScrollGeometryStateProvider;
}

ValueMetadata *type metadata accessor for UpdateScrollStateRequestKey()
{
  return &type metadata for UpdateScrollStateRequestKey;
}

ValueMetadata *type metadata accessor for ScrollOverride()
{
  return &type metadata for ScrollOverride;
}

uint64_t sub_245A3764C()
{
  return objectdestroyTm();
}

uint64_t sub_245A37654()
{
  return objectdestroyTm();
}

uint64_t sub_245A3765C()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for TransactionPropertyKey<AnimationKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for TransactionPropertyKey();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_245A376E0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)()
{
  return closure #2 in ScrollStateEnqueueRequests.enqueueRequests(_:)(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 88));
}

uint64_t outlined retain of ScrollStateEnqueueRequests(uint64_t a1)
{
  return a1;
}

uint64_t sub_245A3775C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with copy of PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_245A377CC()
{
  return objectdestroyTm();
}

uint64_t outlined destroy of PositionedByUserScrollStateRequest(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithCopy for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  long long v5 = (_OWORD *)(a1 + 16);
  long long v6 = (_OWORD *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    long long v8 = v6[1];
    *long long v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  long long v10 = (_OWORD *)(a1 + 96);
  long long v11 = (_OWORD *)(a2 + 96);
  if (*(unsigned char *)(a2 + 153))
  {
    long long v12 = *(_OWORD *)(a2 + 112);
    *long long v10 = *v11;
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 120) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v11);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_WORD *)(a1 + 152) = *(unsigned __int8 *)(a2 + 152);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(unsigned char *)(a2 + 73))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      unsigned __int8 v8 = *(unsigned char *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    if (*(unsigned char *)(a2 + 153))
    {
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 112);
      long long v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 96) = v9;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 120);
      *(void *)(a1 + 120) = v12;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 96, a2 + 96);
      unsigned __int8 v13 = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = v13;
    }
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for PositionedByUserScrollStateRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    outlined destroy of ScrollPosition.Storage(a1 + 96);
    long long v5 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionedByUserScrollStateRequest(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionedByUserScrollStateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PositionedByUserScrollStateRequest()
{
  return &type metadata for PositionedByUserScrollStateRequest;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollStateRequestKey()
{
  return &type metadata for _GraphInputs.ScrollStateRequestKey;
}

uint64_t partial apply for closure #1 in PositionedByUserScrollStateRequest.update()()
{
  return closure #1 in PositionedByUserScrollStateRequest.update()(*(void *)(v0 + 16));
}

uint64_t EllipticalGradient.init(stops:center:startRadiusFraction:endRadiusFraction:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return EllipticalGradient.init(colors:center:startRadiusFraction:endRadiusFraction:)((uint64_t (*)(void))specialized Gradient.init(stops:), a1, a2, a3, a4, a5);
}

double AngularGradient.init(gradient:center:angle:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(void *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  double result = (a5 * 128.0 + 804.247719) * 0.0078125;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = result;
  return result;
}

uint64_t LinearGradient.gradient.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinearGradient.gradient.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*LinearGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double LinearGradient.startPoint.getter()
{
  return *(double *)(v0 + 8);
}

void LinearGradient.startPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*LinearGradient.startPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double LinearGradient.endPoint.getter()
{
  return *(double *)(v0 + 24);
}

void LinearGradient.endPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*LinearGradient.endPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.gradient.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t (*LinearGradient._Paint.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double LinearGradient._Paint.startPoint.getter()
{
  return *(double *)(v0 + 16);
}

void LinearGradient._Paint.startPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*LinearGradient._Paint.startPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double LinearGradient._Paint.endPoint.getter()
{
  return *(double *)(v0 + 32);
}

void LinearGradient._Paint.endPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*LinearGradient._Paint.endPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6 = *(unsigned char *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  return result;
}

void static LinearGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t LinearGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v43);
  double v9 = *(double *)v43;
  double v8 = *(double *)&v43[1];
  double v10 = *(double *)&v43[2];
  double v11 = *(double *)&v43[3];
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v14 = a2[2];
  uint64_t v15 = a2[3];
  uint64_t v16 = a2[4];
  char v28 = *((unsigned char *)a2 + 40);
  uint64_t v17 = *v4;
  char v18 = *((unsigned char *)v4 + 8);
  double v20 = *((double *)v4 + 2);
  double v19 = *((double *)v4 + 3);
  double v22 = *((double *)v4 + 4);
  double v21 = *((double *)v4 + 5);
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    double v9 = v23;
    double v8 = v24;
    double v10 = v25;
    double v11 = v26;
  }
  uint64_t v33 = v17;
  char v34 = v18;
  double v35 = v9 + v20 * v10;
  double v36 = v8 + v19 * v11;
  double v37 = v9 + v22 * v10;
  double v38 = v8 + v21 * v11;
  int v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v41 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v12;
  v30[1] = v13;
  v30[2] = v14;
  v30[3] = v15;
  v30[4] = v16;
  char v31 = v28;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ResolvedPaint.resolvedGradient.getter in conformance LinearGradient._Paint@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t LinearGradient._Paint.resolvedGradient.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance LinearGradient._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 0;
}

float64x2_t protocol witness for Animatable.animatableData.getter in conformance LinearGradient._Paint@<Q0>(uint64_t a1@<X8>)
{
  ResolvedGradient.animatableData.getter((uint64_t)&v8);
  uint64_t v3 = v8;
  char v4 = v9;
  float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v6 = vmulq_f64(v1[1], v5);
  float64x2_t result = vmulq_f64(v1[2], v5);
  *(float64x2_t *)a1 = v6;
  *(float64x2_t *)(a1 + 16) = result;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  return result;
}

float64x2_t LinearGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  float64x2_t v11 = *((float64x2_t *)v1 + 2);
  float64x2_t v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v5) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v13 = v3;
    char v14 = v4;
    swift_bridgeObjectRetain();
    v17.stops._rawuint64_t Value = &v13;
    ResolvedGradientVector.init(_:)(v17);
    uint64_t v7 = v15;
    char v6 = v16;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v6 = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_10:
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v9 = vmulq_f64(v11, v8);
  float64x2_t result = vmulq_f64(v12, v8);
  *(float64x2_t *)a1 = result;
  *(float64x2_t *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v6;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance LinearGradient._Paint(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  float64x2_t v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  v1[1] = v5;
  v1[2] = v6;
  uint64_t v8 = v2;
  char v9 = v3;
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t LinearGradient._Paint.animatableData.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  float64x2_t v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  v1[1] = v5;
  v1[2] = v6;
  uint64_t v8 = v2;
  char v9 = v3;
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint(float64x2_t ***a1))()
{
  uint64_t v2 = (float64x2_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float64x2_t *)LinearGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*LinearGradient._Paint.animatableData.modify(float64x2_t **a1))(uint64_t *a1, char a2)
{
  char v3 = (float64x2_t *)malloc(0x50uLL);
  *a1 = v3;
  *(void *)&v3[4].f64[1] = v1;
  uint64_t v4 = *v1;
  char v5 = *((unsigned char *)v1 + 8);
  float64x2_t v11 = *((float64x2_t *)v1 + 2);
  float64x2_t v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v6) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v13 = v4;
    char v14 = v5;
    swift_bridgeObjectRetain();
    v17.stops._rawuint64_t Value = &v13;
    ResolvedGradientVector.init(_:)(v17);
    float64_t v8 = v15;
    char v7 = v16;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  float64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *char v3 = vmulq_f64(v12, v9);
  v3[1] = vmulq_f64(v11, v9);
  v3[2].f64[0] = v8;
  LOBYTE(v3[2].f64[1]) = v7;
  return LinearGradient._Paint.animatableData.modify;
}

void LinearGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  char v3 = *(float64x2_t **)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 32);
  char v5 = *(unsigned char *)(v2 + 40);
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v7 = vmulq_f64(*(float64x2_t *)v2, v6);
  float64x2_t v8 = vmulq_f64(*(float64x2_t *)(v2 + 16), v6);
  v3[1] = v7;
  v3[2] = v8;
  uint64_t v9 = v4;
  char v10 = v5;
  if (a2)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
  }

  free((void *)v2);
}

__n128 LinearGradient.resolvePaint(in:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)v2;
  swift_retain();
  swift_retain();
  outlined retain of LinearGradient(v2);
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v6, v4, v5);
  swift_release();
  swift_release();
  outlined release of LinearGradient(v2);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  char v8 = static ResolvedGradient.ColorSpace.default;
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v8;
  __n128 result = *(__n128 *)(v2 + 8);
  long long v10 = *(_OWORD *)(v2 + 24);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v10;
  return result;
}

double static LinearGradient._makeView<A>(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for LinearGradient, a4, (uint64_t)&protocol witness table for LinearGradient, a5);
}

uint64_t (*RadialGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RadialGradient.startRadius.getter()
{
  return *(double *)(v0 + 24);
}

void RadialGradient.startRadius.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*RadialGradient.startRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void RadialGradient.endRadius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*RadialGradient.endRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient._Paint.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*RadialGradient._Paint.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RadialGradient._Paint.startRadius.getter()
{
  return *(double *)(v0 + 32);
}

void RadialGradient._Paint.startRadius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*RadialGradient._Paint.startRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RadialGradient._Paint.endRadius.getter()
{
  return *(double *)(v0 + 40);
}

void RadialGradient._Paint.endRadius.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*RadialGradient._Paint.endRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static RadialGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL static RadialGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t RadialGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v43);
  double v9 = *(double *)v43;
  double v8 = *(double *)&v43[1];
  double v10 = *(double *)&v43[2];
  double v11 = *(double *)&v43[3];
  uint64_t v12 = a2[2];
  uint64_t v27 = a2[1];
  uint64_t v28 = *a2;
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  char v26 = *((unsigned char *)a2 + 40);
  uint64_t v15 = *v4;
  char v16 = *((unsigned char *)v4 + 8);
  double v18 = *((double *)v4 + 2);
  double v17 = *((double *)v4 + 3);
  uint64_t v19 = v4[4];
  uint64_t v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    double v9 = v21;
    double v8 = v22;
    double v10 = v23;
    double v11 = v24;
  }
  uint64_t v33 = v15;
  char v34 = v16;
  double v35 = v9 + v18 * v10;
  double v36 = v8 + v17 * v11;
  uint64_t v37 = v19;
  uint64_t v38 = v20;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v41 = 1;
  int v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  char v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance RadialGradient._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RadialGradient._Paint(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance RadialGradient._Paint(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RadialGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*RadialGradient._Paint.animatableData.modify(void *a1))()
{
  char v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *v1;
  char v5 = *((unsigned char *)v1 + 8);
  float64x2_t v10 = *((float64x2_t *)v1 + 1);
  long long v11 = *((_OWORD *)v1 + 2);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v6) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v12 = v4;
    char v13 = v5;
    swift_bridgeObjectRetain();
    v16.stops._rawuint64_t Value = &v12;
    ResolvedGradientVector.init(_:)(v16);
    uint64_t v8 = v14;
    char v7 = v15;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  *(float64x2_t *)char v3 = vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v3[2] = v8;
  *((unsigned char *)v3 + 24) = v7;
  *((_OWORD *)v3 + 2) = v11;
  return RadialGradient._Paint.animatableData.modify;
}

double RadialGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

double static RadialGradient._makeView<A>(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for RadialGradient, a4, (uint64_t)&protocol witness table for RadialGradient, a5);
}

uint64_t (*EllipticalGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.startRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient.endRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.startRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*EllipticalGradient._Paint.endRadiusFraction.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static EllipticalGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL static EllipticalGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t EllipticalGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v43);
  double v9 = *(double *)v43;
  double v8 = *(double *)&v43[1];
  CGFloat v10 = *(double *)&v43[2];
  CGFloat v11 = *(double *)&v43[3];
  uint64_t v12 = a2[2];
  uint64_t v27 = a2[1];
  uint64_t v28 = *a2;
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  char v26 = *((unsigned char *)a2 + 40);
  uint64_t v15 = *v4;
  char v16 = *((unsigned char *)v4 + 8);
  double v18 = *((double *)v4 + 2);
  double v17 = *((double *)v4 + 3);
  uint64_t v19 = v4[4];
  uint64_t v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    double v9 = v21;
    double v8 = v22;
    CGFloat v10 = v23;
    CGFloat v11 = v24;
  }
  v45.origin.CGFloat x = v9;
  v45.origin.y = v8;
  v45.size.width = v10;
  v45.size.height = v11;
  v46.origin.CGFloat x = v9 + v18 * CGRectGetWidth(v45);
  v46.origin.y = v8;
  v46.size.width = v10;
  v46.size.height = v11;
  uint64_t v33 = v15;
  char v34 = v16;
  CGFloat x = v46.origin.x;
  double v36 = v8 + v17 * CGRectGetHeight(v46);
  CGFloat v37 = v10;
  CGFloat v38 = v11;
  uint64_t v39 = v19;
  uint64_t v40 = v20;
  char v41 = 3;
  int v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  char v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance EllipticalGradient._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 5;
  *(unsigned char *)(a1 + 8) = 0;
}

__n128 RadialGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  unint64_t v3 = v1->n128_u64[0];
  char v4 = v1->n128_i8[8];
  float64x2_t v9 = (float64x2_t)v1[1];
  __n128 v10 = v1[2];
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v5) {
      goto LABEL_7;
    }
LABEL_9:
    unint64_t v11 = v3;
    char v12 = v4;
    swift_bridgeObjectRetain();
    v15.stops._rawuint64_t Value = &v11;
    ResolvedGradientVector.init(_:)(v15);
    uint64_t v7 = v13;
    char v6 = v14;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v6 = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_10:
  *(float64x2_t *)a1 = vmulq_f64(v9, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v6;
  __n128 result = v10;
  *(__n128 *)(a1 + 32) = v10;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance RadialGradient._Paint(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(float64x2_t *)(v1 + 16) = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  uint64_t v7 = v2;
  char v8 = v3;
  uint64_t result = ResolvedGradient.animatableData.setter(&v7);
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v5;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance EllipticalGradient._Paint(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EllipticalGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t (*EllipticalGradient._Paint.animatableData.modify(void *a1))()
{
  char v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *v1;
  char v5 = *((unsigned char *)v1 + 8);
  float64x2_t v10 = *((float64x2_t *)v1 + 1);
  long long v11 = *((_OWORD *)v1 + 2);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v6) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v12 = v4;
    char v13 = v5;
    swift_bridgeObjectRetain();
    v16.stops._rawuint64_t Value = &v12;
    ResolvedGradientVector.init(_:)(v16);
    uint64_t v8 = v14;
    char v7 = v15;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  *(float64x2_t *)char v3 = vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  v3[2] = v8;
  *((unsigned char *)v3 + 24) = v7;
  *((_OWORD *)v3 + 2) = v11;
  return RadialGradient._Paint.animatableData.modify;
}

void RadialGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  char v3 = *(float64x2_t **)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 16);
  char v5 = *(unsigned char *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v6 = *(void *)(v2 + 40);
  v3[1] = vmulq_f64(*(float64x2_t *)v2, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = v4;
  char v10 = v5;
  if (a2)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    *(void *)(v8 + 32) = v7;
    *(void *)(v8 + 40) = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
    *(void *)(v8 + 32) = v7;
    *(void *)(v8 + 40) = v6;
  }

  free((void *)v2);
}

double EllipticalGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

uint64_t (*AngularGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.startAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient.endAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LinearGradient._Paint.gradient.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t (*AngularGradient._Paint.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.startAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*AngularGradient._Paint.endAngle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t RadialGradient._Paint.init(gradient:center:startRadius:endRadius:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v6 = *(unsigned char *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  return result;
}

void static AngularGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 4;
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL static AngularGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static RadialGradient._Paint.== infix(_:_:)(a1, a2);
}

uint64_t AngularGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v43);
  double v9 = *(double *)v43;
  double v8 = *(double *)&v43[1];
  double v10 = *(double *)&v43[2];
  double v11 = *(double *)&v43[3];
  uint64_t v12 = a2[2];
  uint64_t v27 = a2[1];
  uint64_t v28 = *a2;
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  char v26 = *((unsigned char *)a2 + 40);
  uint64_t v15 = *v4;
  char v16 = *((unsigned char *)v4 + 8);
  double v18 = *((double *)v4 + 2);
  double v17 = *((double *)v4 + 3);
  uint64_t v19 = v4[4];
  uint64_t v20 = v4[5];
  outlined init with take of CGRect?(a4, (uint64_t)v44);
  if (v44[32] == 1)
  {
    Path.boundingRect.getter();
    double v9 = v21;
    double v8 = v22;
    double v10 = v23;
    double v11 = v24;
  }
  uint64_t v33 = v15;
  char v34 = v16;
  double v35 = v9 + v18 * v10;
  double v36 = v8 + v17 * v11;
  uint64_t v37 = v19;
  uint64_t v38 = v20;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v41 = 5;
  int v42 = 0;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v33);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v33, (uint64_t)v32);
  v30[0] = v28;
  v30[1] = v27;
  v30[2] = v12;
  v30[3] = v13;
  v30[4] = v14;
  char v31 = v26;
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v32, (uint64_t)v30, a3);
  return swift_bridgeObjectRelease();
}

BOOL LinearGradient._Paint.isClear.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = (float *)(*(void *)v0 + 44);
    uint64_t v3 = 1;
    LOBYTE(result) = 1;
    do
    {
      if (result)
      {
        BOOL result = *v2 == 0.0;
        if (v1 == v3) {
          return result;
        }
      }
      else
      {
        BOOL result = 0;
        if (v1 == v3) {
          return result;
        }
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 1;
}

BOOL LinearGradient._Paint.isOpaque.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    uint64_t v2 = (float *)(*(void *)v0 + 44);
    uint64_t v3 = 1;
    LOBYTE(result) = 1;
    do
    {
      if (result)
      {
        BOOL result = *v2 == 1.0;
        if (v1 == v3) {
          return result;
        }
      }
      else
      {
        BOOL result = 0;
        if (v1 == v3) {
          return result;
        }
      }
      v2 += 12;
    }
    while (!__OFADD__(v3++, 1));
    __break(1u);
  }
  return 0;
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance AngularGradient._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 4;
  *(unsigned char *)(a1 + 8) = 0;
}

float64x2_t AngularGradient._Paint.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  float64x2_t v10 = *((float64x2_t *)v1 + 1);
  float64x2_t v11 = *((float64x2_t *)v1 + 2);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v5) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v12 = v3;
    char v13 = v4;
    swift_bridgeObjectRetain();
    v16.stops._rawuint64_t Value = &v12;
    ResolvedGradientVector.init(_:)(v16);
    uint64_t v7 = v14;
    char v6 = v15;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v6 = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_10:
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *(float64x2_t *)a1 = vmulq_f64(v10, v8);
  float64x2_t result = vmulq_f64(v11, v8);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v6;
  *(float64x2_t *)(a1 + 32) = result;
  return result;
}

float64x2_t protocol witness for Animatable.animatableData.setter in conformance AngularGradient._Paint(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v1[1] = vmulq_f64(*(float64x2_t *)a1, v6);
  uint64_t v7 = v3;
  char v8 = v4;
  ResolvedGradient.animatableData.setter(&v7);
  float64x2_t result = vmulq_f64(*(float64x2_t *)(a1 + 32), v6);
  v1[2] = result;
  return result;
}

float64x2_t AngularGradient._Paint.animatableData.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  v1[1] = vmulq_f64(*(float64x2_t *)a1, v6);
  uint64_t v7 = v3;
  char v8 = v4;
  ResolvedGradient.animatableData.setter(&v7);
  float64x2_t result = vmulq_f64(*(float64x2_t *)(a1 + 32), v6);
  v1[2] = result;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance AngularGradient._Paint(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AngularGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void (*AngularGradient._Paint.animatableData.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *v1;
  char v5 = *((unsigned char *)v1 + 8);
  float64x2_t v11 = *((float64x2_t *)v1 + 2);
  float64x2_t v12 = *((float64x2_t *)v1 + 1);
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v6) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v13 = v4;
    char v14 = v5;
    swift_bridgeObjectRetain();
    v17.stops._rawuint64_t Value = &v13;
    ResolvedGradientVector.init(_:)(v17);
    uint64_t v8 = v15;
    char v7 = v16;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  char v7 = 0;
  uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_10:
  float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  *(float64x2_t *)uint64_t v3 = vmulq_f64(v12, v9);
  v3[2] = v8;
  *((unsigned char *)v3 + 24) = v7;
  *((float64x2_t *)v3 + 2) = vmulq_f64(v11, v9);
  return AngularGradient._Paint.animatableData.modify;
}

void AngularGradient._Paint.animatableData.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(float64x2_t **)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 16);
  char v5 = *(unsigned char *)(v2 + 24);
  double v7 = *(double *)(v2 + 32);
  double v6 = *(double *)(v2 + 40);
  v3[1] = vmulq_f64(*(float64x2_t *)v2, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = v4;
  char v10 = v5;
  if (a2)
  {
    swift_bridgeObjectRetain();
    ResolvedGradient.animatableData.setter(&v9);
    *(double *)(v8 + 32) = v7 * 0.0078125;
    *(double *)(v8 + 40) = v6 * 0.0078125;
    swift_bridgeObjectRelease();
  }
  else
  {
    ResolvedGradient.animatableData.setter(&v9);
    *(double *)(v8 + 32) = v7 * 0.0078125;
    *(double *)(v8 + 40) = v6 * 0.0078125;
  }

  free((void *)v2);
}

double AngularGradient.resolvePaint(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = RadialGradient.resolvePaint(in:)(a1, (void (*)(uint64_t))outlined retain of RadialGradient, (void (*)(uint64_t))outlined release of RadialGradient, a2).n128_u64[0];
  return result;
}

__n128 RadialGradient.resolvePaint(in:)@<Q0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *(void *)v4;
  swift_retain();
  swift_retain();
  a2(v4);
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(v10, v8, v9);
  swift_release();
  swift_release();
  a3(v4);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  char v12 = static ResolvedGradient.ColorSpace.default;
  *(void *)a4 = v11;
  *(unsigned char *)(a4 + 8) = v12;
  __n128 result = *(__n128 *)(v4 + 8);
  long long v14 = *(_OWORD *)(v4 + 24);
  *(__n128 *)(a4 + 16) = result;
  *(_OWORD *)(a4 + 32) = v14;
  return result;
}

uint64_t LinearGradient.fallbackColor(in:)()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

double static AngularGradient._makeView<A>(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ShapeView._makeView(view:inputs:)(a1, a2, a3, &type metadata for AngularGradient, a4, (uint64_t)&protocol witness table for AngularGradient, a5);
}

float64x2_t key path getter for LinearGradient._Paint.animatableData : LinearGradient._Paint@<Q0>(float64x2_t *a1@<X0>, uint64_t a2@<X8>)
{
  ResolvedGradient.animatableData.getter((uint64_t)&v9);
  uint64_t v4 = v9;
  char v5 = v10;
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
  float64x2_t v7 = vmulq_f64(a1[1], v6);
  float64x2_t result = vmulq_f64(a1[2], v6);
  *(float64x2_t *)a2 = v7;
  *(float64x2_t *)(a2 + 16) = result;
  *(void *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 40) = v5;
  return result;
}

uint64_t key path setter for LinearGradient._Paint.animatableData : LinearGradient._Paint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);
  float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL);
  float64x2_t v5 = vmulq_f64(*(float64x2_t *)a1, v4);
  float64x2_t v6 = vmulq_f64(*(float64x2_t *)(a1 + 16), v4);
  a2[1] = v5;
  a2[2] = v6;
  uint64_t v8 = v2;
  char v9 = v3;
  swift_bridgeObjectRetain();
  return ResolvedGradient.animatableData.setter(&v8);
}

uint64_t LinearGradient._Paint.encode(to:)(uint64_t a1)
{
  char v3 = v1;
  double v5 = v3[2];
  double v6 = v3[3];
  double v7 = v3[4];
  double v8 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  if (one-time initialization token for zero != -1) {
    uint64_t result = swift_once();
  }
  double v10 = *(double *)&static UnitPoint.zero;
  double v11 = *(double *)algn_268EF2558;
  if (v5 != *(double *)&static UnitPoint.zero || v6 != *(double *)algn_268EF2558)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v13 = *(void *)(a1 + 8);
    long long v14 = *(void **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v15 = v14[2];
    unint64_t v16 = v14[3];
    unint64_t v17 = v15 + 1;
    if (v15 >= v16 >> 1)
    {
      unint64_t v27 = v15 + 1;
      double v22 = v14;
      unint64_t v23 = v14[2];
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v15 + 1, 1, v22);
      unint64_t v15 = v23;
      unint64_t v17 = v27;
      long long v14 = v24;
    }
    _OWORD v14[2] = v17;
    v14[v15 + 4] = v13;
    *(void *)(a1 + 24) = v14;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_25:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      long long v14 = (void *)result;
      goto LABEL_19;
    }
    *(void *)(a1 + 8) = v13 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    uint64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v7 == v10 && v8 == v11) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
  uint64_t v13 = *(void *)(a1 + 8);
  long long v14 = *(void **)(a1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_25;
  }
LABEL_19:
  unint64_t v19 = v14[2];
  unint64_t v20 = v14[3];
  unint64_t v21 = v19 + 1;
  if (v19 >= v20 >> 1)
  {
    unint64_t v28 = v19 + 1;
    double v25 = v14;
    unint64_t v26 = v14[2];
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v19 + 1, 1, v25);
    unint64_t v19 = v26;
    unint64_t v21 = v28;
    long long v14 = (void *)result;
  }
  _OWORD v14[2] = v21;
  v14[v19 + 4] = v13;
  *(void *)(a1 + 24) = v14;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v13 + 1;
    UnitPoint.encode(to:)((double *)a1, v7, v8);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

unint64_t LinearGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  char v3 = (void *)result;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  char v5 = static ResolvedGradient.ColorSpace.default;
  if (one-time initialization token for zero != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v6 = static UnitPoint.zero;
  uint64_t v7 = *(void *)algn_268EF2558;
  unint64_t v8 = v3[1];
  unint64_t v9 = v3[2];
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t v11 = static UnitPoint.zero;
  uint64_t v12 = *(void *)algn_268EF2558;
  while (1)
  {
    if (v8 >= v9) {
      goto LABEL_70;
    }
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v17 = v3[4];
      if (v8 < v17) {
        goto LABEL_16;
      }
      if (v17 < v8) {
        goto LABEL_71;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result <= 7) {
      goto LABEL_71;
    }
LABEL_16:
    unint64_t v18 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 2) {
        goto LABEL_71;
      }
      char v29 = (void *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      }
      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1) {
        char v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
      }
      v29[2] = v31 + 1;
      v29[v31 + 4] = v9;
      v3[5] = v29;
      uint64_t v32 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      if (v32 < 0) {
        goto LABEL_81;
      }
      unint64_t v33 = v3[1] + v32;
      if (v9 < v33) {
        goto LABEL_71;
      }
      v3[2] = v33;
      double v34 = specialized UnitPoint.init(from:)(v3);
      uint64_t v13 = (void *)v3[5];
      if (!v13[2]) {
        goto LABEL_84;
      }
      uint64_t v6 = *(void *)&v34;
      uint64_t v12 = v35;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v14 = v13[2];
        if (!v14) {
          goto LABEL_85;
        }
      }
      else
      {
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        uint64_t v13 = (void *)result;
        uint64_t v14 = *(void *)(result + 16);
        if (!v14) {
          goto LABEL_85;
        }
      }
LABEL_7:
      uint64_t v15 = v14 - 1;
      uint64_t v16 = v13[v15 + 4];
      v13[2] = v15;
      v3[5] = v13;
      v3[2] = v16;
      goto LABEL_8;
    }
    if (v18 == 2)
    {
      if ((result & 7) != 2) {
        goto LABEL_71;
      }
      double v36 = (void *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      }
      unint64_t v38 = v36[2];
      unint64_t v37 = v36[3];
      if (v38 >= v37 >> 1) {
        double v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v36);
      }
      v36[2] = v38 + 1;
      v36[v38 + 4] = v9;
      v3[5] = v36;
      uint64_t v39 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return swift_bridgeObjectRelease();
      }
      if (v39 < 0) {
        goto LABEL_82;
      }
      unint64_t v40 = v3[1] + v39;
      if (v9 < v40)
      {
LABEL_71:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
      v3[2] = v40;
      double v41 = specialized UnitPoint.init(from:)(v3);
      uint64_t v13 = (void *)v3[5];
      if (!v13[2]) {
        goto LABEL_86;
      }
      uint64_t v11 = *(void *)&v41;
      uint64_t v7 = v42;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v14 = v13[2];
        if (!v14) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        uint64_t v13 = (void *)result;
        uint64_t v14 = *(void *)(result + 16);
        if (!v14)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          v3[3] = 0;
          *a2 = v10;
          *((unsigned char *)a2 + 8) = v5;
          a2[2] = v11;
          a2[3] = v7;
          a2[4] = v6;
          a2[5] = v12;
          return result;
        }
      }
      goto LABEL_7;
    }
    if (v18 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          goto LABEL_8;
        case 1uLL:
          unint64_t v43 = v3[1] + 8;
          if (v9 < v43) {
            goto LABEL_71;
          }
          goto LABEL_65;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return swift_bridgeObjectRelease();
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_88;
          }
          unint64_t v43 = v3[1] + result;
          if (v9 < v43) {
            goto LABEL_71;
          }
LABEL_65:
          v3[1] = v43;
          break;
        case 5uLL:
          unint64_t v43 = v3[1] + 4;
          if (v9 < v43) {
            goto LABEL_71;
          }
          goto LABEL_65;
        default:
          goto LABEL_71;
      }
      goto LABEL_8;
    }
    if ((result & 7) != 2) {
      goto LABEL_71;
    }
    unint64_t v19 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    }
    unint64_t v21 = v19[2];
    unint64_t v20 = v19[3];
    if (v21 >= v20 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
    }
    v19[2] = v21 + 1;
    v19[v21 + 4] = v9;
    v3[5] = v19;
    uint64_t v22 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (v22 < 0) {
      break;
    }
    unint64_t v23 = v3[1] + v22;
    if (v9 < v23) {
      goto LABEL_71;
    }
    v3[2] = v23;
    ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v47);
    double v24 = (void *)v3[5];
    if (!v24[2]) {
      goto LABEL_83;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v25 = v24[2];
      if (!v25) {
        goto LABEL_87;
      }
    }
    else
    {
      double v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v25 = v24[2];
      if (!v25) {
        goto LABEL_87;
      }
    }
    uint64_t v26 = v25 - 1;
    uint64_t v27 = v24[v26 + 4];
    v24[2] = v26;
    v3[5] = v24;
    v3[2] = v27;
    uint64_t v28 = v47;
    char v5 = v48;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = v28;
LABEL_8:
    unint64_t v8 = v3[1];
    unint64_t v9 = v3[2];
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_90:
    a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
    uint64_t v44 = a2[2];
    if (!v44)
    {
LABEL_75:
      __break(1u);
      a2 = (void *)v3[5];
      if (a2[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v44 = a2[2];
          if (v44) {
            break;
          }
LABEL_94:
          __break(1u);
          a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
          uint64_t v44 = a2[2];
          if (v44) {
            break;
          }
          __break(1u);
          a2 = (void *)v3[5];
          if (!a2[2]) {
            continue;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_90;
          }
          uint64_t v44 = a2[2];
          if (v44) {
            break;
          }
          goto LABEL_75;
        }
      }
      else
      {
        __break(1u);
      }
      a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
      uint64_t v44 = a2[2];
      if (v44) {
        break;
      }
      goto LABEL_94;
    }
    break;
  }
  uint64_t v45 = v44 - 1;
  uint64_t v46 = a2[v45 + 4];
  a2[2] = v45;
  v3[5] = a2;
  v3[2] = v46;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance LinearGradient._Paint(uint64_t a1)
{
  return LinearGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance LinearGradient._Paint@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  return LinearGradient._Paint.init(from:)(a1, a2);
}

int64_t RadialGradient._Paint.encode(to:)(uint64_t a1)
{
  char v3 = v1;
  double v5 = v3[2];
  double v6 = v3[3];
  double v8 = v3[4];
  double v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  int64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  if (one-time initialization token for zero != -1) {
    int64_t result = swift_once();
  }
  if (v5 != *(double *)&static UnitPoint.zero || v6 != *(double *)algn_268EF2558)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void **)(a1 + 24);
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      uint64_t v12 = (void *)result;
    }
    unint64_t v13 = v12[2];
    unint64_t v14 = v12[3];
    unint64_t v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      unint64_t v25 = v13 + 1;
      unint64_t v23 = v12;
      unint64_t v24 = v12[2];
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v13 + 1, 1, v23);
      unint64_t v13 = v24;
      unint64_t v15 = v25;
      uint64_t v12 = (void *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(void *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    *(void *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    int64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    double v5 = fabs(v8);
    if (v5 >= 65536.0) {
      Swift::UInt v16 = 25;
    }
    else {
      Swift::UInt v16 = 29;
    }
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      int64_t result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(double *)(*(void *)a1 + v18) = v8;
        goto LABEL_25;
      }
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)int64_t result = v8;
      goto LABEL_25;
    }
    uint64_t v17 = *(void *)(a1 + 8);
    int64_t result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&double v5 = v8;
      if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(_DWORD *)(*(void *)a1 + v17) = LODWORD(v5);
        goto LABEL_25;
      }
LABEL_39:
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)int64_t result = LODWORD(v5);
      goto LABEL_25;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_25:
  if (v7 == 0.0) {
    return result;
  }
  double v19 = fabs(v7);
  if (v19 >= 65536.0) {
    Swift::UInt v20 = 33;
  }
  else {
    Swift::UInt v20 = 37;
  }
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    int64_t result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(double *)(*(void *)a1 + v22) = v7;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)int64_t result = v7;
    return result;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  int64_t result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&double v19 = v7;
    if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(_DWORD *)(*(void *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)int64_t result = LODWORD(v19);
  return result;
}

unint64_t RadialGradient._Paint.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance RadialGradient._Paint(uint64_t a1)
{
  return RadialGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance RadialGradient._Paint@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

double key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint@<D0>(void (*a1)(long long *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v6);
  uint64_t v3 = v7;
  char v4 = v8;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = v4;
  double result = *(double *)&v9;
  *(_OWORD *)(a2 + 32) = v9;
  return result;
}

uint64_t key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  *(float64x2_t *)(a2 + 16) = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  uint64_t v8 = v3;
  char v9 = v4;
  swift_bridgeObjectRetain();
  uint64_t result = ResolvedGradient.animatableData.setter(&v8);
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v6;
  return result;
}

int64_t EllipticalGradient._Paint.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  double v5 = v3[2];
  double v6 = v3[3];
  double v8 = v3[4];
  double v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  int64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  if (v5 != 0.5 || v6 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(void **)(a1 + 24);
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      uint64_t v12 = (void *)result;
    }
    unint64_t v13 = v12[2];
    unint64_t v14 = v12[3];
    unint64_t v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      unint64_t v25 = v13 + 1;
      unint64_t v23 = v12;
      unint64_t v24 = v12[2];
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v13 + 1, 1, v23);
      unint64_t v13 = v24;
      unint64_t v15 = v25;
      uint64_t v12 = (void *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(void *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    *(void *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    int64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    double v5 = fabs(v8);
    if (v5 >= 65536.0) {
      Swift::UInt v16 = 25;
    }
    else {
      Swift::UInt v16 = 29;
    }
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      int64_t result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(double *)(*(void *)a1 + v18) = v8;
        goto LABEL_23;
      }
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)int64_t result = v8;
      goto LABEL_23;
    }
    uint64_t v17 = *(void *)(a1 + 8);
    int64_t result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&double v5 = v8;
      if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(_DWORD *)(*(void *)a1 + v17) = LODWORD(v5);
        goto LABEL_23;
      }
LABEL_37:
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)int64_t result = LODWORD(v5);
      goto LABEL_23;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_23:
  if (v7 == 0.0) {
    return result;
  }
  double v19 = fabs(v7);
  if (v19 >= 65536.0) {
    Swift::UInt v20 = 33;
  }
  else {
    Swift::UInt v20 = 37;
  }
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    int64_t result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(double *)(*(void *)a1 + v22) = v7;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)int64_t result = v7;
    return result;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  int64_t result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&double v19 = v7;
    if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(_DWORD *)(*(void *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)int64_t result = LODWORD(v19);
  return result;
}

unint64_t EllipticalGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  if (one-time initialization token for default != -1) {
    int64_t result = swift_once();
  }
  char v5 = static ResolvedGradient.ColorSpace.default;
  unint64_t v6 = v3[1];
  unint64_t v7 = v3[2];
  uint64_t v8 = MEMORY[0x263F8EE78];
  double v9 = 0.5;
  double v10 = 0.0;
  double v11 = 0.5;
  double v12 = 0.0;
  while (2)
  {
    if (v6 >= v7) {
      goto LABEL_76;
    }
    int64_t result = v3[3];
    if (result)
    {
      unint64_t v14 = v3[4];
      if (v6 < v14) {
        goto LABEL_14;
      }
      if (v14 < v6) {
        goto LABEL_77;
      }
      v3[3] = 0;
    }
    int64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result <= 7)
    {
LABEL_77:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        unint64_t v15 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        }
        unint64_t v17 = v15[2];
        unint64_t v16 = v15[3];
        if (v17 >= v16 >> 1) {
          unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
        }
        v15[2] = v17 + 1;
        v15[v17 + 4] = v7;
        v3[5] = v15;
        uint64_t v18 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if ((v18 & 0x8000000000000000) == 0)
        {
          unint64_t v19 = v3[1] + v18;
          if (v7 < v19) {
            goto LABEL_77;
          }
          v3[2] = v19;
          ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v48);
          Swift::UInt v20 = (void *)v3[5];
          if (!v20[2]) {
            goto LABEL_85;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v21 = v20[2];
            if (!v21) {
              goto LABEL_87;
            }
          }
          else
          {
            Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
            uint64_t v21 = v20[2];
            if (!v21) {
              goto LABEL_87;
            }
          }
          uint64_t v22 = v21 - 1;
          uint64_t v23 = v20[v22 + 4];
          _OWORD v20[2] = v22;
          v3[5] = v20;
          v3[2] = v23;
          uint64_t v24 = v48;
          char v5 = v49;
          int64_t result = swift_bridgeObjectRelease();
          uint64_t v8 = v24;
LABEL_6:
          unint64_t v6 = v3[1];
          unint64_t v7 = v3[2];
          continue;
        }
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        __break(1u);
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        uint64_t v45 = v44[2];
        if (v45) {
          goto LABEL_82;
        }
        __break(1u);
        uint64_t v44 = (void *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_93:
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          uint64_t v45 = v44[2];
          if (v45) {
            goto LABEL_82;
          }
LABEL_94:
          __break(1u);
          JUMPOUT(0x245A3B2C8);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_93;
        }
        uint64_t v45 = v44[2];
        if (!v45) {
          goto LABEL_94;
        }
LABEL_82:
        uint64_t v46 = v45 - 1;
        uint64_t v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return swift_bridgeObjectRelease();
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_77;
        }
        unint64_t v25 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
        }
        v25[2] = v27 + 1;
        v25[v27 + 4] = v7;
        v3[5] = v25;
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if (v28 < 0) {
          goto LABEL_84;
        }
        unint64_t v29 = v3[1] + v28;
        if (v7 < v29) {
          goto LABEL_77;
        }
        v3[2] = v29;
        double v30 = specialized UnitPoint.init(from:)(v3);
        uint64_t v32 = (void *)v3[5];
        if (!v32[2]) {
          goto LABEL_86;
        }
        double v11 = v30;
        double v9 = v31;
        int64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v33 = v32[2];
          if (!v33) {
            goto LABEL_75;
          }
        }
        else
        {
          int64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          uint64_t v32 = (void *)result;
          uint64_t v33 = *(void *)(result + 16);
          if (!v33)
          {
LABEL_75:
            __break(1u);
LABEL_76:
            v3[3] = 0;
            *(void *)a2 = v8;
            *(unsigned char *)(a2 + 8) = v5;
            *(double *)(a2 + 16) = v11;
            *(double *)(a2 + 24) = v9;
            *(double *)(a2 + 32) = v10;
            *(double *)(a2 + 40) = v12;
            return result;
          }
        }
        uint64_t v34 = v33 - 1;
        uint64_t v35 = v32[v34 + 4];
        v32[2] = v34;
        v3[5] = v32;
        v3[2] = v35;
        goto LABEL_6;
      case 3uLL:
        unint64_t v36 = result & 7;
        if (v36 == 5)
        {
          unint64_t v40 = (float *)v3[1];
          if (v7 < (unint64_t)(v40 + 1)) {
            goto LABEL_77;
          }
          float v41 = *v40;
          v3[1] = v40 + 1;
          double v10 = v41;
        }
        else
        {
          if (v36 == 2)
          {
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_88;
            }
            unint64_t v37 = (double *)v3[1];
            if (v7 < (unint64_t)v37 + result) {
              goto LABEL_77;
            }
            v3[3] = 25;
            v3[4] = (char *)v37 + result;
          }
          else
          {
            if (v36 != 1) {
              goto LABEL_77;
            }
            unint64_t v37 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v37 + 1)) {
            goto LABEL_77;
          }
          double v10 = *v37;
          v3[1] = v37 + 1;
        }
        goto LABEL_6;
      case 4uLL:
        unint64_t v38 = result & 7;
        if (v38 == 5)
        {
          uint64_t v42 = (float *)v3[1];
          if (v7 < (unint64_t)(v42 + 1)) {
            goto LABEL_77;
          }
          float v43 = *v42;
          v3[1] = v42 + 1;
          double v12 = v43;
        }
        else
        {
          if (v38 == 2)
          {
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_89;
            }
            uint64_t v39 = (double *)v3[1];
            if (v7 < (unint64_t)v39 + result) {
              goto LABEL_77;
            }
            v3[3] = 33;
            v3[4] = (char *)v39 + result;
          }
          else
          {
            if (v38 != 1) {
              goto LABEL_77;
            }
            uint64_t v39 = (double *)v3[1];
          }
          if (v7 < (unint64_t)(v39 + 1)) {
            goto LABEL_77;
          }
          double v12 = *v39;
          v3[1] = v39 + 1;
        }
        goto LABEL_6;
      default:
        switch(result & 7)
        {
          case 0uLL:
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            goto LABEL_6;
          case 1uLL:
            unint64_t v13 = v3[1] + 8;
            if (v7 >= v13) {
              goto LABEL_5;
            }
            goto LABEL_77;
          case 2uLL:
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_90;
            }
            unint64_t v13 = v3[1] + result;
            if (v7 < v13) {
              goto LABEL_77;
            }
LABEL_5:
            v3[1] = v13;
            break;
          case 5uLL:
            unint64_t v13 = v3[1] + 4;
            if (v7 < v13) {
              goto LABEL_77;
            }
            goto LABEL_5;
          default:
            goto LABEL_77;
        }
        goto LABEL_6;
    }
  }
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance EllipticalGradient._Paint(uint64_t a1)
{
  return EllipticalGradient._Paint.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance EllipticalGradient._Paint@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EllipticalGradient._Paint.init(from:)(a1, a2);
}

double key path getter for AngularGradient._Paint.animatableData : AngularGradient._Paint@<D0>(uint64_t a1@<X8>)
{
  AngularGradient._Paint.animatableData.getter((uint64_t)&v5);
  uint64_t v2 = v6;
  char v3 = v7;
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 24) = v3;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 32) = v8;
  return result;
}

double key path setter for AngularGradient._Paint.animatableData : AngularGradient._Paint(uint64_t a1, float64x2_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  double v5 = *(double *)(a1 + 32);
  double v6 = *(double *)(a1 + 40);
  a2[1] = vmulq_f64(*(float64x2_t *)a1, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  uint64_t v8 = v3;
  char v9 = v4;
  swift_bridgeObjectRetain();
  ResolvedGradient.animatableData.setter(&v8);
  double result = v6 * 0.0078125;
  a2[2].f64[0] = v5 * 0.0078125;
  a2[2].f64[1] = v6 * 0.0078125;
  return result;
}

int64_t AngularGradient._Paint.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  double v5 = v3[2];
  double v6 = v3[3];
  double v8 = v3[4];
  double v7 = v3[5];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  int64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  if (one-time initialization token for zero != -1) {
    int64_t result = swift_once();
  }
  if (v5 != *(double *)&static UnitPoint.zero || v6 != *(double *)algn_268EF2558)
  {
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v11 = *(void *)(a1 + 8);
    double v12 = *(void **)(a1 + 24);
    int64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      double v12 = (void *)result;
    }
    unint64_t v13 = v12[2];
    unint64_t v14 = v12[3];
    unint64_t v15 = v13 + 1;
    if (v13 >= v14 >> 1)
    {
      unint64_t v25 = v13 + 1;
      uint64_t v23 = v12;
      unint64_t v24 = v12[2];
      int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v13 + 1, 1, v23);
      unint64_t v13 = v24;
      unint64_t v15 = v25;
      double v12 = (void *)result;
    }
    v12[2] = v15;
    v12[v13 + 4] = v11;
    *(void *)(a1 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    *(void *)(a1 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)a1, v5, v6);
    int64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  if (v8 != 0.0)
  {
    double v5 = fabs(v8);
    if (v5 >= 65536.0) {
      Swift::UInt v16 = 25;
    }
    else {
      Swift::UInt v16 = 29;
    }
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v5 >= 65536.0)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      int64_t result = v18 + 8;
      if (__OFADD__(v18, 8))
      {
        __break(1u);
      }
      else if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(double *)(*(void *)a1 + v18) = v8;
        goto LABEL_25;
      }
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(double *)int64_t result = v8;
      goto LABEL_25;
    }
    uint64_t v17 = *(void *)(a1 + 8);
    int64_t result = v17 + 4;
    if (!__OFADD__(v17, 4))
    {
      *(float *)&double v5 = v8;
      if (*(void *)(a1 + 16) >= result)
      {
        *(void *)(a1 + 8) = result;
        *(_DWORD *)(*(void *)a1 + v17) = LODWORD(v5);
        goto LABEL_25;
      }
LABEL_39:
      int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
      *(_DWORD *)int64_t result = LODWORD(v5);
      goto LABEL_25;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_25:
  if (v7 == 0.0) {
    return result;
  }
  double v19 = fabs(v7);
  if (v19 >= 65536.0) {
    Swift::UInt v20 = 33;
  }
  else {
    Swift::UInt v20 = 37;
  }
  ProtobufEncoder.encodeVarint(_:)(v20);
  if (v19 >= 65536.0)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    int64_t result = v22 + 8;
    if (__OFADD__(v22, 8))
    {
      __break(1u);
    }
    else if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(double *)(*(void *)a1 + v22) = v7;
      return result;
    }
    int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
    *(double *)int64_t result = v7;
    return result;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  int64_t result = v21 + 4;
  if (__OFADD__(v21, 4))
  {
    __break(1u);
  }
  else
  {
    *(float *)&double v19 = v7;
    if (*(void *)(a1 + 16) >= result)
    {
      *(void *)(a1 + 8) = result;
      *(_DWORD *)(*(void *)a1 + v21) = LODWORD(v19);
      return result;
    }
  }
  int64_t result = ProtobufEncoder.growBufferSlow(to:)(result);
  *(_DWORD *)int64_t result = LODWORD(v19);
  return result;
}

unint64_t AngularGradient._Paint.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RadialGradient._Paint.init(from:)(a1, a2);
}

unint64_t RadialGradient._Paint.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  if (one-time initialization token for default != -1) {
    int64_t result = swift_once();
  }
  char v5 = static ResolvedGradient.ColorSpace.default;
  if (one-time initialization token for zero != -1) {
    int64_t result = swift_once();
  }
  uint64_t v6 = static UnitPoint.zero;
  uint64_t v7 = *(void *)algn_268EF2558;
  unint64_t v8 = v3[1];
  unint64_t v9 = v3[2];
  uint64_t v10 = MEMORY[0x263F8EE78];
  double v11 = 0.0;
  double v12 = 0.0;
  while (2)
  {
    if (v8 >= v9) {
      goto LABEL_78;
    }
    int64_t result = v3[3];
    if (result)
    {
      unint64_t v14 = v3[4];
      if (v8 < v14) {
        goto LABEL_16;
      }
      if (v14 < v8) {
        goto LABEL_79;
      }
      v3[3] = 0;
    }
    int64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    if (result <= 7)
    {
LABEL_79:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return swift_bridgeObjectRelease();
    }
LABEL_16:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_79;
        }
        unint64_t v15 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        }
        unint64_t v17 = v15[2];
        unint64_t v16 = v15[3];
        if (v17 >= v16 >> 1) {
          unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
        }
        v15[2] = v17 + 1;
        v15[v17 + 4] = v9;
        v3[5] = v15;
        uint64_t v18 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if ((v18 & 0x8000000000000000) == 0)
        {
          unint64_t v19 = v3[1] + v18;
          if (v9 < v19) {
            goto LABEL_79;
          }
          v3[2] = v19;
          ResolvedGradient.init(from:)((unint64_t)v3, (uint64_t)&v48);
          Swift::UInt v20 = (void *)v3[5];
          if (!v20[2]) {
            goto LABEL_87;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v21 = v20[2];
            if (!v21) {
              goto LABEL_89;
            }
          }
          else
          {
            Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
            uint64_t v21 = v20[2];
            if (!v21) {
              goto LABEL_89;
            }
          }
          uint64_t v22 = v21 - 1;
          uint64_t v23 = v20[v22 + 4];
          _OWORD v20[2] = v22;
          v3[5] = v20;
          v3[2] = v23;
          uint64_t v24 = v48;
          char v5 = v49;
          int64_t result = swift_bridgeObjectRelease();
          uint64_t v10 = v24;
LABEL_8:
          unint64_t v8 = v3[1];
          unint64_t v9 = v3[2];
          continue;
        }
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        __break(1u);
        uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        uint64_t v45 = v44[2];
        if (v45) {
          goto LABEL_84;
        }
        __break(1u);
        uint64_t v44 = (void *)v3[5];
        if (!v44[2])
        {
          __break(1u);
LABEL_95:
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
          uint64_t v45 = v44[2];
          if (v45) {
            goto LABEL_84;
          }
LABEL_96:
          __break(1u);
          JUMPOUT(0x245A3BD20);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_95;
        }
        uint64_t v45 = v44[2];
        if (!v45) {
          goto LABEL_96;
        }
LABEL_84:
        uint64_t v46 = v45 - 1;
        uint64_t v47 = v44[v46 + 4];
        v44[2] = v46;
        v3[5] = v44;
        v3[2] = v47;
        return swift_bridgeObjectRelease();
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_79;
        }
        unint64_t v25 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1) {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
        }
        v25[2] = v27 + 1;
        v25[v27 + 4] = v9;
        v3[5] = v25;
        uint64_t v28 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return swift_bridgeObjectRelease();
        }
        if (v28 < 0) {
          goto LABEL_86;
        }
        unint64_t v29 = v3[1] + v28;
        if (v9 < v29) {
          goto LABEL_79;
        }
        v3[2] = v29;
        double v30 = specialized UnitPoint.init(from:)(v3);
        uint64_t v32 = (void *)v3[5];
        if (!v32[2]) {
          goto LABEL_88;
        }
        uint64_t v6 = *(void *)&v30;
        uint64_t v7 = v31;
        int64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v33 = v32[2];
          if (!v33) {
            goto LABEL_77;
          }
        }
        else
        {
          int64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          uint64_t v32 = (void *)result;
          uint64_t v33 = *(void *)(result + 16);
          if (!v33)
          {
LABEL_77:
            __break(1u);
LABEL_78:
            v3[3] = 0;
            *(void *)a2 = v10;
            *(unsigned char *)(a2 + 8) = v5;
            *(void *)(a2 + 16) = v6;
            *(void *)(a2 + 24) = v7;
            *(double *)(a2 + 32) = v11;
            *(double *)(a2 + 40) = v12;
            return result;
          }
        }
        uint64_t v34 = v33 - 1;
        uint64_t v35 = v32[v34 + 4];
        v32[2] = v34;
        v3[5] = v32;
        v3[2] = v35;
        goto LABEL_8;
      case 3uLL:
        unint64_t v36 = result & 7;
        if (v36 == 5)
        {
          unint64_t v40 = (float *)v3[1];
          if (v9 < (unint64_t)(v40 + 1)) {
            goto LABEL_79;
          }
          float v41 = *v40;
          v3[1] = v40 + 1;
          double v11 = v41;
        }
        else
        {
          if (v36 == 2)
          {
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_90;
            }
            unint64_t v37 = (double *)v3[1];
            if (v9 < (unint64_t)v37 + result) {
              goto LABEL_79;
            }
            v3[3] = 25;
            v3[4] = (char *)v37 + result;
          }
          else
          {
            if (v36 != 1) {
              goto LABEL_79;
            }
            unint64_t v37 = (double *)v3[1];
          }
          if (v9 < (unint64_t)(v37 + 1)) {
            goto LABEL_79;
          }
          double v11 = *v37;
          v3[1] = v37 + 1;
        }
        goto LABEL_8;
      case 4uLL:
        unint64_t v38 = result & 7;
        if (v38 == 5)
        {
          uint64_t v42 = (float *)v3[1];
          if (v9 < (unint64_t)(v42 + 1)) {
            goto LABEL_79;
          }
          float v43 = *v42;
          v3[1] = v42 + 1;
          double v12 = v43;
        }
        else
        {
          if (v38 == 2)
          {
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_91;
            }
            uint64_t v39 = (double *)v3[1];
            if (v9 < (unint64_t)v39 + result) {
              goto LABEL_79;
            }
            v3[3] = 33;
            v3[4] = (char *)v39 + result;
          }
          else
          {
            if (v38 != 1) {
              goto LABEL_79;
            }
            uint64_t v39 = (double *)v3[1];
          }
          if (v9 < (unint64_t)(v39 + 1)) {
            goto LABEL_79;
          }
          double v12 = *v39;
          v3[1] = v39 + 1;
        }
        goto LABEL_8;
      default:
        switch(result & 7)
        {
          case 0uLL:
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            goto LABEL_8;
          case 1uLL:
            unint64_t v13 = v3[1] + 8;
            if (v9 >= v13) {
              goto LABEL_7;
            }
            goto LABEL_79;
          case 2uLL:
            int64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_92;
            }
            unint64_t v13 = v3[1] + result;
            if (v9 < v13) {
              goto LABEL_79;
            }
LABEL_7:
            v3[1] = v13;
            break;
          case 5uLL:
            unint64_t v13 = v3[1] + 4;
            if (v9 < v13) {
              goto LABEL_79;
            }
            goto LABEL_7;
          default:
            goto LABEL_79;
        }
        goto LABEL_8;
    }
  }
}

int64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AngularGradient._Paint(uint64_t a1)
{
  return AngularGradient._Paint.encode(to:)(a1);
}

uint64_t ConicGradient.gradient.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ConicGradient.gradient.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ConicGradient.gradient.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ConicGradient.center.getter()
{
  return *(double *)(v0 + 16);
}

void ConicGradient.center.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*ConicGradient.center.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ConicGradient.angle.getter()
{
  return *(double *)(v0 + 32);
}

void ConicGradient.angle.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*ConicGradient.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void __swiftcall ConicGradient.init(gradient:center:angle:)(SwiftUI::ConicGradient *__return_ptr retstr, SwiftUI::ResolvedGradient gradient, CGPoint center, SwiftUI::Angle angle)
{
  SwiftUI::ResolvedGradient::ColorSpace v4 = *((unsigned char *)gradient.stops._rawValue + 8);
  retstr->gradient.stops._rawuint64_t Value = *(void **)gradient.stops._rawValue;
  retstr->gradient.colorSpace = v4;
  retstr->center.CGFloat x = center.x;
  retstr->center.y = center.y;
  retstr->angle = angle;
}

Swift::Double ConicGradient.init(angular:bounds:)@<D0>(SwiftUI::ResolvedGradient a1@<0:X0, 8:W1.1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v7 = *((unsigned char *)a1.stops._rawValue + 8);
  double v8 = *((double *)a1.stops._rawValue + 2);
  double v9 = *((double *)a1.stops._rawValue + 3);
  *(SwiftUI::Angle *)&v10.radians = (SwiftUI::Angle)*((void *)a1.stops._rawValue + 4);
  *(SwiftUI::Angle *)&v11.radians = (SwiftUI::Angle)*((void *)a1.stops._rawValue + 5);
  uint64_t v15 = *(void *)a1.stops._rawValue;
  char v16 = v7;
  a1.stops._rawuint64_t Value = &v15;
  ConicGradient.init(gradient:center:startAngle:endAngle:)(&v17, a1, (CGPoint)__PAIR128__(v9 * a6 + a4, v8 * a5 + a3), v10, v11);
  SwiftUI::ResolvedGradient::ColorSpace colorSpace = v17.gradient.colorSpace;
  Swift::Double result = v17.angle.radians;
  CGPoint center = v17.center;
  *(void *)a2 = v17.gradient.stops._rawValue;
  *(unsigned char *)(a2 + 8) = colorSpace;
  *(CGPoint *)(a2 + 16) = center;
  *(Swift::Double *)(a2 + 32) = result;
  return result;
}

void __swiftcall ConicGradient.init(gradient:center:startAngle:endAngle:)(SwiftUI::ConicGradient *__return_ptr retstr, SwiftUI::ResolvedGradient gradient, CGPoint center, SwiftUI::Angle startAngle, SwiftUI::Angle endAngle)
{
  double radians = startAngle.radians;
  CGFloat y = center.y;
  CGFloat x = center.x;
  SwiftUI::Angle v10 = *(double **)gradient.stops._rawValue;
  SwiftUI::ResolvedGradient::ColorSpace v11 = *((unsigned char *)gradient.stops._rawValue + 8);
  if (endAngle.radians < startAngle.radians)
  {
    double v12 = endAngle.radians;
  }
  else
  {
    startAngle.double radians = endAngle.radians;
    double v12 = radians;
  }
  double v13 = startAngle.radians - v12;
  double v14 = 0.0;
  if (startAngle.radians - v12 < 0.0)
  {
LABEL_9:
    double v18 = (6.28318531 - v14) * 0.5;
    double v15 = v12 - v18;
    double v17 = v18 / 6.28318531;
    double v16 = (v14 + v18) / 6.28318531;
    if (endAngle.radians < radians) {
      goto LABEL_12;
    }
LABEL_10:
    if (fabs(v17) <= 0.000001 && fabs(v16 + -1.0) <= 0.000001) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  if (v13 <= 6.28318531)
  {
    double v14 = startAngle.radians - v12;
    goto LABEL_9;
  }
  double v15 = startAngle.radians + -6.28318531;
  double v16 = 1.0;
  double v17 = v13 / -6.28318531 + 1.0;
  if (endAngle.radians >= radians) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v19 = *((void *)v10 + 2);
  if (v19)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_31;
    }
    while (1)
    {
      double v20 = v16 - v17;
      unint64_t v21 = *((void *)v10 + 2);
      unint64_t v22 = v19 - 1;
      if (v21 < v19 - 1) {
        unint64_t v22 = *((void *)v10 + 2);
      }
      if (v22 >= 2)
      {
        unint64_t v24 = v22 + 1;
        uint64_t v25 = v24 & 1;
        if ((v24 & 1) == 0) {
          uint64_t v25 = 2;
        }
        unint64_t v23 = v24 - v25;
        unint64_t v26 = v10 + 12;
        unint64_t v27 = v23;
        do
        {
          double v28 = *(v26 - 6);
          double v29 = *v26;
          if (endAngle.radians < radians)
          {
            double v28 = 1.0 - v28;
            double v29 = 1.0 - *v26;
          }
          *(v26 - 6) = v17 + v20 * v28;
          *unint64_t v26 = v17 + v20 * v29;
          v26 += 12;
          v27 -= 2;
        }
        while (v27);
      }
      else
      {
        unint64_t v23 = 0;
      }
      uint64_t v30 = 48 * v23 + 48;
      while (v23 < v21)
      {
        ++v23;
        double v31 = *(double *)((char *)v10 + v30);
        if (endAngle.radians < radians) {
          double v31 = 1.0 - v31;
        }
        *(double *)((char *)v10 + v30) = v17 + v20 * v31;
        v30 += 48;
        if (v19 == v23) {
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_31:
      SwiftUI::Angle v10 = (double *)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    }
  }
LABEL_29:
  retstr->gradient.stops._rawuint64_t Value = v10;
  retstr->gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v11;
  retstr->center.CGFloat x = x;
  retstr->center.CGFloat y = y;
  retstr->angle.double radians = v15;
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    FixedRoundedRect.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    AccessibilityText.encode(to:)();
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    TextLayoutProperties.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    ResolvedShadowStyle.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    MeshGradient._Paint.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    ResolvedGradient.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    GraphicsImage.encode(to:)((double *)v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    ContentTransition.CustomTransition.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    ContentTransition.NamedTransition.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  uint64_t v2 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
  }
  unint64_t v6 = v4[2];
  char v5 = v4[3];
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  _OWORD v4[2] = v6 + 1;
  v4[v6 + 4] = v3;
  v2[3] = v4;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v2[1] = v3 + 1;
    ContentTransition.NumericTextConfiguration.encode(to:)(v2);
    if (!v7) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    GraphicsFilter.ShaderFilter.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    VariableBlurStyle.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    Shader.ResolvedShader.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    _SymbolEffect.WiggleConfiguration.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    BackdropEffect.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    ContentTransition.State.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  v5[v7 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    DisplayList.Effect.encode(to:)(v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1)
{
  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = AccessibilityActivationPoint.Location.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = ContentTransition.Style.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = (uint64_t)v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    uint64_t result = CodableRBDisplayListContents.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    uint64_t result = GraphicsFilter.ColorCurves.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    uint64_t result = (uint64_t)GraphicsFilter.LuminanceCurve.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = _SymbolEffect.Storage.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = MeshGradient.Locations.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = DisplayList.InterpolatorAnimation.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v1[1];
  char v5 = (void *)v1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v3[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    uint64_t result = (uint64_t)_Rotation3DEffect.Data.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(void **)(v1 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)result;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)result;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  *(void *)(v3 + 24) = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v4 + 1;
    uint64_t result = DisplayList.encode(to:)(v3);
    if (!v2) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
  }
  unint64_t v10 = v8[2];
  unint64_t v9 = v8[3];
  if (v10 >= v9 >> 1) {
    unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
  }
  _OWORD v8[2] = v10 + 1;
  v8[v10 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return;
  }
  *(void *)(v3 + 8) = v7 + 1;
  if (BYTE5(a3))
  {
    if (BYTE5(a3) == 1)
    {
      swift_bridgeObjectRetain();
      specialized ProtobufEncoder.messageField<A>(_:_:)(2);
      outlined consume of ContentTransition.Storage(a2, a3, 1);
      if (v4) {
        return;
      }
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x22uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(a2 & 0x1FFFFFFFFLL, *(float *)&a3);
      if (v4) {
        return;
      }
    }
  }
  else
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(1);
    if (v4) {
      return;
    }
  }
  if ((a3 & 0x1000000000000) != 0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  ProtobufEncoder.endLengthDelimited()();
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, CodableAttributedString.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))CodablePlatformImage.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, (uint64_t (*)(uint64_t))DisplayList.Content.Value.encode(to:));
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, Image.Location.encode(to:));
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = v3;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v6 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v6 + 8) = v7 + 1;
    uint64_t result = a3(v6);
    if (!v4) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  uint64_t v6 = v3;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v6 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v6 + 8) = v7 + 1;
    uint64_t result = a3(v6);
    if (!v4) {
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, float *a2)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v6 = v2[1];
  uint64_t v7 = (void *)v2[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v7[2] = v10 + 1;
  v7[v10 + 4] = v6;
  v2[3] = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v2[1] = v6 + 1;
  float v11 = *a2;
  float v12 = a2[1];
  float v13 = a2[2];
  float v14 = a2[3];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t result = specialized ProtobufEncoder.encodeMessage<A>(_:)(v11, v12, v13, v14);
  if (v3) {
    return result;
  }
  float v4 = a2[4];
  if (v4 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v16 = v2[1];
    int64_t isUniquelyReferenced_nonNull_native = v16 + 4;
    if (!__OFADD__(v16, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        double v17 = (float *)(*v2 + v16);
LABEL_11:
        *double v17 = v4;
        goto LABEL_12;
      }
LABEL_21:
      double v17 = (float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_11;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_12:
  float v18 = a2[5];
  if (v18 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v19 = v2[1];
    int64_t v20 = v19 + 4;
    if (__OFADD__(v19, 4))
    {
      __break(1u);
    }
    else if (v2[2] >= v20)
    {
      v2[1] = v20;
      unint64_t v21 = (float *)(*v2 + v19);
LABEL_16:
      *unint64_t v21 = v18;
      return ProtobufEncoder.endLengthDelimited()();
    }
    unint64_t v21 = (float *)ProtobufEncoder.growBufferSlow(to:)(v20);
    goto LABEL_16;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

void specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  float v4 = v2;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  outlined init with take of GraphicsFilter(a2, (uint64_t)v10);
  uint64_t v6 = v2[1];
  uint64_t v7 = (void *)v2[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  v7[2] = v9 + 1;
  v7[v9 + 4] = v6;
  v4[3] = v7;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    v4[1] = v6 + 1;
    GraphicsFilter.encode(to:)(v4);
    if (!v3) {
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(1, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), uint64_t result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if (a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      if ((a3 & 0x100000000) == 0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(0);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

{
  return specialized ProtobufEncoder.messageField<A>(_:_:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;

  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(4, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), uint64_t result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if (a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      if ((a3 & 0x100000000) == 0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x18uLL);
        ProtobufEncoder.encodeVarint(_:)(0);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v7 = *(void *)(v3 + 8);
  unint64_t v8 = *(void **)(v3 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  _OWORD v8[2] = v11 + 1;
  v8[v11 + 4] = v7;
  *(void *)(v3 + 24) = v8;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 8) = v7 + 1;
    if ((~a2 & 0xF000000000000006) == 0
      || (outlined copy of _SymbolEffect.Trigger(a2),
          specialized ProtobufEncoder.messageField<A>(_:_:)(3, a2, (uint64_t (*)(uint64_t))_SymbolEffect.Trigger.encode(to:)), uint64_t result = outlined consume of _SymbolEffect.Trigger?(a2), !v4))
    {
      if (a3)
      {
        ProtobufEncoder.encodeVarint(_:)(0x10uLL);
        ProtobufEncoder.encodeVarint(_:)(a3);
      }
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

uint64_t specialized ProtobufEncoder.messageField<A>(_:_:)(uint64_t a1, double a2)
{
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  uint64_t v4 = v2[1];
  char v5 = (void *)v2[3];
  int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    char v5 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    char v5 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = v4;
  v2[3] = v5;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  v2[1] = v4 + 1;
  *(float *)&a2 = a2;
  if (*(float *)&a2 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v9 = v2[1];
    int64_t isUniquelyReferenced_nonNull_native = v9 + 4;
    if (!__OFADD__(v9, 4))
    {
      if (v2[2] >= isUniquelyReferenced_nonNull_native)
      {
        v2[1] = isUniquelyReferenced_nonNull_native;
        unint64_t v10 = (_DWORD *)(*v2 + v9);
LABEL_10:
        *unint64_t v10 = LODWORD(a2);
        return ProtobufEncoder.endLengthDelimited()();
      }
LABEL_14:
      unint64_t v10 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return ProtobufEncoder.endLengthDelimited()();
}

BOOL specialized static LinearGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  double v9 = *(double *)(a2 + 24);
  double v11 = *(double *)(a2 + 32);
  double v10 = *(double *)(a2 + 40);
  char v12 = specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2);
  BOOL result = 0;
  if ((v12 & 1) != 0 && v2 == v7 && v3 == v8 && v4 == v9) {
    return v5 == v10 && v6 == v11;
  }
  return result;
}

BOOL specialized static RadialGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  double v9 = *(double *)(a2 + 24);
  double v11 = *(double *)(a2 + 32);
  double v10 = *(double *)(a2 + 40);
  char v12 = specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2);
  BOOL result = 0;
  if ((v12 & 1) != 0 && v2 == v7 && v3 == v8 && v4 == v9 && v6 == v11) {
    return v5 == v10;
  }
  return result;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGRect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGRect?()
{
  if (!lazy cache variable for type metadata for CGRect?)
  {
    type metadata accessor for CGRect(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGRect?);
    }
  }
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 96) & 0xFF0301FFLL | 0x5000000000000000;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in LinearGradient._Paint()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>((unint64_t *)&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
}

_UNKNOWN **associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in LinearGradient()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RadialGradient._Paint()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<CGFloat, CGFloat>>);
}

void type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector();
    unint64_t v6 = type metadata accessor for AnimatablePair();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for AngularGradient._Paint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for LinearGradient._Paint(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint);
}

unint64_t lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint;
  if (!lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AngularGradient._Paint and conformance AngularGradient._Paint);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in AngularGradient._Paint()
{
  return _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>, AnimatablePair<Double, Double>>);
}

uint64_t _s7SwiftUI14AnimatablePairVyS2dGACyxq_GAA16VectorArithmeticAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_245A3EED4@<D0>(uint64_t a1@<X8>)
{
  return key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint((void (*)(long long *__return_ptr))RadialGradient._Paint.animatableData.getter, a1);
}

uint64_t sub_245A3EF00(uint64_t a1, uint64_t a2)
{
  return key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(a1, a2);
}

double sub_245A3EF18@<D0>(uint64_t a1@<X8>)
{
  return key path getter for RadialGradient._Paint.animatableData : RadialGradient._Paint((void (*)(long long *__return_ptr))EllipticalGradient._Paint.animatableData.getter, a1);
}

uint64_t sub_245A3EF44(uint64_t a1, uint64_t a2)
{
  return key path setter for RadialGradient._Paint.animatableData : RadialGradient._Paint(a1, a2);
}

ValueMetadata *type metadata accessor for LinearGradient._Paint()
{
  return &type metadata for LinearGradient._Paint;
}

ValueMetadata *type metadata accessor for RadialGradient._Paint()
{
  return &type metadata for RadialGradient._Paint;
}

ValueMetadata *type metadata accessor for EllipticalGradient._Paint()
{
  return &type metadata for EllipticalGradient._Paint;
}

uint64_t assignWithTake for LinearGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for AngularGradient()
{
  return &type metadata for AngularGradient;
}

uint64_t assignWithCopy for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearGradient._Paint(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearGradient._Paint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AngularGradient._Paint()
{
  return &type metadata for AngularGradient._Paint;
}

uint64_t initializeWithCopy for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ConicGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ConicGradient()
{
  return &type metadata for ConicGradient;
}

uint64_t outlined init with take of GraphicsFilter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined consume of _SymbolEffect.Trigger?(uint64_t result)
{
  if ((~result & 0xF000000000000006) != 0) {
    return outlined consume of _SymbolEffect.Trigger(result);
  }
  return result;
}

double static View<>._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 24);
  int v11 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v13 = *(_DWORD *)(a2 + 36);
  int v18 = *(_DWORD *)(a2 + 80);
  int v31 = *a1;
  uint64_t v20 = v7;
  int v21 = v8;
  uint64_t v22 = v9;
  int v23 = v10;
  int v24 = v11;
  int v25 = v12;
  int v26 = v13;
  long long v17 = *(_OWORD *)(a2 + 40);
  *(void *)&long long v27 = *(void *)(a2 + 40);
  uint64_t v14 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v31, &v20, a3, a4);
  _GraphValue.init(_:)(v14, &v31);
  uint64_t v20 = v7;
  int v21 = v8;
  uint64_t v22 = v9;
  int v23 = v10;
  int v24 = v11;
  int v25 = v12;
  int v26 = v13;
  long long v15 = *(_OWORD *)(a2 + 56);
  long long v27 = v17;
  long long v28 = v15;
  uint64_t v29 = *(void *)(a2 + 72);
  int v30 = v18;
  return static View.makeView(view:inputs:)(&v31, &v20, a3, a5);
}

BOOL ScrollPhase.isScrolling.getter(char a1)
{
  return a1 != 0;
}

void ScrollPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ScrollPhase.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPhase()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ScrollPhaseState.phase.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*ScrollPhaseState.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ScrollPhaseState.velocity.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*ScrollPhaseState.velocity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL ScrollPhaseState.isScrolling.getter()
{
  return *v0 != 0;
}

BOOL ScrollPhaseState.isTracking.getter()
{
  return *v0 == 1;
}

BOOL ScrollPhaseState.isInteracting.getter()
{
  return *v0 == 2;
}

BOOL ScrollPhaseState.isDecelerating.getter()
{
  return *v0 == 3;
}

BOOL ScrollPhaseState.isAnimating.getter()
{
  return *v0 == 4;
}

BOOL static ScrollPhaseState.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (a1[2] == a2[2]) {
    return a1[1] == a2[1];
  }
  return 0;
}

uint64_t static ScrollPhasePreferenceKey.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static ScrollPhasePreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  return specialized Array.append<A>(contentsOf:)(v2);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollPhasePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t ScrollPhaseProvider.init(phaseState:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ScrollPhaseProvider.value.getter()
{
  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461B9DC0;
  uint64_t Value = AGGraphGetValue();
  *(unsigned char *)(v0 + 32) = *(unsigned char *)Value;
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(Value + 8);
  return v0;
}

__n128 protocol witness for Rule.value.getter in conformance ScrollPhaseProvider@<Q0>(uint64_t *a1@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<ScrollPhaseState>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollPhaseState>, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)(Value + 8);
  *(unsigned char *)(v2 + 32) = *(unsigned char *)Value;
  *(__n128 *)(v2 + 40) = result;
  *a1 = v2;
  return result;
}

uint64_t key path getter for _GraphInputs.scrollPhaseState : _GraphInputs@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = _GraphInputs.scrollPhaseState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollPhaseState : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t (*_GraphInputs.scrollPhaseState.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4)
  {
    uint64_t v5 = (int *)(v4 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v5 = &static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  }
  int v6 = *v5;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = v6;
  return _GraphInputs.scrollPhaseState.modify;
}

uint64_t _GraphInputs.scrollPhaseState.modify(uint64_t a1, char a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  swift_retain();
  if (a2)
  {
    int v6 = v5;
    int v7 = v4;
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a1 + 8;
    int v6 = v5;
    int v7 = v4;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);

  return swift_release();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPhaseStateKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.ScrollPhaseStateKey.defaultValue;
  return result;
}

uint64_t ScrollPhase.debugDescription.getter(char a1)
{
  uint64_t result = 1701602409;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x676E696B63617274;
      break;
    case 2:
      uint64_t result = 0x7463617265746E69;
      break;
    case 3:
      uint64_t result = 0x6172656C65636564;
      break;
    case 4:
      uint64_t result = 0x6E6974616D696E61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ScrollPhase()
{
  uint64_t result = 1701602409;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E696B63617274;
      break;
    case 2:
      uint64_t result = 0x7463617265746E69;
      break;
    case 3:
      uint64_t result = 0x6172656C65636564;
      break;
    case 4:
      uint64_t result = 0x6E6974616D696E61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ScrollPhaseState.description.getter()
{
  _StringGuts.grow(_:)(36);
  v0._object = (void *)0x800000024621A790;
  v0._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x69636F6C6576202CLL;
  v1._object = (void *)0xEC000000203A7974;
  String.append(_:)(v1);
  type metadata accessor for CGVector(0);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 62;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

unint64_t lazy protocol witness table accessor for type ScrollPhase and conformance ScrollPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase;
  if (!lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ScrollPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A3FE48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollPhaseState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhasePreferenceKey()
{
  return &type metadata for ScrollPhasePreferenceKey;
}

ValueMetadata *type metadata accessor for ScrollPhaseProvider()
{
  return &type metadata for ScrollPhaseProvider;
}

uint64_t sub_245A3FED4()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_245A3FEE8()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA29IgnoresAutomaticPaddingLayout33_47C1BD8C61550BB60F4F3D12F752D53DLLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPhaseStateKey()
{
  return &type metadata for _GraphInputs.ScrollPhaseStateKey;
}

uint64_t static ArchivedViewCore.majorVersion.getter()
{
  return 13;
}

uint64_t one-time initialization function for archivedViewHostKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.archivedViewHostKey);
}

uint64_t static ArchivedViewCore.archivedViewHostKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for archivedViewHostKey, (uint64_t)static ArchivedViewCore.archivedViewHostKey, a1);
}

uint64_t one-time initialization function for archiveOptionsKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.archiveOptionsKey);
}

uint64_t static ArchivedViewCore.archiveOptionsKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for archiveOptionsKey, (uint64_t)static ArchivedViewCore.archiveOptionsKey, a1);
}

uint64_t one-time initialization function for rbEncoderSetKey(uint64_t a1)
{
  return one-time initialization function for archivedViewHostKey(a1, static ArchivedViewCore.rbEncoderSetKey);
}

uint64_t one-time initialization function for archivedViewHostKey(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for CodingUserInfoKey?();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  }
  __break(1u);
  return result;
}

uint64_t static ArchivedViewCore.rbEncoderSetKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for rbEncoderSetKey, (uint64_t)static ArchivedViewCore.rbEncoderSetKey, a1);
}

uint64_t static ArchivedViewCore.archivedViewHostKey.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t ArchivedViewCore.Metadata.majorVersion.getter()
{
  return *(void *)v0;
}

uint64_t ArchivedViewCore.Metadata.majorVersion.setter(uint64_t result)
{
  *Swift::String v1 = result;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.majorVersion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.stateAttachments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ArchivedViewCore.Metadata.stateAttachments.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.stateAttachments.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.stableIDsAttachment.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ArchivedViewCore.Metadata.stableIDsAttachment.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.stableIDsAttachment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.dataAttachment.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t ArchivedViewCore.Metadata.dataAttachment.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.dataAttachment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.archiveID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for ArchivedViewCore.Metadata()
{
  uint64_t result = type metadata singleton initialization cache for ArchivedViewCore.Metadata;
  if (!type metadata singleton initialization cache for ArchivedViewCore.Metadata) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ArchivedViewCore.Metadata.archiveID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 32);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*ArchivedViewCore.Metadata.archiveID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.deploymentVersion.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t ArchivedViewCore.Metadata.deploymentVersion.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.deploymentVersion.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.preferredBundleLanguage.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ArchivedViewCore.Metadata.preferredBundleLanguage.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.preferredBundleLanguage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of ArchivedViewCore.Metadata.preferredCompositionLanguage@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ArchivedViewCore.Metadata.preferredCompositionLanguage.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ArchivedViewCore.Metadata() + 44));
}

uint64_t ArchivedViewCore.Metadata.preferredCompositionLanguage.setter(char a1)
{
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*ArchivedViewCore.Metadata.preferredCompositionLanguage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ArchivedViewCore.Metadata.init(majorVersion:stateAttachments:stableIDAttachment:dataAttachment:archiveID:deploymentVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v27 = *a8;
  id v16 = objc_msgSend(self, sel_mainBundle);
  id v17 = objc_msgSend(v16, sel_preferredLocalizations);

  int v18 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v18[2])
  {
    uint64_t v19 = v18[4];
    uint64_t v20 = v18[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  swift_bridgeObjectRelease();
  int v21 = (int *)type metadata accessor for ArchivedViewCore.Metadata();
  uint64_t v22 = (void *)(a9 + v21[10]);
  *uint64_t v22 = v19;
  v22[1] = v20;
  uint64_t v23 = v21[11];
  *(unsigned char *)(a9 + v23) = CTParagraphStyleGetCompositionLanguageForLanguage();
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  uint64_t v24 = a9 + v21[8];
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 32))(v24, a7, v25);
  *(unsigned char *)(a9 + v21[9]) = v27;
  return result;
}

unint64_t ArchivedViewCore.Metadata.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x726556726F6A616DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x6174744161746164;
      break;
    case 4:
      unint64_t result = 0x4965766968637261;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivedViewCore.Metadata.CodingKeys()
{
  return ArchivedViewCore.Metadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivedViewCore.Metadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivedViewCore.Metadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivedViewCore.Metadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivedViewCore.Metadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ArchivedViewCore.Metadata.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = *(void *)(v3 + 8);
    HIBYTE(v12) = 1;
    type metadata accessor for [Int]();
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = type metadata accessor for ArchivedViewCore.Metadata();
    LOBYTE(v13) = 4;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + *(int *)(v10 + 36));
    HIBYTE(v12) = 5;
    lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = *(unsigned char *)(v3 + *(int *)(v10 + 44));
    HIBYTE(v12) = 7;
    type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>();
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CodableRawRepresentable<CTCompositionLanguage> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys);
  }
  return result;
}

void type metadata accessor for [Int]()
{
  if (!lazy cache variable for type metadata for [Int])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Int]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion;
  if (!lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion);
  }
  return result;
}

void type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>()
{
  if (!lazy cache variable for type metadata for CodableRawRepresentable<CTCompositionLanguage>)
  {
    type metadata accessor for CTCompositionLanguage(255);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type CTCompositionLanguage and conformance CTCompositionLanguage, type metadata accessor for CTCompositionLanguage);
    unint64_t v0 = type metadata accessor for CodableRawRepresentable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableRawRepresentable<CTCompositionLanguage>);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivedViewCore.Metadata@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivedViewCore.Metadata.init(from:)(a1, a2);
}

uint64_t ArchivedViewCore.Metadata.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v41 = a1;
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivedViewCore.Metadata.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = type metadata accessor for ArchivedViewCore.Metadata();
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v10 + 2) = 0;
  v10[24] = 1;
  *((void *)v10 + 4) = 0;
  v10[40] = 1;
  id v11 = objc_msgSend(self, sel_mainBundle);
  id v12 = objc_msgSend(v11, sel_preferredLocalizations);

  uint64_t v13 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v13[2])
  {
    uint64_t v15 = v13[4];
    uint64_t v14 = v13[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v8;
  id v17 = (uint64_t *)&v10[*(int *)(v8 + 40)];
  *id v17 = v15;
  v17[1] = v14;
  uint64_t v38 = v16;
  uint64_t v18 = *(int *)(v16 + 44);
  v10[v18] = CTParagraphStyleGetCompositionLanguageForLanguage();
  __swift_project_boxed_opaque_existential_1(v41, v41[3]);
  lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = v18;
    LOBYTE(v43) = 0;
    uint64_t v20 = v37;
    *(void *)uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for [Int]();
    char v42 = 1;
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((void *)v10 + 1) = v43;
    LOBYTE(v43) = 2;
    *((void *)v10 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[24] = v22 & 1;
    LOBYTE(v43) = 3;
    *((void *)v10 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v10[40] = v23 & 1;
    LOBYTE(v43) = 4;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v24 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v24;
    uint64_t v26 = v20;
    uint64_t v27 = v38;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v10[*(int *)(v38 + 32)], v35, v25);
    char v42 = 5;
    lazy protocol witness table accessor for type ArchivedViewInput.DeploymentVersion and conformance ArchivedViewInput.DeploymentVersion();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v28 = v43;
    if (BYTE1(v43)) {
      char v28 = 1;
    }
    v10[*(int *)(v27 + 36)] = v28;
    LOBYTE(v43) = 6;
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    *id v17 = v29;
    v17[1] = v31;
    type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>();
    char v42 = 7;
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type CodableRawRepresentable<CTCompositionLanguage> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<CTCompositionLanguage>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (BYTE1(v43)) {
      char v32 = 0;
    }
    else {
      char v32 = v43;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v26);
    v10[v19] = v32;
    outlined init with copy of ArchivedViewCore.Metadata((uint64_t)v10, v34);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return outlined destroy of ArchivedViewCore.Metadata((uint64_t)v10);
  }
}

void type metadata accessor for KeyedEncodingContainer<ArchivedViewCore.Metadata.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ArchivedViewCore.Metadata.CodingKeys and conformance ArchivedViewCore.Metadata.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA52198, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [Int]();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ArchivedViewCore.Metadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ArchivedViewCore.Metadata(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ArchivedViewCore.Metadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewCore.Metadata(void *a1)
{
  return ArchivedViewCore.Metadata.encode(to:)(a1);
}

uint64_t sub_245A4177C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  *a2 = *(unsigned char *)(a1 + *(int *)(result + 44));
  return result;
}

uint64_t sub_245A417B4(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = type metadata accessor for ArchivedViewCore.Metadata();
  *(unsigned char *)(a2 + *(int *)(result + 44)) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewCore()
{
  return &type metadata for ArchivedViewCore;
}

void *initializeBufferWithCopyOfBuffer for ArchivedViewCore.Metadata(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v9 = a3[8];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    *(void *)a1 = v7;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v15 = (void *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  *(void *)a1 = v6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v12 = a3[10];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t initializeWithTake for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A41D8C);
}

uint64_t sub_245A41D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivedViewCore.Metadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A41E50);
}

uint64_t sub_245A41E50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ArchivedViewCore.Metadata()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ArchivedViewCore.Metadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A42090);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivedViewCore.Metadata.CodingKeys()
{
  return &unk_26FA52198;
}

uint64_t specialized ArchivedViewCore.Metadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726556726F6A616DLL && a2 == 0xEC0000006E6F6973;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024621A7B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024621A7D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6174744161746164 && a2 == 0xEE00746E656D6863 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4965766968637261 && a2 == 0xE900000000000044 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024621A7F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024621A810 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000024621A830)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

void type metadata accessor for CodingUserInfoKey?()
{
  if (!lazy cache variable for type metadata for CodingUserInfoKey?)
  {
    type metadata accessor for CodingUserInfoKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?);
    }
  }
}

uint64_t static FormatStyle<>.reference(to:allowedFields:maxFieldCount:thresholdField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v29 = a1;
  uint64_t v7 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v16(v15, v29, v11, v13);
  uint64_t v28 = v8;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v18 = v30;
  uint64_t v30 = v7;
  v17(v10, v18, v7);
  uint64_t v19 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  *(void *)(a5 + v19[8]) = 0;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain();
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v20 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x24C520B20](v20);
  uint64_t v21 = ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(a5, v15, v11);
  if (one-time initialization token for orderedFields != -1) {
    uint64_t v21 = swift_once();
  }
  uint64_t v22 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x270FA5388](v21);
  *(&v27 - 2) = v29;
  *(&v27 - 1) = (uint64_t)v10;
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:), (uint64_t)(&v27 - 4), v22);
  uint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  swift_bridgeObjectRelease();
  *(void *)(a5 + v19[5]) = v24;
  uint64_t v25 = v30;
  *(void *)(a5 + v19[6]) = v31;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(a5 + v19[7], v10, v25);
}

uint64_t SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v9 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  *(void *)(a5 + v9[8]) = 0;
  static Locale.autoupdatingCurrent.getter();
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v10 = static TimeZone.autoupdatingCurrent.getter();
  MEMORY[0x24C520B20](v10);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a5, a1, v11);
  if (one-time initialization token for orderedFields != -1) {
    uint64_t v13 = swift_once();
  }
  uint64_t v14 = static Date.ComponentsFormatStyle.Field.orderedFields;
  MEMORY[0x270FA5388](v13);
  _OWORD v20[2] = a2;
  v20[3] = a4;
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)partial apply, (uint64_t)v20, v14);
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  swift_bridgeObjectRelease();
  *(void *)(a5 + v9[5]) = v16;
  *(void *)(a5 + v9[6]) = v21;
  uint64_t v17 = a5 + v9[7];
  uint64_t v18 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a4, v18);
}

uint64_t type metadata accessor for SystemFormatStyle.DateReference()
{
  uint64_t result = type metadata singleton initialization cache for SystemFormatStyle.DateReference;
  if (!type metadata singleton initialization cache for SystemFormatStyle.DateReference) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - v11;
  LOBYTE(a2) = specialized Set.contains(_:)(a1, a2);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v12, a1, v6);
  v13(v9, a3, v6);
  if (a2) {
    char v14 = 1;
  }
  else {
    char v14 = MEMORY[0x24C521500](v12, v9);
  }
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  v15(v12, v6);
  return v14 & 1;
}

void *specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = MEMORY[0x24C523D60](v9, v5);
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        int v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          int v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          int v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  int v3 = (void *)MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t SystemFormatStyle.DateReference.calendar(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateReference(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 40);
  uint64_t v6 = type metadata accessor for Calendar();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);

  return v7(v5, a1, v6);
}

unint64_t SystemFormatStyle.DateReference.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1702125924;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x466465776F6C6C61;
      break;
    case 2:
      unint64_t result = 0x646C65694678616DLL;
      break;
    case 3:
      unint64_t result = 0x6C6F687365726874;
      break;
    case 4:
      unint64_t result = 0x69726156657A6973;
      break;
    case 5:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 6:
      unint64_t result = 0x7261646E656C6163;
      break;
    case 7:
      unint64_t result = 0x656E6F5A656D6974;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.DateReference.CodingKeys()
{
  return SystemFormatStyle.DateReference.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.DateReference.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemFormatStyle.DateReference.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SystemFormatStyle.DateReference.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.DateReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.DateReference.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SystemFormatStyle.DateReference.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t v30 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v32 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
  {
    uint64_t v20 = v34;
    outlined destroy of ClosedRange<Date>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    uint64_t v21 = v33;
    return SystemFormatStyle.DateReference.relativeText(for:)(v20, v21);
  }
  uint64_t v28 = v5;
  uint64_t v29 = v3;
  outlined init with take of ClosedRange<Date>((uint64_t)v11, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v20 = v34;
  char v22 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v23 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v8, v20, v6);
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if (v22)
  {
    char v24 = dispatch thunk of static Comparable.<= infix(_:_:)();
    outlined destroy of ClosedRange<Date>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
    uint64_t v21 = v33;
    if (v24)
    {
      outlined destroy of ClosedRange<Date>?((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      return SystemFormatStyle.DateReference.relativeText(for:)(v20, v21);
    }
  }
  else
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  }
  uint64_t v26 = (uint64_t)v28;
  SystemFormatStyle.DateReference.absoluteStyle(for:)(v20, (uint64_t)v28);
  Date.FormatStyle.Attributed.format(_:)();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v29);
  return outlined destroy of ClosedRange<Date>?((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
}

uint64_t SystemFormatStyle.DateReference.relativeStyleInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v165 = a1;
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v2 - 8);
  v142 = (char *)&v136 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  v153 = (char *)&v136 - v5;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v145 = v6;
  MEMORY[0x270FA5388](v6);
  v147 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  v144 = (char *)&v136 - v9;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v163 = *(void *)(v10 - 8);
  uint64_t v164 = v10;
  MEMORY[0x270FA5388](v10);
  v146 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = type metadata accessor for Date();
  v162 = *(void **)(v160 - 8);
  MEMORY[0x270FA5388](v160);
  v137 = (char *)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v139 = (char *)&v136 - v14;
  MEMORY[0x270FA5388](v15);
  v143 = (char *)&v136 - v16;
  MEMORY[0x270FA5388](v17);
  v138 = (char *)&v136 - v18;
  MEMORY[0x270FA5388](v19);
  v148 = (char *)&v136 - v20;
  MEMORY[0x270FA5388](v21);
  v154 = (char *)&v136 - v22;
  MEMORY[0x270FA5388](v23);
  v152 = (char *)&v136 - v24;
  MEMORY[0x270FA5388](v25);
  v141 = (char *)&v136 - v26;
  MEMORY[0x270FA5388](v27);
  v149 = (char *)&v136 - v28;
  MEMORY[0x270FA5388](v29);
  v151 = (char *)&v136 - v30;
  MEMORY[0x270FA5388](v31);
  v140 = (char *)&v136 - v32;
  type metadata accessor for DateInterval?(0);
  MEMORY[0x270FA5388](v33 - 8);
  v150 = (char *)&v136 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for DateInterval();
  v156 = *(void **)(v35 - 8);
  v157 = (void (*)(void, void))v35;
  MEMORY[0x270FA5388](v35);
  v155 = (char *)&v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Calendar.Component();
  uint64_t v158 = *(void *)(v37 - 8);
  uint64_t v159 = v37;
  MEMORY[0x270FA5388](v37);
  v167 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v39 - 8);
  float v41 = (char *)&v136 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v42 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  v136 = (char *)&v136 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  v161 = (char *)&v136 - v45;
  MEMORY[0x270FA5388](v46);
  v166 = (char *)&v136 - v47;
  uint64_t v48 = type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v49 = *(void *)&v1[*(int *)(v48 + 20)];
  uint64_t v50 = *(void *)(v49 + 16);
  if (v50)
  {
    unint64_t v51 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    char v52 = v1;
    uint64_t v53 = *(void *)(v42 + 72);
    swift_bridgeObjectRetain();
    uint64_t v54 = v49 + v51 + v53 * (v50 - 1);
    uint64_t v55 = -v53;
    while (1)
    {
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v170);
      double v56 = v170;
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v169);
      v57.n128_f64[0] = v169;
      if (v169 < v56) {
        break;
      }
      v54 += v55;
      if (!--v50) {
        goto LABEL_7;
      }
    }
    uint64_t v58 = v168;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v42 + 16))(v41, v54, v168, v169);
    (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v42 + 56))(v41, 0, 1, v58, v59);
  }
  else
  {
    char v52 = v1;
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v58 = v168;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56))(v41, 1, 1, v168, v57);
  }
  swift_bridgeObjectRelease();
  int v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v41, 1, v58);
  uint64_t v61 = (uint64_t)v167;
  if (v60 == 1)
  {
    v62 = type metadata accessor for Date.ComponentsFormatStyle.Field?;
    uint64_t v63 = (uint64_t)v41;
LABEL_21:
    outlined destroy of ClosedRange<Date>?(v63, (uint64_t (*)(void))v62);
    uint64_t v106 = 1;
    uint64_t v102 = v164;
    uint64_t v107 = v165;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 56))(v107, v106, 1, v102);
  }
  v64 = v52;
  uint64_t v65 = (uint64_t)v166;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v166, v41, v58);
  SystemFormatStyle.DateReference.component(for:)(v65, v61);
  uint64_t v66 = (uint64_t)v52 + *(int *)(v48 + 28);
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v170);
  double v67 = v170;
  v68 = v161;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v169);
  v69 = *(void (**)(char *, uint64_t))(v42 + 8);
  v69(v68, v58);
  if (v169 < v67)
  {
    v70 = v150;
    Calendar.dateInterval(of:for:)();
    v72 = v156;
    v71 = v157;
    int v73 = ((uint64_t (*)(char *, uint64_t, void (*)(void, void)))v156[6])(v70, 1, v157);
    uint64_t v74 = v160;
    v75 = v162;
    if (v73 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v61, v159);
      v69(v166, v58);
      v62 = type metadata accessor for DateInterval?;
      uint64_t v63 = (uint64_t)v70;
      goto LABEL_21;
    }
    ((void (*)(char *, char *, void (*)(void, void)))v72[4])(v155, v70, v71);
    v81 = v149;
    DateInterval.start.getter();
    static Date.- infix(_:_:)();
    v82 = (void (*)(char *, uint64_t))v75[1];
    uint64_t v168 = (uint64_t)(v75 + 1);
    v82(v81, v74);
    Date.timeIntervalSinceReferenceDate.getter();
    v83 = v82;
    v84 = v140;
    Date.init(timeIntervalSinceReferenceDate:)();
    v83(v151, v74);
    DateInterval.end.getter();
    static Date.- infix(_:_:)();
    v83(v81, v74);
    v85 = v83;
    Date.timeIntervalSinceReferenceDate.getter();
    v86 = v156;
    v87 = v141;
    Date.init(timeIntervalSinceReferenceDate:)();
    v85(v152, v74);
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    char v88 = dispatch thunk of static Comparable.<= infix(_:_:)();
    ((void (*)(char *, void))v86[1])(v155, v157);
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v61, v159);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v69)(v166, v58);
    v167 = (char *)v85;
    if (v88)
    {
      v90 = v84;
      uint64_t v91 = v145;
      v92 = v144;
      v93 = &v144[*(int *)(v145 + 48)];
      v94 = v162;
      v95 = (void (*)(char *, char *, uint64_t))v162[4];
      v95(v144, v90, v74);
      v166 = v93;
      v95(v93, v87, v74);
      v96 = v147;
      v97 = &v147[*(int *)(v91 + 48)];
      v98 = (void (*)(char *, char *, uint64_t))v94[2];
      v98(v147, v92, v74);
      v98(v97, v93, v74);
      v99 = v146;
      v95(v146, v96, v74);
      v100 = v167;
      ((void (*)(char *, uint64_t))v167)(v97, v74);
      v101 = &v96[*(int *)(v91 + 48)];
      v95(v96, v92, v74);
      v95(v101, v166, v74);
      uint64_t v102 = v164;
      v95(&v99[*(int *)(v164 + 36)], v101, v74);
      ((void (*)(char *, uint64_t))v100)(v96, v74);
      uint64_t v103 = (uint64_t)v99;
LABEL_29:
      uint64_t v107 = v165;
      outlined init with take of ClosedRange<Date>(v103, v165, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      uint64_t v106 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v163 + 56))(v107, v106, 1, v102);
    }
    __break(1u);
    goto LABEL_31;
  }
  v157 = (void (*)(void, void))v69;
  v76 = v153;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v77 = v162;
  v156 = v64;
  v78 = (unsigned int (*)(char *, uint64_t, uint64_t))v162[6];
  uint64_t v79 = v160;
  if (v78(v76, 1, v160) == 1)
  {
    uint64_t v80 = (uint64_t)v76;
LABEL_20:
    v105 = (void (*)(char *, uint64_t))v157;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v167, v159);
    v105(v166, v168);
    v62 = type metadata accessor for Date?;
    uint64_t v63 = v80;
    goto LABEL_21;
  }
  v155 = (char *)(v42 + 8);
  v153 = (char *)v77[4];
  ((void (*)(char *, char *, uint64_t))v153)(v154, v76, v79);
  v104 = v142;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v80 = (uint64_t)v104;
  if (v78(v104, 1, v79) == 1)
  {
    ((void (*)(char *, uint64_t))v77[1])(v154, v79);
    goto LABEL_20;
  }
  v156 = v77 + 4;
  ((void (*)(char *, char *, uint64_t))v153)(v148, v104, v79);
  v108 = v136;
  uint64_t v109 = v66;
  uint64_t v110 = v168;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v136, v109, v168);
  v111 = v161;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  char v112 = dispatch thunk of static Equatable.== infix(_:_:)();
  v113 = (void (*)(char *, uint64_t))v157;
  v157(v111, v110);
  uint64_t v114 = v79;
  if (v112)
  {
    v115 = v149;
    v116 = v137;
  }
  else
  {
    static Date.ComponentsFormatStyle.Field.minute.getter();
    char v117 = dispatch thunk of static Equatable.== infix(_:_:)();
    v113(v111, v110);
    v115 = v149;
    v116 = v137;
    if ((v117 & 1) == 0)
    {
      static Date.ComponentsFormatStyle.Field.second.getter();
      dispatch thunk of static Equatable.== infix(_:_:)();
      v113(v111, v110);
    }
  }
  v113(v108, v110);
  v118 = v154;
  static Date.+ infix(_:_:)();
  static Date.+ infix(_:_:)();
  v119 = v162 + 1;
  v120 = (void (*)(char *, uint64_t))v162[1];
  v120(v115, v114);
  Date.timeIntervalSinceReferenceDate.getter();
  v121 = v167;
  v122 = v139;
  v123 = v138;
  Date.init(timeIntervalSinceReferenceDate:)();
  v120(v143, v114);
  static Date.- infix(_:_:)();
  static Date.- infix(_:_:)();
  v120(v115, v114);
  Date.timeIntervalSinceReferenceDate.getter();
  v124 = (uint64_t (*)(char *, uint64_t))v157;
  Date.init(timeIntervalSinceReferenceDate:)();
  v120(v116, v114);
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v125 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v120(v148, v114);
  v120(v118, v114);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v121, v159);
  uint64_t result = v124(v166, v168);
  v167 = (char *)v120;
  uint64_t v168 = (uint64_t)v119;
  if (v125)
  {
    uint64_t v126 = v145;
    v127 = v144;
    v128 = &v144[*(int *)(v145 + 48)];
    v129 = (void (*)(char *, char *, uint64_t))v153;
    ((void (*)(char *, char *, uint64_t))v153)(v144, v123, v114);
    v166 = v128;
    v129(v128, v122, v114);
    v130 = v147;
    v131 = &v147[*(int *)(v126 + 48)];
    v132 = (void (*)(char *, char *, uint64_t))v162[2];
    v132(v147, v127, v114);
    v132(v131, v128, v114);
    v133 = v146;
    v129(v146, v130, v114);
    v134 = v167;
    ((void (*)(char *, uint64_t))v167)(v131, v114);
    v135 = &v130[*(int *)(v126 + 48)];
    v129(v130, v127, v114);
    v129(v135, v166, v114);
    uint64_t v102 = v164;
    v129(&v133[*(int *)(v164 + 36)], v135, v114);
    ((void (*)(char *, uint64_t))v134)(v130, v114);
    uint64_t v103 = (uint64_t)v133;
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateReference.absoluteStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a1;
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v52 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v55 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = (char *)type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v50 = *((void *)v54 - 1);
  MEMORY[0x270FA5388](v54);
  unint64_t v51 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for TimeZone();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v48 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for ClosedRange<Date>?(0, &lazy cache variable for type metadata for Date.FormatStyle.TimeStyle?, MEMORY[0x263F06FF0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v43 = (char *)&v40 - v19;
  type metadata accessor for ClosedRange<Date>?(0, &lazy cache variable for type metadata for Date.FormatStyle.DateStyle?, MEMORY[0x263F07008], v17);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v44 = (char *)&v40 - v22;
  uint64_t v24 = type metadata accessor for Date.FormatStyle();
  uint64_t v40 = *(void *)(v24 - 8);
  uint64_t v41 = v24;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Date.FormatStyle.DateStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v23, 1, 1, v27);
  uint64_t v28 = type metadata accessor for Date.FormatStyle.TimeStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v20, 1, 1, v28);
  uint64_t v29 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v2 + v29[9], v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v12, v2 + v29[10], v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v48, v2 + v29[11], v49);
  (*(void (**)(char *, uint64_t, char *))(v50 + 16))(v51, v2 + v29[12], v54);
  uint64_t v54 = v26;
  Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
  uint64_t result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v53);
  uint64_t v48 = (char *)result;
  uint64_t v53 = v32;
  int64_t v34 = v33 >> 1;
  if (v31 == v33 >> 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v55, 1, 1, v3);
LABEL_8:
    swift_unknownObjectRelease();
    uint64_t v39 = (uint64_t)v54;
    Date.FormatStyle.attributedStyle.getter();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }
  else
  {
    uint64_t v35 = v31;
    uint64_t v50 = v4 + 16;
    unint64_t v51 = (char *)(v4 + 56);
    uint64_t v49 = v4 + 48;
    uint64_t v36 = v55;
    uint64_t v37 = (uint64_t)v52;
    while (v35 < v34)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v36, v53 + *(void *)(v4 + 72) * v35, v3);
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v38(v36, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v36, 1, v3) == 1) {
        goto LABEL_8;
      }
      ++v35;
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v37, v36, v3);
      SystemFormatStyle.DateReference.add(_:to:)(v37, (uint64_t)v54);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v37, v3);
      if (v34 == v35)
      {
        v38(v55, 1, 1, v3);
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.relativeText(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v101 = a1;
  uint64_t v96 = a2;
  uint64_t v95 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v3 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  v83 = &v78[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?)();
  uint64_t v99 = v5;
  MEMORY[0x270FA5388](v5);
  v82 = &v78[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v7);
  v85 = &v78[-v8];
  MEMORY[0x270FA5388](v9);
  v97 = &v78[-v10];
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v80 = &v78[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  v84 = &v78[-v14];
  MEMORY[0x270FA5388](v15);
  v81 = &v78[-v16];
  MEMORY[0x270FA5388](v17);
  v87 = &v78[-v18];
  MEMORY[0x270FA5388](v19);
  uint64_t v86 = (uint64_t)&v78[-v20];
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = &v78[-v22];
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = &v78[-v25];
  uint64_t v27 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v28 = type metadata accessor for AttributedString();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  char v88 = &v78[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v31);
  unint64_t v33 = &v78[-v32];
  uint64_t v34 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v93 = *(void *)(v34 - 8);
  uint64_t v94 = v34;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = &v78[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v36);
  v92 = v36;
  Date.AnchoredRelativeFormatStyle.format(_:)();
  AttributeContainer.init()();
  v89 = v33;
  AttributedString.init(_:attributes:)();
  v102[0] = 2;
  uint64_t v37 = *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20);
  uint64_t v98 = v2;
  uint64_t v38 = *(void *)(v2 + v37);
  uint64_t v39 = *(void *)(v38 + 16);
  uint64_t v90 = v29;
  uint64_t v91 = v28;
  if (v39)
  {
    uint64_t v40 = v95;
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v3 + 16))(v26, v38+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * (v39 - 1), v95);
    uint64_t v41 = *(unsigned char **)(v3 + 56);
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))v41)(v26, 0, 1, v40);
  }
  else
  {
    uint64_t v41 = *(unsigned char **)(v3 + 56);
    uint64_t v40 = v95;
    ((void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v41)(v26, 1, 1, v95);
  }
  uint64_t v42 = v3;
  uint64_t v43 = v99;
  uint64_t v44 = (uint64_t)v26;
  uint64_t v45 = v97;
  static Date.ComponentsFormatStyle.Style.spellOut.getter();
  v97 = v41;
  ((void (*)(unsigned char *, void, uint64_t, uint64_t))v41)(v23, 0, 1, v40);
  uint64_t v46 = (uint64_t)&v45[*(int *)(v43 + 48)];
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v23, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  outlined init with copy of SystemFormatStyle.DateReference(v44, v46, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  uint64_t v95 = v42;
  uint64_t v47 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v42 + 48);
  int v48 = v47(v45, 1, v40);
  uint64_t v100 = v44;
  if (v48 == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    if (v47((unsigned char *)v46, 1, v40) == 1) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v49 = v86;
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v45, v86, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v47((unsigned char *)v46, 1, v40) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v49, v40);
LABEL_9:
    outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    goto LABEL_10;
  }
  uint64_t v65 = v95;
  uint64_t v66 = v83;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v95 + 32))(v83, v46, v40);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  int v79 = dispatch thunk of static Equatable.== infix(_:_:)();
  double v67 = *(void (**)(unsigned char *, uint64_t))(v65 + 8);
  v68 = v66;
  uint64_t v44 = v100;
  v67(v68, v40);
  outlined destroy of ClosedRange<Date>?((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v67((unsigned char *)v86, v40);
  uint64_t v43 = v99;
  outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v79)
  {
    uint64_t v53 = v90;
    uint64_t v52 = v91;
    uint64_t v54 = (uint64_t)v88;
    uint64_t v55 = (uint64_t)v89;
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v50 = v87;
  static Date.ComponentsFormatStyle.Field.minute.getter();
  ((void (*)(unsigned char *, void, uint64_t, uint64_t))v97)(v50, 0, 1, v40);
  uint64_t v45 = v85;
  uint64_t v51 = (uint64_t)&v85[*(int *)(v43 + 48)];
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v50, (uint64_t)v85, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  outlined init with copy of SystemFormatStyle.DateReference(v44, v51, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v47(v45, 1, v40) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    if (v47((unsigned char *)v51, 1, v40) == 1)
    {
LABEL_12:
      uint64_t v53 = v90;
      uint64_t v52 = v91;
      uint64_t v54 = (uint64_t)v88;
      uint64_t v55 = (uint64_t)v89;
      outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_21:
      uint64_t v58 = v93;
      uint64_t v57 = v94;
      __n128 v59 = v92;
LABEL_28:
      outlined destroy of ClosedRange<Date>?(v100, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      goto LABEL_29;
    }
    goto LABEL_15;
  }
  double v56 = v81;
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v45, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v47((unsigned char *)v51, 1, v40) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v56, v40);
LABEL_15:
    outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    uint64_t v58 = v93;
    uint64_t v57 = v94;
    __n128 v59 = v92;
    goto LABEL_16;
  }
  uint64_t v70 = v95;
  v71 = v83;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v95 + 32))(v83, v51, v40);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  LODWORD(v86) = dispatch thunk of static Equatable.== infix(_:_:)();
  v72 = *(void (**)(unsigned char *, uint64_t))(v70 + 8);
  v72(v71, v40);
  outlined destroy of ClosedRange<Date>?((uint64_t)v87, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v72(v56, v40);
  uint64_t v43 = v99;
  outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  uint64_t v58 = v93;
  uint64_t v57 = v94;
  __n128 v59 = v92;
  if (v86)
  {
    uint64_t v52 = v91;
    goto LABEL_27;
  }
LABEL_16:
  int v60 = v84;
  static Date.ComponentsFormatStyle.Field.second.getter();
  ((void (*)(unsigned char *, void, uint64_t, uint64_t))v97)(v60, 0, 1, v40);
  uint64_t v61 = *(int *)(v43 + 48);
  v62 = v82;
  uint64_t v63 = (uint64_t)&v82[v61];
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v60, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  outlined init with take of ClosedRange<Date>(v100, v63, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v47(v62, 1, v40) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    int v64 = v47((unsigned char *)v63, 1, v40);
    uint64_t v52 = v91;
    if (v64 == 1)
    {
      uint64_t v100 = (uint64_t)v62;
LABEL_27:
      uint64_t v55 = (uint64_t)v89;
      uint64_t v53 = v90;
      uint64_t v54 = (uint64_t)v88;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  v69 = v80;
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v62, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  if (v47((unsigned char *)v63, 1, v40) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    (*(void (**)(unsigned char *, uint64_t))(v95 + 8))(v69, v40);
    uint64_t v52 = v91;
LABEL_24:
    outlined destroy of ClosedRange<Date>?((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    uint64_t v55 = (uint64_t)v89;
    uint64_t v53 = v90;
LABEL_33:
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v59, v57);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v96, v55, v52);
  }
  uint64_t v75 = v95;
  v76 = v83;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v95 + 32))(v83, v63, v40);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  LODWORD(v100) = dispatch thunk of static Equatable.== infix(_:_:)();
  v77 = *(void (**)(unsigned char *, uint64_t))(v75 + 8);
  v77(v76, v40);
  outlined destroy of ClosedRange<Date>?((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  v77(v69, v40);
  outlined destroy of ClosedRange<Date>?((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  uint64_t v53 = v90;
  uint64_t v52 = v91;
  uint64_t v54 = (uint64_t)v88;
  uint64_t v55 = (uint64_t)v89;
  if ((v100 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_29:
  if (specialized getter of showsZeroValue #1 in SystemFormatStyle.DateReference.relativeText(for:)(v102, v101, v98))
  {
    SystemFormatStyle.DateReference.nowString(_:)(v55, v54);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v55, v52);
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v59, v57);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v96, v54, v52);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v59, v57);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
    v74(v54, v55, v52);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v74)(v96, v54, v52);
  }
}

uint64_t SystemFormatStyle.DateReference.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateReference(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 36);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);

  return v7(v5, a1, v6);
}

uint64_t SystemFormatStyle.DateReference.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v5 = *(void *)(v1 + v4[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v2 + v4[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v2 + v4[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t SystemFormatStyle.DateReference.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SystemFormatStyle.DateReference();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 20));
    HIBYTE(v12) = 1;
    type metadata accessor for ClosedRange<Date>?(0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], MEMORY[0x263F073D0], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    type metadata accessor for Date.ComponentsFormatStyle.Field();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 32));
    HIBYTE(v12) = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 7;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 8;
    type metadata accessor for FormatStyleCapitalizationContext();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int SystemFormatStyle.DateReference.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v3 = *(void *)(v0 + v2[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v1 + v2[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v1 + v2[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateReference.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v3 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  MEMORY[0x270FA5388](v3);
  int v48 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for TimeZone();
  uint64_t v66 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v49 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar();
  uint64_t v68 = *(void *)(v6 - 8);
  uint64_t v69 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v50 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v71 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v51 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  uint64_t v11 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v57 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.DateReference.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v54 = v15;
  uint64_t v55 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v46 - v17;
  uint64_t v19 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(int *)(v22 + 32);
  *(void *)&v21[v23] = 0;
  uint64_t v70 = &v21[*(int *)(v22 + 36)];
  static Locale.autoupdatingCurrent.getter();
  double v67 = &v21[v19[10]];
  static Calendar.autoupdatingCurrent.getter();
  uint64_t v65 = &v21[v19[11]];
  uint64_t v24 = static TimeZone.autoupdatingCurrent.getter();
  uint64_t v58 = v19;
  uint64_t v25 = v21;
  uint64_t v61 = &v21[v19[12]];
  MEMORY[0x24C520B20](v24);
  uint64_t v26 = a1[3];
  uint64_t v63 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v26);
  lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
  double v56 = v18;
  uint64_t v27 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v27)
  {
    uint64_t v28 = v62;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    uint64_t v29 = v59;
    uint64_t v30 = v60;
    uint64_t v31 = v69;
    uint64_t v32 = v61;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v31);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, v30);
  }
  else
  {
    uint64_t v64 = v23;
    LOBYTE(v74) = 0;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v33 = (uint64_t)v25;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v25, v14, v12);
    type metadata accessor for ClosedRange<Date>?(0, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], MEMORY[0x263F073D0], MEMORY[0x263F8D488]);
    char v73 = 1;
    lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A], &lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v58;
    *(void *)(v33 + v58[5]) = v74;
    LOBYTE(v74) = 2;
    uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v36 = v62;
    *(void *)(v33 + v34[6]) = v35;
    LOBYTE(v74) = 3;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
    uint64_t v37 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v46[3] = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v33 + v34[7], v11, v37);
    char v73 = 4;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)(v33 + v64) = v74;
    LOBYTE(v74) = 5;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    uint64_t v38 = v51;
    uint64_t v39 = v72;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v70, v38, v39);
    LOBYTE(v74) = 6;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    uint64_t v40 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v41 = v59;
    uint64_t v42 = v60;
    (*(void (**)(char *, char *, uint64_t))(v68 + 40))(v67, v50, v40);
    LOBYTE(v74) = 7;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    uint64_t v43 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v66 + 40))(v65, v43, v36);
    LOBYTE(v74) = 8;
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
    uint64_t v44 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
    (*(void (**)(char *, char *, uint64_t))(v41 + 40))(v61, v44, v42);
    outlined init with copy of SystemFormatStyle.DateReference(v33, v47, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    return outlined destroy of ClosedRange<Date>?(v33, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  }
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateReference(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  uint64_t v7 = a3 + *(int *)(a2 + 36);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24);

  return v9(v7, a1, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.DateReference@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SystemFormatStyle.DateReference.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.DateReference(void *a1)
{
  return SystemFormatStyle.DateReference.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.DateReference(uint64_t a1, int *a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v5 = *(void *)(v2 + a2[5]);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v7, v5);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(void *)(v4 + a2[6]));
  type metadata accessor for Date.ComponentsFormatStyle.Field();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v4 + a2[8]));
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for FormatStyleCapitalizationContext();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.DateReference.discreteInput(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v151 = a1;
  uint64_t v149 = a2;
  uint64_t v150 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v148 = *(void *)(v150 - 8);
  MEMORY[0x270FA5388](v150);
  uint64_t v4 = (char *)v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  uint64_t v142 = *(void *)(v5 - 8);
  uint64_t v143 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v145 = (uint64_t)v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for Calendar.Component();
  uint64_t v144 = *(void *)(v136 - 8);
  MEMORY[0x270FA5388](v136);
  uint64_t v135 = (uint64_t)v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateInterval?(0);
  MEMORY[0x270FA5388](v8 - 8);
  v128 = (char *)v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v133 = (char *)v119 - v11;
  uint64_t v138 = type metadata accessor for DateInterval();
  uint64_t v134 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  v127 = (char *)v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  v132 = (char *)v119 - v14;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v130 = (uint64_t)v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  v141 = (char *)v119 - v18;
  uint64_t v19 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v146 = *(void *)(v19 - 8);
  uint64_t v147 = v19;
  MEMORY[0x270FA5388](v19);
  v129 = (char *)v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  v139 = (char *)v119 - v22;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v140 = (char *)v119 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v126 = (char *)v119 - v27;
  MEMORY[0x270FA5388](v28);
  v131 = (char *)v119 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v119 - v31;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x270FA5388](v33 - 8);
  uint64_t v35 = (char *)v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v37 = v36;
  uint64_t v38 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v40 = (char *)v119 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)v119 - v42;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v4);
    Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    return (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v4, v150);
  }
  char v125 = v4;
  uint64_t v45 = v150;
  uint64_t v137 = v2;
  outlined init with take of ClosedRange<Date>((uint64_t)v35, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v46 = lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v47 = v151;
  char v48 = dispatch thunk of static Comparable.>= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v32, v47, v23);
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v43, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v49 = v23;
  uint64_t v50 = v24;
  uint64_t v51 = (uint64_t)v43;
  uint64_t v124 = v46;
  if (v48) {
    char v52 = dispatch thunk of static Comparable.<= infix(_:_:)();
  }
  else {
    char v52 = 0;
  }
  uint64_t v53 = v45;
  outlined destroy of ClosedRange<Date>?((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v50 + 8);
  uint64_t v150 = v50 + 8;
  v54(v32, v49);
  if (v52)
  {
    uint64_t v143 = v50;
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v55 = v149;
    uint64_t v56 = (uint64_t)v125;
    uint64_t v57 = v140;
    Date.init(timeIntervalSinceReferenceDate:)();
    SystemFormatStyle.DateReference.relativeStyle.getter(v56);
    uint64_t v58 = v145;
    Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v56, v53);
    specialized max<A>(_:ifPresent:)(v57, v58, MEMORY[0x263F8D178], v55);
    outlined destroy of ClosedRange<Date>?(v58, (uint64_t (*)(void))type metadata accessor for Date?);
    v54(v57, v49);
    outlined destroy of ClosedRange<Date>?(v51, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v143 + 56))(v55, 0, 1, v49);
  }
  v140 = (char *)v54;
  type metadata accessor for Date??(0);
  uint64_t v59 = swift_allocBox();
  uint64_t v60 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v61, 1, 1, v143);
  uint64_t result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v151);
  uint64_t v65 = v146;
  uint64_t v66 = (uint64_t)v141;
  if (v63 != v64 >> 1)
  {
    if (v63 >= (uint64_t)(v64 >> 1))
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v141, v62 + *(void *)(v146 + 72) * v63, v147);
    uint64_t v60 = 0;
  }
  uint64_t v148 = v59;
  uint64_t v67 = v60;
  uint64_t v68 = v147;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v66, v67, 1, v147);
  swift_unknownObjectRelease();
  uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v69(v66, 1, v68) == 1)
  {
    outlined destroy of ClosedRange<Date>?(v66, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_16:
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)(v51, v149);
    outlined destroy of ClosedRange<Date>?(v51, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    return swift_release();
  }
  uint64_t v142 = v51;
  uint64_t v143 = v50;
  char v125 = (char *)v49;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 32);
  uint64_t v71 = (uint64_t)v139;
  uint64_t v123 = v65 + 32;
  v122 = v70;
  v70(v139, v66, v68);
  v141 = (char *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v72 = v137 + *((int *)v141 + 10);
  uint64_t v73 = v135;
  uint64_t v74 = v68;
  uint64_t v75 = v65;
  SystemFormatStyle.DateReference.component(for:)(v71, v135);
  uint64_t v76 = (uint64_t)v133;
  Calendar.dateInterval(of:for:)();
  v77 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
  v144 += 8;
  v121 = v77;
  v77(v73, v136);
  uint64_t v78 = v134;
  uint64_t v79 = v138;
  v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  if (v120(v76, 1, v138) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v71, v74);
    outlined destroy of ClosedRange<Date>?(v76, (uint64_t (*)(void))type metadata accessor for DateInterval?);
    uint64_t v51 = v142;
    goto LABEL_16;
  }
  v119[1] = v72;
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
  v81 = v132;
  v133 = (char *)(v78 + 32);
  v119[0] = v80;
  v80(v132, v76, v79);
  v82 = v131;
  DateInterval.end.getter();
  v83 = v125;
  char v84 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v85 = ((uint64_t (*)(char *, char *))v140)(v82, v83);
  if (v84)
  {
    uint64_t v86 = v81;
    DateInterval.end.getter();
    uint64_t v87 = v145;
    uint64_t v88 = v142;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)(v142, v145);
    uint64_t v89 = v149;
    specialized max<A>(_:ifPresent:)(v82, v87, MEMORY[0x263F8D178], v149);
    outlined destroy of ClosedRange<Date>?(v87, (uint64_t (*)(void))type metadata accessor for Date?);
    ((void (*)(char *, char *))v140)(v82, v83);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v86, v138);
    outlined destroy of ClosedRange<Date>?(v88, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v139, v147);
    (*(void (**)(uint64_t, void, uint64_t, char *))(v143 + 56))(v89, 0, 1, v83);
  }
  else
  {
    uint64_t v90 = *(void *)(v137 + *((int *)v141 + 5));
    MEMORY[0x270FA5388](v85);
    v119[-2] = v139;
    swift_bridgeObjectRetain();
    uint64_t v91 = v130;
    specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:), v90, v130);
    swift_bridgeObjectRelease();
    uint64_t v92 = v147;
    if (v69(v91, 1, v147) == 1)
    {
      outlined destroy of ClosedRange<Date>?(v91, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      uint64_t v93 = v149;
      uint64_t v94 = v146;
      uint64_t v95 = v138;
    }
    else
    {
      uint64_t v96 = (uint64_t)v129;
      v122(v129, v91, v92);
      uint64_t v97 = v135;
      SystemFormatStyle.DateReference.component(for:)(v96, v135);
      uint64_t v98 = (uint64_t)v128;
      Calendar.dateInterval(of:for:)();
      v121(v97, v136);
      uint64_t v95 = v138;
      if (v120(v98, 1, v138) != 1)
      {
        uint64_t v101 = v127;
        ((void (*)(char *, uint64_t, uint64_t))v119[0])(v127, v98, v95);
        uint64_t v102 = v131;
        uint64_t v103 = v95;
        DateInterval.start.getter();
        char v104 = static Date.< infix(_:_:)();
        v105 = v102;
        uint64_t v106 = v125;
        uint64_t v107 = v140;
        ((void (*)(char *, char *))v140)(v105, v125);
        uint64_t v108 = v149;
        if (v104)
        {
          uint64_t v109 = v142;
          getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)(v142, v149);
          uint64_t v110 = *(void (**)(char *, uint64_t))(v134 + 8);
          v110(v101, v95);
          v111 = *(void (**)(char *, uint64_t))(v146 + 8);
          v111(v129, v92);
          v110(v132, v103);
          outlined destroy of ClosedRange<Date>?(v109, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
          v111(v139, v92);
        }
        else
        {
          char v112 = v126;
          DateInterval.start.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          uint64_t v113 = v146;
          Date.init(timeIntervalSinceReferenceDate:)();
          ((void (*)(char *, char *))v107)(v112, v106);
          uint64_t v114 = *(void (**)(char *, uint64_t))(v134 + 8);
          uint64_t v115 = v138;
          v114(v101, v138);
          v116 = *(void (**)(char *, uint64_t))(v113 + 8);
          char v117 = v106;
          uint64_t v118 = v147;
          v116(v129, v147);
          v114(v132, v115);
          outlined destroy of ClosedRange<Date>?(v142, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
          v116(v139, v118);
          (*(void (**)(uint64_t, void, uint64_t, char *))(v143 + 56))(v108, 0, 1, v117);
        }
        return swift_release();
      }
      uint64_t v94 = v146;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v96, v92);
      outlined destroy of ClosedRange<Date>?(v98, (uint64_t (*)(void))type metadata accessor for DateInterval?);
      uint64_t v93 = v149;
    }
    uint64_t v99 = v139;
    uint64_t v100 = v142;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)(v142, v93);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v132, v95);
    outlined destroy of ClosedRange<Date>?(v100, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v99, v92);
  }
  return swift_release();
}

uint64_t SystemFormatStyle.DateReference.relativeStyle.getter@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v2 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v23 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v22 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v10 = type metadata accessor for Date.RelativeFormatStyle.Presentation();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v11 = type metadata accessor for Date();
  double v12 = MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v12);
  uint64_t v15 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v16 = swift_bridgeObjectRetain();
  specialized Set.init<A>(_:)(v16);
  swift_bridgeObjectRelease();
  static Date.RelativeFormatStyle.Presentation.named.getter();
  uint64_t v17 = *(void *)(v1 + v15[8]);
  if (v17 > 1)
  {
    static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  }
  else if (v17 == 1)
  {
    static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
  }
  else
  {
    static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v1 + v15[9], v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v22, v1 + v15[10], v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v1 + v15[12], v25);
  return Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)();
}

uint64_t specialized max<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized max<A>(_:ifPresent:)(a1, a2, MEMORY[0x263F8D178], a3);
}

uint64_t getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(before:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for Date?(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = swift_projectBox();
  outlined init with copy of SystemFormatStyle.DateReference(v15, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Date??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Date??);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v17 = a1 + *(int *)(v16 + 36);
    char v18 = static Date.> infix(_:_:)();
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    if (v18)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v8, v17, v19);
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v8, v21, 1, v19);
    outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Date?);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    swift_beginAccess();
    outlined assign with take of Date??((uint64_t)v11, v15);
  }
  else
  {
    uint64_t v8 = v14;
  }
  return outlined init with take of ClosedRange<Date>((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for Date?);
}

uint64_t SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v43 = a1;
  uint64_t v42 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v44 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v15 = v44[5];
  uint64_t v16 = *(void *)(v2 + v15);
  uint64_t v46 = v2;
  swift_bridgeObjectRetain();
  uint64_t v45 = v14;
  specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter, v16, (uint64_t)v14);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v2 + v15);
  unint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v41 = v18;
  if (v18)
  {
    uint64_t v34 = v19;
    uint64_t v35 = v15;
    uint64_t v20 = v17;
    uint64_t v21 = v17 + ((v19 + 32) & ~v19);
    uint64_t v40 = *(void *)(v7 + 72);
    uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v37 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v23 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v36 = v20;
    swift_bridgeObjectRetain();
    unint64_t v24 = 0;
    while (1)
    {
      outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v45, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      if ((*v22)(v11, 1, v6) == 1)
      {
        outlined destroy of ClosedRange<Date>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      }
      else
      {
        uint64_t v25 = v39;
        (*v38)(v39, v11, v6);
        char v26 = MEMORY[0x24C521500](v25, v21);
        (*v37)(v25, v6);
        if (v26) {
          break;
        }
      }
      SystemFormatStyle.DateReference.component(for:)(v21, (uint64_t)v5);
      char v27 = Calendar.isDate(_:equalTo:toGranularity:)();
      (*v23)(v5, v42);
      if ((v27 & 1) == 0) {
        break;
      }
      ++v24;
      v21 += v40;
      if (v41 == v24)
      {
        swift_bridgeObjectRelease();
        unint64_t v24 = 0;
        uint64_t v17 = *(void *)(v2 + v35);
        unint64_t v18 = *(void *)(v17 + 16);
LABEL_10:
        LODWORD(v19) = v34;
        goto LABEL_12;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v2 + v35);
    unint64_t v18 = *(void *)(v17 + 16);
    if (v18 >= v24) {
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v24 = 0;
LABEL_12:
  uint64_t v29 = *(void *)(v2 + v44[8]);
  uint64_t result = *(void *)(v2 + v44[6]);
  if (v29 < 3)
  {
LABEL_18:
    uint64_t v33 = specialized Collection.prefix(_:)(result, v17, v17 + ((v19 + 32) & ~(unint64_t)v19), v24, (2 * v18) | 1);
    swift_bridgeObjectRetain();
    outlined destroy of ClosedRange<Date>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    return v33;
  }
  uint64_t v30 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  BOOL v31 = __OFSUB__(v30, v29);
  uint64_t v32 = v30 - v29;
  if (!v31)
  {
    if (v32 <= 1) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = v32;
    }
    goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.DateReference.component(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v33[-v12];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16))(&v33[-v12], a1, v6, v11);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  if (v14)
  {
    v15(v13, v6);
    uint64_t v16 = (unsigned int *)MEMORY[0x263F078A0];
LABEL_16:
    uint64_t v30 = *v16;
    uint64_t v22 = type metadata accessor for Calendar.Component();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
    uint64_t v27 = a2;
    uint64_t v26 = v30;
    return v23(v27, v26, v22);
  }
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v9, v6);
  if (v17)
  {
    v15(v13, v6);
    uint64_t v16 = (unsigned int *)MEMORY[0x263F078A8];
    goto LABEL_16;
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v9, v6);
  if (v18)
  {
    v15(v13, v6);
    uint64_t v19 = *(void *)(v3 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20));
    swift_bridgeObjectRetain();
    uint64_t v20 = static Date.ComponentsFormatStyle.Style.narrow.getter();
    MEMORY[0x270FA5388](v20);
    *(void *)&v33[-16] = v9;
    BOOL v21 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (uint64_t)&v33[-32], v19);
    v15(v9, v6);
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for Calendar.Component();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
    if (v21) {
      unint64_t v24 = (unsigned int *)MEMORY[0x263F07848];
    }
    else {
      unint64_t v24 = (unsigned int *)MEMORY[0x263F07830];
    }
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v6);
    if (v25)
    {
      v15(v13, v6);
      uint64_t v16 = (unsigned int *)MEMORY[0x263F07870];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v6);
    if (v28)
    {
      v15(v13, v6);
      uint64_t v16 = (unsigned int *)MEMORY[0x263F07890];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Field.minute.getter();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v6);
    if (v29)
    {
      v15(v13, v6);
      uint64_t v16 = (unsigned int *)MEMORY[0x263F078C0];
      goto LABEL_16;
    }
    static Date.ComponentsFormatStyle.Field.second.getter();
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v9, v6);
    v15(v13, v6);
    uint64_t v22 = type metadata accessor for Calendar.Component();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104);
    if (v32) {
      unint64_t v24 = (unsigned int *)MEMORY[0x263F078C8];
    }
    else {
      unint64_t v24 = (unsigned int *)MEMORY[0x263F078A0];
    }
  }
  uint64_t v26 = *v24;
  uint64_t v27 = a2;
  return v23(v27, v26, v22);
}

uint64_t specialized BidirectionalCollection.last(where:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = a2
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + v10 * (v5 - 1);
    uint64_t v12 = -v10;
    while (1)
    {
      uint64_t result = a1(v11);
      if (v3) {
        break;
      }
      if (result)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a3, v11, v8);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
      }
      v11 += v12;
      if (!--v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.discreteInput(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v152 = a2;
  uint64_t v153 = a1;
  uint64_t v3 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v150 = *(uint64_t (***)(char *, uint64_t))(v3 - 8);
  uint64_t v151 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date?(0);
  uint64_t v143 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  uint64_t v144 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v146 = (uint64_t *)((char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v138 = type metadata accessor for Calendar.Component();
  uint64_t v145 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138);
  uint64_t v137 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DateInterval?(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v130 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v135 = (char *)&v118 - v12;
  uint64_t v13 = type metadata accessor for DateInterval();
  uint64_t v139 = *(void *)(v13 - 8);
  uint64_t v140 = v13;
  MEMORY[0x270FA5388](v13);
  v129 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v136 = (char *)&v118 - v16;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v133 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v148 = (char *)&v118 - v20;
  uint64_t v149 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v147 = *(void *)(v149 - 8);
  MEMORY[0x270FA5388](v149);
  v131 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  v141 = (char *)&v118 - v23;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v142 = (char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v128 = (char *)&v118 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v134 = (char *)&v118 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v118 - v32;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v36 = (char *)&v118 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  unint64_t v41 = (char *)&v118 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v118 - v43;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v38) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v5);
    Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    return v150[1](v5, v151);
  }
  uint64_t v132 = v2;
  outlined init with take of ClosedRange<Date>((uint64_t)v36, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v46 = lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v47 = v153;
  char v48 = dispatch thunk of static Comparable.>= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v33, v47, v24);
  v127 = v44;
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v44, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v49 = v25;
  uint64_t v125 = v46;
  if (v48) {
    char v50 = dispatch thunk of static Comparable.<= infix(_:_:)();
  }
  else {
    char v50 = 0;
  }
  uint64_t v51 = v132;
  outlined destroy of ClosedRange<Date>?((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v126 = v49;
  uint64_t v52 = v49 + 8;
  uint64_t v53 = *(uint64_t (***)(char *, uint64_t))(v49 + 8);
  ((void (*)(char *, uint64_t))v53)(v33, v24);
  if (v50)
  {
    uint64_t v54 = (uint64_t)v127;
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v124 = v52;
    uint64_t v55 = v152;
    uint64_t v56 = v142;
    Date.init(timeIntervalSinceReferenceDate:)();
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v5);
    uint64_t v57 = (uint64_t)v146;
    Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    v150[1](v5, v151);
    specialized max<A>(_:ifPresent:)(v56, v57, MEMORY[0x263F8D170], v55);
    outlined destroy of ClosedRange<Date>?(v57, (uint64_t (*)(void))type metadata accessor for Date?);
    ((void (*)(char *, uint64_t))v53)(v56, v24);
    outlined destroy of ClosedRange<Date>?(v54, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v55, 0, 1, v24);
  }
  type metadata accessor for Date??(0);
  uint64_t v58 = swift_allocBox();
  uint64_t v59 = 1;
  (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v143 + 7))(v60, 1, 1, v144);
  uint64_t result = SystemFormatStyle.DateReference.fieldsToShowInAbsoluteStyle(for:)(v47);
  uint64_t v64 = v147;
  if (v62 != v63 >> 1)
  {
    if (v62 >= (uint64_t)(v63 >> 1))
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v147 + 16))(v148, v61 + *(void *)(v147 + 72) * v62, v149);
    uint64_t v59 = 0;
  }
  uint64_t v150 = v53;
  uint64_t v151 = v58;
  uint64_t v65 = v148;
  uint64_t v66 = v59;
  uint64_t v67 = v149;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v148, v66, 1, v149);
  uint64_t v68 = (uint64_t)v65;
  swift_unknownObjectRelease();
  uint64_t v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  if (v69(v68, 1, v67) == 1)
  {
    outlined destroy of ClosedRange<Date>?(v68, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
LABEL_16:
    uint64_t v79 = (uint64_t)v127;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v127, v152);
    outlined destroy of ClosedRange<Date>?(v79, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    return swift_release();
  }
  uint64_t v143 = v69;
  uint64_t v144 = v24;
  uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
  uint64_t v71 = v68;
  uint64_t v72 = v51;
  uint64_t v73 = (uint64_t)v141;
  uint64_t v142 = (char *)(v64 + 32);
  uint64_t v123 = v70;
  v70(v141, v71, v67);
  uint64_t v148 = (char *)type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v74 = v72 + *((int *)v148 + 10);
  uint64_t v75 = v137;
  SystemFormatStyle.DateReference.component(for:)(v73, v137);
  uint64_t v76 = (uint64_t)v135;
  uint64_t v122 = v74;
  Calendar.dateInterval(of:for:)();
  v77 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
  v145 += 8;
  v77(v75, v138);
  uint64_t v78 = v139;
  v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
  if (v121(v76, 1, v140) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v73, v149);
    outlined destroy of ClosedRange<Date>?(v76, (uint64_t (*)(void))type metadata accessor for DateInterval?);
    goto LABEL_16;
  }
  v120 = v77;
  uint64_t v80 = *(void (**)(void))(v78 + 32);
  uint64_t v135 = (char *)(v78 + 32);
  v119 = v80;
  v80();
  v81 = v134;
  DateInterval.start.getter();
  uint64_t v82 = v144;
  char v83 = dispatch thunk of static Comparable.< infix(_:_:)();
  char v84 = v150;
  uint64_t v85 = ((uint64_t (*)(char *, uint64_t))v150)(v81, v82);
  if (v83)
  {
    uint64_t v86 = v136;
    DateInterval.start.getter();
    uint64_t v87 = (uint64_t)v146;
    uint64_t v88 = (uint64_t)v127;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v127, (uint64_t)v146);
    uint64_t v89 = v152;
    specialized max<A>(_:ifPresent:)(v81, v87, MEMORY[0x263F8D170], v152);
    outlined destroy of ClosedRange<Date>?(v87, (uint64_t (*)(void))type metadata accessor for Date?);
    ((void (*)(char *, uint64_t))v84)(v81, v82);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v86, v140);
    outlined destroy of ClosedRange<Date>?(v88, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v141, v149);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v89, 0, 1, v82);
  }
  else
  {
    uint64_t v146 = &v118;
    uint64_t v90 = *(void *)(v132 + *((int *)v148 + 5));
    MEMORY[0x270FA5388](v85);
    *(&v118 - 2) = (uint64_t)v141;
    swift_bridgeObjectRetain();
    uint64_t v91 = v133;
    specialized BidirectionalCollection.last(where:)((uint64_t (*)(uint64_t))partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:), v90, v133);
    swift_bridgeObjectRelease();
    uint64_t v92 = v149;
    if (v143(v91, 1, v149) == 1)
    {
      outlined destroy of ClosedRange<Date>?(v91, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
      uint64_t v93 = v152;
      uint64_t v94 = v147;
      uint64_t v95 = v140;
    }
    else
    {
      uint64_t v96 = (uint64_t)v131;
      v123(v131, v91, v92);
      uint64_t v97 = v137;
      SystemFormatStyle.DateReference.component(for:)(v96, v137);
      uint64_t v98 = (uint64_t)v130;
      Calendar.dateInterval(of:for:)();
      v120(v97, v138);
      uint64_t v95 = v140;
      if (v121(v98, 1, v140) != 1)
      {
        uint64_t v100 = v129;
        ((void (*)(char *, uint64_t, uint64_t))v119)(v129, v98, v95);
        uint64_t v101 = v134;
        uint64_t v102 = v95;
        DateInterval.end.getter();
        char v103 = static Date.> infix(_:_:)();
        uint64_t v104 = v144;
        ((void (*)(char *, uint64_t))v150)(v101, v144);
        uint64_t v105 = v152;
        if (v103)
        {
          uint64_t v106 = (uint64_t)v127;
          getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v127, v152);
          uint64_t v107 = *(void (**)(char *, uint64_t))(v139 + 8);
          v107(v100, v95);
          uint64_t v108 = *(void (**)(char *, uint64_t))(v147 + 8);
          uint64_t v109 = v149;
          v108(v131, v149);
          v107(v136, v102);
          outlined destroy of ClosedRange<Date>?(v106, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
          v108(v141, v109);
        }
        else
        {
          uint64_t v110 = v128;
          DateInterval.end.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          uint64_t v111 = v139;
          uint64_t v112 = v147;
          uint64_t v113 = v126;
          Date.init(timeIntervalSinceReferenceDate:)();
          ((void (*)(char *, uint64_t))v150)(v110, v104);
          uint64_t v114 = *(void (**)(char *, uint64_t))(v111 + 8);
          uint64_t v115 = v140;
          v114(v100, v140);
          v116 = *(void (**)(char *, uint64_t))(v112 + 8);
          uint64_t v117 = v149;
          v116(v131, v149);
          v114(v136, v115);
          outlined destroy of ClosedRange<Date>?((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
          v116(v141, v117);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v105, 0, 1, v104);
        }
        return swift_release();
      }
      uint64_t v94 = v147;
      (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v96, v92);
      outlined destroy of ClosedRange<Date>?(v98, (uint64_t (*)(void))type metadata accessor for DateInterval?);
      uint64_t v93 = v152;
    }
    uint64_t v99 = (uint64_t)v127;
    getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)((uint64_t)v127, v93);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v136, v95);
    outlined destroy of ClosedRange<Date>?(v99, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v141, v92);
  }
  return swift_release();
}

uint64_t specialized min<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized max<A>(_:ifPresent:)(a1, a2, MEMORY[0x263F8D170], a3);
}

uint64_t specialized max<A>(_:ifPresent:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemFormatStyle.DateReference(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Date?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Date?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 16))(a4, a1, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    uint64_t v16 = lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    if (a3(v14, a1, v11, v16))
    {
      uint64_t v17 = a4;
      uint64_t v18 = v14;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v18 = a1;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v17, v18, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t getter of switchToRelativeDate #1 in SystemFormatStyle.DateReference.discreteInput(after:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for Date?(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date??(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = swift_projectBox();
  outlined init with copy of SystemFormatStyle.DateReference(v15, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Date??);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Date??);
    char v16 = static Date.< infix(_:_:)();
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if (v16)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v8, a1, v17);
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v8, v19, 1, v17);
    outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Date?);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    swift_beginAccess();
    outlined assign with take of Date??((uint64_t)v11, v15);
  }
  else
  {
    uint64_t v8 = v14;
  }
  return outlined init with take of ClosedRange<Date>((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for Date?);
}

uint64_t SystemFormatStyle.DateReference.input(before:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v38 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v37 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v33 - v18;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
LABEL_7:
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v6);
    Date.AnchoredRelativeFormatStyle.input(before:)();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  }
  uint64_t v23 = v13;
  uint64_t v24 = lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v25 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v36 = v23;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v34(v19, a1, v12);
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v22, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v35 = v24;
  if (v25) {
    char v26 = dispatch thunk of static Comparable.<= infix(_:_:)();
  }
  else {
    char v26 = 0;
  }
  outlined destroy of ClosedRange<Date>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27(v19, v12);
  outlined destroy of ClosedRange<Date>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if (v26) {
    goto LABEL_7;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v29 = v37;
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v30 = v38;
  static Date.- infix(_:_:)();
  if (dispatch thunk of static Comparable.< infix(_:_:)()) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = v29;
  }
  uint64_t v32 = v42;
  v34(v42, (uint64_t)v31, v12);
  v27(v30, v12);
  v27(v29, v12);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v12);
}

uint64_t SystemFormatStyle.DateReference.input(after:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v4 = type metadata accessor for Date.AnchoredRelativeFormatStyle();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v38 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v37 = (char *)&v33 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v33 - v18;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v2;
  SystemFormatStyle.DateReference.relativeStyleInterval.getter((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v22, 1, v8) == 1)
  {
    outlined destroy of ClosedRange<Date>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
LABEL_7:
    SystemFormatStyle.DateReference.relativeStyle.getter((uint64_t)v6);
    Date.AnchoredRelativeFormatStyle.input(after:)();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v6, v41);
  }
  uint64_t v23 = v13;
  uint64_t v24 = lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v25 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v36 = v23;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v34(v19, a1, v12);
  outlined init with copy of SystemFormatStyle.DateReference((uint64_t)v22, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v35 = v24;
  if (v25) {
    char v26 = dispatch thunk of static Comparable.<= infix(_:_:)();
  }
  else {
    char v26 = 0;
  }
  outlined destroy of ClosedRange<Date>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27(v19, v12);
  outlined destroy of ClosedRange<Date>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if (v26) {
    goto LABEL_7;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v29 = v37;
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v30 = v38;
  static Date.+ infix(_:_:)();
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = v29;
  }
  uint64_t v32 = v42;
  v34(v42, (uint64_t)v31, v12);
  v27(v30, v12);
  v27(v29, v12);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v32, 0, 1, v12);
}

uint64_t specialized getter of showsZeroValue #1 in SystemFormatStyle.DateReference.relativeText(for:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v8 = *a1;
  if (v8 != 2) {
    return v8 & 1;
  }
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v9 = Date.AnchoredRelativeFormatStyle.discreteInput(after:)();
    MEMORY[0x270FA5388](v9);
    *(void *)&v15[-16] = a3;
    uint64_t v10 = partial apply for closure #2 in SystemFormatStyle.DateReference.relativeText(for:);
  }
  else
  {
    uint64_t v12 = Date.AnchoredRelativeFormatStyle.discreteInput(before:)();
    MEMORY[0x270FA5388](v12);
    *(void *)&v15[-16] = a3;
    uint64_t v10 = partial apply for closure #1 in SystemFormatStyle.DateReference.relativeText(for:);
  }
  char v13 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, char *))v10);
  outlined destroy of ClosedRange<Date>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Date?);
  if (v13 == 2) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v13 & 1;
  }
  swift_beginAccess();
  *a1 = v11;
  return v11;
}

uint64_t closure #2 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(BOOL *a1@<X8>)
{
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t result = dispatch thunk of static Comparable.< infix(_:_:)();
  *a1 = (result & 1) == 0;
  return result;
}

uint64_t SystemFormatStyle.DateReference.nowString(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v77 = a2;
  uint64_t v61 = type metadata accessor for Locale.Language();
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v59 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v58 = (char *)&v57 - v5;
  uint64_t v6 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  uint64_t v67 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v72 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v71 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v17 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  uint64_t v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date.RelativeFormatStyle.UnitsStyle();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  char v26 = (char *)&v57 - v25;
  uint64_t v27 = type metadata accessor for AttributedString();
  uint64_t v74 = *(void *)(v27 - 8);
  uint64_t v75 = v27;
  MEMORY[0x270FA5388](v27);
  uint64_t v73 = (char *)&v57 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for SystemFormatStyle.DateReference();
  uint64_t v70 = v11;
  uint64_t v29 = *(int *)(v69 + 32);
  uint64_t v76 = v2;
  uint64_t v30 = *(void *)(v2 + v29);
  uint64_t v68 = v14;
  if (v30 <= 1)
  {
    if (v30 == 1) {
      static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
    }
    else {
      static Date.RelativeFormatStyle.UnitsStyle.wide.getter();
    }
  }
  else
  {
    static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  }
  static Date.RelativeFormatStyle.UnitsStyle.narrow.getter();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle, MEMORY[0x263F07310]);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v21 + 8);
  v32(v23, v20);
  if (v31)
  {
    uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v32)(v26, v20);
    uint64_t v34 = v69;
    uint64_t v35 = v76;
    uint64_t v36 = v76 + *(int *)(v69 + 48);
    MEMORY[0x24C520B00](v33);
    LOBYTE(v36) = MEMORY[0x24C520B10](v36, v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v63);
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t))(v64 + 16);
    if (v36)
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*v37)(v70, v35 + *(int *)(v34 + 36), v65);
      uint64_t v38 = v73;
      if (one-time initialization token for systemFormatStyle == -1) {
        goto LABEL_22;
      }
    }
    else
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*v37)(v70, v35 + *(int *)(v34 + 36), v65);
      uint64_t v38 = v73;
      if (one-time initialization token for systemFormatStyle == -1) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
  static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter();
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  v32(v23, v20);
  uint64_t v40 = ((uint64_t (*)(char *, uint64_t))v32)(v26, v20);
  uint64_t v41 = v69;
  uint64_t v42 = v76;
  uint64_t v43 = v76 + *(int *)(v69 + 48);
  MEMORY[0x24C520B00](v40);
  char v44 = MEMORY[0x24C520B10](v43, v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v63);
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  if (v39)
  {
    uint64_t v38 = v73;
    if (v44)
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*v45)(v70, v42 + *(int *)(v41 + 36), v65);
      if (one-time initialization token for systemFormatStyle == -1) {
        goto LABEL_22;
      }
    }
    else
    {
      String.LocalizationValue.init(stringLiteral:)();
      (*v45)(v70, v42 + *(int *)(v41 + 36), v65);
      if (one-time initialization token for systemFormatStyle == -1) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
  uint64_t v38 = v73;
  if (v44)
  {
    String.LocalizationValue.init(stringLiteral:)();
    (*v45)(v70, v42 + *(int *)(v41 + 36), v65);
    if (one-time initialization token for systemFormatStyle == -1) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  String.LocalizationValue.init(stringLiteral:)();
  (*v45)(v70, v42 + *(int *)(v41 + 36), v65);
  if (one-time initialization token for systemFormatStyle != -1) {
LABEL_26:
  }
    swift_once();
LABEL_22:
  id v46 = objc_msgSend((id)static NSBundle.systemFormatStyle, sel_bundleURL);
  uint64_t v47 = v72;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v47, *MEMORY[0x263F06D20], v66);
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.AccessibilityAttributes();
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes and conformance AttributeScopes.AccessibilityAttributes, MEMORY[0x263EFAB78]);
  AttributedString.init<A>(localized:including:)();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  AttributedString.subscript.getter();
  swift_release();
  if (v78)
  {
    uint64_t v49 = v58;
    Locale.language.getter();
    char v50 = v59;
    Locale.Language.init(identifier:)();
    char v51 = Locale.Language.isEquivalent(to:)();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v53 = v61;
    v52(v50, v61);
    v52(v49, v53);
    if (v51) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v74 + 32))(v77, v38, v75);
    }
  }
  uint64_t v56 = v74;
  uint64_t v55 = v75;
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v75);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v77, v62, v55);
}

uint64_t SystemFormatStyle.DateReference.add(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v156 = a2;
  uint64_t v120 = type metadata accessor for Date.FormatStyle.Symbol.Second();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v118 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  v121 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
  uint64_t v129 = *(void *)(v128 - 8);
  MEMORY[0x270FA5388](v128);
  uint64_t v125 = (char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  uint64_t v126 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v124 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for Date.FormatStyle.Symbol.Weekday();
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  v131 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v132 = (char *)&v116 - v9;
  uint64_t v10 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  uint64_t v140 = *(void *)(v10 - 8);
  uint64_t v141 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v138 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date.FormatStyle.Symbol.Week();
  uint64_t v142 = *(void *)(v12 - 8);
  uint64_t v143 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v135 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v139 = (char *)&v116 - v15;
  uint64_t v146 = type metadata accessor for Calendar.Component();
  uint64_t v144 = *(void *)(v146 - 8);
  MEMORY[0x270FA5388](v146);
  uint64_t v145 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v151 = (char *)&v116 - v18;
  uint64_t v19 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v147 = v19;
  uint64_t v148 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v150 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  uint64_t v152 = *(void *)(v22 - 8);
  uint64_t v153 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v137 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v149 = (char *)&v116 - v25;
  uint64_t v26 = type metadata accessor for Date.FormatStyle();
  uint64_t v157 = *(void *)(v26 - 8);
  uint64_t v158 = v26;
  MEMORY[0x270FA5388](v26);
  uint64_t v130 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v136 = (char *)&v116 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v116 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v116 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v116 - v37;
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v116 - v40;
  uint64_t v42 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v45 = (char *)&v116 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v47 = MEMORY[0x270FA5388](v46);
  uint64_t v49 = (char *)&v116 - v48;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v43 + 16))((char *)&v116 - v48, a1, v42, v47);
  static Date.ComponentsFormatStyle.Style.wide.getter();
  v155 = (void (*)(uint64_t, char *, uint64_t))lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v50 = *(void (**)(char *, uint64_t))(v43 + 8);
  v50(v45, v42);
  if (a1)
  {
    char v51 = v149;
    v50(v49, v42);
    uint64_t v52 = v157;
    uint64_t v53 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v41, v156, v158);
    if (*(uint64_t *)(v154 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32)) >= 2) {
      static Date.FormatStyle.Symbol.Year.twoDigits.getter();
    }
    else {
      static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
    }
    uint64_t v62 = v152;
    uint64_t v61 = v153;
    Date.FormatStyle.year(_:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v51, v61);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v41, v53);
  }
  uint64_t v54 = v150;
  uint64_t v117 = v32;
  uint64_t v55 = (uint64_t)v151;
  uint64_t v149 = v35;
  static Date.ComponentsFormatStyle.Style.narrow.getter();
  char v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50(v45, v42);
  if (v56)
  {
    v50(v49, v42);
    uint64_t v57 = v157;
    uint64_t v58 = v38;
    uint64_t v59 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v38, v156, v158);
    uint64_t v60 = *(void *)(v154 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32));
    if (v60 >= 2)
    {
      MEMORY[0x24C521090]();
    }
    else if (v60 == 1)
    {
      MEMORY[0x24C521080]();
    }
    else
    {
      MEMORY[0x24C5210A0]();
    }
    uint64_t v92 = v147;
    uint64_t v93 = v148;
    Date.FormatStyle.month(_:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v54, v92);
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v58, v59);
  }
  static Date.ComponentsFormatStyle.Style.abbreviated.getter();
  char v64 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50(v45, v42);
  if (v64)
  {
    v50(v49, v42);
    static Date.ComponentsFormatStyle.Style.abbreviated.getter();
    uint64_t v65 = v154;
    SystemFormatStyle.DateReference.component(for:)((uint64_t)v45, v55);
    v50(v45, v42);
    uint64_t v67 = v144;
    uint64_t v66 = v145;
    uint64_t v68 = v146;
    (*(void (**)(char *, void, uint64_t))(v144 + 104))(v145, *MEMORY[0x263F07848], v146);
    char v69 = MEMORY[0x24C521A70](v55, v66);
    uint64_t v70 = *(void (**)(char *, uint64_t))(v67 + 8);
    v70(v66, v68);
    uint64_t v71 = ((uint64_t (*)(uint64_t, uint64_t))v70)(v55, v68);
    if ((v69 & 1) == 0)
    {
      uint64_t v57 = v157;
      uint64_t v58 = v117;
      uint64_t v59 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v117, v156, v158);
      if (*(uint64_t *)(v65 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32)) >= 2)
      {
        uint64_t v94 = v135;
        MEMORY[0x24C521020]();
      }
      else
      {
        uint64_t v94 = v135;
        MEMORY[0x24C521000]();
      }
      uint64_t v102 = v142;
      uint64_t v101 = v143;
      Date.FormatStyle.week(_:)();
      (*(void (**)(char *, uint64_t))(v102 + 8))(v94, v101);
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    }
    uint64_t v72 = v139;
    MEMORY[0x24C520FF0](v71);
    uint64_t v73 = v149;
    uint64_t v74 = v156;
    Date.FormatStyle.week(_:)();
    uint64_t v76 = v157;
    uint64_t v75 = v158;
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v74, v158);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v72, v143);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v76 + 32))(v74, v73, v75);
  }
  static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  v50(v45, v42);
  if (v77)
  {
    uint64_t v78 = ((uint64_t (*)(char *, uint64_t))v50)(v49, v42);
    uint64_t v79 = v138;
    MEMORY[0x24C520F20](v78);
    uint64_t v80 = v149;
    uint64_t v81 = v156;
    Date.FormatStyle.day(_:)();
    uint64_t v82 = v157;
    uint64_t v83 = v158;
    char v84 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
    v84(v81, v158);
    (*(void (**)(char *, uint64_t))(v140 + 8))(v79, v141);
    uint64_t v85 = *(void (**)(uint64_t, char *, uint64_t))(v82 + 32);
    v85(v81, v80, v83);
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v80, v81, v83);
    uint64_t v86 = v137;
    static Date.FormatStyle.Symbol.SecondFraction.omitted.getter();
    uint64_t v87 = v136;
    Date.FormatStyle.year(_:)();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v86, v153);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
    char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
    v84((uint64_t)v87, v83);
    v84((uint64_t)v80, v83);
    uint64_t v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = 2;
    uint64_t v90 = *(void *)(v154 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32));
    v155 = v85;
    uint64_t v157 = v89;
    switch(v90)
    {
      case 0:
        if ((v88 & 1) == 0) {
          goto LABEL_43;
        }
        uint64_t v91 = v131;
        MEMORY[0x24C521160]();
        break;
      case 1:
        if ((v88 & 1) == 0) {
          goto LABEL_43;
        }
        uint64_t v91 = v131;
        MEMORY[0x24C521150]();
        break;
      case 2:
        if ((v88 & 1) == 0
          || (getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(v89, v81) & 1) != 0)
        {
          goto LABEL_43;
        }
        uint64_t v91 = v131;
        MEMORY[0x24C521170]();
        break;
      case 3:
        if ((v88 & 1) == 0
          || (getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(v89, v81) & 1) != 0)
        {
          goto LABEL_43;
        }
        uint64_t v91 = v131;
        MEMORY[0x24C521180]();
        break;
      default:
LABEL_43:
        uint64_t v91 = v131;
        MEMORY[0x24C521190]();
        break;
    }
    uint64_t v108 = v134;
    uint64_t v109 = v133;
    uint64_t v110 = v132;
    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v132, v91, v134);
    Date.FormatStyle.weekday(_:)();
    v84(v81, v83);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v108);
    v155(v81, v80, v83);
    return swift_release();
  }
  else
  {
    static Date.ComponentsFormatStyle.Style.spellOut.getter();
    char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    v50(v45, v42);
    if ((v95 & 1) == 0)
    {
      static Date.ComponentsFormatStyle.Field.minute.getter();
      char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v45, v42);
      if (v103)
      {
        uint64_t v104 = ((uint64_t (*)(char *, uint64_t))v50)(v49, v42);
        uint64_t v105 = v121;
        MEMORY[0x24C5210D0](v104);
        uint64_t v73 = v149;
        uint64_t v74 = v156;
        Date.FormatStyle.minute(_:)();
        uint64_t v76 = v157;
        uint64_t v75 = v158;
        (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v74, v158);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v105, v123);
      }
      else
      {
        static Date.ComponentsFormatStyle.Field.second.getter();
        char v106 = dispatch thunk of static Equatable.== infix(_:_:)();
        v50(v45, v42);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v49, v42);
        if ((v106 & 1) == 0) {
          return result;
        }
        uint64_t v107 = v118;
        MEMORY[0x24C521100](result);
        uint64_t v73 = v149;
        uint64_t v74 = v156;
        Date.FormatStyle.second(_:)();
        uint64_t v76 = v157;
        uint64_t v75 = v158;
        (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v74, v158);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v107, v120);
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v76 + 32))(v74, v73, v75);
    }
    v50(v49, v42);
    uint64_t v96 = v157;
    uint64_t v97 = v130;
    uint64_t v98 = v158;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v130, v156, v158);
    uint64_t v99 = *(void *)(v154 + *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 32));
    if (v99 >= 2)
    {
      uint64_t v100 = v125;
      MEMORY[0x24C520FC0]();
    }
    else
    {
      uint64_t v100 = v125;
      if (v99 == 1) {
        static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
      }
      else {
        static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter();
      }
    }
    uint64_t v111 = v128;
    uint64_t v112 = v129;
    uint64_t v113 = v127;
    uint64_t v114 = v126;
    uint64_t v115 = v124;
    static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v100, v111);
    Date.FormatStyle.hour(_:)();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v113);
    return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v97, v98);
  }
}

uint64_t getter of showsMonth #1 in SystemFormatStyle.DateReference.add(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.FormatStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v27 - v13;
  double v17 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v27 - v16;
  int v21 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v20 = (unsigned char *)(a1 + 16);
  char v19 = v21;
  if (v21 == 2)
  {
    uint64_t v28 = v4;
    uint64_t v29 = v20;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
    v22((char *)&v27 - v16, a2, v8, v17);
    ((void (*)(char *, uint64_t, uint64_t))v22)(v11, a2, v8);
    static Date.FormatStyle.Symbol.Month.omitted.getter();
    Date.FormatStyle.month(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v28);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v11, v8);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
    LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)();
    v23(v14, v8);
    v23(v18, v8);
    char v24 = v22 ^ 1;
    uint64_t v25 = v29;
    swift_beginAccess();
    *uint64_t v25 = v24 & 1;
  }
  else
  {
    char v24 = v19 & 1;
  }
  return v24 & 1;
}

BOOL closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter()
{
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v3);
  double v0 = v3;
  type metadata accessor for SystemFormatStyle.DateReference();
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v2);
  return v2 < v0;
}

uint64_t SystemFormatStyle.DateReference.updateFrequency(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v38 = (char *)v31 - v12;
  uint64_t v45 = *a1;
  outlined init with copy of SystemFormatStyle.DateReference(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  uint64_t v13 = *(int *)(type metadata accessor for SystemFormatStyle.DateReference() + 20);
  uint64_t v14 = *(void *)(a2 + v13);
  uint64_t v48 = MEMORY[0x263F8EE78];
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v39 = v14;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v44 = v15;
  uint64_t v32 = v13;
  uint64_t v33 = a2;
  if (v15)
  {
    unint64_t v17 = 0;
    uint64_t v40 = v9;
    uint64_t v41 = v9 + 48;
    uint64_t v18 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t, double))(v9 + 8);
    uint64_t v35 = v8;
    uint64_t v42 = v9 + 56;
    uint64_t v43 = v9 + 16;
    v31[1] = (v9 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v37 = v7;
    uint64_t v20 = v38;
    uint64_t v19 = v39;
    while (v17 < *(void *)(v19 + 16))
    {
      unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      uint64_t v22 = *(void *)(v9 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v19 + v21 + v22 * v17, v8);
      uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v23(v7, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
        goto LABEL_15;
      }
      char v24 = *v18;
      (*v18)(v20, v7, v8);
      Date.ComponentsFormatStyle.Field.magnitude.getter(&v47);
      if (v47 < 1.0 / dbl_2461BCA68[v45])
      {
        uint64_t result = (*v34)(v20, v8, v47);
      }
      else
      {
        ((void (*)(char *, char *, uint64_t, double))v24)(v46, v20, v8, v47);
        uint64_t v25 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
          uint64_t v25 = v48;
        }
        unint64_t v27 = *(void *)(v25 + 16);
        unint64_t v26 = *(void *)(v25 + 24);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v48;
        }
        *(void *)(v25 + 16) = v27 + 1;
        uint64_t v8 = v35;
        uint64_t v18 = v36;
        uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(v25 + v21 + v27 * v22, v46, v35);
        uint64_t v48 = v25;
        uint64_t v7 = v37;
        uint64_t v20 = v38;
        uint64_t v19 = v39;
      }
      ++v17;
      uint64_t v9 = v40;
      if (v44 == v17) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_14:
    v23(v7, 1, 1, v8);
LABEL_15:
    swift_bridgeObjectRelease();
    outlined destroy of ClosedRange<Date>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
    uint64_t v28 = v48;
    uint64_t v30 = v32;
    uint64_t v29 = v33;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v29 + v30) = v28;
  }
  return result;
}

uint64_t SystemFormatStyle.DateReference.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v3 + *(int *)(v6 + 48);
  MEMORY[0x24C520B20](v11);
  LOBYTE(v14) = MEMORY[0x24C520B10](v14, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0) {
    return outlined init with copy of SystemFormatStyle.DateReference(v3, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  }
  outlined init with copy of SystemFormatStyle.DateReference(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(&v8[*(int *)(v6 + 48)], a1, v9);
  return outlined init with take of ClosedRange<Date>((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v8 = a2 - 8;
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v5 + *(int *)(v8 + 56);
  MEMORY[0x24C520B20](v13);
  LOBYTE(v16) = MEMORY[0x24C520B10](v16, v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0) {
    return outlined init with copy of SystemFormatStyle.DateReference(v5, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  }
  outlined init with copy of SystemFormatStyle.DateReference(v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(&v10[*(int *)(a2 + 48)], a1, v11);
  return outlined init with take of ClosedRange<Date>((uint64_t)v10, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t static SystemFormatStyle.DateReference.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v86 = a4;
  uint64_t v85 = a3;
  uint64_t v87 = a1;
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for TimeZone();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v79 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v80 = (char *)&v73 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v90 = (char *)&v73 - v13;
  uint64_t v78 = type metadata accessor for Calendar();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  uint64_t v76 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (char *)&v73 - v16;
  MEMORY[0x270FA5388](v17);
  char v88 = (char *)&v73 - v18;
  uint64_t v19 = type metadata accessor for Locale();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v73 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v73 - v27;
  uint64_t v29 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v32 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  if ((int)a2 > 1)
  {
    uint64_t v96 = v85;
    uint64_t v97 = v29;
    uint64_t v98 = v86;
    uint64_t v99 = v32;
    uint64_t v100 = &protocol witness table for AttributedString;
    uint64_t v66 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v66;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(boxed_opaque_existential_1, v87, v66);
  }
  else
  {
    uint64_t v74 = v8;
    uint64_t v75 = a5;
    uint64_t v96 = v85;
    uint64_t v97 = v29;
    uint64_t v98 = v86;
    uint64_t v99 = v32;
    uint64_t v100 = &protocol witness table for AttributedString;
    uint64_t v33 = type metadata accessor for TimeDataFormatting.Resolvable();
    outlined init with copy of SystemFormatStyle.DateReference(v87 + *(int *)(v33 + 60), (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
    long long v95 = 0uLL;
    uint64_t v34 = v31;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v35 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v36 = static CoreGlue2.shared;
    v35(&v95);

    uint64_t v37 = v29[9];
    uint64_t v87 = (uint64_t)v34;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v38(v28, &v34[v37], v19);
    v38(v25, v28, v19);
    uint64_t v39 = v95;
    v38(v22, v25, v19);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v95, (uint64_t)v22);
    swift_release();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v20 + 8);
    v40(v22, v19);
    if (*((void *)&v95 + 1))
    {
      uint64_t v41 = v95;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v39, v41);
      swift_release();
      swift_release();
    }
    swift_release();
    v40(v25, v19);
    v40(v28, v19);
    uint64_t v43 = v87;
    uint64_t v42 = v88;
    uint64_t v44 = v77;
    uint64_t v45 = *(void (**)(char *))(v77 + 16);
    uint64_t v86 = v87 + v29[10];
    uint64_t v46 = v78;
    v45(v88);
    double v47 = v89;
    ((void (*)(char *, char *, uint64_t))v45)(v89, v42, v46);
    uint64_t v48 = v95;
    uint64_t v49 = (uint64_t)v76;
    ((void (*)(char *, char *, uint64_t))v45)(v76, v47, v46);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v95, v49);
    swift_release();
    char v50 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v50(v49, v46);
    if (*((void *)&v95 + 1))
    {
      uint64_t v51 = v95;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v48, v51);
      swift_release();
      swift_release();
    }
    swift_release();
    v50((uint64_t)v89, v46);
    v50((uint64_t)v88, v46);
    uint64_t v52 = v43 + v29[11];
    uint64_t v53 = v81;
    uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
    uint64_t v55 = v90;
    uint64_t v56 = v82;
    v54(v90, v52, v82);
    uint64_t v57 = v80;
    v54(v80, (uint64_t)v55, v56);
    uint64_t v58 = v95;
    uint64_t v59 = (uint64_t)v79;
    v54(v79, (uint64_t)v57, v56);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v95, v59);
    swift_release();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v60(v59, v56);
    uint64_t v61 = (uint64_t)v74;
    if (*((void *)&v95 + 1))
    {
      uint64_t v62 = v95;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v58, v62);
      swift_release();
      swift_release();
    }
    swift_release();
    v60((uint64_t)v57, v56);
    v60((uint64_t)v90, v56);
    char v63 = Calendar.isDateInToday(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16))(v61, v43, v84);
    if (v63)
    {
      char v64 = v75;
      if (one-time initialization token for time != -1) {
        swift_once();
      }
      uint64_t v65 = &static Text.DateStyle.time;
    }
    else
    {
      char v64 = v75;
      if (one-time initialization token for date != -1) {
        swift_once();
      }
      uint64_t v65 = &static Text.DateStyle.date;
    }
    char v69 = *v65;
    uint64_t v70 = *((void *)v65 + 1);
    char v71 = v65[16];
    v92[0] = v69;
    uint64_t v93 = v70;
    char v94 = v71;
    long long v91 = v95;
    v64[3] = type metadata accessor for ResolvableAbsoluteDate();
    v64[4] = (uint64_t)&protocol witness table for ResolvableAbsoluteDate;
    uint64_t v72 = __swift_allocate_boxed_opaque_existential_1(v64);
    ResolvableAbsoluteDate.init(_:style:in:)(v61, v92, (uint64_t *)&v91, (uint64_t)v72);
    return outlined destroy of ClosedRange<Date>?(v43, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateReference);
  }
}

uint64_t partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(uint64_t a1)
{
  return closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

void type metadata accessor for ClosedRange<Date>?(uint64_t a1)
{
}

void type metadata accessor for ClosedRange<Date>()
{
  if (!lazy cache variable for type metadata for ClosedRange<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>);
    }
  }
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, void (*a2)(uint64_t *, unsigned char *, unsigned char *), void (*a3)(uint64_t, uint64_t))
{
  type metadata accessor for Date?(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *v3;
  outlined init with copy of SystemFormatStyle.DateReference(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Date?);
  swift_retain_n();
  a2(v3, v9, v13);
  swift_release();
  outlined destroy of ClosedRange<Date>?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Date?);
  if (v3[1])
  {
    uint64_t v11 = *v3;
    swift_retain();
    swift_retain();
    a3(v10, v11);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v6 = *v5;
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)*(v5 - 1) + 112);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = v6;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

{
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  void (*v7)(uint64_t);
  Swift::UInt64 v8;

  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v6 = *v5;
      uint64_t v7 = *(void (**)(uint64_t))(*(void *)*(v5 - 1) + 136);
      swift_retain();
      v7(a1);
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = v6;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
      Hasher._combine(_:)(v8);
      swift_release();
      v5 += 2;
      --v4;
    }
    while (v4);
  }
}

void specialized Array<A>.hash(into:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = 0;
    do
    {
      MEMORY[0x24C523D60](v4++, a2);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      _CFObject.hash(into:)();
      swift_unknownObjectRelease();
    }
    while (v3 != v4);
  }
  else
  {
    uint64_t v5 = (void **)(a2 + 32);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    do
    {
      Swift::UInt64 v6 = *v5++;
      id v7 = v6;
      _CFObject.hash(into:)();

      --v3;
    }
    while (v3);
  }
}

uint64_t specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v27 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    unint64_t v15 = v12 + 40;
    uint64_t v16 = v12;
    uint64_t v17 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v24 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v25 = v13;
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v26 = v16;
    uint64_t v19 = *(void *)(v16 + 56);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v19;
    while (1)
    {
      v25(v10, v14, v4);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v10, 0, 1, v4);
      uint64_t result = (*v17)(v10, 1, v4);
      if (result == 1) {
        break;
      }
      (*v24)(v7, v10, v4);
      lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      dispatch thunk of Hashable.hash(into:)();
      (*v18)(v7, v4);
      v14 += v23;
      if (!--v11) {
        return v20(v10, 1, 1, v4);
      }
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v20(v10, 1, 1, v4);
  }
  return result;
}

uint64_t specialized static SystemFormatStyle.DateReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static Date.== infix(_:_:)())
  {
    uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.DateReference();
    if ((specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + v4[5]), *(void *)(a2 + v4[5])) & 1) != 0
      && *(void *)(a1 + v4[6]) == *(void *)(a2 + v4[6])
      && (MEMORY[0x24C521500](a1 + v4[7], a2 + v4[7]) & 1) != 0
      && *(void *)(a1 + v4[8]) == *(void *)(a2 + v4[8])
      && (MEMORY[0x24C5218A0](a1 + v4[9], a2 + v4[9]) & 1) != 0
      && (MEMORY[0x24C521A00](a1 + v4[10], a2 + v4[10]) & 1) != 0
      && (MEMORY[0x24C521B70](a1 + v4[11], a2 + v4[11]) & 1) != 0)
    {
      JUMPOUT(0x24C520B10);
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant;
  if (!lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSizeVariant and conformance TextSizeVariant);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.DateReference.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SystemFormatStyle.DateReference.CodingKeys and conformance SystemFormatStyle.DateReference.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA584A8, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field] and conformance <A> [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>?(255, &lazy cache variable for type metadata for [Date.ComponentsFormatStyle.Field], MEMORY[0x263F073D0], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type Date and conformance Date(a2, MEMORY[0x263F073D0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DateInterval?(uint64_t a1)
{
}

void type metadata accessor for Date.ComponentsFormatStyle.Field?(uint64_t a1)
{
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:)()
{
  return partial apply for closure #1 in SystemFormatStyle.DateReference.discreteInput(before:)();
}

{
  double v0;
  double v2;
  double v3;

  Date.ComponentsFormatStyle.Field.magnitude.getter(&v3);
  unint64_t v0 = v3;
  Date.ComponentsFormatStyle.Field.magnitude.getter(&v2);
  return v2 < v0;
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.DateReference()
{
  return lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
}

uint64_t instantiation function for generic protocol witness table for SystemFormatStyle.DateReference(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Date.FormatStyle and conformance Date.FormatStyle(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_0(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(&lazy protocol witness table cache variable for type SystemFormatStyle.DateReference and conformance SystemFormatStyle.DateReference, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateReference);
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for FormatStyle.FormatOutput : AttributedStringConvertible in SystemFormatStyle.DateReference()
{
  return &protocol witness table for AttributedString;
}

uint64_t *initializeBufferWithCopyOfBuffer for SystemFormatStyle.DateReference(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)a1 + v9;
    Swift::UInt v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date.ComponentsFormatStyle.Field();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    unint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[10];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    uint64_t v22 = a3[11];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    uint64_t v26 = a3[12];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    uint64_t v29 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return a1;
}

uint64_t destroy for SystemFormatStyle.DateReference(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[10];
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[11];
  uint64_t v12 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = a1 + a2[12];
  uint64_t v14 = type metadata accessor for FormatStyleCapitalizationContext();
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);

  return v15(v13, v14);
}

uint64_t initializeWithCopy for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = a3[11];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
  uint64_t v25 = a3[12];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
  return a1;
}

uint64_t assignWithCopy for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v11 = a3[9];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  return a1;
}

uint64_t initializeWithTake for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  uint64_t v20 = a3[11];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  uint64_t v24 = a3[12];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

uint64_t assignWithTake for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A50FD4);
}

uint64_t sub_245A50FD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_16:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  uint64_t v13 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v8 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a3[7];
LABEL_15:
    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    goto LABEL_16;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a2)
  {
    uint64_t v8 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a3[9];
    goto LABEL_15;
  }
  uint64_t v17 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a3[10];
    goto LABEL_15;
  }
  uint64_t v18 = type metadata accessor for TimeZone();
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a2)
  {
    uint64_t v8 = v18;
    uint64_t v14 = *(void *)(v18 - 8);
    uint64_t v15 = a3[11];
    goto LABEL_15;
  }
  uint64_t v19 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  uint64_t v21 = v19;
  uint64_t v22 = a1 + a3[12];

  return v20(v22, a2, v21);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A5124C);
}

uint64_t sub_245A5124C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_14:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[7];
LABEL_13:
    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_14;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[9];
    goto LABEL_13;
  }
  uint64_t v17 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a3)
  {
    uint64_t v10 = v17;
    uint64_t v14 = *(void *)(v17 - 8);
    uint64_t v15 = a4[10];
    goto LABEL_13;
  }
  uint64_t v18 = type metadata accessor for TimeZone();
  if (*(_DWORD *)(*(void *)(v18 - 8) + 84) == a3)
  {
    uint64_t v10 = v18;
    uint64_t v14 = *(void *)(v18 - 8);
    uint64_t v15 = a4[11];
    goto LABEL_13;
  }
  uint64_t v19 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
  uint64_t v21 = v19;
  uint64_t v22 = a1 + a4[12];

  return v20(v22, a2, a2, v21);
}

uint64_t type metadata completion function for SystemFormatStyle.DateReference()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date.ComponentsFormatStyle.Field();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Calendar();
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for TimeZone();
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for FormatStyleCapitalizationContext();
            if (v6 <= 0x3F)
            {
              swift_initStructMetadata();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.DateReference.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemFormatStyle.DateReference.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A517E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemFormatStyle.DateReference.CodingKeys()
{
  return &unk_26FA584A8;
}

uint64_t specialized SystemFormatStyle.DateReference.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x466465776F6C6C61 && a2 == 0xED000073646C6569 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C65694678616DLL && a2 == 0xED0000746E756F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xEE00646C65694664 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69726156657A6973 && a2 == 0xEB00000000746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024621A8D0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t outlined assign with take of Date??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date??(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in Sequence<>.contains(_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL partial apply for closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter()
{
  return closure #1 in SystemFormatStyle.DateReference.containerForThreshold.getter();
}

uint64_t sub_245A51E4C()
{
  return swift_deallocObject();
}

void type metadata accessor for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?)()
{
  if (!lazy cache variable for type metadata for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?))
  {
    type metadata accessor for Date.ComponentsFormatStyle.Field?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Date.ComponentsFormatStyle.Field?, Date.ComponentsFormatStyle.Field?));
    }
  }
}

uint64_t sub_245A51EC8()
{
  return MEMORY[0x263F06520];
}

uint64_t sub_245A51ED8()
{
  return 8;
}

uint64_t sub_245A51EE4()
{
  return swift_release();
}

uint64_t sub_245A51EEC(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_245A51F00(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t partial apply for closure #1 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static Date.< infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #2 in SystemFormatStyle.DateReference.relativeText(for:)@<X0>(BOOL *a1@<X8>)
{
  return closure #2 in SystemFormatStyle.DateReference.relativeText(for:)(a1);
}

void type metadata accessor for (lower: Date, upper: Date)()
{
  if (!lazy cache variable for type metadata for (lower: Date, upper: Date))
  {
    type metadata accessor for Date();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date));
    }
  }
}

uint64_t closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in SystemFormatStyle.DateReference.init(to:allowedFields:maxFieldCount:thresholdField:)(a1) & 1;
}

id static CAHostingLayerPlatformDefinition.makeView(kind:)(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  if (v1 != 12) {
    goto LABEL_6;
  }
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F157E8]), sel_init);
  objc_msgSend(v2, sel_setMask_, v3);

  id result = objc_msgSend(v2, sel_mask);
  if (result)
  {
    uint64_t v5 = result;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    objc_msgSend(v5, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
    objc_msgSend(v5, sel_setAnchorPoint_, 0.0, 0.0);
    objc_msgSend(v5, sel_setAllowsGroupOpacity_, 0);
    objc_msgSend(v5, sel_setAllowsGroupBlending_, 0);

LABEL_6:
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    objc_msgSend(v2, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
    objc_msgSend(v2, sel_setAnchorPoint_, 0.0, 0.0);
    if (v1 > 0xC) {
      return v2;
    }
    uint64_t v6 = 1;
    if (((1 << v1) & 0x1E01) != 0)
    {
      objc_msgSend(v2, sel_setAllowsGroupOpacity_, 0);
      uint64_t v6 = 0;
      BOOL v7 = &selRef_setAllowsGroupBlending_;
    }
    else
    {
      if (((1 << v1) & 0xE) == 0) {
        return v2;
      }
      BOOL v7 = &selRef_setAllowsEdgeAntialiasing_;
    }
    objc_msgSend(v2, *v7, v6);
    return v2;
  }
  __break(1u);
  return result;
}

id static CAHostingLayerPlatformDefinition.makeLayerView(type:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  objc_msgSend(v3, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  objc_msgSend(v3, sel_setAnchorPoint_, 0.0, 0.0);
  if (v2 <= 0xC)
  {
    uint64_t v4 = 1;
    if (((1 << v2) & 0x1E01) != 0)
    {
      objc_msgSend(v3, sel_setAllowsGroupOpacity_, 0);
      uint64_t v4 = 0;
      uint64_t v5 = &selRef_setAllowsGroupBlending_;
LABEL_8:
      objc_msgSend(v3, *v5, v4);
      return v3;
    }
    if (((1 << v2) & 0xE) != 0)
    {
      uint64_t v5 = &selRef_setAllowsEdgeAntialiasing_;
      goto LABEL_8;
    }
  }
  return v3;
}

id static CAHostingLayerPlatformDefinition.makePlatformView(view:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  self;
  id v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  objc_msgSend(v3, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  id result = objc_msgSend(v3, sel_setAnchorPoint_, 0.0, 0.0);
  if (v2 <= 0xC)
  {
    uint64_t v5 = 1;
    if (((1 << v2) & 0x1E01) != 0)
    {
      objc_msgSend(v3, sel_setAllowsGroupOpacity_, 0);
      uint64_t v5 = 0;
      uint64_t v6 = &selRef_setAllowsGroupBlending_;
    }
    else
    {
      if (((1 << v2) & 0xE) == 0) {
        return result;
      }
      uint64_t v6 = &selRef_setAllowsEdgeAntialiasing_;
    }
    BOOL v7 = *v6;
    return objc_msgSend(v3, v7, v5);
  }
  return result;
}

char *static CAHostingLayerPlatformDefinition.makeDrawingView(options:)(uint64_t a1)
{
  char v1 = *(unsigned char *)a1;
  int v2 = *(_DWORD *)(a1 + 4);
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  if ((v4 & 1) != 0 && objc_msgSend(self, sel_isSupported))
  {
    uint64_t v6 = (objc_class *)type metadata accessor for RBDrawingLayer();
    BOOL v7 = (char *)objc_allocWithZone(v6);
    uint64_t v8 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
    type metadata accessor for AtomicBuffer<RBDrawingLayer.State>();
    uint64_t v9 = swift_allocObject();
    *(_DWORD *)(v9 + 16) = 0;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(void *)(v9 + 56) = 0;
    *(unsigned char *)(v9 + 64) = 5;
    *(unsigned char *)(v9 + 72) = 3;
    *(void *)(v9 + 80) = 0;
    *(void *)&v7[v8] = v9;
    uint64_t v10 = &v7[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options];
    *uint64_t v10 = v1;
    *((_DWORD *)v10 + 1) = v2;
    v10[8] = v3;
    *((_DWORD *)v10 + 3) = v4;
    v10[16] = v5;
    v16.receiver = v7;
    v16.super_class = v6;
    unint64_t v11 = (char *)objc_msgSendSuper2(&v16, sel_init);
    RBDrawingLayer.updateOptions()();
  }
  else
  {
    v17[0] = v1;
    int v18 = v2;
    char v19 = v3;
    int v20 = v4;
    char v21 = v5;
    id v12 = objc_allocWithZone((Class)type metadata accessor for CGDrawingLayer());
    unint64_t v11 = CGDrawingLayer.init(options:)(v17);
  }
  objc_msgSend(v11, sel_setContentsGravity_, *MEMORY[0x263F15E38]);
  uint64_t v13 = one-time initialization token for shared;
  uint64_t v14 = v11;
  if (v13 != -1) {
    swift_once();
  }
  objc_msgSend(v14, sel_setDelegate_, static CAPlatformLayerDelegate.shared);
  objc_msgSend(v14, sel_setAnchorPoint_, 0.0, 0.0);

  return v14;
}

id static CAHostingLayerPlatformDefinition.setProjectionTransform(_:projectionView:)(long long *a1)
{
  self;
  int v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  long long v5 = a1[1];
  long long v9 = *a1;
  uint64_t v6 = *((void *)a1 + 8);
  uint64_t v10 = 0;
  long long v11 = v5;
  uint64_t v12 = v3;
  uint64_t v13 = 0;
  uint64_t v14 = v4;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  long long v7 = a1[3];
  long long v17 = xmmword_2461BCA80;
  long long v18 = v7;
  uint64_t v19 = 0;
  uint64_t v20 = v6;
  return objc_msgSend(v2, sel_setTransform_, &v9);
}

uint64_t static CAHostingLayerPlatformDefinition.getRBLayer(drawingView:)()
{
  swift_unknownObjectRetain();
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

id static CAHostingLayerPlatformDefinition.setIgnoresEvents(_:of:)(char a1, id a2)
{
  return objc_msgSend(a2, sel_setAllowsHitTesting_, (a1 & 1) == 0);
}

uint64_t CAHostingLayerPlatformDefinition.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CAHostingLayerPlatformDefinition()
{
  return self;
}

id one-time initialization function for shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CAPlatformLayerDelegate()), sel_init);
  static CAPlatformLayerDelegate.shared = (uint64_t)result;
  return result;
}

id CAPlatformLayerDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAPlatformLayerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CAPlatformLayerDelegate()
{
  return self;
}

void CGDrawingLayer.options.didset(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  unsigned __int8 v7 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  int v8 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 4];
  char v9 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 8];
  unsigned int v10 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12];
  char v11 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 16];
  v21[0] = *(unsigned char *)a1;
  int v22 = v2;
  char v23 = v3;
  int v24 = v4;
  char v25 = v5;
  v16[0] = v7;
  int v17 = v8;
  char v18 = v9;
  unsigned int v19 = v10;
  char v20 = v11;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v21, v16))
  {
    objc_msgSend(v1, sel_setOpaque_, (v10 >> 1) & 1);
    int v12 = *((_DWORD *)v6 + 3);
    uint64_t v13 = (id *)MEMORY[0x263F159B8];
    if ((v12 & 0x100) != 0) {
      uint64_t v13 = (id *)MEMORY[0x263F159C8];
    }
    if ((v12 & 0x40) != 0) {
      uint64_t v14 = (id *)MEMORY[0x263F159B0];
    }
    else {
      uint64_t v14 = v13;
    }
    id v15 = *v14;
    objc_msgSend(v1, sel_setContentsFormat_, v15);
  }
}

void (*CGDrawingLayer.options.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options;
  *char v3 = v1;
  v3[1] = v4;
  char v5 = (char *)(v1 + v4);
  char v6 = *v5;
  int v7 = *((_DWORD *)v5 + 1);
  char v8 = v5[8];
  int v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((unsigned char *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((unsigned char *)v3 + 32) = (_BYTE)v5;
  *((unsigned char *)v3 + 16) = v6;
  return CGDrawingLayer.options.modify;
}

void CGDrawingLayer.options.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  char v2 = *(unsigned char *)(*(void *)a1 + 16);
  char v3 = (char *)(**(void **)a1 + *(void *)(*(void *)a1 + 8));
  int v4 = *(_DWORD *)(*(void *)a1 + 20);
  char v5 = *(unsigned char *)(*(void *)a1 + 24);
  int v6 = *(_DWORD *)(*(void *)a1 + 28);
  char v7 = *(unsigned char *)(*(void *)a1 + 32);
  char v8 = *v3;
  int v9 = *((_DWORD *)v3 + 1);
  char v10 = v3[8];
  int v11 = *((_DWORD *)v3 + 3);
  char v12 = v3[16];
  *char v3 = v2;
  *((_DWORD *)v3 + 1) = v4;
  v3[8] = v5;
  *((_DWORD *)v3 + 3) = v6;
  v3[16] = v7;
  v13[0] = v8;
  int v14 = v9;
  char v15 = v10;
  int v16 = v11;
  char v17 = v12;
  CGDrawingLayer.options.didset((uint64_t)v13);

  free(v1);
}

char *CGDrawingLayer.init(options:)(char *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  char v4 = *a1;
  int v5 = *((_DWORD *)a1 + 1);
  char v6 = a1[8];
  int v7 = *((_DWORD *)a1 + 3);
  char v8 = a1[16];
  int v9 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
  *(_OWORD *)int v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((void *)v9 + 4) = 0;
  v9[40] = 5;
  char v10 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_state];
  *char v10 = 3;
  *((void *)v10 + 1) = 0;
  int v11 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  *int v11 = v4;
  *((_DWORD *)v11 + 1) = v5;
  v11[8] = v6;
  *((_DWORD *)v11 + 3) = v7;
  v11[16] = v8;
  v21.receiver = v1;
  v21.super_class = ObjectType;
  char v12 = (char *)objc_msgSendSuper2(&v21, sel_init);
  uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options];
  uint64_t v14 = (*(_DWORD *)&v12[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12] >> 1) & 1;
  char v15 = v12;
  objc_msgSend(v15, sel_setOpaque_, v14);
  int v16 = *((_DWORD *)v13 + 3);
  char v17 = (id *)MEMORY[0x263F159B8];
  if ((v16 & 0x100) != 0) {
    char v17 = (id *)MEMORY[0x263F159C8];
  }
  if ((v16 & 0x40) != 0) {
    char v18 = (id *)MEMORY[0x263F159B0];
  }
  else {
    char v18 = v17;
  }
  id v19 = *v18;
  objc_msgSend(v15, sel_setContentsFormat_, v19);

  return v15;
}

uint64_t CGDrawingLayer.drawForTesting(in:)(void *a1)
{
  LOBYTE(v13[0]) = 3;
  v13[1] = 0;
  char v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
  char v4 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 8];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 16];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 24];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 32];
  char v8 = v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 40];
  LOBYTE(v12) = v8;
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  objc_msgSend(v1, sel_bounds, v3, v4, v5, v6, v7, v12, v13[0], 0);
  PlatformDrawableContent.draw(in:size:state:)(a1, (uint64_t)v13, v9, v10);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);

  return swift_release();
}

uint64_t type metadata accessor for CGDrawingLayer()
{
  return self;
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(uint64_t a1@<X8>)
{
}

void protocol witness for PlatformDrawable.options.setter in conformance CGDrawingLayer(char *a1)
{
  char v2 = *a1;
  int v3 = *((_DWORD *)a1 + 1);
  char v4 = a1[8];
  int v5 = *((_DWORD *)a1 + 3);
  char v6 = a1[16];
  uint64_t v7 = v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options;
  char v8 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options);
  int v9 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 4);
  char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 8);
  int v11 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 12);
  char v12 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_options + 16);
  *(unsigned char *)uint64_t v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(unsigned char *)(v7 + 8) = v4;
  *(_DWORD *)(v7 + 12) = v5;
  *(unsigned char *)(v7 + 16) = v6;
  v13[0] = v8;
  int v14 = v9;
  char v15 = v10;
  int v16 = v11;
  char v17 = v12;
  CGDrawingLayer.options.didset((uint64_t)v13);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance CGDrawingLayer(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CGDrawingLayer.options.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for PlatformDrawable.update(content:required:) in conformance CGDrawingLayer(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 255)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void **)a1;
    char v8 = &v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
    int v9 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content];
    char v10 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 8];
    uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 16];
    uint64_t v12 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 24];
    uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114CGDrawingLayer_content + 32];
    *(void *)char v8 = v7;
    *((void *)v8 + 1) = v5;
    *((void *)v8 + 2) = v6;
    *((void *)v8 + 3) = v3;
    *((void *)v8 + 4) = v4;
    char v14 = v8[40];
    v8[40] = v2;
    outlined copy of PlatformDrawableContent.Storage(v7, v5, v6, v3, v4, v2);
    outlined consume of PlatformDrawableContent.Storage(v9, v10, v11, v12, v13, v14);
  }
  objc_msgSend(v1, sel_setNeedsDisplay);
  return 1;
}

id protocol witness for PlatformDrawable.setContentsScale(_:) in conformance CGDrawingLayer()
{
  return objc_msgSend(v0, sel_setContentsScale_);
}

void RBDrawingLayer.updateOptions()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options];
  objc_msgSend(v0, sel_setOpaque_, (*(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] >> 1) & 1);
  unsigned int v2 = *((_DWORD *)v1 + 3);
  uint64_t v3 = v1[16];
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  uint64_t v5 = RasterizationOptions.resolvedColorMode.getter();
  id v6 = v4;
  objc_msgSend(v6, sel_setColorMode_, v5);
  objc_msgSend(v6, sel_setRendersAsynchronously_, (v2 >> 2) & 1);
  objc_msgSend(v6, sel_setMaxDrawableCount_, v3);
  objc_msgSend(v6, sel_setAllowsDisplayCompositing_, (v2 >> 3) & 1);
  objc_msgSend(v6, sel_setAllowsPackedDrawable_, (v2 >> 5) & 1);
}

void (*RBDrawingLayer.options.modify(void *a1))(uint64_t *a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options;
  *uint64_t v3 = v1;
  v3[1] = v4;
  uint64_t v5 = (char *)(v1 + v4);
  char v6 = *v5;
  int v7 = *((_DWORD *)v5 + 1);
  char v8 = v5[8];
  int v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((unsigned char *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((unsigned char *)v3 + 32) = (_BYTE)v5;
  *((unsigned char *)v3 + 16) = v6;
  return RBDrawingLayer.options.modify;
}

void RBDrawingLayer.options.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v2 = *(unsigned char *)(*a1 + 16);
  uint64_t v3 = *(void *)*a1 + *(void *)(*a1 + 8);
  int v4 = *(_DWORD *)(v1 + 20);
  char v5 = *(unsigned char *)(v1 + 24);
  int v6 = *(_DWORD *)(v1 + 28);
  char v7 = *(unsigned char *)(v1 + 32);
  unsigned __int8 v8 = *(unsigned char *)v3;
  int v9 = *(_DWORD *)(v3 + 4);
  char v10 = *(unsigned char *)(v3 + 8);
  int v11 = *(_DWORD *)(v3 + 12);
  char v12 = *(unsigned char *)(v3 + 16);
  *(unsigned char *)uint64_t v3 = v2;
  *(_DWORD *)(v3 + 4) = v4;
  *(unsigned char *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 12) = v6;
  *(unsigned char *)(v3 + 16) = v7;
  v13[0] = v8;
  int v14 = v9;
  char v15 = v10;
  int v16 = v11;
  char v17 = v12;
  v18[0] = v2;
  int v19 = v4;
  char v20 = v5;
  int v21 = v6;
  char v22 = v7;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v13, v18)) {
    RBDrawingLayer.updateOptions()();
  }

  free((void *)v1);
}

uint64_t RBDrawingLayer.update(content:required:)(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  int v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 40);
  if ((a2 & 1) != 0
    || (v2[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] & 4) == 0
    || (uint64_t result = (uint64_t)objc_msgSend(v2, sel_isDrawableAvailable), result))
  {
    if (v8 != 255)
    {
      uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
      outlined copy of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
      outlined copy of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v10 + 16));
      int v11 = *(void **)(v10 + 24);
      char v12 = *(void **)(v10 + 32);
      uint64_t v13 = *(void *)(v10 + 40);
      uint64_t v14 = *(void *)(v10 + 48);
      uint64_t v15 = *(void *)(v10 + 56);
      *(void *)(v10 + 24) = v3;
      *(void *)(v10 + 32) = v4;
      *(void *)(v10 + 40) = v5;
      *(void *)(v10 + 48) = v6;
      *(void *)(v10 + 56) = v7;
      char v16 = *(unsigned char *)(v10 + 64);
      *(unsigned char *)(v10 + 64) = v8;
      outlined consume of PlatformDrawableContent.Storage(v11, v12, v13, v14, v15, v16);
      os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 16));
      swift_release();
      outlined consume of PlatformDrawableContent?(v3, v4, v5, v6, v7, v8);
    }
    objc_msgSend(v2, sel_setNeedsDisplay);
    return 1;
  }
  return result;
}

uint64_t closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  char v12 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  outlined retain of PlatformDrawableContent(a2);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  outlined assign with take of PlatformDrawableContent(a2, (uint64_t)&v12[6]);
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(double *)(v13 + 24) = a3;
  *(double *)(v13 + 32) = a4;
  *(double *)(v13 + 40) = a5;
  *(double *)(v13 + 48) = a6;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:);
  *(void *)(v14 + 24) = v13;
  unsigned __int8 v18[4] = partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v18[5] = v14;
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 1107296256;
  v18[2] = thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ();
  v18[3] = &block_descriptor;
  uint64_t v15 = _Block_copy(v18);
  char v16 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_displayWithBounds_callback_, v15, a3, a4, a5, a6);
  _Block_release(v15);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v16) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed RBDisplayList) -> ()(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t RBDrawingLayer.drawForTesting(in:)(void *a1)
{
  v13[0] = 3;
  uint64_t v14 = 0;
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  id v3 = *(void **)(v2 + 24);
  int v4 = *(void **)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 56);
  char v8 = *(unsigned char *)(v2 + 64);
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
  swift_release();
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_release();
  objc_msgSend(v1, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)(a1, (uint64_t)v13, v9, v10);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);

  return swift_release();
}

void @objc CGDrawingLayer.init(layer:)()
{
}

id CGDrawingLayer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RBDrawingLayer()
{
  return self;
}

uint64_t destroy for RBDrawingLayer.State(uint64_t a1)
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t initializeWithCopy for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  double v10 = *(void **)a1;
  int v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  char v15 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v9;
  outlined consume of PlatformDrawableContent.Storage(v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RBDrawingLayer.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v4;
  char v12 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of PlatformDrawableContent.Storage(v6, v7, v8, v9, v10, v12);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RBDrawingLayer.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingLayer.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

void *type metadata accessor for RBDrawingLayer.State()
{
  return &unk_26FA4D6A0;
}

void protocol witness for PlatformDrawable.options.getter in conformance RBDrawingLayer(uint64_t a1@<X8>)
{
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingLayer(void *a1@<X2>, uint64_t a2@<X8>)
{
  unint64_t v3 = (char *)(v2 + *a1);
  char v4 = *v3;
  int v5 = *((_DWORD *)v3 + 1);
  char v6 = v3[8];
  int v7 = *((_DWORD *)v3 + 3);
  LOBYTE(v3) = v3[16];
  *(unsigned char *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  *(unsigned char *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  *(unsigned char *)(a2 + 16) = (_BYTE)v3;
}

void protocol witness for PlatformDrawable.options.setter in conformance RBDrawingLayer(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)a1;
  int v3 = *(_DWORD *)(a1 + 4);
  char v4 = *(unsigned char *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 12);
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options;
  unsigned __int8 v8 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options);
  int v9 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 4);
  char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 8);
  int v11 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12);
  char v12 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 16);
  *(unsigned char *)uint64_t v7 = v2;
  *(_DWORD *)(v7 + 4) = v3;
  *(unsigned char *)(v7 + 8) = v4;
  *(_DWORD *)(v7 + 12) = v5;
  *(unsigned char *)(v7 + 16) = v6;
  v18[0] = v8;
  int v19 = v9;
  char v20 = v10;
  int v21 = v11;
  char v22 = v12;
  v13[0] = v2;
  int v14 = v3;
  char v15 = v4;
  int v16 = v5;
  char v17 = v6;
  if (!specialized static RasterizationOptions.== infix(_:_:)(v18, v13))
  {
    RBDrawingLayer.updateOptions()();
  }
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance RBDrawingLayer(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RBDrawingLayer.options.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void specialized RBDrawingLayer.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  type metadata accessor for AtomicBuffer<RBDrawingLayer.State>();
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(void *)(v2 + 56) = 0;
  *(unsigned char *)(v2 + 64) = 5;
  *(unsigned char *)(v2 + 72) = 3;
  *(void *)(v2 + 80) = 0;
  *(void *)&v0[v1] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t (*specialized RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(long long *a1, char a2, double a3, double a4, double a5, double a6))()
{
  long long v12 = a1[1];
  long long v17 = *a1;
  v18[0] = v12;
  *(_OWORD *)((char *)v18 + 9) = *(long long *)((char *)a1 + 25);
  if ((a2 & 1) == 0
    && (v6[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer_options + 12] & 4) != 0
    && !objc_msgSend(v6, sel_isDrawableAvailable, v17, v18[0], *(void *)&v18[1], *((void *)&v18[1] + 1)))
  {
    return 0;
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v6;
  long long v14 = a1[1];
  *(_OWORD *)(v13 + 24) = *a1;
  *(_OWORD *)(v13 + 40) = v14;
  *(_OWORD *)(v13 + 49) = *(long long *)((char *)a1 + 25);
  *(double *)(v13 + 72) = a3;
  *(double *)(v13 + 80) = a4;
  *(double *)(v13 + 88) = a5;
  *(double *)(v13 + 96) = a6;
  char v15 = v6;
  outlined retain of PlatformDrawableContent((uint64_t)&v17);
  return partial apply for closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:);
}

uint64_t sub_245A53FC8()
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)()
{
  return closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(*(char **)(v0 + 16), v0 + 24, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
}

uint64_t outlined retain of PlatformDrawableContent(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_245A540BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RBDrawingLayer.makeAsyncUpdate(content:required:layer:bounds:)(void *a1)
{
  return specialized RBDrawingLayer.draw(in:size:)(a1);
}

uint64_t sub_245A54118()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed RBDisplayList) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t specialized RBDrawingLayer.draw(in:size:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state];
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  uint64_t v19 = OBJC_IVAR____TtC7SwiftUIP33_E2A63CF3FB15FAD08FBE4CE6D0C83E5114RBDrawingLayer__state;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  char v5 = *(unsigned char *)(v3 + 72);
  uint64_t v6 = *(void *)(v3 + 80);
  *(unsigned char *)(v3 + 72) = 3;
  *(void *)(v3 + 80) = 0;
  v21[0] = v5;
  uint64_t v22 = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  uint64_t v7 = *(void *)&v2[v4];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
  unsigned __int8 v8 = *(void **)(v7 + 24);
  int v9 = *(void **)(v7 + 32);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = *(void *)(v7 + 48);
  uint64_t v12 = *(void *)(v7 + 56);
  char v13 = *(unsigned char *)(v7 + 64);
  outlined copy of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  swift_release();
  outlined copy of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  outlined consume of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  swift_release();
  objc_msgSend(v2, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)(a1, (uint64_t)v21, v14, v15);
  outlined consume of PlatformDrawableContent.Storage(v8, v9, v10, v11, v12, v13);
  uint64_t v16 = *(void *)&v2[v19];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 16));
  uint64_t v17 = v22;
  *(unsigned char *)(v16 + 72) = v21[0];
  *(void *)(v16 + 80) = v17;
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 16));
  swift_release();

  return swift_release();
}

id outlined copy of PlatformDrawableContent?(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1) {
    return outlined copy of PlatformDrawableContent.Storage(result, a2, a3, a4, a5, a6);
  }
  return result;
}

void outlined consume of PlatformDrawableContent?(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1) {
    outlined consume of PlatformDrawableContent.Storage(a1, a2, a3, a4, a5, a6);
  }
}

void type metadata accessor for AtomicBuffer<RBDrawingLayer.State>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<RBDrawingLayer.State>)
  {
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<RBDrawingLayer.State>);
    }
  }
}

uint64_t static AccessibilityCore.textResolvesToEmpty(_:in:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  uint64_t v8 = a5[1];
  uint64_t v10 = specialized Text.storedAccessibilityLabel.getter(a4);
  if (v13)
  {
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    char v16 = v12 & 1;
    uint64_t v22 = v9;
    uint64_t v23 = v8;
    LOBYTE(v21) = v12 & 1;
    char v17 = static AccessibilityCore.textResolvesToEmpty(_:in:)();
    outlined consume of Text.Storage(v14, v15, v16);
    swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    uint64_t v22 = v9;
    uint64_t v23 = v8;
    uint64_t v21 = 1;
    uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)a1 + 88);
    swift_retain();
    char v17 = v19(&v22, &v21);
    outlined consume of Text.Storage(a1, a2, 1);
  }
  else
  {
    uint64_t v18 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0) {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
    }
    char v17 = v18 == 0;
  }
  return v17 & 1;
}

uint64_t static AccessibilityCore.textsResolveToEmpty(_:in:)(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    long long v13 = *a2;
    uint64_t v3 = v2 - 1;
    uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v5 = *v4;
      char v6 = *((unsigned char *)v4 - 8);
      uint64_t v8 = *(v4 - 3);
      unint64_t v7 = *(v4 - 2);
      long long v14 = v13;
      outlined copy of Text.Storage(v8, v7, v6);
      swift_bridgeObjectRetain();
      char v9 = static AccessibilityCore.textResolvesToEmpty(_:in:)(v8, v7, v6, v5, (uint64_t *)&v14);
      outlined consume of Text.Storage(v8, v7, v6);
      swift_bridgeObjectRelease();
      BOOL v11 = v3-- != 0;
      if ((v9 & 1) == 0) {
        break;
      }
      v4 += 4;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = 1;
  }
  return v9 & 1;
}

uint64_t static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t *a8)
{
  int v81 = a3;
  int v82 = a7;
  int v79 = a6;
  uint64_t v83 = a2;
  uint64_t v80 = a1;
  BOOL v11 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  uint64_t v17 = *a8;
  uint64_t v16 = a8[1];
  uint64_t v18 = specialized Text.storedAccessibilityLabel.getter(a4);
  if (v21)
  {
    uint64_t v22 = v18;
    uint64_t v23 = v19;
    char v24 = v20 & 1;
    uint64_t v87 = (void *)v15;
    uint64_t v88 = v14;
    uint64_t v85 = v17;
    uint64_t v86 = v16;
    LOBYTE(v93) = v20 & 1;
    uint64_t v25 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    outlined consume of Text.Storage(v22, v23, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)&long long v76 = v17;
    *((void *)&v76 + 1) = v16;
    uint64_t v26 = v80;
    uint64_t v77 = a4;
    char v27 = v82;
    uint64_t v78 = v14;
    if (v81)
    {
      Text.Style.init()((uint64_t)v13);
      uint64_t v31 = &v13[v11[5]];
      uint64_t v32 = &v13[v11[6]];
      *(void *)uint64_t v32 = 0;
      *((void *)v32 + 1) = 0xE000000000000000;
      uint64_t v33 = v11[7];
      v13[v33] = 0;
      uint64_t v34 = *((void *)&v76 + 1);
      *(void *)uint64_t v31 = v76;
      *((void *)v31 + 1) = v34;
      uint64_t v28 = v15;
      uint64_t v35 = v15;
      uint64_t v29 = v78;
      specialized Text.resolve<A>(into:in:with:)((uint64_t)v13, v35, v78, 1, v26, v83, 1, v77);
      uint64_t v36 = *(void *)v32;
      uint64_t v37 = *((void *)v32 + 1);
      char v38 = v13[v33];
      swift_bridgeObjectRetain();
      outlined destroy of Text.ResolvedString((uint64_t)v13, type metadata accessor for Text.ResolvedString);
      uint64_t v93 = v36;
      uint64_t v94 = v37;
      char v30 = v27;
      if (v79)
      {
        uint64_t v39 = v26;
        if (v38) {
          goto LABEL_12;
        }
        type metadata accessor for AccessibilityTextStorage();
        uint64_t v40 = swift_dynamicCastClass();
        if (v40)
        {
          uint64_t v41 = v40;
          swift_beginAccess();
          uint64_t v42 = *(void **)(v41 + 16);
          uint64_t v43 = *(void *)(v41 + 24);
          uint64_t v44 = v83;
          if (*(unsigned char *)(v41 + 32))
          {
            outlined copy of Text.Storage(v39, v83, 1);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of AccessibilityText.Storage(v42, v43, 1);
            id v45 = v42;
          }
          else
          {
            id v46 = objc_allocWithZone(MEMORY[0x263F086A0]);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of Text.Storage(v39, v44, 1);
            outlined copy of AccessibilityText.Storage(v42, v43, 0);
            double v47 = (void *)MEMORY[0x24C522820](v42, v43);
            id v45 = objc_msgSend(v46, sel_initWithString_, v47);

            outlined consume of AccessibilityText.Storage(v42, v43, 0);
          }
          BOOL v48 = NSAttributedString.isDynamic.getter();

          outlined consume of Text.Storage(v39, v44, 1);
          outlined consume of Text.Storage(v39, v44, 1);
          if (v48)
          {
LABEL_12:
            uint64_t v87 = (void *)v28;
            uint64_t v88 = v29;
            long long v84 = v76;
            uint64_t v49 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v39, v83, 1, v77, (uint64_t *)&v87, 0, 1, 1, 0, &v84);
            if (v49)
            {
              char v50 = (void *)v49;
              swift_bridgeObjectRelease();
              id v51 = objc_msgSend(v50, sel_string);
              uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v54 = v53;

              uint64_t v93 = v52;
              uint64_t v94 = v54;
              uint64_t v29 = v78;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v93 = v80;
      uint64_t v94 = v83;
      swift_bridgeObjectRetain();
      uint64_t v28 = v15;
      uint64_t v29 = v78;
      char v30 = v27;
    }
    if (v30)
    {
      if (v29)
      {
        swift_retain_n();
        swift_retain_n();
        specialized PropertyList.Tracker.value<A>(_:for:)(v28, &v87);
        swift_release_n();
        swift_release_n();
        uint64_t v55 = v87;
        uint64_t v56 = v88;
        LOBYTE(v57) = v89;
        uint64_t v58 = v90;
        uint64_t v59 = v91;
        unint64_t v60 = v92;
      }
      else
      {
        uint64_t v61 = swift_retain_n();
        uint64_t v62 = (void *)specialized find<A>(_:key:)(v61);
        if (v62)
        {
          uint64_t v55 = (void *)v62[9];
          uint64_t v56 = v62[10];
          uint64_t v57 = v62[11];
          uint64_t v58 = v62[12];
          uint64_t v59 = v62[13];
          unint64_t v60 = v62[14];
          outlined copy of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          unint64_t v60 = 0x8000000000000000;
        }
        uint64_t v87 = v55;
        uint64_t v88 = v56;
        uint64_t v89 = v57;
        swift_release_n();
      }
      if (v60 >> 62 == 1 && (v57 & 1) != 0)
      {
        id v63 = objc_msgSend(v55, sel_attributedString);
        outlined consume of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
        if (v63)
        {
          id v64 = objc_msgSend(v63, sel_string);
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;

          swift_bridgeObjectRelease();
          uint64_t v68 = HIBYTE(v67) & 0xF;
          if ((v67 & 0x2000000000000000) == 0) {
            uint64_t v68 = v65 & 0xFFFFFFFFFFFFLL;
          }
          if (v68)
          {
            id v69 = objc_msgSend(v63, sel_string);
            uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v72 = v71;

            v73._countAndFlagsBits = v70;
            v73._object = v72;
            String.append(_:)(v73);

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
      }
      else
      {
        outlined consume of ResolvedTextSuffix(v55, v56, v57, v58, v59, v60);
      }
    }
    return v93;
  }
  return v25;
}

uint64_t static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, int a6, char a7, char a8, char a9, _OWORD *a10)
{
  int v80 = a6;
  _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v78 = (uint64_t)&v74 - v18;
  uint64_t v19 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v76 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v76 + 64);
  MEMORY[0x270FA5388](v19);
  uint64_t v77 = (uint64_t)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  int v79 = (char *)&v74 - v22;
  uint64_t v23 = *a5;
  uint64_t v81 = a5[1];
  uint64_t v82 = v23;
  aBlock = (void *)v23;
  uint64_t v84 = v81;
  uint64_t v24 = unk_26FA881F0;
  if ((unk_26FA881F0 & ~qword_26FA881E8) == 0) {
    uint64_t v24 = 0;
  }
  v90[0] = v24 | qword_26FA881E8;
  v89[0] = *a10;
  uint64_t v25 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)((uint64_t *)&aBlock, a7, v90, (uint64_t *)v89, a1, a2, a3 & 1, a4);
  if (v25)
  {
    id v26 = v25;
    unint64_t v27 = 0x263F08000uLL;
    uint64_t v28 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    uint64_t v29 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    uint64_t v30 = v81;
    uint64_t v31 = v82;
    if (a8)
    {
      id v26 = v25;
      if (NSAttributedString.isDynamic.getter())
      {
        uint64_t v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v26);

        uint64_t v33 = type metadata accessor for Date();
        uint64_t isEscapingClosureAtFileLocation = (uint64_t)v79;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v79, 1, 1, v33);
        uint64_t v35 = isEscapingClosureAtFileLocation + *(int *)(v19 + 24);
        *(void *)uint64_t v35 = 0;
        *(unsigned char *)(v35 + 8) = 1;
        if (v30)
        {
          swift_retain_n();
          swift_retain_n();
          uint64_t v36 = v78;
          specialized PropertyList.Tracker.value<A>(_:for:)(v31, v78);
          uint64_t isEscapingClosureAtFileLocation = (uint64_t)v79;
          swift_release();
        }
        else
        {
          uint64_t v46 = swift_retain_n();
          uint64_t v36 = v78;
          uint64_t v75 = v32;
          specialized closure #1 in PropertyList.subscript.getter(v46, v78);
          uint64_t v32 = v75;
          swift_release_n();
        }
        swift_release();
        outlined assign with take of Date?(v36, isEscapingClosureAtFileLocation);
        double v47 = (uint64_t *)(isEscapingClosureAtFileLocation + *(int *)(v19 + 20));
        *double v47 = v31;
        v47[1] = v30;
        *(void *)uint64_t v35 = 0;
        *(unsigned char *)(v35 + 8) = 1;
        if (one-time initialization token for resolvableTextSegment != -1) {
          goto LABEL_37;
        }
        while (1)
        {
          uint64_t v48 = static NSAttributedStringKey.resolvableTextSegment;
          id v49 = [v32 (SEL)v29[128]];
          uint64_t v50 = v77;
          outlined init with copy of ResolvableStringResolutionContext(isEscapingClosureAtFileLocation, v77, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
          unint64_t v51 = (*(unsigned __int8 *)(v76 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
          uint64_t v52 = isEscapingClosureAtFileLocation;
          uint64_t v53 = swift_allocObject();
          *(void *)(v53 + 16) = v32;
          outlined init with take of ResolvableStringResolutionContext(v50, v53 + v51);
          uint64_t v54 = swift_allocObject();
          *(void *)(v54 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
          *(void *)(v54 + 24) = v53;
          uint64_t v87 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          uint64_t v88 = (void *)v54;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v84 = 1107296256;
          uint64_t v85 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          uint64_t v86 = &block_descriptor_12;
          uint64_t v55 = _Block_copy(&aBlock);
          uint64_t v56 = v32;
          swift_retain();
          swift_release();
          objc_msgSend(v56, sel_enumerateAttribute_inRange_options_usingBlock_, v48, 0, v49, 2, v55);
          _Block_release(v55);
          LOBYTE(v48) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          uint64_t result = swift_release();
          if (v48)
          {
            __break(1u);
            return result;
          }
          outlined destroy of Text.ResolvedString(v52, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);

          id v26 = v56;
          uint64_t v29 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          uint64_t v30 = v81;
          uint64_t v31 = v82;
          uint64_t v28 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          unint64_t v27 = 0x263F08000;
          if ((a9 & 1) == 0)
          {
LABEL_19:
            char v58 = v80;
            goto LABEL_32;
          }
LABEL_11:
          if (v30)
          {
            swift_retain_n();
            swift_retain_n();
            specialized PropertyList.Tracker.value<A>(_:for:)(v31, &aBlock);
            swift_release_n();
            swift_release_n();
            char v38 = aBlock;
            uint64_t v39 = v84;
            LOBYTE(v40) = (_BYTE)v85;
            uint64_t v41 = (uint64_t)v86;
            uint64_t v42 = (uint64_t)v87;
            unint64_t v43 = (unint64_t)v88;
          }
          else
          {
            uint64_t v44 = swift_retain_n();
            id v45 = (void *)specialized find<A>(_:key:)(v44);
            if (v45)
            {
              char v38 = (void *)v45[9];
              uint64_t v39 = v45[10];
              uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v45[11];
              uint64_t v42 = v45[13];
              unint64_t v43 = v45[14];
              uint64_t v41 = v45[12];
              outlined copy of ResolvedTextSuffix(v38, v39, (char)v40, v41, v42, v43);
            }
            else
            {
              char v38 = 0;
              uint64_t v39 = 0;
              uint64_t v40 = 0;
              uint64_t v41 = 0;
              uint64_t v42 = 0;
              unint64_t v43 = 0x8000000000000000;
            }
            aBlock = v38;
            uint64_t v84 = v39;
            uint64_t v85 = v40;
            swift_release_n();
          }
          if (v43 >> 62 != 1 || (v40 & 1) == 0) {
            break;
          }
          id v59 = objc_msgSend(v38, sel_attributedString);
          outlined consume of ResolvedTextSuffix(v38, v39, (char)v40, v41, v42, v43);
          if (!v59) {
            goto LABEL_30;
          }
          id v60 = objc_msgSend(v59, sel_string);
          uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v63 = v62;

          swift_bridgeObjectRelease();
          uint64_t v64 = HIBYTE(v63) & 0xF;
          if ((v63 & 0x2000000000000000) == 0) {
            uint64_t v64 = v61 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v29 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          char v58 = v80;
          if (v64)
          {
            uint64_t v28 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
            id v65 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v26);
            objc_msgSend(v65, sel_appendAttributedString_, v59);

            id v26 = v65;
            unint64_t v27 = 0x263F08000uLL;
            uint64_t v31 = v82;
            goto LABEL_32;
          }

LABEL_31:
          uint64_t v31 = v82;
          uint64_t v28 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          unint64_t v27 = 0x263F08000uLL;
LABEL_32:
          LOBYTE(v90[0]) = 0;
          memset(v89, 0, 32);
          id v66 = objc_msgSend(objc_allocWithZone(*(Class *)(v27 + 2488)), (SEL)v28[364], v26);

          id v67 = v66;
          id v68 = [v67 (SEL)v29[128]];

          uint64_t v69 = swift_allocObject();
          *(void *)(v69 + 16) = v31;
          *(void *)(v69 + 24) = v30;
          *(void *)(v69 + 32) = v90;
          *(void *)(v69 + 40) = v89;
          *(void *)(v69 + 48) = v67;
          *(unsigned char *)(v69 + 56) = v58 & 1;
          uint64_t v32 = (void *)swift_allocObject();
          v32[2] = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
          v32[3] = v69;
          uint64_t v87 = partial apply for thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          uint64_t v88 = v32;
          aBlock = (void *)MEMORY[0x263EF8330];
          uint64_t v84 = 1107296256;
          uint64_t v85 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
          uint64_t v86 = &block_descriptor_0;
          uint64_t v70 = _Block_copy(&aBlock);
          id v26 = v88;
          swift_retain();
          id v71 = v67;
          swift_retain();
          swift_retain();
          swift_release();
          objc_msgSend(v71, sel_enumerateAttributesInRange_options_usingBlock_, 0, v68, 0, v70);
          _Block_release(v70);
          uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
          {
            id v72 = v71;
            id v73 = [v72 (SEL)v29[128]];

            id v37 = objc_msgSend(v72, sel_attributedSubstringFromRange_, 0, v73);
            swift_release();
            swift_bridgeObjectRelease();
            return (uint64_t)v37;
          }
          __break(1u);
LABEL_37:
          swift_once();
        }
        outlined consume of ResolvedTextSuffix(v38, v39, (char)v40, v41, v42, v43);
LABEL_30:
        uint64_t v29 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
        char v58 = v80;
        goto LABEL_31;
      }
    }
    if (a9) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
  return 0;
}

uint64_t static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)(uint64_t a1, long long *a2, char a3, char a4, long long *a5)
{
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  long long v35 = *a5;
  long long v36 = *a2;
  uint64_t v39 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  char v9 = v39;
  uint64_t v10 = (uint64_t *)(a1 + 56);
  int v34 = a3 & 1;
  int v11 = a4 & 1;
  do
  {
    uint64_t v12 = *(v10 - 3);
    uint64_t v13 = *(v10 - 2);
    int v14 = *((unsigned __int8 *)v10 - 8);
    uint64_t v15 = *v10;
    long long v37 = v35;
    long long v38 = v36;
    outlined copy of Text.Storage(v12, v13, v14);
    swift_bridgeObjectRetain();
    uint64_t v16 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)(v12, v13, v14, v15, (uint64_t *)&v38, v34, v11, (uint64_t *)&v37);
    uint64_t v18 = v17;
    outlined consume of Text.Storage(v12, v13, v14);
    swift_bridgeObjectRelease();
    uint64_t v39 = v9;
    unint64_t v20 = v9[2];
    unint64_t v19 = v9[3];
    if (v20 >= v19 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      char v9 = v39;
    }
    v9[2] = v20 + 1;
    uint64_t v21 = &v9[2 * v20];
    unsigned __int8 v21[4] = v16;
    v21[5] = v18;
    v10 += 4;
    --v5;
  }
  while (v5);
  unint64_t v22 = v20 + 1;
  uint64_t v23 = v9 + 5;
  uint64_t v24 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v29 = *(v23 - 1);
    uint64_t v28 = *v23;
    uint64_t v30 = HIBYTE(*v23) & 0xF;
    if ((*v23 & 0x2000000000000000) == 0) {
      uint64_t v30 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v30)
    {
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v38 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v24 + 16) + 1, 1);
        uint64_t v24 = v38;
      }
      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v38;
      }
      *(void *)(v24 + 16) = v26 + 1;
      uint64_t v27 = v24 + 16 * v26;
      *(void *)(v27 + 32) = v29;
      *(void *)(v27 + 40) = v28;
    }
    v23 += 2;
    --v22;
  }
  while (v22);
  swift_release();
  *(void *)&long long v38 = v24;
  type metadata accessor for [String](0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
  swift_release();
  return v32;
}

uint64_t static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(void *a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  unsigned __int8 v22 = 0;
  memset(v21, 0, sizeof(v21));
  unint64_t v7 = (void *)*a1;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, *a1);

  id v9 = v8;
  id v10 = objc_msgSend(v9, sel_length);

  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v6;
  *(void *)(v11 + 32) = &v22;
  *(void *)(v11 + 40) = v21;
  *(void *)(v11 + 48) = v9;
  *(unsigned char *)(v11 + 56) = a3;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
  *(void *)(v12 + 24) = v11;
  void v20[4] = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v20[5] = v12;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 1107296256;
  _OWORD v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v20[3] = &block_descriptor_23;
  uint64_t v13 = _Block_copy(v20);
  swift_retain();
  swift_retain();
  id v14 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttributesInRange_options_usingBlock_, 0, v10, 0, v13);
  _Block_release(v13);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    id v16 = v14;
    id v17 = objc_msgSend(v16, sel_length);

    id v18 = objc_msgSend(v16, sel_attributedSubstringFromRange_, 0, v17);
    *a1 = v18;
    uint64_t v19 = v22;
    swift_release();
    swift_bridgeObjectRelease();
    return v19;
  }
  return result;
}

uint64_t closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(void *a1, int64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, unint64_t a8, unint64_t *a9, unsigned __int8 a10)
{
  _s10Foundation4DateVSgMaTm_0(0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v20 = &v93[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v21);
  uint64_t v101 = &v93[-v22];
  MEMORY[0x270FA5388](v23);
  uint64_t v102 = &v93[-v24];
  uint64_t v114 = a1;
  *(void *)&long long v112 = a5;
  *((void *)&v112 + 1) = a6;
  swift_bridgeObjectRetain();
  specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)((uint64_t)&v114, (uint64_t *)&v112);
  if (one-time initialization token for coreAXLabel != -1) {
LABEL_97:
  }
    swift_once();
  unint64_t v25 = v114;
  uint64_t v26 = v114[2];
  uint64_t v99 = v20;
  if (!v26)
  {
    long long v113 = 0u;
    long long v112 = 0u;
    goto LABEL_11;
  }
  id v27 = (id)static NSAttributedStringKey.coreAXLabel;
  uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
  if ((v29 & 1) == 0)
  {
    long long v113 = 0u;
    long long v112 = 0u;

    goto LABEL_11;
  }
  outlined init with copy of Any(v25[7] + 32 * v28, (uint64_t)&v112);

  if (!*((void *)&v113 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v112);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    int v94 = 0;
    goto LABEL_13;
  }
  unint64_t v20 = v110;
  uint64_t v30 = *(unsigned char **)&v111[0];
  *a7 = 1;
  id v31 = (id)static NSAttributedStringKey.coreAXLabel;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v31, &v112);

  outlined destroy of Any?((uint64_t)&v112);
  uint64_t v32 = MEMORY[0x24C522820](0xD00000000000001ELL, 0x800000024621B2E0);
  uint64_t v33 = (void *)v32;
  int v34 = v114;
  if (v114[2] && (uint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32), (v36 & 1) != 0))
  {
    outlined init with copy of Any(v34[7] + 32 * v35, (uint64_t)&v112);
  }
  else
  {
    long long v113 = 0u;
    long long v112 = 0u;
  }

  if (!*((void *)&v113 + 1))
  {
    outlined destroy of Any?((uint64_t)&v112);
LABEL_80:
    uint64_t v86 = *(unsigned char **)(a8 + 8);
    if (v86)
    {
      uint64_t v87 = *(unsigned char **)a8;
      a7 = (unsigned char *)(*(void *)(a8 + 16) + *(void *)(a8 + 24));
      swift_bridgeObjectRetain();
      if (a7 == (unsigned char *)a2)
      {
        if (v87 == v20 && v86 == v30)
        {
          swift_bridgeObjectRelease();
LABEL_88:
          swift_bridgeObjectRelease();
          objc_msgSend(a9, sel_deleteCharactersInRange_, a2, a3);
          int v94 = 0;
          a3 = 0;
          goto LABEL_13;
        }
        char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v90) {
          goto LABEL_88;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v88 = (void *)MEMORY[0x24C522820](v20, v30);
    objc_msgSend(a9, sel_replaceCharactersInRange_withString_, a2, a3, v88);

    uint64_t v89 = (void *)MEMORY[0x24C522820](v20, v30);
    a3 = objc_msgSend(v89, sel_length);

    *(void *)a8 = v20;
    *(void *)(a8 + 8) = v30;
    *(void *)(a8 + 16) = a2;
    *(void *)(a8 + 24) = a3;
    goto LABEL_95;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_80;
  }
  long long v37 = v110;
  a7 = *(unsigned char **)(a8 + 8);
  if (a7)
  {
    uint64_t v84 = *(unsigned char **)a8;
    uint64_t v85 = *(void *)(a8 + 16) + *(void *)(a8 + 24);
    swift_bridgeObjectRetain();
    if (v85 == a2)
    {
      if (v84 == v20 && a7 == v30)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
LABEL_93:
        int v94 = 1;
        goto LABEL_13;
      }
LABEL_91:
      char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v91)
      {
        swift_bridgeObjectRelease();

        goto LABEL_93;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  unint64_t v92 = (void *)MEMORY[0x24C522820](v20, v30);
  swift_bridgeObjectRelease();
  objc_msgSend(v37, sel_setAccessibilityLabel_, v92);

  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
LABEL_95:
  swift_bridgeObjectRelease();
  int v94 = 0;
LABEL_13:
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  long long v37 = v114;
  uint64_t v38 = v114[2];
  int64_t v97 = a2;
  uint64_t v96 = a9;
  long long v95 = a3;
  if (!v38)
  {
    long long v113 = 0u;
    long long v112 = 0u;
LABEL_22:
    outlined destroy of Any?((uint64_t)&v112);
    uint64_t v44 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v102, 1, 1, v44);
    goto LABEL_23;
  }
  id v39 = (id)static NSAttributedStringKey.resolvableTextSegment;
  uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
  if (v41)
  {
    outlined init with copy of Any(v37[7] + 32 * v40, (uint64_t)&v112);
  }
  else
  {
    long long v113 = 0u;
    long long v112 = 0u;
  }

  if (!*((void *)&v113 + 1)) {
    goto LABEL_22;
  }
  uint64_t v42 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  long long v37 = v102;
  int v43 = swift_dynamicCast();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v37, v43 ^ 1u, 1, v42);
LABEL_23:
  unint64_t v20 = v114;
  uint64_t v45 = v114[8];
  char v103 = v114 + 8;
  uint64_t v46 = 1 << *((unsigned char *)v114 + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  int v100 = a10;
  a8 = v47 & v45;
  int64_t v104 = (unint64_t)(v46 + 63) >> 6;
  uint64_t v105 = (long long *)((char *)&v112 + 8);
  a3 = v111;
  uint64_t v30 = v109;
  swift_bridgeObjectRetain();
  a2 = 0;
  uint64_t v98 = v20;
  while (a8)
  {
    unint64_t v48 = __clz(__rbit64(a8));
    a8 &= a8 - 1;
    unint64_t v49 = v48 | (a2 << 6);
LABEL_43:
    uint64_t v53 = *((void *)v20 + 7);
    *(void *)&long long v112 = *(void *)(*((void *)v20 + 6) + 8 * v49);
    uint64_t v54 = (unsigned char *)v112;
    uint64_t v55 = v105;
    outlined init with copy of Any(v53 + 32 * v49, (uint64_t)v105);
    uint64_t v110 = v54;
    outlined init with take of Any(v55, v111);
    uint64_t v108 = v54;
    outlined init with copy of Any((uint64_t)v111, (uint64_t)v109);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    a7 = v54;
    v56._countAndFlagsBits = 0x7373656363414955;
    v56._object = (void *)0xEF7974696C696269;
    long long v37 = (void *)String.hasPrefix(_:)(v56);

    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
    if (v37)
    {
      outlined destroy of Text.ResolvedString((uint64_t)&v110, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
    }
    else
    {
      uint64_t v57 = v101;
      outlined init with copy of ResolvableTextSegmentAttribute.Value?((uint64_t)v102, (uint64_t)v101, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      uint64_t v108 = a7;
      outlined init with copy of Any((uint64_t)v111, (uint64_t)v109);
      if ((v100 & 1) == 0)
      {
        uint64_t v64 = a7;
        outlined destroy of Text.ResolvedString((uint64_t)&v108, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        uint64_t v63 = (uint64_t)v57;
        goto LABEL_48;
      }
      uint64_t v58 = (uint64_t)v99;
      outlined init with copy of ResolvableTextSegmentAttribute.Value?((uint64_t)v57, (uint64_t)v99, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      uint64_t v59 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
      uint64_t v60 = (uint64_t)v57;
      int v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v58, 1, v59);
      unint64_t v62 = a7;
      a9 = &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?;
      if (v61 == 1)
      {
        outlined destroy of Text.ResolvedString((uint64_t)&v108, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v60, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
        uint64_t v63 = v58;
        unint64_t v20 = v98;
LABEL_48:
        outlined destroy of ResolvableTextSegmentAttribute.Value?(v63, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
        goto LABEL_49;
      }
      uint64_t v69 = v62;
      long long v37 = (void *)ResolvableTextSegmentAttribute.Value.isAttributeRequiredForResolution(_:includeNonFunctionalAttributes:)(v62, 0);
      outlined destroy of Text.ResolvedString((uint64_t)&v108, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
      outlined destroy of ResolvableTextSegmentAttribute.Value?(v60, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
      outlined destroy of Text.ResolvedString(v58, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      unint64_t v20 = v98;
      if (v37)
      {

        outlined destroy of Text.ResolvedString((uint64_t)&v110, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
      }
      else
      {
LABEL_49:
        uint64_t v108 = a7;
        outlined init with copy of Any((uint64_t)v111, (uint64_t)v109);
        long long v37 = v114;
        swift_bridgeObjectRetain();
        uint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(a7);
        char v67 = v66;
        swift_bridgeObjectRelease();
        if (v67)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          char v106 = v37;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            long long v37 = v106;
          }

          outlined init with take of Any((_OWORD *)(v37[7] + 32 * v65), v107);
          specialized _NativeDictionary._delete(at:)(v65, v37);
          uint64_t v114 = v37;
          swift_bridgeObjectRelease();
        }
        else
        {
          memset(v107, 0, sizeof(v107));
        }

        outlined destroy of Any?((uint64_t)v107);
        outlined destroy of Text.ResolvedString((uint64_t)&v110, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
      }
    }
  }
  int64_t v50 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v50 >= v104) {
    goto LABEL_57;
  }
  unint64_t v51 = v103[v50];
  ++a2;
  if (v51) {
    goto LABEL_42;
  }
  a2 = v50 + 1;
  if (v50 + 1 >= v104) {
    goto LABEL_57;
  }
  unint64_t v51 = v103[a2];
  if (v51) {
    goto LABEL_42;
  }
  a2 = v50 + 2;
  if (v50 + 2 >= v104) {
    goto LABEL_57;
  }
  unint64_t v51 = v103[a2];
  if (v51)
  {
LABEL_42:
    a8 = (v51 - 1) & v51;
    unint64_t v49 = __clz(__rbit64(v51)) + (a2 << 6);
    goto LABEL_43;
  }
  int64_t v52 = v50 + 3;
  if (v52 < v104)
  {
    unint64_t v51 = v103[v52];
    if (!v51)
    {
      while (1)
      {
        a2 = v52 + 1;
        if (__OFADD__(v52, 1)) {
          break;
        }
        if (a2 >= v104) {
          goto LABEL_57;
        }
        unint64_t v51 = v103[a2];
        ++v52;
        if (v51) {
          goto LABEL_42;
        }
      }
      __break(1u);
      goto LABEL_97;
    }
    a2 = v52;
    goto LABEL_42;
  }
LABEL_57:
  swift_release();
  uint64_t v70 = MEMORY[0x24C522820](0xD00000000000001ELL, 0x800000024621B2E0);
  id v71 = (void *)v70;
  id v72 = v114;
  if (v114[2])
  {
    uint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v70);
    int64_t v74 = v97;
    uint64_t v75 = v96;
    id v76 = v95;
    if (v77)
    {
      outlined init with copy of Any(v72[7] + 32 * v73, (uint64_t)&v112);
    }
    else
    {
      long long v113 = 0u;
      long long v112 = 0u;
    }
  }
  else
  {
    long long v113 = 0u;
    long long v112 = 0u;
    int64_t v74 = v97;
    uint64_t v75 = v96;
    id v76 = v95;
  }

  if (!*((void *)&v113 + 1))
  {
    outlined destroy of Any?((uint64_t)&v112);
    goto LABEL_70;
  }
  type metadata accessor for NSTextAttachment();
  if (swift_dynamicCast())
  {
    id v78 = v110;
    id v79 = objc_msgSend(v110, sel_accessibilityLabel);
    if (v79)
    {
      int v80 = v79;
      uint64_t v81 = (void *)MEMORY[0x24C522820](0xD00000000000001ELL, 0x800000024621B2E0);
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v81, &v112);

      outlined destroy of Any?((uint64_t)&v112);
      if (v94)
      {

        objc_msgSend(v75, sel_deleteCharactersInRange_, v74, v76);
        id v76 = 0;
        goto LABEL_70;
      }
      objc_msgSend(v75, sel_replaceCharactersInRange_withString_, v74, v76, v80);
      id v76 = objc_msgSend(v80, sel_length);
    }
  }
LABEL_70:
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v75, sel_setAttributes_range_, isa, v74, v76);

  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v102, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
  return swift_bridgeObjectRelease();
}

uint64_t *NSAttributedStringKey.coreAXLabel.unsafeMutableAddressor()
{
  if (one-time initialization token for coreAXLabel != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.coreAXLabel;
}

void static NSAttributedStringKey.coreAXAttachment.getter()
{
}

BOOL NSAttributedStringKey.isAccessibilityAttribute.getter()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v0._countAndFlagsBits = 0x7373656363414955;
  v0._object = (void *)0xEF7974696C696269;
  Swift::Bool v1 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t EnvironmentValues.accessibilityTextAttributeResolver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(uint64_t a1, long long *a2, char a3, char a4, char a5, char a6, long long *a7, uint64_t a8, uint64_t a9)
{
  long long v40 = *a7;
  long long v41 = *a2;
  unint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v15 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    char v39 = a6 & 1;
    int v16 = a3 & 1;
    char v17 = a4 & 1;
    char v18 = a5 & 1;
    do
    {
      uint64_t v19 = *(v15 - 3);
      uint64_t v20 = *(v15 - 2);
      char v21 = *((unsigned char *)v15 - 8);
      uint64_t v22 = *v15;
      long long v42 = v40;
      *(_OWORD *)int v43 = v41;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v19, v20, v21);
      uint64_t v23 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(v19, v20, v21, v22, v43, v16, v17, v18, v39, &v42);
      outlined consume of Text.Storage(v19, v20, v21);
      uint64_t v24 = swift_bridgeObjectRelease();
      if (v23)
      {
        MEMORY[0x24C522D60](v24);
        if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v15 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    unint64_t v9 = v44;
  }
  v43[0] = v9;
  unint64_t v25 = v9 >> 62;
  if (v9 >> 62)
  {
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_11;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_41;
  }
LABEL_11:
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_init);
  if (!v25)
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return (uint64_t)v26;
  }
LABEL_15:
  while (1)
  {
    unint64_t v25 = v9 >> 62;
    if (v9 >> 62) {
      break;
    }
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
LABEL_17:
    if ((v9 & 0xC000000000000001) != 0)
    {
      id v28 = (id)MEMORY[0x24C523D60](0, v9);
      if (!v25) {
        goto LABEL_20;
      }
    }
    else
    {
      if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_38;
      }
      id v28 = *(id *)(v9 + 32);
      if (!v25)
      {
LABEL_20:
        uint64_t v29 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_26:
    if (!v29) {
      goto LABEL_39;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    if ((uint64_t)objc_msgSend(v28, sel_length) >= 1)
    {
      if ((uint64_t)objc_msgSend(v26, sel_length) >= 1)
      {
        id v33 = objc_allocWithZone(MEMORY[0x263F086A0]);
        swift_bridgeObjectRetain();
        int v34 = (void *)MEMORY[0x24C522820](a8, a9);
        swift_bridgeObjectRelease();
        id v35 = objc_msgSend(v33, sel_initWithString_, v34);

        objc_msgSend(v26, sel_appendAttributedString_, v35);
      }
      objc_msgSend(v26, sel_appendAttributedString_, v28);
    }

    unint64_t v9 = v43[0];
    if ((unint64_t)v43[0] >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v36) {
        goto LABEL_35;
      }
    }
    else if (!*(void *)((v43[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v32) {
      goto LABEL_37;
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t Text.accessibilityResolvedText(in:idiom:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = a1[1];
  v17[0] = *a1;
  v17[1] = v12;
  long long v16 = *a2;
  swift_bridgeObjectRetain();
  a5 &= 1u;
  outlined copy of Text.Storage(a3, a4, a5);
  swift_retain();
  swift_retain();
  uint64_t v13 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)(a3, a4, a5, a6, v17, 1, 1, 0, 0, &v16);
  outlined consume of Text.Storage(a3, a4, a5);
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  if (v13) {
    __int16 v15 = 1;
  }
  else {
    __int16 v15 = 255;
  }
  *(void *)a7 = v13;
  *(void *)(a7 + 8) = 0;
  *(_WORD *)(a7 + 16) = v15;
  return result;
}

uint64_t Text.Style.resolveAccessibilityTextAttributes(into:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v10);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)&v10);
  }
  swift_release_n();
  if (v11)
  {
    outlined init with take of ScrollStateRequest(&v10, (uint64_t)v12);
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    *(void *)&long long v10 = v5;
    *((void *)&v10 + 1) = v4;
    (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(v8 + 16))(a1, v2, &v10, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v10, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  v12[0] = v5;
  v12[1] = v4;
  return specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)(a1, v12);
}

uint64_t key path getter for EnvironmentValues.accessibilityTextAttributeResolver : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.accessibilityTextAttributeResolver : EnvironmentValues(uint64_t a1)
{
  outlined init with copy of ResolvableTextSegmentAttribute.Value?(a1, (uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  outlined init with copy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, (uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

void (*EnvironmentValues.accessibilityTextAttributeResolver.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  return EnvironmentValues.accessibilityTextAttributeResolver.modify;
}

void EnvironmentValues.accessibilityTextAttributeResolver.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 40;
  if (a2)
  {
    outlined init with copy of ResolvableTextSegmentAttribute.Value?(*a1, v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    outlined init with copy of ResolvableTextSegmentAttribute.Value?(v3, (uint64_t)v2 + 80, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v2 + 80);
    outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2 + 80, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  else
  {
    outlined init with copy of ResolvableTextSegmentAttribute.Value?(*a1, v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
    specialized EnvironmentValues._set<A>(_:for:)(v3);
  }
  outlined destroy of ResolvableTextSegmentAttribute.Value?(v3, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)v2, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);

  free(v2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.AccessibilityTextAttributeResolverKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return outlined init with copy of ResolvableTextSegmentAttribute.Value?((uint64_t)&static EnvironmentValues.AccessibilityTextAttributeResolverKey.defaultValue, a1, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
}

NSAttributedString __swiftcall NSAttributedString.init(axAttributedString:)(Swift::String axAttributedString)
{
  object = axAttributedString._object;
  uint64_t countAndFlagsBits = axAttributedString._countAndFlagsBits;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = (void *)MEMORY[0x24C522820](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v5 = AXAttributedStringConvert(v4);

  id v6 = objc_msgSend(v3, sel_initWithAttributedString_, v5);
  return (NSAttributedString)v6;
}

void static NSAttributedStringKey.coreAXForegroundColor.getter()
{
}

void static NSAttributedStringKey.coreAXFontName.getter()
{
}

void static NSAttributedStringKey.coreAXFontSize.getter()
{
}

void static NSAttributedStringKey.coreAXFontFamily.getter()
{
}

void static NSAttributedStringKey.coreAXStrikethrough.getter()
{
}

void static NSAttributedStringKey.coreAXUnderline.getter()
{
}

void static NSAttributedStringKey.coreAXAlignment.getter()
{
}

void static NSAttributedStringKey.coreAXLink.getter()
{
}

void static NSAttributedStringKey.coreAXTextHeadingLevel.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechPitch.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechPunctuation.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechSpellOut.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechIPANotation.getter()
{
}

void static NSAttributedStringKey.coreAXTextualContext.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechAnnouncementPriority.getter()
{
}

void static NSAttributedStringKey.coreAXSpeechLanguage.getter()
{
}

uint64_t one-time initialization function for coreAXLabel()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001ALL, 0x800000024621B5C0);
  static NSAttributedStringKey.coreAXLabel = result;
  return result;
}

id static NSAttributedStringKey.coreAXLabel.getter()
{
  if (one-time initialization token for coreAXLabel != -1) {
    swift_once();
  }
  Swift::String v0 = (void *)static NSAttributedStringKey.coreAXLabel;

  return v0;
}

__CFString *static NSAttributedStringKey.coreAXDurationTimeMMSS.getter()
{
  return @"UIAccessibilityTokenDurationTimeMMSS";
}

uint64_t specialized static AccessibilityCore.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t a1, char *a2, uint64_t *a3, char a4)
{
  char v6 = *a2;
  char v7 = a2[1];
  uint64_t v8 = *((void *)a2 + 1);
  char v9 = a2[16];
  char v10 = a2[17];
  uint64_t v18 = *((void *)a2 + 4);
  uint64_t v19 = *((void *)a2 + 3);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (v11)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v12, (uint64_t)&v21);
    swift_release_n();
  }
  else
  {
    uint64_t v13 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v13, (uint64_t)&v21);
  }
  swift_release_n();
  if (!v24) {
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v21, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  outlined init with take of ScrollStateRequest(&v21, (uint64_t)v26);
  uint64_t v17 = a1;
  uint64_t v14 = v27;
  uint64_t v15 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  LOBYTE(v21) = v6;
  BYTE1(v21) = v7;
  *((void *)&v21 + 1) = v8;
  char v22 = v9;
  char v23 = v10;
  uint64_t v24 = v19;
  uint64_t v25 = v18;
  v20[0] = v12;
  v20[1] = v11;
  (*(void (**)(uint64_t, long long *, void *, void, uint64_t, uint64_t))(v15 + 24))(v17, &v21, v20, a4 & 1, v14, v15);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t specialized static AccessibilityCore.resolveAttributedTextAttributes(_:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (a2[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (uint64_t)&v8);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v8);
  }
  swift_release_n();
  if (!v9) {
    return outlined destroy of ResolvableTextSegmentAttribute.Value?((uint64_t)&v8, &lazy cache variable for type metadata for AccessibilityTextAttributeResolver?, (void (*)(uint64_t))type metadata accessor for AccessibilityTextAttributeResolver);
  }
  outlined init with take of ScrollStateRequest(&v8, (uint64_t)v10);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_245A577DC()
{
  return swift_deallocObject();
}

uint64_t sub_245A577EC()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResolvableStringResolutionContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);

  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of ResolvableStringResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(uint64_t a1, Swift::Int a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for ResolvableStringResolutionContext() - 8);
  char v10 = *(objc_class **)(v4 + 16);
  uint64_t v11 = (char *)(v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));

  return closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(a1, a2, a3, a4, v10, v11);
}

uint64_t sub_245A57A38()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    type metadata accessor for [String](255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(void *a1, int64_t a2, _OWORD *a3, uint64_t a4)
{
  return closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char **)(v4 + 32), *(void *)(v4 + 40), *(unint64_t **)(v4 + 48), *(unsigned char *)(v4 + 56));
}

uint64_t sub_245A57B00()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveDefaultAttributes(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveTextStyleAttributes(_:textStyle:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of AccessibilityTextAttributeResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>);
    }
  }
}

uint64_t sub_245A57BB4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)()
{
  return closure #1 in Text.Resolved.append<A>(_:in:with:isUniqueSizeVariant:)(*(void *)(v0 + 16));
}

unint64_t type metadata accessor for NSTextAttachment()
{
  unint64_t result = lazy cache variable for type metadata for NSTextAttachment;
  if (!lazy cache variable for type metadata for NSTextAttachment)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilityTextAttributeResolverKey()
{
  return &type metadata for EnvironmentValues.AccessibilityTextAttributeResolverKey;
}

uint64_t ScrollPosition.isPositionedByUser.setter(char a1)
{
  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v8);
  if (v12 == 5)
  {
    int8x16_t v3 = vorrq_s8(v9, v10);
    uint64_t v4 = *(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v8[2] | v8[1];
    BOOL v5 = !v11 && v8[0] == 1;
    if (v5 && v4 == 0) {
      return outlined destroy of ScrollPosition.Storage((uint64_t)v8);
    }
  }
  uint64_t result = outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  if (a1)
  {
    uint64_t result = outlined destroy of ScrollPosition.Storage(v1);
    *(void *)uint64_t v1 = 1;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_WORD *)(v1 + 56) = 1280;
  }
  return result;
}

uint64_t ScrollPosition.wantsUpdate(toPosition:)(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v15);
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v16);
  if (v15[57]) {
    goto LABEL_4;
  }
  outlined init with copy of ScrollPosition.Storage((uint64_t)v15, (uint64_t)v13);
  if (v18)
  {
    outlined destroy of ScrollPosition.ViewID((uint64_t)v13);
LABEL_4:
    outlined destroy of (ScrollPosition.Storage, ScrollPosition.Storage)((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage));
    return 1;
  }
  v11[0] = v13[0];
  v11[1] = v13[1];
  v12[0] = v14[0];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v14 + 9);
  v9[0] = v16[0];
  v9[1] = v16[1];
  v10[0] = *(_OWORD *)v17;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)&v17[9];
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v5 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    int v6 = dyld_program_sdk_at_least();
  }
  else {
    int v6 = static Semantics.forced >= v5;
  }
  outlined init with copy of ScrollPosition.ViewID((uint64_t)v11, (uint64_t)v8);
  outlined init with copy of ScrollPosition.ViewID((uint64_t)v9, (uint64_t)v7);
  if (v6)
  {
    type metadata accessor for Hashable & Sendable();
    uint64_t v3 = AGCompareValues() ^ 1;
  }
  else
  {
    uint64_t v3 = 1;
  }
  outlined destroy of ScrollPosition.ViewID((uint64_t)v7);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v8);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v9);
  outlined destroy of ScrollPosition.ViewID((uint64_t)v11);
  outlined destroy of ScrollPosition.Storage((uint64_t)v15);
  return v3;
}

uint64_t static ScrollPosition.ViewID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48))
    {
      goto LABEL_10;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 56)) {
    return 0;
  }
LABEL_10:
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = __swift_project_boxed_opaque_existential_1((void *)a1, v5);
  uint64_t v8 = *(void *)(a2 + 24);
  int8x16_t v9 = __swift_project_boxed_opaque_existential_1((void *)a2, v8);

  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v7, (uint64_t)v9, v5, v8, v6);
}

uint64_t ScrollPosition.ViewID.id.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyTrackedValue(v1, a1);
}

uint64_t ScrollPosition.ViewID.id.setter(long long *a1)
{
  __swift_destroy_boxed_opaque_existential_1(v1);

  return outlined init with take of ScrollStateRequest(a1, v1);
}

uint64_t (*ScrollPosition.ViewID.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.ViewID.anchor.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ScrollPosition.ViewID.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 40) = result;
  *(void *)(v3 + 48) = a2;
  *(unsigned char *)(v3 + 56) = a3 & 1;
  return result;
}

uint64_t (*ScrollPosition.ViewID.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ScrollPosition.Storage(v1, a1);
}

uint64_t ScrollPosition.storage.setter(uint64_t a1)
{
  return outlined assign with take of ScrollPosition.Storage(a1, v1);
}

uint64_t (*ScrollPosition.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPosition.idType.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t ScrollPosition.idType.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 64) = result;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*ScrollPosition.idType.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_OWORD *ScrollPosition.init<A>(idType:storage:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = outlined init with take of ScrollPosition.Storage(a2, (_OWORD *)a4);
  *(void *)(a4 + 64) = a1;
  *(void *)(a4 + 72) = a3;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  memset(v7, 0, sizeof(v7));
  char v8 = 5;
  uint64_t result = outlined init with take of ScrollPosition.Storage((long long *)v7, (_OWORD *)a3);
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:edge:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  LOBYTE(v8[0]) = a2;
  char v9 = 1;
  uint64_t result = outlined init with take of ScrollPosition.Storage(v8, (_OWORD *)a4);
  *(void *)(a4 + 64) = a1;
  *(void *)(a4 + 72) = a3;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:point:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(double *)&long long v9 = a4;
  *((double *)&v9 + 1) = a5;
  char v10 = 2;
  uint64_t result = outlined init with take of ScrollPosition.Storage(&v9, (_OWORD *)a3);
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  return result;
}

_OWORD *ScrollPosition.init<A>(idType:x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  return ScrollPosition.init<A>(idType:x:)(a1, a2, 3, a3, a4);
}

_OWORD *ScrollPosition.init<A>(idType:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  return ScrollPosition.init<A>(idType:x:)(a1, a2, 4, a3, a4);
}

_OWORD *ScrollPosition.init<A>(idType:x:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(double *)long long v9 = a5;
  char v10 = a3;
  uint64_t result = outlined init with take of ScrollPosition.Storage(v9, (_OWORD *)a4);
  *(void *)(a4 + 64) = a1;
  *(void *)(a4 + 72) = a2;
  return result;
}

Swift::Void __swiftcall ScrollPosition.scrollTo(edge:)(SwiftUI::Edge edge)
{
  outlined destroy of ScrollPosition.Storage((uint64_t)v1);
  *uint64_t v1 = edge;
  *((unsigned char *)v1 + 57) = 1;
}

uint64_t ScrollPosition.scrollTo(x:y:)(double a1, double a2)
{
  uint64_t result = outlined destroy of ScrollPosition.Storage(v2);
  *(double *)uint64_t v2 = a1;
  *(double *)(v2 + 8) = a2;
  *(unsigned char *)(v2 + 57) = 2;
  return result;
}

uint64_t ScrollPosition.scrollTo(x:)(double a1)
{
  uint64_t result = outlined destroy of ScrollPosition.Storage(v1);
  *(double *)uint64_t v1 = a1;
  *(unsigned char *)(v1 + 57) = 3;
  return result;
}

uint64_t ScrollPosition.scrollTo(y:)(double a1)
{
  uint64_t result = outlined destroy of ScrollPosition.Storage(v1);
  *(double *)uint64_t v1 = a1;
  *(unsigned char *)(v1 + 57) = 4;
  return result;
}

BOOL ScrollPosition.isPositionedByUser.getter()
{
  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)v7);
  BOOL v5 = 0;
  if (v11 == 5)
  {
    int8x16_t v1 = vorrq_s8(v8, v9);
    uint64_t v2 = *(void *)&vorr_s8(*(int8x8_t *)v1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)) | v7[2] | v7[1];
    BOOL v3 = !v10 && v7[0] == 1;
    if (v3 && v2 == 0) {
      BOOL v5 = 1;
    }
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  return v5;
}

void type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage)()
{
  if (!lazy cache variable for type metadata for (ScrollPosition.Storage, ScrollPosition.Storage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ScrollPosition.Storage, ScrollPosition.Storage));
    }
  }
}

uint64_t key path getter for ScrollPosition.isPositionedByUser : ScrollPosition@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v9);
  BOOL v7 = 0;
  if (v13 == 5)
  {
    int8x16_t v3 = vorrq_s8(v10, v11);
    uint64_t v4 = *(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v9[2] | v9[1];
    BOOL v5 = !v12 && v9[0] == 1;
    if (v5 && v4 == 0) {
      BOOL v7 = 1;
    }
  }
  uint64_t result = outlined destroy of ScrollPosition.Storage((uint64_t)v9);
  *a2 = v7;
  return result;
}

uint64_t key path setter for ScrollPosition.isPositionedByUser : ScrollPosition(char *a1, uint64_t a2)
{
  char v3 = *a1;
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v9);
  if (v13 == 5)
  {
    int8x16_t v4 = vorrq_s8(v10, v11);
    uint64_t v5 = *(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v9[2] | v9[1];
    BOOL v6 = !v12 && v9[0] == 1;
    if (v6 && v5 == 0) {
      return outlined destroy of ScrollPosition.Storage((uint64_t)v9);
    }
  }
  uint64_t result = outlined destroy of ScrollPosition.Storage((uint64_t)v9);
  if (v3)
  {
    uint64_t result = outlined destroy of ScrollPosition.Storage(a2);
    *(void *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_WORD *)(a2 + 56) = 1280;
  }
  return result;
}

void (*ScrollPosition.isPositionedByUser.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = (char *)malloc(0x48uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v3);
  BOOL v8 = 0;
  if (v3[57] == 5)
  {
    int8x16_t v4 = vorrq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 40));
    uint64_t v5 = *(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *((void *)v3 + 2) | *((void *)v3 + 1);
    BOOL v6 = !v3[56] && *(void *)v3 == 1;
    if (v6 && v5 == 0) {
      BOOL v8 = 1;
    }
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v3);
  v3[58] = v8;
  return ScrollPosition.isPositionedByUser.modify;
}

void ScrollPosition.isPositionedByUser.modify(uint64_t *a1, char a2)
{
  char v3 = (unsigned __int8 *)*a1;
  int v4 = *(unsigned __int8 *)(*a1 + 58);
  outlined init with copy of ScrollPosition.Storage(*(void *)(*a1 + 64), *a1);
  int v5 = v3[57];
  if ((a2 & 1) == 0)
  {
    if (v5 != 5
      || ((int8x16_t v10 = vorrq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 40)),
           uint64_t v11 = *(void *)&vorr_s8(*(int8x8_t *)v10.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)) | *((void *)v3 + 2) | *((void *)v3 + 1),
           !v3[56])
        ? (BOOL v12 = *(void *)v3 == 1)
        : (BOOL v12 = 0),
          v12 ? (BOOL v13 = v11 == 0) : (BOOL v13 = 0),
          !v13))
    {
      outlined destroy of ScrollPosition.Storage((uint64_t)v3);
      if (!v4) {
        goto LABEL_23;
      }
      goto LABEL_21;
    }
LABEL_22:
    outlined destroy of ScrollPosition.Storage((uint64_t)v3);
    goto LABEL_23;
  }
  if (v5 == 5)
  {
    int8x16_t v6 = vorrq_s8(*(int8x16_t *)(v3 + 24), *(int8x16_t *)(v3 + 40));
    uint64_t v7 = *(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)) | *((void *)v3 + 2) | *((void *)v3 + 1);
    BOOL v8 = !v3[56] && *(void *)v3 == 1;
    if (v8 && v7 == 0) {
      goto LABEL_22;
    }
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v3);
  if (v4)
  {
LABEL_21:
    uint64_t v14 = *((void *)v3 + 8);
    outlined destroy of ScrollPosition.Storage(v14);
    *(void *)uint64_t v14 = 1;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_WORD *)(v14 + 56) = 1280;
  }
LABEL_23:

  free(v3);
}

uint64_t ScrollPosition.edge.getter()
{
  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)v2);
  if (v2[57] == 1) {
    return v2[0];
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)v2);
  return 4;
}

uint64_t ScrollPosition.point.getter()
{
  outlined init with copy of ScrollPosition.Storage(v0, (uint64_t)&v2);
  if (v3 == 2) {
    return v2;
  }
  outlined destroy of ScrollPosition.Storage((uint64_t)&v2);
  return 0;
}

uint64_t ScrollPosition.viewID.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of ScrollPosition.Storage(v1, (uint64_t)v4);
  if (v6)
  {
    uint64_t result = outlined destroy of ScrollPosition.Storage((uint64_t)v4);
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    v7[0] = v4[0];
    v7[1] = v4[1];
    v8[0] = *(_OWORD *)v5;
    *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)&v5[9];
    return outlined init with take of ScrollStateRequest(v7, a1);
  }
  return result;
}

uint64_t ScrollPosition.viewID<A>(type:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  outlined init with copy of ScrollPosition.Storage(v4, (uint64_t)v12);
  if (v14)
  {
    outlined destroy of ScrollPosition.Storage((uint64_t)v12);
    memset(v17, 0, sizeof(v17));
    uint64_t v18 = 0;
  }
  else
  {
    v15[0] = v12[0];
    v15[1] = v12[1];
    v16[0] = *(_OWORD *)v13;
    *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)&v13[9];
    outlined init with take of ScrollStateRequest(v15, (uint64_t)v17);
  }
  uint64_t v8 = outlined init with take of (Hashable & Sendable)?((uint64_t)v17, (uint64_t)v12);
  MEMORY[0x270FA5388](v8);
  _OWORD v11[2] = a1;
  v11[3] = a2;
  type metadata accessor for (Hashable & Sendable)?();
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollPosition.viewID<A>(type:), (uint64_t)v11, MEMORY[0x263F8E628], a1, v9, a3);
  return outlined destroy of (ScrollPosition.Storage, ScrollPosition.Storage)((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (Hashable & Sendable)?);
}

uint64_t project #1 <A><A1>(_:) in ScrollPosition.viewID<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  int v8 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v8 ^ 1u, 1, a2);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v30 = a2;
  id v31 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v28 = a5;
  uint64_t v29 = v10;
  MEMORY[0x270FA5388](a1);
  BOOL v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  char v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v23 + 16))(v22, v24, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v26 = v29;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v22, v14);
  v31(v18, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v12, a3);
  }
  return result;
}

BOOL static ScrollPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v7);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v6);
  char v4 = specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)v7, (uint64_t)v6);
  outlined destroy of ScrollPosition.Storage((uint64_t)v6);
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  return (v4 & 1) != 0 && *(void *)(a1 + 64) == *(void *)(a2 + 64);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPosition(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)v8);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v7);
  char v4 = static ScrollPosition.Storage.== infix(_:_:)(v8, v7);
  outlined destroy of ScrollPosition.Storage((uint64_t)v7);
  outlined destroy of ScrollPosition.Storage((uint64_t)v8);
  return (v4 & 1) != 0
      && project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(*(void *)(a1 + 64), *(void *)(a2 + 64));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48))
    {
      goto LABEL_10;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 56)) {
    return 0;
  }
LABEL_10:
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1((void *)a1, v5);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = __swift_project_boxed_opaque_existential_1((void *)a2, v8);

  return project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v7, (uint64_t)v9, v5, v8, v6);
}

uint64_t ScrollPositionToValue.anchor.getter()
{
  return *(void *)v0;
}

uint64_t ScrollPositionToValue.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)uint64_t v3 = result;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*ScrollPositionToValue.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionToValue.get(base:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollPosition.viewID<A>(type:)(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t ScrollPositionToValue.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)v3;
  uint64_t v20 = *(void *)(v3 + 8);
  uint64_t v21 = v16;
  char v17 = *(unsigned char *)(v3 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, v7, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v10, v6);
  ScrollPosition.scrollTo<A>(id:anchor:)((uint64_t)v15, v21, v20, v17, v6, *(void *)(a3 + 24));
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v6);
}

Swift::Int ScrollPositionToValue.hashValue.getter(uint64_t a1)
{
  return ScrollPositionToValue.hashValue.getter(a1, (void (*)(unsigned char *))ScrollPositionToValue.hash(into:));
}

uint64_t protocol witness for Projection.get(base:) in conformance ScrollPositionToValue<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollPositionToValue.get(base:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(unsigned char *))ScrollPositionToValue.hash(into:));
}

uint64_t (*ValueToScrollPosition.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionToValue.init(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for Binding();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  *(unsigned char *)(a5 + 16) = a4 & 1;
  return result;
}

uint64_t ValueToScrollPosition.set(base:newValue:)(char *a1, uint64_t a2, uint64_t a3)
{
  return specialized ValueToScrollPosition.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

BOOL static ScrollPositionToValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 1) == 0) {
    return (*(unsigned char *)(a2 + 16) & 1) == 0
  }
        && *(double *)a1 == *(double *)a2
        && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  return (*(unsigned char *)(a2 + 16) & 1) != 0;
}

Swift::Int ValueToScrollPosition.hashValue.getter(uint64_t a1)
{
  return ScrollPositionToValue.hashValue.getter(a1, (void (*)(unsigned char *))ValueToScrollPosition.hash(into:));
}

Swift::Int ScrollPositionToValue.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *))
{
  char v4 = *((unsigned char *)v2 + 16);
  long long v7 = *v2;
  char v8 = v4;
  Hasher.init(_seed:)();
  a2(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ValueToScrollPosition<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return specialized ValueToScrollPosition.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t outlined init with copy of ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  char v5 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(a2 + 56) = v5;
  return a2;
}

unint64_t type metadata accessor for Hashable & Sendable()
{
  unint64_t result = lazy cache variable for type metadata for Hashable & Sendable;
  if (!lazy cache variable for type metadata for Hashable & Sendable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Hashable & Sendable);
  }
  return result;
}

uint64_t outlined init with take of (Hashable & Sendable)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (Hashable & Sendable)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Hashable & Sendable)?()
{
  if (!lazy cache variable for type metadata for (Hashable & Sendable)?)
  {
    type metadata accessor for Hashable & Sendable();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Hashable & Sendable)?);
    }
  }
}

uint64_t partial apply for closure #1 in ScrollPosition.viewID<A>(type:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return project #1 <A><A1>(_:) in ScrollPosition.viewID<A>(type:)((uint64_t)v5, v4, a2);
}

uint64_t specialized ValueToScrollPosition.set(base:newValue:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a1;
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  char v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScrollPosition.viewID<A>(type:)(a3, a4, (uint64_t)v11);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v17 = v16(v11, 1, a3);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  if (v17 == 1)
  {
    uint64_t v19 = v27;
    v18(v11, v27);
    uint64_t v20 = v28;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v28, v19);
    int v21 = v16(v8, 1, a3);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v8, v19);
    if (v21 == 1) {
      return result;
    }
    v18(v20, v19);
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v24 = v28;
    v18(v28, v27);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v26 = v11;
    uint64_t v20 = v24;
    v25(v15, v26, a3);
    v25(v24, v15, a3);
    uint64_t v23 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, v23, 1, a3);
}

uint64_t instantiation function for generic protocol witness table for ScrollPositionToValue<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in ScrollPositionToValue<A>()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for ScrollPosition(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1);
    if (*((unsigned char *)a2 + 57))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      long long v6 = a2[2];
      *(_OWORD *)(a1 + 42) = *(long long *)((char *)a2 + 42);
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v4;
    }
    else
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
      unsigned __int8 v8 = *((unsigned char *)a2 + 56);
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
      *(_WORD *)(a1 + 56) = v8;
    }
  }
  *(_OWORD *)(a1 + 64) = a2[4];
  return a1;
}

uint64_t assignWithCopy for ScrollPosition.Storage(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 57);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
        unsigned __int8 v7 = *((unsigned char *)a2 + 56);
        *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
        *(_WORD *)(a1 + 56) = v7;
        return a1;
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v11 = 1;
        goto LABEL_15;
      case 2u:
        *(_OWORD *)a1 = *a2;
        char v11 = 2;
        goto LABEL_15;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v11 = 3;
        goto LABEL_15;
      case 4u:
        *(void *)a1 = *(void *)a2;
        char v11 = 4;
LABEL_15:
        *(unsigned char *)(a1 + 57) = v11;
        break;
      default:
        long long v8 = *a2;
        long long v9 = a2[1];
        long long v10 = a2[2];
        *(_OWORD *)(a1 + 42) = *(long long *)((char *)a2 + 42);
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)a1 = v8;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPosition.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 6) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollPosition.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollPosition.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  if (result >= 5) {
    return (*(_DWORD *)a1 + 5);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollPosition.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 5;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPosition.Storage()
{
  return &type metadata for ScrollPosition.Storage;
}

uint64_t initializeWithCopy for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithTake for ScrollPosition.ViewID(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPosition.ViewID(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPosition.ViewID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPosition.ViewID()
{
  return &type metadata for ScrollPosition.ViewID;
}

uint64_t type metadata accessor for ScrollPositionToValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static HorizontalDirection.Set.leading.getter()
{
  return 1;
}

uint64_t static HorizontalDirection.Set.trailing.getter()
{
  return 2;
}

uint64_t static HorizontalDirection.Set.all.getter()
{
  return 3;
}

void *static HorizontalDirection.allCases.getter()
{
  return &outlined read-only object #0 of static HorizontalDirection.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HorizontalDirection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HorizontalDirection;
}

uint64_t protocol witness for Decodable.init(from:) in conformance HorizontalDirection()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HorizontalDirection()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalDirection.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t static VerticalDirection.Set.up.getter()
{
  return 1;
}

uint64_t static VerticalDirection.Set.down.getter()
{
  return 2;
}

uint64_t static VerticalDirection.Set.all.getter()
{
  return 3;
}

SwiftUI::VerticalDirection_optional __swiftcall VerticalDirection.init(rawValue:)(Swift::Int8 rawValue)
{
  if (rawValue == 1) {
    v1.Swift::UInt value = SwiftUI_VerticalDirection_down;
  }
  else {
    v1.Swift::UInt value = SwiftUI_VerticalDirection_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

void *static VerticalDirection.allCases.getter()
{
  return &outlined read-only object #0 of static VerticalDirection.allCases.getter;
}

unsigned char *protocol witness for RawRepresentable.init(rawValue:) in conformance VerticalDirection@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance VerticalDirection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance VerticalDirection;
}

uint64_t protocol witness for Decodable.init(from:) in conformance VerticalDirection()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VerticalDirection()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t VerticalDirection.codingProxy.getter(char a1)
{
  return a1 & 1;
}

BOOL static VerticalDirection.unwrap(codingProxy:)(char a1)
{
  return a1 == 1;
}

unint64_t lazy protocol witness table accessor for type HorizontalDirection.Set and conformance HorizontalDirection.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set;
  if (!lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection.Set and conformance HorizontalDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HorizontalDirection and conformance HorizontalDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection;
  if (!lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection;
  if (!lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HorizontalDirection and conformance HorizontalDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HorizontalDirection()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [HorizontalDirection] and conformance [A], &lazy cache variable for type metadata for [HorizontalDirection]);
}

unint64_t lazy protocol witness table accessor for type VerticalDirection.Set and conformance VerticalDirection.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set;
  if (!lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection.Set and conformance VerticalDirection.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalDirection and conformance VerticalDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection;
  if (!lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection;
  if (!lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDirection and conformance VerticalDirection);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in VerticalDirection()
{
  return lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](&lazy protocol witness table cache variable for type [VerticalDirection] and conformance [A], &lazy cache variable for type metadata for [VerticalDirection]);
}

uint64_t lazy protocol witness table accessor for type [HorizontalDirection] and conformance [A](unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [HorizontalDirection](255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for [HorizontalDirection](uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Array();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Decodable in HorizontalDirection()
{
  return MEMORY[0x263F8E4B8];
}

uint64_t associated type witness table accessor for CodableByProxy.CodingProxy : Encodable in HorizontalDirection()
{
  return MEMORY[0x263F8E4A0];
}

unsigned char *protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance VerticalDirection@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 1;
  return result;
}

ValueMetadata *type metadata accessor for HorizontalDirection()
{
  return &type metadata for HorizontalDirection;
}

ValueMetadata *type metadata accessor for HorizontalDirection.Set()
{
  return &type metadata for HorizontalDirection.Set;
}

unsigned char *storeEnumTagSinglePayload for HorizontalDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A5A5A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VerticalDirection()
{
  return &type metadata for VerticalDirection;
}

ValueMetadata *type metadata accessor for VerticalDirection.Set()
{
  return &type metadata for VerticalDirection.Set;
}

ValueMetadata *type metadata accessor for SmallTextEffect()
{
  return &type metadata for SmallTextEffect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DefaultAnimatorPhase and conformance Text.Effect.DefaultAnimatorPhase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState()
{
  unint64_t result = lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SmallTextEffect.LayoutState and conformance SmallTextEffect.LayoutState);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in SmallTextEffect()
{
  return &protocol witness table for Text.Effect.Timing;
}

double one-time initialization function for spring()
{
  double result = 9.2736185;
  static SmallTextEffect.spring = xmmword_2461BD430;
  qword_268F73500 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 6.61437828;
  static ShakeHorizontalTextEffect.spring = xmmword_2461D73B0;
  qword_268F73540 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 9.68245837;
  static SomersaultTextEffect.spring = xmmword_2461E19B0;
  qword_268F735B0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 7.48331477;
  static BigTextEffect.spring = xmmword_2461F5A10;
  qword_268F73600 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 6.61437828;
  static ShakeVerticalTextEffect.spring = xmmword_2461D73B0;
  qword_268F73690 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 7.19374728;
  static BloomTextEffect.spring = xmmword_246214500;
  qword_268F736B0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 9.68245837;
  static SquishTextEffect.spring = xmmword_2461E19B0;
  qword_268F736D0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 9.68245837;
  static BounceTextEffect.spring = xmmword_2461E19B0;
  qword_268F736F0 = 0x3FF0000000000000;
  return result;
}

{
  double result;

  double result = 9.68245837;
  static StretchTextEffect.spring = xmmword_2461E19B0;
  qword_268F73710 = 0x3FF0000000000000;
  return result;
}

id closure #1 in SmallTextEffect.configuration(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return Text.Effect.Content.fontSize(scale:)(a1, 0.7, a2, a3);
}

uint64_t closure #2 in SmallTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  uint64_t v10 = 0;
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 8, a2, &v46, 0.0);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v56 = *(_OWORD *)(a2 + 16);
  long long v57 = v11;
  long long v55 = *(_OWORD *)a2;
  uint64_t v58 = *(void *)(a2 + 48);
  if ((*((void *)&v11 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*((void *)&v57 + 1) == 1 && Text.Effect.BaseFragment.coversAllParagraphs.getter())
  {
    Swift::UInt64 v12 = *((void *)&v55 + 1);
    uint64_t v13 = *(void *)(*((void *)&v56 + 1) + 184);
    uint64_t v14 = *(void *)(*((void *)&v56 + 1) + 192);
    uint64_t v15 = *(void *)(*((void *)&v56 + 1) + 200);
    uint64_t v16 = *(void *)(*((void *)&v56 + 1) + 208);
    type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
    uint64_t v17 = swift_allocObject();
    char v18 = 1;
    *(unsigned char *)(v17 + 16) = 1;
    unint64_t v19 = v57;
    uint64_t v20 = swift_retain();
    specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v20, v12, v17, v19, v52);
    int v21 = v53;
    uint64_t v54 = v53;
    swift_retain();
    outlined release of Text.Effect.BaseFragment((uint64_t)v52);
    uint64_t v10 = v21[23];
    uint64_t v22 = v21[24];
    uint64_t v23 = v21[25];
    uint64_t v24 = v21[26];
    outlined release of ViewTransform((uint64_t)&v54);
  }
  else
  {
    char v18 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  uint64_t v59 = v6;
  uint64_t v60 = v7;
  uint64_t v61 = v8;
  uint64_t v62 = v9;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(void *)(v25 + 32) = v6;
  *(void *)(v25 + 40) = v7;
  *(void *)(v25 + 48) = v8;
  *(void *)(v25 + 56) = v9;
  *(unsigned char *)(v25 + 64) = v18;
  *(void *)(v25 + 72) = v13;
  *(void *)(v25 + 80) = v14;
  *(void *)(v25 + 88) = v15;
  *(void *)(v25 + 96) = v16;
  *(void *)(v25 + 104) = v10;
  *(void *)(v25 + 112) = v22;
  *(void *)(v25 + 120) = v23;
  *(void *)(v25 + 128) = v24;
  __n128 v26 = v46;
  *(_OWORD *)(v25 + 152) = v47;
  *(__n128 *)(v25 + 136) = v26;
  long long v27 = v48;
  long long v28 = v49;
  long long v29 = v50;
  *(void *)(v25 + 216) = v51;
  *(_OWORD *)(v25 + 200) = v29;
  *(_OWORD *)(v25 + 184) = v28;
  *(_OWORD *)(v25 + 168) = v27;
  uint64_t v30 = swift_allocObject();
  long long v31 = v49;
  *(_OWORD *)(v30 + 48) = v48;
  *(_OWORD *)(v30 + 64) = v31;
  *(_OWORD *)(v30 + 80) = v50;
  uint64_t v32 = v51;
  long long v33 = v47;
  *(__n128 *)(v30 + 16) = v46;
  *(_OWORD *)(v30 + 32) = v33;
  *(void *)(v30 + 96) = v32;
  *(void *)(v30 + 104) = partial apply for closure #2 in closure #2 in SmallTextEffect.configuration(_:);
  *(void *)(v30 + 112) = v25;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2461B9DC0;
  *(void *)(v34 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v35 = v34 + 32;
  *(void *)(v34 + 40) = v30;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v34;
  int64_t v37 = *(void *)(v34 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v46);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v46);
  outlined retain of LinearGradient((uint64_t)&v59);
  outlined retain of LinearGradient((uint64_t)&v60);
  outlined retain of LinearGradient((uint64_t)&v61);
  outlined retain of LinearGradient((uint64_t)&v62);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 1, MEMORY[0x263F8EE78]);
  char v39 = v38;
  if (!*(void *)(v34 + 16))
  {
    if (!v37) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v40 = v38[2];
  if ((v38[3] >> 1) - v40 < v37)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v41 = (unint64_t)&v38[2 * v40 + 4];
  if (v35 < v41 + 16 * v37 && v41 < v35 + 16 * v37) {
    goto LABEL_19;
  }
  swift_arrayInitWithCopy();
  if (!v37)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)&v46);
    return (uint64_t)v39;
  }
  uint64_t v42 = v39[2];
  BOOL v43 = __OFADD__(v42, v37);
  uint64_t v44 = v42 + v37;
  if (!v43)
  {
    v39[2] = v44;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #2 in SmallTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 32);
  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v13);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v14[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v13);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 1;
  uint64_t v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v14);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v14);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v10, 1.0);
  *a1 = v12;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v14);
}

unint64_t closure #2 in closure #2 in SmallTextEffect.configuration(_:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v15 = (void *)a1;
  if (*(void *)(*(void *)(a3 + 16) + 16) <= a1)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v27 = *(void *)(a3 + 32);
  if (*(void *)(v27 + 16) <= a1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v16 = a5;
  unint64_t v13 = a4;
  uint64_t v14 = a2;
  double v80 = a7;
  uint64_t v81 = *(void *)&a8;
  uint64_t v29 = v27 + 40 * a1;
  double v30 = *(double *)(v29 + 32);
  double v31 = *(double *)(v29 + 40);
  long long v83 = *(_OWORD *)(v29 + 48);
  unint64_t v32 = *(void *)(v29 + 64);
  double v33 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  double v38 = 0.0;
  if (v33 < 0.0)
  {
    if (v30 >= 0.0) {
      goto LABEL_11;
    }
    double v38 = 1.0;
    double v33 = 0.0;
    if (v30 + v31 <= 0.0) {
      goto LABEL_11;
    }
LABEL_10:
    double v38 = (v33 - v30) / v31;
    goto LABEL_11;
  }
  if (v33 > v30)
  {
    double v38 = 1.0;
    if (v30 + v31 > v33) {
      goto LABEL_10;
    }
  }
LABEL_11:
  double v115 = specialized SmallTextEffect.target(at:)(v38);
  long long v116 = 0u;
  long long v117 = 0u;
  uint64_t v118 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v119 = _Q0;
  uint64_t v120 = 0x3FF0000000000000;
  char v121 = 0;
  long long v84 = v83;
  unint64_t v85 = v32;
  Text.Effect.TransformContext.update(target:for:spring:)((uint64_t)&v115, (uint64_t)v15, (double *)&v84, (uint64_t)&v104);
  double v22 = v104;
  double v20 = 0.0;
  if (v104 < 0.0) {
    double v44 = 0.0;
  }
  else {
    double v44 = v104;
  }
  if (v44 > 1.0) {
    double v44 = 1.0;
  }
  double v82 = v44;
  if (v13) {
    double v20 = Text.Effect.Metrics.offsetForCenterAlignment(other:t:)(a10, a11, a12, a13, v44, a6, v80);
  }
  uint64_t v19 = v105;
  uint64_t v21 = v107;
  uint64_t v23 = v108;
  uint64_t v24 = v109;
  uint64_t v25 = v110;
  uint64_t v26 = v111;
  *(double *)long long v113 = v22;
  v113[1] = v105;
  *(double *)&v113[2] = v20;
  v113[3] = v106;
  v113[4] = v107;
  v113[5] = v108;
  v113[6] = v109;
  v113[7] = v110;
  v113[8] = v111;
  char v114 = v112;
  unint64_t v17 = *(void *)(v14 + 272);
  if (!v17) {
    goto LABEL_23;
  }
  char v75 = v112;
  uint64_t v79 = v106;
  id v76 = v15;
  uint64_t v45 = *(void *)(v14 + 288);
  uint64_t v46 = *(void *)(v14 + 296);
  uint64_t v47 = *(void *)(v14 + 344);
  unint64_t v48 = *(void *)(v14 + 352);
  uint64_t v15 = *(void **)(v14 + 264);
  uint64_t v72 = *(void *)(v14 + 312);
  uint64_t v73 = *(void *)(v14 + 336);
  uint64_t v71 = *(void *)(v14 + 280);
  uint64_t v77 = *(void *)(v14 + 304);
  id v78 = v16;
  double v80 = *(double *)(v14 + 328);
  uint64_t v81 = *(void *)(v14 + 320);
  outlined copy of Text.Effect.TransformContext.DrawingMode(v17, v71, v45, v46, v77, v72, v81, *(uint64_t *)&v80, v73, v47, v48);
  unint64_t v18 = v17;
  swift_retain();
  unint64_t v17 = v45;
  swift_retain();
  uint64_t v16 = (void *)v46;
  swift_retain();
  uint64_t v70 = v47;
  swift_bridgeObjectRetain();
  unint64_t v13 = v48;
  outlined copy of Text.Effect.PathInterpolator.MapKeys(v48);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_40;
  }
  while (1)
  {
    unint64_t v50 = v15[2];
    unint64_t v49 = v15[3];
    uint64_t v51 = v79;
    if (v50 >= v49 >> 1)
    {
      char v67 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v15);
      uint64_t v51 = v79;
      int64_t v74 = v67;
    }
    else
    {
      int64_t v74 = v15;
    }
    unint64_t v68 = v18;
    uint64_t v69 = (uint64_t)v16;
    *(void *)&long long v84 = v18;
    *((void *)&v84 + 1) = v71;
    unint64_t v85 = v17;
    uint64_t v86 = v16;
    unint64_t v18 = v72;
    uint64_t v87 = v77;
    uint64_t v88 = v72;
    uint64_t v89 = v81;
    double v90 = v80;
    uint64_t v91 = v73;
    uint64_t v92 = v70;
    unint64_t v52 = v13;
    unint64_t v93 = v13;
    double v94 = v22;
    uint64_t v95 = v19;
    double v96 = v20;
    uint64_t v97 = v51;
    uint64_t v98 = v21;
    uint64_t v99 = v23;
    uint64_t v100 = v24;
    uint64_t v101 = v25;
    uint64_t v102 = v26;
    char v103 = v75;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v84);
    unint64_t v13 = (unint64_t)v74;
    v74[2] = v50 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v84, (uint64_t)&v74[27 * v50 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v68, v71, v17, v69, v77, v72, v81, *(uint64_t *)&v80, v73, v70, v52);
    *(void *)(v14 + 264) = v74;
    uint64_t v16 = v78;
    uint64_t v15 = v76;
LABEL_23:
    unint64_t result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v113, 0, 0, 0, 1);
    if (!__OFSUB__(*(void *)v14, v15)) {
      break;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
  }
  if (*(void **)v14 == v15)
  {
    uint64_t v54 = v16[8];
    _VF = __OFSUB__(v15, v54);
    unint64_t v55 = (unint64_t)v15 - v54;
    if (_VF)
    {
      __break(1u);
    }
    else if ((v55 & 0x8000000000000000) == 0)
    {
      uint64_t v56 = v16[9];
      if (v55 < *(void *)(v56 + 16))
      {
        uint64_t v57 = v56 + 56 * v55;
        uint64_t v60 = *(void *)(v57 + 64);
        uint64_t v58 = (uint64_t *)(v57 + 64);
        uint64_t v59 = v60;
        unint64_t v61 = v16[10];
        unint64_t result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v61, v82);
        if ((result & 0x8000000000000000) == 0)
        {
          unint64_t v63 = *(void *)(v59 + 16);
          if (result < v63)
          {
            if (result + 1 < v63)
            {
              *(double *)(v14 + 136) = *(double *)(v59 + 32 + 8 * result)
                                     + v62
                                     * (*(double *)(v59 + 32 + 8 * (result + 1)) - *(double *)(v59 + 32 + 8 * result));
              uint64_t v64 = *v58;
              unint64_t result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v61, v82);
              if ((result & 0x8000000000000000) == 0)
              {
                unint64_t v66 = *(void *)(v64 + 16);
                if (result < v66)
                {
                  if (result + 1 < v66)
                  {
                    *(double *)(v14 + 136) = *(double *)(v64 + 32 + 8 * result)
                                           + v65
                                           * (*(double *)(v64 + 32 + 8 * (result + 1))
                                            - *(double *)(v64 + 32 + 8 * result));
                    return result;
                  }
LABEL_50:
                  __break(1u);
                  return result;
                }
LABEL_49:
                __break(1u);
                goto LABEL_50;
              }
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    __break(1u);
    goto LABEL_44;
  }
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance SmallTextEffect()
{
  return 0x6C6C616D73;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance SmallTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance SmallTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance SmallTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v15 - v9;
  char v35 = 1;
  char v34 = 1;
  char v33 = 0;
  long long v17 = xmmword_2461BD440;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 1;
  uint64_t v29 = MEMORY[0x263F8EE78];
  char v30 = 0;
  long long v31 = xmmword_2461BD450;
  char v32 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static SmallTextEffect.spring;
  double v12 = *(double *)&qword_268F73500;
  outlined init with copy of Text.Effect.DrawableContent<SmallTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SmallTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
  unint64_t result = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

double specialized SmallTextEffect.target(at:)(double a1)
{
  double v1 = 0.0;
  if (a1 >= 0.0)
  {
    if (a1 >= 0.1)
    {
      double v1 = 1.0;
      if (a1 >= 0.95)
      {
        double v1 = 0.0;
        if (a1 < 1.0)
        {
          long double v4 = (a1 + -0.95) / 0.05;
          long double v5 = v4 * 6.0 * ((1.0 - v4) * (1.0 - v4)) + pow(1.0 - v4, 3.0) - (1.0 - v4) * (v4 * v4 * 3.0);
          return v5 + pow(v4, 3.0) * 0.0;
        }
      }
    }
    else
    {
      long double v2 = a1 / 0.1;
      long double v3 = (1.0 - a1 / 0.1) * (v2 * v2 * 6.0)
         + pow(1.0 - a1 / 0.1, 3.0) * 0.0
         - v2 * 3.0 * ((1.0 - a1 / 0.1) * (1.0 - a1 / 0.1));
      return pow(v2, 3.0) + v3;
    }
  }
  return v1;
}

void *specialized SmallTextEffect.configuration(_:)()
{
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  long double v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in SmallTextEffect.configuration(_:);
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #2 in SmallTextEffect.configuration(_:);
  *(void *)(v4 + 24) = 0;
  long double v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    long double v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  v5[2] = v7 + 1;
  uint64_t v8 = &v5[2 * v7];
  v8[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v8[5] = v4;
  return v0;
}

uint64_t sub_245A5B74C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v6 = *(uint64_t (**)(_OWORD *, _OWORD *, _OWORD *))(v4 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v7;
  _OWORD v12[2] = *(_OWORD *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 48);
  long long v8 = *(_OWORD *)(a3 + 16);
  v14[0] = *(_OWORD *)a3;
  v14[1] = v8;
  uint64_t v15 = *(void *)(a3 + 32);
  long long v9 = a1[1];
  v11[0] = *a1;
  v11[1] = v9;
  _OWORD v11[2] = a1[2];
  uint64_t result = v6(v11, v12, v14);
  *a4 = result;
  return result;
}

uint64_t sub_245A5B800()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 216) >= 3uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in closure #2 in SmallTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  return closure #2 in closure #2 in SmallTextEffect.configuration(_:)(a1, a2, v2 + 16, *(unsigned __int8 *)(v2 + 64), (void *)(v2 + 136), *(double *)(v2 + 72), *(double *)(v2 + 80), *(double *)(v2 + 88), *(double *)(v2 + 96), *(double *)(v2 + 104), *(double *)(v2 + 112), *(double *)(v2 + 120), *(double *)(v2 + 128));
}

uint64_t sub_245A5B8A0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

double partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:)(uint64_t a1, __n128 *a2)
{
  *(void *)&double result = closure #1 in Text.Effect.DrawableFragment.transform(with:transform:)(a1, a2, v2 + 16, (void (*)(uint64_t, __n128 *))*(void *)(v2 + 104)).n128_u64[0];
  return result;
}

uint64_t outlined retain of Text.Effect.PathInterpolator(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text.Effect.PathInterpolator.MapKeys(v2);
  return a1;
}

unint64_t outlined copy of Text.Effect.PathInterpolator.MapKeys(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of Text.Effect.PathInterpolator(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.Effect.PathInterpolator.MapKeys(v2);
  return a1;
}

unint64_t outlined consume of Text.Effect.PathInterpolator.MapKeys(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of Text.Effect.BaseFragment(uint64_t a1)
{
  return a1;
}

unint64_t outlined copy of Text.Effect.TransformContext.DrawingMode(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return outlined copy of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 208);
  uint64_t v2 = *(void *)(result + 176) & 0x1FFFFFFFFLL;
  *(void *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(void *)(result + 176) = v2;
  *(unsigned char *)(result + 208) = v1 & 1 | 0x80;
  return result;
}

uint64_t outlined init with take of Text.Effect.DisplayInfo.DrawOperation(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t outlined consume of Text.Effect.TransformContext.DrawingMode(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return outlined consume of Text.Effect.PathInterpolator.MapKeys(a11);
  }
  return result;
}

uint64_t outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect();
    unint64_t v7 = a3(a1, &type metadata for SmallTextEffect, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<SmallTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.ConcreteLayoutState<SmallTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for SmallTextEffect.LayoutState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A5BD98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallTextEffect.LayoutState()
{
  return &type metadata for SmallTextEffect.LayoutState;
}

uint64_t GestureGraph.eventBindingManager.getter()
{
  return swift_retain();
}

uint64_t GestureGraph.description.getter()
{
  Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    v9[0] = (*(uint64_t (**)(void))(*(void *)(*(void *)(v0 + 184) + 8) + 32))(*Strong);
    type metadata accessor for Any.Type();
    uint64_t v2 = String.init<A>(describing:)();
    unsigned int v4 = v3;
    swift_release();
  }
  else
  {
    unsigned int v4 = (void *)0xE300000000000000;
    uint64_t v2 = 7104878;
  }
  strcpy((char *)v9, "GestureGraph<");
  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8254;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9[0];
}

Swift::Void __swiftcall GestureGraph.instantiateOutputs()()
{
  void (*v19)(void *__return_ptr, _OWORD *);
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  ValueMetadata **v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  ValueMetadata **v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  ValueMetadata **v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  ValueMetadata **v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  _OWORD v41[6];
  _OWORD v42[2];
  void v43[3];
  long long v44;
  unsigned char v45[64];
  long long v46;
  long long v47;
  long long v48;
  unsigned char v49[64];
  long long v50;
  unsigned char v51[28];

  char v1 = v0;
  Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    int v3 = Strong;
    unsigned int v4 = &v44;
    int32x2_t v5 = v0[23];
    uint64_t v6 = *Strong;
    (*(void (**)(long long *__return_ptr, void, int32x2_t))(*(void *)&v5 + 16))(&v44, *Strong, v5);
    uint64_t v7 = v44;
    uint64_t v8 = *(void *)v45;
    int v9 = v46;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)&v5 + 8) + 8))(v6);
    LODWORD(v6) = v0[27].i32[1];
    swift_beginAccess();
    __int32 v11 = v0[5].i32[1];
    __int32 v12 = v0[32].i32[1];
    *(void *)&unint64_t v48 = v7;
    *(void *)unint64_t v49 = v8;
    *(_OWORD *)&v49[8] = *(_OWORD *)&v45[8];
    *(_OWORD *)&v49[24] = *(_OWORD *)&v45[24];
    *(_OWORD *)&v49[40] = *(_OWORD *)&v45[40];
    *(void *)&v49[56] = *(void *)&v45[56];
    LODWORD(v50) = v9;
    DWORD2(v48) = v11;
    *(int32x2_t *)&v51[16] = vrev64_s32(v0[28]);
    *((void *)&v50 + 1) = v10;
    *(void *)uint64_t v51 = MEMORY[0x263F8EE78];
    *(_DWORD *)&v51[8] = v12;
    *(_DWORD *)&v51[12] = v6;
    *(_DWORD *)&v51[24] = 20;
    if (one-time initialization token for _eventDebugTriggers != -1) {
      goto LABEL_42;
    }
    while (1)
    {
      swift_beginAccess();
      if ((_eventDebugTriggers.rawValue & 0x20) != 0) {
        *(_DWORD *)&v51[24] = 28;
      }
      PreferenceKeys.add(_:)((uint64_t)&type metadata for GestureLabelKey, (uint64_t)&protocol witness table for GestureLabelKey);
      PreferenceKeys.add(_:)((uint64_t)&type metadata for IsCancellableGestureKey, (uint64_t)&protocol witness table for IsCancellableGestureKey);
      PreferenceKeys.add(_:)((uint64_t)&type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey);
      PreferenceKeys.add(_:)((uint64_t)&type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key);
      id v13 = *(id *)&v1[4];
      AGGraphClearUpdate();
      id v14 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      long long v16 = v50;
      *(_OWORD *)&v45[48] = *(_OWORD *)&v49[48];
      long long v15 = *(_OWORD *)&v49[48];
      uint64_t v46 = v50;
      uint64_t v47 = *(_OWORD *)v51;
      long long v17 = *(_OWORD *)v51;
      long long v18 = *(_OWORD *)&v51[12];
      *(long long *)((char *)v4 + 108) = *(_OWORD *)&v51[12];
      double v44 = v48;
      *(_OWORD *)uint64_t v45 = *(_OWORD *)v49;
      *(_OWORD *)&v45[16] = *(_OWORD *)&v49[16];
      *(_OWORD *)&v45[32] = *(_OWORD *)&v49[32];
      v41[4] = v15;
      v41[5] = v16;
      v42[0] = v17;
      *(_OWORD *)((char *)v42 + 12) = v18;
      v41[0] = v48;
      v41[1] = *(_OWORD *)v49;
      v41[2] = *(_OWORD *)&v49[16];
      v41[3] = *(_OWORD *)&v49[32];
      uint64_t v19 = *(void (**)(void *__return_ptr, _OWORD *))(*v3 + 112);
      unsigned int v4 = (long long *)(*v3 + 112);
      outlined retain of _GestureInputs((uint64_t)&v44);
      v19(v43, v41);
      outlined release of _GestureInputs((uint64_t)&v44);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      uint64_t v20 = v43[1];
      char v21 = *MEMORY[0x263F288F8];
      v1[29] = (int32x2_t)v43[0];
      uint64_t v22 = *(void *)(v20 + 16);
      if (!v22) {
        break;
      }
      uint64_t v23 = (ValueMetadata **)(v20 + 48);
      uint64_t v24 = *(void *)(v20 + 16);
      while (*(v23 - 2) != &type metadata for GestureCategory.Key)
      {
        v23 += 3;
        if (!--v24)
        {
          char v25 = v21;
          goto LABEL_12;
        }
      }
      char v25 = *(_DWORD *)v23;
LABEL_12:
      uint64_t v26 = 0;
      v1[30].i32[0] = v25;
      uint64_t v27 = (ValueMetadata **)(v20 + 48);
      while (1)
      {
        char v28 = v26 + 1;
        if (__OFADD__(v26, 1)) {
          break;
        }
        if (*(v27 - 2) == &type metadata for GestureLabelKey)
        {
          uint64_t v29 = *(_DWORD *)v27;
          goto LABEL_18;
        }
        ++v26;
        v27 += 3;
        if (v28 == v22)
        {
          uint64_t v29 = v21;
LABEL_18:
          char v30 = 0;
          v1[30].i32[1] = v29;
          long long v31 = (ValueMetadata **)(v20 + 48);
          while (1)
          {
            char v32 = v30 + 1;
            if (__OFADD__(v30, 1)) {
              goto LABEL_39;
            }
            if (*(v31 - 2) == &type metadata for IsCancellableGestureKey) {
              break;
            }
            ++v30;
            v31 += 3;
            if (v32 == v22)
            {
              char v33 = v21;
LABEL_24:
              char v34 = 0;
              v1[31].i32[0] = v33;
              char v35 = (ValueMetadata **)(v20 + 48);
              while (1)
              {
                uint64_t v36 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  goto LABEL_40;
                }
                if (*(v35 - 2) == &type metadata for RequiredTapCountKey) {
                  break;
                }
                ++v34;
                v35 += 3;
                if (v36 == v22)
                {
                  int64_t v37 = v21;
                  goto LABEL_30;
                }
              }
              int64_t v37 = *(_DWORD *)v35;
LABEL_30:
              double v38 = 0;
              v1[31].i32[1] = v37;
              char v39 = (unsigned int *)(v20 + 48);
              while (1)
              {
                uint64_t v40 = v38 + 1;
                if (__OFADD__(v38, 1)) {
                  goto LABEL_41;
                }
                if (*((ValueMetadata **)v39 - 2) == &type metadata for GestureDependency.Key)
                {
                  char v21 = *v39;
                  goto LABEL_36;
                }
                ++v38;
                v39 += 6;
                if (v40 == v22) {
                  goto LABEL_36;
                }
              }
            }
          }
          char v33 = *(_DWORD *)v31;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      swift_once();
    }
    *(int32x4_t *)v1[30].i8 = vdupq_n_s32(v21);
LABEL_36:
    swift_bridgeObjectRelease();
    v1[32].i32[0] = v21;
    swift_release();
    outlined release of _GestureInputs((uint64_t)&v44);
  }
}

Swift::Void __swiftcall GestureGraph.uninstantiateOutputs()()
{
  *(_DWORD *)(v0 + 232) = *MEMORY[0x263F288F8];
  type metadata accessor for [EventID : EventType]();
  AGGraphSetValue();
  AGGraphSetValue();
  AGGraphSetValue();
  AGGraphSetValue();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 120))(Strong);
    swift_release();
  }
}

uint64_t GestureGraph.responderNode.getter()
{
  return swift_weakLoadStrong();
}

Swift::Void __swiftcall GestureGraph.timeDidChange()()
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  *(void *)(v0 + 264) = static Time.infinity;
}

uint64_t GestureGraph.focusedResponder.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = Strong;
  uint64_t v2 = Strong + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x24C527E00](v2);
  uint64_t v4 = *(void *)(v1 + 24);
  swift_release();
  if (!v3) {
    return 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v11, v6, v6, ObjectType, v4);
  swift_unknownObjectRelease();
  if (!v11[0]) {
    return 0;
  }
  uint64_t v7 = v11[1];
  uint64_t v8 = swift_getObjectType();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v8, v7);
  swift_unknownObjectRelease();
  return v9;
}

double GestureGraph.nextGestureUpdateTime.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 264);
  *a1 = result;
  return result;
}

Swift::Void __swiftcall GestureGraph.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
}

void *GestureGraph.sendEvents(_:rootNode:at:)@<X0>(uint64_t a1@<X0>, double *a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v4 = v3;
  double v6 = *a2;
  double result = (void *)swift_weakLoadStrong();
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v29 = *(void *)(*(void *)(v3 + 184) + 8);
  uint64_t v30 = *result;
  char v28 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 40);
  if ((((uint64_t (*)(void))v28)(*result) & 1) == 0)
  {
    double result = (void *)swift_release();
LABEL_20:
    char v19 = 0;
    char v20 = 3;
    goto LABEL_21;
  }
  char v21 = a3;
  GraphHost.instantiateIfNeeded()();
  *(unsigned char *)(v3 + 152) = 1;
  swift_beginAccess();
  AGGraphGetValue();
  AGGraphSetValue();
  if (*(double *)AGGraphGetValue() != v6)
  {
    AGGraphSetValue();
    AGGraphGetValue();
    AGGraphSetValue();
    if (one-time initialization token for infinity != -1) {
LABEL_23:
    }
      swift_once();
    *(void *)(v4 + 264) = static Time.infinity;
  }
  type metadata accessor for [EventID : EventType]();
  AGGraphSetValue();
  uint64_t v8 = (uint64_t *)(v4 + 160);
  id v9 = *(id *)(v4 + 24);
  swift_beginAccess();
  uint64_t v10 = v4;
  uint64_t v4 = 0;
  char v25 = 0;
  int v23 = *MEMORY[0x263F288F8];
  uint64_t v27 = v10;
  uint64_t v11 = *(void *)(v10 + 160);
  char v24 = 3;
  uint64_t v22 = MEMORY[0x263F8EE60] + 8;
  do
  {
    *uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = v11 + 40;
      do
      {
        id v14 = *(void (**)(uint64_t))(v13 - 8);
        uint64_t v15 = swift_retain();
        v14(v15);
        swift_release();
        v13 += 16;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    AGSubgraphUpdate();
    uint64_t v16 = *(void *)(*v8 + 16);
    if (v28(v30, v29))
    {
      if (v16)
      {
        if (*(void *)(a1 + 16)) {
          AGGraphSetValue();
        }
      }
      else
      {
        if (*(_DWORD *)(v27 + 232) == v23)
        {
          __break(1u);
          goto LABEL_23;
        }
        type metadata accessor for GesturePhase<()>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v22, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
        uint64_t Value = (char *)AGGraphGetValue();
        char v24 = Value[1];
        char v25 = *Value;
      }
    }
    if (++v4 == 8) {
      break;
    }
    uint64_t v11 = *v8;
  }
  while (*(void *)(*v8 + 16));
  *(unsigned char *)(v27 + 152) = 0;

  uint64_t v18 = swift_retain();
  specialized printGestures(data:host:)(v18, v27);
  swift_release();
  double result = (void *)swift_release();
  a3 = v21;
  char v20 = v24;
  char v19 = v25;
LABEL_21:
  *a3 = v19;
  a3[1] = v20;
  return result;
}

Swift::Void __swiftcall GestureGraph.resetEvents()()
{
}

uint64_t GestureGraph.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x24C527E00](v2 + 192);
  if (result)
  {
    uint64_t v6 = *(void *)(v2 + 200);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

SwiftUI::GestureCategory_optional __swiftcall GestureGraph.gestureCategory()()
{
  uint64_t v2 = v0;
  specialized static Update.begin()();
  GraphHost.instantiateIfNeeded()();
  int v3 = *(_DWORD *)(v1 + 240);
  int v4 = *MEMORY[0x263F288F8];
  if (v3 == *MEMORY[0x263F288F8]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)AGGraphGetValue();
  }
  *(void *)uint64_t v2 = v5;
  *(unsigned char *)(v2 + 8) = v3 == v4;

  Swift::Int v6 = static Update.end()();
  result.value.rawuint64_t Value = v6;
  result.is_nil = v7;
  return result;
}

void GestureGraph.__allocating_init(data:)()
{
}

void GestureGraph.init(data:)()
{
}

uint64_t GestureGraph.__ivar_destroyer()
{
  outlined destroy of weak AnyGestureResponder?(v0 + 176);
  outlined destroy of weak GestureGraphDelegate?(v0 + 192);

  return swift_release();
}

uint64_t GestureGraph.deinit()
{
  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  int64_t v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  uint64_t result = swift_release();
  uint64_t v3 = *((void *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    int v4 = (void *)v0[2];
    uint64_t v5 = (void *)v0[3];
    Swift::Int v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of weak AnyGestureResponder?((uint64_t)(v0 + 22));
    outlined destroy of weak GestureGraphDelegate?((uint64_t)(v0 + 24));
    swift_release();
    return (uint64_t)v0;
  }
  return result;
}

uint64_t GestureGraph.__deallocating_deinit()
{
  GraphHost.invalidate()();
  if (one-time initialization token for blockedGraphHosts != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  int64_t v1 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t)&blockedGraphHosts, (uint64_t)v0);
  uint64_t result = swift_release();
  uint64_t v3 = *((void *)blockedGraphHosts._rawValue + 2);
  if (v3 < v1)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v1, v3);
    swift_endAccess();
    int v4 = (void *)v0[2];
    uint64_t v5 = (void *)v0[3];
    Swift::Int v6 = (void *)v0[4];
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of weak AnyGestureResponder?((uint64_t)(v0 + 22));
    outlined destroy of weak GestureGraphDelegate?((uint64_t)(v0 + 24));
    swift_release();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t protocol witness for EventGraphHost.eventBindingManager.getter in conformance GestureGraph()
{
  return swift_retain();
}

uint64_t protocol witness for EventGraphHost.responderNode.getter in conformance GestureGraph()
{
  return swift_weakLoadStrong();
}

double protocol witness for EventGraphHost.nextGestureUpdateTime.getter in conformance GestureGraph@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 264);
  *a1 = result;
  return result;
}

uint64_t protocol witness for EventGraphHost.setInheritedPhase(_:) in conformance GestureGraph()
{
  return AGGraphSetValue();
}

void protocol witness for EventGraphHost.resetEvents() in conformance GestureGraph()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GestureGraph()
{
  return GestureGraph.description.getter();
}

uint64_t outlined retain of _GestureInputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _GestureInputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t specialized GestureGraph.init(rootResponder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(void *)(a2 + 184) = 0;
  swift_weakInit();
  *(void *)(a2 + 200) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for EventBindingManager();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v6 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v6 + 48) = MEMORY[0x263F8EE80];
  *(void *)(v6 + 56) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(a2 + 208) = v6;
  int v7 = *MEMORY[0x263F288F8];
  *(int32x4_t *)(a2 + 232) = vdupq_n_s32(*MEMORY[0x263F288F8]);
  *(_DWORD *)(a2 + 248) = v7;
  *(_DWORD *)(a2 + 252) = v7;
  *(_DWORD *)(a2 + 256) = v7;
  uint64_t v8 = one-time initialization token for infinity;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  *(void *)(a2 + 264) = static Time.infinity;
  if (specialized static GestureContainerFeature.isEnabled.getter())
  {
    *(void *)(a2 + 184) = a4;
    swift_weakAssign();
    GraphHost.Data.init()((uint64_t)&v34);
    id v9 = v35;
    uint64_t v27 = (void *)v34;
    char v28 = v36;
    char v29 = v38;
    char v30 = v37;
    uint64_t v10 = v42;
    int v31 = v43;
    int v32 = v41;
    uint64_t v11 = v44;
    uint64_t v12 = v47;
    long long v26 = v39;
    uint64_t v13 = v40;
    uint64_t v14 = v45;
    uint64_t v15 = v46;
    id v33 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unint64_t v34 = 0;
    uint64_t v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
    type metadata accessor for GesturePhase<()>(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
    *(_DWORD *)(a2 + 216) = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v17 = MEMORY[0x263F8EE78];
    unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    type metadata accessor for [EventID : EventType]();
    type metadata accessor for External<[EventID : EventType]>();
    lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
    int v18 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    *(_DWORD *)(a2 + 220) = v18;
    unint64_t v34 = 1;
    type metadata accessor for GesturePhase<()>(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, v16);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase);
    *(_DWORD *)(a2 + 224) = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v34) = 0;
    uint64_t v19 = MEMORY[0x263F8E8F8];
    type metadata accessor for GesturePhase<()>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], v16);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v19);
    *(_DWORD *)(a2 + 228) = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v34 = v17;
    type metadata accessor for GesturePhase<()>(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v16);
    lazy protocol witness table accessor for type External<Time> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
    *(_DWORD *)(a2 + 260) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    unint64_t v34 = (unint64_t)v27;
    char v35 = v9;
    uint64_t v36 = v28;
    char v37 = v30;
    char v38 = v29;
    long long v39 = v26;
    uint64_t v40 = v13;
    int v41 = v32;
    uint64_t v42 = v10;
    int v43 = v31;
    uint64_t v44 = v11;
    uint64_t v45 = v14;
    uint64_t v46 = v15;
    uint64_t v47 = v12;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v20 = v27;
    id v21 = v9;
    id v22 = v28;
    uint64_t v23 = GraphHost.init(data:)((uint64_t)&v34);
    uint64_t v24 = *(void *)(v23 + 208);
    swift_beginAccess();
    *(void *)(v24 + 24) = &protocol witness table for GestureGraph;
    swift_unknownObjectWeakAssign();
    swift_retain();
    AGSubgraphSetCurrent();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    return v23;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return 0;
  }
  unint64_t v7 = 0;
  while (v3[v7 + 4] != a2)
  {
    if (v4 == ++v7) {
      return *(void *)(*(void *)a1 + 16);
    }
  }
  if (__OFADD__(v7, 1))
  {
LABEL_24:
    __break(1u);
  }
  else
  {
    if (v7 + 1 == v4) {
      return v7;
    }
    unint64_t v2 = v7 + 5;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_10;
    }
  }
  id v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
LABEL_10:
  uint64_t v8 = v3 + 4;
  do
  {
    unint64_t v10 = v3[2];
    if (v2 - 4 >= v10)
    {
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v11 = v3[v2];
    if (v11 != a2)
    {
      if (v2 - 4 != v7)
      {
        if (v7 >= v10) {
          goto LABEL_23;
        }
        uint64_t v12 = v8[v7];
        v8[v7] = v11;
        v3[v2] = v12;
      }
      if (__OFADD__(v7++, 1)) {
        goto LABEL_22;
      }
      unint64_t v10 = v3[2];
    }
    unint64_t v9 = v2 - 3;
    ++v2;
  }
  while (v9 != v10);
  *(void *)a1 = v3;
  return v7;
}

uint64_t outlined destroy of weak AnyGestureResponder?(uint64_t a1)
{
  return a1;
}

uint64_t specialized static GestureGraph.current.getter()
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v0 = (id)AGSubgraphGetCurrent();
    if (!v0)
    {
LABEL_10:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v1 = v0;
    id v2 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v2 = (id)AGGraphGetAttributeGraph();
  }
  if (!AGGraphGetContext())
  {
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();

  type metadata accessor for GestureGraph();

  return swift_dynamicCastClassUnconditional();
}

uint64_t dispatch thunk of GestureGraphDelegate.enqueueAction(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for GestureGraph()
{
  return self;
}

uint64_t method lookup function for GestureGraph(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GestureGraph);
}

uint64_t _GraphInputs.scrollPositionAnchor(kind:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (!v4)
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t v5 = &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue;
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v5 = (int *)(v4 + 72);
    goto LABEL_11;
  }
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    goto LABEL_7;
  }
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v5 = &static _GraphInputs.ScrollPositionAnchorKey.defaultValue;
LABEL_11:
  uint64_t v6 = *v5;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v6;
}

uint64_t ScrollPositionBindingModifier.binding.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Binding<ScrollPosition>(v1, a1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
}

uint64_t ScrollPositionBindingModifier.binding.setter(uint64_t a1)
{
  return outlined assign with take of Binding<ScrollPosition>(a1, v1, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
}

uint64_t (*ScrollPositionBindingModifier.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPositionBindingModifier.anchor.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ScrollPositionBindingModifier.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 96) = result;
  *(void *)(v3 + 104) = a2;
  *(unsigned char *)(v3 + 112) = a3 & 1;
  return result;
}

uint64_t (*ScrollPositionBindingModifier.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ScrollPositionBindingModifier.init(binding:anchor:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a5 + 48) = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 80) = v6;
  __n128 result = *(__n128 *)a1;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v8;
  *(void *)(a5 + 96) = a2;
  *(void *)(a5 + 104) = a3;
  *(unsigned char *)(a5 + 112) = a4 & 1;
  return result;
}

uint64_t _GraphInputs.setScrollPositionAnchor(_:kind:)(int a1, char *a2)
{
  char v4 = *a2;
  swift_retain();
  if (v4) {
    specialized closure #1 in PropertyList.subscript.setter(v2, a1, (uint64_t)v7);
  }
  else {
    specialized closure #1 in PropertyList.subscript.setter(v2, a1, (uint64_t)v6);
  }
  return swift_release();
}

uint64_t _GraphInputs.setScrollPosition(storage:kind:)(unsigned int *a1, char *a2)
{
  unint64_t v3 = *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  char v4 = *a2;
  swift_retain();
  if (v4) {
    specialized closure #1 in PropertyList.subscript.setter(v2, v3, (uint64_t)v7);
  }
  else {
    specialized closure #1 in PropertyList.subscript.setter(v2, v3, (uint64_t)v6);
  }
  return swift_release();
}

void protocol witness for static Rule.initialValue.getter in conformance ScrollPositionBindingModifier.AdjustedAnchor(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollPositionBindingModifier.AdjustedAnchor@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ScrollPositionBindingModifier.AdjustedAnchor.value.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollPositionBindingModifier.MakeRequest@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_24619B520;
  return result;
}

uint64_t ScrollValueModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ScrollPosition(v1, a1);
}

uint64_t ScrollValueModifier.value.setter(uint64_t a1)
{
  return outlined assign with take of ScrollPosition(a1, v1);
}

uint64_t (*ScrollValueModifier.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ScrollValueModifier.init(value:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

BOOL static ScrollStateInputKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ScrollStateInputKind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollStateInputKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _GraphInputs.scrollPositionValue()()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(v2 + 76);
    unint64_t v4 = *(unsigned int *)(v2 + 72) | ((unint64_t)*(unsigned __int8 *)(v2 + 76) << 32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    if (v3 <= 0xFEuLL && (v4 & 0x100000000) != 0) {
      return v4;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
  }
  return *MEMORY[0x263F288F8];
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionKey(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = -1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for defaultValue, &static _GraphInputs.ScrollPositionAnchorKey.defaultValue, a1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ContentScrollPositionAnchorKey@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollPositionAnchorKey(&one-time initialization token for defaultValue, &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue, a1);
}

uint64_t specialized static ScrollValueModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 0xFF00000000uLL, (uint64_t)v8);
  swift_release();
  int v4 = *MEMORY[0x263F288F8];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v4, (uint64_t)v7);
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, OffsetAttribute2 | 0x100000000, (uint64_t)&v6);
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ScrollStateInputKind and conformance ScrollStateInputKind()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind;
  if (!lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateInputKind and conformance ScrollStateInputKind);
  }
  return result;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTag for ScrollPositionStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4);
}

uint64_t destructiveInjectEnumTag for ScrollPositionStorage(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4) = a2 & 1;
  return result;
}

uint64_t assignWithTake for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
  }
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

ValueMetadata *type metadata accessor for ScrollValueModifier()
{
  return &type metadata for ScrollValueModifier;
}

unsigned char *storeEnumTagSinglePayload for ScrollStateInputKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A5E0D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollStateInputKind()
{
  return &type metadata for ScrollStateInputKind;
}

uint64_t sub_245A5E10C()
{
  swift_release();
  swift_release();
  if (*(unsigned char *)(v0 + 89))
  {
    if (*(unsigned char *)(v0 + 201)) {
      goto LABEL_3;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
    if (*(unsigned char *)(v0 + 201)) {
      goto LABEL_3;
    }
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
LABEL_3:
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for ScrollPositionBindingModifier.MakeRequest(uint64_t result)
{
  if (*(void *)(result + 80))
  {
    if (!*(unsigned char *)(result + 73)) {
      return __swift_destroy_boxed_opaque_existential_1(result + 16);
    }
  }
  return result;
}

uint64_t assignWithCopy for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  unsigned int v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 80);
  if (!*(void *)(a1 + 80))
  {
    if (!v6)
    {
      _OWORD *v4 = *v5;
      long long v16 = *(_OWORD *)(a2 + 32);
      long long v17 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v18;
      *(_OWORD *)(a1 + 32) = v16;
      *(_OWORD *)(a1 + 48) = v17;
      return a1;
    }
    goto LABEL_6;
  }
  if (v6)
  {
    if (a1 == a2)
    {
LABEL_10:
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      return a1;
    }
    outlined destroy of ScrollPosition.Storage(a1 + 16);
LABEL_6:
    if (*(unsigned char *)(a2 + 73))
    {
      long long v7 = *v5;
      long long v8 = v5[1];
      long long v9 = v5[2];
      *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v5 + 42);
      v4[1] = v8;
      _OWORD v4[2] = v9;
      _OWORD *v4 = v7;
    }
    else
    {
      uint64_t v13 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v4, v5);
      unsigned __int8 v14 = *(unsigned char *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v14;
    }
    goto LABEL_10;
  }
  outlined destroy of ScrollPosition(a1 + 16);
  _OWORD *v4 = *v5;
  long long v10 = v5[4];
  long long v12 = v5[1];
  long long v11 = v5[2];
  v4[3] = v5[3];
  v4[4] = v10;
  v4[1] = v12;
  _OWORD v4[2] = v11;
  return a1;
}

uint64_t assignWithTake for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  int v3 = (_OWORD *)(a1 + 16);
  unsigned int v4 = (_OWORD *)(a2 + 16);
  if (!*(void *)(a1 + 80)) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 80);
  if (!v6)
  {
    outlined destroy of ScrollPosition(a1 + 16);
LABEL_7:
    long long v9 = v4[3];
    v3[2] = v4[2];
    v3[3] = v9;
    v3[4] = v4[4];
    long long v10 = v4[1];
    *int v3 = *v4;
    v3[1] = v10;
    return a1;
  }
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    long long v7 = v4[1];
    *int v3 = *v4;
    v3[1] = v7;
    v3[2] = v4[2];
    *(_OWORD *)((char *)v3 + 42) = *(_OWORD *)((char *)v4 + 42);
    uint64_t v6 = *(void *)(a2 + 80);
  }
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollPositionBindingModifier.MakeRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollPositionBindingModifier.MakeRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 80) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier.MakeRequest()
{
  return &type metadata for ScrollPositionBindingModifier.MakeRequest;
}

ValueMetadata *type metadata accessor for ScrollPositionBindingModifier.AdjustedAnchor()
{
  return &type metadata for ScrollPositionBindingModifier.AdjustedAnchor;
}

ValueMetadata *type metadata accessor for _GraphInputs.ContentScrollPositionKey()
{
  return &type metadata for _GraphInputs.ContentScrollPositionKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPositionKey()
{
  return &type metadata for _GraphInputs.ScrollPositionKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollPositionAnchorKey()
{
  return &type metadata for _GraphInputs.ScrollPositionAnchorKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ContentScrollPositionAnchorKey()
{
  return &type metadata for _GraphInputs.ContentScrollPositionAnchorKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for ModifierTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v4 = *a2;
    int v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t destroy for ModifierTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);

  return v7(v4, v3);
}

unint64_t initializeWithCopy for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t assignWithCopy for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t initializeWithTake for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t assignWithTake for ModifierTransition(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_245A5E8E4()
{
  return swift_getWitnessTable();
}

void DisplayList.PlatformEffect.features.getter(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t DisplayList.PlatformEffect.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t static DisplayList.PlatformEffect.== infix(_:_:)()
{
  return 1;
}

void DisplayList.PlatformEffect.hash(into:)()
{
}

Swift::Int DisplayList.PlatformEffect.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect;
  if (!lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.PlatformEffect and conformance DisplayList.PlatformEffect);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DisplayList.PlatformEffect(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245A5EB0CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.PlatformEffect()
{
  return &type metadata for DisplayList.PlatformEffect;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.PlatformViewInfo()
{
  return &type metadata for DisplayList.ViewUpdater.PlatformViewInfo;
}

ValueMetadata *type metadata accessor for DisplayList.ViewUpdater.Platform.PlatformState()
{
  return &type metadata for DisplayList.ViewUpdater.Platform.PlatformState;
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(unint64_t a1, unint64_t a2, int a3)
{
  int v4 = a2;
  int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIDWORD(a2);
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = MEMORY[0x263F8E8F8];
  *(_OWORD *)(v8 + 16) = xmmword_2461BDB00;
  uint64_t v10 = MEMORY[0x263F8E960];
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = v10;
  *(_DWORD *)(v8 + 32) = a3;
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = v10;
  *(_DWORD *)(v8 + 72) = v7;
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = v10;
  *(_DWORD *)(v8 + 112) = v4;
  *(void *)(v8 + 176) = v9;
  *(void *)(v8 + 184) = v10;
  *(_DWORD *)(v8 + 152) = v6;
  *(void *)(v8 + 216) = v9;
  *(void *)(v8 + 224) = v10;
  *(_DWORD *)(v8 + 192) = v5;
  v11._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v11);

  return swift_bridgeObjectRelease();
}

uint64_t DisplayList.description.getter()
{
  uint64_t v1 = *v0;
  strcpy((char *)v7, "(display-list");
  HIWORD(v7[1]) = -4864;
  long long v8 = xmmword_2461BDB10;
  unint64_t v9 = 0xE200000000000000;
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = v1 + 100;
  do
  {
    DisplayList.Item.print(into:)(v7);
    v3 += 72;
    --v2;
  }
  while (v2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!(void)v8) {
    goto LABEL_7;
  }
  if ((void)v8 != 0x8000000000000000)
  {
LABEL_6:
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_7:
    v5._uint64_t countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    uint64_t v6 = v7[0];
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t DisplayList.minimalDescription.getter()
{
  uint64_t v1 = *v0;
  v7[0] = 4998184;
  v7[1] = 0xE300000000000000;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = v1 + 100;
  do
  {
    DisplayList.Item.printMinimally(into:)(v7);
    v3 += 72;
    --v2;
  }
  while (v2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_7;
  }
  if (v8 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_7:
    v5._uint64_t countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    uint64_t v6 = v7[0];
    swift_bridgeObjectRelease();
    return v6;
  }
  __break(1u);
  return result;
}

void DisplayList.Item.print(into:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DisplayList.ArchiveIDs();
  *(void *)&long long v570 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  Swift::String v5 = (char *)v554 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v554 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  v572._uint64_t countAndFlagsBits = (uint64_t)v554 - v10;
  uint64_t v12 = *(void *)v1;
  Swift::String v11 = *(void **)(v1 + 8);
  double v14 = *(double *)(v1 + 16);
  uint64_t v13 = *(uint64_t *)(v1 + 24);
  uint64_t v15 = *(void *)(v1 + 32);
  unint64_t v573 = *(void *)(v1 + 40);
  unint64_t v571 = *(void *)(v1 + 48);
  uint64_t v566 = *(void *)(v1 + 56);
  LODWORD(v565) = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  int v16 = *(_DWORD *)(v1 + 68);
  v17._uint64_t countAndFlagsBits = 1835365481;
  v17._object = (void *)0xE400000000000000;
  SExpPrinter.push(_:)(v17);
  if (v16)
  {
    strcpy((char *)&v575, "#:identity ");
    HIDWORD(v575) = -352321536;
    LODWORD(v589[0]._countAndFlagsBits) = v16;
    v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    Swift::String v19 = (Swift::String)v575;
    v20._uint64_t countAndFlagsBits = 32;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
  }
  strcpy((char *)&v575, "#:version ");
  BYTE11(v575) = 0;
  HIDWORD(v575) = -369098752;
  v589[0]._uint64_t countAndFlagsBits = v15;
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  Swift::String v22 = (Swift::String)v575;
  v23._uint64_t countAndFlagsBits = 32;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  *(void *)&unsigned long long v575 = v12;
  *((void *)&v575 + 1) = v11;
  *(double *)&long long v576 = v14;
  *((void *)&v576 + 1) = v13;
  *(void *)&long long v577 = v15;
  *((void *)&v577 + 1) = v573;
  *(void *)&long long v578 = v571;
  *((void *)&v578 + 1) = v566;
  unsigned int v24 = WORD1(v565);
  BYTE2(v579) = BYTE2(v565);
  LOWORD(v579) = v565;
  HIDWORD(v579) = v16;
  DisplayList.Item.features.getter((__int16 *)v589);
  if (v589[0]._countAndFlagsBits)
  {
    v25._uint64_t countAndFlagsBits = 32;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    v26._uint64_t countAndFlagsBits = 0x7269757165723A23;
    v26._object = (void *)0xEF65757274206465;
    String.append(_:)(v26);
  }
  *(void *)&unsigned long long v575 = v12;
  *((void *)&v575 + 1) = v11;
  *(double *)&long long v576 = v14;
  *((void *)&v576 + 1) = v13;
  *(void *)&long long v577 = v15;
  *((void *)&v577 + 1) = v573;
  *(void *)&long long v578 = v571;
  *((void *)&v578 + 1) = v566;
  BYTE2(v579) = v24;
  LOWORD(v579) = v565;
  HIDWORD(v579) = v16;
  DisplayList.Item.features.getter((__int16 *)v589);
  if ((v589[0]._countAndFlagsBits & 2) != 0)
  {
    v27._uint64_t countAndFlagsBits = 32;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v28._uint64_t countAndFlagsBits = 0x2073776569763A23;
    v28._object = (void *)0xEC00000065757274;
    String.append(_:)(v28);
  }
  strcpy((char *)&v575, "(frame (");
  BYTE9(v575) = 0;
  WORD5(v575) = 0;
  HIDWORD(v575) = -402653184;
  v29._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  char v30 = 32;
  v31._uint64_t countAndFlagsBits = 32;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 59;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  unint64_t v34 = *((void *)&v575 + 1);
  unint64_t v35 = v575;
  *(void *)&unsigned long long v575 = 32;
  *((void *)&v575 + 1) = 0xE100000000000000;
  v36._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 32;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 10537;
  v39._object = (void *)0xE200000000000000;
  String.append(_:)(v39);
  Swift::String v40 = (Swift::String)v575;
  unsigned long long v575 = __PAIR128__(v34, v35);
  swift_bridgeObjectRetain();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v41 = (char *)*((void *)&v575 + 1);
  uint64_t v42 = v575;
  if (a1[2])
  {
    v43._uint64_t countAndFlagsBits = 10;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    uint64_t v44 = a1[3];
    uint64_t v45 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v46._uint64_t countAndFlagsBits = v44;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
  }
  else
  {
    v47._uint64_t countAndFlagsBits = 32;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
  }
  v48._uint64_t countAndFlagsBits = v42;
  v48._object = v41;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  switch(v571 >> 62)
  {
    case 1uLL:
      unint64_t v58 = v571;
      unint64_t v35 = HIDWORD(v571);
      outlined copy of DisplayList.Effect(v573, v571, SBYTE4(v571));
      swift_bridgeObjectRetain();
      v59._uint64_t countAndFlagsBits = 0x746365666665;
      v59._object = (void *)0xE600000000000000;
      SExpPrinter.push(_:)(v59);
      switch(BYTE4(v58))
      {
        case 1:
          uint64_t v237 = swift_projectBox();
          uint64_t countAndFlagsBits = v572._countAndFlagsBits;
          outlined init with copy of DisplayList.ArchiveIDs?(v237, v572._countAndFlagsBits);
          outlined init with copy of DisplayList.ArchiveIDs?(countAndFlagsBits, (uint64_t)v8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v570 + 48))(v8, 1, v3) == 1)
          {
            v239 = (void *)0xE300000000000000;
            uint64_t v240 = 7104878;
          }
          else
          {
            outlined init with take of DisplayList.ArchiveIDs((uint64_t)v8, (uint64_t)v5);
            type metadata accessor for UUID();
            lazy protocol witness table accessor for type UUID and conformance UUID();
            uint64_t v240 = dispatch thunk of CustomStringConvertible.description.getter();
            v239 = v463;
            outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs);
          }
          strcpy((char *)&v575, "#:archive ");
          BYTE11(v575) = 0;
          HIDWORD(v575) = -369098752;
          v464._uint64_t countAndFlagsBits = v240;
          v464._object = v239;
          String.append(_:)(v464);
          swift_bridgeObjectRelease();
          Swift::String v465 = (Swift::String)v575;
          v466._uint64_t countAndFlagsBits = 32;
          v466._object = (void *)0xE100000000000000;
          String.append(_:)(v466);
          String.append(_:)(v465);
          swift_bridgeObjectRelease();
          outlined destroy of DisplayList.ArchiveIDs?(v572._countAndFlagsBits, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
          goto LABEL_293;
        case 2:
          char v241 = v573;
          if (v573)
          {
            v467._uint64_t countAndFlagsBits = 32;
            v467._object = (void *)0xE100000000000000;
            String.append(_:)(v467);
            v468._uint64_t countAndFlagsBits = 0xD000000000000012;
            v468._object = (void *)0x800000024621B990;
            String.append(_:)(v468);
            if ((v241 & 0x10) == 0)
            {
LABEL_103:
              if ((v241 & 0x20) == 0) {
                goto LABEL_104;
              }
              goto LABEL_221;
            }
          }
          else if ((v573 & 0x10) == 0)
          {
            goto LABEL_103;
          }
          v469._uint64_t countAndFlagsBits = 32;
          v469._object = (void *)0xE100000000000000;
          String.append(_:)(v469);
          v470._uint64_t countAndFlagsBits = 0xD000000000000014;
          v470._object = (void *)0x800000024621B970;
          String.append(_:)(v470);
          if ((v241 & 0x20) == 0)
          {
LABEL_104:
            if ((v241 & 0x40) == 0) {
              goto LABEL_105;
            }
            goto LABEL_222;
          }
LABEL_221:
          v471._uint64_t countAndFlagsBits = 32;
          v471._object = (void *)0xE100000000000000;
          String.append(_:)(v471);
          v472._uint64_t countAndFlagsBits = 0xD000000000000013;
          v472._object = (void *)0x800000024621B950;
          String.append(_:)(v472);
          if ((v241 & 0x40) == 0)
          {
LABEL_105:
            if ((v241 & 2) == 0) {
              goto LABEL_106;
            }
            goto LABEL_223;
          }
LABEL_222:
          v473._uint64_t countAndFlagsBits = 32;
          v473._object = (void *)0xE100000000000000;
          String.append(_:)(v473);
          v474._uint64_t countAndFlagsBits = 0xD000000000000015;
          v474._object = (void *)0x800000024621B930;
          String.append(_:)(v474);
          if ((v241 & 2) == 0)
          {
LABEL_106:
            if ((v241 & 4) == 0) {
              goto LABEL_107;
            }
            goto LABEL_224;
          }
LABEL_223:
          v475._uint64_t countAndFlagsBits = 32;
          v475._object = (void *)0xE100000000000000;
          String.append(_:)(v475);
          v476._object = (void *)0x800000024621B910;
          v476._uint64_t countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v476);
          if ((v241 & 4) == 0)
          {
LABEL_107:
            if ((v241 & 8) == 0) {
              goto LABEL_108;
            }
            goto LABEL_225;
          }
LABEL_224:
          v477._uint64_t countAndFlagsBits = 32;
          v477._object = (void *)0xE100000000000000;
          String.append(_:)(v477);
          v478._uint64_t countAndFlagsBits = 0xD000000000000013;
          v478._object = (void *)0x800000024621B8F0;
          String.append(_:)(v478);
          if ((v241 & 8) == 0)
          {
LABEL_108:
            if ((v241 & 0x80) == 0) {
              goto LABEL_293;
            }
            goto LABEL_226;
          }
LABEL_225:
          v479._uint64_t countAndFlagsBits = 32;
          v479._object = (void *)0xE100000000000000;
          String.append(_:)(v479);
          v480._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
          v480._object = (void *)0x800000024621B8D0;
          String.append(_:)(v480);
          if ((v241 & 0x80) == 0) {
            goto LABEL_293;
          }
LABEL_226:
          v481._uint64_t countAndFlagsBits = 32;
          v481._object = (void *)0xE100000000000000;
          String.append(_:)(v481);
          unint64_t v374 = 0xD00000000000001ALL;
          v482 = "#:screencapture-prohibited";
LABEL_250:
          unint64_t v373 = (unint64_t)(v482 - 32) | 0x8000000000000000;
          goto LABEL_292;
        case 3:
          v242._uint64_t countAndFlagsBits = 32;
          v242._object = (void *)0xE100000000000000;
          String.append(_:)(v242);
          v243 = "#:platform-group";
          goto LABEL_155;
        case 4:
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          v244._object = (void *)0xEA00000000002079;
          v244._uint64_t countAndFlagsBits = 0x74696361706F3A23;
          String.append(_:)(v244);
          Float.write<A>(to:)();
          goto LABEL_112;
        case 5:
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          uint64_t v247 = v573;
          char v248 = v571;
          outlined copy of DisplayList.Effect(v573, v571, 5);
          v249._uint64_t countAndFlagsBits = 0x2D646E656C623A23;
          v249._object = (void *)0xED00002065646F6DLL;
          String.append(_:)(v249);
          v589[0]._uint64_t countAndFlagsBits = v247;
          LOBYTE(v589[0]._object) = v248 & 1;
          _print_unlocked<A, B>(_:_:)();
          Swift::String v250 = (Swift::String)v575;
          v251._uint64_t countAndFlagsBits = 32;
          v251._object = (void *)0xE100000000000000;
          String.append(_:)(v251);
          String.append(_:)(v250);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v247, v248, 5);
          goto LABEL_293;
        case 6:
          unint64_t v252 = HIDWORD(v58);
          long long v253 = *(_OWORD *)(v573 + 32);
          v587[0] = *(_OWORD *)(v573 + 16);
          v587[1] = v253;
          char v588 = *(unsigned char *)(v573 + 48);
          char v254 = *(unsigned char *)(v573 + 49);
          char v255 = *(unsigned char *)(v573 + 50);
          int v256 = *(_DWORD *)(v573 + 52);
          outlined init with take of Path.Storage((uint64_t)v587, (uint64_t)v589);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v589, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          v257._uint64_t countAndFlagsBits = 1885957219;
          v257._object = (void *)0xE400000000000000;
          SExpPrinter.push(_:)(v257);
          *(void *)&unsigned long long v575 = 0x206874617028;
          *((void *)&v575 + 1) = 0xE600000000000000;
          v258 = Path.cgPath.getter();
          v259 = (void *)_CGPathCopyDescription(v258, 0.0);

          uint64_t v260 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v262 = v261;

          v263._uint64_t countAndFlagsBits = v260;
          v263._object = v262;
          String.append(_:)(v263);
          swift_bridgeObjectRelease();
          v264._uint64_t countAndFlagsBits = 41;
          v264._object = (void *)0xE100000000000000;
          String.append(_:)(v264);
          Swift::String v265 = (Swift::String)v575;
          if (a1[2])
          {
            v266._uint64_t countAndFlagsBits = 10;
            v266._object = (void *)0xE100000000000000;
            String.append(_:)(v266);
            uint64_t v267 = a1[3];
            v268 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v269._uint64_t countAndFlagsBits = v267;
            v269._object = v268;
            String.append(_:)(v269);
            swift_bridgeObjectRelease();
          }
          else
          {
            v483._uint64_t countAndFlagsBits = 32;
            v483._object = (void *)0xE100000000000000;
            String.append(_:)(v483);
          }
          String.append(_:)(v265);
          swift_bridgeObjectRelease();
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          v484._uint64_t countAndFlagsBits = 0x20656C79747328;
          v484._object = (void *)0xE700000000000000;
          String.append(_:)(v484);
          LOBYTE(v574) = v254;
          BYTE1(v574) = v255;
          _print_unlocked<A, B>(_:_:)();
          v485._uint64_t countAndFlagsBits = 41;
          v485._object = (void *)0xE100000000000000;
          String.append(_:)(v485);
          Swift::String v486 = (Swift::String)v575;
          if (a1[2])
          {
            v487._uint64_t countAndFlagsBits = 10;
            v487._object = (void *)0xE100000000000000;
            String.append(_:)(v487);
            uint64_t v488 = a1[3];
            v489 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v490._uint64_t countAndFlagsBits = v488;
            v490._object = v489;
            String.append(_:)(v490);
            swift_bridgeObjectRelease();
          }
          else
          {
            v499._uint64_t countAndFlagsBits = 32;
            v499._object = (void *)0xE100000000000000;
            String.append(_:)(v499);
          }
          LOBYTE(v35) = v252;
          String.append(_:)(v486);
          swift_bridgeObjectRelease();
          if (!v256) {
            goto LABEL_264;
          }
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          v500._uint64_t countAndFlagsBits = 0x736E6F6974706F28;
          v500._object = (void *)0xE900000000000020;
          String.append(_:)(v500);
          int v574 = v256;
          _print_unlocked<A, B>(_:_:)();
          v501._uint64_t countAndFlagsBits = 41;
          v501._object = (void *)0xE100000000000000;
          String.append(_:)(v501);
          v270 = (_DWORD *)*((void *)&v575 + 1);
          uint64_t v271 = v575;
          if (!a1[2]) {
            goto LABEL_262;
          }
          v502._uint64_t countAndFlagsBits = 10;
          v502._object = (void *)0xE100000000000000;
          String.append(_:)(v502);
          uint64_t v503 = a1[3];
          v504 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v505._uint64_t countAndFlagsBits = v503;
          v505._object = v504;
          String.append(_:)(v505);
          swift_bridgeObjectRelease();
          goto LABEL_263;
        case 7:
          v270 = *(_DWORD **)(v573 + 16);
          uint64_t v271 = *(unsigned int *)(v573 + 28);
          v272._uint64_t countAndFlagsBits = 1802723693;
          v272._object = (void *)0xE400000000000000;
          SExpPrinter.push(_:)(v272);
          if (v271)
          {
            *(void *)&unsigned long long v575 = 0;
            *((void *)&v575 + 1) = 0xE000000000000000;
            v273._uint64_t countAndFlagsBits = 0x736E6F6974706F28;
            v273._object = (void *)0xE900000000000020;
            String.append(_:)(v273);
            LODWORD(v589[0]._countAndFlagsBits) = v271;
            _print_unlocked<A, B>(_:_:)();
            v274._uint64_t countAndFlagsBits = 41;
            v274._object = (void *)0xE100000000000000;
            String.append(_:)(v274);
            uint64_t v271 = *((void *)&v575 + 1);
            uint64_t v275 = v575;
            if (a1[2])
            {
              v276._uint64_t countAndFlagsBits = 10;
              v276._object = (void *)0xE100000000000000;
              String.append(_:)(v276);
              uint64_t v277 = a1[3];
              v278 = (void *)a1[4];
              swift_bridgeObjectRetain();
              v279._uint64_t countAndFlagsBits = v277;
              v279._object = v278;
              String.append(_:)(v279);
              swift_bridgeObjectRelease();
            }
            else
            {
              v506._uint64_t countAndFlagsBits = 32;
              v506._object = (void *)0xE100000000000000;
              String.append(_:)(v506);
            }
            v507._uint64_t countAndFlagsBits = v275;
            v507._object = (void *)v271;
            String.append(_:)(v507);
            swift_bridgeObjectRelease();
          }
          uint64_t v508 = specialized Array._getCount()(v270);
          if (!v508) {
            goto LABEL_258;
          }
          uint64_t v271 = v508;
          if (v508 < 1) {
            goto LABEL_323;
          }
          swift_bridgeObjectRetain();
          v509 = v270 + 25;
          do
          {
            __int16 v510 = *((_WORD *)v509 - 2);
            char v511 = *((unsigned char *)v509 - 2);
            int v512 = *v509;
            unsigned long long v575 = *(_OWORD *)(v509 - 17);
            long long v576 = *(_OWORD *)(v509 - 13);
            long long v577 = *(_OWORD *)(v509 - 9);
            long long v578 = *(_OWORD *)(v509 - 5);
            BYTE2(v579) = v511;
            LOWORD(v579) = v510;
            HIDWORD(v579) = v512;
            DisplayList.Item.print(into:)(a1);
            v509 += 18;
            --v271;
          }
          while (v271);
          swift_bridgeObjectRelease();
LABEL_258:
          uint64_t v513 = a1[2];
          if (!v513) {
            goto LABEL_291;
          }
          BOOL v95 = __OFSUB__(v513, 1);
          uint64_t v340 = v513 - 1;
          if (!v95) {
            goto LABEL_290;
          }
          __break(1u);
LABEL_262:
          v514._uint64_t countAndFlagsBits = 32;
          v514._object = (void *)0xE100000000000000;
          String.append(_:)(v514);
LABEL_263:
          v515._uint64_t countAndFlagsBits = v271;
          v515._object = v270;
          String.append(_:)(v515);
          swift_bridgeObjectRelease();
LABEL_264:
          uint64_t v516 = a1[2];
          if (!v516) {
            goto LABEL_267;
          }
          BOOL v95 = __OFSUB__(v516, 1);
          uint64_t v517 = v516 - 1;
          if (v95) {
            goto LABEL_324;
          }
          a1[2] = v517;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_267:
          v518._uint64_t countAndFlagsBits = 41;
          v518._object = (void *)0xE100000000000000;
          String.append(_:)(v518);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v587, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          goto LABEL_293;
        case 8:
          Swift::String v572 = *(Swift::String *)(v573 + 16);
          long long v570 = *(_OWORD *)(v573 + 32);
          long long v569 = *(_OWORD *)(v573 + 48);
          long long v568 = *(_OWORD *)(v573 + 64);
          uint64_t v280 = *(void *)(v573 + 80);
          char v281 = *(unsigned char *)(v573 + 88);
          v282._object = (void *)0xEB00000000206D72;
          v589[0]._uint64_t countAndFlagsBits = 0;
          v589[0]._object = (void *)0xE000000000000000;
          v282._uint64_t countAndFlagsBits = 0x6F66736E61727428;
          String.append(_:)(v282);
          unsigned long long v575 = (unsigned __int128)v572;
          long long v576 = v570;
          long long v577 = v569;
          long long v578 = v568;
          uint64_t v579 = v280;
          LOBYTE(v580) = v281;
          _print_unlocked<A, B>(_:_:)();
          v283._uint64_t countAndFlagsBits = 41;
          v283._object = (void *)0xE100000000000000;
          String.append(_:)(v283);
          Swift::String v284 = v589[0];
          if (a1[2])
          {
            v285._uint64_t countAndFlagsBits = 10;
            v285._object = (void *)0xE100000000000000;
            String.append(_:)(v285);
            uint64_t v286 = a1[3];
            v287 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v288._uint64_t countAndFlagsBits = v286;
            v288._object = v287;
            String.append(_:)(v288);
            swift_bridgeObjectRelease();
          }
          else
          {
            v491._uint64_t countAndFlagsBits = 32;
            v491._object = (void *)0xE100000000000000;
            String.append(_:)(v491);
          }
          String.append(_:)(v284);
          swift_bridgeObjectRelease();
          goto LABEL_293;
        case 9:
          v572._uint64_t countAndFlagsBits = v35;
          v289 = *(void **)(v573 + 16);
          unint64_t v562 = *(void *)(v573 + 24);
          uint64_t v290 = *(void *)(v573 + 40);
          id v564 = *(id *)(v573 + 32);
          uint64_t v563 = v290;
          uint64_t v291 = *(void *)(v573 + 56);
          *(void *)&long long v570 = *(void *)(v573 + 48);
          uint64_t v292 = *(void *)(v573 + 64);
          uint64_t v293 = *(void *)(v573 + 72);
          uint64_t v294 = *(void *)(v573 + 88);
          uint64_t v565 = *(void *)(v573 + 80);
          uint64_t v295 = *(void *)(v573 + 104);
          uint64_t v567 = *(void *)(v573 + 96);
          uint64_t v296 = *(void *)(v573 + 120);
          *(void *)&long long v568 = *(void *)(v573 + 112);
          LODWORD(v569) = *(_DWORD *)(v573 + 128);
          int v297 = *(unsigned __int8 *)(v573 + 132);
          outlined copy of GraphicsFilter(v289, v562, v564, v290, v570, v291, v292, v293, v565, v294, v567, v295, v568, v296, v569, SBYTE2(v569));
          v298._uint64_t countAndFlagsBits = 0x7265746C6966;
          v298._object = (void *)0xE600000000000000;
          SExpPrinter.push(_:)(v298);
          v561 = v289;
          unsigned long long v575 = __PAIR128__(v562, (unint64_t)v289);
          uint64_t v299 = v565;
          uint64_t v300 = v293;
          uint64_t v301 = v292;
          uint64_t v302 = v291;
          char v303 = v563;
          id v304 = v564;
          int v305 = v562;
          *(void *)&long long v576 = v564;
          *((void *)&v576 + 1) = v563;
          *(void *)&long long v577 = v570;
          uint64_t v555 = v302;
          *((void *)&v577 + 1) = v302;
          uint64_t v557 = v301;
          *(void *)&long long v578 = v301;
          uint64_t v559 = v300;
          *((void *)&v578 + 1) = v300;
          uint64_t v579 = v565;
          uint64_t v560 = v294;
          uint64_t v580 = v294;
          uint64_t v306 = v567;
          uint64_t v581 = v567;
          uint64_t v558 = v295;
          uint64_t v582 = v295;
          uint64_t v307 = v568;
          uint64_t v583 = v568;
          uint64_t v556 = v296;
          uint64_t v584 = v296;
          int v308 = v569;
          int v585 = v569;
          v554[1] = v297;
          char v586 = v297;
          GraphicsFilter.print(into:)(a1);
          uint64_t v309 = a1[2];
          if (!v309) {
            goto LABEL_124;
          }
          BOOL v95 = __OFSUB__(v309, 1);
          uint64_t v310 = v309 - 1;
          if (v95) {
            goto LABEL_320;
          }
          a1[2] = v310;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_124:
          v311._uint64_t countAndFlagsBits = 41;
          v311._object = (void *)0xE100000000000000;
          String.append(_:)(v311);
          outlined consume of GraphicsFilter(v561, v305, v304, v303, v570, v555, v557, v559, v299, v560, v306, v558, v307, v556, v308, SBYTE2(v308));
          goto LABEL_244;
        case 0xA:
          outlined init with copy of AnyTrackedValue(v573 + 16, (uint64_t)&v575);
          v312._object = (void *)0xE90000000000006ELL;
          v312._uint64_t countAndFlagsBits = 0x6F6974616D696E61;
          SExpPrinter.push(_:)(v312);
          v589[0]._uint64_t countAndFlagsBits = 0;
          v589[0]._object = (void *)0xE000000000000000;
          v313._uint64_t countAndFlagsBits = 0x6974616D696E6128;
          v313._object = (void *)0xEB00000000206E6FLL;
          String.append(_:)(v313);
          type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _DisplayList_AnyEffectAnimation);
          _print_unlocked<A, B>(_:_:)();
          v314._uint64_t countAndFlagsBits = 41;
          v314._object = (void *)0xE100000000000000;
          String.append(_:)(v314);
          Swift::String v315 = v589[0];
          if (a1[2])
          {
            v316._uint64_t countAndFlagsBits = 10;
            v316._object = (void *)0xE100000000000000;
            String.append(_:)(v316);
            uint64_t v317 = a1[3];
            v318 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v319._uint64_t countAndFlagsBits = v317;
            v319._object = v318;
            String.append(_:)(v319);
            swift_bridgeObjectRelease();
          }
          else
          {
            v492._uint64_t countAndFlagsBits = 32;
            v492._object = (void *)0xE100000000000000;
            String.append(_:)(v492);
          }
          String.append(_:)(v315);
          swift_bridgeObjectRelease();
          uint64_t v493 = a1[2];
          if (!v493) {
            goto LABEL_236;
          }
          BOOL v95 = __OFSUB__(v493, 1);
          uint64_t v337 = v493 - 1;
          if (!v95) {
            goto LABEL_235;
          }
          goto LABEL_321;
        case 0xB:
          v572._uint64_t countAndFlagsBits = v35;
          uint64_t v320 = *(void *)(v573 + 16);
          uint64_t v321 = *(unsigned __int8 *)(v573 + 28);
          uint64_t v322 = *(unsigned int *)(v573 + 24);
          uint64_t v323 = v322 | (v321 << 32);
          char v324 = *(unsigned char *)(v573 + 29);
          char v325 = *(unsigned char *)(v573 + 30);
          uint64_t v326 = *(void *)(v573 + 32);
          outlined copy of ContentTransition.Storage(v320, v323, v324);
          swift_retain();
          v327._uint64_t countAndFlagsBits = 0xD000000000000011;
          v327._object = (void *)0x800000024621B890;
          SExpPrinter.push(_:)(v327);
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          v328._uint64_t countAndFlagsBits = 0x7469736E61727428;
          v328._object = (void *)0xEC000000206E6F69;
          String.append(_:)(v328);
          v589[0]._uint64_t countAndFlagsBits = v320;
          BYTE4(v589[0]._object) = v321;
          LODWORD(v589[0]._object) = v322;
          BYTE5(v589[0]._object) = v324;
          BYTE6(v589[0]._object) = v325;
          _print_unlocked<A, B>(_:_:)();
          v329._uint64_t countAndFlagsBits = 41;
          v329._object = (void *)0xE100000000000000;
          String.append(_:)(v329);
          Swift::String v330 = (Swift::String)v575;
          if (a1[2])
          {
            v331._uint64_t countAndFlagsBits = 10;
            v331._object = (void *)0xE100000000000000;
            String.append(_:)(v331);
            uint64_t v332 = a1[3];
            v333 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v334._uint64_t countAndFlagsBits = v332;
            v334._object = v333;
            String.append(_:)(v334);
            swift_bridgeObjectRelease();
          }
          else
          {
            v495._uint64_t countAndFlagsBits = 32;
            v495._object = (void *)0xE100000000000000;
            String.append(_:)(v495);
          }
          String.append(_:)(v330);
          swift_bridgeObjectRelease();
          if (v326)
          {
            *(void *)&unsigned long long v575 = v326;
            closure #2 in DisplayList.Item.print(into:)((uint64_t *)&v575, a1);
          }
          uint64_t v496 = a1[2];
          if (!v496) {
            goto LABEL_243;
          }
          BOOL v95 = __OFSUB__(v496, 1);
          uint64_t v497 = v496 - 1;
          if (v95) {
            goto LABEL_322;
          }
          a1[2] = v497;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_243:
          v498._uint64_t countAndFlagsBits = 41;
          v498._object = (void *)0xE100000000000000;
          String.append(_:)(v498);
          outlined consume of ContentTransition.Storage(v320, v323, v324);
          swift_release();
LABEL_244:
          LOBYTE(v35) = v572._countAndFlagsBits;
          goto LABEL_293;
        case 0xC:
          outlined init with copy of AnyTrackedValue(v573 + 16, (uint64_t)&v575);
          strcpy((char *)v589, "view #:type ");
          BYTE5(v589[0]._object) = 0;
          HIWORD(v589[0]._object) = -5120;
          __swift_project_boxed_opaque_existential_1(&v575, *((uint64_t *)&v576 + 1));
          swift_getDynamicType();
          v335._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v335);
          swift_bridgeObjectRelease();
          SExpPrinter.push(_:)(v589[0]);
          swift_bridgeObjectRelease();
          uint64_t v336 = a1[2];
          if (!v336) {
            goto LABEL_236;
          }
          BOOL v95 = __OFSUB__(v336, 1);
          uint64_t v337 = v336 - 1;
          if (!v95)
          {
LABEL_235:
            a1[2] = v337;
            specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_236:
            v494._uint64_t countAndFlagsBits = 41;
            v494._object = (void *)0xE100000000000000;
            String.append(_:)(v494);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v575);
            goto LABEL_293;
          }
          __break(1u);
LABEL_133:
          v338._uint64_t countAndFlagsBits = 0x6269737365636361;
          v338._object = (void *)0xED00007974696C69;
          SExpPrinter.push(_:)(v338);
          uint64_t v339 = a1[2];
          if (!v339) {
            goto LABEL_291;
          }
          BOOL v95 = __OFSUB__(v339, 1);
          uint64_t v340 = v339 - 1;
          if (!v95) {
            goto LABEL_290;
          }
          __break(1u);
LABEL_137:
          unint64_t v341 = *(void *)(v573 + 16);
          unint64_t v342 = *(void *)(v573 + 24);
          int v343 = *(_DWORD *)(v573 + 32);
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          v344._uint64_t countAndFlagsBits = 0x206574617473;
          v344._object = (void *)0xE600000000000000;
          String.append(_:)(v344);
          specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v341, v342, v343);
          SExpPrinter.push(_:)((Swift::String)v575);
          swift_bridgeObjectRelease();
          uint64_t v345 = a1[2];
          if (!v345) {
            goto LABEL_291;
          }
          BOOL v95 = __OFSUB__(v345, 1);
          uint64_t v340 = v345 - 1;
          if (!v95) {
            goto LABEL_290;
          }
          __break(1u);
LABEL_141:
          uint64_t v346 = *(uint64_t *)(v573 + 24);
          double v347 = *(double *)(v573 + 32);
          uint64_t v13 = *(uint64_t *)(v573 + 40);
          double v14 = *(double *)(v573 + 48);
          v348._object = (void *)0x800000024621B830;
          v348._uint64_t countAndFlagsBits = 0xD000000000000010;
          SExpPrinter.push(_:)(v348);
          if (*(double *)&v346 == 0.0 && v347 == 0.0) {
            goto LABEL_271;
          }
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          v349._object = (void *)0x800000024621B850;
          v349._uint64_t countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v349);
          v589[0]._uint64_t countAndFlagsBits = v346;
          *(double *)&v589[0]._object = v347;
          type metadata accessor for CGPoint(0);
          _print_unlocked<A, B>(_:_:)();
          v350._uint64_t countAndFlagsBits = 41;
          v350._object = (void *)0xE100000000000000;
          String.append(_:)(v350);
          unint64_t v63 = *((void *)&v575 + 1);
          int v41 = (char *)v575;
          if (!a1[2]) {
            goto LABEL_269;
          }
          v351._uint64_t countAndFlagsBits = 10;
          v351._object = (void *)0xE100000000000000;
          String.append(_:)(v351);
          uint64_t v352 = a1[3];
          v353 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v354._uint64_t countAndFlagsBits = v352;
          v354._object = v353;
          String.append(_:)(v354);
          swift_bridgeObjectRelease();
          break;
        case 0xD:
          goto LABEL_133;
        case 0xE:
          goto LABEL_293;
        case 0xF:
          goto LABEL_137;
        case 0x10:
          goto LABEL_141;
        case 0x11:
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(29);
          swift_bridgeObjectRelease();
          *(void *)&unsigned long long v575 = 0xD00000000000001BLL;
          *((void *)&v575 + 1) = 0x800000024621B810;
          LODWORD(v589[0]._countAndFlagsBits) = v571;
          v355._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v355);
          swift_bridgeObjectRelease();
          SExpPrinter.push(_:)((Swift::String)v575);
          swift_bridgeObjectRelease();
          uint64_t v356 = a1[2];
          if (!v356) {
            goto LABEL_291;
          }
          BOOL v95 = __OFSUB__(v356, 1);
          uint64_t v340 = v356 - 1;
          if (!v95) {
            goto LABEL_290;
          }
          __break(1u);
LABEL_149:
          unint64_t v357 = *(void *)(v573 + 16);
          unint64_t v358 = *(void *)(v573 + 24);
          int v359 = *(_DWORD *)(v573 + 32);
          char v360 = *(unsigned char *)(v573 + 36);
          uint64_t v361 = *(void *)(v573 + 40);
          swift_retain();
          v362._uint64_t countAndFlagsBits = 0xD000000000000016;
          v362._object = (void *)0x800000024621B7F0;
          SExpPrinter.push(_:)(v362);
          if ((v360 & 1) == 0)
          {
            *(void *)&unsigned long long v575 = 0;
            *((void *)&v575 + 1) = 0xE000000000000000;
            v364._uint64_t countAndFlagsBits = 0x2065756C617628;
            v364._object = (void *)0xE700000000000000;
            String.append(_:)(v364);
            specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v357, v358, v359);
            v365._uint64_t countAndFlagsBits = 41;
            v365._object = (void *)0xE100000000000000;
            String.append(_:)(v365);
            Swift::String v366 = (Swift::String)v575;
            if (a1[2])
            {
              v367._uint64_t countAndFlagsBits = 10;
              v367._object = (void *)0xE100000000000000;
              String.append(_:)(v367);
              uint64_t v368 = a1[3];
              v369 = (void *)a1[4];
              swift_bridgeObjectRetain();
              v370._uint64_t countAndFlagsBits = v368;
              v370._object = v369;
              String.append(_:)(v370);
              swift_bridgeObjectRelease();
            }
            else
            {
              v528._uint64_t countAndFlagsBits = 32;
              v528._object = (void *)0xE100000000000000;
              String.append(_:)(v528);
            }
            String.append(_:)(v366);
            uint64_t v363 = swift_bridgeObjectRelease();
          }
          if (v361)
          {
            strcpy((char *)v589, "(animation ");
            HIDWORD(v589[0]._object) = -352321536;
            (*(void (**)(unsigned long long *__return_ptr, uint64_t))(*(void *)v361 + 88))(&v575, v363);
            type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
            swift_retain();
            v529._uint64_t countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v529);
            swift_bridgeObjectRelease();
            v530._uint64_t countAndFlagsBits = 41;
            v530._object = (void *)0xE100000000000000;
            String.append(_:)(v530);
            Swift::String v531 = v589[0];
            if (a1[2])
            {
              v532._uint64_t countAndFlagsBits = 10;
              v532._object = (void *)0xE100000000000000;
              String.append(_:)(v532);
              uint64_t v533 = a1[3];
              v534 = (void *)a1[4];
              swift_bridgeObjectRetain();
              v535._uint64_t countAndFlagsBits = v533;
              v535._object = v534;
              String.append(_:)(v535);
              swift_bridgeObjectRelease();
            }
            else
            {
              v536._uint64_t countAndFlagsBits = 32;
              v536._object = (void *)0xE100000000000000;
              String.append(_:)(v536);
            }
            String.append(_:)(v531);
            swift_release();
            swift_bridgeObjectRelease();
          }
          uint64_t v537 = a1[2];
          if (!v537) {
            goto LABEL_285;
          }
          BOOL v95 = __OFSUB__(v537, 1);
          uint64_t v538 = v537 - 1;
          if (v95) {
            goto LABEL_325;
          }
          a1[2] = v538;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_285:
          v539._uint64_t countAndFlagsBits = 41;
          v539._object = (void *)0xE100000000000000;
          String.append(_:)(v539);
          swift_release();
          goto LABEL_293;
        case 0x12:
          goto LABEL_149;
        case 0x13:
          if (!(v573 | v571)) {
            goto LABEL_293;
          }
          uint64_t v371 = 32;
          unint64_t v372 = 0xE100000000000000;
          if (v573 ^ 1 | v571)
          {
            String.append(_:)(*(Swift::String *)&v371);
            unint64_t v374 = 0xD000000000000013;
            v482 = "#:compositing-group";
            goto LABEL_250;
          }
          String.append(_:)(*(Swift::String *)&v371);
          v243 = "#:geometry-group";
LABEL_155:
          unint64_t v373 = (unint64_t)(v243 - 32) | 0x8000000000000000;
          unint64_t v374 = 0xD000000000000010;
          goto LABEL_292;
        default:
          *(void *)&unsigned long long v575 = 0;
          *((void *)&v575 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          swift_bridgeObjectRelease();
          *(void *)&unsigned long long v575 = 0xD000000000000011;
          *((void *)&v575 + 1) = 0x800000024621B9B0;
          if (v573) {
            uint64_t v60 = 1702195828;
          }
          else {
            uint64_t v60 = 0x65736C6166;
          }
          if (v573) {
            unint64_t v61 = 0xE400000000000000;
          }
          else {
            unint64_t v61 = 0xE500000000000000;
          }
          unint64_t v62 = v61;
          String.append(_:)(*(Swift::String *)&v60);
          swift_bridgeObjectRelease();
LABEL_112:
          Swift::String v245 = (Swift::String)v575;
          v246._uint64_t countAndFlagsBits = 32;
          v246._object = (void *)0xE100000000000000;
          String.append(_:)(v246);
          String.append(_:)(v245);
          swift_bridgeObjectRelease();
          goto LABEL_293;
      }
      goto LABEL_270;
    case 2uLL:
      unint64_t v63 = v573;
      outlined copy of DisplayList.Item.Value(v573, v571);
      v64._uint64_t countAndFlagsBits = 0x736574617473;
      v64._object = (void *)0xE600000000000000;
      SExpPrinter.push(_:)(v64);
      *(void *)&long long v570 = specialized Array._getCount()(v63);
      if (!(void)v570) {
        goto LABEL_44;
      }
      uint64_t v65 = 0;
      *(void *)&long long v569 = v573 + 32;
      v572._uint64_t countAndFlagsBits = (uint64_t)(a1 + 3);
      uint64_t v66 = MEMORY[0x263F8E8F8];
      uint64_t v67 = MEMORY[0x263F8E960];
      *(void *)&long long v568 = 0xD000000000000015;
      uint64_t v567 = 0x800000024621B7D0;
      while (2)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v65, 1, v573);
        uint64_t v69 = v65 + 1;
        if (!__OFADD__(v65, 1))
        {
          uint64_t v70 = (int *)(v569 + 40 * v65);
          uint64_t v71 = *((void *)v70 + 3);
          int v73 = v70[3];
          int v72 = v70[4];
          int v75 = v70[1];
          int v74 = v70[2];
          int v76 = *v70;
          *(void *)&unsigned long long v575 = 0x206574617473;
          *((void *)&v575 + 1) = 0xE600000000000000;
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v77 = swift_allocObject();
          uint64_t v78 = specialized static Array._adoptStorage(_:count:)(v77, 5);
          *(void *)(v79 + 24) = v66;
          *(void *)(v79 + 32) = v67;
          *(_DWORD *)uint64_t v79 = v72;
          *(void *)(v79 + 64) = v66;
          *(void *)(v79 + 72) = v67;
          *(_DWORD *)(v79 + 40) = v73;
          *(void *)(v79 + 104) = v66;
          *(void *)(v79 + 112) = v67;
          *(_DWORD *)(v79 + 80) = v74;
          *(void *)(v79 + 144) = v66;
          *(void *)(v79 + 152) = v67;
          *(_DWORD *)(v79 + 120) = v75;
          *(void *)(v79 + 184) = v66;
          *(void *)(v79 + 192) = v67;
          *(_DWORD *)(v79 + 160) = v76;
          _ViewInputs.base.modify(v78, v79);
          swift_bridgeObjectRetain();
          v80._uint64_t countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v80);
          swift_bridgeObjectRelease();
          int v41 = (char *)*((void *)&v575 + 1);
          unint64_t v63 = v575;
          unint64_t v35 = a1[2];
          if (v35)
          {
            v81._uint64_t countAndFlagsBits = 10;
            v81._object = (void *)0xE100000000000000;
            String.append(_:)(v81);
            uint64_t v82 = a1[3];
            long long v83 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v84._uint64_t countAndFlagsBits = v82;
            v84._object = v83;
            String.append(_:)(v84);
            swift_bridgeObjectRelease();
            v85._uint64_t countAndFlagsBits = 40;
            v85._object = (void *)0xE100000000000000;
            String.append(_:)(v85);
            v86._uint64_t countAndFlagsBits = v63;
            v86._object = v41;
            String.append(_:)(v86);
            if (__OFADD__(v35, 1))
            {
              __break(1u);
              goto LABEL_307;
            }
            a1[2] = v35 + 1;
            uint64_t v87 = 8224;
            unint64_t v88 = 0xE200000000000000;
          }
          else
          {
            v89._uint64_t countAndFlagsBits = 40;
            v89._object = (void *)0xE100000000000000;
            String.append(_:)(v89);
            uint64_t v87 = v63;
            unint64_t v88 = (unint64_t)v41;
          }
          String.append(_:)(*(Swift::String *)&v87);
          swift_bridgeObjectRelease();
          uint64_t v90 = specialized Array._getCount()(v71);
          if (!v90)
          {
            swift_bridgeObjectRelease();
            uint64_t v94 = a1[2];
            if (!v94) {
              goto LABEL_24;
            }
            goto LABEL_37;
          }
          int v41 = (char *)v90;
          if (v90 >= 1)
          {
            swift_bridgeObjectRetain();
            unint64_t v63 = v71 + 100;
            do
            {
              __int16 v91 = *(_WORD *)(v63 - 4);
              char v92 = *(unsigned char *)(v63 - 2);
              int v93 = *(_DWORD *)v63;
              unsigned long long v575 = *(_OWORD *)(v63 - 68);
              long long v576 = *(_OWORD *)(v63 - 52);
              long long v577 = *(_OWORD *)(v63 - 36);
              long long v578 = *(_OWORD *)(v63 - 20);
              BYTE2(v579) = v92;
              LOWORD(v579) = v91;
              HIDWORD(v579) = v93;
              DisplayList.Item.print(into:)(a1);
              v63 += 72;
              --v41;
            }
            while (v41);
            swift_bridgeObjectRelease_n();
            uint64_t v94 = a1[2];
            if (!v94)
            {
LABEL_24:
              v68._uint64_t countAndFlagsBits = 41;
              v68._object = (void *)0xE100000000000000;
              String.append(_:)(v68);
              uint64_t v65 = v69;
              if (v69 == (void)v570) {
                goto LABEL_44;
              }
              continue;
            }
LABEL_37:
            BOOL v95 = __OFSUB__(v94, 1);
            uint64_t v96 = v94 - 1;
            if (!v95)
            {
              a1[2] = v96;
              unint64_t v97 = a1[4];
              if ((v97 & 0x2000000000000000) != 0) {
                unint64_t v63 = HIBYTE(v97) & 0xF;
              }
              else {
                unint64_t v63 = a1[3] & 0xFFFFFFFFFFFFLL;
              }
              unint64_t v98 = String.index(_:offsetBy:limitedBy:)();
              if (v99)
              {
LABEL_327:
                __break(1u);
                JUMPOUT(0x245A62C3CLL);
              }
              if (4 * v63 >= v98 >> 14)
              {
                String.removeSubrange(_:)();
                goto LABEL_24;
              }
              __break(1u);
LABEL_44:
              outlined consume of DisplayList.Item.Value(v573, v571);
              uint64_t v100 = a1[2];
              if (v100)
              {
                BOOL v95 = __OFSUB__(v100, 1);
                uint64_t v101 = v100 - 1;
                if (v95)
                {
LABEL_312:
                  __break(1u);
LABEL_313:
                  __break(1u);
LABEL_314:
                  __break(1u);
LABEL_315:
                  __break(1u);
LABEL_316:
                  __break(1u);
LABEL_317:
                  __break(1u);
                  goto LABEL_318;
                }
                a1[2] = v101;
                specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
              }
              v102._uint64_t countAndFlagsBits = 41;
              v102._object = (void *)0xE100000000000000;
              String.append(_:)(v102);
              uint64_t v103 = a1[2];
              if (!v103) {
                goto LABEL_305;
              }
              goto LABEL_303;
            }
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
            goto LABEL_310;
          }
LABEL_307:
          __break(1u);
          goto LABEL_308;
        }
        break;
      }
      __break(1u);
LABEL_269:
      v519._uint64_t countAndFlagsBits = 32;
      v519._object = (void *)0xE100000000000000;
      String.append(_:)(v519);
LABEL_270:
      v520._uint64_t countAndFlagsBits = (uint64_t)v41;
      v520._object = (void *)v63;
      String.append(_:)(v520);
      swift_bridgeObjectRelease();
LABEL_271:
      if (*(double *)&v13 != 0.0 || v14 != 0.0)
      {
        *(void *)&unsigned long long v575 = 0;
        *((void *)&v575 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        v521._object = (void *)0x800000024621B870;
        v521._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v521);
        v589[0]._uint64_t countAndFlagsBits = v13;
        *(double *)&v589[0]._object = v14;
        type metadata accessor for CGSize(0);
        _print_unlocked<A, B>(_:_:)();
        v522._uint64_t countAndFlagsBits = 41;
        v522._object = (void *)0xE100000000000000;
        String.append(_:)(v522);
        Swift::String v523 = (Swift::String)v575;
        if (a1[2])
        {
          v524._uint64_t countAndFlagsBits = 10;
          v524._object = (void *)0xE100000000000000;
          String.append(_:)(v524);
          uint64_t v525 = a1[3];
          v526 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v527._uint64_t countAndFlagsBits = v525;
          v527._object = v526;
          String.append(_:)(v527);
          swift_bridgeObjectRelease();
        }
        else
        {
          v540._uint64_t countAndFlagsBits = 32;
          v540._object = (void *)0xE100000000000000;
          String.append(_:)(v540);
        }
        String.append(_:)(v523);
        swift_bridgeObjectRelease();
      }
      uint64_t v541 = a1[2];
      if (v541)
      {
        BOOL v95 = __OFSUB__(v541, 1);
        uint64_t v340 = v541 - 1;
        if (v95)
        {
LABEL_326:
          __break(1u);
          goto LABEL_327;
        }
LABEL_290:
        a1[2] = v340;
        specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      }
LABEL_291:
      unint64_t v374 = 41;
      unint64_t v373 = 0xE100000000000000;
LABEL_292:
      String.append(_:)(*(Swift::String *)&v374);
LABEL_293:
      uint64_t v542 = v566;
      uint64_t v543 = specialized Array._getCount()(v566);
      if (v543)
      {
        uint64_t v544 = v543;
        if (v543 < 1)
        {
LABEL_310:
          __break(1u);
          goto LABEL_311;
        }
        swift_bridgeObjectRetain();
        v545 = (_DWORD *)(v542 + 100);
        do
        {
          __int16 v546 = *((_WORD *)v545 - 2);
          char v547 = *((unsigned char *)v545 - 2);
          int v548 = *v545;
          unsigned long long v575 = *(_OWORD *)(v545 - 17);
          long long v576 = *(_OWORD *)(v545 - 13);
          long long v577 = *(_OWORD *)(v545 - 9);
          long long v578 = *(_OWORD *)(v545 - 5);
          BYTE2(v579) = v547;
          LOWORD(v579) = v546;
          HIDWORD(v579) = v548;
          DisplayList.Item.print(into:)(a1);
          v545 += 18;
          --v544;
        }
        while (v544);
        swift_bridgeObjectRelease_n();
        uint64_t v549 = a1[2];
        if (!v549)
        {
LABEL_302:
          v551._uint64_t countAndFlagsBits = 41;
          v551._object = (void *)0xE100000000000000;
          String.append(_:)(v551);
          outlined consume of DisplayList.Effect(v573, v571, v35);
          uint64_t v103 = a1[2];
          if (v103) {
            goto LABEL_303;
          }
          goto LABEL_305;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v549 = a1[2];
        if (!v549) {
          goto LABEL_302;
        }
      }
      BOOL v95 = __OFSUB__(v549, 1);
      uint64_t v550 = v549 - 1;
      if (v95)
      {
LABEL_311:
        __break(1u);
        goto LABEL_312;
      }
      a1[2] = v550;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      goto LABEL_302;
    case 3uLL:
      goto LABEL_215;
    default:
      *(void *)&unsigned long long v575 = 0;
      *((void *)&v575 + 1) = 0xE000000000000000;
      __int16 v49 = v571;
      outlined copy of DisplayList.Item.Value(v573, v571);
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)&v575, "(content-seed ");
      HIBYTE(v575) = -18;
      LOWORD(v589[0]._countAndFlagsBits) = v49;
      v50._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 41;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      uint64_t v53 = (char *)*((void *)&v575 + 1);
      unint64_t v52 = (_DWORD *)v575;
      if (a1[2])
      {
        v54._uint64_t countAndFlagsBits = 10;
        v54._object = (void *)0xE100000000000000;
        String.append(_:)(v54);
        uint64_t v55 = a1[3];
        uint64_t v56 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v57._uint64_t countAndFlagsBits = v55;
        v57._object = v56;
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
      }
      else
      {
        v104._uint64_t countAndFlagsBits = 32;
        v104._object = (void *)0xE100000000000000;
        String.append(_:)(v104);
      }
      break;
  }
  v105._uint64_t countAndFlagsBits = (uint64_t)v52;
  v105._object = v53;
  String.append(_:)(v105);
  swift_bridgeObjectRelease();
  switch(v573 >> 60)
  {
    case 1uLL:
      float v115 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      float v116 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
      float v117 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      float v118 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
      strcpy((char *)&v575, "(color ");
      *((void *)&v575 + 1) = 0xE700000000000000;
      outlined copy of DisplayList.Item.Value(v573, v571);
      Color.Resolved.description.getter(v115, v116, v117, v118);
      String.append(_:)(v119);
      swift_bridgeObjectRelease();
      v120._uint64_t countAndFlagsBits = 41;
      v120._object = (void *)0xE100000000000000;
      String.append(_:)(v120);
      Swift::String v121 = (Swift::String)v575;
      if (a1[2])
      {
        v122._uint64_t countAndFlagsBits = 10;
        v122._object = (void *)0xE100000000000000;
        String.append(_:)(v122);
        uint64_t v123 = a1[3];
        uint64_t v124 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v125._uint64_t countAndFlagsBits = v123;
        v125._object = v124;
        String.append(_:)(v125);
        swift_bridgeObjectRelease();
      }
      else
      {
        v394._uint64_t countAndFlagsBits = 32;
        v394._object = (void *)0xE100000000000000;
        String.append(_:)(v394);
      }
      String.append(_:)(v121);
      unint64_t v395 = v573;
      unint64_t v396 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      goto LABEL_200;
    case 2uLL:
      float v126 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      float v127 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
      float v128 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      float v129 = *(float *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
      uint64_t v130 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      outlined copy of DisplayList.Item.Value(v573, v571);
      v131._uint64_t countAndFlagsBits = 0x6F656C656D616863;
      v131._object = (void *)0xEF726F6C6F632D6ELL;
      SExpPrinter.push(_:)(v131);
      strcpy((char *)&v575, "(color ");
      *((void *)&v575 + 1) = 0xE700000000000000;
      Color.Resolved.description.getter(v126, v127, v128, v129);
      String.append(_:)(v132);
      swift_bridgeObjectRelease();
      v133._uint64_t countAndFlagsBits = 41;
      v133._object = (void *)0xE100000000000000;
      String.append(_:)(v133);
      Swift::String v134 = (Swift::String)v575;
      if (a1[2])
      {
        v135._uint64_t countAndFlagsBits = 10;
        v135._object = (void *)0xE100000000000000;
        String.append(_:)(v135);
        uint64_t v136 = a1[3];
        uint64_t v137 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v138._uint64_t countAndFlagsBits = v136;
        v138._object = v137;
        String.append(_:)(v138);
        swift_bridgeObjectRelease();
      }
      else
      {
        v397._uint64_t countAndFlagsBits = 32;
        v397._object = (void *)0xE100000000000000;
        String.append(_:)(v397);
      }
      String.append(_:)(v134);
      swift_bridgeObjectRelease();
      strcpy((char *)&v575, "(filters ");
      WORD5(v575) = 0;
      HIDWORD(v575) = -385875968;
      v398._uint64_t countAndFlagsBits = MEMORY[0x24C522DB0](v130, &type metadata for GraphicsFilter);
      String.append(_:)(v398);
      swift_bridgeObjectRelease();
      v399._uint64_t countAndFlagsBits = 41;
      v399._object = (void *)0xE100000000000000;
      String.append(_:)(v399);
      object = (void *)*((void *)&v575 + 1);
      uint64_t v400 = v575;
      if (a1[2])
      {
        v402._uint64_t countAndFlagsBits = 10;
        v402._object = (void *)0xE100000000000000;
        String.append(_:)(v402);
        uint64_t v403 = a1[3];
        v404 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v405._uint64_t countAndFlagsBits = v403;
        v405._object = v404;
        String.append(_:)(v405);
        swift_bridgeObjectRelease();
      }
      else
      {
        v438._uint64_t countAndFlagsBits = 32;
        v438._object = (void *)0xE100000000000000;
        String.append(_:)(v438);
      }
      v439._uint64_t countAndFlagsBits = v400;
      v439._object = object;
      String.append(_:)(v439);
      swift_bridgeObjectRelease();
      uint64_t v440 = a1[2];
      if (!v440) {
        goto LABEL_207;
      }
      BOOL v95 = __OFSUB__(v440, 1);
      uint64_t v221 = v440 - 1;
      if (!v95) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_190:
      v441._uint64_t countAndFlagsBits = 32;
      v441._object = (void *)0xE100000000000000;
      String.append(_:)(v441);
LABEL_191:
      v442._uint64_t countAndFlagsBits = v400;
      v442._object = object;
      String.append(_:)(v442);
      swift_bridgeObjectRelease();
      v589[0]._uint64_t countAndFlagsBits = 0;
      v589[0]._object = (void *)0xE000000000000000;
      v443._uint64_t countAndFlagsBits = 0x20656C79747328;
      v443._object = (void *)0xE700000000000000;
      String.append(_:)(v443);
      LOBYTE(v587[0]) = v30;
      BYTE1(v587[0]) = v35;
      _print_unlocked<A, B>(_:_:)();
      v444._uint64_t countAndFlagsBits = 41;
      v444._object = (void *)0xE100000000000000;
      String.append(_:)(v444);
      Swift::String v445 = v589[0];
      if (a1[2])
      {
        v446._uint64_t countAndFlagsBits = 10;
        v446._object = (void *)0xE100000000000000;
        String.append(_:)(v446);
        uint64_t v447 = a1[3];
        v448 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v449._uint64_t countAndFlagsBits = v447;
        v449._object = v448;
        String.append(_:)(v449);
        swift_bridgeObjectRelease();
      }
      else
      {
        v459._uint64_t countAndFlagsBits = 32;
        v459._object = (void *)0xE100000000000000;
        String.append(_:)(v459);
      }
      String.append(_:)(v445);
      swift_bridgeObjectRelease();
      uint64_t v460 = a1[2];
      if (!v460) {
        goto LABEL_212;
      }
      BOOL v95 = __OFSUB__(v460, 1);
      uint64_t v461 = v460 - 1;
      if (v95) {
        goto LABEL_319;
      }
      a1[2] = v461;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_212:
      v462._uint64_t countAndFlagsBits = 41;
      v462._object = (void *)0xE100000000000000;
      String.append(_:)(v462);
      uint64_t v151 = v573;
      unint64_t v152 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      swift_release();
      v454 = (Swift::String *)&v575;
LABEL_213:
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v454, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_214;
    case 3uLL:
      uint64_t v139 = *(void **)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      char v140 = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      outlined copy of DisplayList.Item.Value(v573, v571);
      outlined copy of GraphicsImage.Contents?(v139, v140);
      v141._uint64_t countAndFlagsBits = 0x6567616D69;
      v141._object = (void *)0xE500000000000000;
      SExpPrinter.push(_:)(v141);
      strcpy((char *)&v575, "#:size (");
      BYTE9(v575) = 0;
      WORD5(v575) = 0;
      HIDWORD(v575) = -402653184;
      v142._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v142);
      swift_bridgeObjectRelease();
      v143._uint64_t countAndFlagsBits = 32;
      v143._object = (void *)0xE100000000000000;
      String.append(_:)(v143);
      v144._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v144);
      swift_bridgeObjectRelease();
      v145._uint64_t countAndFlagsBits = 41;
      v145._object = (void *)0xE100000000000000;
      String.append(_:)(v145);
      Swift::String v146 = (Swift::String)v575;
      v147._uint64_t countAndFlagsBits = 32;
      v147._object = (void *)0xE100000000000000;
      String.append(_:)(v147);
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      uint64_t v148 = a1[2];
      if (!v148) {
        goto LABEL_60;
      }
      BOOL v95 = __OFSUB__(v148, 1);
      uint64_t v149 = v148 - 1;
      if (v95) {
        goto LABEL_313;
      }
      a1[2] = v149;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_60:
      v150._uint64_t countAndFlagsBits = 41;
      v150._object = (void *)0xE100000000000000;
      String.append(_:)(v150);
      uint64_t v151 = v573;
      unint64_t v152 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      outlined consume of GraphicsImage.Contents?(v139, v140);
      goto LABEL_214;
    case 4uLL:
      long long v153 = *(_OWORD *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      unsigned long long v575 = *(_OWORD *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v576 = v153;
      LOBYTE(v577) = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v154 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      char v30 = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      LOBYTE(v35) = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
      outlined copy of DisplayList.Item.Value(v573, v571);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v575, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      swift_retain();
      v155._uint64_t countAndFlagsBits = 0x6570616873;
      v155._object = (void *)0xE500000000000000;
      SExpPrinter.push(_:)(v155);
      v589[0]._uint64_t countAndFlagsBits = 0x206874617028;
      v589[0]._object = (void *)0xE600000000000000;
      uint64_t v156 = Path.cgPath.getter();
      uint64_t v157 = (void *)_CGPathCopyDescription(v156, 0.0);

      uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v160 = v159;

      v161._uint64_t countAndFlagsBits = v158;
      v161._object = v160;
      String.append(_:)(v161);
      swift_bridgeObjectRelease();
      v162._uint64_t countAndFlagsBits = 41;
      v162._object = (void *)0xE100000000000000;
      String.append(_:)(v162);
      Swift::String v163 = v589[0];
      if (a1[2])
      {
        v164._uint64_t countAndFlagsBits = 10;
        v164._object = (void *)0xE100000000000000;
        String.append(_:)(v164);
        uint64_t v165 = a1[3];
        v166 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v167._uint64_t countAndFlagsBits = v165;
        v167._object = v166;
        String.append(_:)(v167);
        swift_bridgeObjectRelease();
      }
      else
      {
        v406._uint64_t countAndFlagsBits = 32;
        v406._object = (void *)0xE100000000000000;
        String.append(_:)(v406);
      }
      String.append(_:)(v163);
      swift_bridgeObjectRelease();
      v589[0]._uint64_t countAndFlagsBits = 0;
      v589[0]._object = (void *)0xE000000000000000;
      v407._uint64_t countAndFlagsBits = 0x20746E69617028;
      v407._object = (void *)0xE700000000000000;
      String.append(_:)(v407);
      *(void *)&v587[0] = v154;
      type metadata accessor for AnyResolvedPaint();
      _print_unlocked<A, B>(_:_:)();
      v408._uint64_t countAndFlagsBits = 41;
      v408._object = (void *)0xE100000000000000;
      String.append(_:)(v408);
      object = v589[0]._object;
      uint64_t v400 = v589[0]._countAndFlagsBits;
      if (!a1[2]) {
        goto LABEL_190;
      }
      v409._uint64_t countAndFlagsBits = 10;
      v409._object = (void *)0xE100000000000000;
      String.append(_:)(v409);
      uint64_t v410 = a1[3];
      v411 = (void *)a1[4];
      swift_bridgeObjectRetain();
      v412._uint64_t countAndFlagsBits = v410;
      v412._object = v411;
      String.append(_:)(v412);
      swift_bridgeObjectRelease();
      goto LABEL_191;
    case 5uLL:
      Swift::String v168 = *(Swift::String *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      v589[0] = *(Swift::String *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v589[1] = v168;
      char v590 = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v169 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      double v170 = *(void **)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      uint64_t v171 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
      uint64_t v172 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      uint64_t v173 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
      int v174 = *(_DWORD *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
      char v175 = *(unsigned char *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x64);
      outlined copy of DisplayList.Item.Value(v573, v571);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v589, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      v176._uint64_t countAndFlagsBits = 0x776F64616873;
      v176._object = (void *)0xE600000000000000;
      SExpPrinter.push(_:)(v176);
      *(void *)&unsigned long long v575 = 0x206874617028;
      *((void *)&v575 + 1) = 0xE600000000000000;
      v177 = Path.cgPath.getter();
      v178 = (void *)_CGPathCopyDescription(v177, 0.0);

      uint64_t v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v181 = v180;

      v182._uint64_t countAndFlagsBits = v179;
      v182._object = v181;
      String.append(_:)(v182);
      swift_bridgeObjectRelease();
      v183._uint64_t countAndFlagsBits = 41;
      v183._object = (void *)0xE100000000000000;
      String.append(_:)(v183);
      Swift::String v184 = (Swift::String)v575;
      if (a1[2])
      {
        v185._uint64_t countAndFlagsBits = 10;
        v185._object = (void *)0xE100000000000000;
        String.append(_:)(v185);
        uint64_t v186 = a1[3];
        v187 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v188._uint64_t countAndFlagsBits = v186;
        v188._object = v187;
        String.append(_:)(v188);
        swift_bridgeObjectRelease();
      }
      else
      {
        v413._uint64_t countAndFlagsBits = 32;
        v413._object = (void *)0xE100000000000000;
        String.append(_:)(v413);
      }
      String.append(_:)(v184);
      swift_bridgeObjectRelease();
      *(void *)&v587[0] = 0;
      *((void *)&v587[0] + 1) = 0xE000000000000000;
      v414._uint64_t countAndFlagsBits = 0x20776F6461687328;
      v414._object = (void *)0xE800000000000000;
      String.append(_:)(v414);
      *(void *)&unsigned long long v575 = v169;
      *((void *)&v575 + 1) = v170;
      *(void *)&long long v576 = v171;
      *((void *)&v576 + 1) = v172;
      *(void *)&long long v577 = v173;
      DWORD2(v577) = v174;
      BYTE12(v577) = v175;
      _print_unlocked<A, B>(_:_:)();
      v415._uint64_t countAndFlagsBits = 41;
      v415._object = (void *)0xE100000000000000;
      String.append(_:)(v415);
      Swift::String v416 = (Swift::String)v587[0];
      if (a1[2])
      {
        v417._uint64_t countAndFlagsBits = 10;
        v417._object = (void *)0xE100000000000000;
        String.append(_:)(v417);
        uint64_t v418 = a1[3];
        v419 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v420._uint64_t countAndFlagsBits = v418;
        v420._object = v419;
        String.append(_:)(v420);
        swift_bridgeObjectRelease();
      }
      else
      {
        v450._uint64_t countAndFlagsBits = 32;
        v450._object = (void *)0xE100000000000000;
        String.append(_:)(v450);
      }
      String.append(_:)(v416);
      swift_bridgeObjectRelease();
      uint64_t v451 = a1[2];
      if (!v451) {
        goto LABEL_197;
      }
      BOOL v95 = __OFSUB__(v451, 1);
      uint64_t v452 = v451 - 1;
      if (v95) {
        goto LABEL_317;
      }
      a1[2] = v452;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_197:
      v453._uint64_t countAndFlagsBits = 41;
      v453._object = (void *)0xE100000000000000;
      String.append(_:)(v453);
      uint64_t v151 = v573;
      unint64_t v152 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      v454 = v589;
      goto LABEL_213;
    case 6uLL:
      v189._uint64_t countAndFlagsBits = 0x6D726F6674616C70;
      v189._object = (void *)0xED0000776569762DLL;
      SExpPrinter.push(_:)(v189);
      uint64_t v190 = a1[2];
      if (!v190) {
        goto LABEL_72;
      }
      BOOL v95 = __OFSUB__(v190, 1);
      uint64_t v191 = v190 - 1;
      if (!v95) {
        goto LABEL_71;
      }
      __break(1u);
LABEL_69:
      v192._uint64_t countAndFlagsBits = 0x6D726F6674616C70;
      v192._object = (void *)0xEE00726579616C2DLL;
      SExpPrinter.push(_:)(v192);
      uint64_t v193 = a1[2];
      if (!v193) {
        goto LABEL_72;
      }
      BOOL v95 = __OFSUB__(v193, 1);
      uint64_t v191 = v193 - 1;
      if (v95) {
        goto LABEL_314;
      }
LABEL_71:
      a1[2] = v191;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_72:
      v194._uint64_t countAndFlagsBits = 41;
      v194._object = (void *)0xE100000000000000;
      String.append(_:)(v194);
      uint64_t v195 = v573;
      unint64_t v196 = v571;
LABEL_201:
      outlined consume of DisplayList.Item.Value(v195, v196);
      uint64_t v103 = a1[2];
      if (!v103) {
        goto LABEL_305;
      }
      goto LABEL_303;
    case 7uLL:
      goto LABEL_69;
    case 8uLL:
      uint64_t v197 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v198 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      v199 = *(void **)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      *(void *)&unsigned long long v575 = 0;
      *((void *)&v575 + 1) = 0xE000000000000000;
      outlined copy of DisplayList.Item.Value(v573, v571);
      swift_retain();
      swift_retain();
      _StringGuts.grow(_:)(21);
      v200._uint64_t countAndFlagsBits = 0x22207478657428;
      v200._object = (void *)0xE700000000000000;
      String.append(_:)(v200);
      v201 = *(void **)(v197 + 216);
      swift_retain();
      if (v201)
      {
        id v202 = objc_msgSend(v201, sel_string);
        uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v205 = v204;
      }
      else
      {
        uint64_t v203 = 0;
        v205 = (void *)0xE000000000000000;
      }
      v421._uint64_t countAndFlagsBits = v203;
      v421._object = v205;
      String.append(_:)(v421);
      swift_release();
      swift_bridgeObjectRelease();
      v422._uint64_t countAndFlagsBits = 0x657A69733A232022;
      v422._object = (void *)0xE900000000000020;
      String.append(_:)(v422);
      v589[0]._uint64_t countAndFlagsBits = v198;
      v589[0]._object = v199;
      type metadata accessor for CGSize(0);
      _print_unlocked<A, B>(_:_:)();
      v423._uint64_t countAndFlagsBits = 41;
      v423._object = (void *)0xE100000000000000;
      String.append(_:)(v423);
      Swift::String v424 = (Swift::String)v575;
      if (a1[2])
      {
        v425._uint64_t countAndFlagsBits = 10;
        v425._object = (void *)0xE100000000000000;
        String.append(_:)(v425);
        uint64_t v426 = a1[3];
        v427 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v428._uint64_t countAndFlagsBits = v426;
        v428._object = v427;
        String.append(_:)(v428);
        swift_bridgeObjectRelease();
      }
      else
      {
        v455._uint64_t countAndFlagsBits = 32;
        v455._object = (void *)0xE100000000000000;
        String.append(_:)(v455);
      }
      String.append(_:)(v424);
      unint64_t v395 = v573;
      unint64_t v396 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      swift_release();
      swift_release();
LABEL_200:
      swift_bridgeObjectRelease();
      uint64_t v195 = v395;
      unint64_t v196 = v396;
      goto LABEL_201;
    case 9uLL:
      uint64_t v206 = *(void *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      double v208 = *(double *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      double v207 = *(double *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      outlined copy of DisplayList.Item.Value(v573, v571);
      v209._object = (void *)0xE900000000000064;
      v209._uint64_t countAndFlagsBits = 0x656E657474616C66;
      SExpPrinter.push(_:)(v209);
      if (v208 != 0.0 || v207 != 0.0)
      {
        *(void *)&unsigned long long v575 = 0;
        *((void *)&v575 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v575, "#:origin (");
        BYTE11(v575) = 0;
        HIDWORD(v575) = -369098752;
        v210._uint64_t countAndFlagsBits = Double.description.getter();
        String.append(_:)(v210);
        swift_bridgeObjectRelease();
        v211._uint64_t countAndFlagsBits = 32;
        v211._object = (void *)0xE100000000000000;
        String.append(_:)(v211);
        v212._uint64_t countAndFlagsBits = Double.description.getter();
        String.append(_:)(v212);
        swift_bridgeObjectRelease();
        v213._uint64_t countAndFlagsBits = 41;
        v213._object = (void *)0xE100000000000000;
        String.append(_:)(v213);
        uint64_t v53 = (char *)*((void *)&v575 + 1);
        unint64_t v52 = (_DWORD *)v575;
        v214._uint64_t countAndFlagsBits = 32;
        v214._object = (void *)0xE100000000000000;
        String.append(_:)(v214);
        v215._uint64_t countAndFlagsBits = (uint64_t)v52;
        v215._object = v53;
        String.append(_:)(v215);
        swift_bridgeObjectRelease();
      }
      uint64_t v216 = specialized Array._getCount()(v206);
      if (!v216) {
        goto LABEL_83;
      }
      uint64_t v53 = (char *)v216;
      if (v216 < 1) {
        goto LABEL_315;
      }
      swift_bridgeObjectRetain();
      unint64_t v52 = (_DWORD *)(v206 + 100);
      do
      {
        __int16 v217 = *((_WORD *)v52 - 2);
        char v218 = *((unsigned char *)v52 - 2);
        int v219 = *v52;
        unsigned long long v575 = *(_OWORD *)(v52 - 17);
        long long v576 = *(_OWORD *)(v52 - 13);
        long long v577 = *(_OWORD *)(v52 - 9);
        long long v578 = *(_OWORD *)(v52 - 5);
        BYTE2(v579) = v218;
        LOWORD(v579) = v217;
        HIDWORD(v579) = v219;
        DisplayList.Item.print(into:)(a1);
        v52 += 18;
        --v53;
      }
      while (v53);
      swift_bridgeObjectRelease();
LABEL_83:
      uint64_t v220 = a1[2];
      if (!v220) {
        goto LABEL_207;
      }
      BOOL v95 = __OFSUB__(v220, 1);
      uint64_t v221 = v220 - 1;
      if (!v95) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_87:
      double v107 = *(double *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      double v106 = *(double *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      int v222 = *(_DWORD *)((v573 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
      outlined copy of DisplayList.Item.Value(v573, v571);
      v223._uint64_t countAndFlagsBits = 0x676E6977617264;
      v223._object = (void *)0xE700000000000000;
      SExpPrinter.push(_:)(v223);
      if (v107 == 0.0 && v106 == 0.0)
      {
        if ((v222 & 1) == 0) {
          goto LABEL_90;
        }
      }
      else
      {
        *(void *)&unsigned long long v575 = 0;
        *((void *)&v575 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)&v575, "#:offset (");
        BYTE11(v575) = 0;
        HIDWORD(v575) = -369098752;
        v375._uint64_t countAndFlagsBits = Double.description.getter();
        String.append(_:)(v375);
        swift_bridgeObjectRelease();
        v376._uint64_t countAndFlagsBits = 32;
        v376._object = (void *)0xE100000000000000;
        String.append(_:)(v376);
        v377._uint64_t countAndFlagsBits = Double.description.getter();
        String.append(_:)(v377);
        swift_bridgeObjectRelease();
        v378._uint64_t countAndFlagsBits = 41;
        v378._object = (void *)0xE100000000000000;
        String.append(_:)(v378);
        uint64_t v53 = (char *)*((void *)&v575 + 1);
        unint64_t v52 = (_DWORD *)v575;
        v379._uint64_t countAndFlagsBits = 32;
        v379._object = (void *)0xE100000000000000;
        String.append(_:)(v379);
        v380._uint64_t countAndFlagsBits = (uint64_t)v52;
        v380._object = v53;
        String.append(_:)(v380);
        swift_bridgeObjectRelease();
        if ((v222 & 1) == 0)
        {
LABEL_90:
          if ((v222 & 0x40) == 0) {
            goto LABEL_91;
          }
          goto LABEL_158;
        }
      }
      v381._uint64_t countAndFlagsBits = 32;
      v381._object = (void *)0xE100000000000000;
      String.append(_:)(v381);
      v382._uint64_t countAndFlagsBits = 0x656C656363613A23;
      v382._object = (void *)0xED00006465746172;
      String.append(_:)(v382);
      if ((v222 & 0x40) == 0)
      {
LABEL_91:
        uint64_t v224 = a1[2];
        if (!v224) {
          goto LABEL_207;
        }
        goto LABEL_159;
      }
LABEL_158:
      v383._uint64_t countAndFlagsBits = 32;
      v383._object = (void *)0xE100000000000000;
      String.append(_:)(v383);
      v384._uint64_t countAndFlagsBits = 0x2D6168706C613A23;
      v384._object = (void *)0xEC000000796C6E6FLL;
      String.append(_:)(v384);
      uint64_t v224 = a1[2];
      if (!v224) {
        goto LABEL_207;
      }
LABEL_159:
      BOOL v95 = __OFSUB__(v224, 1);
      uint64_t v221 = v224 - 1;
      if (!v95) {
        goto LABEL_206;
      }
      __break(1u);
LABEL_162:
      v385._uint64_t countAndFlagsBits = 32;
      v385._object = (void *)0xE100000000000000;
      String.append(_:)(v385);
LABEL_163:
      v386._uint64_t countAndFlagsBits = (uint64_t)v52;
      v386._object = v53;
      String.append(_:)(v386);
      swift_bridgeObjectRelease();
      strcpy((char *)&v575, "(color ");
      *((void *)&v575 + 1) = 0xE700000000000000;
      Color.Resolved.description.getter(*(float *)&v106, *(float *)&v107, *(float *)&v11, *(float *)&v12);
      String.append(_:)(v387);
      swift_bridgeObjectRelease();
      v388._uint64_t countAndFlagsBits = 41;
      v388._object = (void *)0xE100000000000000;
      String.append(_:)(v388);
      Swift::String v389 = (Swift::String)v575;
      if (a1[2])
      {
        v390._uint64_t countAndFlagsBits = 10;
        v390._object = (void *)0xE100000000000000;
        String.append(_:)(v390);
        uint64_t v391 = a1[3];
        v392 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v393._uint64_t countAndFlagsBits = v391;
        v393._object = v392;
        String.append(_:)(v393);
        swift_bridgeObjectRelease();
      }
      else
      {
        v430._uint64_t countAndFlagsBits = 32;
        v430._object = (void *)0xE100000000000000;
        String.append(_:)(v430);
      }
      String.append(_:)(v389);
      swift_bridgeObjectRelease();
      strcpy((char *)&v575, "(filters ");
      WORD5(v575) = 0;
      HIDWORD(v575) = -385875968;
      v431._uint64_t countAndFlagsBits = MEMORY[0x24C522DB0](v8, &type metadata for GraphicsFilter);
      String.append(_:)(v431);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v432._uint64_t countAndFlagsBits = 41;
      v432._object = (void *)0xE100000000000000;
      String.append(_:)(v432);
      Swift::String v433 = (Swift::String)v575;
      if (a1[2])
      {
        v434._uint64_t countAndFlagsBits = 10;
        v434._object = (void *)0xE100000000000000;
        String.append(_:)(v434);
        uint64_t v435 = a1[3];
        v436 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v437._uint64_t countAndFlagsBits = v435;
        v437._object = v436;
        String.append(_:)(v437);
        swift_bridgeObjectRelease();
      }
      else
      {
        v456._uint64_t countAndFlagsBits = 32;
        v456._object = (void *)0xE100000000000000;
        String.append(_:)(v456);
      }
      String.append(_:)(v433);
      swift_bridgeObjectRelease();
      uint64_t v457 = a1[2];
      if (v457)
      {
        BOOL v95 = __OFSUB__(v457, 1);
        uint64_t v221 = v457 - 1;
        if (v95)
        {
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
          goto LABEL_326;
        }
LABEL_206:
        a1[2] = v221;
        specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      }
LABEL_207:
      v458._uint64_t countAndFlagsBits = 41;
      v458._object = (void *)0xE100000000000000;
      String.append(_:)(v458);
      uint64_t v151 = v573;
      unint64_t v152 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
LABEL_214:
      outlined consume of DisplayList.Item.Value(v151, v152);
LABEL_215:
      uint64_t v103 = a1[2];
      if (v103)
      {
LABEL_303:
        BOOL v95 = __OFSUB__(v103, 1);
        uint64_t v552 = v103 - 1;
        if (!v95)
        {
          a1[2] = v552;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
          goto LABEL_305;
        }
        goto LABEL_309;
      }
LABEL_305:
      v553._uint64_t countAndFlagsBits = 41;
      v553._object = (void *)0xE100000000000000;
      String.append(_:)(v553);
      return;
    case 0xAuLL:
      goto LABEL_87;
    case 0xBuLL:
      uint64_t v225 = v573;
      outlined init with copy of AnyTrackedValue((v573 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v575);
      strcpy((char *)v589, "view #:type ");
      BYTE5(v589[0]._object) = 0;
      HIWORD(v589[0]._object) = -5120;
      __swift_project_boxed_opaque_existential_1(&v575, *((uint64_t *)&v576 + 1));
      swift_getDynamicType();
      outlined copy of DisplayList.Item.Value(v225, v571);
      v226._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v226);
      swift_bridgeObjectRelease();
      SExpPrinter.push(_:)(v589[0]);
      swift_bridgeObjectRelease();
      uint64_t v227 = a1[2];
      if (!v227) {
        goto LABEL_96;
      }
      BOOL v95 = __OFSUB__(v227, 1);
      uint64_t v228 = v227 - 1;
      if (v95) {
        goto LABEL_316;
      }
      a1[2] = v228;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_96:
      v229._uint64_t countAndFlagsBits = 41;
      v229._object = (void *)0xE100000000000000;
      String.append(_:)(v229);
      uint64_t v151 = v573;
      unint64_t v152 = v571;
      outlined consume of DisplayList.Item.Value(v573, v571);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v575);
      goto LABEL_214;
    case 0xCuLL:
      *(void *)&unsigned long long v575 = 0;
      *((void *)&v575 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v575, "(placeholder ");
      HIWORD(v575) = -4864;
      v589[0]._uint64_t countAndFlagsBits = 35;
      v589[0]._object = (void *)0xE100000000000000;
      LODWORD(v587[0]) = v573;
      v230._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v230);
      swift_bridgeObjectRelease();
      String.append(_:)(v589[0]);
      swift_bridgeObjectRelease();
      v231._uint64_t countAndFlagsBits = 41;
      v231._object = (void *)0xE100000000000000;
      String.append(_:)(v231);
      Swift::String v232 = (Swift::String)v575;
      if (a1[2])
      {
        v233._uint64_t countAndFlagsBits = 10;
        v233._object = (void *)0xE100000000000000;
        String.append(_:)(v233);
        uint64_t v234 = a1[3];
        v235 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v236._uint64_t countAndFlagsBits = v234;
        v236._object = v235;
        String.append(_:)(v236);
        swift_bridgeObjectRelease();
      }
      else
      {
        v429._uint64_t countAndFlagsBits = 32;
        v429._object = (void *)0xE100000000000000;
        String.append(_:)(v429);
      }
      String.append(_:)(v232);
      outlined consume of DisplayList.Item.Value(v573, v571);
      swift_bridgeObjectRelease();
      uint64_t v103 = a1[2];
      if (!v103) {
        goto LABEL_305;
      }
      goto LABEL_303;
    default:
      LODWORD(v106) = *(_DWORD *)(v573 + 20);
      LODWORD(v107) = *(_DWORD *)(v573 + 24);
      LODWORD(v11) = *(_DWORD *)(v573 + 28);
      LODWORD(v12) = *(_DWORD *)(v573 + 32);
      uint64_t v8 = *(char **)(v573 + 40);
      outlined copy of DisplayList.Item.Value(v573, v571);
      swift_bridgeObjectRetain();
      v108._uint64_t countAndFlagsBits = 0x706F72646B636162;
      v108._object = (void *)0xE800000000000000;
      SExpPrinter.push(_:)(v108);
      *(void *)&unsigned long long v575 = 0;
      *((void *)&v575 + 1) = 0xE000000000000000;
      v109._uint64_t countAndFlagsBits = 0x20656C61637328;
      v109._object = (void *)0xE700000000000000;
      String.append(_:)(v109);
      Float.write<A>(to:)();
      v110._uint64_t countAndFlagsBits = 41;
      v110._object = (void *)0xE100000000000000;
      String.append(_:)(v110);
      uint64_t v53 = (char *)*((void *)&v575 + 1);
      unint64_t v52 = (_DWORD *)v575;
      if (!a1[2]) {
        goto LABEL_162;
      }
      v111._uint64_t countAndFlagsBits = 10;
      v111._object = (void *)0xE100000000000000;
      String.append(_:)(v111);
      uint64_t v112 = a1[3];
      long long v113 = (void *)a1[4];
      swift_bridgeObjectRetain();
      v114._uint64_t countAndFlagsBits = v112;
      v114._object = v113;
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      goto LABEL_163;
  }
}

void DisplayList.Item.printMinimally(into:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DisplayList.ArchiveIDs();
  unint64_t v311 = *(void *)(v3 - 8);
  uint64_t v312 = v3;
  MEMORY[0x270FA5388](v3);
  *(void *)&long long v309 = (char *)&v303 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DisplayList.ArchiveIDs?();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v310 = (uint64_t)&v303 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  Swift::String v313 = (uint64_t *)((char *)&v303 - v8);
  unint64_t v9 = *(void *)(v1 + 48);
  unint64_t v307 = *(void *)(v1 + 40);
  uint64_t v306 = *(void *)(v1 + 56);
  int v10 = *(unsigned __int8 *)(v1 + 66);
  int v11 = *(unsigned __int16 *)(v1 + 64);
  int v12 = *(_DWORD *)(v1 + 68);
  v316._uint64_t countAndFlagsBits = 14921;
  v316._unint64_t object = (void *)0xE200000000000000;
  LODWORD(v315._countAndFlagsBits) = v12;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  Swift::String v14 = v316;
  uint64_t v15 = a1[2];
  if (v15)
  {
    unint64_t v16 = v9;
    v17._uint64_t countAndFlagsBits = 10;
    v17._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    uint64_t v18 = a1[3];
    Swift::String v19 = (void *)a1[4];
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v18;
    v20._unint64_t object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 40;
    v21._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v14);
    uint64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_209;
    }
    a1[2] = v22;
    v23._uint64_t countAndFlagsBits = 8224;
    v23._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v23);
    unint64_t v9 = v16;
  }
  else
  {
    v24._uint64_t countAndFlagsBits = 40;
    v24._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    String.append(_:)(v14);
    uint64_t v22 = 0;
  }
  int v25 = v11 | (v10 << 16);
  swift_bridgeObjectRelease();
  uint64_t v26 = v307;
  switch(v9 >> 62)
  {
    case 1uLL:
      outlined copy of DisplayList.Item.Value(v307, v9);
      if (v22)
      {
        v31._uint64_t countAndFlagsBits = 10;
        v31._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        uint64_t v32 = a1[3];
        Swift::String v33 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v34._uint64_t countAndFlagsBits = v32;
        v34._unint64_t object = v33;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._uint64_t countAndFlagsBits = 40;
        v35._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v35);
        v36._uint64_t countAndFlagsBits = 69;
        v36._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v36);
        uint64_t v37 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_211;
        }
        a1[2] = v37;
        v38._uint64_t countAndFlagsBits = 8224;
        v38._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v38);
      }
      else
      {
        v47._uint64_t countAndFlagsBits = 40;
        v47._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        v48._uint64_t countAndFlagsBits = 69;
        v48._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v48);
        uint64_t v37 = 0;
      }
      switch(BYTE4(v9))
      {
        case 1:
          uint64_t v149 = swift_projectBox();
          uint64_t v150 = (uint64_t)v313;
          outlined init with copy of DisplayList.ArchiveIDs?(v149, (uint64_t)v313);
          uint64_t v151 = v150;
          uint64_t v152 = v310;
          outlined init with copy of DisplayList.ArchiveIDs?(v151, v310);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v311 + 48))(v152, 1, v312) == 1)
          {
            long long v153 = (void *)0xE300000000000000;
            uint64_t v154 = 7104878;
          }
          else
          {
            uint64_t v258 = v152;
            uint64_t v259 = v309;
            outlined init with take of DisplayList.ArchiveIDs(v258, v309);
            type metadata accessor for UUID();
            lazy protocol witness table accessor for type UUID and conformance UUID();
            uint64_t v154 = dispatch thunk of CustomStringConvertible.description.getter();
            long long v153 = v260;
            outlined destroy of DisplayList.ArchiveIDs?(v259, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs);
          }
          v316._uint64_t countAndFlagsBits = 14913;
          v316._unint64_t object = (void *)0xE200000000000000;
          v261._uint64_t countAndFlagsBits = v154;
          v261._unint64_t object = v153;
          String.append(_:)(v261);
          swift_bridgeObjectRelease();
          Swift::String v262 = v316;
          if (a1[2])
          {
            v263._uint64_t countAndFlagsBits = 10;
            v263._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v263);
            uint64_t v264 = a1[3];
            Swift::String v265 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v266._uint64_t countAndFlagsBits = v264;
            v266._unint64_t object = v265;
            String.append(_:)(v266);
            swift_bridgeObjectRelease();
          }
          else
          {
            v296._uint64_t countAndFlagsBits = 32;
            v296._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v296);
          }
          String.append(_:)(v262);
          swift_bridgeObjectRelease();
          outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v313, (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
          goto LABEL_187;
        case 2:
          if (v37)
          {
            v155._uint64_t countAndFlagsBits = 10;
            v155._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v155);
            uint64_t v156 = a1[3];
            uint64_t v157 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v158._uint64_t countAndFlagsBits = v156;
            v158._unint64_t object = v157;
            String.append(_:)(v158);
            swift_bridgeObjectRelease();
          }
          else
          {
            v268._uint64_t countAndFlagsBits = 32;
            v268._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v268);
          }
          uint64_t v53 = 21072;
          goto LABEL_185;
        case 3:
          if (v37)
          {
            v159._uint64_t countAndFlagsBits = 10;
            v159._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v159);
            uint64_t v160 = a1[3];
            Swift::String v161 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v162._uint64_t countAndFlagsBits = v160;
            v162._unint64_t object = v161;
            String.append(_:)(v162);
            swift_bridgeObjectRelease();
          }
          else
          {
            v269._uint64_t countAndFlagsBits = 32;
            v269._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v269);
          }
          uint64_t v53 = 18256;
          goto LABEL_185;
        case 4:
          if (v37)
          {
            v163._uint64_t countAndFlagsBits = 10;
            v163._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v163);
            uint64_t v164 = a1[3];
            uint64_t v165 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v166._uint64_t countAndFlagsBits = v164;
            v166._unint64_t object = v165;
            String.append(_:)(v166);
            swift_bridgeObjectRelease();
          }
          else
          {
            v270._uint64_t countAndFlagsBits = 32;
            v270._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v270);
          }
          uint64_t v53 = 79;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 5:
          if (v37)
          {
            v167._uint64_t countAndFlagsBits = 10;
            v167._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v167);
            uint64_t v168 = a1[3];
            uint64_t v169 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v170._uint64_t countAndFlagsBits = v168;
            v170._unint64_t object = v169;
            String.append(_:)(v170);
            swift_bridgeObjectRelease();
          }
          else
          {
            v272._uint64_t countAndFlagsBits = 32;
            v272._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v272);
          }
          uint64_t v53 = 66;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 6:
          if (v37)
          {
            v171._uint64_t countAndFlagsBits = 10;
            v171._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v171);
            uint64_t v172 = a1[3];
            uint64_t v173 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v174._uint64_t countAndFlagsBits = v172;
            v174._unint64_t object = v173;
            String.append(_:)(v174);
            swift_bridgeObjectRelease();
          }
          else
          {
            v273._uint64_t countAndFlagsBits = 32;
            v273._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v273);
          }
          uint64_t v53 = 67;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 7:
          if (v37)
          {
            v175._uint64_t countAndFlagsBits = 10;
            v175._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v175);
            uint64_t v176 = a1[3];
            v177 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v178._uint64_t countAndFlagsBits = v176;
            v178._unint64_t object = v177;
            String.append(_:)(v178);
            swift_bridgeObjectRelease();
          }
          else
          {
            v274._uint64_t countAndFlagsBits = 32;
            v274._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v274);
          }
          uint64_t v53 = 77;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 8:
          if (v37)
          {
            v179._uint64_t countAndFlagsBits = 10;
            v179._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v179);
            uint64_t v180 = a1[3];
            v181 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v182._uint64_t countAndFlagsBits = v180;
            v182._unint64_t object = v181;
            String.append(_:)(v182);
            swift_bridgeObjectRelease();
          }
          else
          {
            v275._uint64_t countAndFlagsBits = 32;
            v275._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v275);
          }
          uint64_t v53 = 84;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 9:
          if (v37)
          {
            v183._uint64_t countAndFlagsBits = 10;
            v183._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v183);
            uint64_t v184 = a1[3];
            Swift::String v185 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v186._uint64_t countAndFlagsBits = v184;
            v186._unint64_t object = v185;
            String.append(_:)(v186);
            swift_bridgeObjectRelease();
          }
          else
          {
            v276._uint64_t countAndFlagsBits = 32;
            v276._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v276);
          }
          uint64_t v53 = 70;
          unint64_t v271 = 0xE100000000000000;
          goto LABEL_186;
        case 0xA:
          if (v37)
          {
            v187._uint64_t countAndFlagsBits = 10;
            v187._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v187);
            uint64_t v188 = a1[3];
            Swift::String v189 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v190._uint64_t countAndFlagsBits = v188;
            v190._unint64_t object = v189;
            String.append(_:)(v190);
            swift_bridgeObjectRelease();
          }
          else
          {
            v277._uint64_t countAndFlagsBits = 32;
            v277._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v277);
          }
          uint64_t v53 = 20033;
          goto LABEL_185;
        case 0xB:
          if (v37)
          {
            v191._uint64_t countAndFlagsBits = 10;
            v191._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v191);
            uint64_t v192 = a1[3];
            uint64_t v193 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v194._uint64_t countAndFlagsBits = v192;
            v194._unint64_t object = v193;
            String.append(_:)(v194);
            swift_bridgeObjectRelease();
          }
          else
          {
            v278._uint64_t countAndFlagsBits = 32;
            v278._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v278);
          }
          uint64_t v53 = 21076;
          goto LABEL_185;
        case 0xC:
          outlined init with copy of AnyTrackedValue(v26 + 16, (uint64_t)&v316);
          v315._uint64_t countAndFlagsBits = 14934;
          v315._unint64_t object = (void *)0xE200000000000000;
          __swift_project_boxed_opaque_existential_1(&v316, *((uint64_t *)&v317 + 1));
          swift_getDynamicType();
          v195._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v195);
          swift_bridgeObjectRelease();
          SExpPrinter.push(_:)(v315);
          swift_bridgeObjectRelease();
          uint64_t v196 = a1[2];
          if (!v196) {
            goto LABEL_102;
          }
          BOOL v197 = __OFSUB__(v196, 1);
          uint64_t v198 = v196 - 1;
          if (v197) {
            goto LABEL_217;
          }
          a1[2] = v198;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_102:
          v199._uint64_t countAndFlagsBits = 41;
          v199._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v199);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v316);
LABEL_187:
          uint64_t v285 = *(void *)(v306 + 16);
          if (v285)
          {
            uint64_t v286 = (_DWORD *)(swift_bridgeObjectRetain() + 100);
            do
            {
              __int16 v287 = *((_WORD *)v286 - 2);
              char v288 = *((unsigned char *)v286 - 2);
              int v289 = *v286;
              Swift::String v316 = *(Swift::String *)(v286 - 17);
              long long v317 = *(_OWORD *)(v286 - 13);
              long long v318 = *(_OWORD *)(v286 - 9);
              long long v319 = *(_OWORD *)(v286 - 5);
              char v321 = v288;
              __int16 v320 = v287;
              int v322 = v289;
              DisplayList.Item.printMinimally(into:)(a1);
              v286 += 18;
              --v285;
            }
            while (v285);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t v290 = a1[2];
          if (!v290) {
            goto LABEL_194;
          }
          BOOL v197 = __OFSUB__(v290, 1);
          uint64_t v291 = v290 - 1;
          if (v197) {
            goto LABEL_213;
          }
          a1[2] = v291;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_194:
          v292._uint64_t countAndFlagsBits = 41;
          v292._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v292);
          outlined consume of DisplayList.Effect(v26, v9, SBYTE4(v9));
          break;
        case 0xD:
          if (v37)
          {
            v200._uint64_t countAndFlagsBits = 10;
            v200._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v200);
            uint64_t v201 = a1[3];
            id v202 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v203._uint64_t countAndFlagsBits = v201;
            v203._unint64_t object = v202;
            String.append(_:)(v203);
            swift_bridgeObjectRelease();
          }
          else
          {
            v279._uint64_t countAndFlagsBits = 32;
            v279._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v279);
          }
          uint64_t v53 = 22593;
          goto LABEL_185;
        case 0xE:
          if (v37)
          {
            v204._uint64_t countAndFlagsBits = 10;
            v204._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v204);
            uint64_t v205 = a1[3];
            uint64_t v206 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v207._uint64_t countAndFlagsBits = v205;
            v207._unint64_t object = v206;
            String.append(_:)(v207);
            swift_bridgeObjectRelease();
          }
          else
          {
            v280._uint64_t countAndFlagsBits = 32;
            v280._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v280);
          }
          uint64_t v53 = 19536;
          goto LABEL_185;
        case 0xF:
          unint64_t v208 = *(void *)(v26 + 16);
          unint64_t v209 = *(void *)(v26 + 24);
          int v210 = *(_DWORD *)(v26 + 32);
          v316._uint64_t countAndFlagsBits = 0;
          v316._unint64_t object = (void *)0xE000000000000000;
          v211._uint64_t countAndFlagsBits = 14920;
          v211._unint64_t object = (void *)0xE200000000000000;
          String.append(_:)(v211);
          specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v208, v209, v210);
          Swift::String v212 = v316;
          if (v37)
          {
            v213._uint64_t countAndFlagsBits = 10;
            v213._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v213);
            uint64_t v214 = a1[3];
            Swift::String v215 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v216._uint64_t countAndFlagsBits = v214;
            v216._unint64_t object = v215;
            String.append(_:)(v216);
            swift_bridgeObjectRelease();
          }
          else
          {
            v281._uint64_t countAndFlagsBits = 32;
            v281._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v281);
          }
          String.append(_:)(v212);
          swift_bridgeObjectRelease();
          goto LABEL_187;
        case 0x10:
          if (v37)
          {
            v217._uint64_t countAndFlagsBits = 10;
            v217._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v217);
            uint64_t v218 = a1[3];
            int v219 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v220._uint64_t countAndFlagsBits = v218;
            v220._unint64_t object = v219;
            String.append(_:)(v220);
            swift_bridgeObjectRelease();
          }
          else
          {
            v282._uint64_t countAndFlagsBits = 32;
            v282._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v282);
          }
          uint64_t v53 = 21065;
          goto LABEL_185;
        case 0x11:
          if (v37)
          {
            v221._uint64_t countAndFlagsBits = 10;
            v221._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v221);
            uint64_t v222 = a1[3];
            Swift::String v223 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v224._uint64_t countAndFlagsBits = v222;
            v224._unint64_t object = v223;
            String.append(_:)(v224);
            swift_bridgeObjectRelease();
          }
          else
          {
            v283._uint64_t countAndFlagsBits = 32;
            v283._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v283);
          }
          uint64_t v53 = 19529;
          goto LABEL_185;
        case 0x12:
          if (v37)
          {
            v225._uint64_t countAndFlagsBits = 10;
            v225._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v225);
            uint64_t v226 = a1[3];
            uint64_t v227 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v228._uint64_t countAndFlagsBits = v226;
            v228._unint64_t object = v227;
            String.append(_:)(v228);
            swift_bridgeObjectRelease();
          }
          else
          {
            v284._uint64_t countAndFlagsBits = 32;
            v284._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v284);
          }
          uint64_t v53 = 16713;
          goto LABEL_185;
        case 0x13:
          if (!(v26 | v9)) {
            goto LABEL_187;
          }
          if (v26 ^ 1 | v9)
          {
            if (v37)
            {
              v297._uint64_t countAndFlagsBits = 10;
              v297._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v297);
              uint64_t v298 = a1[3];
              uint64_t v299 = (void *)a1[4];
              swift_bridgeObjectRetain();
              v300._uint64_t countAndFlagsBits = v298;
              v300._unint64_t object = v299;
              String.append(_:)(v300);
              swift_bridgeObjectRelease();
            }
            else
            {
              v302._uint64_t countAndFlagsBits = 32;
              v302._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v302);
            }
            uint64_t v53 = 18243;
          }
          else
          {
            if (v37)
            {
              v229._uint64_t countAndFlagsBits = 10;
              v229._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v229);
              uint64_t v230 = a1[3];
              Swift::String v231 = (void *)a1[4];
              swift_bridgeObjectRetain();
              v232._uint64_t countAndFlagsBits = v230;
              v232._unint64_t object = v231;
              String.append(_:)(v232);
              swift_bridgeObjectRelease();
            }
            else
            {
              v301._uint64_t countAndFlagsBits = 32;
              v301._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v301);
            }
            uint64_t v53 = 18247;
          }
LABEL_185:
          unint64_t v271 = 0xE200000000000000;
LABEL_186:
          String.append(_:)(*(Swift::String *)&v53);
          goto LABEL_187;
        default:
          if (v37)
          {
            v49._uint64_t countAndFlagsBits = 10;
            v49._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v49);
            uint64_t v50 = a1[3];
            Swift::String v51 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v52._uint64_t countAndFlagsBits = v50;
            v52._unint64_t object = v51;
            String.append(_:)(v52);
            swift_bridgeObjectRelease();
          }
          else
          {
            v267._uint64_t countAndFlagsBits = 32;
            v267._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v267);
          }
          uint64_t v53 = 18242;
          goto LABEL_185;
      }
      break;
    case 2uLL:
      int v305 = v25;
      outlined copy of DisplayList.Item.Value(v307, v9);
      if (v22)
      {
        v39._uint64_t countAndFlagsBits = 10;
        v39._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v39);
        uint64_t v40 = a1[3];
        int v41 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v42._uint64_t countAndFlagsBits = v40;
        v42._unint64_t object = v41;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        v43._uint64_t countAndFlagsBits = 40;
        v43._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v43);
        v44._uint64_t countAndFlagsBits = 0x736574617473;
        v44._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v44);
        uint64_t v45 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_212;
        }
        a1[2] = v45;
        v46._uint64_t countAndFlagsBits = 8224;
        v46._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v46);
      }
      else
      {
        v54._uint64_t countAndFlagsBits = 40;
        v54._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v54);
        v55._uint64_t countAndFlagsBits = 0x736574617473;
        v55._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v55);
        uint64_t v45 = 0;
      }
      unint64_t v304 = v9;
      uint64_t v312 = *(void *)(v307 + 16);
      if (v312)
      {
        unint64_t v311 = v307 + 32;
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v310 = v56;
        uint64_t v57 = 0;
        Swift::String v313 = a1 + 3;
        long long v309 = xmmword_2461BDB00;
        unint64_t v308 = 0x800000024621B7D0;
        do
        {
          unint64_t v59 = v311 + 40 * v57;
          int v60 = *(_DWORD *)v59;
          int v61 = *(_DWORD *)(v59 + 4);
          int v62 = *(_DWORD *)(v59 + 8);
          int v63 = *(_DWORD *)(v59 + 12);
          int v64 = *(_DWORD *)(v59 + 16);
          uint64_t v65 = *(void *)(v59 + 24);
          v316._uint64_t countAndFlagsBits = 0;
          v316._unint64_t object = (void *)0xE000000000000000;
          uint64_t v66 = swift_allocObject();
          *(_OWORD *)(v66 + 16) = v309;
          uint64_t v67 = MEMORY[0x263F8E8F8];
          *(void *)(v66 + 56) = MEMORY[0x263F8E8F8];
          uint64_t v68 = MEMORY[0x263F8E960];
          *(void *)(v66 + 64) = MEMORY[0x263F8E960];
          *(_DWORD *)(v66 + 32) = v64;
          *(void *)(v66 + 96) = v67;
          *(void *)(v66 + 104) = v68;
          *(_DWORD *)(v66 + 72) = v63;
          *(void *)(v66 + 136) = v67;
          *(void *)(v66 + 144) = v68;
          *(_DWORD *)(v66 + 112) = v62;
          *(void *)(v66 + 176) = v67;
          *(void *)(v66 + 184) = v68;
          *(_DWORD *)(v66 + 152) = v61;
          *(void *)(v66 + 216) = v67;
          *(void *)(v66 + 224) = v68;
          *(_DWORD *)(v66 + 192) = v60;
          swift_bridgeObjectRetain();
          v69._uint64_t countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          Swift::String v70 = v316;
          if (v45)
          {
            v71._uint64_t countAndFlagsBits = 10;
            v71._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v71);
            uint64_t v72 = a1[3];
            int v73 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v74._uint64_t countAndFlagsBits = v72;
            v74._unint64_t object = v73;
            String.append(_:)(v74);
            swift_bridgeObjectRelease();
            v75._uint64_t countAndFlagsBits = 40;
            v75._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v75);
            String.append(_:)(v70);
            if (__OFADD__(v45, 1))
            {
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
              JUMPOUT(0x245A645ACLL);
            }
            a1[2] = v45 + 1;
            uint64_t countAndFlagsBits = 8224;
            unint64_t object = 0xE200000000000000;
          }
          else
          {
            v78._uint64_t countAndFlagsBits = 40;
            v78._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v78);
            unint64_t object = (unint64_t)v70._object;
            uint64_t countAndFlagsBits = v70._countAndFlagsBits;
          }
          String.append(_:)(*(Swift::String *)&countAndFlagsBits);
          swift_bridgeObjectRelease();
          uint64_t v79 = *(void *)(v65 + 16);
          if (v79)
          {
            swift_bridgeObjectRetain();
            Swift::String v80 = (_DWORD *)(v65 + 100);
            do
            {
              __int16 v81 = *((_WORD *)v80 - 2);
              char v82 = *((unsigned char *)v80 - 2);
              int v83 = *v80;
              Swift::String v316 = *(Swift::String *)(v80 - 17);
              long long v317 = *(_OWORD *)(v80 - 13);
              long long v318 = *(_OWORD *)(v80 - 9);
              long long v319 = *(_OWORD *)(v80 - 5);
              char v321 = v82;
              __int16 v320 = v81;
              int v322 = v83;
              DisplayList.Item.printMinimally(into:)(a1);
              v80 += 18;
              --v79;
            }
            while (v79);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t v84 = a1[2];
          if (v84)
          {
            uint64_t v45 = v84 - 1;
            if (__OFSUB__(v84, 1)) {
              goto LABEL_207;
            }
            a1[2] = v45;
            unint64_t v85 = a1[4];
            if ((v85 & 0x2000000000000000) != 0) {
              uint64_t v86 = HIBYTE(v85) & 0xF;
            }
            else {
              uint64_t v86 = a1[3] & 0xFFFFFFFFFFFFLL;
            }
            unint64_t v87 = String.index(_:offsetBy:limitedBy:)();
            if (v88) {
              goto LABEL_218;
            }
            if (4 * v86 < v87 >> 14) {
              goto LABEL_208;
            }
            String.removeSubrange(_:)();
          }
          else
          {
            uint64_t v45 = 0;
          }
          ++v57;
          v58._uint64_t countAndFlagsBits = 41;
          v58._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v58);
        }
        while (v57 != v312);
      }
      outlined consume of DisplayList.Item.Value(v307, v304);
      if (v45)
      {
        if (__OFSUB__(v45, 1)) {
          goto LABEL_214;
        }
        a1[2] = v45 - 1;
        specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
      }
      v89._uint64_t countAndFlagsBits = 41;
      v89._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      break;
    case 3uLL:
      break;
    default:
      switch(v307 >> 60)
      {
        case 1uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v90._uint64_t countAndFlagsBits = 10;
            v90._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v90);
            uint64_t v91 = a1[3];
            char v92 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v93._uint64_t countAndFlagsBits = v91;
            v93._unint64_t object = v92;
            String.append(_:)(v93);
            swift_bridgeObjectRelease();
          }
          else
          {
            v234._uint64_t countAndFlagsBits = 32;
            v234._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v234);
          }
          uint64_t v94 = 67;
          goto LABEL_150;
        case 2uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v95._uint64_t countAndFlagsBits = 10;
            v95._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v95);
            uint64_t v96 = a1[3];
            unint64_t v97 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v98._uint64_t countAndFlagsBits = v96;
            v98._unint64_t object = v97;
            String.append(_:)(v98);
            swift_bridgeObjectRelease();
          }
          else
          {
            v235._uint64_t countAndFlagsBits = 32;
            v235._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v235);
          }
          uint64_t v94 = 18499;
          unint64_t v236 = 0xE200000000000000;
          goto LABEL_151;
        case 3uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v99._uint64_t countAndFlagsBits = 10;
            v99._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v99);
            uint64_t v100 = a1[3];
            uint64_t v101 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v102._uint64_t countAndFlagsBits = v100;
            v102._unint64_t object = v101;
            String.append(_:)(v102);
            swift_bridgeObjectRelease();
          }
          else
          {
            v237._uint64_t countAndFlagsBits = 32;
            v237._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v237);
          }
          uint64_t v94 = 19785;
          unint64_t v236 = 0xE200000000000000;
          goto LABEL_151;
        case 4uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v103._uint64_t countAndFlagsBits = 10;
            v103._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v103);
            uint64_t v104 = a1[3];
            Swift::String v105 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v106._uint64_t countAndFlagsBits = v104;
            v106._unint64_t object = v105;
            String.append(_:)(v106);
            swift_bridgeObjectRelease();
          }
          else
          {
            v238._uint64_t countAndFlagsBits = 32;
            v238._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v238);
          }
          uint64_t v94 = 83;
          goto LABEL_150;
        case 5uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v107._uint64_t countAndFlagsBits = 10;
            v107._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v107);
            uint64_t v108 = a1[3];
            Swift::String v109 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v110._uint64_t countAndFlagsBits = v108;
            v110._unint64_t object = v109;
            String.append(_:)(v110);
            swift_bridgeObjectRelease();
          }
          else
          {
            v239._uint64_t countAndFlagsBits = 32;
            v239._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v239);
          }
          uint64_t v94 = 18515;
          unint64_t v236 = 0xE200000000000000;
          goto LABEL_151;
        case 6uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v111._uint64_t countAndFlagsBits = 10;
            v111._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v111);
            uint64_t v112 = a1[3];
            long long v113 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v114._uint64_t countAndFlagsBits = v112;
            v114._unint64_t object = v113;
            String.append(_:)(v114);
            swift_bridgeObjectRelease();
          }
          else
          {
            v240._uint64_t countAndFlagsBits = 32;
            v240._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v240);
          }
          uint64_t v94 = 22096;
          unint64_t v236 = 0xE200000000000000;
          goto LABEL_151;
        case 7uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v115._uint64_t countAndFlagsBits = 10;
            v115._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v115);
            uint64_t v116 = a1[3];
            float v117 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v118._uint64_t countAndFlagsBits = v116;
            v118._unint64_t object = v117;
            String.append(_:)(v118);
            swift_bridgeObjectRelease();
          }
          else
          {
            v241._uint64_t countAndFlagsBits = 32;
            v241._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v241);
          }
          uint64_t v94 = 19536;
          unint64_t v236 = 0xE200000000000000;
          goto LABEL_151;
        case 8uLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v119._uint64_t countAndFlagsBits = 10;
            v119._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v119);
            uint64_t v120 = a1[3];
            Swift::String v121 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v122._uint64_t countAndFlagsBits = v120;
            v122._unint64_t object = v121;
            String.append(_:)(v122);
            swift_bridgeObjectRelease();
          }
          else
          {
            v242._uint64_t countAndFlagsBits = 32;
            v242._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v242);
          }
          uint64_t v94 = 84;
          goto LABEL_150;
        case 9uLL:
          uint64_t v123 = *(void *)((v307 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          outlined copy of DisplayList.Item.Value(v307, v9);
          if (v22)
          {
            v124._uint64_t countAndFlagsBits = 10;
            v124._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v124);
            uint64_t v125 = a1[3];
            float v126 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v127._uint64_t countAndFlagsBits = v125;
            v127._unint64_t object = v126;
            String.append(_:)(v127);
            swift_bridgeObjectRelease();
            v128._uint64_t countAndFlagsBits = 40;
            v128._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v128);
            v129._uint64_t countAndFlagsBits = 70;
            v129._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v129);
            if (__OFADD__(v22, 1)) {
              goto LABEL_215;
            }
            a1[2] = v22 + 1;
            uint64_t v130 = 8224;
            unint64_t v131 = 0xE200000000000000;
          }
          else
          {
            v243._uint64_t countAndFlagsBits = 40;
            v243._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v243);
            uint64_t v130 = 70;
            unint64_t v131 = 0xE100000000000000;
          }
          String.append(_:)(*(Swift::String *)&v130);
          uint64_t v244 = *(void *)(v123 + 16);
          if (v244)
          {
            swift_bridgeObjectRetain();
            Swift::String v245 = (_DWORD *)(v123 + 100);
            do
            {
              __int16 v246 = *((_WORD *)v245 - 2);
              char v247 = *((unsigned char *)v245 - 2);
              int v248 = *v245;
              Swift::String v316 = *(Swift::String *)(v245 - 17);
              long long v317 = *(_OWORD *)(v245 - 13);
              long long v318 = *(_OWORD *)(v245 - 9);
              long long v319 = *(_OWORD *)(v245 - 5);
              char v321 = v247;
              __int16 v320 = v246;
              int v322 = v248;
              DisplayList.Item.printMinimally(into:)(a1);
              v245 += 18;
              --v244;
            }
            while (v244);
            swift_bridgeObjectRelease();
          }
          uint64_t v249 = a1[2];
          if (!v249) {
            goto LABEL_147;
          }
          BOOL v197 = __OFSUB__(v249, 1);
          uint64_t v250 = v249 - 1;
          if (v197) {
            goto LABEL_216;
          }
          a1[2] = v250;
          specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_147:
          v251._uint64_t countAndFlagsBits = 41;
          v251._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v251);
          uint64_t v252 = v26;
          unint64_t v253 = v9;
LABEL_154:
          outlined consume of DisplayList.Item.Value(v252, v253);
          break;
        case 0xAuLL:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v132._uint64_t countAndFlagsBits = 10;
            v132._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v132);
            uint64_t v133 = a1[3];
            Swift::String v134 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v135._uint64_t countAndFlagsBits = v133;
            v135._unint64_t object = v134;
            String.append(_:)(v135);
            swift_bridgeObjectRelease();
          }
          else
          {
            v254._uint64_t countAndFlagsBits = 32;
            v254._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v254);
          }
          uint64_t v94 = 68;
          goto LABEL_150;
        case 0xBuLL:
          outlined init with copy of AnyTrackedValue((v307 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v316);
          v315._uint64_t countAndFlagsBits = 14934;
          v315._unint64_t object = (void *)0xE200000000000000;
          __swift_project_boxed_opaque_existential_1(&v316, *((uint64_t *)&v317 + 1));
          swift_getDynamicType();
          outlined copy of DisplayList.Item.Value(v26, v9);
          outlined copy of DisplayList.Item.Value(v26, v9);
          v136._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v136);
          swift_bridgeObjectRelease();
          uint64_t v137 = v315._countAndFlagsBits;
          Swift::String v138 = v315._object;
          if (v22)
          {
            v139._uint64_t countAndFlagsBits = 10;
            v139._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v139);
            uint64_t v140 = a1[3];
            Swift::String v141 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v142._uint64_t countAndFlagsBits = v140;
            v142._unint64_t object = v141;
            String.append(_:)(v142);
            swift_bridgeObjectRelease();
          }
          else
          {
            v255._uint64_t countAndFlagsBits = 32;
            v255._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v255);
          }
          v256._uint64_t countAndFlagsBits = v137;
          v256._unint64_t object = v138;
          String.append(_:)(v256);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Item.Value(v26, v9);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v316);
          uint64_t v252 = v26;
          unint64_t v253 = v9;
          goto LABEL_154;
        case 0xCuLL:
          v316._uint64_t countAndFlagsBits = 64;
          v316._unint64_t object = (void *)0xE100000000000000;
          v315._uint64_t countAndFlagsBits = 35;
          v315._unint64_t object = (void *)0xE100000000000000;
          int v314 = v307;
          v143._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v143);
          swift_bridgeObjectRelease();
          String.append(_:)(v315);
          swift_bridgeObjectRelease();
          Swift::String v144 = v316;
          if (v22)
          {
            v145._uint64_t countAndFlagsBits = 10;
            v145._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v145);
            uint64_t v146 = a1[3];
            Swift::String v147 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v148._uint64_t countAndFlagsBits = v146;
            v148._unint64_t object = v147;
            String.append(_:)(v148);
            swift_bridgeObjectRelease();
          }
          else
          {
            v257._uint64_t countAndFlagsBits = 32;
            v257._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v257);
          }
          String.append(_:)(v144);
          outlined consume of DisplayList.Item.Value(v26, v9);
          swift_bridgeObjectRelease();
          goto LABEL_195;
        default:
          outlined copy of DisplayList.Content.Value(v307);
          if (v22)
          {
            v27._uint64_t countAndFlagsBits = 10;
            v27._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v27);
            uint64_t v28 = a1[3];
            Swift::String v29 = (void *)a1[4];
            swift_bridgeObjectRetain();
            v30._uint64_t countAndFlagsBits = v28;
            v30._unint64_t object = v29;
            String.append(_:)(v30);
            swift_bridgeObjectRelease();
          }
          else
          {
            v233._uint64_t countAndFlagsBits = 32;
            v233._unint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v233);
          }
          uint64_t v94 = 66;
LABEL_150:
          unint64_t v236 = 0xE100000000000000;
LABEL_151:
          String.append(_:)(*(Swift::String *)&v94);
          outlined consume of DisplayList.Item.Value(v26, v9);
          goto LABEL_195;
      }
      break;
  }
LABEL_195:
  uint64_t v293 = a1[2];
  if (v293)
  {
    BOOL v197 = __OFSUB__(v293, 1);
    uint64_t v294 = v293 - 1;
    if (v197) {
      goto LABEL_210;
    }
    a1[2] = v294;
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
  }
  v295._uint64_t countAndFlagsBits = 41;
  v295._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v295);
}

void DisplayList.Item.description.getter()
{
  v1[0] = 0xD000000000000012;
  v1[1] = 0x800000024621B7B0;
  long long v2 = xmmword_2461BDB10;
  unint64_t v3 = 0xE200000000000000;
  DisplayList.Item.print(into:)(v1);
  if (!(void)v2) {
    goto LABEL_4;
  }
  if ((void)v2 != 0x8000000000000000)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_4:
    v0._uint64_t countAndFlagsBits = 41;
    v0._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v0);
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

void GraphicsFilter.print(into:)(void *a1)
{
  unint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v13 = *(void *)(v1 + 88);
  uint64_t v14 = *(void *)(v1 + 96);
  uint64_t v15 = *(void *)(v1 + 104);
  int v16 = *(_DWORD *)(v1 + 112);
  switch(*(unsigned char *)(v1 + 116))
  {
    case 1:
      uint64_t v154 = *(void *)(v1 + 8);
      uint64_t v156 = *(void *)(v1 + 80);
      Swift::String v158 = *(void **)(v1 + 16);
      uint64_t v163 = *(void *)(v1 + 48);
      uint64_t v165 = *(void *)(v1 + 40);
      uint64_t v166 = *(void *)(v1 + 56);
      uint64_t v168 = *(void *)(v1 + 72);
      uint64_t v161 = *(void *)(v1 + 64);
      outlined copy of VariableBlurStyle.Mask((id)v4, v5, v7, v6, v9, v8, v10, v11, v12, v13, v14, v15, v16, BYTE1(v16));
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v19._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._uint64_t countAndFlagsBits = 41;
      v20._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      if (a1[2])
      {
        v21._uint64_t countAndFlagsBits = 10;
        v21._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v21);
        uint64_t v22 = a1[3];
        Swift::String v23 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v24._uint64_t countAndFlagsBits = v22;
        v24._unint64_t object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
      }
      else
      {
        v100._uint64_t countAndFlagsBits = 32;
        v100._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v100);
      }
      v101._uint64_t countAndFlagsBits = 0xD000000000000018;
      v101._unint64_t object = (void *)0x800000024621BB10;
      String.append(_:)(v101);
      swift_bridgeObjectRelease();
      outlined consume of GraphicsFilter((void *)v2, v154, v158, v5, v7, v165, v163, v166, v161, v168, v156, v13, v14, v15, v16, SBYTE2(v16));
      return;
    case 2:
      unint64_t v159 = *(void *)v1;
      uint64_t v25 = a1[2];
      if (v25)
      {
        v26._uint64_t countAndFlagsBits = 10;
        v26._unint64_t object = (void *)0xE100000000000000;
        Swift::String v27 = a1;
        String.append(_:)(v26);
        uint64_t v28 = a1[3];
        Swift::String v29 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v30._uint64_t countAndFlagsBits = v28;
        v30._unint64_t object = v29;
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._uint64_t countAndFlagsBits = 40;
        v31._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        v32._uint64_t countAndFlagsBits = 0x776F64616873;
        v32._unint64_t object = (void *)0xE600000000000000;
        String.append(_:)(v32);
        uint64_t v33 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          goto LABEL_88;
        }
        a1[2] = v33;
        v34._uint64_t countAndFlagsBits = 8224;
        v34._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v34);
      }
      else
      {
        v102._uint64_t countAndFlagsBits = 40;
        v102._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v102);
        v103._uint64_t countAndFlagsBits = 0x776F64616873;
        v103._unint64_t object = (void *)0xE600000000000000;
        Swift::String v27 = a1;
        String.append(_:)(v103);
        uint64_t v33 = 0;
      }
      float v104 = *(float *)&v3;
      unint64_t v105 = HIDWORD(v3);
      v106._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v106);
      swift_bridgeObjectRelease();
      v107._uint64_t countAndFlagsBits = 41;
      v107._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v107);
      if (v33)
      {
        v108._uint64_t countAndFlagsBits = 10;
        v108._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v108);
        uint64_t v109 = v27[3];
        Swift::String v110 = (void *)v27[4];
        swift_bridgeObjectRetain();
        v111._uint64_t countAndFlagsBits = v109;
        v111._unint64_t object = v110;
        String.append(_:)(v111);
        swift_bridgeObjectRelease();
      }
      else
      {
        v115._uint64_t countAndFlagsBits = 32;
        v115._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v115);
      }
      v116._uint64_t countAndFlagsBits = 0x20646E696B28;
      v116._unint64_t object = (void *)0xE600000000000000;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v117._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118._uint64_t countAndFlagsBits = 41;
      v118._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v118);
      if (v33)
      {
        v119._uint64_t countAndFlagsBits = 10;
        v119._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v119);
        uint64_t v120 = v27[3];
        Swift::String v121 = (void *)v27[4];
        swift_bridgeObjectRetain();
        v122._uint64_t countAndFlagsBits = v120;
        v122._unint64_t object = v121;
        String.append(_:)(v122);
        swift_bridgeObjectRelease();
      }
      else
      {
        v123._uint64_t countAndFlagsBits = 32;
        v123._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v123);
      }
      v124._uint64_t countAndFlagsBits = 0x2073756964617228;
      v124._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      v125._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v125);
      swift_bridgeObjectRelease();
      v126._uint64_t countAndFlagsBits = 8236;
      v126._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v126);
      v127._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v127);
      swift_bridgeObjectRelease();
      v128._uint64_t countAndFlagsBits = 41;
      v128._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v128);
      if (v33)
      {
        v129._uint64_t countAndFlagsBits = 10;
        v129._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v129);
        uint64_t v130 = v27[3];
        unint64_t v131 = (void *)v27[4];
        swift_bridgeObjectRetain();
        v132._uint64_t countAndFlagsBits = v130;
        v132._unint64_t object = v131;
        String.append(_:)(v132);
        swift_bridgeObjectRelease();
      }
      else
      {
        v133._uint64_t countAndFlagsBits = 32;
        v133._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v133);
      }
      v134._uint64_t countAndFlagsBits = 0x2074657366666F28;
      v134._unint64_t object = (void *)0xE900000000000028;
      String.append(_:)(v134);
      swift_bridgeObjectRelease();
      Color.Resolved.description.getter(*(float *)&v159, *((float *)&v159 + 1), v104, *(float *)&v105);
      String.append(_:)(v135);
      swift_bridgeObjectRelease();
      v136._uint64_t countAndFlagsBits = 41;
      v136._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v136);
      if (v33)
      {
        v137._uint64_t countAndFlagsBits = 10;
        v137._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v137);
        uint64_t v138 = v27[3];
        Swift::String v139 = (void *)v27[4];
        swift_bridgeObjectRetain();
        v140._uint64_t countAndFlagsBits = v138;
        v140._unint64_t object = v139;
        String.append(_:)(v140);
        swift_bridgeObjectRelease();
      }
      else
      {
        v141._uint64_t countAndFlagsBits = 32;
        v141._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v141);
      }
      v142._uint64_t countAndFlagsBits = 0x20726F6C6F6328;
      v142._unint64_t object = (void *)0xE700000000000000;
      String.append(_:)(v142);
      swift_bridgeObjectRelease();
      if (!v33) {
        goto LABEL_77;
      }
      if (__OFSUB__(v33, 1))
      {
LABEL_88:
        __break(1u);
        JUMPOUT(0x245A65B50);
      }
      v27[2] = v33 - 1;
      specialized RangeReplaceableCollection<>.removeLast(_:)(2uLL);
LABEL_77:
      v143._uint64_t countAndFlagsBits = 41;
      v143._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v143);
      return;
    case 3:
      v35._uint64_t countAndFlagsBits = 0x7463656A6F727028;
      v35._unint64_t object = (void *)0xEC000000206E6F69;
      String.append(_:)(v35);
      _print_unlocked<A, B>(_:_:)();
      v36._uint64_t countAndFlagsBits = 41;
      v36._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      goto LABEL_27;
    case 4:
      if (v12)
      {
        _StringGuts.grow(_:)(31);
        unint64_t v37 = 0xD00000000000001CLL;
        unint64_t v38 = 0x800000024621BAF0;
      }
      else
      {
        _StringGuts.grow(_:)(17);
        unint64_t v37 = 0x6D2D726F6C6F6328;
        unint64_t v38 = 0xEE00207869727461;
      }
      String.append(_:)(*(Swift::String *)&v37);
      _print_unlocked<A, B>(_:_:)();
      v91._uint64_t countAndFlagsBits = 41;
      v91._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v91);
      if (a1[2])
      {
        v92._uint64_t countAndFlagsBits = 10;
        v92._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v92);
        uint64_t v93 = a1[3];
        uint64_t v94 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v95._uint64_t countAndFlagsBits = v93;
        v95._unint64_t object = v94;
        String.append(_:)(v95);
        swift_bridgeObjectRelease();
      }
      else
      {
        v114._uint64_t countAndFlagsBits = 32;
        v114._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v114);
      }
      uint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
      goto LABEL_31;
    case 5:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v171._uint64_t countAndFlagsBits = 0xD000000000000010;
      v171._unint64_t object = (void *)0x800000024621BAD0;
      Color.Resolved.description.getter(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v3, *((float *)&v3 + 1));
      goto LABEL_12;
    case 6:
      _StringGuts.grow(_:)(20);
      v44._uint64_t countAndFlagsBits = 0x746F722D65756828;
      v44._unint64_t object = (void *)0xEE00206E6F697461;
      String.append(_:)(v44);
      Double.write<A>(to:)();
      uint64_t v45 = 694642020;
      unint64_t v46 = 0xE400000000000000;
      goto LABEL_26;
    case 7:
      uint64_t v47 = 0x7461727574617328;
      unint64_t v48 = 0xEC000000206E6F69;
      goto LABEL_19;
    case 8:
      uint64_t v47 = 0x6E74686769726228;
      unint64_t v48 = 0xEC00000020737365;
      goto LABEL_19;
    case 9:
      uint64_t v47 = 0x736172746E6F6328;
      unint64_t v48 = 0xEA00000000002074;
      goto LABEL_19;
    case 0xA:
      uint64_t v47 = 0x6163737961726728;
      unint64_t v48 = 0xEB0000000020656CLL;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v47);
      Double.write<A>(to:)();
      goto LABEL_25;
    case 0xB:
      _StringGuts.grow(_:)(43);
      v49._uint64_t countAndFlagsBits = 0xD000000000000012;
      v49._unint64_t object = (void *)0x800000024621BA90;
      String.append(_:)(v49);
      Color.Resolved.description.getter(*(float *)&v2, *((float *)&v2 + 1), *(float *)&v3, *((float *)&v3 + 1));
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 0x6E756F6D613A2320;
      v51._unint64_t object = (void *)0xEA00000000002074;
      String.append(_:)(v51);
      Float.write<A>(to:)();
      uint64_t v52 = 0x20736169623A2320;
      unint64_t v53 = 0xE800000000000000;
      goto LABEL_24;
    case 0xC:
      _StringGuts.grow(_:)(25);
      v54._uint64_t countAndFlagsBits = 0xD000000000000016;
      v54._unint64_t object = (void *)0x800000024621BA70;
      String.append(_:)(v54);
      Swift::String v55 = a1;
      _print_unlocked<A, B>(_:_:)();
      v56._uint64_t countAndFlagsBits = 41;
      v56._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      if (a1[2]) {
        goto LABEL_22;
      }
      goto LABEL_33;
    case 0xD:
      _StringGuts.grow(_:)(32);
      v61._uint64_t countAndFlagsBits = 0xD000000000000011;
      v61._unint64_t object = (void *)0x800000024621BA50;
      String.append(_:)(v61);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v52 = 0x6E756F6D613A2320;
      unint64_t v53 = 0xEA00000000002074;
LABEL_24:
      String.append(_:)(*(Swift::String *)&v52);
      Float.write<A>(to:)();
LABEL_25:
      uint64_t v45 = 41;
      unint64_t v46 = 0xE100000000000000;
LABEL_26:
      String.append(_:)(*(Swift::String *)&v45);
LABEL_27:
      if (a1[2])
      {
        v62._uint64_t countAndFlagsBits = 10;
        v62._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        uint64_t v63 = a1[3];
        int v64 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v65._uint64_t countAndFlagsBits = v63;
        v65._unint64_t object = v64;
        String.append(_:)(v65);
        swift_bridgeObjectRelease();
      }
      else
      {
        v66._uint64_t countAndFlagsBits = 32;
        v66._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v66);
      }
      uint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
      goto LABEL_31;
    case 0xE:
      _StringGuts.grow(_:)(57);
      v69._unint64_t object = (void *)0x800000024621BA30;
      v69._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v69);
      _print_unlocked<A, B>(_:_:)();
      v70._uint64_t countAndFlagsBits = 0x6E656572673A2320;
      v70._unint64_t object = (void *)0xE900000000000020;
      String.append(_:)(v70);
      _print_unlocked<A, B>(_:_:)();
      v71._uint64_t countAndFlagsBits = 0x2065756C623A2320;
      v71._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v71);
      _print_unlocked<A, B>(_:_:)();
      v72._uint64_t countAndFlagsBits = 0x696361706F3A2320;
      v72._unint64_t object = (void *)0xEB00000000207974;
      String.append(_:)(v72);
      Swift::String v55 = a1;
      _print_unlocked<A, B>(_:_:)();
      v73._uint64_t countAndFlagsBits = 41;
      v73._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      if (a1[2])
      {
LABEL_22:
        v57._uint64_t countAndFlagsBits = 10;
        v57._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v57);
        uint64_t v58 = v55[3];
        unint64_t v59 = (void *)v55[4];
        swift_bridgeObjectRetain();
        v60._uint64_t countAndFlagsBits = v58;
        v60._unint64_t object = v59;
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_33:
        v74._uint64_t countAndFlagsBits = 32;
        v74._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v74);
      }
      uint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
LABEL_31:
      String.append(_:)(*(Swift::String *)&v67);
      swift_bridgeObjectRelease();
      return;
    case 0xF:
      uint64_t v157 = *(void *)(v1 + 80);
      uint64_t v167 = *(void *)(v1 + 56);
      uint64_t v169 = *(void *)(v1 + 72);
      uint64_t v162 = *(void *)(v1 + 64);
      uint64_t v164 = *(void *)(v1 + 48);
      char v75 = *(void *)(v1 + 24);
      id v76 = *(id *)v1;
      uint64_t v77 = *(void **)(v1 + 16);
      uint64_t v153 = *(void *)(v1 + 32);
      uint64_t v78 = *(void *)(v1 + 40);
      outlined copy of GraphicsFilter(*(id *)v1, v3, (id)v4, v75, v153, v6, v9, v8, v10, v11, v12, v13, v14, v15, v16, SBYTE2(v16));
      v79._uint64_t countAndFlagsBits = 0x2072656461687328;
      v79._unint64_t object = (void *)0xE800000000000000;
      String.append(_:)(v79);
      uint64_t v160 = v76;
      char v80 = v75;
      _print_unlocked<A, B>(_:_:)();
      v81._uint64_t countAndFlagsBits = 41;
      v81._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      if (a1[2])
      {
        v82._uint64_t countAndFlagsBits = 10;
        v82._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v82);
        int v155 = v3;
        unint64_t v3 = a1[3];
        int v83 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v84._uint64_t countAndFlagsBits = v3;
        LODWORD(v3) = v155;
        v84._unint64_t object = v83;
        String.append(_:)(v84);
        swift_bridgeObjectRelease();
      }
      else
      {
        v112._uint64_t countAndFlagsBits = 32;
        v112._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v112);
      }
      v113._uint64_t countAndFlagsBits = 0;
      v113._unint64_t object = (void *)0xE000000000000000;
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      outlined consume of GraphicsFilter(v160, v3, v77, v80, v153, v78, v164, v167, v162, v169, v157, v13, v14, v15, v16, SBYTE2(v16));
      return;
    case 0x10:
      if (v3 | v2 | v4 | v5 | v7 | v6 | v9 | v8 | v10 | v11 | v12 | v13 | v14 | v15) {
        BOOL v85 = 0;
      }
      else {
        BOOL v85 = v16 == 0;
      }
      if (v85)
      {
        if (a1[2])
        {
          v96._uint64_t countAndFlagsBits = 10;
          v96._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v96);
          uint64_t v97 = a1[3];
          Swift::String v98 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v99._uint64_t countAndFlagsBits = v97;
          v99._unint64_t object = v98;
          String.append(_:)(v99);
          swift_bridgeObjectRelease();
        }
        else
        {
          v148._uint64_t countAndFlagsBits = 32;
          v148._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v148);
        }
        unint64_t v149 = 0x6567617265766128;
        unint64_t v150 = 0xEF29726F6C6F632DLL;
      }
      else if (v16 || v2 != 1 || v4 | v3 | v5 | v7 | v6 | v9 | v8 | v10 | v11 | v12 | v13 | v14 | v15)
      {
        if (a1[2])
        {
          v144._uint64_t countAndFlagsBits = 10;
          v144._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v144);
          uint64_t v145 = a1[3];
          uint64_t v146 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v147._uint64_t countAndFlagsBits = v145;
          v147._unint64_t object = v146;
          String.append(_:)(v147);
          swift_bridgeObjectRelease();
        }
        else
        {
          v152._uint64_t countAndFlagsBits = 32;
          v152._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v152);
        }
        unint64_t v149 = 0x692D726F6C6F6328;
        unint64_t v150 = 0xEE0029747265766ELL;
      }
      else
      {
        if (a1[2])
        {
          v86._uint64_t countAndFlagsBits = 10;
          v86._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v86);
          uint64_t v87 = a1[3];
          char v88 = (void *)a1[4];
          swift_bridgeObjectRetain();
          v89._uint64_t countAndFlagsBits = v87;
          v89._unint64_t object = v88;
          String.append(_:)(v89);
          swift_bridgeObjectRelease();
        }
        else
        {
          v151._uint64_t countAndFlagsBits = 32;
          v151._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v151);
        }
        unint64_t v150 = 0x800000024621BAB0;
        unint64_t v149 = 0xD000000000000014;
      }
      String.append(_:)(*(Swift::String *)&v149);
      return;
    default:
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      v171._uint64_t countAndFlagsBits = 0x3A232072756C6228;
      v171._unint64_t object = (void *)0xEF20737569646172;
      uint64_t v17 = Double.description.getter();
LABEL_12:
      String.append(_:)(*(Swift::String *)&v17);
      swift_bridgeObjectRelease();
      v39._uint64_t countAndFlagsBits = 41;
      v39._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v39);
      if (a1[2])
      {
        v40._uint64_t countAndFlagsBits = 10;
        v40._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        uint64_t v41 = a1[3];
        Swift::String v42 = (void *)a1[4];
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = v41;
        v43._unint64_t object = v42;
        String.append(_:)(v43);
        swift_bridgeObjectRelease();
      }
      else
      {
        v90._uint64_t countAndFlagsBits = 32;
        v90._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v90);
      }
      String.append(_:)(v171);
      swift_bridgeObjectRelease();
      return;
  }
}

uint64_t closure #2 in DisplayList.Item.print(into:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v16 = 0x6974616D696E6128;
  unint64_t v17 = 0xEB00000000206E6FLL;
  (*(void (**)(void *__return_ptr))(*(void *)v3 + 88))(v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 41;
  v5._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v7 = v16;
  uint64_t v6 = (void *)v17;
  if (a2[2])
  {
    v8._uint64_t countAndFlagsBits = 10;
    v8._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t v9 = a2[3];
    uint64_t v10 = (void *)a2[4];
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = v9;
    v11._unint64_t object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12._uint64_t countAndFlagsBits = 32;
    v12._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v12);
  }
  v13._uint64_t countAndFlagsBits = v7;
  v13._unint64_t object = v6;
  String.append(_:)(v13);
  return swift_bridgeObjectRelease();
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  if (!result) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v2 = v1[1];
  if ((v2 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  else {
    uint64_t v3 = *v1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v4) {
    goto LABEL_14;
  }
  if (4 * v3 < result >> 14)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  return String.removeSubrange(_:)();
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    }
  }
}

uint64_t outlined init with take of DisplayList.ArchiveIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisplayList.ArchiveIDs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2 & 1, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v13;
  }
  else
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!v10)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v14;
    }
    Swift::String v12 = *(void **)(*(void *)(v11 + 56) + 8 * v9);
    specialized _NativeDictionary._delete(at:)(v9, v11);
    *uint64_t v3 = v11;
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator?, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      unint64_t v11 = v9;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v3;
      uint64_t v15 = *v4;
      uint64_t *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v13 = v15;
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      uint64_t *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator?, &lazy cache variable for type metadata for _DisplayList_AnyEffectAnimator);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a1, (uint64_t)v16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyTrackedValue?(a1, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      unint64_t v11 = v9;
      char v12 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v13 = *v3;
      uint64_t v15 = *v4;
      uint64_t *v4 = 0x8000000000000000;
      if ((v12 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v13 = v15;
      }
      outlined init with take of ScrollStateRequest((long long *)(*(void *)(v13 + 56) + 40 * v11), (uint64_t)v16);
      specialized _NativeDictionary._delete(at:)(v11, v13);
      uint64_t *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = 0;
      memset(v16, 0, sizeof(v16));
    }
    return outlined destroy of AnyTrackedValue?((uint64_t)v16, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType);
  }
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
  }
  else
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v10 & 1) == 0) {
      return result;
    }
    unint64_t v11 = result;
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    uint64_t v15 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if ((v12 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v13 = v15;
    }
    specialized _NativeDictionary._delete(at:)(v11, v13);
    uint64_t *v4 = v13;
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?(a1, (unint64_t *)&lazy cache variable for type metadata for Any?);
    unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v9), v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v14, 0, sizeof(v14));
    }
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
}

Swift::Int DisplayList.GraphicsRenderer.Cache.CallbackKey.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt64 v5 = *(void *)(v0 + 24);
  Swift::UInt16 v6 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v5;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 12);
  Swift::UInt64 v4 = *(void *)(v0 + 24);
  Swift::UInt16 v5 = *(_WORD *)(v0 + 16);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v4;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 12);
  Swift::UInt64 v5 = *(void *)(v0 + 24);
  Swift::UInt16 v6 = *(_WORD *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v5;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayList.GraphicsRenderer.Cache.AnimatorKey(int32x4_t *a1, int32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1;
}

uint64_t DisplayList.GraphicsRenderer.platformViewMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 112);
  return result;
}

uint64_t DisplayList.GraphicsRenderer.platformViewMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 112) = v2;
  return result;
}

uint64_t (*DisplayList.GraphicsRenderer.platformViewMode.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t DisplayList.GraphicsRenderer.__allocating_init(platformViewMode:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  DisplayList.GraphicsRenderer.init(platformViewMode:)(a1);
  return v2;
}

__n128 specialized DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, __n128 *a2, void **a3, uint64_t a4, void *a5)
{
  unint64_t v9 = a2[3].n128_u64[0];
  unint64_t v10 = a2[3].n128_u64[1];
  unsigned __int8 v11 = a2[4].n128_u8[0];
  a2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  a2[5].n128_u64[0] = static Time.infinity;
  closure #1 in DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(a3, a4, a5);
  swift_beginAccess();
  unint64_t v12 = MEMORY[0x263F8EE80];
  a2[1].n128_u64[0] = MEMORY[0x263F8EE80];
  a2[1].n128_u64[1] = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  __n128 v14 = a2[1];
  __n128 result = a2[2];
  a2[1] = result;
  a2[2] = v14;
  a2[3].n128_u64[0] = v9;
  a2[3].n128_u64[1] = v10;
  a2[4].n128_u8[0] = v11;
  return result;
}

__n128 DisplayList.GraphicsRenderer.render(at:do:)(unint64_t *a1, void (*a2)(void))
{
  unint64_t v4 = v2[3].n128_u64[0];
  unint64_t v5 = v2[3].n128_u64[1];
  unsigned __int8 v6 = v2[4].n128_u8[0];
  v2[4].n128_u64[1] = *a1;
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  v2[5].n128_u64[0] = static Time.infinity;
  a2();
  swift_beginAccess();
  unint64_t v7 = MEMORY[0x263F8EE80];
  v2[1].n128_u64[0] = MEMORY[0x263F8EE80];
  v2[1].n128_u64[1] = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  __n128 v9 = v2[1];
  __n128 result = v2[2];
  v2[1] = result;
  v2[2] = v9;
  v2[3].n128_u64[0] = v4;
  v2[3].n128_u64[1] = v5;
  v2[4].n128_u8[0] = v6;
  return result;
}

uint64_t DisplayList.GraphicsRenderer.renderDisplayList(_:at:in:)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  int v6 = *(unsigned __int16 *)(a1 + 8);
  int v7 = *(unsigned __int8 *)(a1 + 10);
  unint64_t v10 = *a2;
  int v8 = v6 | (v7 << 16);
  swift_retain();
  swift_bridgeObjectRetain();
  specialized DisplayList.GraphicsRenderer.render(at:do:)(&v10, v3, (uint64_t)v3, v5, v8, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t *a1, double *a2, void *a3, uint64_t a4)
{
  double v7 = a2[2];
  double v8 = a2[3];
  if (*a2 != 0.0 || a2[1] != 0.0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v10 = swift_retain();
      *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v10, v9, 1, 0);
      swift_release();
    }
    RBDrawingStateTranslateCTM();
  }
  uint64_t v11 = a3[3];
  uint64_t v12 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v12 + 32))(*a1, a4, v11, v12, v7, v8);
}

uint64_t DisplayList.GraphicsRenderer.drawImplicitLayer(in:content:)(uint64_t a1, void (*a2)(uint64_t *))
{
  int v3 = *(unsigned __int8 *)(v2 + 96);
  *(unsigned char *)(v2 + 96) = 0;
  if (v3) {
    char v4 = 0;
  }
  else {
    char v4 = 16;
  }
  uint64_t result = GraphicsContext.drawLayer(flags:content:)(v4, a2);
  *(unsigned char *)(v2 + 96) = v3;
  return result;
}

void DisplayList.GraphicsRenderer.renderPlatformView(_:in:size:viewType:)(uint64_t a1, uint64_t a2, double a3, CGFloat a4)
{
  swift_beginAccess();
  int v9 = *(unsigned __int8 *)(v4 + 112);
  if (v9 != 2)
  {
    if (v9 == 3 || a1 == 0)
    {
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 46;
      v12._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      specialized static Log.externalWarning(_:)(0xD000000000000026, 0x800000024621BB80);
      swift_bridgeObjectRelease();
      uint64_t v13 = RBDrawingStateBeginLayer();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v14 = swift_retain();
      GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v14, v13, 0, 1);
      GraphicsContext.renderMissingPlatformView(size:)((CGSize)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3));
      RBDrawingStateDrawLayer();
      swift_release();
    }
    else
    {
      uint64_t v15 = (void *)swift_unknownObjectRetain();
      id v16 = (id)CoreViewSpeculativeLayer(v15);
      if (v16)
      {
        uint64_t v17 = v16;
        if (v9)
        {
          objc_msgSend(v16, sel_setBounds_, 0.0, 0.0, a3, a4);
          objc_msgSend(v17, sel_layoutIfNeeded);
        }
        id v18 = v17;
        specialized GraphicsContext.drawLayer(flags:content:)(0, a4, a2, v18);
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
}

Swift::Void __swiftcall GraphicsContext.renderMissingPlatformView(size:)(CGSize size)
{
  uint64_t v2 = v1;
  CGFloat height = size.height;
  CGFloat width = size.width;
  double v5 = size.width * 0.5;
  double v6 = size.height * 0.5;
  if (size.height >= size.width) {
    size.CGFloat height = size.width;
  }
  double v16 = size.height * 0.5 * 0.2;
  CGFloat v7 = size.height * 0.5 - v16;
  double v8 = v7 * 0.707106781;
  memset(v17, 0, 32);
  unsigned char v17[32] = 6;
  double v9 = v5 - v7;
  double v10 = v6 - v7;
  double v11 = v7 + v7;
  v26.origin.CGFloat x = v5 - v7;
  v26.origin.CGFloat y = v10;
  v26.size.CGFloat width = v11;
  v26.size.CGFloat height = v11;
  if (!CGRectIsNull(v26))
  {
    *(void *)Swift::String v19 = 0x3FF0000000000000;
    *(_OWORD *)&char v19[8] = 0uLL;
    *(_OWORD *)&v19[24] = 0x3FF0000000000000uLL;
    *(void *)&v19[40] = 0;
    v27.origin.CGFloat x = v9;
    v27.origin.CGFloat y = v10;
    v27.size.CGFloat width = v11;
    v27.size.CGFloat height = v11;
    *(CGRect *)uint64_t v17 = CGRectApplyAffineTransform(v27, (CGAffineTransform *)v19);
    unsigned char v17[32] = 1;
  }
  specialized Path.withMutableBuffer(do:)((uint64_t)v17, v5 + v8, v6 + v8);
  specialized Path.withMutableBuffer(do:)((uint64_t)v17, v5 - v8, v6 - v8);
  v22[0] = *(_OWORD *)v17;
  v22[1] = *(_OWORD *)&v17[16];
  char v23 = v17[32];
  v28.origin.CGFloat x = 0.0;
  v28.origin.CGFloat y = 0.0;
  v28.size.CGFloat width = width;
  v28.size.CGFloat height = height;
  BOOL IsNull = CGRectIsNull(v28);
  if (IsNull) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)&width;
  }
  if (IsNull) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)&height;
  }
  if (IsNull) {
    unsigned __int8 v15 = 6;
  }
  else {
    unsigned __int8 v15 = 0;
  }
  v24[0] = 0;
  v24[1] = 0;
  v24[2] = v13;
  v24[3] = v14;
  unsigned __int8 v25 = v15;
  if (one-time initialization token for yellow != -1) {
    swift_once();
  }
  *(void *)Swift::String v19 = static Color.yellow;
  memset(&v19[8], 0, 48);
  long long v20 = 0u;
  char v21 = 1;
  *(void *)uint64_t v17 = 256;
  memset(&v17[8], 0, 32);
  char v18 = 0;
  swift_retain();
  GraphicsContext.draw(_:with:style:)((uint64_t)v24, (uint64_t)v19, (uint64_t)v17, v2);
  outlined consume of Path.Storage(0, 0, v13, v14, v15);
  swift_release();
  if (one-time initialization token for red != -1) {
    swift_once();
  }
  *(void *)Swift::String v19 = static Color.red;
  memset(&v19[8], 0, 48);
  long long v20 = 0u;
  char v21 = 1;
  *(double *)uint64_t v17 = v16;
  *(_OWORD *)&v17[8] = xmmword_2461BDB90;
  *(void *)&v17[24] = MEMORY[0x263F8EE78];
  *(void *)&unsigned char v17[32] = 0;
  char v18 = 1;
  swift_retain();
  GraphicsContext.draw(_:with:style:)((uint64_t)v22, (uint64_t)v19, (uint64_t)v17, v2);
  outlined retain of Path((uint64_t)v22, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_release();
}

uint64_t DisplayList.GraphicsRenderer.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DisplayList.GraphicsRenderer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  int v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x24C523D60](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *int v3 = v4;
    return destroy for Image.ResizableProvider;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  int v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x24C523D60](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *int v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (**a1)(void ***a1), unint64_t a2, uint64_t a3))(void ***a1)
{
  uint64_t result = (void (*)(void ***))malloc(0x75uLL);
  *a1 = result;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    CGFloat v7 = result;
    uint64_t v8 = a3 + 120 * a2;
    double v9 = *(void **)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 40);
    double v11 = *(void **)(v8 + 48);
    uint64_t v12 = *(void *)(v8 + 56);
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v14 = *(void *)(v8 + 72);
    uint64_t v15 = *(void *)(v8 + 80);
    uint64_t v16 = *(void *)(v8 + 88);
    uint64_t v17 = *(void *)(v8 + 96);
    uint64_t v18 = *(void *)(v8 + 104);
    uint64_t v19 = *(void *)(v8 + 112);
    uint64_t v20 = *(void *)(v8 + 120);
    uint64_t v21 = *(void *)(v8 + 128);
    uint64_t v22 = *(void *)(v8 + 136);
    int v23 = *(_DWORD *)(v8 + 144);
    LOBYTE(v8) = *(unsigned char *)(v8 + 148);
    *(void *)CGFloat v7 = v9;
    *((void *)v7 + 1) = v10;
    *((void *)v7 + 2) = v11;
    *((void *)v7 + 3) = v12;
    *((void *)v7 + 4) = v13;
    *((void *)v7 + 5) = v14;
    *((void *)v7 + 6) = v15;
    *((void *)v7 + 7) = v16;
    *((void *)v7 + 8) = v17;
    *((void *)v7 + 9) = v18;
    *((void *)v7 + 10) = v19;
    *((void *)v7 + 11) = v20;
    *((void *)v7 + 12) = v21;
    *((void *)v7 + 13) = v22;
    *((_DWORD *)v7 + 28) = v23;
    *((unsigned char *)v7 + 116) = v8;
    outlined copy of GraphicsFilter(v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, SBYTE2(v23));
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (void ***a1)
{
  uint64_t v1 = *a1;
  outlined consume of GraphicsFilter(**a1, (int)v1[1], v1[2], (char)v1[3], (uint64_t)v1[4], (uint64_t)v1[5], (uint64_t)v1[6], (uint64_t)v1[7], (uint64_t)v1[8], (uint64_t)v1[9], (uint64_t)v1[10], (uint64_t)v1[11], (uint64_t)v1[12], (uint64_t)v1[13], *((_DWORD *)v1 + 28), BYTE2(*((_DWORD *)v1 + 28)));

  free(v1);
}

BOOL specialized static DisplayList.GraphicsRenderer.Cache.CallbackKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return result;
}

uint64_t partial apply for closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(uint64_t *a1)
{
  return closure #1 in DisplayList.GraphicsRenderer.render(item:in:)(a1, *(double **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t method lookup function for DisplayList.GraphicsRenderer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayList.GraphicsRenderer);
}

uint64_t dispatch thunk of DisplayList.GraphicsRenderer.__allocating_init(platformViewMode:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t getEnumTagSinglePayload for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    unsigned int v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 3;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245A67C44);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 3;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 1;
  if (v8 <= 1) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFD) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v7 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x245A67D2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for DisplayList.GraphicsRenderer.PlatformViewMode(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.PlatformViewMode()
{
  return &type metadata for DisplayList.GraphicsRenderer.PlatformViewMode;
}

void *initializeBufferWithCopyOfBuffer for DisplayList.GraphicsRenderer.Cache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DisplayList.GraphicsRenderer.Cache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for DisplayList.GraphicsRenderer.Cache(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for DisplayList.GraphicsRenderer.Cache()
{
  return &unk_26FA421E8;
}

void type metadata accessor for Text.Effect.InteractionMetrics?(uint64_t a1)
{
}

void type metadata accessor for WeakBox<AnyLocationBase>?(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.Cache.AnimatorKey()
{
  return &type metadata for DisplayList.GraphicsRenderer.Cache.AnimatorKey;
}

ValueMetadata *type metadata accessor for DisplayList.GraphicsRenderer.Cache.CallbackKey()
{
  return &type metadata for DisplayList.GraphicsRenderer.Cache.CallbackKey;
}

double DisplayList.InterpolatorGroup.maxDuration.getter()
{
  swift_beginAccess();
  return *(double *)(v0 + 16);
}

uint64_t DisplayList.InterpolatorGroup.maxDuration.setter(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 16) = a1;
  return result;
}

uint64_t (*DisplayList.InterpolatorGroup.maxDuration.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t DisplayList.InterpolatorGroup.deinit()
{
  (*(void (**)(void))(*(void *)v0 + 88))();
  return v0;
}

uint64_t DisplayList.InterpolatorGroup.__deallocating_deinit()
{
  (*(void (**)(void))(*(void *)v0 + 88))();

  return swift_deallocClassInstance();
}

uint64_t DisplayList.UnaryInterpolatorGroup.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  uint64_t v1 = static Time.infinity;
  uint64_t v2 = MEMORY[0x263F8EE78];
  *(_WORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 34) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 64) = v1;
  *(_DWORD *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 76) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(void *)(v0 + 80) = v2;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(unsigned char *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 160;
  *(unsigned char *)(v0 + 128) = 3;
  *(void *)(v0 + 16) = 0x7FF0000000000000;
  *(void *)(v0 + 24) = v2;
  return v0;
}

uint64_t DisplayList.UnaryInterpolatorGroup.init()()
{
  uint64_t v1 = one-time initialization token for infinity;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v2 = static Time.infinity;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 24) = MEMORY[0x263F8EE78];
  *(_WORD *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 34) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 64) = v2;
  *(_DWORD *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 76) = 1;
  *(_DWORD *)(v0 + 116) = 0;
  *(void *)(v0 + 80) = v3;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0;
  *(unsigned char *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_DWORD *)(v0 + 124) = 160;
  *(unsigned char *)(v0 + 128) = 3;
  swift_release();
  *(void *)(v0 + 16) = 0x7FF0000000000000;
  return v0;
}

Swift::Void __swiftcall DisplayList.UnaryInterpolatorGroup.reset()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v1 + 112;
    do
    {
      if (*(void *)v3)
      {
        int v4 = *(void **)(v3 - 8);
        unsigned int v5 = *(void **)(v3 - 24);
        uint64_t v6 = *(void (**)(void))(**(void **)v3 + 96);
        id v7 = *(id *)(v3 - 16);
        id v8 = v4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v9 = v5;
        v6();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v3 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 80) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
}

SwiftUI::Time __swiftcall DisplayList.UnaryInterpolatorGroup.nextUpdate(after:)(SwiftUI::Time after)
{
  uint64_t v3 = v1;
  swift_beginAccess();
  int v4 = v2 + 8;
  if (*(void *)(v2[10] + 16)) {
    int v4 = v2 + 11;
  }
  *(SwiftUI::Time *)&result.seconds = (SwiftUI::Time)*v4;
  *uint64_t v3 = *v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.features.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  __int16 v4 = *(_WORD *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v7 = 0;
LABEL_7:
      uint64_t v13 = v6 - v7;
      uint64_t v14 = (__int16 *)(v5 + 112 * v7 + 40);
      do
      {
        __int16 v15 = *v14;
        v14 += 56;
        v4 |= v15;
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    __int16 v8 = 0;
    uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    id v9 = (__int16 *)(v5 + 152);
    uint64_t v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      __int16 v11 = *(v9 - 56);
      __int16 v12 = *v9;
      v9 += 112;
      v4 |= v11;
      v8 |= v12;
      v10 -= 2;
    }
    while (v10);
    v4 |= v8;
    if (v6 != v7) {
      goto LABEL_7;
    }
  }
LABEL_9:
  *a1 = v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.properties.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  char v4 = *(unsigned char *)(v1 + 34);
  uint64_t v5 = *(void *)(v1 + 80);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    if (v6 == 1)
    {
      uint64_t v7 = 0;
LABEL_7:
      uint64_t v13 = v6 - v7;
      uint64_t v14 = (char *)(v5 + 112 * v7 + 42);
      do
      {
        char v15 = *v14;
        v14 += 112;
        v4 |= v15;
        --v13;
      }
      while (v13);
      goto LABEL_9;
    }
    char v8 = 0;
    uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFELL;
    id v9 = (char *)(v5 + 154);
    uint64_t v10 = v6 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      char v11 = *(v9 - 112);
      char v12 = *v9;
      v9 += 224;
      v4 |= v11;
      v8 |= v12;
      v10 -= 2;
    }
    while (v10);
    v4 |= v8;
    if (v6 != v7) {
      goto LABEL_7;
    }
  }
LABEL_9:
  *a1 = v4;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.update(contentSeed:transition:animation:listener:contentsScale:rasterizationOptions:supportsVFD:)(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6, float a7)
{
  uint64_t v12 = *a2;
  __int16 v13 = *((_WORD *)a2 + 6);
  int v14 = *((_DWORD *)a2 + 2);
  char v15 = *((unsigned char *)a2 + 14);
  char v16 = *a5;
  int v17 = *((_DWORD *)a5 + 1);
  char v18 = a5[8];
  int v19 = *((_DWORD *)a5 + 3);
  char v20 = a5[16];
  unsigned __int16 v26 = *a1;
  uint64_t v22 = v12;
  int v23 = v14;
  __int16 v24 = v13;
  char v25 = v15;
  swift_beginAccess();
  DisplayList.InterpolatorLayer.update(contentSeed:transition:animation:listener:supportsVFD:)(&v26, (uint64_t)&v22, a3, a4, a6);
  uint64_t result = swift_endAccess();
  if (*(float *)(v7 + 108) != a7)
  {
    *(float *)(v7 + 108) = a7;
    swift_beginAccess();
    DisplayList.InterpolatorLayer.invalidateContentsScale()();
    uint64_t result = swift_endAccess();
  }
  *(unsigned char *)(v7 + 112) = v16;
  *(_DWORD *)(v7 + 116) = v17;
  *(unsigned char *)(v7 + 120) = v18;
  *(_DWORD *)(v7 + 124) = v19;
  *(unsigned char *)(v7 + 128) = v20;
  return result;
}

Swift::Void __swiftcall DisplayList.InterpolatorLayer.invalidateContentsScale()()
{
  swift_unknownObjectRelease();
  *(void *)(v0 + 32) = 0;
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = v1[2];
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
    }
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    unint64_t v3 = 0;
    char v4 = (void **)(v1 + 11);
    do
    {
      if (v3 >= v1[2])
      {
        __break(1u);
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
      *(v4 - 3) = 0;
      swift_unknownObjectRelease();
      if (v3 >= v1[2]) {
        goto LABEL_10;
      }
      ++v3;
      uint64_t v5 = *v4;
      void *v4 = 0;
      v4 += 14;
    }
    while (v2 != v3);
    *(void *)(v0 + 56) = v1;
  }
  *(unsigned char *)(v0 + 83) = 1;
}

uint64_t DisplayList.UnaryInterpolatorGroup.rewriteInterpolation(serial:list:time:frame:contentOrigin:contentOffset:version:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v20 = *a12;
  __int16 v21 = *(_WORD *)(a10 + 8);
  char v22 = *(unsigned char *)(a10 + 10);
  uint64_t v65 = *(void *)a10;
  __int16 v66 = v21;
  char v67 = v22;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  DisplayList.InterpolatorLayer.setDisplayList(_:origin:)((uint64_t)&v65, a5, a6);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v12 + 80) + 16))
  {
    uint64_t Value = (void *)AGGraphGetValue();
    if (*(double *)(v12 + 88) != *(double *)Value)
    {
      *(void *)(v12 + 88) = *Value;
      *(unsigned char *)(v12 + 107) = 1;
    }
    uint64_t v24 = specialized static ViewGraph.current.getter();
    double v25 = *(double *)AGGraphGetValue();
    swift_beginAccess();
    double v26 = *(double *)(v24 + 376);
    if (v25 < v26) {
      double v26 = v25;
    }
    *(double *)(v24 + 376) = v26;
    swift_release();
    Swift::Float v27 = *(float *)(v12 + 108);
    swift_beginAccess();
    Swift::Double v28 = *(double *)(v12 + 16);
    swift_beginAccess();
    DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(v27, v28);
    swift_endAccess();
    uint64_t v29 = *(void *)(v12 + 24);
    __int16 v30 = *(_WORD *)(v12 + 32);
    char v31 = *(unsigned char *)(v12 + 34);
    uint64_t v32 = *(void *)(v12 + 56);
    double v33 = *(double *)(v12 + 64);
    int v34 = *(_DWORD *)(v12 + 72);
    char v35 = *(unsigned char *)(v12 + 76);
    uint64_t v36 = *(void *)(v12 + 80);
    double v37 = *(double *)(v12 + 88);
    uint64_t v38 = *(void *)(v12 + 96);
    __int16 v39 = *(_WORD *)(v12 + 104);
    char v40 = *(unsigned char *)(v12 + 106);
    char v41 = *(unsigned char *)(v12 + 107);
    v51[0] = v20;
    v51[1] = v29;
    __int16 v52 = v30;
    char v53 = v31;
    long long v54 = *(_OWORD *)(v12 + 40);
    uint64_t v55 = v32;
    double v56 = v33;
    int v57 = v34;
    char v58 = v35;
    uint64_t v59 = v36;
    double v60 = v37;
    uint64_t v61 = v38;
    __int16 v62 = v39;
    char v63 = v40;
    char v64 = v41;
    int v42 = *(_DWORD *)(v12 + 116);
    char v43 = *(unsigned char *)(v12 + 120);
    LODWORD(v32) = *(_DWORD *)(v12 + 124);
    LOBYTE(v34) = *(unsigned char *)(v12 + 128);
    v46[0] = *(unsigned char *)(v12 + 112);
    int v47 = v42;
    char v48 = v43;
    int v49 = v32;
    char v50 = v34;
    char v44 = DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(a10, v51, v46, v33, v37, a3, a4, a7, a8);
  }
  else
  {
    char v44 = 0;
  }
  return v44 & 1;
}

Swift::Void __swiftcall DisplayList.InterpolatorLayer.updateInterpolators(contentsScale:maxDuration:)(Swift::Float contentsScale, Swift::Double maxDuration)
{
  if (*(unsigned char *)(v2 + 83) == 1)
  {
    uint64_t v3 = v2;
    *(unsigned char *)(v2 + 83) = 0;
    v69[0] = 0;
    char v4 = *(void **)(v2 + 56);
    int64_t v5 = v4[2];
    p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
    if (!v5) {
      goto LABEL_89;
    }
    BOOL v63 = 0;
    char v65 = 0;
    unint64_t v9 = 0;
    char v64 = (__n128 **)(v2 + 72);
    while (1)
    {
      while (1)
      {
        if (v9 >= v4[2])
        {
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
        uint64_t v10 = 14 * v9;
        switch(LOBYTE(v4[14 * v9 + 17]))
        {
          case 1:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            }
            if (v9 >= v4[2]) {
              goto LABEL_96;
            }
            LOBYTE(v4[v10 + 17]) = 2;
            *(void *)(v3 + 56) = v4;
            swift_beginAccess();
            if (static CoreTesting.isRunning) {
              goto LABEL_22;
            }
            v4[v10 + 15] = *(void *)(v3 + 64);
            break;
          case 2:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            }
            if (v9 >= v4[2]) {
              goto LABEL_97;
            }
            LOBYTE(v4[v10 + 17]) = 3;
            *(void *)(v3 + 56) = v4;
            double v12 = *(double *)(v3 + 64);
            if (v12 - *(double *)&v4[v10 + 15] <= 0.0333333333) {
              goto LABEL_22;
            }
            swift_beginAccess();
            if (static CoreTesting.isRunning) {
              goto LABEL_22;
            }
            *(double *)&v4[v10 + 15] = v12;
            break;
          case 3:
            goto LABEL_22;
          default:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
            }
            if (v9 >= v4[2]) {
              goto LABEL_95;
            }
            char v11 = &v4[v10];
            *((unsigned char *)v11 + 136) = 1;
            v11[15] = *(void *)(v3 + 64);
            break;
        }
        *(void *)(v3 + 56) = v4;
LABEL_22:
        unint64_t v13 = v4[2];
        if (v9 >= v13) {
          goto LABEL_94;
        }
        int v14 = (double *)&v4[v10 + 4];
        double v15 = v14[12];
        if (v15 < 0.0 || v15 > *(double *)(v3 + 64) - v14[11]) {
          break;
        }
        DisplayList.InterpolatorLayer.remove(prefix:)(v9);
        unint64_t v9 = 0;
        char v4 = *(void **)(v3 + 56);
        int64_t v5 = v4[2];
        if (!v5)
        {
          p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
LABEL_86:
          if (!v63) {
            goto LABEL_89;
          }
          goto LABEL_87;
        }
      }
      if (v9)
      {
        id v16 = v69[0];
        char v17 = v65;
        if (!v69[0])
        {
          id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
          v69[0] = v16;
          unint64_t v13 = v4[2];
        }
        if (v9 - 1 >= v13) {
          goto LABEL_102;
        }
        uint64_t v18 = (uint64_t)&v4[14 * v9 - 10];
        double v19 = *(double *)(v18 + 88);
        if (*(double *)(v3 + 64) - v19 < 0.0) {
          double v20 = 0.0;
        }
        else {
          double v20 = *(double *)(v3 + 64) - v19;
        }
        __int16 v21 = *(void **)(v18 + 56);
        if (!v21) {
          goto LABEL_111;
        }
        if (!v16) {
          goto LABEL_112;
        }
        uint64_t State = RBDisplayListGetState();
        *(float *)&double v23 = v20;
        objc_msgSend(v21, sel_drawInState_by_, State, v23);
        id v24 = objc_msgSend(v16, sel_moveContents);
      }
      else
      {
        *(void *)&long long v67 = *(void *)(v3 + 64);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if (!v4[2]) {
            goto LABEL_107;
          }
        }
        else
        {
          char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          if (!v4[2]) {
            goto LABEL_107;
          }
        }
        char v25 = DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)((double *)&v67, v64, v69, contentsScale);
        *(void *)(v3 + 56) = v4;
        if (!v4[2]) {
          goto LABEL_108;
        }
        char v17 = v25 | v65;
        id v24 = (id)v4[v10 + 8];
      }
      if ((uint64_t)v9 >= v5 - 1)
      {
        *(void *)&long long v67 = *(void *)(v3 + 64);
        swift_unknownObjectRetain();
        char v33 = DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)((double *)&v67, v64, v69, contentsScale) | v17;
        uint64_t v30 = *(void *)(v3 + 32);
        unint64_t v28 = v4[2];
        if (v33) {
          goto LABEL_51;
        }
      }
      else
      {
        *(void *)&long long v67 = *(void *)(v3 + 64);
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        }
        unint64_t v26 = v9 + 1;
        if (v9 + 1 >= v4[2])
        {
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
          JUMPOUT(0x245A6937CLL);
        }
        char v27 = DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)((double *)&v67, v64, v69, contentsScale);
        *(void *)(v3 + 56) = v4;
        unint64_t v28 = v4[2];
        if (v26 >= v28) {
          goto LABEL_105;
        }
        char v29 = v27 | v17;
        uint64_t v30 = v4[14 * v26 + 8];
        if (v29)
        {
LABEL_51:
          char v32 = 1;
          goto LABEL_52;
        }
      }
      if (v9 >= v28) {
        goto LABEL_106;
      }
      char v31 = (void *)v4[v10 + 11];
      if (v31)
      {
        swift_unknownObjectRetain();
        id v57 = v31;
        objc_msgSend(v57, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();

        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for RBDisplayListInterpolator);
        swift_dynamicCast();
        id v58 = *(id *)&v66[0];
        objc_msgSend(v58, sel_setFrom_, v24);
        char v4 = *(void **)(v3 + 56);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        }
        if (v9 >= v4[2]) {
          goto LABEL_110;
        }
        uint64_t v59 = (void *)v4[v10 + 11];
        v4[v10 + 11] = v58;

        char v65 = 0;
        *(void *)(v3 + 56) = v4;
        goto LABEL_76;
      }
      char v32 = 0;
LABEL_52:
      if (v9 >= v28) {
        goto LABEL_98;
      }
      char v65 = v32;
      int v34 = (void *)*MEMORY[0x263F638F8];
      char v35 = (void *)v4[v10 + 13];
      *((void *)&v68 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for RBAnimation);
      *(void *)&long long v67 = v35;
      outlined init with take of Any(&v67, v66);
      swift_unknownObjectRetain();
      id v36 = v34;
      id v37 = v35;
      uint64_t v38 = MEMORY[0x263F8EE80];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v36, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)(v3 + 56);
      if (v9 >= *(void *)(v40 + 16)) {
        goto LABEL_99;
      }
      char v41 = (void *)*MEMORY[0x263F63900];
      int v42 = *(void **)(v40 + v10 * 8 + 96);
      if (v42)
      {
        *((void *)&v68 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for RBTransition);
        *(void *)&long long v67 = v42;
        outlined init with take of Any(&v67, v66);
        id v43 = v41;
        id v44 = v42;
        char v45 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v66, v43, v45);

        swift_bridgeObjectRelease();
      }
      else
      {
        id v46 = v41;
        swift_bridgeObjectRetain();
        uint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
        char v49 = v48;
        swift_bridgeObjectRelease();
        if (v49)
        {
          char v50 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v66[0] = v38;
          if ((v50 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v38 = *(void *)&v66[0];
          }

          outlined init with take of Any((_OWORD *)(*(void *)(v38 + 56) + 32 * v47), &v67);
          specialized _NativeDictionary._delete(at:)(v47, v38);
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v67 = 0u;
          long long v68 = 0u;
        }

        outlined destroy of Any?((uint64_t)&v67);
      }
      type metadata accessor for RBDisplayListInterpolatorOptionKey(0);
      lazy protocol witness table accessor for type RBDisplayListInterpolatorOptionKey and conformance RBDisplayListInterpolatorOptionKey();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v52 = objc_msgSend(self, sel_newInterpolatorWithFrom_to_options_, v24, v30, isa);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      char v4 = *(void **)(v3 + 56);
      id v53 = v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      }
      if (v9 >= v4[2]) {
        goto LABEL_100;
      }
      uint64_t v55 = (void *)v4[v10 + 11];
      v4[v10 + 11] = v53;

      objc_msgSend(v53, sel_activeDuration);
      if (v9 >= v4[2]) {
        goto LABEL_101;
      }
      long long v54 = (double *)&v4[v10];
      if (v56 > maxDuration) {
        double v56 = maxDuration;
      }
      v54[16] = v56;
      *(void *)(v3 + 56) = v4;
      if (v54[16] > *(double *)(v3 + 64) - v54[15])
      {

LABEL_76:
        if (v63)
        {
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          ++v9;
          BOOL v63 = 1;
          if ((uint64_t)v9 >= v5) {
            goto LABEL_87;
          }
        }
        else
        {
          if (v9 >= v4[2]) {
            goto LABEL_109;
          }
          double v60 = *(double *)&v4[v10 + 9];
          if (one-time initialization token for infinity != -1) {
            swift_once();
          }
          double v61 = *(double *)&static Time.infinity;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          BOOL v63 = v60 < v61;
          ++v9;
          p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
          if ((uint64_t)v9 >= v5) {
            goto LABEL_86;
          }
        }
      }
      else
      {
        DisplayList.InterpolatorLayer.remove(prefix:)(v9);

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v9 = 0;
        char v4 = *(void **)(v3 + 56);
        int64_t v5 = v4[2];
        if (!v5)
        {
          p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
          if (!v63)
          {
LABEL_89:
            maxDuration = *(double *)(v3 + 40);
            if (p_cache[25] == (void *)-1)
            {
LABEL_90:
              double v62 = *(double *)&static Time.infinity;

              if (maxDuration >= v62)
              {
                swift_release();
                *(void *)(v3 + 72) = 0;
              }
              return;
            }
LABEL_103:
            swift_once();
            goto LABEL_90;
          }
LABEL_87:

          return;
        }
      }
    }
  }
}

uint64_t DisplayList.InterpolatorLayer.updateOutput(list:frame:contentOffset:version:rasterizationOptions:)(uint64_t a1, uint64_t *a2, char *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v10 = *(void *)(v9 + 56);
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    return 0;
  }
  uint64_t v17 = *a2;
  int v78 = *((_DWORD *)a3 + 1);
  char v79 = *a3;
  int v18 = *((_DWORD *)a3 + 3);
  char v76 = a3[16];
  char v77 = a3[8];
  uint64_t v19 = *(void *)v9;
  __int16 v20 = *(_WORD *)(v9 + 8);
  char v21 = *(unsigned char *)(v9 + 10);
  double v22 = *(double *)(v9 + 16);
  double v23 = *(double *)(v9 + 24);
  double v24 = *(double *)(v9 + 64);
  int v25 = *(unsigned __int8 *)(v9 + 82);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11 == 1)
  {
    if (!*(void *)(v10 + 16)) {
      goto LABEL_27;
    }
    char v27 = *(void **)(v10 + 88);
    if (!v27 || (uint64_t result = (uint64_t)objc_msgSend(v27, sel_onlyFades), result))
    {
      uint64_t v28 = *(void *)(v10 + 32);
      __int16 v29 = *(_WORD *)(v10 + 40);
      char v30 = *(unsigned char *)(v10 + 42);
      Swift::String v81 = (char *)MEMORY[0x263F8EE78];
      uint64_t v82 = v28;
      __int16 v83 = v29;
      char v84 = v30;
      specialized DisplayList.forEachIdentity(_:)(&v82, &v81);
      if (*((void *)v81 + 2))
      {
        specialized MutableCollection<>.sort(by:)(&v81);
        uint64_t v82 = v19;
        __int16 v83 = v20;
        char v84 = v21;
        char v31 = specialized DisplayList.forEachIdentity(_:)(&v82, (uint64_t)&v81);
        uint64_t result = swift_bridgeObjectRelease();
        if ((v31 & 1) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      objc_msgSend(*(id *)(v10 + 104), sel_evaluateAtTime_, v24 - *(double *)(v10 + 120));
      uint64_t v66 = COERCE_UNSIGNED_INT(1.0 - *(float *)&v65);
      uint64_t v67 = *(void *)(v10 + 32);
      __int16 v80 = *(_WORD *)(v10 + 40);
      char v68 = *(unsigned char *)(v10 + 42);
      double v69 = *(double *)(v10 + 48) - v22 + a8;
      double v70 = *(double *)(v10 + 56) - v23 + a9;
      uint64_t v71 = v65;
      _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v72 = swift_allocObject();
      *(_OWORD *)(v72 + 16) = xmmword_2461BDD50;
      *(double *)(v72 + 32) = v69;
      *(double *)(v72 + 40) = v70;
      *(double *)(v72 + 48) = a6;
      *(double *)(v72 + 56) = a7;
      *(void *)(v72 + 64) = v17;
      *(void *)(v72 + 72) = v66;
      *(void *)(v72 + 80) = 0x4000000400000000;
      *(void *)(v72 + 88) = v67;
      *(unsigned char *)(v72 + 98) = v68;
      *(_WORD *)(v72 + 96) = v80;
      *(_DWORD *)(v72 + 100) = 0;
      *(double *)(v72 + 104) = a8;
      *(double *)(v72 + 112) = a9;
      *(double *)(v72 + 120) = a6;
      *(double *)(v72 + 128) = a7;
      *(void *)(v72 + 136) = v17;
      *(void *)(v72 + 144) = v71;
      *(void *)(v72 + 152) = 0x4000000400000000;
      *(void *)(v72 + 160) = v19;
      *(unsigned char *)(v72 + 170) = v21;
      *(_WORD *)(v72 + 168) = v20;
      *(_DWORD *)(v72 + 172) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.init(_:)(v72, (uint64_t)&v82);
      __int16 v73 = v83;
      char v74 = v84;
      *(void *)a1 = v82;
      *(_WORD *)(a1 + 8) = v73;
      *(unsigned char *)(a1 + 10) = v74;
      return 1;
    }
  }
LABEL_8:
  if (v11 <= *(void *)(v10 + 16))
  {
    uint64_t v32 = v10 + 112 * v11;
    char v33 = *(void **)(v32 - 24);
    if (!v33)
    {
      uint64_t result = 0;
      *(void *)a1 = MEMORY[0x263F8EE78];
      *(_WORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 10) = 0;
      return result;
    }
    double v75 = v22;
    int v34 = v25;
    float v35 = v24 - *(double *)(v32 + 8);
    if (v35 < 0.0) {
      float v36 = 0.0;
    }
    else {
      float v36 = v24 - *(double *)(v32 + 8);
    }
    id v37 = v33;
    *(float *)&double v38 = v36;
    objc_msgSend(v37, sel_boundingRectWithProgress_, v38);
    CGFloat x = v85.origin.x;
    CGFloat y = v85.origin.y;
    CGFloat width = v85.size.width;
    CGFloat height = v85.size.height;
    BOOL IsNull = CGRectIsNull(v85);
    CGFloat v44 = 0.0;
    CGFloat v45 = 0.0;
    CGFloat v46 = 0.0;
    CGFloat v47 = 0.0;
    if (!IsNull)
    {
      CGFloat v44 = x;
      CGFloat v45 = y;
      CGFloat v46 = width;
      CGFloat v47 = height;
    }
    CGRect v86 = CGRectIntegral(*(CGRect *)&v44);
    double v48 = v86.origin.x;
    double v49 = v86.origin.y;
    CGFloat v50 = v86.size.width;
    CGFloat v51 = v86.size.height;
    *(float *)&v86.origin.CGFloat x = v36;
    id v52 = objc_msgSend(v37, sel_copyContentsWithProgress_, v86.origin.x);
    int v53 = v18 | 0x100;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v52;
    *(double *)(v54 + 24) = v48;
    *(double *)(v54 + 32) = v49;
    *(unsigned char *)(v54 + 40) = v79;
    *(_DWORD *)(v54 + 44) = v78;
    *(unsigned char *)(v54 + 48) = v77;
    *(_DWORD *)(v54 + 52) = v53;
    *(unsigned char *)(v54 + 56) = v76;
    if (v17) {
      uint64_t v55 = (2 * (((33 * WORD1(v17)) ^ v17) & 0x7FFFLL)) | 1;
    }
    else {
      uint64_t v55 = 0;
    }
    double v56 = a9 - v23;
    double v57 = a8 - v75 + v48;
    double v58 = v56 + v49;
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = xmmword_2461B9DC0;
    *(double *)(v59 + 32) = v57;
    *(double *)(v59 + 40) = v58;
    *(CGFloat *)(v59 + 48) = v50;
    *(CGFloat *)(v59 + 56) = v51;
    *(void *)(v59 + 64) = v17;
    *(void *)(v59 + 72) = v54 | 0xA000000000000000;
    *(void *)(v59 + 80) = v55;
    *(void *)(v59 + 88) = 0;
    *(unsigned char *)(v59 + 98) = 0;
    *(_WORD *)(v59 + 96) = 0;
    *(_DWORD *)(v59 + 100) = 0;
    swift_unknownObjectRetain();
    swift_retain();
    DisplayList.init(_:)(v59, (uint64_t)&v82);
    __int16 v61 = v83;
    char v62 = v84;
    *(void *)a1 = v82;
    *(_WORD *)(a1 + 8) = v61;
    *(unsigned char *)(a1 + 10) = v62;
    if (v34)
    {
      *(float *)&double v60 = v36;
      objc_msgSend(v37, sel_maxAbsoluteVelocityWithProgress_, v60);
      double v64 = v63;
      specialized static ViewGraph.current.getter();
      swift_beginAccess();
      ViewGraph.NextUpdate.maxVelocity(_:)(v64);
      swift_endAccess();
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_release();
    }
    return 1;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.apply(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(unsigned __int16 *)(a1 + 64) | (*(unsigned __int8 *)(a1 + 66) << 16);
  if (v4 >> 62 == 3 && (v6 & 0xFFFFFF) == 0 && v4 == 0xC000000000000000 && (v5 | v3) == 0)
  {
    uint64_t result = swift_retain();
    char v16 = 0;
    __int16 v14 = 0;
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_2461B9DC0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 48) = v10;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v12;
    *(void *)(v13 + 72) = v3;
    *(void *)(v13 + 80) = v4;
    *(void *)(v13 + 88) = v5;
    *(unsigned char *)(v13 + 98) = BYTE2(v6);
    *(_WORD *)(v13 + 96) = v6;
    *(_DWORD *)(v13 + 100) = 0;
    swift_retain();
    outlined copy of DisplayList.Item.Value(v3, v4);
    DisplayList.Item.features.getter(&v17);
    __int16 v14 = v17;
    DisplayList.Item.properties.getter(&v17);
    uint64_t result = outlined consume of DisplayList.Item.Value(v3, v4);
    char v16 = v17;
  }
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = 0x4000001100000000;
  *(void *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 66) = v16;
  *(_WORD *)(a1 + 64) = v14;
  return result;
}

uint64_t DisplayList.UnaryInterpolatorGroup.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t DisplayList.UnaryInterpolatorGroup.deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 112;
    do
    {
      if (*(void *)v4)
      {
        uint64_t v5 = *(void **)(v4 - 8);
        int v6 = *(void **)(v4 - 24);
        uint64_t v7 = *(void (**)(void))(**(void **)v4 + 96);
        id v8 = *(id *)(v4 - 16);
        id v9 = v5;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v10 = v6;
        v7();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v4 += 112;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v1 = v0;
  }
  *(void *)(v1 + 80) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 96) = 0;
  *(unsigned char *)(v1 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t DisplayList.UnaryInterpolatorGroup.__deallocating_deinit()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = v2 + 112;
    do
    {
      if (*(void *)v4)
      {
        uint64_t v5 = *(void **)(v4 - 8);
        int v6 = *(void **)(v4 - 24);
        uint64_t v7 = *(void (**)(void))(**(void **)v4 + 96);
        id v8 = *(id *)(v4 - 16);
        id v9 = v5;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v10 = v6;
        v7();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v4 += 112;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v1 = v0;
  }
  *(void *)(v1 + 80) = MEMORY[0x263F8EE78];
  *(void *)(v1 + 96) = 0;
  *(unsigned char *)(v1 + 107) = 1;
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

void DisplayList.InterpolatorLayer.remove(prefix:)(uint64_t a1)
{
  if (a1 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v2 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = v1 + 56;
  if (*(void *)(*(void *)(v1 + 56) + 16) < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v15 = v1;
    int64_t v16 = a1 + 1;
    uint64_t v3 = swift_bridgeObjectRetain() + 112;
    do
    {
      if (*(void *)v3)
      {
        uint64_t v4 = *(void **)(v3 - 8);
        uint64_t v5 = *(void **)(v3 - 24);
        int v6 = *(void (**)(void))(**(void **)v3 + 96);
        id v7 = *(id *)(v3 - 16);
        id v8 = v4;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v9 = v5;
        v6();
        swift_release_n();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      v3 += 112;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    specialized Array.replaceSubrange<A>(_:with:)(0, v16);
    id v10 = *(void **)v17;
    uint64_t v11 = *(void *)(*(void *)v17 + 16);
    if (!v11)
    {
LABEL_16:
      *(unsigned char *)(v15 + 83) = 1;
      return;
    }
    unint64_t v12 = 0;
    uint64_t v13 = 11;
    while (1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      }
      if (v12 >= v10[2]) {
        break;
      }
      ++v12;
      __int16 v14 = (void *)v10[v13];
      v10[v13] = 0;

      v13 += 14;
      if (v11 == v12)
      {
        *(void *)uint64_t v17 = v10;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_21:
  __break(1u);
}

uint64_t DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(double *a1, __n128 **a2, void **a3, float a4)
{
  uint64_t v5 = v4;
  double v9 = *a1;
  if (*(void *)(v4 + 32) && v9 < *(double *)(v4 + 40)) {
    return 0;
  }
  uint64_t v11 = *a3;
  if (*a3)
  {
    unint64_t v12 = *a2;
    if (*a2) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  *a3 = (void *)result;
  if (result)
  {
    uint64_t v11 = (void *)result;
    objc_msgSend((id)result, sel_setDeviceScale_, a4);
    unint64_t v12 = *a2;
    if (*a2)
    {
LABEL_6:
      if (*(unsigned char *)(v5 + 52))
      {
LABEL_8:
        *(double *)&unint64_t v16 = v9;
        swift_retain();
        specialized DisplayList.GraphicsRenderer.render(at:do:)(&v16, v12, a3, v5, a2);
        swift_release();
        *(void *)(v5 + 40) = v12[5].n128_u64[0];
        id v15 = objc_msgSend(v11, sel_moveContents, v16);
        swift_unknownObjectRelease();
        *(void *)(v5 + 32) = v15;
        return 1;
      }
LABEL_7:
      id v13 = v11;
      Class isa = Float._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v13, sel_setValue_forAttribute_, isa, 0);

      goto LABEL_8;
    }
LABEL_11:
    char v17 = 3;
    type metadata accessor for DisplayList.GraphicsRenderer();
    swift_allocObject();
    unint64_t v12 = (__n128 *)DisplayList.GraphicsRenderer.init(platformViewMode:)(&v17);
    *a2 = v12;
    if (*(unsigned char *)(v5 + 52)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void closure #1 in DisplayList.InterpolatorLayer.Contents.render(at:renderer:storage:contentsScale:)(void **a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v6 = one-time initialization token for shared;
    id v7 = v3;
    if (v6 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v8 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    double v9 = static CoreGlue2.shared;
    v8(&v19);

    uint64_t v10 = v19;
    uint64_t v11 = v20;
    type metadata accessor for GraphicsContext.Storage();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 32) = xmmword_24619B520;
    *(void *)(v12 + 48) = 1065353216;
    *(void *)(v12 + 56) = 0x7FF8000000000000;
    v18[0] = v10;
    v18[1] = v11;
    type metadata accessor for GraphicsContext.Storage.Shared();
    swift_allocObject();
    id v13 = v7;
    *(void *)(v12 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v13, v18);
    *(void *)(v12 + 24) = RBDisplayListGetState();
    *(unsigned char *)(v12 + 64) = 0;

    v18[0] = v12;
    if (*(double *)(a2 + 16) != 0.0 || *(double *)(a2 + 24) != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v14 = RBDrawingStateInit();
        swift_allocObject();
        uint64_t v15 = swift_retain();
        v18[0] = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v15, v14, 1, 0);
        swift_release();
      }
      RBDrawingStateTranslateCTM();
    }
    if (*a3)
    {
      __int16 v16 = *(_WORD *)(a2 + 8);
      char v17 = *(unsigned char *)(a2 + 10);
      uint64_t v19 = *(void *)a2;
      LOWORD(v20) = v16;
      BYTE2(v20) = v17;
      swift_retain();
      swift_bridgeObjectRetain();
      DisplayList.GraphicsRenderer.render(list:in:)(&v19, (unint64_t *)v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for DisplayList.InterpolatorGroup()
{
  return self;
}

uint64_t method lookup function for DisplayList.InterpolatorGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayList.InterpolatorGroup);
}

uint64_t type metadata accessor for DisplayList.UnaryInterpolatorGroup()
{
  return self;
}

uint64_t method lookup function for DisplayList.UnaryInterpolatorGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DisplayList.UnaryInterpolatorGroup);
}

uint64_t dispatch thunk of DisplayList.UnaryInterpolatorGroup.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t destroy for DisplayList.InterpolatorLayer()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  return a1;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 84)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(void *)Swift::Int result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 84) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)Swift::Int result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 84) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorLayer()
{
  return &type metadata for DisplayList.InterpolatorLayer;
}

uint64_t sub_245A6A7AC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245A6A7E4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245A6A81C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(_DWORD *)(v79 + 4 * i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(_DWORD *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(_DWORD *)(v79 + v82 + 4) = v83;
          *(_DWORD *)(v79 + v82) = v81;
          v82 -= 4;
        }
        while (v82 != -4);
        v78 += 4;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          CGRect v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 4 * v88), (char *)(v84 + 4 * *(void *)&v87[16 * v12 - 16]), v84 + 4 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            CGRect v86 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          Swift::String v90 = &v86[16 * v85 + 32];
          *(void *)Swift::String v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(void *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  Swift::String v92 = v2;
  uint64_t v93 = *v2 - 4;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(_DWORD *)(v10 + 4 * v9);
      unsigned int v15 = *(_DWORD *)(v10 + 4 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(_DWORD *)(v10 + 4 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              int v20 = *(_DWORD *)(v10 + 4 * v19);
              *(_DWORD *)(v10 + 4 * v19) = *(_DWORD *)(v10 + 4 * v18);
              *(_DWORD *)(v10 + 4 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      double v22 = (unsigned int *)(v93 + 4 * v9);
      do
      {
        unsigned int v23 = *(_DWORD *)(v10 + 4 * v9);
        Swift::Int v24 = v13;
        int v25 = v22;
        do
        {
          unsigned int v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *int v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      char v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    __int16 v29 = v11 + 32;
    char v30 = &v11[16 * v28 + 32];
    *(void *)char v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          float v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          CGFloat v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        double v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        char v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        __int16 v73 = v29;
        char v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v10 + 4 * *(void *)v71), (char *)(v10 + 4 * *(void *)v74), v10 + 4 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        __int16 v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  Swift::Int v78;
  double *v79;
  double *v80;
  uint64_t v81;
  char v82;
  double v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  double v95;
  uint64_t v96;
  double *v97;
  double *v98;
  uint64_t v99;
  char v100;
  double v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  Swift::Int v120;
  Swift::Int v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  double *v127;
  char *v128;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      unint64_t v91 = *v2;
      Swift::String v92 = *v2 + 184;
      uint64_t v93 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        Swift::Int v95 = *(double *)(v91 + 96 * i + 80);
        Swift::Int v96 = v93;
        uint64_t v97 = (double *)v92;
        do
        {
          if (v95 >= *(v97 - 13)) {
            break;
          }
          if (!v91) {
            goto LABEL_143;
          }
          Swift::String v98 = v97 - 11;
          Swift::String v99 = *((void *)v97 - 3);
          Swift::String v100 = *((unsigned char *)v97 - 16);
          Swift::String v101 = *v97;
          Swift::String v102 = *(_OWORD *)(v97 - 11);
          Swift::String v103 = *(_OWORD *)(v97 - 9);
          float v104 = *(_OWORD *)(v97 - 7);
          unint64_t v105 = *(_OWORD *)(v97 - 5);
          Swift::String v106 = *(_OWORD *)(v97 - 17);
          *((_OWORD *)v98 + 2) = *(_OWORD *)(v97 - 19);
          *((_OWORD *)v98 + 3) = v106;
          Swift::String v107 = *(_OWORD *)(v97 - 13);
          *((_OWORD *)v98 + 4) = *(_OWORD *)(v97 - 15);
          *((_OWORD *)v98 + 5) = v107;
          Swift::String v108 = *(_OWORD *)(v97 - 21);
          *(_OWORD *)Swift::String v98 = *(_OWORD *)(v97 - 23);
          *((_OWORD *)v98 + 1) = v108;
          *(v97 - 12) = v101;
          v97 -= 12;
          *(_OWORD *)(v97 - 11) = v102;
          *(_OWORD *)(v97 - 9) = v103;
          *(_OWORD *)(v97 - 7) = v104;
          *(_OWORD *)(v97 - 5) = v105;
          *((void *)v97 - 3) = v99;
          *((unsigned char *)v97 - 16) = v100;
          *(v97 - 1) = v95;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 96;
        --v93;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  uint64_t v120 = result;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    Swift::String v127 = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      uint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
      Swift::String v110 = (char *)MEMORY[0x263F8EE78];
LABEL_105:
      Swift::String v119 = v8;
      if (v11 >= 2)
      {
        Swift::String v111 = *v2;
        do
        {
          Swift::String v112 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v111) {
            goto LABEL_147;
          }
          Swift::String v113 = v110;
          Swift::String v114 = *(void *)&v110[16 * v112 + 32];
          Swift::String v115 = *(void *)&v110[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v111 + 96 * v114), (double *)(v111 + 96 * *(void *)&v110[16 * v11 + 16]), v111 + 96 * v115, v127);
          if (v1) {
            break;
          }
          if (v115 < v114) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v113 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v113);
          }
          if (v112 >= *((void *)v113 + 2)) {
            goto LABEL_136;
          }
          Swift::String v116 = &v113[16 * v112 + 32];
          *(void *)Swift::String v116 = v114;
          *((void *)v116 + 1) = v115;
          Swift::String v117 = *((void *)v113 + 2);
          if (v11 > v117) {
            goto LABEL_137;
          }
          memmove(&v113[16 * v11 + 16], &v113[16 * v11 + 32], 16 * (v117 - v11));
          Swift::String v110 = v113;
          *((void *)v113 + 2) = v117 - 1;
          uint64_t v11 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(void *)(v119 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::String v119 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::String v119 = v7;
    Swift::String v127 = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  Swift::String v118 = v2;
  uint64_t v10 = *v2;
  Swift::String v128 = (char *)MEMORY[0x263F8EE78];
  Swift::String v121 = v3;
  while (1)
  {
    unint64_t v12 = v9++;
    if (v9 < v3)
    {
      Swift::Int v13 = *(double *)(v10 + 96 * v9 + 80);
      unsigned int v14 = *(double *)(v10 + 96 * v12 + 80);
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        unsigned int v15 = (double *)(v10 + 272 + 96 * v12);
        unsigned int v16 = v13;
        while (1)
        {
          unsigned int v17 = v16;
          unsigned int v16 = *v15;
          if (v13 < v14 == *v15 >= v17) {
            break;
          }
          ++v9;
          v15 += 12;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          Swift::Int v18 = 96 * v9;
          Swift::Int v19 = 96 * v12;
          int v20 = v9;
          Swift::Int v21 = v12;
          do
          {
            if (v21 != --v20)
            {
              if (!v10) {
                goto LABEL_146;
              }
              double v22 = v10 + v18;
              unsigned int v23 = *(void *)(v10 + v19 + 64);
              Swift::Int v24 = *(unsigned char *)(v10 + v19 + 72);
              Swift::String v124 = *(_OWORD *)(v10 + v19 + 16);
              Swift::String v125 = *(_OWORD *)(v10 + v19);
              Swift::String v122 = *(_OWORD *)(v10 + v19 + 48);
              Swift::String v123 = *(_OWORD *)(v10 + v19 + 32);
              Swift::String v126 = *(_OWORD *)(v10 + v19 + 80);
              memmove((void *)(v10 + v19), (const void *)(v10 + v18 - 96), 0x60uLL);
              *(_OWORD *)(v22 - 96) = v125;
              *(_OWORD *)(v22 - 80) = v124;
              *(_OWORD *)(v22 - 64) = v123;
              *(_OWORD *)(v22 - 48) = v122;
              *(void *)(v22 - 32) = v23;
              *(unsigned char *)(v22 - 24) = v24;
              *(_OWORD *)(v22 - 16) = v126;
            }
            ++v21;
            v18 -= 96;
            v19 += 96;
          }
          while (v21 < v20);
          Swift::Int v3 = v121;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v120) {
      goto LABEL_39;
    }
    int v25 = v12 + v120;
    if (__OFADD__(v12, v120)) {
      goto LABEL_141;
    }
    if (v25 >= v3) {
      int v25 = v3;
    }
    if (v25 < v12) {
      break;
    }
    if (v9 != v25)
    {
      unint64_t v76 = v10 + 88 + 96 * v9;
      unsigned int v26 = v128;
      do
      {
        char v77 = *(double *)(v10 + 96 * v9 + 80);
        uint64_t v78 = v12;
        uint64_t v79 = (double *)v76;
        do
        {
          if (v77 >= *(v79 - 13)) {
            break;
          }
          if (!v10) {
            goto LABEL_144;
          }
          __int16 v80 = v79 - 11;
          unsigned int v81 = *((void *)v79 - 3);
          uint64_t v82 = *((unsigned char *)v79 - 16);
          unsigned int v83 = *v79;
          uint64_t v84 = *(_OWORD *)(v79 - 11);
          unint64_t v85 = *(_OWORD *)(v79 - 9);
          CGRect v86 = *(_OWORD *)(v79 - 7);
          uint64_t v87 = *(_OWORD *)(v79 - 5);
          uint64_t v88 = *(_OWORD *)(v79 - 17);
          *((_OWORD *)v80 + 2) = *(_OWORD *)(v79 - 19);
          *((_OWORD *)v80 + 3) = v88;
          uint64_t v89 = *(_OWORD *)(v79 - 13);
          *((_OWORD *)v80 + 4) = *(_OWORD *)(v79 - 15);
          *((_OWORD *)v80 + 5) = v89;
          Swift::String v90 = *(_OWORD *)(v79 - 21);
          *(_OWORD *)__int16 v80 = *(_OWORD *)(v79 - 23);
          *((_OWORD *)v80 + 1) = v90;
          *(v79 - 12) = v83;
          v79 -= 12;
          *(_OWORD *)(v79 - 11) = v84;
          *(_OWORD *)(v79 - 9) = v85;
          *(_OWORD *)(v79 - 7) = v86;
          *(_OWORD *)(v79 - 5) = v87;
          *((void *)v79 - 3) = v81;
          *((unsigned char *)v79 - 16) = v82;
          ++v78;
          *(v79 - 1) = v77;
        }
        while (v9 != v78);
        ++v9;
        v76 += 96;
      }
      while (v9 != v25);
      Swift::Int v9 = v25;
      if (v25 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }
LABEL_39:
    unsigned int v26 = v128;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v26 + 2) + 1, 1, v26);
    }
    unint64_t v28 = *((void *)v26 + 2);
    unint64_t v27 = *((void *)v26 + 3);
    uint64_t v11 = v28 + 1;
    if (v28 >= v27 >> 1) {
      unsigned int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
    }
    *((void *)v26 + 2) = v11;
    __int16 v29 = v26 + 32;
    char v30 = &v26[16 * v28 + 32];
    *(void *)char v30 = v12;
    *((void *)v30 + 1) = v9;
    Swift::String v128 = v26;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v11 - 1;
        if (v11 >= 4)
        {
          float v36 = &v29[16 * v11];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_122;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_123;
          }
          unint64_t v43 = v11 - 2;
          CGFloat v44 = &v29[16 * v11 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_125;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_128;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_132;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v60 = *((void *)v26 + 4);
            uint64_t v61 = *((void *)v26 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_70;
          }
          uint64_t v33 = *((void *)v26 + 4);
          uint64_t v32 = *((void *)v26 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_124;
        }
        unint64_t v43 = v11 - 2;
        double v49 = &v29[16 * v11 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_127;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_130;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_131;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_76:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_78;
        }
LABEL_70:
        if (v54) {
          goto LABEL_126;
        }
        char v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_129;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_78:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10) {
          goto LABEL_145;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        __int16 v73 = &v29[16 * v31];
        char v74 = *((void *)v73 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 96 * *(void *)v71), (double *)(v10 + 96 * *(void *)v73), v10 + 96 * v74, v127);
        if (v1) {
          goto LABEL_95;
        }
        if (v74 < v72) {
          goto LABEL_119;
        }
        if (v31 > *((void *)v128 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v29[16 * v70 + 8] = v74;
        uint64_t v75 = *((void *)v128 + 2);
        if (v31 >= v75) {
          goto LABEL_121;
        }
        unsigned int v26 = v128;
        uint64_t v11 = v75 - 1;
        memmove(&v29[16 * v31], v73 + 16, 16 * (v75 - 1 - v31));
        *((void *)v128 + 2) = v75 - 1;
        if (v75 <= 2) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v11 = 1;
LABEL_15:
    Swift::Int v3 = v121;
    if (v9 >= v121)
    {
      uint64_t v8 = v119;
      Swift::String v110 = v128;
      uint64_t v2 = v118;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t *v21;
  uint64_t v22;
  Swift::Int v23;
  double *v24;
  double v25;
  Swift::Int v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  double *__dst;

  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      __int16 v80 = 0;
      unsigned int v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          unint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  Swift::String v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_102:
      Swift::Int v96 = v8;
      if (v12 >= 2)
      {
        CGRect v86 = *v2;
        do
        {
          uint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          uint64_t v88 = v11;
          uint64_t v89 = v11 + 32;
          Swift::String v90 = *(void *)&v11[16 * v87 + 32];
          unint64_t v91 = *(void *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          Swift::String v92 = &v88[16 * v87 + 32];
          *(void *)Swift::String v92 = v90;
          *((void *)v92 + 1) = v91;
          uint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          uint64_t v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    Swift::Int v96 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v98;
    Swift::Int v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v94 = v2;
  Swift::Int v95 = *v2 - 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  Swift::String v99 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(double *)(v10 + 8 * v9);
      unsigned int v15 = *(double *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = v16;
          unsigned int v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = (uint64_t *)(v95 + 8 * v9);
          Swift::Int v19 = v9;
          int v20 = v13;
          Swift::Int v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              double v22 = *v21;
              *Swift::Int v21 = *v18;
              *Swift::Int v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    unsigned int v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      unsigned int v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      Swift::Int v24 = (double *)(v95 + 8 * v9);
      do
      {
        int v25 = *(double *)(v10 + 8 * v9);
        unsigned int v26 = v13;
        unint64_t v27 = v24;
        do
        {
          unint64_t v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *unint64_t v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      Swift::Int v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    char v30 = *((void *)v11 + 2);
    __int16 v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      uint64_t v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    unint64_t v31 = v11 + 32;
    uint64_t v32 = &v11[16 * v30 + 32];
    *(void *)uint64_t v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        uint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          CGFloat v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          unint64_t v43 = *((void *)v38 - 6);
          BOOL v42 = *((void *)v38 - 5);
          CGFloat v44 = __OFSUB__(v42, v43);
          float v36 = v42 - v43;
          uint64_t v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          uint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          CGFloat v44 = __OFSUB__(v47, v48);
          double v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          CGFloat v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            uint64_t v68 = &v31[16 * v33];
            unint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            CGFloat v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            uint64_t v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            char v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            CGFloat v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            uint64_t v56 = v44;
            goto LABEL_77;
          }
          char v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          CGFloat v44 = __OFSUB__(v34, v35);
          float v36 = v34 - v35;
          uint64_t v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        uint64_t v45 = v12 - 2;
        uint64_t v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        BOOL v52 = *((void *)v51 + 1);
        char v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        uint64_t v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v57 = &v31[16 * v33];
        BOOL v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        CGFloat v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          uint64_t v61 = v36 < v60;
LABEL_83:
          if (v61) {
            uint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        uint64_t v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        CGFloat v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        __int16 v73 = &v31[16 * v72];
        char v74 = *(void *)v73;
        uint64_t v75 = v31;
        unint64_t v76 = &v31[16 * v33];
        char v77 = *((void *)v76 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)__int16 v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        uint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        unint64_t v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 3;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 3;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 2;
  Swift::Int v24 = __src;
  unsigned int v23 = __dst;
  if (v10 >= v12 >> 2)
  {
    if (v11 >= -3)
    {
      if (__dst != a2 || &a2[4 * v13] <= __dst) {
        memmove(__dst, a2, 4 * v13);
      }
      unsigned int v16 = &v4[4 * v13];
      double v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 4)
      {
        unsigned int v17 = (unsigned int *)(a3 - 4);
        while (1)
        {
          Swift::Int v18 = (char *)(v17 + 1);
          Swift::Int v19 = v6 - 4;
          unsigned int v20 = *((_DWORD *)v6 - 1);
          if (*((_DWORD *)v16 - 1) >= v20)
          {
            double v22 = v16 - 4;
            if (v18 < v16 || v17 >= (unsigned int *)v16 || v18 != v16) {
              *unsigned int v17 = *((_DWORD *)v16 - 1);
            }
            v16 -= 4;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= (unsigned int *)v6) {
              *unsigned int v17 = v20;
            }
            Swift::Int v24 = v6 - 4;
            v6 -= 4;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -3)
  {
    if (__dst != __src || &__src[4 * v10] <= __dst) {
      memmove(__dst, __src, 4 * v10);
    }
    unsigned int v14 = &v4[4 * v10];
    double v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 4)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4) {
            *(_DWORD *)uint64_t v7 = *(_DWORD *)v4;
          }
          v4 += 4;
          unsigned int v23 = v4;
          unsigned int v15 = v6;
        }
        else
        {
          unsigned int v15 = v6 + 4;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(_DWORD *)uint64_t v7 = *(_DWORD *)v6;
          }
        }
        v7 += 4;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  long long v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  long long v21;
  long long v22;
  uint64_t result;
  char *v24;
  const void *v25;
  char *v26;

  int v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  unsigned int v26 = __src;
  int v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unsigned int v17 = &v4[24 * v11];
      Swift::Int v24 = v17;
      unsigned int v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        Swift::Int v18 = a3 - 24;
        do
        {
          Swift::Int v19 = (char *)(v18 + 24);
          if (*((void *)v17 - 1) >= *((void *)v6 - 1))
          {
            Swift::Int v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              double v22 = *(_OWORD *)(v17 - 24);
              *(void *)(v18 + 16) = *((void *)v17 - 1);
              *(_OWORD *)Swift::Int v18 = v22;
            }
            unsigned int v20 = v6;
            v17 -= 24;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            unsigned int v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              Swift::Int v21 = *(_OWORD *)v20;
              *(void *)(v18 + 16) = *((void *)v6 - 1);
              *(_OWORD *)Swift::Int v18 = v21;
            }
            unsigned int v26 = v6 - 24;
            if (v20 <= v7) {
              break;
            }
          }
          v18 -= 24;
          uint64_t v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v26, &v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      uint64_t v13 = v4;
      while (1)
      {
        if (*((void *)v6 + 2) >= *((void *)v13 + 2))
        {
          int v4 = v13 + 24;
          unsigned int v15 = v13;
          unsigned int v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          unsigned int v14 = v6 + 24;
          unsigned int v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        unsigned int v16 = *(_OWORD *)v15;
        *((void *)v7 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        int v25 = v4;
        unsigned int v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char v23;
  char v24;
  char *v25;
  char *v26;
  char *v27;

  int v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  unint64_t v27 = __src;
  unsigned int v26 = __dst;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      unsigned int v17 = 16 * v13;
      if (__dst != a2 || &a2[v17] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      Swift::Int v18 = &v4[v17];
      int v25 = v18;
      unint64_t v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        Swift::Int v19 = (char *)(a3 - 16);
        unsigned int v20 = v6;
        while (1)
        {
          Swift::Int v21 = v19 + 16;
          v20 -= 16;
          swift_getAtKeyPath();
          swift_getAtKeyPath();
          if (v24 >= v23)
          {
            int v25 = v18 - 16;
            if (v21 < v18 || v19 >= v18 || v21 != v18) {
              *(_OWORD *)Swift::Int v19 = *((_OWORD *)v18 - 1);
            }
            unsigned int v20 = v6;
            v18 -= 16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v21 != v6 || v19 >= v6) {
              *(_OWORD *)Swift::Int v19 = *(_OWORD *)v20;
            }
            unint64_t v27 = v20;
            if (v20 <= v7) {
              goto LABEL_42;
            }
          }
          v19 -= 16;
          uint64_t v6 = v20;
          if (v18 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -15)
  {
    unsigned int v14 = 16 * v10;
    if (__dst != __src || &__src[v14] <= __dst) {
      memmove(__dst, __src, v14);
    }
    unsigned int v15 = &v4[v14];
    int v25 = v15;
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      do
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v24 >= v23)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          unsigned int v26 = v4;
          unsigned int v16 = v6;
        }
        else
        {
          unsigned int v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v15) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      unint64_t v27 = v7;
    }
LABEL_42:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  swift_release();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Animation.Function(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for DisplayList.InterpolatorLayer.Removed(id *a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  int v4 = *(void **)(a2 + 56);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  uint64_t v7 = *(void **)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  id v8 = v4;
  id v9 = v5;
  id v10 = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void **)(a1 + 56);
  uint64_t v6 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  id v7 = v6;

  id v8 = *(void **)(a1 + 64);
  id v9 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v9;
  id v10 = v9;

  uint64_t v11 = *(void **)(a2 + 72);
  uint64_t v12 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  id v13 = v11;

  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer.Removed(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);

  int v4 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer.Removed(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Removed(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.InterpolatorLayer.Removed()
{
  return &type metadata for DisplayList.InterpolatorLayer.Removed;
}

uint64_t destroy for DisplayList.InterpolatorLayer.Contents()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v4;
  return a1;
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DisplayList.InterpolatorLayer.Contents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.InterpolatorLayer.Contents(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 53)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Contents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 53) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 53) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DisplayList.InterpolatorLayer.Contents()
{
  return &unk_26FA42460;
}

unsigned char *storeEnumTagSinglePayload for DisplayList.InterpolatorLayer.Phase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245A6B88CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DisplayList.InterpolatorLayer.Phase()
{
  return &unk_26FA42338;
}

unint64_t lazy protocol witness table accessor for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase;
  if (!lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.InterpolatorLayer.Phase and conformance DisplayList.InterpolatorLayer.Phase);
  }
  return result;
}

uint64_t static ScrollPrefetchState.defaultValue.getter()
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return static ScrollPrefetchState.defaultValue;
}

void ScrollPrefetchState.id.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *ScrollPrefetchState.id.setter(void *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*ScrollPrefetchState.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.deadline.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ScrollPrefetchState.deadline.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*ScrollPrefetchState.deadline.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.edges.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ScrollPrefetchState.edges.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*ScrollPrefetchState.edges.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollPrefetchState.commit(to:)(unint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v1 + 16);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    id v7 = (id)AGGraphGetAttributeGraph();
    uint64_t result = AGGraphGetContext();
    if (result)
    {
      uint64_t v8 = result;
      swift_retain();

      unint64_t v17 = 0;
      specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v17, 1);
      unint64_t v9 = v17;
      swift_retain();
      int v10 = _threadTransactionID();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v9, v10, a1, v3, v4, v5, 1, 0);
      swift_release();
      swift_retain();
      specialized static Update.begin()();
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = partial apply for closure #1 in ScrollPrefetchState.commit(to:);
      *(void *)(v11 + 24) = v8;
      uint64_t v12 = one-time initialization token for actions;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      id v13 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1) {
        id v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
      }
      _OWORD v13[2] = v15 + 1;
      unsigned int v16 = &v13[2 * v15];
      unsigned __int8 v16[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v16[5] = v11;
      static Update.actions = v13;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release_n();
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(unint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, char a8)
{
  uint64_t v9 = v8;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v17 = static Update._lock;
  _MovableLockLock(static Update._lock);
  swift_beginAccess();
  if (*(void *)(v9 + 16))
  {
    uint64_t v18 = (a7 & 1) != 0 || AGGraphGetCounter() != 0;
    swift_beginAccess();
    *(unsigned char *)(v9 + 168) &= a8 & 1;
    uint64_t v19 = v9 + 144;
    uint64_t v20 = swift_beginAccess();
    unint64_t v21 = *(void *)(*(void *)(v9 + 144) + 16);
    if (v21)
    {
      swift_beginAccess();
      double v22 = *(void **)v19;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v19 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        double v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        *(void *)uint64_t v19 = v22;
      }
      if (v21 > v22[2])
      {
        __break(1u);
        goto LABEL_39;
      }
      Swift::Int v24 = &v22[3 * v21];
      if (*((_DWORD *)v24 + 4) == a2)
      {
        double v22 = v24 + 1;
        unint64_t v25 = v24[1];
        if (v25)
        {
          if (a1)
          {
            v45[0] = MEMORY[0x263F8EE78];
            swift_retain();
            swift_retain();
            BOOL v43 = compareLists(_:_:ignoredTypes:)(v25, a1, (uint64_t)v45);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            if (v43)
            {
LABEL_15:
              specialized AsyncTransaction.append<A>(_:)(a3, a4, a5, a6);
              swift_endAccess();
              if (v18)
              {
LABEL_31:
                uint64_t v17 = static Update._lock;
                return _MovableLockUnlock(v17);
              }
              swift_beginAccess();
              if (*(void *)(*(void *)v19 + 16))
              {
                specialized Array._customRemoveLast()((uint64_t)&v46);
                a1 = v47;
                if (v47)
                {
                  a6 = DWORD2(v46);
                  uint64_t v18 = v46;
                }
                else
                {
                  specialized Array.remove(at:)(*(void *)(*(void *)v19 + 16) - 1, (uint64_t)&v46);
                  uint64_t v18 = v46;
                  a6 = DWORD2(v46);
                  a1 = v47;
                }
                swift_endAccess();
                GraphHost.flushTransactions()();
                swift_beginAccess();
                double v22 = *(void **)(v9 + 144);
                swift_retain();
                swift_bridgeObjectRetain();
                char v39 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v9 + 144) = v22;
                if (v39)
                {
LABEL_35:
                  unint64_t v41 = v22[2];
                  unint64_t v40 = v22[3];
                  if (v41 >= v40 >> 1)
                  {
                    double v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v22);
                    *(void *)uint64_t v19 = v22;
                  }
                  _OWORD v22[2] = v41 + 1;
                  BOOL v42 = &v22[3 * v41];
                  v42[4] = v18;
                  *((_DWORD *)v42 + 10) = a6;
                  v42[6] = a1;
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_31;
                }
LABEL_40:
                double v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
                *(void *)uint64_t v19 = v22;
                goto LABEL_35;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
          }
        }
        else if (!a1)
        {
          goto LABEL_15;
        }
      }
      swift_endAccess();
      if ((v18 & 1) == 0) {
        GraphHost.flushTransactions()();
      }
    }
    else if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 192))(v20))
    {
      uint64_t v27 = v26;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v27 + 32))(ObjectType, v27);
      swift_unknownObjectRelease();
    }
    swift_retain();
    __int16 v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v31 = v29[2];
    unint64_t v30 = v29[3];
    if (v31 >= v30 >> 1) {
      __int16 v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
    }
    uint64_t v48 = &unk_26FA5F230;
    double v49 = &protocol witness table for ScrollPrefetchState.PrefetchMutation;
    uint64_t v32 = swift_allocObject();
    *(void *)&long long v46 = v32;
    *(void *)(v32 + 16) = a3;
    *(void *)(v32 + 24) = a4;
    *(void *)(v32 + 32) = a5;
    *(unsigned char *)(v32 + 40) = a6;
    v29[2] = v31 + 1;
    outlined init with take of ScrollStateRequest(&v46, (uint64_t)&v29[5 * v31 + 4]);
    swift_beginAccess();
    uint64_t v33 = *(void **)v19;
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v19 = v33;
    if ((v34 & 1) == 0)
    {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      *(void *)uint64_t v19 = v33;
    }
    unint64_t v36 = v33[2];
    unint64_t v35 = v33[3];
    if (v36 >= v35 >> 1)
    {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v33);
      *(void *)uint64_t v19 = v33;
    }
    v33[2] = v36 + 1;
    uint64_t v37 = &v33[3 * v36];
    v37[4] = a1;
    *((_DWORD *)v37 + 10) = a2;
    v37[6] = v29;
    swift_endAccess();
    goto LABEL_31;
  }
  return _MovableLockUnlock(v17);
}

uint64_t ScrollPrefetchState.PrefetchMutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v9[1];
  uint64_t v6 = v9[2];
  char v7 = v10;
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  *(void *)(v1 + 8) = v5;
  *(void *)(v1 + 16) = v6;
  uint64_t result = 1;
  *(unsigned char *)(v1 + 24) = v7;
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance ScrollPrefetchState.PrefetchMutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8]) {
    return AGGraphSetValue();
  }
  return result;
}

uint64_t specialized AsyncTransaction.append<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  int v9 = a1;
  char v10 = *(void **)(v4 + 16);
  unint64_t v11 = v10[2];
  unint64_t v12 = HIDWORD(a1);
  v24[0] = a1;
  v24[1] = a2;
  v24[2] = a3;
  char v25 = a4;
  if (v11)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 16) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v10 = specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      *(void *)(v5 + 16) = v10;
    }
    if (v11 > v10[2])
    {
      __break(1u);
      goto LABEL_12;
    }
    unint64_t v14 = &v10[5 * v11 - 5];
    uint64_t v15 = v14[7];
    uint64_t v16 = v14[8];
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v14 + 4), v15);
    uint64_t result = (*(uint64_t (**)(void *, void *, _UNKNOWN **, uint64_t, uint64_t))(v16 + 16))(v24, &unk_26FA5F230, &protocol witness table for ScrollPrefetchState.PrefetchMutation, v15, v16);
    *(void *)(v5 + 16) = v10;
    if (result) {
      return result;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_12:
  }
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  unint64_t v19 = v10[2];
  unint64_t v18 = v10[3];
  if (v19 >= v18 >> 1) {
    char v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v10);
  }
  double v22 = &unk_26FA5F230;
  unsigned int v23 = &protocol witness table for ScrollPrefetchState.PrefetchMutation;
  uint64_t v20 = swift_allocObject();
  *(void *)&long long v21 = v20;
  *(_DWORD *)(v20 + 16) = v9;
  *(_DWORD *)(v20 + 20) = v12;
  *(void *)(v20 + 24) = a2;
  *(void *)(v20 + 32) = a3;
  *(unsigned char *)(v20 + 40) = a4;
  _OWORD v10[2] = v19 + 1;
  uint64_t result = outlined init with take of ScrollStateRequest(&v21, (uint64_t)&v10[5 * v19 + 4]);
  *(void *)(v5 + 16) = v10;
  return result;
}

uint64_t sub_245A6C464()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245A6C49C()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for ScrollPrefetchState.PrefetchMutation(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollPrefetchState.PrefetchMutation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

void *type metadata accessor for ScrollPrefetchState.PrefetchMutation()
{
  return &unk_26FA5F230;
}

uint64_t initializeBufferWithCopyOfBuffer for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  return destroy for TimerTimelineSchedule(a1, a2, MEMORY[0x263F07490]);
}

uint64_t initializeWithCopy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TimerTimelineSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A6C734);
}

uint64_t sub_245A6C734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TimerTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A6C7B4);
}

uint64_t sub_245A6C7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TimerTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerTimelineSchedule);
}

uint64_t type metadata completion function for TimerTimelineSchedule()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2)
{
  return destroy for TimerTimelineSchedule(a1, a2, MEMORY[0x263F062D0]);
}

uint64_t destroy for TimerTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A6CC20);
}

uint64_t sub_245A6CC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A6CD04);
}

uint64_t sub_245A6CD04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule);
}

uint64_t type metadata completion function for TimerIntervalTimelineSchedule()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>;
  if (!lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>)
  {
    type metadata accessor for AnySequence<Date>(255, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, MEMORY[0x263F07490], MEMORY[0x263F8DB98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>);
  }
  return result;
}

void *TimerIntervalTimelineSchedule.entries(from:mode:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v43 = a1;
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v42 = v3;
  MEMORY[0x270FA5388](v3);
  unint64_t v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v39 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x270FA5388](v20);
  double v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  char v25 = (char *)&v39 - v24;
  LOBYTE(a2) = *a2;
  uint64_t v26 = type metadata accessor for TimerIntervalTimelineSchedule(0);
  if (a2)
  {
    unint64_t v28 = v40;
    uint64_t v27 = v41;
    uint64_t v29 = v42;
    uint64_t v30 = v44;
    int v31 = *(unsigned __int8 *)(v44 + *(int *)(v26 + 20));
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v43, v13);
    if (v31 == 1)
    {
      DateInterval.end.getter();
      TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.init(start:end:)(v19, v16, (uint64_t)v9);
      type metadata accessor for _SequenceBox<TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries>();
      uint64_t v32 = (void *)swift_allocObject();
      uint64_t v33 = (uint64_t)v32 + *(void *)(*MEMORY[0x263F8DCA0] + *v32 + 16);
      char v34 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries;
      uint64_t v35 = (uint64_t)v9;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v28, v30, v29);
      uint64_t v37 = v39;
      TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.init(start:interval:)((uint64_t)v19, v28, v39);
      type metadata accessor for _SequenceBox<TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries>();
      uint64_t v32 = (void *)swift_allocObject();
      uint64_t v33 = (uint64_t)v32 + *(void *)(*MEMORY[0x263F8DCA0] + *v32 + 16);
      char v34 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries;
      uint64_t v35 = v37;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v43, v13);
    DateInterval.end.getter();
    unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v36(v12, 0, 1, v13);
    v36(v22, 1, 1, v13);
    outlined destroy of Date?((uint64_t)v22);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v19, v13);
    v36(v22, 0, 1, v13);
    outlined init with take of Date?((uint64_t)v12, (uint64_t)&v22[*(int *)(v20 + 20)]);
    outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries((uint64_t)v22, (uint64_t)v25, type metadata accessor for EverySecondEntries);
    type metadata accessor for _SequenceBox<EverySecondEntries>();
    uint64_t v32 = (void *)swift_allocObject();
    uint64_t v33 = (uint64_t)v32 + *(void *)(*MEMORY[0x263F8DCA0] + *v32 + 16);
    uint64_t v35 = (uint64_t)v25;
    char v34 = type metadata accessor for EverySecondEntries;
  }
  outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v35, v33, v34);
  return v32;
}

uint64_t TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.init(start:end:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  Swift::String v112 = a2;
  Swift::String v113 = a1;
  uint64_t v117 = a3;
  uint64_t v92 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v87 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  CGRect v86 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v85 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  uint64_t v84 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  Swift::Int v95 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar.Component();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v7);
  Swift::String v106 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v88 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v105 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v83 - v14);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v15 - 8);
  uint64_t v16 = v100;
  uint64_t v101 = v15;
  MEMORY[0x270FA5388](v15);
  Swift::String v108 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  float v104 = (char *)&v83 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v97 = (char *)&v83 - v21;
  uint64_t v115 = type metadata accessor for DateComponents();
  uint64_t v22 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115);
  Swift::String v107 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v83 - v25;
  uint64_t v116 = type metadata accessor for Calendar();
  uint64_t v110 = *(void *)(v116 - 8);
  MEMORY[0x270FA5388](v116);
  Swift::String v98 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v29 = MEMORY[0x270FA5388](v28);
  int v31 = (char *)&v83 - v30;
  uint64_t v32 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56);
  uint64_t v94 = v16 + 56;
  uint64_t v93 = v32;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double))v32)(a3, 1, 1, v15, v29);
  static Calendar.current.getter();
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v33 = *(void *)(v8 + 72);
  uint64_t v99 = v8;
  unint64_t v34 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_2461BDD50;
  unint64_t v36 = v35 + v34;
  uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v9 + 104);
  uint64_t v38 = v7;
  v37(v36, *MEMORY[0x263F078C8], v7);
  v37(v36 + v33, *MEMORY[0x263F07828], v7);
  specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v39 = v112;
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v40 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  uint64_t v41 = v117;
  uint64_t v42 = (char *)(v117 + *(int *)(v40 + 24));
  uint64_t v109 = v22;
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  Swift::String v114 = v26;
  uint64_t v44 = v26;
  uint64_t v45 = v100;
  Swift::String v102 = v43;
  uint64_t v103 = v22 + 16;
  v43(v42, v44, v115);
  uint64_t v96 = v40;
  uint64_t v46 = v41 + *(int *)(v40 + 20);
  unint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16);
  uint64_t v48 = v39;
  uint64_t v49 = v101;
  v47(v46, (uint64_t)v48, v101);
  uint64_t v50 = v106;
  v37((unint64_t)v106, *MEMORY[0x263F078C0], v38);
  uint64_t v51 = v104;
  Swift::String v111 = v31;
  uint64_t v52 = (uint64_t)v105;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v50, v38);
  Swift::String v106 = (char *)v47;
  v47((uint64_t)v51, (uint64_t)v48, v49);
  uint64_t v53 = v45;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v52, 1, v49) == 1)
  {
    char v54 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    uint64_t v55 = (v53 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v56 = v97;
    v54(v97, v51, v49);
    outlined destroy of Date?(v52);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v49);
    char v54 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    uint64_t v55 = (v53 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    uint64_t v56 = v97;
    v54(v97, (char *)v52, v49);
  }
  uint64_t v57 = v98;
  v54((char *)(v117 + *(int *)(v96 + 28)), v56, v49);
  lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v58 = v113;
  char v59 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v60 = v110;
  (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v57, v111, v116);
  uint64_t v61 = v108;
  ((void (*)(char *, char *, uint64_t))v106)(v108, v58, v49);
  char v62 = v107;
  uint64_t v63 = v115;
  v102(v107, v114, v115);
  float v104 = (char *)v55;
  unint64_t v105 = (void (*)(uint64_t, uint64_t, uint64_t))v54;
  if ((v59 & 1) == 0)
  {
    Swift::String v107 = *(char **)(v109 + 8);
    ((void (*)(char *, uint64_t))v107)(v62, v63);
    uint64_t v68 = *(void (**)(char *, uint64_t))(v53 + 8);
    v68(v61, v49);
    unint64_t v70 = *(void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v72 = v116;
    v70(v57, v116);
    goto LABEL_8;
  }
  char v64 = Calendar.date(_:matchesComponents:)();
  uint64_t v65 = v110;
  char v66 = v64;
  uint64_t v67 = v109 + 8;
  Swift::String v107 = *(char **)(v109 + 8);
  ((void (*)(char *, uint64_t))v107)(v62, v63);
  uint64_t v68 = *(void (**)(char *, uint64_t))(v53 + 8);
  v68(v61, v49);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v65 + 8);
  uint64_t v69 = v65 + 8;
  unint64_t v70 = v71;
  v71(v57, v116);
  if (v66)
  {
    uint64_t v72 = v116;
LABEL_8:
    v68(v112, v49);
    ((void (*)(char *, uint64_t))v107)(v114, v63);
    v70(v111, v72);
    uint64_t v73 = v117;
    outlined destroy of Date?(v117);
    v105(v73, (uint64_t)v113, v49);
    return v93(v73, 0, 1, v49);
  }
  (*(void (**)(char *, void, uint64_t))(v89 + 104))(v95, *MEMORY[0x263F07780], v90);
  uint64_t v75 = v85;
  unint64_t v76 = v84;
  (*(void (**)(char *, void, uint64_t))(v85 + 104))(v84, *MEMORY[0x263F07800], v91);
  uint64_t v77 = *MEMORY[0x263F077E0];
  uint64_t v78 = v87;
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 104);
  uint64_t v109 = v67;
  __int16 v80 = v86;
  v79(v86, v77, v92);
  unsigned int v81 = v113;
  uint64_t v110 = v69;
  uint64_t v82 = v111;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  v68(v112, v49);
  v68(v81, v49);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v92);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v91);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v95, v90);
  ((void (*)(char *, uint64_t))v107)(v114, v115);
  v70(v82, v116);
  return outlined assign with take of Date?(v88, v117);
}

uint64_t TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.init(start:interval:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v51 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Calendar.Component();
  uint64_t v35 = *(void *)(v40 - 8);
  uint64_t v8 = v35;
  MEMORY[0x270FA5388](v40);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v37 = (char *)&v34 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v49 = (char *)&v34 - v17;
  uint64_t v18 = type metadata accessor for Calendar();
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v45 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a3 + *(int *)(v21 + 24), 1, 1, v12);
  uint64_t v41 = v21;
  uint64_t v22 = a3 + *(int *)(v21 + 20);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v48 = a1;
  v23(v22, a1, v12);
  uint64_t v46 = v6;
  uint64_t v47 = a3;
  unint64_t v36 = *(void (**)(void))(v6 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v36)(a3, v50, v5);
  static Calendar.current.getter();
  uint64_t v24 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  v24(v39, *MEMORY[0x263F078C0], v40);
  DateInterval.start.getter();
  uint64_t v27 = (uint64_t)v37;
  uint64_t v43 = v20;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v15, v12);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  uint64_t v28 = v42;
  v36();
  uint64_t v29 = v27;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v27, 1, v12) == 1)
  {
    DateInterval.start.getter();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v46 + 8);
    v30(v28, v51);
    outlined destroy of Date?(v27);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v47 + *(int *)(v41 + 28), v49, v12);
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v46 + 8);
    v30(v28, v51);
    int v31 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    v31(v49, v29, v12);
    v31((char *)(v47 + *(int *)(v41 + 28)), (uint64_t)v49, v12);
  }
  uint64_t v32 = v48;
  TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(v48);
  v30(v50, v51);
  v38((char *)v32, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v43, v45);
}

void *protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimerIntervalTimelineSchedule@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  unint64_t result = TimerIntervalTimelineSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

void *TimerTimelineSchedule.entries(from:mode:)(uint64_t a1, char *a2)
{
  uint64_t v33 = a1;
  uint64_t v3 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v32 = (uint64_t)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  v31[0] = (char *)v31 - v6;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v31 - v12;
  uint64_t v14 = type metadata accessor for EverySecondEntries(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v31 - v19;
  char v21 = *a2;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v22(v13, v33, v7, v18);
  if (v21)
  {
    ((void (*)(char *, void, uint64_t))v22)(v10, v31[1], v7);
    uint64_t v23 = v32;
    TimerTimelineSchedule.ReducedFrequencyEntries.init(start:alignment:)((uint64_t)v13, (uint64_t)v10, v32);
    type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>();
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v25 = (uint64_t)v24 + *(void *)(*MEMORY[0x263F8DCA0] + *v24 + 16);
    uint64_t v26 = type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries;
    uint64_t v27 = v23;
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v29 = v31[0];
    v28((char *)v31[0], 1, 1, v7);
    v28(v16, 1, 1, v7);
    outlined destroy of Date?((uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v13, v7);
    v28(v16, 0, 1, v7);
    outlined init with take of Date?(v29, (uint64_t)&v16[*(int *)(v14 + 20)]);
    outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries((uint64_t)v16, (uint64_t)v20, type metadata accessor for EverySecondEntries);
    type metadata accessor for _SequenceBox<EverySecondEntries>();
    uint64_t v24 = (void *)swift_allocObject();
    uint64_t v25 = (uint64_t)v24 + *(void *)(*MEMORY[0x263F8DCA0] + *v24 + 16);
    uint64_t v27 = (uint64_t)v20;
    uint64_t v26 = type metadata accessor for EverySecondEntries;
  }
  outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v27, v25, v26);
  return v24;
}

uint64_t TimerTimelineSchedule.ReducedFrequencyEntries.init(start:alignment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v54 = (uint64_t)&v39 - v11;
  uint64_t v12 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v41 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v53 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Calendar();
  uint64_t v45 = *(void *)(v15 - 8);
  uint64_t v46 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(a3, 1, 1, v18);
  static Calendar.current.getter();
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v20 = type metadata accessor for Calendar.Component();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 72);
  unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_2461BDD50;
  unint64_t v25 = v24 + v23;
  uint64_t v26 = *(void (**)(unint64_t, void, uint64_t))(v21 + 104);
  v26(v25, *MEMORY[0x263F078C8], v20);
  v26(v25 + v22, *MEMORY[0x263F07828], v20);
  specialized Set.init(_nonEmptyArrayLiteral:)(v24);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v27 = v53;
  Calendar.dateComponents(_:from:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(int *)(type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0) + 20);
  uint64_t v42 = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a3 + v28, v27, v12);
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v55, *MEMORY[0x263F07780], v58);
  uint64_t v30 = v47;
  uint64_t v29 = v48;
  (*(void (**)(char *, void, uint64_t))(v47 + 104))(v56, *MEMORY[0x263F07800], v48);
  int v31 = v49;
  uint64_t v32 = v50;
  uint64_t v33 = v51;
  (*(void (**)(char *, void, uint64_t))(v50 + 104))(v49, *MEMORY[0x263F077E0], v51);
  uint64_t v34 = v52;
  uint64_t v35 = v31;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  uint64_t v36 = v43;
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v37(v59, v43);
  v37(v34, v36);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v56, v29);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v58);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v53, v40);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v46);
  return outlined assign with take of Date?(v54, v42);
}

void *protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimerTimelineSchedule@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  unint64_t result = TimerTimelineSchedule.entries(from:mode:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t type metadata accessor for EverySecondEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for EverySecondEntries);
}

void type metadata accessor for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>)
  {
    type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(255);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<TimerTimelineSchedule.ReducedFrequencyEntries>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _SequenceBox<EverySecondEntries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<EverySecondEntries>)
  {
    type metadata accessor for EverySecondEntries(255);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type EverySecondEntries and conformance EverySecondEntries, (void (*)(uint64_t))type metadata accessor for EverySecondEntries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<EverySecondEntries>);
    }
  }
}

uint64_t EverySecondEntries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v28 - v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v28 - v17;
  outlined init with copy of Date?(v2, (uint64_t)v11);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v19(v11, 1, v12) == 1)
  {
    outlined destroy of Date?((uint64_t)v11);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(a1, 1, 1, v12);
  }
  uint64_t v28 = a1;
  uint64_t v21 = v11;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v18, v21, v12);
  uint64_t v23 = type metadata accessor for EverySecondEntries(0);
  outlined init with copy of Date?(v2 + *(int *)(v23 + 20), (uint64_t)v8);
  if (v19(v8, 1, v12) == 1)
  {
    outlined destroy of Date?((uint64_t)v8);
  }
  else
  {
    v22(v15, v8, v12);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    char v24 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((v24 & 1) == 0)
    {
      outlined destroy of Date?(v2);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v26(v2, 1, 1, v12);
      goto LABEL_8;
    }
  }
  uint64_t v25 = (uint64_t)v29;
  Date.addingTimeInterval(_:)();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v26(v25, 0, 1, v12);
  outlined assign with take of Date?(v25, v2);
LABEL_8:
  uint64_t v27 = v28;
  v22(v28, v18, v12);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v26)(v27, 0, 1, v12);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EverySecondEntries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v1, a1, type metadata accessor for EverySecondEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EverySecondEntries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(v0, type metadata accessor for EverySecondEntries);
  return v1;
}

uint64_t TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  CGRect v86 = a1;
  uint64_t v3 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v81 = *(void *)(v3 - 8);
  uint64_t v82 = v3;
  MEMORY[0x270FA5388](v3);
  char v74 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v80 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v79 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v78 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v85 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v76 = *(void *)(v7 - 8);
  uint64_t v77 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v75 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v63 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v63 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v63 - v19;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  char v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v63 - v26;
  outlined init with copy of Date?(v2, (uint64_t)v20);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v87 = v21;
  uint64_t v29 = v21;
  uint64_t v30 = v28;
  if (v28((uint64_t)v20, 1, v29) == 1)
  {
    outlined destroy of Date?((uint64_t)v20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v86, 1, 1, v87);
  }
  else
  {
    uint64_t v68 = v17;
    uint64_t v69 = v30;
    uint64_t v67 = v24;
    unint64_t v70 = v14;
    uint64_t v71 = v11;
    uint64_t v32 = v85;
    uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v73 = v22 + 32;
    v72(v27, v20, v87);
    uint64_t v33 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
    uint64_t v34 = v2 + *(int *)(v33 + 28);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    if (dispatch thunk of static Comparable.< infix(_:_:)())
    {
      uint64_t v64 = v22;
      uint64_t v63 = v34;
      uint64_t v35 = v75;
      static Calendar.current.getter();
      uint64_t v36 = *(int *)(v33 + 24);
      uint64_t v66 = v2;
      uint64_t v68 = (char *)(v2 + v36);
      uint64_t v37 = v78;
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v32, *MEMORY[0x263F07780], v83);
      uint64_t v38 = v79;
      uint64_t v39 = v80;
      (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, *MEMORY[0x263F07800], v84);
      uint64_t v41 = v81;
      uint64_t v40 = v82;
      uint64_t v42 = v74;
      (*(void (**)(char *, void, uint64_t))(v81 + 104))(v74, *MEMORY[0x263F077E0], v82);
      uint64_t v43 = (uint64_t)v70;
      uint64_t v65 = v27;
      uint64_t v44 = v85;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
      uint64_t v45 = v42;
      uint64_t v46 = v43;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v45, v40);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v84);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v44, v83);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v77);
      uint64_t v47 = (uint64_t)v71;
      outlined init with copy of Date?(v43, (uint64_t)v71);
      uint64_t v48 = v87;
      int v49 = v69(v47, 1, v87);
      uint64_t v50 = v66;
      if (v49 == 1)
      {
        outlined destroy of Date?(v43);
        outlined destroy of Date?(v47);
        outlined destroy of Date?(v50);
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
        v51(v50, 1, 1, v48);
        uint64_t v52 = v86;
        v72(v86, v65, v48);
      }
      else
      {
        uint64_t v54 = v67;
        uint64_t v55 = (void (*)(uint64_t, char *, uint64_t))v72;
        v72(v67, (char *)v47, v48);
        uint64_t v56 = v63;
        char v57 = static Date.> infix(_:_:)();
        outlined destroy of Date?(v46);
        uint64_t v52 = v86;
        uint64_t v58 = v65;
        uint64_t v59 = v64;
        if (v57)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v54, v48);
          outlined destroy of Date?(v50);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v50, v56, v48);
        }
        else
        {
          outlined destroy of Date?(v50);
          v55(v50, v54, v48);
        }
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
        v51(v50, 0, 1, v48);
        v55((uint64_t)v52, v58, v48);
      }
      char v62 = v52;
    }
    else
    {
      uint64_t v48 = v87;
      if (dispatch thunk of static Comparable.< infix(_:_:)())
      {
        uint64_t v53 = (uint64_t)v68;
        Date.addingTimeInterval(_:)();
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
        v51(v53, 0, 1, v48);
      }
      else
      {
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
        uint64_t v53 = (uint64_t)v68;
        v51((uint64_t)v68, 1, 1, v48);
      }
      uint64_t v60 = v86;
      uint64_t v61 = (void (*)(uint64_t, char *, uint64_t))v72;
      outlined assign with take of Date?(v53, v2);
      v61((uint64_t)v60, v27, v48);
      char v62 = v60;
    }
    return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v51)(v62, 0, 1, v48);
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v1, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(v0, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  return v1;
}

uint64_t TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v81 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v87 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v83 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v82 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v80 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v79 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  uint64_t v77 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v88 = (char *)&v66 - v12;
  uint64_t v13 = type metadata accessor for DateComponents();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v92 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Calendar();
  uint64_t v85 = *(void *)(v16 - 8);
  uint64_t v86 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v91 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v78 = (uint64_t)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v89 = (uint64_t)&v66 - v21;
  MEMORY[0x270FA5388](v22);
  char v24 = (char *)&v66 - v23;
  uint64_t v25 = type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(0);
  if (static Date.< infix(_:_:)())
  {
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v24, 0, 1, v7);
    return outlined assign with take of Date?((uint64_t)v24, v2 + *(int *)(v25 + 24));
  }
  else
  {
    uint64_t v74 = v25;
    uint64_t v75 = v14;
    uint64_t v76 = v13;
    uint64_t v69 = v10;
    static Calendar.current.getter();
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
    uint64_t v27 = type metadata accessor for Calendar.Component();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = v28;
    uint64_t v30 = v7;
    uint64_t v72 = a1;
    uint64_t v31 = v2;
    uint64_t v32 = *(void *)(v28 + 72);
    unint64_t v33 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_2461BDD50;
    unint64_t v35 = v34 + v33;
    uint64_t v36 = v8;
    uint64_t v37 = *(void (**)(unint64_t, void, uint64_t))(v29 + 104);
    v37(v35, *MEMORY[0x263F078C8], v27);
    uint64_t v70 = v30;
    v37(v35 + v32, *MEMORY[0x263F07828], v27);
    uint64_t v38 = v36;
    uint64_t v71 = v36;
    specialized Set.init(_nonEmptyArrayLiteral:)(v34);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v39 = v88;
    uint64_t v73 = v31;
    DateInterval.start.getter();
    Calendar.dateComponents(_:from:)();
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v68 = v38 + 8;
    uint64_t v67 = v40;
    v40(v39, v30);
    uint64_t v41 = v79;
    uint64_t v42 = v77;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v77, *MEMORY[0x263F07780], v90);
    uint64_t v43 = v82;
    uint64_t v44 = v80;
    uint64_t v45 = v84;
    (*(void (**)(char *, void, uint64_t))(v82 + 104))(v80, *MEMORY[0x263F07800], v84);
    uint64_t v46 = v87;
    uint64_t v47 = v83;
    uint64_t v48 = v81;
    (*(void (**)(char *, void, uint64_t))(v87 + 104))(v83, *MEMORY[0x263F077E0], v81);
    uint64_t v49 = v89;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    uint64_t v50 = v47;
    uint64_t v51 = v70;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v48);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
    uint64_t v52 = v42;
    uint64_t v53 = v71;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v52, v90);
    uint64_t v54 = v78;
    outlined init with copy of Date?(v49, v78);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v54, 1, v51) == 1)
    {
      outlined destroy of Date?(v89);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v92, v76);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
      outlined destroy of Date?(v54);
      uint64_t v55 = v73 + *(int *)(v74 + 24);
      outlined destroy of Date?(v55);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v55, 1, 1, v51);
    }
    else
    {
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      char v57 = v69;
      v56(v69, v54, v51);
      uint64_t v58 = v88;
      uint64_t v59 = v73;
      DateInterval.end.getter();
      lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
      char v60 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v61 = v67;
      v67(v58, v51);
      outlined destroy of Date?(v89);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v92, v76);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
      char v62 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      uint64_t v63 = v74;
      if (v60)
      {
        v61(v57, v51);
        uint64_t v64 = v59 + *(int *)(v63 + 24);
        outlined destroy of Date?(v64);
        return (*v62)(v64, 1, 1, v51);
      }
      else
      {
        uint64_t v65 = v59 + *(int *)(v74 + 24);
        outlined destroy of Date?(v65);
        v56((char *)v65, (uint64_t)v57, v51);
        return (*v62)(v65, 0, 1, v51);
      }
    }
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v1, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(v0, type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
  return v1;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v2 + *(int *)(a1 + 24);
  outlined init with copy of Date?(v12, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of Date?((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    outlined init with copy of Date?(v12, a2);
    TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries.makeNext(current:)((uint64_t)v11);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t TimerTimelineSchedule.ReducedFrequencyEntries.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v43 = a1;
  uint64_t v40 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v39 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v4 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v36 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v37 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v41 = (uint64_t)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v31 - v16;
  outlined init with copy of Date?(v2, (uint64_t)v31 - v16);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of Date?((uint64_t)v17);
    uint64_t v20 = 1;
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    uint64_t v34 = v2;
    uint64_t v35 = v10;
    v21(v43, v17, v18);
    uint64_t v32 = v12;
    static Calendar.current.getter();
    v31[1] = v2 + *(int *)(type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries(0) + 20);
    uint64_t v22 = *MEMORY[0x263F07780];
    uint64_t v23 = v7;
    char v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
    uint64_t v33 = v6;
    v24(v9, v22, v6);
    uint64_t v25 = v36;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v36, *MEMORY[0x263F07800], v42);
    uint64_t v27 = v38;
    uint64_t v26 = v39;
    uint64_t v28 = v40;
    (*(void (**)(char *, void, uint64_t))(v38 + 104))(v39, *MEMORY[0x263F077E0], v40);
    uint64_t v29 = v32;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v25, v42);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v35);
    outlined assign with take of Date?(v41, v34);
    uint64_t v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v43, v20, 1, v18);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance TimerTimelineSchedule.ReducedFrequencyEntries@<X0>(uint64_t a1@<X8>)
{
  return outlined init with take of TimerTimelineSchedule.ReducedFrequencyEntries(v1, a1, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance TimerTimelineSchedule.ReducedFrequencyEntries()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(v0, type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
  return v1;
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

void type metadata accessor for _SequenceBox<TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries>)
  {
    type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(255);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries>);
    }
  }
}

void type metadata accessor for _SequenceBox<TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries>()
{
  if (!lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries>)
  {
    type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(255);
    lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
    unint64_t v0 = type metadata accessor for _SequenceBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SequenceBox<TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries>);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    }
    else
    {
      uint64_t v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v10(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v10((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    v10((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v4 - 8);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  if (!v5) {
    v10(a1, v4);
  }
  v10(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for DateComponents();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];

  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
}

char *initializeWithCopy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *assignWithCopy for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *initializeWithTake for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  }
  else
  {
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *assignWithTake for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A71E1C);
}

uint64_t sub_245A71E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = type metadata accessor for DateComponents();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A71FAC);
}

uint64_t sub_245A71FAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = type metadata accessor for DateComponents();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void type metadata completion function for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  type metadata accessor for AnySequence<Date>(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DateComponents();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

char *initializeBufferWithCopyOfBuffer for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v13(v9, v10, v11);
    uint64_t v14 = a3[6];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v14], 1, v11))
    {
      type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v13(&a1[a3[7]], &a2[a3[7]], v11);
  }
  return a1;
}

uint64_t destroy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v5, v6);
  uint64_t v8 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6)) {
    v11(v8, v6);
  }
  uint64_t v9 = a1 + a2[7];

  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v9, v6);
}

uint64_t initializeWithCopy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t assignWithCopy for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 24);
  v21(v8, v9, v10);
  uint64_t v22 = a3;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15((const void *)(a1 + v12), 1, v10);
  int v17 = v15(v14, 1, v10);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v19 = v21;
      v21((uint64_t)v13, (uint64_t)v14, v10);
      goto LABEL_8;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v13, v14, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
LABEL_7:
  uint64_t v19 = v21;
LABEL_8:
  v19(a1 + *(int *)(v22 + 28), a2 + *(int *)(v22 + 28), v10);
  return a1;
}

uint64_t initializeWithTake for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  return a1;
}

uint64_t assignWithTake for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40);
  v21(v8, v9, v10);
  uint64_t v22 = a3;
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  int v16 = v15((const void *)(a1 + v12), 1, v10);
  int v17 = v15(v14, 1, v10);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v19 = v21;
      v21((uint64_t)v13, (uint64_t)v14, v10);
      goto LABEL_8;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v13, v14, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
LABEL_7:
  uint64_t v19 = v21;
LABEL_8:
  v19(a1 + *(int *)(v22 + 28), a2 + *(int *)(v22 + 28), v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A72DFC);
}

uint64_t sub_245A72DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A72F8C);
}

uint64_t sub_245A72F8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void type metadata completion function for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  type metadata accessor for DateInterval();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      type metadata accessor for AnySequence<Date>(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for EverySecondEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for EverySecondEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *initializeWithCopy for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *initializeWithTake for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for EverySecondEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EverySecondEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A73FC8);
}

uint64_t sub_245A73FC8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EverySecondEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A74078);
}

uint64_t sub_245A74078(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for EverySecondEntries()
{
  type metadata accessor for AnySequence<Date>(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for DateComponents();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

char *initializeWithCopy for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

char *assignWithCopy for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

char *assignWithTake for TimerTimelineSchedule.ReducedFrequencyEntries(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for DateComponents();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245A74BD0);
}

uint64_t sub_245A74BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DateComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for TimerTimelineSchedule.ReducedFrequencyEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245A74D0C);
}

uint64_t sub_245A74D0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AnySequence<Date>(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DateComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for TimerTimelineSchedule.ReducedFrequencyEntries()
{
  type metadata accessor for AnySequence<Date>(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateComponents();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries and conformance TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerIntervalTimelineSchedule.CountupReducedFrequencyEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in EverySecondEntries()
{
  return lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type EverySecondEntries and conformance EverySecondEntries, (void (*)(uint64_t))type metadata accessor for EverySecondEntries);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in TimerTimelineSchedule.ReducedFrequencyEntries()
{
  return lazy protocol witness table accessor for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries(&lazy protocol witness table cache variable for type TimerTimelineSchedule.ReducedFrequencyEntries and conformance TimerTimelineSchedule.ReducedFrequencyEntries, (void (*)(uint64_t))type metadata accessor for TimerTimelineSchedule.ReducedFrequencyEntries);
}

uint64_t outlined destroy of TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized _ViewInputs.subscript.getter@<X0>(_DWORD *a1@<X8>)
{
  long long v3 = v1[1];
  v8[0] = *v1;
  v8[1] = v3;
  _OWORD v8[2] = v1[2];
  uint64_t v4 = *(void *)&v8[0];
  uint64_t v9 = *(void *)&v8[0];
  outlined retain of _GraphInputs((uint64_t)v8);
  outlined retain of ViewTransform((uint64_t)&v9);
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5) {
    int v6 = *(_DWORD *)(v5 + 72);
  }
  else {
    int v6 = 0;
  }
  *a1 = v6;
  outlined release of ViewTransform((uint64_t)&v9);
  return outlined release of _GraphInputs((uint64_t)v8);
}

uint64_t specialized _ViewInputs.subscript.getter@<X0>(unsigned char *a1@<X8>)
{
  long long v3 = v1[1];
  v9[0] = *v1;
  v9[1] = v3;
  void v9[2] = v1[2];
  uint64_t v4 = *(void *)&v9[0];
  uint64_t v10 = *(void *)&v9[0];
  outlined retain of _GraphInputs((uint64_t)v9);
  outlined retain of ViewTransform((uint64_t)&v10);
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    char v6 = *(unsigned char *)(v5 + 72);
    char v7 = *(unsigned char *)(v5 + 73);
  }
  else
  {
    char v6 = 0;
    char v7 = 2;
  }
  *a1 = v6;
  a1[1] = v7;
  outlined release of ViewTransform((uint64_t)&v10);
  return outlined release of _GraphInputs((uint64_t)v9);
}

unint64_t specialized _ViewInputs.subscript.getter()
{
  long long v1 = v0[1];
  v7[0] = *v0;
  v7[1] = v1;
  void v7[2] = v0[2];
  uint64_t v2 = *(void *)&v7[0];
  uint64_t v8 = *(void *)&v7[0];
  outlined retain of _GraphInputs((uint64_t)v7);
  outlined retain of ViewTransform((uint64_t)&v8);
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 72);
    unint64_t v5 = (unint64_t)*(unsigned int *)(v3 + 76) << 32;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  outlined release of ViewTransform((uint64_t)&v8);
  outlined release of _GraphInputs((uint64_t)v7);
  return v5 | v4;
}

uint64_t specialized _ViewInputs.subscript.getter()
{
  long long v1 = v0[1];
  v9[0] = *v0;
  v9[1] = v1;
  void v9[2] = v0[2];
  uint64_t v2 = *(void *)&v9[0];
  uint64_t v10 = *(void *)&v9[0];
  outlined retain of _GraphInputs((uint64_t)v9);
  outlined retain of ViewTransform((uint64_t)&v10);
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(v3 + 72);
    unint64_t v5 = (unsigned int *)(v3 + 76);
  }
  else
  {
    uint64_t v4 = &static _DisplayList_StableIdentityScope.defaultValue;
    unint64_t v5 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v6 = *(unsigned int *)v4;
  uint64_t v7 = *v5;
  outlined release of ViewTransform((uint64_t)&v10);
  outlined release of _GraphInputs((uint64_t)v9);
  return v6 | (v7 << 32);
}

void (*Image.Resolved.image.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return Image.Resolved.image.modify;
}

void Image.Resolved.image.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    Image.Resolved.image.didset();
  }
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *((void *)v4 + 2);
  v7[0] = v4 + 32;
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)((uint64_t)v7, a2);
  *a1 = v4;
  return result;
}

double Image.LayoutMetrics.baselineOffset.getter()
{
  return *(double *)v0;
}

void Image.LayoutMetrics.baselineOffset.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Image.LayoutMetrics.baselineOffset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.capHeight.getter()
{
  return *(double *)(v0 + 8);
}

void Image.LayoutMetrics.capHeight.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*Image.LayoutMetrics.capHeight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.contentSize.getter()
{
  return *(double *)(v0 + 16);
}

void Image.LayoutMetrics.contentSize.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Image.LayoutMetrics.contentSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.alignmentOrigin.getter()
{
  return *(double *)(v0 + 32);
}

void Image.LayoutMetrics.alignmentOrigin.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Image.LayoutMetrics.alignmentOrigin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.LayoutMetrics.backgroundSize.getter()
{
  return *(double *)(v0 + 48);
}

void Image.LayoutMetrics.backgroundSize.setter(double a1, double a2)
{
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Image.LayoutMetrics.backgroundSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.LayoutMetrics.init(baselineOffset:capHeight:contentSize:alignmentOrigin:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
}

id Image.Resolved.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 60);
  char v6 = *(unsigned char *)(v1 + 96);
  char v7 = *(unsigned char *)(v1 + 97);
  __int16 v8 = *(_WORD *)(v1 + 98);
  *(void *)a1 = *(void *)v1;
  char v9 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v9;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(v1 + 44);
  *(unsigned char *)(a1 + 60) = v5;
  long long v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 96) = v6;
  *(unsigned char *)(a1 + 97) = v7;
  *(_WORD *)(a1 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

id key path getter for Image.Resolved.image : Image.Resolved@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 60);
  char v6 = *(unsigned char *)(a1 + 96);
  char v7 = *(unsigned char *)(a1 + 97);
  __int16 v8 = *(_WORD *)(a1 + 98);
  *(void *)a2 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 8) = v9;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = v3;
  *(unsigned char *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 44) = *(_OWORD *)(a1 + 44);
  *(unsigned char *)(a2 + 60) = v5;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v10;
  *(unsigned char *)(a2 + 96) = v6;
  *(unsigned char *)(a2 + 97) = v7;
  *(_WORD *)(a2 + 98) = v8;
  return outlined copy of GraphicsImage.Contents?(v2, v9);
}

void key path setter for Image.Resolved.image : Image.Resolved(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a1;
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 52);
  char v8 = *(unsigned char *)(a1 + 60);
  long long v17 = *(_OWORD *)(a1 + 64);
  long long v18 = *(_OWORD *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  char v14 = *(unsigned char *)(a1 + 97);
  char v15 = *(unsigned char *)(a1 + 96);
  __int16 v13 = *(_WORD *)(a1 + 98);
  long long v10 = *(void **)a2;
  char v11 = *(unsigned char *)(a1 + 8);
  char v12 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, v11);
  outlined consume of GraphicsImage.Contents?(v10, v12);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = v18;
  *(void *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 40) = v5;
  *(void *)(a2 + 44) = v6;
  *(void *)(a2 + 52) = v7;
  *(unsigned char *)(a2 + 60) = v8;
  *(_OWORD *)(a2 + 64) = v17;
  *(void *)(a2 + 80) = v9;
  *(void *)(a2 + 88) = v16;
  *(unsigned char *)(a2 + 96) = v15;
  *(unsigned char *)(a2 + 97) = v14;
  *(_WORD *)(a2 + 98) = v13;
  Image.Resolved.image.didset();
}

void Image.Resolved.image.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[4];
  char v5 = *((unsigned char *)a1 + 40);
  uint64_t v6 = *(uint64_t *)((char *)a1 + 44);
  uint64_t v7 = *(uint64_t *)((char *)a1 + 52);
  char v8 = *((unsigned char *)a1 + 60);
  long long v14 = *((_OWORD *)a1 + 4);
  long long v15 = *((_OWORD *)a1 + 1);
  uint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  char v11 = *((unsigned char *)a1 + 96);
  __int16 v12 = *((_WORD *)a1 + 49);
  char v13 = *((unsigned char *)a1 + 97);
  outlined consume of GraphicsImage.Contents?(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  *(_OWORD *)(v1 + 16) = v15;
  *(void *)(v1 + 32) = v4;
  *(unsigned char *)(v1 + 40) = v5;
  *(void *)(v1 + 44) = v6;
  *(void *)(v1 + 52) = v7;
  *(unsigned char *)(v1 + 60) = v8;
  *(_OWORD *)(v1 + 64) = v14;
  *(void *)(v1 + 80) = v9;
  *(void *)(v1 + 88) = v10;
  *(unsigned char *)(v1 + 96) = v11;
  *(unsigned char *)(v1 + 97) = v13;
  *(_WORD *)(v1 + 98) = v12;

  Image.Resolved.image.didset();
}

uint64_t Image.Resolved.label.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[13];
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[15];
  uint64_t v5 = v1[16];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityImageLabel?(v2, v3, v4);
}

__n128 Image.Resolved.label.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of AccessibilityImageLabel?(v1[13], v1[14], v1[15]);
  __n128 result = v5;
  *(__n128 *)(v1 + 13) = v5;
  v1[15] = v2;
  v1[16] = v3;
  return result;
}

uint64_t (*Image.Resolved.label.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of Image.Resolved.basePlatformItemImage@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Image.Resolved.basePlatformItemImage.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Image.Resolved.basePlatformItemImage.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 136) = a1;
  return result;
}

uint64_t (*Image.Resolved.basePlatformItemImage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of Image.Resolved.layoutMetrics@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1[4])
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t v5 = *((void *)a1 + 6);
    uint64_t v4 = *((void *)a1 + 7);
    long long v7 = a1[1];
    long long v8 = a1[2];
    long long v6 = *a1;
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = v6;
    *(_OWORD *)(result + 32) = v7;
    *(_OWORD *)(result + 48) = v8;
    *(void *)(result + 64) = v5;
    *(void *)(result + 72) = v4;
  }
  *a2 = result;
  return result;
}

void Image.Resolved.layoutMetrics.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(_OWORD **)(v1 + 144);
  if (v2)
  {
    long long v3 = v2[3];
    long long v4 = v2[4];
    long long v5 = v2[2];
    *(_OWORD *)a1 = v2[1];
  }
  else
  {
    long long v5 = 0uLL;
    *(_OWORD *)a1 = 0u;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
  }
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 64) = v2 == 0;
}

uint64_t key path getter for Image.Resolved.layoutMetrics : Image.Resolved@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(_OWORD **)(result + 144);
  if (v2)
  {
    long long v3 = v2[1];
    long long v4 = v2[2];
    long long v5 = v2[3];
    long long v6 = v2[4];
  }
  else
  {
    long long v3 = 0uLL;
    long long v4 = 0uLL;
    long long v5 = 0uLL;
    long long v6 = 0uLL;
  }
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 48) = v6;
  *(unsigned char *)(a2 + 64) = v2 == 0;
  return result;
}

void *key path setter for Image.Resolved.layoutMetrics : Image.Resolved(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  char v11 = *((unsigned char *)a1 + 64);
  swift_release();
  if (v11)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (void *)swift_allocObject();
    result[2] = v3;
    result[3] = v4;
    result[4] = v5;
    result[5] = v6;
    result[6] = v7;
    result[7] = v8;
    result[8] = v9;
    result[9] = v10;
  }
  *(void *)(a2 + 144) = result;
  return result;
}

void *Image.Resolved.layoutMetrics.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  char v10 = *((unsigned char *)a1 + 64);
  swift_release();
  if (v10)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (void *)swift_allocObject();
    result[2] = v2;
    result[3] = v3;
    result[4] = v4;
    result[5] = v5;
    result[6] = v6;
    result[7] = v7;
    result[8] = v8;
    result[9] = v9;
  }
  *(void *)(v1 + 144) = result;
  return result;
}

void (*Image.Resolved.layoutMetrics.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x50uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(_OWORD **)(v1 + 144);
  if (v4)
  {
    long long v5 = v4[3];
    long long v6 = v4[4];
    long long v7 = v4[2];
    *(_OWORD *)uint64_t v3 = v4[1];
  }
  else
  {
    long long v7 = 0uLL;
    *(_OWORD *)uint64_t v3 = 0u;
    long long v5 = 0uLL;
    long long v6 = 0uLL;
  }
  *((_OWORD *)v3 + 1) = v7;
  *((_OWORD *)v3 + 2) = v5;
  *((_OWORD *)v3 + 3) = v6;
  *((unsigned char *)v3 + 64) = v4 == 0;
  return Image.Resolved.layoutMetrics.modify;
}

void Image.Resolved.layoutMetrics.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = (*a1)[5];
  uint64_t v8 = (*a1)[6];
  uint64_t v9 = (*a1)[7];
  char v10 = *((unsigned char *)*a1 + 64);
  swift_release();
  if (v10)
  {
    char v11 = 0;
  }
  else
  {
    char v11 = (void *)swift_allocObject();
    void v11[2] = v2;
    _OWORD v11[3] = v3;
    v11[4] = v4;
    v11[5] = v5;
    void v11[6] = v6;
    v11[7] = v7;
    v11[8] = v8;
    v11[9] = v9;
  }
  *(void *)(v1[9] + 144) = v11;

  free(v1);
}

uint64_t Image.Resolved.decorative.getter()
{
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t Image.Resolved.decorative.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 152) = result;
  return result;
}

uint64_t (*Image.Resolved.decorative.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.Resolved.backgroundShape.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 153);
}

unsigned char *Image.Resolved.backgroundShape.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 153) = *result;
  return result;
}

uint64_t (*Image.Resolved.backgroundShape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.Resolved.backgroundCornerRadius.getter()
{
  return *(unsigned int *)(v0 + 156) | ((unint64_t)*(unsigned __int8 *)(v0 + 160) << 32);
}

uint64_t Image.Resolved.backgroundCornerRadius.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 156) = result;
  *(unsigned char *)(v1 + 160) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.Resolved.backgroundCornerRadius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Image.Resolved.styleResolverMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 168);
  __int16 v3 = *(_WORD *)(v1 + 176);
  char v4 = *(unsigned char *)(v1 + 178);
  *(void *)a1 = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  return v2;
}

void Image.Resolved.styleResolverMode.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 4);
  char v4 = *((unsigned char *)a1 + 10);

  *(void *)(v1 + 168) = v2;
  *(_WORD *)(v1 + 176) = v3;
  *(unsigned char *)(v1 + 178) = v4;
}

uint64_t (*Image.Resolved.styleResolverMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double Image.Resolved.size.getter()
{
  double v1 = *(double *)(v0 + 16);
  double result = 0.0;
  if (v1 != 0.0)
  {
    double v3 = *(double *)(v0 + 24);
    switch(*(unsigned char *)(v0 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v3 = *(double *)(v0 + 32);
        break;
      default:
        return 1.0 / v1 * v3;
    }
    return 1.0 / v1 * v3;
  }
  return result;
}

double Image.Resolved.baselineOffset.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1) {
    return *(double *)(v1 + 16);
  }
  else {
    return 0.0;
  }
}

double Image.Resolved.capHeight.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1) {
    return *(double *)(v1 + 24);
  }
  double v3 = *(double *)(v0 + 16);
  double result = 0.0;
  if (v3 != 0.0)
  {
    double v4 = *(double *)(v0 + 32);
    switch(*(unsigned char *)(v0 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v4 = *(double *)(v0 + 24);
        break;
      default:
        return 1.0 / v3 * v4;
    }
    return 1.0 / v3 * v4;
  }
  return result;
}

double Image.Resolved.contentSize.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1) {
    return *(double *)(v1 + 32);
  }
  double v3 = *(double *)(v0 + 16);
  double result = 0.0;
  if (v3 != 0.0)
  {
    double v4 = *(double *)(v0 + 24);
    switch(*(unsigned char *)(v0 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v4 = *(double *)(v0 + 32);
        break;
      default:
        return 1.0 / v3 * v4;
    }
    return 1.0 / v3 * v4;
  }
  return result;
}

double Image.Resolved.alignmentOrigin.getter()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1) {
    return *(double *)(v1 + 48);
  }
  else {
    return 0.0;
  }
}

double Image.Resolved.foregroundColor(_:)@<D0>(float (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  long long v4 = v2[8];
  long long v5 = v2[10];
  *(_OWORD *)&v54[48] = v2[9];
  *(_OWORD *)uint64_t v55 = v5;
  *(_DWORD *)&v55[15] = *(_DWORD *)((char *)v2 + 175);
  long long v6 = v2[5];
  long long v52 = v2[4];
  long long v53 = v6;
  long long v7 = v2[7];
  *(_OWORD *)uint64_t v54 = v2[6];
  *(_OWORD *)&v54[16] = v7;
  *(_OWORD *)&v54[32] = v4;
  long long v8 = v2[1];
  long long v49 = *v2;
  long long v50 = v8;
  long long v9 = v2[3];
  *(_OWORD *)uint64_t v51 = v2[2];
  *(_OWORD *)&v51[16] = v9;
  char v10 = *(void **)&v55[8];
  char v11 = v55[18];
  uint64_t v12 = v49;
  int v13 = BYTE8(v49);
  long long v38 = v50;
  uint64_t v14 = *(void *)v51;
  char v37 = v51[8];
  char v15 = BYTE12(v9);
  long long v43 = v53;
  long long v44 = v52;
  char v41 = v54[1];
  char v42 = v54[0];
  char v39 = v54[3];
  char v40 = v54[2];
  if ((BYTE12(v9) & 1) == 0)
  {
    uint64_t v20 = outlined retain of Image.Resolved((uint64_t)&v49);
    float v21 = a1(v20);
    unint64_t v17 = LODWORD(v21) | ((unint64_t)v22 << 32);
    unint64_t v16 = v23 | ((unint64_t)v24 << 32);
    if (v13 == 2)
    {
      uint64_t v25 = *(void **)(v12 + 32);
      uint64_t v34 = *(void **)(v12 + 48);
      unint64_t v36 = LODWORD(v21) | ((unint64_t)v22 << 32);
      id v26 = *(id *)(v12 + 16);
      outlined copy of Image.Location(v25);
      id v35 = v34;
      id v27 = v26;
      outlined copy of Image.Location(v25);
      id v33 = v35;
      LOWORD(v35) = (unsigned __int16)objc_msgSend(v27, sel_styleMask);
      uint64_t v45 = v25;
      outlined copy of Image.Location(v25);
      _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)((__int16)v35, &v45, (uint64_t)&v46);

      outlined consume of Image.Location(v25);
      unint64_t v17 = v36;

      outlined consume of Image.Location(v25);
      char v10 = v46;
      __int16 v18 = v47;
      char v28 = v48;
      if ((v11 & 2) == 0)
      {
LABEL_8:
        char v11 = v28 & 0xFD;
        goto LABEL_9;
      }
    }
    else
    {
      __int16 v18 = v13 != 255;

      char v28 = 0;
      char v10 = 0;
      if ((v11 & 2) == 0) {
        goto LABEL_8;
      }
    }
    char v11 = v28 | 2;
    goto LABEL_9;
  }
  unint64_t v16 = *(void *)&v51[20];
  unint64_t v17 = *(void *)&v51[12];
  __int16 v18 = *(_WORD *)&v55[16];
  outlined retain of Image.Resolved((uint64_t)&v49);
LABEL_9:
  int v29 = *(_DWORD *)&v54[60];
  char v30 = v54[57];
  char v31 = v54[56];
  LOBYTE(v45) = v55[0];
  *(void *)a2 = v12;
  *(unsigned char *)(a2 + 8) = v13;
  *(_OWORD *)(a2 + 16) = v38;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = v37;
  *(void *)(a2 + 44) = v17;
  *(void *)(a2 + 52) = v16;
  *(unsigned char *)(a2 + 60) = v15;
  *(_OWORD *)(a2 + 64) = v44;
  *(_OWORD *)(a2 + 80) = v43;
  *(unsigned char *)(a2 + 96) = v42;
  *(unsigned char *)(a2 + 97) = v41;
  *(unsigned char *)(a2 + 98) = v40;
  *(unsigned char *)(a2 + 99) = v39;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)&v54[8];
  *(_OWORD *)(a2 + 120) = *(_OWORD *)&v54[24];
  double result = *(double *)&v54[40];
  *(_OWORD *)(a2 + 136) = *(_OWORD *)&v54[40];
  *(unsigned char *)(a2 + 152) = v31;
  *(unsigned char *)(a2 + 153) = v30;
  *(_DWORD *)(a2 + 156) = v29;
  *(unsigned char *)(a2 + 160) = (_BYTE)v45;
  *(void *)(a2 + 168) = v10;
  *(_WORD *)(a2 + 176) = v18;
  *(unsigned char *)(a2 + 178) = v11;
  return result;
}

uint64_t Image.NamedResolved.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Image.NamedResolved.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Image.NamedResolved.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Image.NamedResolved.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void Image.NamedResolved.location.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 16));
  *(void *)(v1 + 16) = v2;
}

uint64_t (*Image.NamedResolved.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.NamedResolved.value.getter()
{
  return *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
}

uint64_t Image.NamedResolved.value.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 28) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.NamedResolved.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.NamedResolved.symbolRenderingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 29);
}

unsigned char *Image.NamedResolved.symbolRenderingMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 29) = *result;
  return result;
}

uint64_t (*Image.NamedResolved.symbolRenderingMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedResolved.isTemplate.getter()
{
  return *(unsigned __int8 *)(v0 + 30);
}

uint64_t Image.NamedResolved.isTemplate.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 30) = result;
  return result;
}

uint64_t (*Image.NamedResolved.isTemplate.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedResolved.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t Image.NamedResolved.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*Image.NamedResolved.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.LayoutMetrics.adjustForBackground(glyph:shape:size:growsToFitBackground:)(void *a1, unsigned __int8 *a2, void *a3, char a4)
{
  int v8 = *a2;
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F383F0]), sel_init);
  objc_msgSend(v26, sel_setShape_, (v8 - 3) < 0xFFFFFFFE);
  if (a4) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 3;
  }
  objc_msgSend(v26, sel_setImageScaling_, v9);
  id v10 = objc_msgSend(a1, sel_graphicVariantWithOptions_, v26);
  if (v10)
  {
    char v11 = v10;
    objc_msgSend(v10, sel_interiorAlignmentRect);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    *a3 = v16;
    a3[1] = v17;
    objc_msgSend(v11, sel_baselineOffset);
    void *v4 = v18;
    objc_msgSend(v11, sel_capHeight);
    v4[1] = v19;
    objc_msgSend(v11, sel_contentBounds);
    _OWORD v4[2] = v20;
    v4[3] = v21;
    v4[4] = v13;
    v4[5] = v15;
    objc_msgSend(v11, sel_alignmentRect);
    uint64_t v23 = v22;
    uint64_t v25 = v24;

    v4[6] = v23;
    v4[7] = v25;
  }
  else
  {
  }
}

double Image.Resolved.shape(in:)(uint64_t a1)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 52);
  int v9 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v10 = *(void *)(v1 + 144);
  uint64_t v11 = *(unsigned __int8 *)(v1 + 40) | (*(void *)(v1 + 44) << 32);
  *((void *)&v13 + 1) = v8;
  *(void *)&long long v13 = *(void *)(v1 + 44);
  uint64_t v12 = v13 >> 32;
  uint64_t v14 = 0x100000000;
  if (!*(unsigned char *)(v1 + 60)) {
    uint64_t v14 = 0;
  }
  unint64_t v15 = v14 & 0xFFFFFFFF00000000 | HIDWORD(v8);
  if (*(unsigned char *)(v1 + 97)) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  int v17 = v16 | v9 | (*(unsigned __int8 *)(v1 + 98) << 16) | (*(unsigned __int8 *)(v1 + 99) << 24) | 0x400000;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v15;
  long long v18 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v18;
  *(_DWORD *)(a1 + 96) = v17;
  double v19 = 0.0;
  if (v9 == 2 && v10) {
    double v19 = *(double *)(v10 + 48);
  }
  outlined copy of GraphicsImage.Contents?(v3, v4);
  return v19;
}

uint64_t static Image.Resolved.hasBackground.getter()
{
  return 1;
}

double Image.Resolved.backgroundShape(in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = *(double **)(v3 + 144);
  if (*(unsigned char *)(v3 + 153) == 3 || v5 == 0)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    int v10 = 0x800000;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(v3 + 156);
    CGFloat v8 = v5[8] * (a2 / v5[4]);
    CGFloat v9 = v5[9] * (a3 / v5[5]);
    LOBYTE(v14[0]) = *(unsigned char *)(v3 + 160);
    SymbolVariants.Shape.path(in:cornerRadius:)(v7 | ((unint64_t)LOBYTE(v14[0]) << 32), (uint64_t)v14, 0.0, 0.0, v8, v9);
    int v10 = 0;
    uint64_t v11 = v15 | 0x10000;
    long long v12 = v14[1];
    *(_OWORD *)a1 = v14[0];
    *(_OWORD *)(a1 + 16) = v12;
    *(void *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  double result = 0.0;
  *(_DWORD *)(a1 + 96) = v10;
  return result;
}

BOOL Image.Resolved.isClear(styles:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v1[8] == 2)
  {
    uint64_t v3 = *(void *)(*(void *)v1 + 16);
    char v4 = *(unsigned char *)(*(void *)v1 + 24);
    uint64_t v5 = *(void *)(*(void *)v1 + 32);
    int v6 = *(_DWORD *)(*(void *)v1 + 40);
    char v7 = *(unsigned char *)(*(void *)v1 + 44);
    char v8 = *(unsigned char *)(*(void *)v1 + 45);
    uint64_t v9 = *(void *)(*(void *)v1 + 48);
    uint64_t v13 = *a1;
    uint64_t v14 = v3;
    char v15 = v4;
    uint64_t v16 = v5;
    int v17 = v6;
    char v18 = v7;
    char v19 = v8;
    uint64_t v20 = v9;
    if (!ResolvedVectorGlyph.isClear(styles:)(&v13)) {
      return 0;
    }
LABEL_7:
    uint64_t v14 = v2;
    LOBYTE(v13) = 1;
    return _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v13);
  }
  if ((v1[60] & 1) == 0)
  {
    uint64_t v14 = *a1;
    LOBYTE(v13) = 0;
    Swift::Bool v11 = _ShapeStyle_Pack.isClear(name:)((SwiftUI::_ShapeStyle_Name)&v13);
    Swift::Bool v10 = 0;
    if (!v11) {
      return v10;
    }
    goto LABEL_7;
  }
  return 0;
}

uint64_t key path getter for EnvironmentValues.foregroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundStyle : EnvironmentValues()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance Image.Resolved.MakeRepresentableContext@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI33PlatformImageRepresentableContextVSgWOi0_((uint64_t)v3);
  return outlined init with take of PlatformImageRepresentableContext?((uint64_t)v3, a1, &lazy cache variable for type metadata for PlatformImageRepresentableContext?, (uint64_t)&type metadata for PlatformImageRepresentableContext);
}

uint64_t protocol witness for Rule.value.getter in conformance Image.Resolved.MakeRepresentableContext@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  long long v3 = *(_OWORD *)(Value + 48);
  long long v5 = *(_OWORD *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  _OWORD v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v3;
  v21[0] = v5;
  v21[1] = v4;
  long long v6 = *(_OWORD *)(Value + 112);
  long long v8 = *(_OWORD *)(Value + 64);
  long long v7 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v6;
  unsigned __int8 v21[4] = v8;
  v21[5] = v7;
  long long v10 = *(_OWORD *)(Value + 144);
  long long v9 = *(_OWORD *)(Value + 160);
  long long v11 = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v22[15] = *(_DWORD *)(Value + 175);
  v21[9] = v10;
  *(_OWORD *)uint64_t v22 = v9;
  char v21[8] = v11;
  long long v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, MEMORY[0x263F8D8F0]);
  uint64_t v13 = *(void *)AGGraphGetValue();
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, v12);
  uint64_t v14 = *(void *)AGGraphGetValue();
  long long v15 = *(_OWORD *)(Value + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(Value + 128);
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(Value + 160);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)(Value + 175);
  long long v16 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a1 + 80) = v16;
  long long v17 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a1 + 112) = v17;
  long long v18 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a1 + 48) = v19;
  *(void *)(a1 + 184) = v13;
  *(void *)(a1 + 192) = v14;
  outlined retain of Image.Resolved((uint64_t)v21);
  swift_retain();
  return swift_retain();
}

double protocol witness for ShapeStyledLeafView.backgroundShape(in:) in conformance Image.Resolved(uint64_t a1, double a2, double a3)
{
  return 0.0;
}

uint64_t static Image.Resolved.defaultTransition.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    int v3 = dyld_program_sdk_at_least();
  }
  else {
    int v3 = static Semantics.forced >= v2;
  }
  if (v3) {
    uint64_t v4 = 0x8000000003;
  }
  else {
    uint64_t v4 = 0x8000000001;
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0x2000000;
  *(unsigned char *)(a1 + 12) = 3;
  *(_WORD *)(a1 + 13) = 0;
  return outlined copy of ContentTransition.Storage(v4, 0x302000000, 0);
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ResolvedImageLayoutComputer()
{
  uint64_t Value = AGGraphGetValue();
  long long v1 = *(_OWORD *)(Value + 48);
  long long v3 = *(_OWORD *)Value;
  long long v2 = *(_OWORD *)(Value + 16);
  _OWORD v21[2] = *(_OWORD *)(Value + 32);
  v21[3] = v1;
  v21[0] = v3;
  v21[1] = v2;
  long long v4 = *(_OWORD *)(Value + 112);
  long long v6 = *(_OWORD *)(Value + 64);
  long long v5 = *(_OWORD *)(Value + 80);
  v21[6] = *(_OWORD *)(Value + 96);
  v21[7] = v4;
  unsigned __int8 v21[4] = v6;
  v21[5] = v5;
  long long v8 = *(_OWORD *)(Value + 144);
  long long v7 = *(_OWORD *)(Value + 160);
  long long v9 = *(_OWORD *)(Value + 128);
  *(_DWORD *)((char *)v22 + 15) = *(_DWORD *)(Value + 175);
  v21[9] = v8;
  v22[0] = v7;
  char v21[8] = v9;
  long long v10 = *(_OWORD *)(Value + 160);
  long long v32 = *(_OWORD *)(Value + 144);
  v33[0] = v10;
  *(_DWORD *)((char *)v33 + 15) = *(_DWORD *)(Value + 175);
  long long v11 = *(_OWORD *)(Value + 128);
  long long v12 = *(_OWORD *)(Value + 80);
  long long v27 = *(_OWORD *)(Value + 64);
  long long v28 = v12;
  long long v13 = *(_OWORD *)(Value + 112);
  long long v29 = *(_OWORD *)(Value + 96);
  long long v30 = v13;
  long long v31 = v11;
  long long v14 = *(_OWORD *)(Value + 16);
  long long v23 = *(_OWORD *)Value;
  long long v24 = v14;
  long long v15 = *(_OWORD *)(Value + 48);
  long long v25 = *(_OWORD *)(Value + 32);
  long long v26 = v15;
  char v19[8] = v11;
  v19[9] = v32;
  v20[0] = v33[0];
  *(_DWORD *)((char *)v20 + 15) = *(_DWORD *)((char *)v33 + 15);
  v19[4] = v27;
  v19[5] = v28;
  v19[6] = v29;
  v19[7] = v30;
  v19[0] = v23;
  v19[1] = v24;
  void v19[2] = v25;
  _OWORD v19[3] = v15;
  long long v18 = v19;
  outlined retain of Image.Resolved((uint64_t)v21);
  specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v17, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  return outlined release of Image.Resolved((uint64_t)v21);
}

uint64_t Image.Resolved.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[7];
  long long v24 = v1[8];
  long long v25 = v2;
  long long v4 = v1[9];
  v26[0] = v1[10];
  long long v5 = v1[5];
  long long v7 = v1[3];
  long long v20 = v1[4];
  long long v6 = v20;
  long long v21 = v5;
  long long v8 = v1[5];
  long long v9 = v1[7];
  long long v22 = v1[6];
  long long v10 = v22;
  long long v23 = v9;
  long long v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  long long v12 = v1[3];
  long long v14 = *v1;
  long long v13 = v1[1];
  long long v18 = v1[2];
  long long v15 = v18;
  long long v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

double Image.Resolved.resolveNamedImage(in:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.Resolved@<X0>(uint64_t a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[7];
  long long v24 = v1[8];
  long long v25 = v2;
  long long v4 = v1[9];
  v26[0] = v1[10];
  long long v5 = v1[5];
  long long v7 = v1[3];
  long long v20 = v1[4];
  long long v6 = v20;
  long long v21 = v5;
  long long v8 = v1[5];
  long long v9 = v1[7];
  long long v22 = v1[6];
  long long v10 = v22;
  long long v23 = v9;
  long long v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  long long v12 = v1[3];
  long long v14 = *v1;
  long long v13 = v1[1];
  long long v18 = v1[2];
  long long v15 = v18;
  long long v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

double protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.Resolved@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t specialized ShapeStyledDisplayList.updateValue()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void *__return_ptr, void *, double, double, double, double, double))
{
  void (*v63)(void *__return_ptr, void *, double, double, double, double, double);
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  long long v71;
  long long v72;
  unsigned char v73[80];
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  unsigned char v81[25];
  uint64_t v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  uint64_t v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  void v101[4];
  unsigned __int8 v102;
  uint64_t v103;
  CGRect v104;
  CGRect v105;

  uint64_t v103 = *MEMORY[0x263EF8340];
  int v14 = *((_DWORD *)v4 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  double x = *(double *)Value;
  int v17 = *(unsigned __int8 *)(Value + 8);
  uint64_t v18 = *(unsigned __int8 *)(Value + 9);
  if ((v19 & 1) != 0 || !*((_WORD *)v4 + 25))
  {
    unint64_t v21 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&uint64_t v88 = *(uint64_t *)((char *)v4 + 28);
    DWORD2(v88) = v14;
    int v20 = AGGraphAnyInputsChanged();
    unint64_t v21 = ++static DisplayList.Version.lastValue;
    if (!v20) {
      goto LABEL_9;
    }
  }
  int v22 = (2 * ((33 * (v21 >> 16)) ^ v21)) | 1;
  if (!v21) {
    LOWORD(v22) = 0;
  }
  *((_WORD *)v4 + 25) = v22;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v66 = v18;
    uint64_t v67 = v17;
    int v23 = *((_DWORD *)v4 + 10);
    uint64_t v61 = AGCreateWeakAttribute();
    unint64_t v24 = AGCreateWeakAttribute();
    uint64_t v63 = a4;
    unsigned int v25 = v24;
    unint64_t v62 = HIDWORD(v24);
    uint64_t v65 = v23;
    unint64_t v26 = AGCreateWeakAttribute();
    unsigned int v27 = v26;
    unint64_t v60 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    unsigned int v29 = v28;
    unint64_t v59 = HIDWORD(v28);
    unint64_t v30 = AGCreateWeakAttribute();
    unsigned int v31 = v30;
    unint64_t v58 = HIDWORD(v30);
    unint64_t v32 = AGCreateWeakAttribute();
    unsigned int v33 = v32;
    unint64_t v57 = HIDWORD(v32);
    uint64_t v34 = (double *)AGGraphGetValue();
    double v35 = *v34;
    double v36 = v34[1];
    char v37 = (double *)AGGraphGetValue();
    CGFloat v38 = v35 - *v37;
    CGFloat v39 = v36 - v37[1];
    uint64_t v40 = AGGraphGetValue();
    double v41 = *(double *)v40;
    double v42 = *(double *)(v40 + 8);
    _threadGeometryProxyData();
    *(void *)&uint64_t v88 = v61;
    *((void *)&v88 + 1) = __PAIR64__(v62, v25);
    *(void *)&uint64_t v89 = __PAIR64__(v60, v27);
    *((void *)&v89 + 1) = __PAIR64__(v59, v29);
    *(void *)&uint64_t v90 = __PAIR64__(v58, v31);
    *((void *)&v90 + 1) = __PAIR64__(v57, v33);
    long long v9 = &v82;
    uint64_t v64 = v21;
    LODWORD(v91) = v21;
    long long v43 = _setThreadGeometryProxyData();
    v63(v101, v43, 0.0, 0.0, v41, v42, x);
    uint64_t v18 = v101[0];
    a4 = (void (*)(void *__return_ptr, void *, double, double, double, double, double))v101[1];
    uint64_t v5 = v101[2];
    uint64_t v6 = v101[3];
    uint64_t v7 = v102;
    _setThreadGeometryProxyData();
    uint64_t v44 = *v4;
    uint64_t v83 = 0u;
    uint64_t v84 = 0u;
    uint64_t v85 = 0u;
    uint64_t v86 = 0u;
    uint64_t v82 = v44;
    uint64_t v87 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v101, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v104.origin.double x = 0.0;
    v104.origin.CGFloat y = 0.0;
    v104.size.CGFloat width = v41;
    v104.size.CGFloat height = v42;
    unint64_t v105 = CGRectOffset(v104, v38, v39);
    double x = v105.origin.x;
    CGFloat y = v105.origin.y;
    CGFloat width = v105.size.width;
    CGFloat height = v105.size.height;
    LODWORD(v21) = *((_DWORD *)v4 + 2);
    __int16 v8 = *((_WORD *)v4 + 25);
    LOBYTE(v17) = *((unsigned char *)v4 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v45 = 0x10000;
  if (!v66) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = 256;
  if (!v67) {
    uint64_t v46 = 0;
  }
  *(void *)&uint64_t v71 = v18;
  *((void *)&v71 + 1) = a4;
  *(void *)&uint64_t v72 = v5;
  *((void *)&v72 + 1) = v6;
  *(void *)uint64_t v73 = v45 | v46 | v7;
  memset(&v73[8], 0, 60);
  *(_WORD *)&v73[68] = v8;
  *(double *)&v73[72] = x;
  *(CGFloat *)&uint64_t v74 = y;
  *((CGFloat *)&v74 + 1) = width;
  uint64_t v75 = *(unint64_t *)&height;
  LODWORD(v76) = 0;
  *((double *)&v76 + 1) = x;
  *(CGFloat *)&uint64_t v77 = y;
  *((CGFloat *)&v77 + 1) = width;
  *(CGFloat *)&uint64_t v78 = height;
  uint64_t v79 = xmmword_2461B9DE0;
  *((void *)&v78 + 1) = v64;
  *(void *)&uint64_t v80 = 0;
  BYTE10(v80) = 0;
  WORD4(v80) = 0;
  HIDWORD(v80) = v21;
  v81[0] = v17;
  *(_DWORD *)&v81[4] = v65;
  *(void *)&v81[8] = static GraphicsBlendMode.normal;
  v81[16] = byte_26B0EB4A0;
  *(_DWORD *)&v81[20] = 1065353216;
  v81[24] = 0;
  LOBYTE(v88) = 0;
  uint64_t v47 = *((unsigned int *)v4 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v88, v47, (uint64_t)&v82);
  LOBYTE(v88) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v71, (char *)&v88, (uint64_t)&v68);
  *(void *)&uint64_t v88 = v68;
  WORD4(v88) = v69;
  BYTE10(v88) = v70;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v101, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  long long v48 = v80;
  long long v49 = *(_OWORD *)v81;
  long long v50 = v78;
  *((_OWORD *)v9 + 17) = v79;
  *((_OWORD *)v9 + 18) = v48;
  *((_OWORD *)v9 + 19) = v49;
  uint64_t v100 = *(_OWORD *)&v81[9];
  uint64_t v96 = v75;
  uint64_t v97 = v76;
  Swift::String v98 = v77;
  uint64_t v99 = v50;
  uint64_t v92 = *(_OWORD *)&v73[32];
  uint64_t v93 = *(_OWORD *)&v73[48];
  uint64_t v94 = *(_OWORD *)&v73[64];
  Swift::Int v95 = v74;
  uint64_t v88 = v71;
  uint64_t v89 = v72;
  uint64_t v90 = *(_OWORD *)v73;
  uint64_t v91 = *(_OWORD *)&v73[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v88);
  long long v51 = v83;
  long long v52 = v84;
  long long v53 = v85;
  long long v55 = v86;
  unsigned int v54 = v87;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v55, *((uint64_t *)&v55 + 1), v54);
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(void (*a1)(void), void (*a2)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v2 + 24);
  a1(0);
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  char v6 = v5;
  unsigned int v7 = *Value;
  int v8 = Value[1];
  long long v9 = (uint64_t *)AGGraphGetValue();
  char v11 = v6 | v10;
  uint64_t v12 = *v9;
  long long v13 = (double *)AGGraphGetValue();
  double v14 = *v13;
  double v15 = v13[1];
  double v16 = v13[2];
  double v17 = v13[3];
  uint64_t v19 = v18 & 1;
  int v20 = (double *)AGGraphGetValue();
  double v21 = *v20;
  double v22 = v20[1];
  uint64_t v24 = v23 & 1;
  uint64_t v25 = AGGraphGetValue();
  uint64_t v26 = *(void *)(v25 + 32);
  long long v27 = *(_OWORD *)(v25 + 16);
  v34[0] = *(_OWORD *)v25;
  v34[1] = v27;
  uint64_t v35 = v26;
  uint64_t v29 = v28 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v34);
  if (v8) {
    int v30 = 256;
  }
  else {
    int v30 = 0;
  }
  a2(v30 | v7, v12, v11 & 1, v19, v24, v34, v29, v3, v14, v15, v16, v17, v21, v22);
  outlined release of ViewTransform((uint64_t)v34);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_2461BE2A0;
    *(void *)(v31 + 32) = v3;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, void (*a4)(void, uint64_t, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double, double))
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(v4 + 24);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  char v8 = v7;
  double v9 = *(double *)Value;
  unsigned int v10 = *(unsigned __int8 *)(Value + 8);
  int v11 = *(unsigned __int8 *)(Value + 9);
  uint64_t v12 = (uint64_t *)AGGraphGetValue();
  char v14 = v8 | v13;
  uint64_t v15 = *v12;
  double v16 = (double *)AGGraphGetValue();
  double v17 = *v16;
  double v18 = v16[1];
  double v19 = v16[2];
  double v20 = v16[3];
  uint64_t v22 = v21 & 1;
  char v23 = (double *)AGGraphGetValue();
  double v24 = *v23;
  double v25 = v23[1];
  uint64_t v27 = v26 & 1;
  uint64_t v28 = AGGraphGetValue();
  uint64_t v29 = *(void *)(v28 + 32);
  long long v30 = *(_OWORD *)(v28 + 16);
  v37[0] = *(_OWORD *)v28;
  v37[1] = v30;
  uint64_t v38 = v29;
  uint64_t v32 = v31 & 1;
  swift_bridgeObjectRetain();
  outlined retain of ViewTransform((uint64_t)v37);
  if (v11) {
    int v33 = 256;
  }
  else {
    int v33 = 0;
  }
  a4(v33 | v10, v15, v14 & 1, v22, v27, v37, v32, v5, v9, v17, v18, v19, v20, v24, v25);
  outlined release of ViewTransform((uint64_t)v37);
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_2461BE2A0;
    *(void *)(v34 + 32) = v5;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyledResponderFilter.updateValue()(void (*a1)(void), void (*a2)(uint64_t *, void, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, double, double, double, double, double, double))
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v2 + 24);
  a1(0);
  uint64_t Value = AGGraphGetValue();
  char v6 = v5;
  uint64_t v7 = *(void *)Value;
  long long v34 = *(_OWORD *)(Value + 8);
  uint64_t v8 = *(void *)(Value + 24);
  uint64_t v9 = *(void *)(Value + 32);
  char v10 = *(unsigned char *)(Value + 40);
  char v11 = *(unsigned char *)(Value + 41);
  uint64_t v12 = *(void *)AGGraphGetValue();
  char v14 = v6 | v13;
  uint64_t v36 = v7;
  long long v37 = v34;
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  char v40 = v10;
  char v41 = v11;
  uint64_t v42 = v12;
  uint64_t v15 = (double *)AGGraphGetValue();
  double v16 = *v15;
  double v17 = v15[1];
  double v18 = v15[2];
  double v19 = v15[3];
  uint64_t v21 = v20 & 1;
  uint64_t v22 = (double *)AGGraphGetValue();
  double v23 = *v22;
  double v24 = v22[1];
  uint64_t v26 = v25 & 1;
  uint64_t v27 = AGGraphGetValue();
  uint64_t v28 = *(void *)(v27 + 32);
  long long v29 = *(_OWORD *)(v27 + 16);
  v43[0] = *(_OWORD *)v27;
  v43[1] = v29;
  uint64_t v44 = v28;
  uint64_t v31 = v30 & 1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  outlined retain of ViewTransform((uint64_t)v43);
  a2(&v36, v14 & 1, v21, v26, v43, v31, v3, v16, v17, v18, v19, v23, v24);
  outlined release of ViewTransform((uint64_t)v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  if (AGGraphGetOutputValue())
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_2461BE2A0;
    *(void *)(v33 + 32) = v3;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
}

unint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3, double a4, uint64_t a5, unint64_t a6, char a7)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v65 = type metadata accessor for OSSignpostID();
  uint64_t v61 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  char v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  double v17 = (char *)&v55 - v16;
  double result = (unint64_t *)AGGraphGetValue();
  unint64_t v20 = *result;
  unint64_t v21 = result[1];
  if (a2) {
    goto LABEL_2;
  }
  if ((v19 & 1) == 0) {
    return result;
  }
  if ((a7 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
    goto LABEL_3;
  }
  swift_retain();
  uint64_t v23 = swift_retain_n();
  char v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v23);
  swift_release();
  if (v24)
  {
LABEL_3:
    PropertyList.Tracker.reset()();
    unint64_t v62 = v17;
    if (v20) {
      uint64_t v22 = *(void *)(v20 + 64);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v25 = *(void *)(a6 + 16);
    swift_retain_n();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v25 + 16));
    *(void *)(v25 + 24) = v22;
    os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 16));
    swift_release();
    swift_release();
    int v26 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_25;
    }
    int v57 = v26;
    unint64_t v58 = v21;
    uint64_t v59 = a1;
    unint64_t v60 = v20;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v28 = AGTypeID.description.getter();
    uint64_t v30 = v29;
    uint64_t v31 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v28;
    uint64_t v33 = inited + 32;
    *(void *)(inited + 64) = v32;
    *(void *)(inited + 40) = v30;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v31;
    *(void *)(inited + 104) = v32;
    *(void *)(inited + 80) = v34;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v35 = v61 + 16;
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v14, v62, v65);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v64 = v36;
    uint64_t v37 = swift_initStackObject();
    long long v63 = xmmword_2461BE2B0;
    *(_OWORD *)(v37 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v38 = v37;
      outlined init with copy of AnyTrackedValue(inited + 32, v37 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v55 = inited;
        unint64_t v56 = a6;
        uint64_t v33 = v57 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v38 + 72);
        *(_OWORD *)(v38 + 128) = 0u;
        *(void *)(v38 + 144) = 0;
        *(_OWORD *)(v38 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v33, v38, v33, (uint64_t)v14);
        outlined init with copy of CVarArg?(v38 + 112, (uint64_t)&v66, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v70)
        {
LABEL_24:
          outlined destroy of CVarArg?((uint64_t)&v66, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v47 = *(void (**)(char *, uint64_t))(v61 + 8);
          uint64_t v48 = v65;
          v47(v62, v65);
          v47(v14, v48);
          a6 = v56;
          a1 = v59;
          unint64_t v20 = v60;
LABEL_25:
          AGGraphClearUpdate();
          unint64_t v66 = v20;
          unint64_t v67 = a6;
          *(float *)&unsigned int v49 = (*(float (**)(unint64_t *))(*(void *)a1 + 104))(&v66);
          float v50 = a4;
          unint64_t v66 = __PAIR64__(v51, v49);
          float v52 = a3;
          unint64_t v67 = __PAIR64__(v54, v53);
          float v68 = v50;
          float v69 = v52;
          AGGraphSetUpdate();
          $defer #1 <A>() in traceRuleBody<A>(_:body:)();
          AGGraphSetOutputValue();
          swift_release();
          swift_release_n();
          return (unint64_t *)swift_release();
        }
        uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))(v35 + 8);
        outlined destroy of CVarArg?((uint64_t)&v66, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_19:
          uint64_t v39 = v65;
          uint64_t v40 = __swift_project_value_buffer(v65, (uint64_t)static OSSignpostID.continuation);
          char v41 = *v32;
          (*v32)(v14, v40, v39);
          uint64_t v42 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v43 = swift_initStackObject();
            *(_OWORD *)(v43 + 16) = v63;
            *(_OWORD *)(v43 + 32) = 0u;
            *(_OWORD *)(v43 + 48) = 0u;
            *(_OWORD *)(v43 + 64) = 0u;
            *(_OWORD *)(v43 + 80) = 0u;
            *(_OWORD *)(v43 + 96) = 0u;
            *(_OWORD *)(v43 + 128) = 0u;
            *(void *)(v43 + 144) = 0;
            *(_OWORD *)(v43 + 112) = 0u;
            uint64_t v44 = v43 + 112;
            specialized withKDebugValues(_:_:closure:)(v33, v43, v33, (uint64_t)v14);
            outlined init with copy of CVarArg?(v44, (uint64_t)&v66, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v42);
            swift_bridgeObjectRelease();
            if (!v70) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v66, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v42);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v45 = v65;
            uint64_t v46 = __swift_project_value_buffer(v65, (uint64_t)static OSSignpostID.continuation);
            v41(v14, v46, v45);
          }
          goto LABEL_24;
        }
LABEL_29:
        swift_once();
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_release();

  return (unint64_t *)swift_release();
}

uint64_t *specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v58 = type metadata accessor for OSSignpostID();
  uint64_t v54 = *(void *)(v58 - 8);
  MEMORY[0x270FA5388](v58);
  char v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - v12;
  double result = (uint64_t *)AGGraphGetValue();
  uint64_t v16 = *result;
  uint64_t v17 = result[1];
  if (a2) {
    goto LABEL_2;
  }
  if ((v15 & 1) == 0) {
    return result;
  }
  if ((a5 & 1) == 0)
  {
LABEL_2:
    swift_retain();
    swift_retain();
    goto LABEL_3;
  }
  swift_retain();
  uint64_t v19 = swift_retain_n();
  char v20 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v19);
  swift_release();
  if (v20)
  {
LABEL_3:
    PropertyList.Tracker.reset()();
    uint64_t v55 = v13;
    if (v16) {
      uint64_t v18 = *(void *)(v16 + 64);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v21 = *(void *)(a4 + 16);
    swift_retain_n();
    swift_retain();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v21 + 16));
    *(void *)(v21 + 24) = v18;
    os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 16));
    swift_release();
    swift_release();
    int v22 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_25;
    }
    int v50 = v22;
    uint64_t v51 = v17;
    uint64_t v52 = a1;
    uint64_t v53 = v16;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v24 = AGTypeID.description.getter();
    uint64_t v26 = v25;
    uint64_t v27 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v28 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v24;
    uint64_t v29 = inited + 32;
    *(void *)(inited + 64) = v28;
    *(void *)(inited + 40) = v26;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v27;
    *(void *)(inited + 104) = v28;
    *(void *)(inited + 80) = v30;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v31 = v54 + 16;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v10, v55, v58);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v57 = v32;
    uint64_t v33 = swift_initStackObject();
    long long v56 = xmmword_2461BE2B0;
    *(_OWORD *)(v33 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v34 = v33;
      outlined init with copy of AnyTrackedValue(inited + 32, v33 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v48 = inited;
        unint64_t v49 = a4;
        uint64_t v29 = v50 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v34 + 72);
        *(_OWORD *)(v34 + 128) = 0u;
        *(void *)(v34 + 144) = 0;
        *(_OWORD *)(v34 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v29, v34, v29, (uint64_t)v10);
        outlined init with copy of CVarArg?(v34 + 112, (uint64_t)&v59, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v61)
        {
LABEL_24:
          outlined destroy of CVarArg?((uint64_t)&v59, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v43 = *(void (**)(char *, uint64_t))(v54 + 8);
          uint64_t v44 = v58;
          v43(v55, v58);
          v43(v10, v44);
          a4 = v49;
          a1 = v52;
          uint64_t v16 = v53;
LABEL_25:
          AGGraphClearUpdate();
          uint64_t v59 = v16;
          unint64_t v60 = a4;
          LODWORD(v59) = (*(float (**)(uint64_t *))(*(void *)a1 + 104))(&v59);
          HIDWORD(v59) = v45;
          unint64_t v60 = __PAIR64__(v47, v46);
          AGGraphSetUpdate();
          $defer #1 <A>() in traceRuleBody<A>(_:body:)();
          AGGraphSetOutputValue();
          swift_release();
          swift_release_n();
          return (uint64_t *)swift_release();
        }
        uint64_t v28 = (void (**)(char *, uint64_t, uint64_t))(v31 + 8);
        outlined destroy of CVarArg?((uint64_t)&v59, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_19:
          uint64_t v35 = v58;
          uint64_t v36 = __swift_project_value_buffer(v58, (uint64_t)static OSSignpostID.continuation);
          uint64_t v37 = *v28;
          (*v28)(v10, v36, v35);
          uint64_t v38 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v39 = swift_initStackObject();
            *(_OWORD *)(v39 + 16) = v56;
            *(_OWORD *)(v39 + 32) = 0u;
            *(_OWORD *)(v39 + 48) = 0u;
            *(_OWORD *)(v39 + 64) = 0u;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 128) = 0u;
            *(void *)(v39 + 144) = 0;
            *(_OWORD *)(v39 + 112) = 0u;
            uint64_t v40 = v39 + 112;
            specialized withKDebugValues(_:_:closure:)(v29, v39, v29, (uint64_t)v10);
            outlined init with copy of CVarArg?(v40, (uint64_t)&v59, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v38);
            swift_bridgeObjectRelease();
            if (!v61) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v59, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v38);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v41 = v58;
            uint64_t v42 = __swift_project_value_buffer(v58, (uint64_t)static OSSignpostID.continuation);
            v37(v10, v42, v41);
          }
          goto LABEL_24;
        }
LABEL_29:
        swift_once();
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_release();

  return (uint64_t *)swift_release();
}

void *specialized SizeFittingTextCache.CacheEntry.result(for:)(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (void *)a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  v30[2] = *a2;
  v30[3] = (uint64_t)v4;
  v30[4] = v6;
  void v30[5] = (uint64_t)v7;
  uint64_t v24 = v9;
  uint64_t v25 = v8;
  v31[0] = v8;
  v31[1] = v9;
  void v31[2] = v10;
  type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  uint64_t v12 = (uint64_t *)(v2 + *(int *)(v11 + 52));
  uint64_t v13 = *v12;
  uint64_t v28 = v2;
  uint64_t v29 = v12[1];
  uint64_t v14 = v12[2];
  uint64_t v26 = v11;
  uint64_t v27 = v12[3];
  if (*v12)
  {
    uint64_t v23 = a1;
    char v15 = *(unsigned char *)(v2 + *(int *)(v11 + 56));
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (!specialized ResolvedTextHelper.shouldUpdate(for:inputChanged:)(v5, (uint64_t)v4, v6, (uint64_t)v7, v31, v15))
    {
      uint64_t v19 = 0;
      uint64_t v10 = v27;
      uint64_t v18 = (void *)v13;
      char v20 = (void *)v29;
      uint64_t v21 = v14;
      a1 = v23;
      uint64_t v22 = v13;
      goto LABEL_7;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    a1 = v23;
  }
  v30[0] = v25;
  v30[1] = v24;
  double result = ResolvedTextHelper.resolve(_:with:sizeFitting:)(v5, v4, v6, v7, v30, 1);
  if (result)
  {
    uint64_t v17 = v5;
    uint64_t v18 = result;
    swift_retain();
    outlined copy of Text?(v17, (uint64_t)v4, v6, (uint64_t)v7);
    swift_retain();
    outlined consume of Text?(v17, (uint64_t)v4, v6, (uint64_t)v7);
    outlined copy of Text?(v17, (uint64_t)v4, v6, (uint64_t)v7);
    swift_retain();
    outlined consume of Text?(v17, (uint64_t)v4, v6, (uint64_t)v7);
    uint64_t v19 = 1;
    char v20 = v18;
    uint64_t v21 = v10;
    uint64_t v22 = v13;
LABEL_7:
    outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(v22);
    *uint64_t v12 = (uint64_t)v18;
    v12[1] = (uint64_t)v20;
    _OWORD v12[2] = v21;
    _OWORD v12[3] = v10;
    *(unsigned char *)(v28 + *(int *)(v26 + 56)) = 0;
    *a1 = v18;
    a1[1] = v20;
    a1[2] = v21;
    a1[3] = v10;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return (void *)v19;
  }
  __break(1u);
  return result;
}

uint64_t specialized SizeFittingTextCache.suggestedVariant(for:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(v5 + 89)) {
    goto LABEL_9;
  }
  uint64_t v7 = v5;
  uint64_t v11 = result;
  char v12 = *(unsigned char *)(v5 + 88);
  uint64_t v13 = *(void *)(v5 + 80);
  char v14 = *(_DWORD *)(v5 + 72);
  uint64_t v16 = *(void *)(v5 + 56);
  uint64_t v15 = *(void *)(v5 + 64);
  char v17 = *(unsigned char *)(v5 + 49);
  char v18 = *(unsigned char *)(v5 + 48);
  uint64_t v43 = result;
  char v44 = a2 & 1;
  uint64_t v45 = a3;
  char v19 = a4 & 1;
  char v46 = a4 & 1;
  uint64_t v39 = v15;
  char v40 = v14 & 1;
  uint64_t v41 = v13;
  char v42 = v12 & 1;
  double result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v18, v17);
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  int v36 = a4;
  char v38 = 0;
  uint64_t v20 = swift_allocObject();
  uint64_t v37 = &v35;
  *(void *)(v20 + 16) = &v38;
  MEMORY[0x270FA5388](v20);
  uint64_t v31 = v11;
  char v32 = a2 & 1;
  uint64_t v33 = a3;
  char v34 = v19;
  char v21 = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v16, (void (*)(void))partial apply for specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:), v20, (void (*)(uint64_t *__return_ptr, long long *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v30);
  swift_release();
  double result = swift_beginAccess();
  if (v38 == 1)
  {
    if ((*(unsigned char *)(v7 + 89) & 1) == 0)
    {
      char v22 = *(unsigned char *)(v7 + 88);
      uint64_t v23 = *(void *)(v7 + 80);
      char v24 = *(_DWORD *)(v7 + 72);
      uint64_t v26 = *(void *)(v7 + 56);
      uint64_t v25 = *(void *)(v7 + 64);
      char v27 = *(unsigned char *)(v7 + 49);
      char v28 = *(unsigned char *)(v7 + 48);
      uint64_t v43 = v11;
      char v44 = a2 & 1;
      uint64_t v45 = a3;
      char v46 = v36 & 1;
      uint64_t v39 = v25;
      char v40 = v24 & 1;
      uint64_t v41 = v23;
      char v42 = v22 & 1;
      double result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v28, v27);
      if (result)
      {
        if (v26 == v16
          || (MEMORY[0x270FA5388](result),
              uint64_t v31 = v11,
              char v32 = a2 & 1,
              uint64_t v33 = a3,
              char v34 = v36 & 1,
              double result = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v26, (void (*)(void))_ViewInputs.base.modify, 0, (void (*)(uint64_t *__return_ptr, long long *))partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v30), (result & 1) != 0))
        {
          char v29 = 0;
          goto LABEL_10;
        }
      }
    }
LABEL_9:
    uint64_t v26 = 0;
    char v29 = 1;
    goto LABEL_10;
  }
  if (v21) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = 0;
  }
  char v29 = v21 ^ 1;
LABEL_10:
  *(void *)a5 = v26;
  *(unsigned char *)(a5 + 8) = v29 & 1;
  return result;
}

{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  unsigned char v30[16];
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;

  if (*(unsigned char *)(v5 + 89)) {
    goto LABEL_9;
  }
  uint64_t v7 = v5;
  uint64_t v11 = result;
  char v12 = *(unsigned char *)(v5 + 88);
  uint64_t v13 = *(void *)(v5 + 80);
  char v14 = *(_DWORD *)(v5 + 72);
  uint64_t v16 = *(void *)(v5 + 56);
  uint64_t v15 = *(void *)(v5 + 64);
  char v17 = *(unsigned char *)(v5 + 49);
  char v18 = *(unsigned char *)(v5 + 48);
  uint64_t v43 = result;
  char v44 = a2 & 1;
  uint64_t v45 = a3;
  char v19 = a4 & 1;
  char v46 = a4 & 1;
  uint64_t v39 = v15;
  char v40 = v14 & 1;
  uint64_t v41 = v13;
  char v42 = v12 & 1;
  double result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v18, v17);
  if ((result & 1) == 0) {
    goto LABEL_9;
  }
  int v36 = a4;
  char v38 = 0;
  uint64_t v20 = swift_allocObject();
  uint64_t v37 = &v35;
  *(void *)(v20 + 16) = &v38;
  MEMORY[0x270FA5388](v20);
  uint64_t v31 = v11;
  char v32 = a2 & 1;
  uint64_t v33 = a3;
  char v34 = v19;
  char v21 = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v16, (void (*)(uint64_t))closure #1 in SizeFittingTextCache.suggestedVariant(for:)specialized partial apply, v20, (char *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v30);
  swift_release();
  double result = swift_beginAccess();
  if (v38 == 1)
  {
    if ((*(unsigned char *)(v7 + 89) & 1) == 0)
    {
      char v22 = *(unsigned char *)(v7 + 88);
      uint64_t v23 = *(void *)(v7 + 80);
      char v24 = *(_DWORD *)(v7 + 72);
      uint64_t v26 = *(void *)(v7 + 56);
      uint64_t v25 = *(void *)(v7 + 64);
      char v27 = *(unsigned char *)(v7 + 49);
      char v28 = *(unsigned char *)(v7 + 48);
      uint64_t v43 = v11;
      char v44 = a2 & 1;
      uint64_t v45 = a3;
      char v46 = v36 & 1;
      uint64_t v39 = v25;
      char v40 = v24 & 1;
      uint64_t v41 = v23;
      char v42 = v22 & 1;
      double result = _ProposedSize.fits(into:ignoreHorizontalAxis:ignoreVerticalAxis:)((uint64_t)&v39, v28, v27);
      if (result)
      {
        if (v26 == v16
          || (MEMORY[0x270FA5388](result),
              uint64_t v31 = v11,
              char v32 = a2 & 1,
              uint64_t v33 = a3,
              char v34 = v36 & 1,
              double result = specialized SizeFittingTextCache.withValue<A>(for:onChange:compute:)(v26, (void (*)(uint64_t))_ViewInputs.base.modify, 0, (char *)partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:), (uint64_t)v30), (result & 1) != 0))
        {
          char v29 = 0;
          goto LABEL_10;
        }
      }
    }
LABEL_9:
    uint64_t v26 = 0;
    char v29 = 1;
    goto LABEL_10;
  }
  if (v21) {
    uint64_t v26 = v16;
  }
  else {
    uint64_t v26 = 0;
  }
  char v29 = v21 ^ 1;
LABEL_10:
  *(void *)a5 = v26;
  *(unsigned char *)(a5 + 8) = v29 & 1;
  return result;
}

uint64_t specialized SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(uint64_t a1, void *a2)
{
  LOBYTE(v37[0]) = 1;
  char v36 = 1;
  specialized SizeFittingTextCache.suggestedVariant(for:)(0, 1, 0, 1, (uint64_t)&v32);
  if (v33)
  {
    swift_beginAccess();
    swift_retain();
    LOBYTE(v37[0]) = 1;
    char v36 = 1;
    specialized ClosestFitCache.callAsFunction(for:makeValue:)(0, 1, 0.0, 1, a2 + 2, (uint64_t)a2, 0, 1, (uint64_t *)v37, 0, 1u);
    swift_endAccess();
    unint64_t v3 = v37[0];
  }
  else
  {
    unint64_t v3 = v32;
    v37[0] = v32;
  }
  swift_beginAccess();
  uint64_t v5 = a2[12];
  uint64_t v4 = a2[13];
  uint64_t v6 = a2[14];
  uint64_t v7 = a2[15];
  uint64_t v8 = a2[16];
  uint64_t v9 = a2[17];
  uint64_t v10 = a2[18];
  swift_beginAccess();
  unint64_t v11 = a2[5];
  uint64_t v30 = v5;
  outlined copy of Text?(v5, v4, v6, v7);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  a2[5] = v11;
  if (result)
  {
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  unint64_t v11 = result;
  a2[5] = result;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if (v3 >= *(void *)(v11 + 16))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(0, (unint64_t *)&lazy cache variable for type metadata for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextCache.CacheEntry);
  uint64_t v14 = v13;
  unint64_t v15 = v11
      + ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80));
  uint64_t v16 = *(void *)(*(void *)(v13 - 8) + 72);
  v31[0] = v30;
  v31[1] = v4;
  void v31[2] = v6;
  uint64_t v31[3] = v7;
  unint64_t v17 = v15 + v16 * v3;
  v31[4] = v8;
  v31[5] = v9;
  v31[6] = v10;
  specialized SizeFittingTextCache.CacheEntry.result(for:)(&v32, v31);
  unint64_t v18 = v33;
  char v19 = *(void **)(v33 + 216);
  if (v19)
  {
    id v20 = objc_msgSend(v19, sel_string);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v22 = v21;
  }
  else
  {
    uint64_t v29 = 0;
    char v22 = (void *)0xE000000000000000;
  }
  unint64_t v23 = v32;
  uint64_t v24 = v34;
  uint64_t v25 = v35;
  uint64_t v26 = (uint64_t *)(v17 + *(int *)(v14 + 52));
  outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(*v26);
  *uint64_t v26 = v23;
  v26[1] = v18;
  _OWORD v26[2] = v24;
  void v26[3] = v25;
  outlined consume of Text?(v30, v4, v6, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_endAccess();
  unint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  unint64_t v32 = 0xD00000000000001ELL;
  unint64_t v33 = 0x800000024621BDD0;
  v27._uint64_t countAndFlagsBits = v29;
  v27._unint64_t object = v22;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 41;
  v28._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return v32;
}

uint64_t specialized ChildEnvironment.updateValue()()
{
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  uint64_t v4 = *(void *)Value;
  char v5 = *(unsigned char *)(Value + 8);
  AGGraphGetValue();
  if (v6) {
    goto LABEL_8;
  }
  if (v3)
  {
    if (*(void *)(v0 + 8))
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      char v7 = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
      swift_release();
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
LABEL_8:
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_6:
  if (AGGraphGetOutputValue())
  {
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_9:
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v0 + 8) = v4;
  *(unsigned char *)(v0 + 16) = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t *Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t result;

  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<RedactionReasons>, (uint64_t)&type metadata for RedactionReasons, (uint64_t (*)(void, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v3 = v2;
  uint64_t v4 = *Value;
  char v5 = Value[1];
  AGGraphGetValue();
  if (v6) {
    goto LABEL_8;
  }
  if (v3)
  {
    if (*(void *)(v0 + 8))
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      char v7 = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
      swift_release();
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
LABEL_8:
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_6:
  if (AGGraphGetOutputValue())
  {
    swift_release();
    swift_release();
    return swift_release();
  }
LABEL_9:
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v0 + 8) = v4;
  *(void *)(v0 + 16) = v5;
  return result;
}

{
  uint64_t v0;
  uint64_t *Value;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;
  void v13[5];
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  id v20 = *MEMORY[0x263EF8340];
  type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v3 = v2;
  char v5 = *Value;
  uint64_t v4 = Value[1];
  char v6 = (uint64_t *)AGGraphGetValue();
  char v7 = v6[1];
  unint64_t v17 = *v6;
  unint64_t v18 = v7;
  char v19 = v8 & 1;
  if (v8)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    if (v3)
    {
      uint64_t v9 = *(void *)(v0 + 8);
      uint64_t v10 = *(void *)(v0 + 16);
      uint64_t v14 = v5;
      unint64_t v15 = v4;
      uint64_t v16 = 1;
      MEMORY[0x270FA5388](v6);
      _OWORD v13[2] = &v14;
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      swift_retain();
      outlined copy of _EnvironmentKeyWritingModifier<Font?>?(v9);
      unint64_t v11 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_EnvironmentKeyWritingModifierVyAD4FontVSgG_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, void *))partial apply for specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue(), (uint64_t)v13, v9, v10);
      outlined consume of _EnvironmentKeyWritingModifier<Font?>?(v9);
      swift_release();
      swift_release_n();
      swift_release();
      swift_release();
      if (v11 == 2 || (v11 & 1) != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
LABEL_9:
  uint64_t v14 = v4;
  swift_retain();
  swift_retain();
  swift_setAtWritableKeyPath();
  swift_release();
  uint64_t v14 = v17;
  unint64_t v15 = v18;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of _EnvironmentKeyWritingModifier<Font?>?(*(void *)(v0 + 8));
  *(void *)(v0 + 8) = v5;
  *(void *)(v0 + 16) = v4;
  return result;
}

uint64_t specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return AGCompareValues() ^ 1;
  }
  else {
    return 1;
  }
}

{
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Bool>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F8D4F8], MEMORY[0x263F8DE48]);
  if (dispatch thunk of static Equatable.== infix(_:_:)()) {
    return AGCompareValues() ^ 1;
  }
  else {
    return 1;
  }
}

{
  type metadata accessor for WritableKeyPath<EnvironmentValues, Font?>();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 1;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
  return AGCompareValues() ^ 1;
}

BOOL specialized ResettableGestureRule.resetIfNeeded()()
{
  int v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    Outputuint64_t Value = AGGraphGetOutputValue();
    BOOL v4 = 1;
    if (OutputValue)
    {
      int v3 = *(unsigned __int8 *)(OutputValue + 24);
      if (v3 == 2
        || v3 == 3 && !(*(void *)(OutputValue + 8) | *(void *)(OutputValue + 16) | *(void *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 36) = 0;
    *(void *)(v0 + 24) = 0;
    BOOL v4 = 1;
    *(unsigned char *)(v0 + 32) = 1;
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v4;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  BOOL v5;

  int v1 = *(_DWORD *)(v0 + 48);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v5 = 1;
    if (OutputValue)
    {
      int v3 = *(unsigned __int8 *)(OutputValue + 9);
      if (v3 == 2) {
        return 0;
      }
      if (v3 == 3 && !*(unsigned char *)(OutputValue + 8) && *(void *)OutputValue == 0) {
        return 0;
      }
    }
  }
  else
  {
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
    char v5 = 1;
    *(unsigned char *)(v0 + 32) = 1;
    *(void *)(v0 + 40) = 0;
    *(_DWORD *)(v0 + 48) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  int8x16_t v4;
  BOOL v5;

  int v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v5 = 1;
    if (OutputValue)
    {
      int v3 = *(unsigned __int8 *)(OutputValue + 72);
      if (v3 == 2) {
        return 0;
      }
      if (v3 == 3)
      {
        BOOL v4 = vorrq_s8(vorrq_s8(*(int8x16_t *)(OutputValue + 8), *(int8x16_t *)(OutputValue + 40)), vorrq_s8(*(int8x16_t *)(OutputValue + 24), *(int8x16_t *)(OutputValue + 56)));
        if (!(*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(void *)OutputValue)) {
          return 0;
        }
      }
    }
  }
  else
  {
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    char v5 = 1;
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    AGGraphSetOutputValue();
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  BOOL v5;

  int v1 = *(_DWORD *)(v0 + 36);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v5 = 1;
    if (OutputValue)
    {
      int v3 = *(unsigned __int8 *)(OutputValue + 9);
      if (v3 == 2) {
        return 0;
      }
      if (v3 == 3 && !*(unsigned char *)(OutputValue + 8) && *(void *)OutputValue == 0) {
        return 0;
      }
    }
  }
  else
  {
    *(void *)(v0 + 24) = 0;
    char v5 = 1;
    *(unsigned char *)(v0 + 32) = 1;
    *(_DWORD *)(v0 + 36) = *(_DWORD *)AGGraphGetValue();
  }
  return v5;
}

{
  uint64_t v0;
  int v1;
  uint64_t OutputValue;
  int v3;
  BOOL v4;

  int v1 = *(_DWORD *)(v0 + 40);
  if (v1 == *(_DWORD *)AGGraphGetValue())
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    Outputuint64_t Value = AGGraphGetOutputValue();
    BOOL v4 = 1;
    if (OutputValue)
    {
      int v3 = *(unsigned __int8 *)(OutputValue + 24);
      if (v3 == 2
        || v3 == 3 && !(*(void *)(OutputValue + 8) | *(void *)(OutputValue + 16) | *(void *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(void *)(v0 + 24) = 0;
    *(void *)(v0 + 32) = 0;
    BOOL v4 = 1;
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    AGGraphSetOutputValue();
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue();
  }
  return v4;
}

uint64_t specialized ResettableGestureRule.resetIfNeeded()()
{
  int v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(_DWORD *)AGGraphGetValue();
  if (v1 == v2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    Outputuint64_t Value = AGGraphGetOutputValue();
    if (OutputValue)
    {
      int v4 = *(unsigned __int8 *)(OutputValue + 24);
      if (v4 == 2
        || v4 == 3 && !(*(void *)(OutputValue + 8) | *(void *)(OutputValue + 16) | *(void *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 16) = v2;
  }
  return 1;
}

{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t OutputValue;
  int v4;

  int v1 = *(_DWORD *)(v0 + 12);
  int v2 = *(_DWORD *)AGGraphGetValue();
  if (v1 == v2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    Outputuint64_t Value = AGGraphGetOutputValue();
    if (OutputValue)
    {
      int v4 = *(unsigned __int8 *)(OutputValue + 24);
      if (v4 == 2
        || v4 == 3 && !(*(void *)(OutputValue + 8) | *(void *)(OutputValue + 16) | *(void *)OutputValue))
      {
        return 0;
      }
    }
  }
  else
  {
    *(_DWORD *)(v0 + 12) = v2;
  }
  return 1;
}

uint64_t specialized EventListenerPhase.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v105 = 0;
  memset(v104, 0, sizeof(v104));
  type metadata accessor for [EventID : EventType]();
  uint64_t v3 = *(void *)AGGraphGetValue();
  uint64_t v73 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  int64_t v74 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v76 = v3;
  swift_bridgeObjectRetain();
  int64_t v79 = 0;
  char v7 = &lazy cache variable for type metadata for SpatialEventType;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  while (2)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v79 << 6);
LABEL_8:
    uint64_t v10 = *(void *)(v76 + 56);
    unint64_t v11 = (uint64_t *)(*(void *)(v76 + 48) + 16 * v9);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    *(void *)&long long v100 = v13;
    *((void *)&v100 + 1) = v12;
    outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v101);
    while (1)
    {
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v100, (uint64_t)&v87);
      uint64_t v17 = v87;
      if (!(void)v87)
      {
        swift_release();
        outlined init with copy of CVarArg?((uint64_t)v104, (uint64_t)&v87, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        if (!*((void *)&v88 + 1))
        {
          outlined destroy of CVarArg?((uint64_t)&v87, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
          type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
          if (!AGGraphGetOutputValue())
          {
            outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
            uint64_t v64 = 0;
            uint64_t v57 = 0;
            uint64_t v65 = 0;
            uint64_t v66 = 0;
            uint64_t v60 = 0;
            uint64_t v61 = 0;
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            unsigned __int8 v67 = 0;
            char v71 = 5;
            uint64_t v59 = 1;
            goto LABEL_73;
          }
          return outlined destroy of CVarArg?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        }
        outlined init with take of ScrollStateRequest(&v87, (uint64_t)v97);
        if ((*(unsigned char *)(v1 + 20) & 1) == 0)
        {
          AGGraphClearUpdate();
          uint64_t Value = AGGraphGetValue();
          uint64_t v41 = *(void *)Value;
          double v42 = *(double *)(Value + 8);
          double v43 = *(double *)(Value + 16);
          double v44 = *(double *)(Value + 24);
          double v45 = *(double *)(Value + 32);
          uint64_t v46 = AGGraphGetValue();
          double v47 = *(double *)v46;
          double v48 = *(double *)(v46 + 8);
          double v49 = v44 - (*(double *)v46 - v42);
          swift_retain();
          uint64_t result = AGGraphSetUpdate();
          *(void *)&long long v100 = v41;
          *((double *)&v100 + 1) = v47;
          *(double *)&long long v101 = v48;
          *((double *)&v101 + 1) = v49;
          *(double *)&long long v102 = v45 - (v48 - v43);
          Swift::UInt v50 = *(void *)(v1 + 24);
          if (!v50)
          {
            __break(1u);
            return result;
          }
          Swift::UInt v51 = *(void *)(v1 + 32);
          type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), MEMORY[0x263F8E0F8]);
          uint64_t v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_2461B9DC0;
          *(void *)(v52 + 32) = v50;
          *(void *)(v52 + 40) = v51;
          outlined init with copy of AnyTrackedValue((uint64_t)v97, v52 + 48);
          unint64_t v53 = specialized Dictionary.init(dictionaryLiteral:)(v52);
          swift_setDeallocating();
          type metadata accessor for (EventID, EventType)();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v86[0] = v53;
          swift_retain();
          specialized defaultConvertEventLocations<A>(_:converter:)(v86, (uint64_t)&v100);
          swift_release();
          uint64_t v54 = v86[0];
          if (!*(void *)(v86[0] + 16)) {
            goto LABEL_77;
          }
          unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v51);
          if ((v56 & 1) == 0)
          {
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
          }
          outlined init with copy of AnyTrackedValue(*(void *)(v54 + 56) + 40 * v55, (uint64_t)&v87);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          outlined init with take of ScrollStateRequest(&v87, (uint64_t)v97);
          swift_bridgeObjectRelease();
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v97, (uint64_t)v86);
        SpatialEvent.init(_:)((uint64_t)v86, (uint64_t)&v87);
        uint64_t v57 = *((void *)&v87 + 1);
        uint64_t v58 = v87;
        uint64_t v59 = v88;
        uint64_t v60 = v90;
        uint64_t v61 = v91;
        uint64_t v62 = v92;
        uint64_t v63 = v93;
        if ((void)v88 != 1)
        {
          uint64_t v77 = v87;
          unsigned __int8 v78 = BYTE8(v88);
          uint64_t v80 = v89;
          uint64_t v68 = v98;
          uint64_t v69 = v99;
          __swift_project_boxed_opaque_existential_1(v97, v98);
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v69 + 8))(&v87, v68, v69);
          outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
          if (v87 >= 2u)
          {
            unsigned __int8 v70 = v77;
            if (v87 == 2)
            {
              char v75 = 5;
              unsigned __int8 v67 = 2;
            }
            else
            {
              outlined consume of HitTestableEvent?(v77, v57, v59);
              unsigned __int8 v70 = 0;
              uint64_t v57 = 0;
              uint64_t v59 = 0;
              unsigned __int8 v78 = 0;
              uint64_t v80 = 0;
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              uint64_t v62 = 0;
              uint64_t v63 = 0;
              char v75 = 4;
              unsigned __int8 v67 = 3;
            }
          }
          else
          {
            char v75 = 5;
            unsigned __int8 v67 = 1;
            unsigned __int8 v70 = v77;
          }
          uint64_t v65 = v78;
          uint64_t v64 = v70;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
          uint64_t v66 = v80;
          char v71 = v75;
          goto LABEL_73;
        }
        outlined consume of GesturePhase<SpatialEvent>?(0, 0, 0, 0, 0, 0, 0, 0, 0, 0xFFu);
        outlined destroy of CVarArg?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        outlined consume of HitTestableEvent?(v58, v57, 1);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      }
      unint64_t v18 = v7;
      uint64_t v19 = *((void *)&v87 + 1);
      outlined init with take of ScrollStateRequest(&v88, (uint64_t)&v100);
      uint64_t v21 = *((void *)&v101 + 1);
      uint64_t v20 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v97, v21, v20);
      uint64_t v22 = v97[0];
      swift_release();
      if (v22) {
        break;
      }
      uint64_t v39 = *(void *)(v1 + 24);
      if (v39 && *(void *)(v1 + 32) == v19 && v17 == v39)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        char v71 = 0;
        goto LABEL_71;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v14 = v79 + 1;
      if (__OFADD__(v79, 1))
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if (v14 >= v74) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v73 + 8 * v14);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v79 + 2;
      ++v79;
      if (v14 + 1 >= v74) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v73 + 8 * v16);
      if (v15) {
        goto LABEL_15;
      }
      int64_t v79 = v14 + 1;
      if (v14 + 2 >= v74) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v73 + 8 * (v14 + 2));
      if (v15)
      {
        v14 += 2;
LABEL_12:
        unint64_t v6 = (v15 - 1) & v15;
        unint64_t v9 = __clz(__rbit64(v15)) + (v14 << 6);
        int64_t v79 = v14;
        goto LABEL_8;
      }
      int64_t v16 = v14 + 3;
      int64_t v79 = v14 + 2;
      if (v14 + 3 < v74)
      {
        unint64_t v15 = *(void *)(v73 + 8 * v16);
        if (v15)
        {
LABEL_15:
          int64_t v14 = v16;
          goto LABEL_12;
        }
        while (1)
        {
          int64_t v14 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_79;
          }
          if (v14 >= v74) {
            break;
          }
          unint64_t v15 = *(void *)(v73 + 8 * v14);
          ++v16;
          if (v15) {
            goto LABEL_12;
          }
        }
        int64_t v79 = v74 - 1;
      }
LABEL_26:
      unint64_t v6 = 0;
      uint64_t v103 = 0;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v100 = 0u;
    }
    if ((*(unsigned char *)(v1 + 21) & 1) == 0)
    {
      uint64_t v23 = *(void *)(v1 + 24);
      if (!v23 || *(void *)(v1 + 32) != v19 || v17 != v23)
      {
        uint64_t v24 = *((void *)&v101 + 1);
        uint64_t v25 = v102;
        __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v97, v24, v25);
        if (LOBYTE(v97[0]))
        {
          if (!v23
            || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
          {
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
            char v71 = 1;
            goto LABEL_71;
          }
        }
      }
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v100, (uint64_t)v97);
    outlined init with copy of AnyTrackedValue((uint64_t)v97, (uint64_t)v83);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    char v7 = v18;
    type metadata accessor for ScrollStateRequest(0, v18);
    if (!swift_dynamicCast())
    {
      uint64_t v82 = 0;
      memset(v81, 0, sizeof(v81));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
      outlined destroy of CVarArg?((uint64_t)v81, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType?, v18, (uint64_t)&protocol descriptor for SpatialEventType);
      if (!*(void *)(v1 + 24)
        || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
        char v71 = 3;
        goto LABEL_71;
      }
      goto LABEL_51;
    }
    outlined init with take of ScrollStateRequest(v81, (uint64_t)v86);
    outlined init with copy of AnyTrackedValue((uint64_t)v86, (uint64_t)v83);
    uint64_t v27 = v84;
    uint64_t v26 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v26 + 8) + 8))(v81, v27);
    uint64_t v29 = v84;
    uint64_t v28 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v28 + 8) + 16))(v81, v29);
    uint64_t v30 = v84;
    uint64_t v31 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    uint64_t v32 = v84;
    uint64_t v33 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v33 + 40))(v32, v33);
    uint64_t v34 = v84;
    uint64_t v35 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
    uint64_t v36 = v84;
    uint64_t v37 = v85;
    __swift_project_boxed_opaque_existential_1(v83, v84);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v37 + 72))(v81, v36, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v86);
    uint64_t v38 = *(void *)(v1 + 24);
    if (!v38)
    {
      outlined destroy of CVarArg?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
      *(void *)(v1 + 24) = v17;
      *(void *)(v1 + 32) = v19;
      goto LABEL_50;
    }
    if (*(void *)(v1 + 32) == v19 && v17 == v38
      || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), *(unsigned char *)AGGraphGetValue() == 1))
    {
      outlined destroy of CVarArg?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
LABEL_50:
      outlined init with copy of AnyTrackedValue((uint64_t)&v100, (uint64_t)v104);
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
      if (v6) {
        continue;
      }
      goto LABEL_9;
    }
    break;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
  char v71 = 2;
LABEL_71:
  uint64_t v64 = 0;
  uint64_t v57 = 0;
  uint64_t v59 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  unsigned __int8 v67 = 3;
LABEL_73:
  *(void *)&long long v87 = v64;
  *((void *)&v87 + 1) = v57;
  *(void *)&long long v88 = v59;
  *((void *)&v88 + 1) = v65;
  uint64_t v89 = v66;
  uint64_t v90 = v60;
  uint64_t v91 = v61;
  uint64_t v92 = v62;
  uint64_t v93 = v63;
  unsigned __int8 v94 = v67;
  long long v95 = *(_OWORD *)(v1 + 24);
  char v96 = v71;
  uint64_t v72 = v66;
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  AGGraphSetOutputValue();
  outlined consume of GesturePhase<SpatialEvent>?(v64, v57, v59, v65, v72, v60, v61, v62, v63, v67);
  return outlined destroy of CVarArg?((uint64_t)v104, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Value;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  Swift::UInt v42;
  Swift::UInt v43;
  uint64_t inited;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  long long v60[2];
  uint64_t v61;
  void v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  uint64_t v66;
  long long v67[2];
  long long v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  long long v74;
  long long v75;
  char v76;
  _OWORD v77[2];
  uint64_t v78;
  uint64_t v79;

  uint64_t v1 = v0;
  int64_t v79 = *MEMORY[0x263EF8340];
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  unsigned __int8 v78 = 0;
  memset(v77, 0, sizeof(v77));
  type metadata accessor for [EventID : EventType]();
  uint64_t v3 = *(void *)AGGraphGetValue();
  char v56 = v3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v3 + 64);
  uint64_t v57 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v58 = v3;
  swift_bridgeObjectRetain();
  uint64_t v59 = 0;
  char v7 = &lazy cache variable for type metadata for TappableEventType;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_7:
  while (2)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v59 << 6);
LABEL_8:
    uint64_t v10 = *(void *)(v58 + 56);
    unint64_t v11 = (uint64_t *)(*(void *)(v58 + 48) + 16 * v9);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    *(void *)&uint64_t v68 = v13;
    *((void *)&v68 + 1) = v12;
    outlined init with copy of AnyTrackedValue(v10 + 40 * v9, (uint64_t)&v69);
    while (1)
    {
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v68, (uint64_t)&v72);
      uint64_t v17 = v72;
      if (!v72)
      {
        swift_release();
        outlined init with copy of CVarArg?((uint64_t)v77, (uint64_t)&v68, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        if (!*((void *)&v69 + 1))
        {
          outlined destroy of CVarArg?((uint64_t)&v68, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
          type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
          if (!AGGraphGetOutputValue())
          {
            outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
            Swift::UInt v50 = 0;
            double v49 = 0;
            uint64_t v52 = 0;
            unint64_t v55 = 5;
            Swift::UInt v51 = 1;
            goto LABEL_73;
          }
          return outlined destroy of CVarArg?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        }
        outlined init with take of ScrollStateRequest(&v68, (uint64_t)&v72);
        if ((*(unsigned char *)(v1 + 20) & 1) == 0)
        {
          AGGraphClearUpdate();
          uint64_t Value = AGGraphGetValue();
          uint64_t v33 = *(void *)Value;
          uint64_t v34 = *(double *)(Value + 8);
          uint64_t v35 = *(double *)(Value + 16);
          uint64_t v36 = *(double *)(Value + 24);
          uint64_t v37 = *(double *)(Value + 32);
          uint64_t v38 = AGGraphGetValue();
          uint64_t v39 = *(double *)v38;
          char v40 = *(double *)(v38 + 8);
          uint64_t v41 = v36 - (*(double *)v38 - v34);
          swift_retain();
          uint64_t result = AGGraphSetUpdate();
          *(void *)&uint64_t v68 = v33;
          *((double *)&v68 + 1) = v39;
          *(double *)&uint64_t v69 = v40;
          *((double *)&v69 + 1) = v41;
          *(double *)&unsigned __int8 v70 = v37 - (v40 - v35);
          double v42 = *(void *)(v1 + 24);
          if (!v42)
          {
            __break(1u);
            return result;
          }
          double v43 = *(void *)(v1 + 32);
          type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), MEMORY[0x263F8E0F8]);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
          *(void *)(inited + 32) = v42;
          *(void *)(inited + 40) = v43;
          outlined init with copy of AnyTrackedValue((uint64_t)&v72, inited + 48);
          double v45 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          swift_setDeallocating();
          type metadata accessor for (EventID, EventType)();
          swift_arrayDestroy();
          v65[0] = v45;
          swift_retain();
          specialized defaultConvertEventLocations<A>(_:converter:)(v65, (uint64_t)&v68);
          swift_release();
          uint64_t v46 = v65[0];
          if (!*(void *)(v65[0] + 16)) {
            goto LABEL_77;
          }
          double v47 = specialized __RawDictionaryStorage.find<A>(_:)(v42, v43);
          if ((v48 & 1) == 0)
          {
LABEL_78:
            __break(1u);
LABEL_79:
            __break(1u);
          }
          outlined init with copy of AnyTrackedValue(*(void *)(v46 + 56) + 40 * v47, (uint64_t)v67);
          swift_release();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
          outlined init with take of ScrollStateRequest(v67, (uint64_t)&v72);
          swift_bridgeObjectRelease();
        }
        outlined init with copy of AnyTrackedValue((uint64_t)&v72, (uint64_t)v67);
        TappableEvent.init(_:)((uint64_t)v67, (uint64_t)v65);
        Swift::UInt v50 = v65[0];
        double v49 = v65[1];
        Swift::UInt v51 = v66;
        if (v66 != 1)
        {
          unint64_t v53 = *((void *)&v74 + 1);
          uint64_t v54 = v75;
          __swift_project_boxed_opaque_existential_1(&v72, *((uint64_t *)&v74 + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v54 + 8))(v67, v53, v54);
          outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
          if (LOBYTE(v67[0]) >= 2u)
          {
            if (LOBYTE(v67[0]) == 2)
            {
              unint64_t v55 = 5;
              uint64_t v52 = 2;
            }
            else
            {
              outlined consume of HitTestableEvent?(v50, v49, v51);
              LOBYTE(v50) = 0;
              double v49 = 0;
              Swift::UInt v51 = 0;
              unint64_t v55 = 4;
              uint64_t v52 = 3;
            }
          }
          else
          {
            unint64_t v55 = 5;
            uint64_t v52 = 1;
          }
          Swift::UInt v50 = v50;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
          goto LABEL_73;
        }
        outlined consume of GesturePhase<TappableEvent>?(0, 0, 0, 255);
        outlined destroy of CVarArg?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
        outlined consume of HitTestableEvent?(v50, v49, 1);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
      }
      unint64_t v18 = v7;
      uint64_t v19 = v73;
      outlined init with take of ScrollStateRequest(&v74, (uint64_t)&v68);
      uint64_t v21 = *((void *)&v69 + 1);
      uint64_t v20 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v67, v21, v20);
      uint64_t v22 = *(void *)&v67[0];
      swift_release();
      if (v22) {
        break;
      }
      uint64_t v31 = *(void *)(v1 + 24);
      if (v31 && *(void *)(v1 + 32) == v19 && v17 == v31)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        unint64_t v55 = 0;
        goto LABEL_71;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      if (v6) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v14 = v59 + 1;
      if (__OFADD__(v59, 1))
      {
        __break(1u);
LABEL_77:
        __break(1u);
        goto LABEL_78;
      }
      if (v14 >= v57) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v56 + 8 * v14);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v59 + 2;
      ++v59;
      if (v14 + 1 >= v57) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v56 + 8 * v16);
      if (v15) {
        goto LABEL_15;
      }
      uint64_t v59 = v14 + 1;
      if (v14 + 2 >= v57) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v56 + 8 * (v14 + 2));
      if (v15)
      {
        v14 += 2;
LABEL_12:
        unint64_t v6 = (v15 - 1) & v15;
        unint64_t v9 = __clz(__rbit64(v15)) + (v14 << 6);
        uint64_t v59 = v14;
        goto LABEL_8;
      }
      int64_t v16 = v14 + 3;
      uint64_t v59 = v14 + 2;
      if (v14 + 3 < v57)
      {
        unint64_t v15 = *(void *)(v56 + 8 * v16);
        if (v15)
        {
LABEL_15:
          int64_t v14 = v16;
          goto LABEL_12;
        }
        while (1)
        {
          int64_t v14 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_79;
          }
          if (v14 >= v57) {
            break;
          }
          unint64_t v15 = *(void *)(v56 + 8 * v14);
          ++v16;
          if (v15) {
            goto LABEL_12;
          }
        }
        uint64_t v59 = v57 - 1;
      }
LABEL_26:
      unint64_t v6 = 0;
      char v71 = 0;
      uint64_t v69 = 0u;
      unsigned __int8 v70 = 0u;
      uint64_t v68 = 0u;
    }
    if ((*(unsigned char *)(v1 + 21) & 1) == 0)
    {
      uint64_t v23 = *(void *)(v1 + 24);
      if (!v23 || *(void *)(v1 + 32) != v19 || v17 != v23)
      {
        uint64_t v24 = *((void *)&v69 + 1);
        uint64_t v25 = v70;
        __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v67, v24, v25);
        if (LOBYTE(v67[0]))
        {
          if (!v23
            || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
          {
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
            unint64_t v55 = 1;
            goto LABEL_71;
          }
        }
      }
    }
    outlined init with copy of AnyTrackedValue((uint64_t)&v68, (uint64_t)v67);
    outlined init with copy of AnyTrackedValue((uint64_t)v67, (uint64_t)v62);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    char v7 = v18;
    type metadata accessor for ScrollStateRequest(0, v18);
    if (!swift_dynamicCast())
    {
      uint64_t v61 = 0;
      memset(v60, 0, sizeof(v60));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
      outlined destroy of CVarArg?((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for TappableEventType?, v18, (uint64_t)&protocol descriptor for TappableEventType);
      if (!*(void *)(v1 + 24)
        || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), (*(unsigned char *)AGGraphGetValue() & 1) == 0))
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
        unint64_t v55 = 3;
        goto LABEL_71;
      }
      goto LABEL_51;
    }
    outlined init with take of ScrollStateRequest(v60, (uint64_t)v65);
    outlined init with copy of AnyTrackedValue((uint64_t)v65, (uint64_t)v62);
    uint64_t v27 = v63;
    uint64_t v26 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v26 + 8) + 8))(v60, v27);
    uint64_t v29 = v63;
    uint64_t v28 = v64;
    __swift_project_boxed_opaque_existential_1(v62, v63);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v28 + 8) + 16))(v60, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    uint64_t v30 = *(void *)(v1 + 24);
    if (!v30)
    {
      outlined destroy of CVarArg?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
      *(void *)(v1 + 24) = v17;
      *(void *)(v1 + 32) = v19;
      goto LABEL_50;
    }
    if (*(void *)(v1 + 32) == v19 && v17 == v30
      || (type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener), *(unsigned char *)AGGraphGetValue() == 1))
    {
      outlined destroy of CVarArg?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
LABEL_50:
      outlined init with copy of AnyTrackedValue((uint64_t)&v68, (uint64_t)v77);
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      if (v6) {
        continue;
      }
      goto LABEL_9;
    }
    break;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  unint64_t v55 = 2;
LABEL_71:
  Swift::UInt v50 = 0;
  double v49 = 0;
  Swift::UInt v51 = 0;
  uint64_t v52 = 3;
LABEL_73:
  uint64_t v72 = v50;
  uint64_t v73 = v49;
  *(void *)&int64_t v74 = v51;
  BYTE8(v74) = v52;
  char v75 = *(_OWORD *)(v1 + 24);
  uint64_t v76 = v55;
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  AGGraphSetOutputValue();
  outlined consume of GesturePhase<TappableEvent>?(v50, v49, v51, v52);
  return outlined destroy of CVarArg?((uint64_t)v77, &lazy cache variable for type metadata for EventType?, (unint64_t *)&lazy cache variable for type metadata for EventType, (uint64_t)&protocol descriptor for EventType);
}

uint64_t specialized StaticBody.updateValue()(uint64_t a1, void (*a2)(uint64_t, double), void (*a3)(char *, uint64_t))
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  double v43 = (char *)&v40 - v11;
  MEMORY[0x270FA5388](v12);
  double v44 = (char *)&v40 - v13;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  int64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v40 - v18;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = CurrentAttribute;
    char v40 = a3;
    uint64_t v41 = a2;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v19, 1, 1, v6);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v22 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v19;
  uint64_t Value = (double *)AGGraphGetValue();
  v41(1, *Value);
  *(void *)(StatusReg + 848) = v22;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v19, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v26 = v44;
    v25(v44, v16, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v43, v26, v6);
    swift_beginAccess();
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    unint64_t v30 = *((void *)v27 + 2);
    unint64_t v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    v25(&v27[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v30], v43, v6);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v44, v6);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v19);
  uint64_t v31 = p_cache[338];
  uint64_t v32 = v31[2];
  if (v32)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v34 = v7 + 16;
    uint64_t v33 = v35;
    uint64_t v36 = (char *)v31 + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v37 = *(void *)(v34 + 56);
    double v44 = (char *)p_cache[338];
    swift_bridgeObjectRetain();
    uint64_t v38 = v40;
    do
    {
      v33(v9, v36, v6);
      v38(v9, v3);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v9, v6);
      v36 += v37;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v42;
  return swift_bridgeObjectRelease();
}

unsigned int *specialized DynamicBody.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  Swift::UInt v51 = (char *)&v47 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v52 = (char *)&v47 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  Swift::UInt v50 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v47 - v14;
  uint64_t result = (unsigned int *)AGGraphGetValue();
  unsigned int v17 = *result;
  int v18 = *(_DWORD *)(v2 + 24);
  unint64_t v53 = v15;
  if (v18 != v17 >> 1)
  {
    int v19 = *(_DWORD *)(v2 + 20);
    if (v19)
    {
      uint64_t v20 = *(void *)(v2 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      int v21 = 0;
      LODWORD(v1) = v19 - 1;
      do
      {
        uint64_t v24 = (uint64_t *)(v20 + v21);
        if (v1) {
          v21 += *((_DWORD *)v24 + 2);
        }
        else {
          int v21 = 0;
        }
        int v22 = v1 | v21;
        uint64_t v23 = *v24;
        *(void *)&long long v55 = v24;
        (*(void (**)(long long *))(v23 + 112))(&v55);
        uint64_t v1 = (v1 - 1);
      }
      while (v22);
    }
    *(_DWORD *)(v2 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
    uint64_t v15 = v53;
  }
  uint64_t Value = (long long *)AGGraphGetValue();
  uint64_t v27 = v26;
  long long v28 = Value[1];
  long long v55 = *Value;
  long long v56 = v28;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v48 = v27;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_31:
  }
    swift_once();
  char v30 = 1;
  swift_beginAccess();
  double v49 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v15, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v32 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v15;
  uint64_t v57 = *(void *)(v2 + 8);
  uint64_t v58 = *(void *)(v2 + 16);
  int v54 = *(_DWORD *)AGGraphGetValue();
  if (_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, &v54))
  {
    uint64_t v33 = (uint64_t)v50;
  }
  else
  {
    uint64_t v33 = (uint64_t)v50;
    if ((v48 & 1) == 0)
    {
      type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
      if (AGGraphGetOutputValue()) {
        char v30 = AGGraphCurrentAttributeWasModified();
      }
      else {
        char v30 = 1;
      }
    }
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v30, *(double *)&v55, *((double *)&v55 + 1), *(double *)&v56, *((double *)&v56 + 1));
  *(void *)(StatusReg + 848) = v32;
  uint64_t v34 = (uint64_t)v53;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v53, v33, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v33, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v33);
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v36 = v52;
    v35(v52, v33, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v51, v36, v3);
    swift_beginAccess();
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    unint64_t v40 = *((void *)v37 + 2);
    unint64_t v39 = *((void *)v37 + 3);
    if (v40 >= v39 >> 1)
    {
      uint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    *((void *)v37 + 2) = v40 + 1;
    v35(&v37[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v40], (uint64_t)v51, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v52, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v34);
  uint64_t v41 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v41)
  {
    double v44 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v42 = v4 + 16;
    double v43 = v44;
    uint64_t v45 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64));
    uint64_t v46 = *(void *)(v42 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v43(v6, v45, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v42 - 8))(v6, v3);
      v45 += v46;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v49;
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  void *Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t CurrentAttribute;
  uint64_t v29;
  char v30;
  unint64_t StatusReg;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  char *v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  void v57[4];
  void v58[4];

  uint64_t v2 = v0;
  v58[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v53 = (char *)&v49 - v8;
  MEMORY[0x270FA5388](v9);
  int v54 = (char *)&v49 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v52 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t result = (unsigned int *)AGGraphGetValue();
  unsigned int v17 = *result;
  int v18 = *(_DWORD *)(v0 + 24);
  long long v55 = v15;
  if (v18 != v17 >> 1)
  {
    int v19 = *(_DWORD *)(v0 + 20);
    if (v19)
    {
      uint64_t v20 = *(void *)(v0 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      int v21 = 0;
      LODWORD(v1) = v19 - 1;
      do
      {
        uint64_t v24 = (uint64_t *)(v20 + v21);
        if (v1) {
          v21 += *((_DWORD *)v24 + 2);
        }
        else {
          int v21 = 0;
        }
        int v22 = v1 | v21;
        uint64_t v23 = *v24;
        v58[0] = v24;
        (*(void (**)(void *))(v23 + 112))(v58);
        uint64_t v1 = (v1 - 1);
      }
      while (v22);
    }
    *(_DWORD *)(v2 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
    uint64_t v15 = v55;
  }
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v27 = v26;
  v57[0] = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v1 = CurrentAttribute;
  Swift::UInt v50 = v27;
  unint64_t v29 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v29 != -1) {
LABEL_31:
  }
    swift_once();
  char v30 = 1;
  swift_beginAccess();
  Swift::UInt v51 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v15, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v32 = v15;
  uint64_t v33 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v32;
  v57[1] = *(void *)(v2 + 8);
  v57[2] = *(void *)(v2 + 16);
  long long v56 = *(_DWORD *)AGGraphGetValue();
  if (_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v57, &v56))
  {
    uint64_t v34 = (uint64_t)v52;
  }
  else
  {
    uint64_t v34 = (uint64_t)v52;
    if ((v50 & 1) == 0)
    {
      type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
      if (AGGraphGetOutputValue()) {
        char v30 = AGGraphCurrentAttributeWasModified();
      }
      else {
        char v30 = 1;
      }
    }
  }
  uint64_t v35 = swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v35, v30);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v33;
  uint64_t v36 = (uint64_t)v55;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v55, v34, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v34, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v34);
  }
  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v38 = v54;
    v37(v54, v34, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v53, v38, v3);
    swift_beginAccess();
    unint64_t v39 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v39 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v39 + 2) + 1, 1, (unint64_t)v39);
      static ObservationRegistrar.lastestAccessLists = v39;
    }
    uint64_t v42 = *((void *)v39 + 2);
    uint64_t v41 = *((void *)v39 + 3);
    if (v42 >= v41 >> 1)
    {
      unint64_t v39 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, (unint64_t)v39);
      static ObservationRegistrar.lastestAccessLists = v39;
    }
    *((void *)v39 + 2) = v42 + 1;
    v37(&v39[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v42], (uint64_t)v53, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v54, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v36);
  double v43 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v43)
  {
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    double v44 = v4 + 16;
    uint64_t v45 = v46;
    uint64_t v47 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v44 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 64));
    uint64_t v48 = *(void *)(v44 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v45(v6, v47, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v44 - 8))(v6, v3);
      v47 += v48;
      --v43;
    }
    while (v43);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v51;
  swift_bridgeObjectRelease();
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int *result;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t Value;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t CurrentAttribute;
  uint64_t v34;
  char v35;
  unint64_t StatusReg;
  char *v37;
  uint64_t v38;
  double v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void, void, void);
  char *v45;
  char *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  void *v59;
  int v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  void v67[2];
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  void v71[5];

  uint64_t v1 = v0;
  v71[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v62 = (char *)&v56 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v63 = (char *)&v56 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v61 = (uint64_t *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v56 - v13;
  uint64_t result = (unsigned int *)AGGraphGetValue();
  int64_t v16 = *result;
  unsigned int v17 = *(_DWORD *)(v0 + 48);
  uint64_t v64 = v14;
  if (v17 != v16 >> 1)
  {
    int v18 = *(_DWORD *)(v0 + 44);
    if (v18)
    {
      int v19 = *(void *)(v0 + 32);
      if (!v19)
      {
        __break(1u);
        return result;
      }
      uint64_t v20 = 0;
      int v21 = v18 - 1;
      do
      {
        uint64_t v24 = (uint64_t *)(v19 + v20);
        if (v21) {
          v20 += *((_DWORD *)v24 + 2);
        }
        else {
          uint64_t v20 = 0;
        }
        int v22 = v21 | v20;
        uint64_t v23 = *v24;
        v71[0] = v24;
        (*(void (**)(void *))(v23 + 112))(v71);
        --v21;
      }
      while (v22);
    }
    *(_DWORD *)(v1 + 48) = *(_DWORD *)AGGraphGetValue() >> 1;
    uint64_t v14 = v64;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v57 = v26;
  uint64_t v27 = *(void *)(Value + 8);
  long long v28 = *(unsigned char *)(Value + 16);
  v67[0] = *(void *)Value;
  v67[1] = v27;
  uint64_t v68 = v28;
  unint64_t v29 = *(_DWORD *)v1;
  char v30 = *(void *)(v1 + 8);
  uint64_t v60 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v31 = *(void *)(v1 + 32);
  uint64_t v32 = *(void *)(v1 + 40);
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    uint64_t v58 = v29;
    uint64_t v34 = one-time initialization token for lastestAccessLists;
    swift_retain();
    uint64_t v65 = v30;
    swift_retain();
    if (v34 == -1) {
      goto LABEL_12;
    }
  }
  swift_once();
LABEL_12:
  uint64_t v35 = 1;
  swift_beginAccess();
  uint64_t v59 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v14, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v37 = v14;
  uint64_t v38 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v37;
  uint64_t v69 = v31;
  unsigned __int8 v70 = v32;
  uint64_t v66 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v67, &v66) & 1) == 0 && (v57 & 1) == 0)
  {
    if (AGGraphGetOutputValue()) {
      uint64_t v35 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v35 = 1;
    }
  }
  unint64_t v39 = *(double *)v67;
  unint64_t v40 = v68;
  uint64_t v41 = v65;
  swift_retain();
  uint64_t v42 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v42, v40, v35, v39, v58, v41, v60);
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v38;
  double v43 = (uint64_t)v64;
  double v44 = (void (*)(void, void, void))v61;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v64, (uint64_t)v61, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v3 + 48))(v44, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v44);
  }
  else
  {
    uint64_t v45 = v63;
    uint64_t v61 = *(void **)(v3 + 32);
    ((void (*)(char *, void, uint64_t))v61)(v63, v44, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v62, v45, v2);
    swift_beginAccess();
    uint64_t v46 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v46;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v46 + 2) + 1, 1, (unint64_t)v46);
      static ObservationRegistrar.lastestAccessLists = v46;
    }
    double v49 = *((void *)v46 + 2);
    uint64_t v48 = *((void *)v46 + 3);
    if (v49 >= v48 >> 1)
    {
      uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (unint64_t)v46);
      static ObservationRegistrar.lastestAccessLists = v46;
    }
    *((void *)v46 + 2) = v49 + 1;
    ((void (*)(char *, char *, uint64_t))v61)(&v46[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v49], v62, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v63, v2);
  }
  outlined destroy of ObservationTracking._AccessList?(v43);
  Swift::UInt v50 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v50)
  {
    unint64_t v53 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    uint64_t v52 = v3 + 16;
    Swift::UInt v51 = v53;
    int v54 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v52 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 64));
    long long v55 = *(void *)(v52 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v51(v5, v54, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v52 - 8))(v5, v2);
      v54 += v55;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v59;
  swift_release();
  swift_bridgeObjectRelease();
  return (unsigned int *)swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int *result;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  void *Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CurrentAttribute;
  uint64_t v30;
  char v31;
  unint64_t StatusReg;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  char *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  void v58[5];
  void v59[4];

  uint64_t v2 = v0;
  v59[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v54 = (char *)&v51 - v8;
  MEMORY[0x270FA5388](v9);
  long long v55 = (char *)&v51 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v51 - v14;
  uint64_t result = (unsigned int *)AGGraphGetValue();
  unsigned int v17 = *result;
  int v18 = *(_DWORD *)(v0 + 24);
  long long v56 = v15;
  if (v18 != v17 >> 1)
  {
    int v19 = *(_DWORD *)(v0 + 20);
    if (v19)
    {
      uint64_t v20 = *(void *)(v0 + 8);
      if (!v20)
      {
        __break(1u);
        return result;
      }
      int v21 = 0;
      LODWORD(v1) = v19 - 1;
      do
      {
        uint64_t v24 = (uint64_t *)(v20 + v21);
        if (v1) {
          v21 += *((_DWORD *)v24 + 2);
        }
        else {
          int v21 = 0;
        }
        int v22 = v1 | v21;
        uint64_t v23 = *v24;
        v59[0] = v24;
        (*(void (**)(void *))(v23 + 112))(v59);
        uint64_t v1 = (v1 - 1);
      }
      while (v22);
    }
    *(_DWORD *)(v2 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
    uint64_t v15 = v56;
  }
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v27 = v26;
  long long v28 = Value[1];
  v58[0] = *Value;
  v58[1] = v28;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v1 = CurrentAttribute;
  Swift::UInt v51 = v27;
  char v30 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v30 != -1) {
LABEL_31:
  }
    swift_once();
  uint64_t v31 = 1;
  swift_beginAccess();
  uint64_t v52 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v15, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v33 = v15;
  uint64_t v34 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v33;
  v58[2] = *(void *)(v2 + 8);
  v58[3] = *(void *)(v2 + 16);
  uint64_t v57 = *(_DWORD *)AGGraphGetValue();
  if (_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v58, &v57))
  {
    uint64_t v35 = (uint64_t)v53;
  }
  else
  {
    uint64_t v35 = (uint64_t)v53;
    if ((v51 & 1) == 0)
    {
      type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>, (void (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>);
      if (AGGraphGetOutputValue()) {
        uint64_t v31 = AGGraphCurrentAttributeWasModified();
      }
      else {
        uint64_t v31 = 1;
      }
    }
  }
  uint64_t v36 = *(double *)v58;
  uint64_t v37 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v37, v31, v36);
  swift_release();
  *(void *)(StatusReg + 848) = v34;
  uint64_t v38 = (uint64_t)v56;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v56, v35, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v35, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v35);
  }
  else
  {
    unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    unint64_t v40 = v55;
    v39(v55, v35, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v54, v40, v3);
    swift_beginAccess();
    uint64_t v41 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v41 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v41 + 2) + 1, 1, (unint64_t)v41);
      static ObservationRegistrar.lastestAccessLists = v41;
    }
    double v44 = *((void *)v41 + 2);
    double v43 = *((void *)v41 + 3);
    if (v44 >= v43 >> 1)
    {
      uint64_t v41 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, (unint64_t)v41);
      static ObservationRegistrar.lastestAccessLists = v41;
    }
    *((void *)v41 + 2) = v44 + 1;
    v39(&v41[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v44], (uint64_t)v54, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v55, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v38);
  uint64_t v45 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v45)
  {
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v46 = v4 + 16;
    uint64_t v47 = v48;
    double v49 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v46 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 64));
    Swift::UInt v50 = *(void *)(v46 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v47(v6, v49, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v46 - 8))(v6, v3);
      v49 += v50;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v52;
  swift_bridgeObjectRelease();
  return (unsigned int *)swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int *result;
  unsigned int v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  long long *Value;
  uint64_t v28;
  uint64_t v29;
  uint64_t CurrentAttribute;
  char v31;
  unint64_t StatusReg;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  char *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  char *v52;
  int v53;
  int v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  void v58[4];

  uint64_t v2 = v0;
  v58[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  Swift::UInt v51 = (char *)&v48 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v52 = (char *)&v48 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v48 - v15;
  unint64_t v53 = *(_DWORD *)(v2 + 4);
  uint64_t result = (unsigned int *)AGGraphGetValue();
  int v18 = *result;
  int v19 = *(_DWORD *)(v2 + 24);
  Swift::UInt v50 = v13;
  if (v19 != v18 >> 1)
  {
    uint64_t v20 = v16;
    int v21 = *(_DWORD *)(v2 + 20);
    if (v21)
    {
      int v22 = *(void *)(v2 + 8);
      if (!v22)
      {
        __break(1u);
        return result;
      }
      uint64_t v23 = 0;
      LODWORD(v1) = v21 - 1;
      do
      {
        uint64_t v26 = (uint64_t *)(v22 + v23);
        if (v1) {
          v23 += *((_DWORD *)v26 + 2);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = v1 | v23;
        uint64_t v25 = *v26;
        v58[0] = v26;
        (*(void (**)(void *))(v25 + 112))(v58);
        uint64_t v1 = (v1 - 1);
      }
      while (v24);
    }
    *(_DWORD *)(v2 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
    int64_t v16 = v20;
  }
  uint64_t Value = (long long *)AGGraphGetValue();
  unint64_t v29 = v28;
  long long v55 = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    uint64_t v48 = v29;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_12;
    }
  }
  swift_once();
LABEL_12:
  uint64_t v31 = 1;
  swift_beginAccess();
  double v49 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v33 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v16;
  long long v56 = *(void *)(v2 + 8);
  uint64_t v57 = *(void *)(v2 + 16);
  int v54 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, &v54) & 1) == 0 && (v48 & 1) == 0)
  {
    type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
    if (AGGraphGetOutputValue()) {
      uint64_t v31 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v31 = 1;
    }
  }
  specialized GestureBodyAccessor.updateBody(of:changed:)(v31, *(double *)&v55, *((double *)&v55 + 1));
  *(void *)(StatusReg + 848) = v33;
  uint64_t v34 = (uint64_t)v16;
  uint64_t v35 = (uint64_t)v50;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v16, (uint64_t)v50, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v35, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v35);
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v37 = v52;
    v36(v52, v35, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v51, v37, v3);
    swift_beginAccess();
    uint64_t v38 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v38 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v38 + 2) + 1, 1, (unint64_t)v38);
      static ObservationRegistrar.lastestAccessLists = v38;
    }
    uint64_t v41 = *((void *)v38 + 2);
    unint64_t v40 = *((void *)v38 + 3);
    if (v41 >= v40 >> 1)
    {
      uint64_t v38 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, (unint64_t)v38);
      static ObservationRegistrar.lastestAccessLists = v38;
    }
    *((void *)v38 + 2) = v41 + 1;
    v36(&v38[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v41], (uint64_t)v51, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v52, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v34);
  uint64_t v42 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v42)
  {
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    double v43 = v4 + 16;
    double v44 = v45;
    uint64_t v46 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v43 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 64));
    uint64_t v47 = *(void *)(v43 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v44(v6, v46, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v43 - 8))(v6, v3);
      v46 += v47;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v49;
  return (unsigned int *)swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int *result;
  unsigned int v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t CurrentAttribute;
  char v30;
  unint64_t StatusReg;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int *Value;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  char *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void v60[4];

  uint64_t v2 = v0;
  v60[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  int v54 = (char *)&v50 - v8;
  MEMORY[0x270FA5388](v9);
  long long v55 = (char *)&v50 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v50 - v15;
  long long v56 = *(_DWORD *)(v0 + 4);
  uint64_t result = (unsigned int *)AGGraphGetValue();
  int v18 = *result;
  int v19 = *(_DWORD *)(v0 + 24);
  unint64_t v53 = v13;
  if (v19 != v18 >> 1)
  {
    uint64_t v20 = v16;
    int v21 = *(_DWORD *)(v0 + 20);
    if (v21)
    {
      int v22 = *(void *)(v0 + 8);
      if (!v22)
      {
        __break(1u);
        return result;
      }
      LODWORD(v1) = 0;
      uint64_t v23 = v21 - 1;
      do
      {
        uint64_t v26 = (uint64_t *)(v22 + (int)v1);
        if (v23) {
          uint64_t v1 = (*((_DWORD *)v26 + 2) + v1);
        }
        else {
          uint64_t v1 = 0;
        }
        uint64_t v24 = v23 | v1;
        uint64_t v25 = *v26;
        v60[0] = v26;
        (*(void (**)(void *))(v25 + 112))(v60);
        --v23;
      }
      while (v24);
    }
    *(_DWORD *)(v2 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
    int64_t v16 = v20;
  }
  type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  AGGraphGetValue();
  long long v28 = v27;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = CurrentAttribute;
    Swift::UInt v51 = v28;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_12;
    }
  }
  swift_once();
LABEL_12:
  char v30 = 1;
  swift_beginAccess();
  uint64_t v52 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v32 = v16;
  uint64_t v33 = *(void *)(StatusReg + 848);
  uint64_t v34 = (uint64_t)v32;
  *(void *)(StatusReg + 848) = v32;
  uint64_t v58 = *(void *)(v2 + 8);
  uint64_t v59 = *(void *)(v2 + 16);
  uint64_t Value = (int *)AGGraphGetValue();
  uint64_t v57 = *Value;
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)Value, &v57) & 1) == 0 && (v51 & 1) == 0)
  {
    type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
    if (AGGraphGetOutputValue()) {
      char v30 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v30 = 1;
    }
  }
  specialized GestureBodyAccessor.updateBody(of:changed:)(v30);
  *(void *)(StatusReg + 848) = v33;
  uint64_t v36 = v34;
  uint64_t v37 = (uint64_t)v53;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v34, (uint64_t)v53, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v37, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v37);
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    unint64_t v39 = v55;
    v38(v55, v37, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v54, v39, v3);
    swift_beginAccess();
    unint64_t v40 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v40;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v40 + 2) + 1, 1, (unint64_t)v40);
      static ObservationRegistrar.lastestAccessLists = v40;
    }
    double v43 = *((void *)v40 + 2);
    uint64_t v42 = *((void *)v40 + 3);
    if (v43 >= v42 >> 1)
    {
      unint64_t v40 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, (unint64_t)v40);
      static ObservationRegistrar.lastestAccessLists = v40;
    }
    *((void *)v40 + 2) = v43 + 1;
    v38(&v40[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v43], (uint64_t)v54, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v55, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v36);
  double v44 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v44)
  {
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v45 = v4 + 16;
    uint64_t v46 = v47;
    uint64_t v48 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v45 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 64));
    double v49 = *(void *)(v45 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v46(v6, v48, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v45 - 8))(v6, v3);
      v48 += v49;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v52;
  return (unsigned int *)swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)&v43 - v8;
  MEMORY[0x270FA5388](v9);
  double v43 = (char *)&v43 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v48 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (uint64_t)&v43 - v14;
  int v15 = *(_DWORD *)(v0 + 4);
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v55[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  int v47 = v15;
  uint64_t Value = AGGraphGetValue();
  uint64_t v44 = v17;
  char v18 = *(unsigned char *)(Value + 40);
  uint64_t v19 = *(void *)(Value + 48);
  uint64_t v20 = *(void *)(Value + 56);
  uint64_t v22 = *(void *)(Value + 64);
  uint64_t v21 = *(void *)(Value + 72);
  char v23 = *(unsigned char *)(Value + 80);
  v51[0] = *(unsigned char *)Value;
  *(_OWORD *)&v51[8] = *(_OWORD *)(Value + 8);
  *(_OWORD *)&v51[24] = *(_OWORD *)(Value + 24);
  v51[40] = v18;
  *(void *)&long long v52 = v19;
  *((void *)&v52 + 1) = v20;
  *(void *)&long long v53 = v22;
  *((void *)&v53 + 1) = v21;
  char v54 = v23;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  outlined copy of Environment<EdgeInsets>.Content(v19, v20, v22, v21, v23);
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  char v25 = 1;
  swift_beginAccess();
  uint64_t v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v26 = v49;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v49, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v28 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v26;
  v55[0] = *(_OWORD *)(v2 + 8);
  v50[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v51, v50) & 1) == 0 && (v44 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    if (AGGraphGetOutputValue()) {
      char v25 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v25 = 1;
    }
  }
  v55[2] = *(_OWORD *)&v51[32];
  v55[3] = v52;
  v55[4] = v53;
  char v56 = v54;
  v55[0] = *(_OWORD *)v51;
  v55[1] = *(_OWORD *)&v51[16];
  outlined retain of SafeAreaPaddingModifier((uint64_t)v55, (void (*)(void, void, void, void, void))outlined copy of Environment<EdgeInsets>.Content);
  specialized ModifierBodyAccessor.updateBody(of:changed:)((uint64_t)v55, v25);
  outlined retain of SafeAreaPaddingModifier((uint64_t)v55, (void (*)(void, void, void, void, void))outlined consume of Environment<EdgeInsets>.Content);
  *(void *)(StatusReg + 848) = v28;
  uint64_t v29 = v48;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v49, v48, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v29, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    char v30 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v31 = v43;
    v30(v43, v29, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v46, v31, v3);
    swift_beginAccess();
    uint64_t v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    unint64_t v35 = *((void *)v32 + 2);
    unint64_t v34 = *((void *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((void *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v35], (uint64_t)v46, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v49);
  uint64_t v36 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v37 = v4 + 16;
    uint64_t v38 = v39;
    unint64_t v40 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
    uint64_t v41 = *(void *)(v37 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v38(v6, v40, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v37 - 8))(v6, v3);
      v40 += v41;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  return outlined consume of Environment<EdgeInsets>.Content(v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54);
}

{
  unsigned int *v0;
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  uint64_t CurrentAttribute;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t StatusReg;
  uint64_t v24;
  unint64_t v25;
  char v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  uint64_t v54;

  uint64_t v2 = v0;
  char v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)&v43 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v43 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v47 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v43 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v52 = *((void *)v0 + 4);
    *(void *)&long long v53 = *((void *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v18 = v17;
  long long v52 = *(void *)Value;
  long long v53 = *(_OWORD *)(Value + 8);
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  double v43 = v11;
  uint64_t v20 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v20 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v21 = 1;
  swift_beginAccess();
  uint64_t v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v22 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v48, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v44 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v22;
  Swift::UInt v50 = *((void *)v2 + 4);
  Swift::UInt v51 = *((void *)v2 + 5);
  uint64_t v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue()) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v21 = 1;
    }
  }
  uint64_t v24 = *v2;
  char v25 = *((void *)v2 + 1);
  uint64_t v26 = *((unsigned char *)v2 + 16);
  uint64_t v27 = v53;
  swift_retain();
  uint64_t v28 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v28, v21, *(double *)&v27, *((double *)&v27 + 1), v24, v25, v26);
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v44;
  uint64_t v29 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v29, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    char v30 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v31 = v43;
    v30(v43, v29, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v46, v31, v3);
    swift_beginAccess();
    uint64_t v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    unint64_t v35 = *((void *)v32 + 2);
    unint64_t v34 = *((void *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((void *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v35], (uint64_t)v46, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  uint64_t v36 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v37 = v4 + 16;
    uint64_t v38 = v39;
    unint64_t v40 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
    uint64_t v41 = *(void *)(v37 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v38(v6, v40, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v37 - 8))(v6, v3);
      v40 += v41;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  unsigned int *v0;
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *Value;
  char v17;
  char v18;
  uint64_t CurrentAttribute;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t StatusReg;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void v50[8];

  uint64_t v2 = v0;
  v50[7] = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)&v42 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v42 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v47 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v42 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v50[4] = *((void *)v0 + 4);
    v50[5] = *((void *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = (void *)AGGraphGetValue();
  char v18 = v17;
  v50[0] = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  double v43 = v11;
  uint64_t v20 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v20 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v21 = 1;
  swift_beginAccess();
  uint64_t v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v22 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v48, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v44 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v22;
  v50[1] = *((void *)v2 + 4);
  v50[2] = *((void *)v2 + 5);
  uint64_t v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v50, &v49) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue()) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v21 = 1;
    }
  }
  uint64_t v24 = *v2;
  char v25 = *((void *)v2 + 1);
  uint64_t v26 = *((unsigned char *)v2 + 16);
  swift_retain();
  uint64_t v27 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v27, v21, v24, v25, v26);
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v44;
  uint64_t v28 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    char v30 = v43;
    v29(v43, v28, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v46, v30, v3);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    uint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34], (uint64_t)v46, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  unint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v36 = v4 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    unint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v37(v6, v39, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v6, v3);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t CurrentAttribute;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;

  uint64_t v2 = v0;
  long long v55 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v45 = (char *)&v42 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v42 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v47 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v48 = (uint64_t)&v42 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v52 = *(void *)(v0 + 8);
    long long v53 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v18 = v17;
  uint64_t v19 = *(void *)(Value + 8);
  long long v52 = *(void *)Value;
  long long v53 = v19;
  uint64_t v46 = *(_OWORD *)(Value + 16);
  char v54 = v46;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  double v43 = v11;
  uint64_t v21 = one-time initialization token for lastestAccessLists;
  swift_retain();
  swift_retain();
  if (v21 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v22 = 1;
  swift_beginAccess();
  *(void *)&uint64_t v46 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  char v23 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v48, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v44 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v23;
  Swift::UInt v50 = *(void *)(v2 + 8);
  Swift::UInt v51 = *(void *)(v2 + 16);
  uint64_t v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue()) {
      uint64_t v22 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v22 = 1;
    }
  }
  char v25 = v52;
  uint64_t v26 = v53;
  uint64_t v27 = v54;
  swift_retain();
  swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v25, v26, v27, *((uint64_t *)&v27 + 1), v22);
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v44;
  uint64_t v28 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    char v30 = v43;
    v29(v43, v28, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v45, v30, v3);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    uint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34], (uint64_t)v45, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v48);
  unint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v36 = v4 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    unint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v37(v6, v39, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v6, v3);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)v46;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t CurrentAttribute;
  uint64_t v20;
  char v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  void v49[8];

  v49[7] = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v41 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v41 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v46 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v41 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v49[4] = *(void *)(v0 + 8);
    v49[5] = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = (void *)AGGraphGetValue();
  char v18 = v17;
  v49[0] = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v42 = v10;
  double v43 = v18;
  uint64_t v20 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v20 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v21 = 1;
  swift_beginAccess();
  uint64_t v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v23 = (uint64_t)v15;
  uint64_t v24 = *(void *)(StatusReg + 848);
  int v47 = v23;
  *(void *)(StatusReg + 848) = v23;
  v49[1] = *(void *)(v0 + 8);
  _OWORD v49[2] = *(void *)(v0 + 16);
  uint64_t v48 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v49, &v48) & 1) == 0 && (v43 & 1) == 0)
  {
    type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v21 = 1;
    }
  }
  char v25 = swift_retain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v25, v21);
  swift_release();
  *(void *)(StatusReg + 848) = v24;
  uint64_t v27 = v46;
  uint64_t v26 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v47, v46, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v27, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v27);
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v29 = v42;
    v28(v42, v27, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v45, v29, v2);
    swift_beginAccess();
    char v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    uint64_t v33 = *((void *)v30 + 2);
    uint64_t v32 = *((void *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      char v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((void *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v33], (uint64_t)v45, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v29, v2);
    uint64_t v26 = v47;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  unint64_t v34 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    unint64_t v35 = v3 + 16;
    uint64_t v36 = v37;
    uint64_t v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    unint64_t v39 = *(void *)(v35 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v36(v5, v38, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v35 - 8))(v5, v2);
      v38 += v39;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v44;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *Value;
  uint64_t v18;
  uint64_t v19;
  uint64_t CurrentAttribute;
  char v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v2 = v0;
  long long v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  double v43 = (char *)&v40 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v40 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v44 = (uint64_t)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v40 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    Swift::UInt v50 = *(void *)(v0 + 8);
    Swift::UInt v51 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  uint64_t v19 = v18;
  int v47 = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  unint64_t v40 = v11;
  uint64_t v41 = v19;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v21 = 1;
  swift_beginAccess();
  uint64_t v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v23 = (uint64_t)v16;
  uint64_t v24 = *(void *)(StatusReg + 848);
  uint64_t v45 = v23;
  *(void *)(StatusReg + 848) = v23;
  uint64_t v48 = *(void *)(v2 + 8);
  uint64_t v49 = *(void *)(v2 + 16);
  uint64_t v46 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v47, &v46) & 1) == 0 && (v41 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v21 = 1;
    }
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v47, v21);
  *(void *)(StatusReg + 848) = v24;
  uint64_t v26 = v44;
  char v25 = v45;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v26, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v26);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v28 = v40;
    v27(v40, v26, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v43, v28, v3);
    swift_beginAccess();
    uint64_t v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    uint64_t v32 = *((void *)v29 + 2);
    uint64_t v31 = *((void *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      uint64_t v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((void *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v32], (uint64_t)v43, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v28, v3);
    char v25 = v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  uint64_t v33 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v34 = v4 + 16;
    unint64_t v35 = v36;
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v38 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v35(v6, v37, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v6, v3);
      v37 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Value;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t CurrentAttribute;
  char v22;
  uint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (**v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54[6];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;

  uint64_t v2 = v0;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  long long v52 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  Swift::UInt v50 = (char *)&v46 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (char *)&v46 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  Swift::UInt v51 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v53 = (uint64_t)&v46 - v13;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    uint64_t v60 = *(void *)(v0 + 8);
    uint64_t v61 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  int v47 = v15;
  int64_t v16 = *(void *)Value;
  uint64_t v17 = *(void *)(Value + 8);
  uint64_t v19 = *(void *)(Value + 16);
  char v18 = *(void *)(Value + 24);
  uint64_t v20 = *(unsigned char *)(Value + 32);
  long long v55 = *(void *)Value;
  char v56 = v17;
  uint64_t v57 = v19;
  uint64_t v58 = v18;
  uint64_t v59 = v20;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  outlined copy of Path.Storage(v16, v17, v19, v18, v20);
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v22 = 1;
  swift_beginAccess();
  uint64_t v49 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  char v23 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v48 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v23;
  uint64_t v60 = *(void *)(v2 + 8);
  uint64_t v61 = *(void *)(v2 + 16);
  v54[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, v54) & 1) == 0 && (v47 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Path, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      uint64_t v22 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v22 = 1;
    }
  }
  char v25 = v55;
  uint64_t v26 = v56;
  uint64_t v27 = v57;
  uint64_t v28 = v58;
  uint64_t v60 = v55;
  uint64_t v61 = v56;
  uint64_t v62 = v57;
  uint64_t v63 = v58;
  uint64_t v29 = v59;
  uint64_t v64 = v59;
  outlined copy of Path.Storage(v55, v56, v57, v58, v59);
  specialized ViewBodyAccessor.updateBody(of:changed:)((uint64_t)&v60, v22);
  outlined consume of Path.Storage(v25, v26, v27, v28, v29);
  *(void *)(StatusReg + 848) = v48;
  char v30 = v51;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v53, v51, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  uint64_t v31 = v52;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v30, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v30);
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
    uint64_t v33 = v46;
    v32(v46, v30, v3);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v50, v33, v3);
    swift_beginAccess();
    unint64_t v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    uint64_t v37 = *((void *)v34 + 2);
    uint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v37], (uint64_t)v50, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v53);
  uint64_t v38 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    unint64_t v40 = v31 + 16;
    unint64_t v39 = v41;
    uint64_t v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v40 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 64));
    double v43 = *(void *)(v40 + 56);
    uint64_t v44 = (void (**)(char *, uint64_t))(v40 - 8);
    swift_bridgeObjectRetain();
    do
    {
      v39(v5, v42, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*v44)(v5, v3);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v49;
  swift_bridgeObjectRelease();
  return outlined consume of Path.Storage(v55, v56, v57, v58, v59);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  char v20;
  long long v21;
  uint64_t CurrentAttribute;
  char v23;
  unint64_t StatusReg;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  long long v48;
  long long v49;
  char v50;
  int v51[6];
  long long v52[2];
  char v53;
  uint64_t v54;

  uint64_t v2 = v0;
  char v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v45 = (char *)&v42 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v42 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v46 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v42 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v52[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned char *)(Value + 32);
  uint64_t v21 = *(_OWORD *)(Value + 16);
  uint64_t v48 = *(_OWORD *)Value;
  uint64_t v49 = v21;
  Swift::UInt v50 = v20;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  double v43 = v19;
  uint64_t v42 = v11;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  char v23 = 1;
  swift_beginAccess();
  uint64_t v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v25 = (uint64_t)v16;
  uint64_t v26 = *(void *)(StatusReg + 848);
  int v47 = v25;
  *(void *)(StatusReg + 848) = v25;
  v52[0] = *(_OWORD *)(v2 + 8);
  v51[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v48, v51) & 1) == 0 && (v43 & 1) == 0)
  {
    type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      char v23 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v23 = 1;
    }
  }
  v52[0] = v48;
  v52[1] = v49;
  long long v53 = v50;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v52, v23);
  *(void *)(StatusReg + 848) = v26;
  uint64_t v28 = v46;
  uint64_t v27 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v47, v46, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    char v30 = v42;
    v29(v42, v28, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v45, v30, v3);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    uint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34], (uint64_t)v45, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
    uint64_t v27 = v47;
  }
  outlined destroy of ObservationTracking._AccessList?(v27);
  unint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v36 = v4 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    unint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v37(v6, v39, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v6, v3);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v44;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  long long v22;
  uint64_t CurrentAttribute;
  char v24;
  unint64_t StatusReg;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  long long v50;
  long long v51;
  int v52[6];
  _OWORD v53[3];
  uint64_t v54;

  uint64_t v2 = v0;
  char v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)&v43 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v43 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v47 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v43 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v53[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned char *)(Value + 32);
  uint64_t v21 = *(void *)(Value + 40);
  uint64_t v22 = *(_OWORD *)(Value + 16);
  uint64_t v49 = *(_OWORD *)Value;
  Swift::UInt v50 = v22;
  LOBYTE(v51) = v20;
  *((void *)&v51 + 1) = v21;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v44 = v19;
  double v43 = v11;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v24 = 1;
  swift_beginAccess();
  uint64_t v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v26 = (uint64_t)v16;
  uint64_t v27 = *(void *)(StatusReg + 848);
  uint64_t v48 = v26;
  *(void *)(StatusReg + 848) = v26;
  v53[0] = *(_OWORD *)(v2 + 8);
  v52[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v49, v52) & 1) == 0 && (v44 & 1) == 0)
  {
    type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      uint64_t v24 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v24 = 1;
    }
  }
  v53[0] = v49;
  v53[1] = v50;
  v53[2] = v51;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v53, v24);
  *(void *)(StatusReg + 848) = v27;
  uint64_t v29 = v47;
  uint64_t v28 = v48;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v29, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v29);
  }
  else
  {
    char v30 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v31 = v43;
    v30(v43, v29, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v46, v31, v3);
    swift_beginAccess();
    uint64_t v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    unint64_t v35 = *((void *)v32 + 2);
    unint64_t v34 = *((void *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((void *)v32 + 2) = v35 + 1;
    v30(&v32[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v35], (uint64_t)v46, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v31, v3);
    uint64_t v28 = v48;
  }
  outlined destroy of ObservationTracking._AccessList?(v28);
  uint64_t v36 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v37 = v4 + 16;
    uint64_t v38 = v39;
    unint64_t v40 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
    uint64_t v41 = *(void *)(v37 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v38(v6, v40, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v37 - 8))(v6, v3);
      v40 += v41;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t CurrentAttribute;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t StatusReg;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v2 = v0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v49 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v45 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  Swift::UInt v50 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  Swift::UInt v51 = (uint64_t)&v45 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v55 = *(void *)(v0 + 8);
    char v56 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v46 = v16;
  char v18 = *(void *)Value;
  uint64_t v17 = *(void *)(Value + 8);
  uint64_t v19 = *(unsigned char *)(Value + 16);
  uint64_t v20 = *(void *)(Value + 24);
  long long v55 = *(void *)Value;
  char v56 = v17;
  uint64_t v57 = v19;
  uint64_t v58 = v20;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  outlined copy of Text.Storage(v18, v17, v19);
  uint64_t v22 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v22 != -1) {
LABEL_23:
  }
    swift_once();
  char v23 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v24 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v51, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v47 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v24;
  long long v53 = *(void *)(v2 + 8);
  char v54 = *(void *)(v2 + 16);
  long long v52 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, &v52) & 1) == 0 && (v46 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (void (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>);
    if (AGGraphGetOutputValue()) {
      char v23 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v23 = 1;
    }
  }
  uint64_t v26 = v23;
  uint64_t v27 = v55;
  uint64_t v28 = v56;
  uint64_t v29 = v57;
  char v30 = v58;
  outlined copy of Text.Storage(v55, v56, v57);
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)(v27, v28, v29, v30, v26);
  outlined consume of Text.Storage(v27, v28, v29);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v47;
  uint64_t v31 = v50;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v51, v50, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v31, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v33 = v45;
    v32(v45, v31, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, v33, v3);
    swift_beginAccess();
    unint64_t v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    uint64_t v37 = *((void *)v34 + 2);
    uint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v37], (uint64_t)v49, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v51);
  uint64_t v38 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v39 = v4 + 16;
    unint64_t v40 = v41;
    uint64_t v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64));
    double v43 = *(void *)(v39 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v40(v6, v42, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v39 - 8))(v6, v3);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v55, v56, v57);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t CurrentAttribute;
  char v22;
  unint64_t StatusReg;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  long long v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  uint64_t v2 = v0;
  long long v55 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v45 = (char *)&v41 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v41 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v46 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v41 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v53 = *(void *)(v0 + 8);
    char v54 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned char *)(Value + 16);
  uint64_t v49 = *(_OWORD *)Value;
  Swift::UInt v50 = v20;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v42 = v11;
  double v43 = v19;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v22 = 1;
  swift_beginAccess();
  uint64_t v44 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v24 = (uint64_t)v16;
  char v25 = *(void *)(StatusReg + 848);
  int v47 = v24;
  *(void *)(StatusReg + 848) = v24;
  Swift::UInt v51 = *(void *)(v2 + 8);
  long long v52 = *(void *)(v2 + 16);
  uint64_t v48 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v49, &v48) & 1) == 0 && (v43 & 1) == 0)
  {
    type metadata accessor for _ShapeView<RoundedRectangle, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      uint64_t v22 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v22 = 1;
    }
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v50, v22, *(double *)&v49, *((double *)&v49 + 1));
  *(void *)(StatusReg + 848) = v25;
  uint64_t v27 = v46;
  uint64_t v26 = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v47, v46, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v27, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v27);
  }
  else
  {
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v29 = v42;
    v28(v42, v27, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v45, v29, v3);
    swift_beginAccess();
    char v30 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    uint64_t v33 = *((void *)v30 + 2);
    uint64_t v32 = *((void *)v30 + 3);
    if (v33 >= v32 >> 1)
    {
      char v30 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, (unint64_t)v30);
      static ObservationRegistrar.lastestAccessLists = v30;
    }
    *((void *)v30 + 2) = v33 + 1;
    v28(&v30[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v33], (uint64_t)v45, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v29, v3);
    uint64_t v26 = v47;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  unint64_t v34 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v34)
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v35 = v4 + 16;
    uint64_t v36 = v37;
    uint64_t v38 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    unint64_t v39 = *(void *)(v35 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v36(v6, v38, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v35 - 8))(v6, v3);
      v38 += v39;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v44;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t Value;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  double v21;
  uint64_t CurrentAttribute;
  char v23;
  unint64_t StatusReg;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  long long v52;
  unsigned __int8 v53;
  double v54;
  uint64_t v55;

  uint64_t v2 = v0;
  long long v55 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v46 = (char *)&v42 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v42 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v47 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v42 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v52 = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned char *)(Value + 16);
  uint64_t v21 = *(double *)(Value + 24);
  long long v52 = *(_OWORD *)Value;
  long long v53 = v20;
  char v54 = v21;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  double v43 = v11;
  uint64_t v44 = v19;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_23:
  }
    swift_once();
  char v23 = 1;
  swift_beginAccess();
  uint64_t v45 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v25 = (uint64_t)v16;
  uint64_t v26 = *(void *)(StatusReg + 848);
  uint64_t v48 = v25;
  *(void *)(StatusReg + 848) = v25;
  Swift::UInt v50 = *(void *)(v2 + 8);
  Swift::UInt v51 = *(void *)(v2 + 16);
  uint64_t v49 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, &v49) & 1) == 0 && (v44 & 1) == 0)
  {
    type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
    if (AGGraphGetOutputValue()) {
      char v23 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v23 = 1;
    }
  }
  specialized ViewBodyAccessor.updateBody(of:changed:)(v53, v23, *(double *)&v52, *((double *)&v52 + 1), v54);
  *(void *)(StatusReg + 848) = v26;
  uint64_t v28 = v47;
  uint64_t v27 = v48;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v48, v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v28, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    char v30 = v43;
    v29(v43, v28, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v46, v30, v3);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    uint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v34], (uint64_t)v46, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
    uint64_t v27 = v48;
  }
  outlined destroy of ObservationTracking._AccessList?(v27);
  unint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v36 = v4 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64));
    unint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v37(v6, v39, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v6, v3);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v45;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t CurrentAttribute;
  uint64_t v20;
  char v21;
  unint64_t StatusReg;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  long long v48;
  int v49[6];
  uint64_t v50;
  long long v51;
  long long v52;
  uint64_t v53;

  long long v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  double v43 = (char *)&v40 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v40 - v9;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v44 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v40 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    Swift::UInt v50 = *(void *)(v0 + 8);
    *(void *)&Swift::UInt v51 = *(void *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v18 = v17;
  uint64_t v46 = *(void *)Value;
  int v47 = *(_OWORD *)(Value + 8);
  uint64_t v48 = *(_OWORD *)(Value + 24);
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v41 = v18;
  unint64_t v40 = v10;
  uint64_t v20 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v21 = 1;
  swift_beginAccess();
  uint64_t v42 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, 1, 1, v2);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v23 = (uint64_t)v15;
  uint64_t v24 = *(void *)(StatusReg + 848);
  uint64_t v45 = v23;
  *(void *)(StatusReg + 848) = v23;
  Swift::UInt v50 = *(void *)(v0 + 8);
  *(void *)&Swift::UInt v51 = *(void *)(v0 + 16);
  v49[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v46, v49) & 1) == 0 && (v41 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Rectangle, LinearGradient>();
    if (AGGraphGetOutputValue()) {
      uint64_t v21 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v21 = 1;
    }
  }
  Swift::UInt v50 = v46;
  Swift::UInt v51 = v47;
  long long v52 = v48;
  swift_bridgeObjectRetain();
  specialized ViewBodyAccessor.updateBody(of:changed:)((long long *)&v50, v21);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v24;
  uint64_t v26 = v44;
  char v25 = v45;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v45, v44, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v26, 1, v2) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v26);
  }
  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    uint64_t v28 = v40;
    v27(v40, v26, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v43, v28, v2);
    swift_beginAccess();
    uint64_t v29 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v29 + 2) + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    uint64_t v32 = *((void *)v29 + 2);
    uint64_t v31 = *((void *)v29 + 3);
    if (v32 >= v31 >> 1)
    {
      uint64_t v29 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (unint64_t)v29);
      static ObservationRegistrar.lastestAccessLists = v29;
    }
    *((void *)v29 + 2) = v32 + 1;
    v27(&v29[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v32], (uint64_t)v43, v2);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v28, v2);
    char v25 = v45;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  uint64_t v33 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    unint64_t v34 = v3 + 16;
    unint64_t v35 = v36;
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v34 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 64));
    uint64_t v38 = *(void *)(v34 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v35(v5, v37, v2);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v1);
      (*(void (**)(char *, uint64_t))(v34 - 8))(v5, v2);
      v37 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v42;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  unsigned int *v0;
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  char v17;
  char v18;
  double v19;
  uint64_t CurrentAttribute;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t StatusReg;
  uint64_t v25;
  unint64_t v26;
  char v27;
  long long v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  double v57;
  uint64_t v58;

  uint64_t v2 = v0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v49 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v45 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  Swift::UInt v50 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::UInt v51 = (uint64_t)&v45 - v15;
  if (v0[12] != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    long long v55 = *((void *)v0 + 4);
    *(void *)&char v56 = *((void *)v0 + 5);
    _DynamicPropertyBuffer.reset()();
    v0[12] = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v18 = v17;
  uint64_t v19 = *(double *)(Value + 24);
  long long v55 = *(void *)Value;
  char v56 = *(_OWORD *)(Value + 8);
  uint64_t v57 = v19;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v46 = v11;
  uint64_t v21 = one-time initialization token for lastestAccessLists;
  swift_retain();
  if (v21 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v22 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  char v23 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v51, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v47 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v23;
  long long v53 = *((void *)v2 + 4);
  char v54 = *((void *)v2 + 5);
  long long v52 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, &v52) & 1) == 0 && (v18 & 1) == 0)
  {
    if (AGGraphGetOutputValue()) {
      uint64_t v22 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v22 = 1;
    }
  }
  char v25 = *v2;
  uint64_t v26 = *((void *)v2 + 1);
  uint64_t v27 = *((unsigned char *)v2 + 16);
  uint64_t v28 = v56;
  uint64_t v29 = v57;
  swift_retain();
  char v30 = swift_retain();
  specialized EnvironmentalBodyAccessor.updateBody(of:changed:)(v30, v22, *(double *)&v28, *((double *)&v28 + 1), v29, v25, v26, v27);
  swift_release();
  swift_release();
  *(void *)(StatusReg + 848) = v47;
  uint64_t v31 = v50;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v51, v50, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v31, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v33 = v46;
    v32(v46, v31, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, v33, v3);
    swift_beginAccess();
    unint64_t v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    uint64_t v37 = *((void *)v34 + 2);
    uint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v37], (uint64_t)v49, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v51);
  uint64_t v38 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v39 = v4 + 16;
    unint64_t v40 = v41;
    uint64_t v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64));
    double v43 = *(void *)(v39 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v40(v6, v42, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v39 - 8))(v6, v3);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Value;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t CurrentAttribute;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t StatusReg;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  char *v47;
  void *v48;
  char *v49;
  uint64_t v50;
  int v51[6];
  long long v52;
  long long v53;
  unsigned char v54[26];
  _OWORD v55[2];
  _OWORD v56[2];
  uint64_t v57;

  uint64_t v2 = v0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v49 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v45 = (char *)&v45 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  Swift::UInt v50 = (uint64_t)&v45 - v15;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v55[0] = *(_OWORD *)(v0 + 8);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v46 = v17;
  char v18 = *(void *)(Value + 16);
  uint64_t v19 = *(unsigned char *)(Value + 24);
  uint64_t v20 = *(void *)(Value + 32);
  uint64_t v21 = *(unsigned char *)(Value + 40);
  uint64_t v22 = *(void *)(Value + 48);
  char v23 = *(unsigned char *)(Value + 56);
  uint64_t v24 = *(unsigned char *)(Value + 57);
  long long v52 = *(_OWORD *)Value;
  *(void *)&long long v53 = v18;
  BYTE8(v53) = v19;
  *(void *)char v54 = v20;
  v54[8] = v21;
  *(void *)&v54[16] = v22;
  v54[24] = v23;
  v54[25] = v24;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  int v47 = v13;
  uint64_t v26 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v26 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v27 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v28 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v50, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  char v30 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v28;
  v55[0] = *(_OWORD *)(v2 + 8);
  v51[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v52, v51) & 1) == 0 && (v46 & 1) == 0)
  {
    type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
    if (AGGraphGetOutputValue()) {
      uint64_t v27 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v27 = 1;
    }
  }
  v55[0] = v52;
  v55[1] = v53;
  v56[0] = *(_OWORD *)v54;
  *(_OWORD *)((char *)v56 + 10) = *(_OWORD *)&v54[10];
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v55);
  specialized ViewBodyAccessor.updateBody(of:changed:)(v55, v27);
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v55);
  *(void *)(StatusReg + 848) = v30;
  uint64_t v31 = (uint64_t)v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v50, (uint64_t)v47, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v31, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    uint64_t v33 = v45;
    v32(v45, v31, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, v33, v3);
    swift_beginAccess();
    unint64_t v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    uint64_t v37 = *((void *)v34 + 2);
    uint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v37], (uint64_t)v49, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v50);
  uint64_t v38 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    unint64_t v39 = v4 + 16;
    unint64_t v40 = v41;
    uint64_t v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64));
    double v43 = *(void *)(v39 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v40(v6, v42, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v39 - 8))(v6, v3);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t), void (*a4)(char *, uint64_t))
{
  Swift::UInt v50 = a3;
  uint64_t v44 = a2;
  uint64_t v7 = v4;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v49 = (char *)&v43 - v13;
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v43 - v15;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  Swift::UInt v51 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v52 = (char *)&v43 - v20;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    uint64_t v56 = *(void *)(v4 + 8);
    uint64_t v57 = *(void *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  AGGraphGetValue();
  uint64_t v22 = v21;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = CurrentAttribute;
    uint64_t v45 = a4;
    uint64_t v46 = v22;
    double v43 = v16;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  uint64_t v24 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v25 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v52, 1, 1, v8);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v47 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v25;
  uint64_t v54 = *(void *)(v7 + 8);
  uint64_t v55 = *(void *)(v7 + 16);
  uint64_t Value = (int *)AGGraphGetValue();
  int v53 = *Value;
  if (_DynamicPropertyBuffer.update(container:phase:)((uint64_t)Value, &v53))
  {
    uint64_t v28 = (uint64_t)v51;
  }
  else
  {
    uint64_t v28 = (uint64_t)v51;
    if ((v46 & 1) == 0)
    {
      v44(0);
      if (AGGraphGetOutputValue()) {
        uint64_t v24 = AGGraphCurrentAttributeWasModified();
      }
      else {
        uint64_t v24 = 1;
      }
    }
  }
  v50(v24);
  *(void *)(StatusReg + 848) = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v25, v28, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    char v30 = v43;
    v29(v43, v28, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v49, v30, v8);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v34], (uint64_t)v49, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
    uint64_t v25 = (uint64_t)v52;
  }
  outlined destroy of ObservationTracking._AccessList?(v25);
  long long v52 = (char *)static ObservationRegistrar.lastestAccessLists;
  uint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v36 = v9 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = &v52[(*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64)];
    uint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    uint64_t v41 = v45;
    do
    {
      v37(v11, v39, v8);
      v41(v11, v5);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v11, v8);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    long long v52 = (char *)static ObservationRegistrar.lastestAccessLists;
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, double), void (*a4)(char *, uint64_t))
{
  Swift::UInt v50 = a3;
  uint64_t v44 = a2;
  uint64_t v7 = v4;
  v54[7] = *(double *)MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v49 = (char *)&v43 - v13;
  MEMORY[0x270FA5388](v14);
  int64_t v16 = (char *)&v43 - v15;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v17 - 8);
  Swift::UInt v51 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  long long v52 = (char *)&v43 - v20;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    v54[4] = *(double *)(v4 + 8);
    v54[5] = *(double *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = (double *)AGGraphGetValue();
  uint64_t v23 = v22;
  v54[0] = *Value;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = CurrentAttribute;
    uint64_t v45 = a4;
    uint64_t v46 = v23;
    double v43 = v16;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_5;
    }
  }
  swift_once();
LABEL_5:
  uint64_t v25 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v26 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v52, 1, 1, v8);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v47 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v26;
  v54[1] = *(double *)(v7 + 8);
  v54[2] = *(double *)(v7 + 16);
  int v53 = *(_DWORD *)AGGraphGetValue();
  if (_DynamicPropertyBuffer.update(container:phase:)((uint64_t)v54, &v53))
  {
    uint64_t v28 = (uint64_t)v51;
  }
  else
  {
    uint64_t v28 = (uint64_t)v51;
    if ((v46 & 1) == 0)
    {
      v44(0);
      if (AGGraphGetOutputValue()) {
        uint64_t v25 = AGGraphCurrentAttributeWasModified();
      }
      else {
        uint64_t v25 = 1;
      }
    }
  }
  v50(v25, v54[0]);
  *(void *)(StatusReg + 848) = v47;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v26, v28, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    char v30 = v43;
    v29(v43, v28, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v49, v30, v8);
    swift_beginAccess();
    uint64_t v31 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v31;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    unint64_t v34 = *((void *)v31 + 2);
    unint64_t v33 = *((void *)v31 + 3);
    if (v34 >= v33 >> 1)
    {
      uint64_t v31 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v31);
      static ObservationRegistrar.lastestAccessLists = v31;
    }
    *((void *)v31 + 2) = v34 + 1;
    v29(&v31[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v34], (uint64_t)v49, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
    uint64_t v26 = (uint64_t)v52;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  long long v52 = (char *)static ObservationRegistrar.lastestAccessLists;
  uint64_t v35 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v35)
  {
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v36 = v9 + 16;
    uint64_t v37 = v38;
    unint64_t v39 = &v52[(*(unsigned __int8 *)(v36 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 64)];
    uint64_t v40 = *(void *)(v36 + 56);
    swift_bridgeObjectRetain();
    uint64_t v41 = v45;
    do
    {
      v37(v11, v39, v8);
      v41(v11, v5);
      (*(void (**)(char *, uint64_t))(v36 - 8))(v11, v8);
      v39 += v40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    long long v52 = (char *)static ObservationRegistrar.lastestAccessLists;
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  return swift_bridgeObjectRelease();
}

void specialized DynamicBody.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v49 = (char *)&v45 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v46 = (char *)&v45 - v10;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v51 = (uint64_t)&v45 - v14;
  if (*(_DWORD *)(v0 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    uint64_t v55 = *(void *)(v0 + 8);
    id v56 = *(id *)(v0 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v0 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v17 = v16;
  uint64_t v19 = *(void **)(Value + 8);
  uint64_t v18 = *(void **)(Value + 16);
  LOBYTE(v55) = *(unsigned char *)Value;
  id v56 = v19;
  id v57 = v18;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v1 = CurrentAttribute;
  uint64_t v21 = one-time initialization token for lastestAccessLists;
  id v22 = v19;
  id v23 = v18;
  if (v21 != -1) {
LABEL_23:
  }
    swift_once();
  char v24 = 1;
  swift_beginAccess();
  uint64_t v48 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v25 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v51, 1, 1, v3);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v47 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v25;
  uint64_t v53 = *(void *)(v2 + 8);
  uint64_t v54 = *(void *)(v2 + 16);
  int v52 = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v55, &v52) & 1) == 0 && (v17 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
    if (AGGraphGetOutputValue()) {
      char v24 = AGGraphCurrentAttributeWasModified();
    }
    else {
      char v24 = 1;
    }
  }
  int v27 = v55;
  id v28 = v57;
  id v29 = v56;
  id v30 = v28;
  specialized ViewBodyAccessor.updateBody(of:changed:)(v27, v29, v30, v24);

  *(void *)(StatusReg + 848) = v47;
  uint64_t v31 = v50;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v51, v50, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v31, 1, v3) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v31);
  }
  else
  {
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    unint64_t v33 = v46;
    v32(v46, v31, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, v33, v3);
    swift_beginAccess();
    unint64_t v34 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v34 + 2) + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    unint64_t v37 = *((void *)v34 + 2);
    unint64_t v36 = *((void *)v34 + 3);
    if (v37 >= v36 >> 1)
    {
      unint64_t v34 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, (unint64_t)v34);
      static ObservationRegistrar.lastestAccessLists = v34;
    }
    *((void *)v34 + 2) = v37 + 1;
    v32(&v34[((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v37], (uint64_t)v49, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v33, v3);
  }
  outlined destroy of ObservationTracking._AccessList?(v51);
  uint64_t v38 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v38)
  {
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v39 = v4 + 16;
    uint64_t v40 = v41;
    uint64_t v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v39 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 64));
    uint64_t v43 = *(void *)(v39 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v40(v6, v42, v3);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v6, v1);
      (*(void (**)(char *, uint64_t))(v39 - 8))(v6, v3);
      v42 += v43;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v48;
  swift_bridgeObjectRelease();
  id v44 = v56;
}

uint64_t specialized DynamicBody.updateValue()(uint64_t a1, void (*a2)(void), void (*a3)(uint64_t *, uint64_t), void (*a4)(char *, uint64_t))
{
  uint64_t v54 = a3;
  uint64_t v48 = a2;
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v46 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v46 - v14;
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v53 = (uint64_t)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v55 = (char *)&v46 - v19;
  if (*(_DWORD *)(v4 + 24) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    uint64_t v60 = *(void *)(v4 + 8);
    *(void *)&long long v61 = *(void *)(v4 + 16);
    _DynamicPropertyBuffer.reset()();
    *(_DWORD *)(v4 + 24) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t Value = AGGraphGetValue();
  char v22 = v21;
  uint64_t v56 = *(void *)Value;
  long long v57 = *(_OWORD *)(Value + 8);
  long long v58 = *(_OWORD *)(Value + 24);
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v46 = v15;
  LOBYTE(v15) = v22;
  unsigned int v49 = CurrentAttribute;
  uint64_t v47 = v12;
  uint64_t v50 = a4;
  uint64_t v24 = one-time initialization token for lastestAccessLists;
  swift_bridgeObjectRetain();
  if (v24 != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v25 = 1;
  swift_beginAccess();
  int v52 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v26 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v55, 1, 1, v6);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v51 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v26;
  uint64_t v60 = *(void *)(v4 + 8);
  *(void *)&long long v61 = *(void *)(v4 + 16);
  v59[0] = *(_DWORD *)AGGraphGetValue();
  if ((_DynamicPropertyBuffer.update(container:phase:)((uint64_t)&v56, v59) & 1) == 0 && (v15 & 1) == 0)
  {
    v48(0);
    if (AGGraphGetOutputValue()) {
      uint64_t v25 = AGGraphCurrentAttributeWasModified();
    }
    else {
      uint64_t v25 = 1;
    }
  }
  uint64_t v60 = v56;
  long long v61 = v57;
  long long v62 = v58;
  swift_bridgeObjectRetain();
  v54(&v60, v25);
  swift_bridgeObjectRelease();
  *(void *)(StatusReg + 848) = v51;
  uint64_t v28 = v53;
  outlined init with copy of CoordinateSpaceGesture<CGFloat>(v26, v53, (uint64_t)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200], MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ObservationTracking._AccessList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v28, 1, v6) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?(v28);
  }
  else
  {
    id v29 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    id v30 = v46;
    v29(v46, v28, v6);
    uint64_t v31 = v47;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v47, v30, v6);
    swift_beginAccess();
    uint64_t v32 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v32 + 2) + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    unint64_t v35 = *((void *)v32 + 2);
    unint64_t v34 = *((void *)v32 + 3);
    if (v35 >= v34 >> 1)
    {
      uint64_t v32 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, (unint64_t)v32);
      static ObservationRegistrar.lastestAccessLists = v32;
    }
    *((void *)v32 + 2) = v35 + 1;
    v29(&v32[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v35], (uint64_t)v31, v6);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
    uint64_t v26 = (uint64_t)v55;
  }
  outlined destroy of ObservationTracking._AccessList?(v26);
  uint64_t v55 = (char *)static ObservationRegistrar.lastestAccessLists;
  uint64_t v36 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v36)
  {
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v37 = v7 + 16;
    uint64_t v38 = v39;
    uint64_t v40 = &v55[(*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64)];
    uint64_t v41 = *(void *)(v37 + 56);
    uint64_t v42 = (void (**)(char *, uint64_t))(v37 - 8);
    swift_bridgeObjectRetain();
    uint64_t v43 = v50;
    uint64_t v44 = v49;
    do
    {
      v38(v9, v40, v6);
      v43(v9, v44);
      (*v42)(v9, v6);
      v40 += v41;
      --v36;
    }
    while (v36);
    swift_bridgeObjectRelease();
    uint64_t v55 = (char *)static ObservationRegistrar.lastestAccessLists;
  }
  static ObservationRegistrar.lastestAccessLists = v52;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DynamicContainerInfo.unremoveItem(at:)(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 144);
  unint64_t v4 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      uint64_t v5 = *(void *)(v3 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v5 = MEMORY[0x24C523D60](a1, *(void *)(v1 + 144));
LABEL_5:
  swift_beginAccess();
  unsigned int v6 = *(unsigned __int8 *)(v5 + 84);
  swift_release();
  if (v6 >= 2)
  {
    if (v6 == 2)
    {
      --*(void *)(v1 + 168);
      if (v4)
      {
        uint64_t v9 = MEMORY[0x24C523D60](a1, v3);
      }
      else
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
        {
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        uint64_t v9 = swift_retain();
      }
      *(_DWORD *)(v9 + 72) = 0;
      swift_release();
      int v12 = 1;
      if (!v4) {
        goto LABEL_27;
      }
    }
    else
    {
      --*(void *)(v1 + 176);
      if (v4)
      {
        uint64_t v10 = MEMORY[0x24C523D60](a1, v3);
      }
      else
      {
        if ((a1 & 0x8000000000000000) != 0)
        {
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        uint64_t v10 = *(void *)(v3 + 8 * a1 + 32);
        swift_retain();
      }
      id v15 = *(id *)(v10 + 16);
      swift_release();
      AGSubgraphAddChild();
      AGSubgraphApply();

      int v12 = 0;
      if (!v4) {
        goto LABEL_27;
      }
    }
LABEL_22:
    int v13 = *(unsigned __int8 *)(MEMORY[0x24C523D60](a1, v3) + 48);
    swift_unknownObjectRelease();
    uint64_t v14 = MEMORY[0x24C523D60](a1, v3);
    goto LABEL_30;
  }
  if (v4)
  {
    uint64_t v7 = MEMORY[0x24C523D60](a1, v3);
    uint64_t v8 = MEMORY[0x24C523D60](a1, v3);
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v8 = swift_retain_n();
    uint64_t v7 = v8;
  }
  int v11 = *(_DWORD *)(v8 + 80);
  swift_release();
  *(_DWORD *)(v7 + 80) = v11 + 1;
  swift_release();
  int v12 = 0;
  if (v4) {
    goto LABEL_22;
  }
LABEL_27:
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v14 = *(void *)(v3 + 8 * a1 + 32);
  int v13 = *(unsigned __int8 *)(v14 + 48);
  swift_retain();
LABEL_30:
  if (!v13) {
    int v12 = 1;
  }
  swift_beginAccess();
  *(unsigned char *)(v14 + 84) = v12;
  uint64_t result = swift_release();
  if (!v12)
  {
    *(unsigned char *)(v1 + 204) = 1;
    uint64_t v17 = AGCreateWeakAttribute();
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
    {
      id v18 = (id)AGSubgraphGetCurrent();
      if (!v18)
      {
LABEL_52:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x245AA0A18);
      }
      uint64_t v19 = v18;
      id v20 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v20 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v17;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v21);
      swift_release();
      return swift_release();
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

uint64_t specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  if (swift_dynamicCast())
  {
    uint64_t v5 = v10;
    if (v10 != 1)
    {
      uint64_t v7 = v9;
      a2 = a3(&v9);
      outlined consume of Text.LineStyle?(v7, v5);
    }
  }
  return a2 & 1;
}

uint64_t specialized RepeatPhase.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  if ((*(unsigned char *)(v0 + 32) & 1) == 0)
  {
    double v3 = *(double *)(v0 + 24);
    if (v3 < *(double *)AGGraphGetValue())
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
      return AGGraphSetOutputValue();
    }
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v7 = *(void *)(Value + 16);
  switch(*(unsigned char *)(Value + 24))
  {
    case 1:
      *(void *)(v0 + 24) = 0;
      *(unsigned char *)(v0 + 32) = 1;
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
      int v13 = (void *)AGGraphGetValue();
      if (__OFSUB__(*v13, 1)) {
        __break(1u);
      }
      if (*v13 - 1 > *(unsigned int *)(v0 + 36)) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 2:
      uint64_t v8 = (*(_DWORD *)(v0 + 36) + 1);
      *(_DWORD *)(v0 + 36) = v8;
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
      uint64_t v9 = AGGraphGetValue();
      if (*(void *)v9 > v8)
      {
        *(double *)(v0 + 24) = *(double *)AGGraphGetValue() + *(double *)(v9 + 8);
        *(unsigned char *)(v0 + 32) = 0;
        swift_retain();
        AGGraphSetOutputValue();
        if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
        {
          id v10 = (id)AGSubgraphGetCurrent();
          if (!v10) {
            goto LABEL_31;
          }
          int v11 = v10;
          id v12 = (id)AGSubgraphGetGraph();
        }
        else
        {
          id v12 = (id)AGGraphGetAttributeGraph();
        }
        if (AGGraphGetContext())
        {
          swift_retain();

          int v19 = *(_DWORD *)(v1 + 16);
          uint64_t v20 = swift_allocObject();
          *(_DWORD *)(v20 + 16) = v19;
          *(_DWORD *)(v20 + 20) = v8;
          GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #2 in RepeatPhase.updateValue(), v20);
          outlined consume of GesturePhase<TappableEvent>(v6, v5, v7, 2);
          swift_release();
          uint64_t result = swift_release();
          if (*(unsigned char *)(v1 + 32)) {
            return result;
          }
          goto LABEL_16;
        }
        __break(1u);
LABEL_31:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x245AA7B24);
      }
      *(void *)(v0 + 24) = 0;
      *(unsigned char *)(v0 + 32) = 1;
LABEL_14:
      AGGraphGetValue();
LABEL_15:
      uint64_t result = AGGraphSetOutputValue();
      if ((*(unsigned char *)(v0 + 32) & 1) == 0)
      {
LABEL_16:
        double v14 = *(double *)(v1 + 24);
        if (*(unsigned char *)(v1 + 20) == 1)
        {
          uint64_t v15 = specialized static GestureGraph.current.getter();
          double v16 = *(double *)(v15 + 264);
          if (v14 < v16) {
            double v16 = v14;
          }
          *(double *)(v15 + 264) = v16;
        }
        else
        {
          uint64_t v17 = specialized static ViewGraph.current.getter();
          swift_beginAccess();
          double v18 = *(double *)(v17 + 400);
          if (v14 < v18) {
            double v18 = v14;
          }
          *(double *)(v17 + 400) = v18;
        }
        return swift_release();
      }
      return result;
    default:
      goto LABEL_15;
  }
}

void specialized AnyGestureInfo.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 168);
  double v3 = *(void **)(v0 + 176);
  int v4 = *(_DWORD *)(v0 + 184);
  uint64_t v5 = MEMORY[0x263F8EE60];
  if (v2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for AnyGesture<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
    uint64_t Value = (void *)AGGraphGetValue();
    if ((*(uint64_t (**)(void))(*(void *)v2 + 88))(*Value))
    {
      uint64_t v7 = *(void *)AGGraphGetValue();
      outlined copy of AnyGestureInfo<()>.Value?(v2, v3);
      swift_retain();
      swift_release();
      int v8 = v4;
      uint64_t v9 = v3;
      goto LABEL_8;
    }
    swift_retain();
    id v11 = v3;
    specialized AnyGestureInfo.eraseItem(info:)();

    swift_release();
    unsigned int v10 = v4 + 1;
  }
  else
  {
    unsigned int v10 = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for AnyGesture<()>, v5 + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGesture);
  uint64_t v12 = *(void *)AGGraphGetValue();
  id v13 = (id)AGSubgraphGetGraph();
  swift_retain();
  double v14 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  Currentint Attribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8]) {
    __break(1u);
  }
  unsigned int v16 = CurrentAttribute;
  AGGraphClearUpdate();
  uint64_t v17 = v3;
  id v18 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t v7 = specialized closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(v1, v16, v12, v10, v14);
  uint64_t v9 = v19;
  int v8 = v20;
  AGSubgraphSetCurrent();

  double v3 = v17;
  uint64_t v5 = MEMORY[0x263F8EE60];
  AGGraphSetUpdate();
  swift_release();

LABEL_8:
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for AnyGestureInfo<()>.Value, v5 + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyGestureInfo.Value);
  AGGraphSetOutputValue();
  outlined consume of AnyGestureInfo<()>.Value?((uint64_t)v2, v3);
  *(void *)(v1 + 168) = v7;
  *(void *)(v1 + 176) = v9;
  *(_DWORD *)(v1 + 184) = v8;
}

uint64_t specialized closure #1 in AnyGestureInfo.makeItem(_:uniqueId:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  void (*v22)(uint64_t *__return_ptr, void, void, _OWORD *);
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  id v28;
  char v30;
  long long v31;
  long long v32;
  long long v34;
  long long v35;
  int v36;
  uint64_t v37;
  long long v38;
  int v39;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _OWORD v46[6];
  unsigned char v47[28];
  long long v48;
  long long v49;
  unsigned char v50[48];
  unsigned char v51[44];
  long long v52;
  long long v53;
  unsigned char v54[48];
  unsigned char v55[44];
  uint64_t v56;

  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v6 = *(_OWORD *)(a1 + 24);
  uint64_t v48 = *(_OWORD *)(a1 + 8);
  unsigned int v49 = v6;
  long long v7 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v50[32] = *(_OWORD *)(a1 + 72);
  *(_OWORD *)uint64_t v51 = v7;
  *(_OWORD *)&v51[16] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v51[28] = *(_OWORD *)(a1 + 116);
  long long v8 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v50[16] = v8;
  uint64_t v37 = v48;
  uint64_t v36 = DWORD2(v48);
  uint64_t v39 = v7;
  uint64_t v38 = *(_OWORD *)&v51[8];
  uint64_t v9 = *((void *)&v49 + 1);
  uint64_t v10 = *(void *)v50;
  unint64_t v34 = *(_OWORD *)&v50[24];
  unint64_t v35 = *(_OWORD *)&v50[8];
  uint64_t v11 = *(void *)&v50[40];
  uint64_t v12 = *(void *)&v51[24];
  uint64_t v13 = *(void *)&v51[36];
  swift_beginAccess();
  int v14 = *(_DWORD *)(v49 + 16);
  uint64_t v15 = *(void *)(v49 + 24);
  uint64_t v31 = *(_OWORD *)(v49 + 48);
  uint64_t v32 = *(_OWORD *)(v49 + 32);
  uint64_t v16 = *(void *)(v49 + 64);
  uint64_t v17 = *(void *)(v49 + 72);
  char v18 = *(unsigned char *)(v49 + 80);
  id v30 = *(unsigned char *)(v49 + 81);
  uint64_t v19 = *(void *)(v49 + 88);
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v14;
  *(void *)(v20 + 24) = v15;
  *(_OWORD *)(v20 + 32) = v32;
  *(_OWORD *)(v20 + 48) = v31;
  *(void *)(v20 + 64) = v16;
  *(void *)(v20 + 72) = v17;
  *(unsigned char *)(v20 + 80) = v18;
  *(unsigned char *)(v20 + 81) = v30;
  *(void *)(v20 + 88) = v19;
  outlined retain of _GestureInputs((uint64_t)&v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  LODWORD(v52) = *(_DWORD *)(a1 + 120);
  DWORD1(v52) = a2;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for AnyResetSeed<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyResetSeed);
  lazy protocol witness table accessor for type AnyResetSeed<()> and conformance AnyResetSeed<A>();
  int v21 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&int v52 = v37;
  DWORD2(v52) = v36;
  *(void *)&uint64_t v53 = v20;
  *((void *)&v53 + 1) = v9;
  *(void *)uint64_t v54 = v10;
  *(_OWORD *)&v54[8] = v35;
  *(_OWORD *)&v54[24] = v34;
  *(void *)&v54[40] = v11;
  *(_DWORD *)uint64_t v55 = v39;
  *(_OWORD *)&v55[8] = v38;
  *(void *)&v55[24] = v12;
  *(_DWORD *)&v55[32] = v21;
  *(void *)&v55[36] = v13;
  char v46[4] = *(_OWORD *)&v54[32];
  v46[5] = *(_OWORD *)v55;
  *(_OWORD *)uint64_t v47 = *(_OWORD *)&v55[16];
  *(_OWORD *)&v47[12] = *(_OWORD *)&v55[28];
  v46[0] = v52;
  v46[1] = v53;
  id v46[2] = *(_OWORD *)v54;
  v46[3] = *(_OWORD *)&v54[16];
  char v22 = *(void (**)(uint64_t *__return_ptr, void, void, _OWORD *))(*(void *)a3 + 96);
  outlined retain of _GestureInputs((uint64_t)&v52);
  v22(&v43, a4, a2, v46);
  outlined release of _GestureInputs((uint64_t)&v52);
  id v23 = HIDWORD(v43);
  uint64_t v24 = v44;
  uint64_t v25 = v45;
  LODWORD(v15) = *(_DWORD *)(a1 + 140);
  uint64_t v26 = *(void *)(a1 + 144);
  int v27 = *(_DWORD *)(a1 + 152);
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  if (v15 != *MEMORY[0x263F288F8] && v23 != *MEMORY[0x263F288F8]) {
    AGGraphSetIndirectAttribute();
  }
  *(void *)&v46[0] = v26;
  DWORD2(v46[0]) = v27;
  uint64_t v43 = v24;
  LODWORD(v44) = v25;
  PreferencesOutputs.attachIndirectOutputs(to:)((uint64_t)&v43);
  swift_bridgeObjectRelease();
  outlined release of _GestureInputs((uint64_t)&v52);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v28 = a5;
  return a3;
}

uint64_t specialized Map2Phase.updateValue()(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  void (*v18)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  id v29 = *MEMORY[0x263EF8340];
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    type metadata accessor for (_:_:)(0, a1, a2, a3);
    char v18 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))AGGraphGetValue();
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)(Value + 8);
    uint64_t v10 = *(void *)(Value + 16);
    int v21 = *(void *)Value;
    uint64_t v8 = v21;
    char v22 = v9;
    id v23 = v10;
    uint64_t v24 = *(unsigned char *)(Value + 24);
    char v11 = v24;
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t v12 = AGGraphGetValue();
    __int16 v13 = *(_WORD *)(v12 + 8);
    uint64_t v19 = *(void *)v12;
    uint64_t v20 = v13;
    swift_retain();
    outlined copy of GesturePhase<TappableEvent>(v21, v9, v10, v24);
    v18(&v25, &v21, &v19);
    swift_release();
    outlined consume of GesturePhase<TappableEvent>(v8, v9, v10, v11);
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    uint64_t v16 = v27;
    char v17 = v28;
    int v21 = v25;
    char v22 = v26;
    id v23 = v27;
    uint64_t v24 = v28;
    AGGraphSetOutputValue();
    return outlined consume of GesturePhase<TappableEvent>(v14, v15, v16, v17);
  }
  return result;
}

uint64_t specialized DurationPhase.updateValue()()
{
  uint64_t result = specialized ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    double v2 = *(double *)(v0 + 24);
    if (*(unsigned char *)(v0 + 32))
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
      if (*(unsigned __int8 *)(AGGraphGetValue() + 24) - 1 < 2
        || (type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture), (*(unsigned char *)(AGGraphGetValue() + 16) & 1) != 0))
      {
        uint64_t Value = (double *)AGGraphGetValue();
        char v4 = 0;
        double v5 = *Value;
        *(double *)(v0 + 24) = *Value;
        double v2 = v5;
        *(unsigned char *)(v0 + 32) = 0;
      }
      else
      {
        char v4 = 1;
      }
      double v6 = 0.0;
    }
    else
    {
      char v4 = 0;
      double v6 = *(double *)AGGraphGetValue() - v2;
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    switch(*(unsigned char *)(AGGraphGetValue() + 24))
    {
      case 1:
        if (v4)
        {
          __break(1u);
LABEL_33:
          __break(1u);
          JUMPOUT(0x245AA87A0);
        }
        type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
        long long v7 = (double *)AGGraphGetValue();
        if (*v7 > v6 || v7[1] > v6)
        {
LABEL_19:
          type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
          uint64_t v8 = (double *)AGGraphGetValue();
          double v9 = *v8;
          if (*v8 <= v6) {
            double v9 = v8[1];
          }
          double v10 = v9 + v2;
          if (*(unsigned char *)(v0 + 16) == 1)
          {
            uint64_t v11 = specialized static GestureGraph.current.getter();
            double v12 = *(double *)(v11 + 264);
            if (v10 < v12) {
              double v12 = v10;
            }
            *(double *)(v11 + 264) = v12;
          }
          else
          {
            uint64_t v13 = specialized static ViewGraph.current.getter();
            swift_beginAccess();
            double v14 = *(double *)(v13 + 400);
            if (v10 < v14) {
              double v14 = v10;
            }
            *(double *)(v13 + 400) = v14;
          }
          swift_release();
        }
        break;
      case 2:
        if (v4) {
          goto LABEL_33;
        }
        type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
        AGGraphGetValue();
        break;
      case 3:
        break;
      default:
        if (v4) {
          break;
        }
        goto LABEL_19;
    }
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(void (*a1)(void), void (*a2)(long long *, void, void, uint64_t))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1(0);
  long long v6 = *(_OWORD *)AGGraphGetValue();
  char v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

unsigned __int8 *specialized ValueTransactionSeed.updateValue()()
{
  uint64_t result = (unsigned __int8 *)AGGraphGetValue();
  int v2 = *result;
  int v3 = *(unsigned __int8 *)(v0 + 8);
  if (v3 != 2)
  {
    if ((v2 ^ ((v3 & 1) == 0))) {
      return result;
    }
    AGGraphClearUpdate();
    AGGraphGetValue();
    AGGraphSetUpdate();
  }
  uint64_t result = (unsigned __int8 *)AGGraphSetOutputValue();
  *(unsigned char *)(v0 + 8) = v2;
  return result;
}

uint64_t specialized TracingLayoutEngineBox.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 1;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  BOOL v7 = CurrentAttribute == *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8]) {
    int v8 = 0;
  }
  else {
    int v8 = CurrentAttribute;
  }
  *(_DWORD *)(v3 + 32) = v8;
  *(unsigned char *)(v3 + 36) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  double v9 = *(void **)(a1 + 216);
  if (v9)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    id v10 = objc_msgSend(v9, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();
    swift_release();

    uint64_t v11 = *(unsigned int *)(v3 + 32);
    unsigned __int8 v12 = *(unsigned char *)(v3 + 36);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v11 | ((unint64_t)v12 << 32));
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  return v3;
}

uint64_t specialized TracingLayoutEngineBox.init(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  *(_DWORD *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 36) = 1;
  Currentint Attribute = AGGraphGetCurrentAttribute();
  BOOL v7 = CurrentAttribute == *MEMORY[0x263F288F8];
  if (CurrentAttribute == *MEMORY[0x263F288F8]) {
    int v8 = 0;
  }
  else {
    int v8 = CurrentAttribute;
  }
  *(_DWORD *)(v3 + 32) = v8;
  *(unsigned char *)(v3 + 36) = v7;
  *(_DWORD *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  swift_retain();
  swift_retain();
  specialized SizeFittingTextLayoutComputer.Engine.debugContentDescription.getter(a1, a2);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(v3 + 32);
    unsigned __int8 v11 = *(unsigned char *)(v3 + 36);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      swift_retain();
      LayoutTrace.Recorder.traceContentDescription(_:_:)(v10 | ((unint64_t)v11 << 32));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  return v3;
}

uint64_t specialized SingleTapGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for tapMovementThreshold != -1) {
    swift_once();
  }
  uint64_t v2 = tapMovementThreshold;
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  LOBYTE(v11) = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v8, (uint64_t)v7);
  uint64_t v3 = MEMORY[0x263F8EF38];
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v7, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t)type metadata accessor for CoordinateSpaceGesture, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>);
  v16[0] = 0;
  v16[1] = v2;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v7, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, v3, (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined destroy of CoordinateSpace((uint64_t)&v8);
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 1;
  outlined init with copy of ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>((uint64_t)v16, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  unsigned char v7[8] = specialized closure #1 in Gesture.gated<A>(by:);
  v7[9] = 0;
  outlined init with copy of ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>((uint64_t)v7, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  LOBYTE(v8) = 0;
  *((void *)&v8 + 1) = partial apply for specialized closure #1 in Gesture.discrete(_:);
  *(void *)&long long v9 = v4;
  BYTE8(v9) = 3;
  LOBYTE(v10) = 0;
  long long v11 = xmmword_2461BE2C0;
  char v12 = 0;
  uint64_t v13 = specialized closure #1 in Gesture.gated<A>(by:);
  uint64_t v14 = 0;
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 1;
  *(void *)(v5 + 24) = closure #1 in SingleTapGesture.body.getter;
  *(void *)(v5 + 32) = 0;
  outlined init with copy of ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>((uint64_t)&v8, a1, (uint64_t (*)(void))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
  *(void *)(a1 + 160) = partial apply for specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:);
  *(void *)(a1 + 168) = v5;
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
  return outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (void *)result;
    while (1)
    {
      while ((a3 & ~v5[7]) != 0)
      {
        uint64_t v5 = (void *)v5[5];
        if (!v5) {
          return 0;
        }
      }
      uint64_t v6 = v5[3];
      if (v6)
      {
        uint64_t result = specialized find1<A>(_:key:filter:)(v6, a2, a3);
        if (result) {
          return result;
        }
      }
      if (v5[2] == a2) {
        break;
      }
      uint64_t v5 = (void *)v5[4];
      if (!v5) {
        return 0;
      }
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized ForEachList.Init.updateValue()()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v1 = *(_DWORD *)(v0 + 4);
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Info);
  AGGraphGetValue();
  swift_retain();
  specialized ForEachState.invalidateViewCounts()();
  swift_release();
  *(_DWORD *)(v0 + 4) = v1 + 1;
  uint64_t v2 = *(void *)AGGraphGetValue();
  type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(0, &lazy cache variable for type metadata for ForEachList<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachList);
  uint64_t v7 = v3;
  long long v8 = &protocol witness table for ForEachList<A, B, C>;
  uint64_t v5 = v2;
  int v6 = v1 + 1;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
}

uint64_t specialized SizeThatFitsTransactions.updateValue()()
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  if (!*(void *)(*(void *)(v0 + 32) + 16))
  {
    type metadata accessor for [_ProposedSize : Transaction]();
    uint64_t result = AGGraphGetOutputValue();
    if (result && !*(void *)(*(void *)result + 16)) {
      return result;
    }
    goto LABEL_11;
  }
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue
    || (uint64_t v2 = *WeakValue, (v3 = (unsigned __int8 *)AGGraphGetWeakValue()) == 0)
    || (int v4 = *v3, (v5 = (uint64_t *)AGGraphGetWeakValue()) == 0))
  {
    type metadata accessor for [_ProposedSize : Transaction]();
    uint64_t result = AGGraphGetOutputValue();
    if (result) {
      return result;
    }
LABEL_11:
    unint64_t v109 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of SafeAreaInsets.OptionalValue?(v6);
  AGGraphClearUpdate();
  long long v8 = (uint64_t *)AGGraphGetWeakValue();
  if (v8)
  {
    uint64_t v100 = *v8;
    swift_retain();
  }
  else
  {
    uint64_t v100 = 1;
  }
  AGGraphSetUpdate();
  uint64_t v10 = *(void *)(v7 + 16);
  if (!v10)
  {
    float64x2_t v12 = 0uLL;
    float64x2_t v13 = 0uLL;
    goto LABEL_24;
  }
  if (v10 == 1)
  {
    uint64_t v11 = 0;
    float64x2_t v12 = 0uLL;
    float64x2_t v13 = 0uLL;
LABEL_22:
    uint64_t v20 = v10 - v11;
    int v21 = (float64x2_t *)(v7 + 40 * v11 + 40);
    do
    {
      float64x2_t v13 = vaddq_f64(v13, v21[1]);
      float64x2_t v12 = vaddq_f64(v12, *v21);
      int v21 = (float64x2_t *)((char *)v21 + 40);
      --v20;
    }
    while (v20);
    goto LABEL_24;
  }
  uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v14 = (float64x2_t *)(v7 + 80);
  float64x2_t v12 = 0uLL;
  uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFFELL;
  float64x2_t v13 = 0uLL;
  do
  {
    float64x2_t v16 = *(float64x2_t *)((char *)v14 - 24);
    float64x2_t v17 = *(float64x2_t *)((char *)v14 - 40);
    float64x2_t v18 = *v14;
    float64x2_t v19 = v14[1];
    v14 += 5;
    float64x2_t v13 = vaddq_f64(vaddq_f64(v13, v16), v19);
    float64x2_t v12 = vaddq_f64(vaddq_f64(v12, v17), v18);
    v15 -= 2;
  }
  while (v15);
  if (v10 != v11) {
    goto LABEL_22;
  }
LABEL_24:
  double v105 = v13.f64[0];
  double v107 = v12.f64[0];
  if (v4) {
    double v22 = v12.f64[1];
  }
  else {
    double v22 = v13.f64[1];
  }
  if (v4) {
    double v23 = v13.f64[1];
  }
  else {
    double v23 = v12.f64[1];
  }
  if (v12.f64[1] == v13.f64[1]) {
    double v24 = v13.f64[1];
  }
  else {
    double v24 = v22;
  }
  if (v12.f64[1] == v13.f64[1]) {
    double v25 = v12.f64[1];
  }
  else {
    double v25 = v23;
  }
  type metadata accessor for [_ProposedSize : Transaction]();
  Outputuint64_t Value = (unint64_t *)AGGraphGetOutputValue();
  uint64_t v99 = v6;
  if (OutputValue)
  {
    unint64_t v101 = *OutputValue;
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v101 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  uint64_t v27 = *(void *)(v0 + 32);
  uint64_t v28 = *(void *)(v27 + 64);
  uint64_t v102 = v27 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v31 = v30 & v28;
  int64_t v103 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v104 = *(void *)(v0 + 32);
  double v32 = v25 + v24;
  double v33 = v107 + v105;
  double v34 = -v24 - v25;
  double v35 = -v105 - v107;
  swift_bridgeObjectRetain();
  char v36 = 0;
  int64_t v108 = 0;
  uint64_t v106 = v0;
  while (1)
  {
    if (v31)
    {
      unint64_t v37 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v38 = v37 | (v108 << 6);
      goto LABEL_62;
    }
    int64_t v39 = v108 + 1;
    if (__OFADD__(v108, 1))
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
    }
    if (v39 >= v103) {
      goto LABEL_117;
    }
    unint64_t v40 = *(void *)(v102 + 8 * v39);
    int64_t v41 = v108 + 1;
    if (v40) {
      goto LABEL_61;
    }
    int64_t v41 = v108 + 2;
    if (v108 + 2 >= v103) {
      goto LABEL_117;
    }
    unint64_t v40 = *(void *)(v102 + 8 * v41);
    if (v40) {
      goto LABEL_61;
    }
    int64_t v41 = v108 + 3;
    if (v108 + 3 >= v103) {
      goto LABEL_117;
    }
    unint64_t v40 = *(void *)(v102 + 8 * v41);
    if (v40) {
      goto LABEL_61;
    }
    int64_t v41 = v108 + 4;
    if (v108 + 4 >= v103) {
      goto LABEL_117;
    }
    unint64_t v40 = *(void *)(v102 + 8 * v41);
    if (v40) {
      goto LABEL_61;
    }
    int64_t v41 = v108 + 5;
    if (v108 + 5 >= v103) {
      goto LABEL_117;
    }
    unint64_t v40 = *(void *)(v102 + 8 * v41);
    if (v40) {
      goto LABEL_61;
    }
    int64_t v42 = v108 + 6;
    if (v108 + 6 >= v103)
    {
LABEL_117:
      swift_release();
      if ((v36 & 1) == 0 && AGGraphGetOutputValue())
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Transaction?(v99);
        return outlined consume of Transaction?(v100);
      }
      unint64_t v109 = v101;
      AGGraphSetOutputValue();
      swift_release();
      outlined consume of Transaction?(v100);
      swift_bridgeObjectRelease();
      outlined consume of Transaction?(v99);
      return swift_bridgeObjectRelease();
    }
    unint64_t v40 = *(void *)(v102 + 8 * v42);
    if (!v40)
    {
      while (1)
      {
        int64_t v41 = v42 + 1;
        if (__OFADD__(v42, 1)) {
          goto LABEL_126;
        }
        if (v41 >= v103) {
          goto LABEL_117;
        }
        unint64_t v40 = *(void *)(v102 + 8 * v41);
        ++v42;
        if (v40) {
          goto LABEL_61;
        }
      }
    }
    int64_t v41 = v108 + 6;
LABEL_61:
    unint64_t v31 = (v40 - 1) & v40;
    int64_t v108 = v41;
    unint64_t v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_62:
    uint64_t v43 = *(void *)(v104 + 48) + 32 * v38;
    uint64_t v44 = *(void *)v43;
    char v45 = *(unsigned char *)(v43 + 8);
    double v46 = *(double *)(v43 + 16);
    char v47 = *(unsigned char *)(v43 + 24);
    double v48 = *(double *)v43 - v32;
    if (v48 < 0.0) {
      double v48 = 0.0;
    }
    if (*(unsigned char *)(v43 + 8)) {
      double v49 = *(double *)v43;
    }
    else {
      double v49 = v48;
    }
    double v50 = v46 - v33;
    if (v46 - v33 < 0.0) {
      double v50 = 0.0;
    }
    if (*(unsigned char *)(v43 + 24)) {
      double v51 = *(double *)(v43 + 16);
    }
    else {
      double v51 = v50;
    }
    uint64_t v52 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v52 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    unint64_t v109 = *(void *)&v49;
    char v110 = v45;
    double v111 = v51;
    char v112 = v47;
    double v53 = (*(double (**)(unint64_t *))(*(void *)v2 + 120))(&v109);
    double v55 = v54;
    swift_release();
    if (v53 - v34 < 0.0) {
      double v56 = 0.0;
    }
    else {
      double v56 = v53 - v34;
    }
    if (v55 - v35 < 0.0) {
      double v57 = 0.0;
    }
    else {
      double v57 = v55 - v35;
    }
    uint64_t v58 = *(void *)(v106 + 32);
    if (*(void *)(v58 + 16))
    {
      LOBYTE(v109) = v45;
      unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
      if (v60)
      {
        long long v61 = (double *)(*(void *)(v58 + 56) + 16 * v59);
        if (*v61 == v56 && v61[1] == v57) {
          continue;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v109 = *(void *)(v106 + 32);
    unint64_t v64 = v109;
    *(void *)(v106 + 32) = 0x8000000000000000;
    unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
    uint64_t v67 = *(void *)(v64 + 16);
    BOOL v68 = (v65 & 1) == 0;
    uint64_t v69 = v67 + v68;
    if (__OFADD__(v67, v68)) {
      goto LABEL_124;
    }
    char v70 = v65;
    if (*(void *)(v64 + 24) >= v69)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v73 = (void *)v109;
        if ((v65 & 1) == 0) {
          goto LABEL_99;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v73 = (void *)v109;
        if ((v70 & 1) == 0) {
          goto LABEL_99;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, isUniquelyReferenced_nonNull_native);
      unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
      if ((v70 & 1) != (v72 & 1)) {
        goto LABEL_130;
      }
      unint64_t v66 = v71;
      uint64_t v73 = (void *)v109;
      if ((v70 & 1) == 0)
      {
LABEL_99:
        v73[(v66 >> 6) + 8] |= 1 << v66;
        uint64_t v75 = v73[6] + 32 * v66;
        *(void *)uint64_t v75 = v44;
        *(unsigned char *)(v75 + 8) = v45;
        *(double *)(v75 + 16) = v46;
        *(unsigned char *)(v75 + 24) = v47;
        uint64_t v76 = (double *)(v73[7] + 16 * v66);
        double *v76 = v56;
        v76[1] = v57;
        uint64_t v77 = v73[2];
        BOOL v78 = __OFADD__(v77, 1);
        uint64_t v79 = v77 + 1;
        if (v78) {
          goto LABEL_125;
        }
        v73[2] = v79;
        goto LABEL_101;
      }
    }
    int64_t v74 = (double *)(v73[7] + 16 * v66);
    *int64_t v74 = v56;
    v74[1] = v57;
LABEL_101:
    *(void *)(v106 + 32) = v73;
    swift_bridgeObjectRelease();
    if (v100 == 1)
    {
      LOBYTE(v109) = v45;
      unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
      char v36 = 1;
      if (v81)
      {
        unint64_t v82 = v80;
        uint64_t v83 = v101;
        char v84 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v109 = v101;
        if ((v84 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v83 = v109;
        }
        unint64_t v101 = v83;
        specialized _NativeDictionary._delete(at:)(v82, v83);
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_retain();
      char v85 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v109 = v101;
      unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
      uint64_t v88 = *(void *)(v101 + 16);
      BOOL v89 = (v86 & 1) == 0;
      uint64_t v90 = v88 + v89;
      if (__OFADD__(v88, v89)) {
        goto LABEL_127;
      }
      char v91 = v86;
      if (*(void *)(v101 + 24) >= v90)
      {
        if ((v85 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v90, v85);
        unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45, *(uint64_t *)&v46, v47);
        if ((v91 & 1) != (v93 & 1)) {
          goto LABEL_130;
        }
        unint64_t v87 = v92;
      }
      unsigned __int8 v94 = (void *)v109;
      unint64_t v101 = v109;
      if (v91)
      {
        uint64_t v95 = *(void *)(v109 + 56);
        swift_release();
        *(void *)(v95 + 8 * v87) = v100;
      }
      else
      {
        *(void *)(v109 + 8 * (v87 >> 6) + 64) |= 1 << v87;
        uint64_t v96 = v94[6] + 32 * v87;
        *(void *)uint64_t v96 = v44;
        *(unsigned char *)(v96 + 8) = v45;
        *(double *)(v96 + 16) = v46;
        *(unsigned char *)(v96 + 24) = v47;
        *(void *)(v94[7] + 8 * v87) = v100;
        uint64_t v97 = v94[2];
        BOOL v78 = __OFADD__(v97, 1);
        uint64_t v98 = v97 + 1;
        if (v78) {
          goto LABEL_128;
        }
        v94[2] = v98;
      }
      swift_bridgeObjectRelease();
      char v36 = 1;
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_130:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unsigned int *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unsigned __int8 *(*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unsigned int *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

{
  return specialized DynamicBody.updateValue()();
}

unsigned __int8 *specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return specialized ValueTransactionSeed.updateValue()();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = *(void *)(a1 + 8);
  Swift::Int result = _minimumMergeRunLength(_:)(v5);
  Swift::Int v130 = v5;
  if (result >= v5)
  {
    if (v5 < 0) {
      goto LABEL_183;
    }
    if ((unint64_t)v5 <= 1) {
      return result;
    }
    uint64_t v109 = 0;
    uint64_t v14 = *(char **)a1;
    uint64_t v110 = 1;
LABEL_127:
    Swift::Int result = *(unsigned int *)&v14[4 * v110];
    uint64_t v111 = v109;
    while (1)
    {
      unint64_t v56 = (unint64_t)&v14[4 * v111];
      unint64_t v112 = *(unsigned int *)v56;
      uint64_t v113 = *(void *)(a2 + 144);
      if ((v113 & 0xC000000000000001) != 0)
      {
        uint64_t v114 = MEMORY[0x24C523D60](result);
      }
      else
      {
        if (*(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)result)
        {
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          uint64_t v11 = v128;
LABEL_141:
          uint64_t v128 = v11;
          if (v56 >= 2)
          {
            uint64_t v119 = *v126;
            do
            {
              unint64_t v120 = v56 - 2;
              if (v56 < 2) {
                goto LABEL_175;
              }
              if (!v119) {
                goto LABEL_191;
              }
              uint64_t v121 = *(void *)&v14[16 * v120 + 32];
              uint64_t v122 = *(void *)&v14[16 * v56 + 24];
              specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v119 + 4 * v121), (char *)(v119 + 4 * *(void *)&v14[16 * v56 + 16]), v119 + 4 * v122, v133, a2);
              if (v134) {
                break;
              }
              if (v122 < v121) {
                goto LABEL_176;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
              }
              if (v120 >= *((void *)v14 + 2)) {
                goto LABEL_177;
              }
              Swift::String v123 = &v14[16 * v120 + 32];
              *(void *)Swift::String v123 = v121;
              *((void *)v123 + 1) = v122;
              unint64_t v124 = *((void *)v14 + 2);
              if (v56 > v124) {
                goto LABEL_178;
              }
              memmove(&v14[16 * v56 + 16], &v14[16 * v56 + 32], 16 * (v124 - v56));
              *((void *)v14 + 2) = v124 - 1;
              unint64_t v56 = v124 - 1;
            }
            while (v124 > 2);
          }
LABEL_152:
          swift_bridgeObjectRelease();
          *(void *)(v128 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        uint64_t v114 = swift_retain();
      }
      double v115 = *(double *)(v114 + 64);
      swift_release();
      uint64_t v116 = *(void *)(a2 + 144);
      if ((v116 & 0xC000000000000001) != 0)
      {
        uint64_t v117 = MEMORY[0x24C523D60](v112);
      }
      else
      {
        if (*(void *)((v116 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v112) {
          goto LABEL_154;
        }
        uint64_t v117 = swift_retain();
      }
      double v118 = *(double *)(v117 + 64);
      Swift::Int result = swift_release();
      if (v115 < v118)
      {
        if (!v14) {
          goto LABEL_187;
        }
        Swift::Int result = *(unsigned int *)(v56 + 4);
        *(_DWORD *)(v56 + 4) = *(_DWORD *)&v14[4 * v111];
        *(_DWORD *)&v14[4 * v111--] = result;
        if (v111 != -1) {
          continue;
        }
      }
      ++v110;
      ++v109;
      if (v110 == v130) {
        return result;
      }
      goto LABEL_127;
    }
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_192;
  }
  Swift::Int v8 = result;
  uint64_t v134 = v2;
  Swift::String v126 = (uint64_t *)a1;
  if (v5 < 2)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    Swift::String v133 = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v5 != 1)
    {
      unint64_t v56 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v14 = (char *)MEMORY[0x263F8EE78];
      goto LABEL_141;
    }
    uint64_t v128 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v9 = v7 >> 1;
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v10 + 16) = v9;
    uint64_t v128 = v10;
    Swift::String v133 = (char *)(v10 + 32);
  }
  Swift::Int v12 = 0;
  float64x2_t v13 = *(char **)a1;
  uint64_t v127 = *(void *)a1 + 8;
  uint64_t v125 = *(void *)a1 - 4;
  uint64_t v14 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v129 = v8;
  uint64_t v135 = a2;
  while (1)
  {
    Swift::Int v15 = v12;
    Swift::Int v16 = v12 + 1;
    if (v12 + 1 >= v5) {
      goto LABEL_46;
    }
    unint64_t v17 = *(unsigned int *)&v13[4 * v16];
    unint64_t v18 = *(unsigned int *)&v13[4 * v12];
    uint64_t v19 = *(void *)(a2 + 144);
    if ((v19 & 0xC000000000000001) != 0)
    {
      uint64_t v20 = MEMORY[0x24C523D60](v17);
    }
    else
    {
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v17) {
        goto LABEL_180;
      }
      uint64_t v20 = swift_retain();
    }
    double v21 = *(double *)(v20 + 64);
    swift_release();
    uint64_t v22 = *(void *)(a2 + 144);
    if ((v22 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = MEMORY[0x24C523D60](v18);
    }
    else
    {
      if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v18) {
        goto LABEL_181;
      }
      uint64_t v23 = swift_retain();
    }
    double v24 = *(double *)(v23 + 64);
    swift_release();
    Swift::Int v16 = v15 + 2;
    if (v15 + 2 < v5) {
      break;
    }
LABEL_36:
    if (v21 < v24) {
      goto LABEL_37;
    }
LABEL_46:
    if (v16 < v5)
    {
      if (__OFSUB__(v16, v15)) {
        goto LABEL_182;
      }
      if (v16 - v15 < v8)
      {
        if (__OFADD__(v15, v8)) {
          goto LABEL_184;
        }
        if (v15 + v8 >= v5) {
          Swift::Int v39 = v5;
        }
        else {
          Swift::Int v39 = v15 + v8;
        }
        if (v39 < v15)
        {
LABEL_185:
          __break(1u);
          goto LABEL_186;
        }
        if (v16 != v39)
        {
          unint64_t v40 = (unsigned int *)(v125 + 4 * v16);
          Swift::Int v131 = v39;
          do
          {
            unint64_t v41 = *(unsigned int *)&v13[4 * v16];
            Swift::Int v42 = v15;
            Swift::Int v43 = v15;
            uint64_t v44 = v40;
            do
            {
              unint64_t v45 = *v44;
              uint64_t v46 = *(void *)(a2 + 144);
              if ((v46 & 0xC000000000000001) != 0)
              {
                uint64_t v47 = MEMORY[0x24C523D60](v41);
              }
              else
              {
                if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v41)
                {
                  __break(1u);
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
                  goto LABEL_185;
                }
                uint64_t v47 = swift_retain();
              }
              double v48 = *(double *)(v47 + 64);
              swift_release();
              uint64_t v49 = *(void *)(a2 + 144);
              if ((v49 & 0xC000000000000001) != 0)
              {
                uint64_t v50 = MEMORY[0x24C523D60](v45);
              }
              else
              {
                if (*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v45) {
                  goto LABEL_157;
                }
                uint64_t v50 = swift_retain();
              }
              double v51 = *(double *)(v50 + 64);
              swift_release();
              if (v48 >= v51) {
                break;
              }
              if (!v13) {
                goto LABEL_188;
              }
              unsigned int v52 = *v44;
              unint64_t v41 = v44[1];
              *uint64_t v44 = v41;
              v44[1] = v52;
              --v44;
              ++v43;
            }
            while (v16 != v43);
            ++v16;
            ++v40;
            Swift::Int v15 = v42;
          }
          while (v16 != v131);
          Swift::Int v16 = v131;
        }
      }
    }
    if (v16 < v15) {
      goto LABEL_179;
    }
    Swift::Int v53 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
    }
    unint64_t v55 = *((void *)v14 + 2);
    unint64_t v54 = *((void *)v14 + 3);
    unint64_t v56 = v55 + 1;
    if (v55 >= v54 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v56;
    double v57 = v14 + 32;
    uint64_t v58 = &v14[16 * v55 + 32];
    *(void *)uint64_t v58 = v15;
    *((void *)v58 + 1) = v53;
    if (v55)
    {
      Swift::Int v12 = v53;
      a2 = v135;
      Swift::Int v132 = v12;
      while (1)
      {
        unint64_t v59 = v56 - 1;
        if (v56 >= 4)
        {
          unint64_t v64 = &v57[16 * v56];
          uint64_t v65 = *((void *)v64 - 8);
          uint64_t v66 = *((void *)v64 - 7);
          BOOL v70 = __OFSUB__(v66, v65);
          uint64_t v67 = v66 - v65;
          if (v70) {
            goto LABEL_164;
          }
          uint64_t v69 = *((void *)v64 - 6);
          uint64_t v68 = *((void *)v64 - 5);
          BOOL v70 = __OFSUB__(v68, v69);
          uint64_t v62 = v68 - v69;
          char v63 = v70;
          if (v70) {
            goto LABEL_165;
          }
          unint64_t v71 = v56 - 2;
          char v72 = &v57[16 * v56 - 32];
          uint64_t v74 = *(void *)v72;
          uint64_t v73 = *((void *)v72 + 1);
          BOOL v70 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          if (v70) {
            goto LABEL_167;
          }
          BOOL v70 = __OFADD__(v62, v75);
          uint64_t v76 = v62 + v75;
          if (v70) {
            goto LABEL_170;
          }
          if (v76 >= v67)
          {
            unsigned __int8 v94 = &v57[16 * v59];
            uint64_t v96 = *(void *)v94;
            uint64_t v95 = *((void *)v94 + 1);
            BOOL v70 = __OFSUB__(v95, v96);
            uint64_t v97 = v95 - v96;
            if (v70) {
              goto LABEL_174;
            }
            BOOL v87 = v62 < v97;
            goto LABEL_109;
          }
        }
        else
        {
          if (v56 != 3)
          {
            uint64_t v88 = *((void *)v14 + 4);
            uint64_t v89 = *((void *)v14 + 5);
            BOOL v70 = __OFSUB__(v89, v88);
            uint64_t v81 = v89 - v88;
            char v82 = v70;
            goto LABEL_103;
          }
          uint64_t v61 = *((void *)v14 + 4);
          uint64_t v60 = *((void *)v14 + 5);
          BOOL v70 = __OFSUB__(v60, v61);
          uint64_t v62 = v60 - v61;
          char v63 = v70;
        }
        if (v63) {
          goto LABEL_166;
        }
        unint64_t v71 = v56 - 2;
        uint64_t v77 = &v57[16 * v56 - 32];
        uint64_t v79 = *(void *)v77;
        uint64_t v78 = *((void *)v77 + 1);
        BOOL v80 = __OFSUB__(v78, v79);
        uint64_t v81 = v78 - v79;
        char v82 = v80;
        if (v80) {
          goto LABEL_169;
        }
        uint64_t v83 = &v57[16 * v59];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v70 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v70) {
          goto LABEL_172;
        }
        if (__OFADD__(v81, v86)) {
          goto LABEL_173;
        }
        if (v81 + v86 >= v62)
        {
          BOOL v87 = v62 < v86;
LABEL_109:
          if (v87) {
            unint64_t v59 = v71;
          }
          goto LABEL_111;
        }
LABEL_103:
        if (v82) {
          goto LABEL_168;
        }
        uint64_t v90 = &v57[16 * v59];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v70 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v70) {
          goto LABEL_171;
        }
        if (v93 < v81) {
          goto LABEL_120;
        }
LABEL_111:
        unint64_t v98 = v59 - 1;
        if (v59 - 1 >= v56) {
          goto LABEL_158;
        }
        if (!v13) {
          goto LABEL_189;
        }
        uint64_t v99 = v14;
        uint64_t v100 = v13;
        unint64_t v101 = &v57[16 * v98];
        uint64_t v102 = *(void *)v101;
        int64_t v103 = v57;
        unint64_t v104 = v59;
        double v105 = &v57[16 * v59];
        uint64_t v106 = *((void *)v105 + 1);
        double v107 = v100;
        specialized _merge<A>(low:mid:high:buffer:by:)(&v100[4 * *(void *)v101], &v100[4 * *(void *)v105], (unint64_t)&v100[4 * v106], v133, v135);
        if (v2) {
          goto LABEL_152;
        }
        if (v106 < v102) {
          goto LABEL_159;
        }
        if (v104 > *((void *)v99 + 2)) {
          goto LABEL_160;
        }
        *(void *)unint64_t v101 = v102;
        *(void *)&v103[16 * v98 + 8] = v106;
        unint64_t v108 = *((void *)v99 + 2);
        if (v104 >= v108) {
          goto LABEL_161;
        }
        uint64_t v14 = v99;
        unint64_t v56 = v108 - 1;
        memmove(v105, v105 + 16, 16 * (v108 - 1 - v104));
        double v57 = v103;
        *((void *)v99 + 2) = v108 - 1;
        float64x2_t v13 = v107;
        Swift::Int v12 = v132;
        a2 = v135;
        if (v108 <= 2) {
          goto LABEL_120;
        }
      }
    }
    unint64_t v56 = 1;
    Swift::Int v12 = v53;
    a2 = v135;
LABEL_120:
    Swift::Int v8 = v129;
    Swift::Int v5 = v130;
    if (v12 >= v130) {
      goto LABEL_155;
    }
  }
  double v25 = (unsigned int *)(v127 + 4 * v15);
  do
  {
    unint64_t v27 = *(v25 - 1);
    unint64_t v26 = *v25;
    uint64_t v28 = *(void *)(a2 + 144);
    if ((v28 & 0xC000000000000001) != 0)
    {
      uint64_t v29 = MEMORY[0x24C523D60](v26);
    }
    else
    {
      if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v26) {
        goto LABEL_162;
      }
      uint64_t v29 = swift_retain();
    }
    double v30 = *(double *)(v29 + 64);
    swift_release();
    uint64_t v31 = *(void *)(a2 + 144);
    if ((v31 & 0xC000000000000001) != 0)
    {
      Swift::Int v32 = v16;
      uint64_t v33 = MEMORY[0x24C523D60](v27);
    }
    else
    {
      if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v27) {
        goto LABEL_163;
      }
      Swift::Int v32 = v16;
      uint64_t v33 = swift_retain();
    }
    double v34 = *(double *)(v33 + 64);
    swift_release();
    if (v21 < v24 == v30 >= v34)
    {
      Swift::Int v16 = v32;
      a2 = v135;
      goto LABEL_36;
    }
    ++v25;
    Swift::Int v16 = v32 + 1;
    BOOL v35 = v5 == v32 + 1;
    a2 = v135;
  }
  while (!v35);
  Swift::Int v16 = v5;
  if (v21 >= v24) {
    goto LABEL_46;
  }
LABEL_37:
  if (v16 >= v15)
  {
    if (v15 < v16)
    {
      Swift::Int v36 = v16 - 1;
      Swift::Int v37 = v15;
      while (1)
      {
        if (v37 != v36)
        {
          if (!v13) {
            goto LABEL_190;
          }
          int v38 = *(_DWORD *)&v13[4 * v37];
          *(_DWORD *)&v13[4 * v37] = *(_DWORD *)&v13[4 * v36];
          *(_DWORD *)&v13[4 * v36] = v38;
        }
        BOOL v87 = ++v37 < v36--;
        if (!v87) {
          goto LABEL_46;
        }
      }
    }
    goto LABEL_46;
  }
LABEL_186:
  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v6 = __dst;
  Swift::Int v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 3;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 2;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 3;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 2;
  Swift::Int v42 = __src;
  unint64_t v41 = __dst;
  if (v12 < v14 >> 2)
  {
    if (v10 < -3) {
      goto LABEL_65;
    }
    if (__dst != __src || &__src[4 * v12] <= __dst) {
      memmove(__dst, __src, 4 * v12);
    }
    Swift::Int v16 = &v6[4 * v12];
    unint64_t v40 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 4)
    {
      do
      {
        unint64_t v17 = *(unsigned int *)v8;
        unint64_t v18 = *(unsigned int *)v6;
        uint64_t v19 = *(void *)(a5 + 144);
        if ((v19 & 0xC000000000000001) != 0)
        {
          uint64_t v20 = MEMORY[0x24C523D60](v17);
        }
        else
        {
          if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v17) {
            goto LABEL_63;
          }
          uint64_t v20 = swift_retain();
        }
        double v21 = *(double *)(v20 + 64);
        swift_release();
        uint64_t v22 = *(void *)(a5 + 144);
        if ((v22 & 0xC000000000000001) != 0)
        {
          uint64_t v23 = MEMORY[0x24C523D60](v18);
        }
        else
        {
          if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v18) {
            goto LABEL_64;
          }
          uint64_t v23 = swift_retain();
        }
        double v24 = *(double *)(v23 + 64);
        swift_release();
        if (v21 >= v24)
        {
          if (v9 != v6) {
            *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
          }
          v6 += 4;
          unint64_t v41 = v6;
          double v25 = v8;
        }
        else
        {
          double v25 = v8 + 4;
          if (v9 < v8 || v9 >= v25 || v9 != v8) {
            *(_DWORD *)uint64_t v9 = *(_DWORD *)v8;
          }
        }
        v9 += 4;
        if (v6 >= v16) {
          break;
        }
        Swift::Int v8 = v25;
      }
      while ((unint64_t)v25 < a3);
      Swift::Int v42 = v9;
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v42, (const void **)&v41, &v40);
    return 1;
  }
  if (v13 < -3) {
    goto LABEL_65;
  }
  if (__dst != a2 || &a2[4 * v15] <= __dst) {
    memmove(__dst, a2, 4 * v15);
  }
  unint64_t v26 = &v6[4 * v15];
  unint64_t v40 = v26;
  Swift::Int v42 = v8;
  if (v9 >= v8 || v13 < 4) {
    goto LABEL_60;
  }
  unint64_t v27 = (char *)(a3 - 4);
  uint64_t v28 = v8;
  while (1)
  {
    unint64_t v29 = *((unsigned int *)v26 - 1);
    unsigned int v31 = *((_DWORD *)v28 - 1);
    v28 -= 4;
    unint64_t v30 = v31;
    uint64_t v32 = *(void *)(a5 + 144);
    if ((v32 & 0xC000000000000001) == 0) {
      break;
    }
    uint64_t v33 = MEMORY[0x24C523D60](v29);
LABEL_41:
    double v34 = *(double *)(v33 + 64);
    swift_release();
    uint64_t v35 = *(void *)(a5 + 144);
    if ((v35 & 0xC000000000000001) != 0)
    {
      uint64_t v36 = MEMORY[0x24C523D60](v30);
    }
    else
    {
      if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v30) {
        goto LABEL_62;
      }
      uint64_t v36 = swift_retain();
    }
    Swift::Int v37 = v27 + 4;
    double v38 = *(double *)(v36 + 64);
    swift_release();
    if (v34 >= v38)
    {
      unint64_t v40 = v26 - 4;
      if (v37 < v26 || v27 >= v26 || v37 != v26) {
        *(_DWORD *)unint64_t v27 = *((_DWORD *)v26 - 1);
      }
      uint64_t v28 = v8;
      v26 -= 4;
      if (v8 <= v9) {
        goto LABEL_60;
      }
    }
    else
    {
      if (v37 != v8 || v27 >= v8) {
        *(_DWORD *)unint64_t v27 = *(_DWORD *)v28;
      }
      Swift::Int v42 = v28;
      if (v28 <= v9) {
        goto LABEL_60;
      }
    }
    v27 -= 4;
    Swift::Int v8 = v28;
    if (v26 <= v6) {
      goto LABEL_60;
    }
  }
  if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) > v29)
  {
    uint64_t v33 = swift_retain();
    goto LABEL_41;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t *v8;
  unint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  double v33;
  double v34;
  BOOL v35;
  uint64_t result;
  unint64_t *v37;
  unint64_t *v38;
  char *v39;

  uint64_t v6 = (unint64_t *)__dst;
  Swift::Int v8 = (unint64_t *)a2;
  uint64_t v9 = (unint64_t *)__src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 3;
  Swift::Int v39 = __src;
  double v38 = (unint64_t *)__dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst) {
        memmove(__dst, a2, 8 * v15);
      }
      double v25 = &v6[v15];
      Swift::Int v37 = v25;
      Swift::Int v39 = (char *)v8;
      if (v9 < v8 && v13 >= 8)
      {
        unint64_t v26 = a5 + 32;
        unint64_t v27 = *(void *)(a5 + 16);
        uint64_t v28 = (unint64_t *)(a3 - 8);
        while (1)
        {
          unint64_t v29 = *(v25 - 1);
          if (v29 >= v27) {
            break;
          }
          unint64_t v30 = v8 - 1;
          unsigned int v31 = *(v8 - 1);
          if (v31 >= v27) {
            goto LABEL_60;
          }
          uint64_t v32 = v28 + 1;
          uint64_t v33 = *(double *)(v26 + 32 * v29);
          double v34 = *(double *)(v26 + 32 * v31);
          if (v33 >= v34 && (v33 == v34 ? (uint64_t v35 = v29 >= v31) : (uint64_t v35 = 1), v35))
          {
            Swift::Int v37 = v25 - 1;
            if (v32 < v25 || v28 >= v25 || v32 != v25) {
              *uint64_t v28 = *(v25 - 1);
            }
            --v25;
            if (v8 <= v9) {
              goto LABEL_58;
            }
          }
          else
          {
            if (v32 != v8 || v28 >= v8) {
              *uint64_t v28 = v31;
            }
            Swift::Int v39 = (char *)--v8;
            if (v30 <= v9) {
              goto LABEL_58;
            }
          }
          --v28;
          if (v25 <= v6) {
            goto LABEL_58;
          }
        }
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
LABEL_58:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    Swift::Int v16 = &v6[v12];
    Swift::Int v37 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      unint64_t v17 = a5 + 32;
      unint64_t v18 = *(void *)(a5 + 16);
      while (1)
      {
        uint64_t v19 = *v8;
        if (*v8 >= v18) {
          break;
        }
        uint64_t v20 = *v6;
        if (*v6 >= v18) {
          goto LABEL_62;
        }
        double v21 = *(double *)(v17 + 32 * v19);
        uint64_t v22 = *(double *)(v17 + 32 * v20);
        if (v21 >= v22 && (v21 == v22 ? (uint64_t v23 = v19 >= v20) : (uint64_t v23 = 1), v23))
        {
          if (v9 != v6) {
            *uint64_t v9 = v20;
          }
          double v38 = ++v6;
          double v24 = v8;
        }
        else
        {
          double v24 = v8 + 1;
          if (v9 < v8 || v9 >= v24 || v9 != v8) {
            *uint64_t v9 = v19;
          }
        }
        ++v9;
        if (v6 < v16)
        {
          Swift::Int v8 = v24;
          if ((unint64_t)v24 < a3) {
            continue;
          }
        }
        Swift::Int v39 = (char *)v9;
        goto LABEL_58;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    goto LABEL_58;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t *v8;
  unint64_t *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  double v33;
  double v34;
  BOOL v35;
  uint64_t result;
  unint64_t *v37;
  unint64_t *v38;
  char *v39;

  uint64_t v6 = (unint64_t *)__dst;
  Swift::Int v8 = (unint64_t *)a2;
  uint64_t v9 = (unint64_t *)__src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 3;
  Swift::Int v39 = __src;
  double v38 = (unint64_t *)__dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst) {
        memmove(__dst, a2, 8 * v15);
      }
      double v25 = &v6[v15];
      Swift::Int v37 = v25;
      Swift::Int v39 = (char *)v8;
      if (v9 < v8 && v13 >= 8)
      {
        unint64_t v26 = a5 + 32;
        unint64_t v27 = *(void *)(a5 + 16);
        uint64_t v28 = (unint64_t *)(a3 - 8);
        while (1)
        {
          unint64_t v29 = *(v25 - 1);
          if (v29 >= v27) {
            break;
          }
          unint64_t v30 = v8 - 1;
          unsigned int v31 = *(v8 - 1);
          if (v31 >= v27) {
            goto LABEL_60;
          }
          uint64_t v32 = v28 + 1;
          uint64_t v33 = *(double *)(v26 + 8 * v29);
          double v34 = *(double *)(v26 + 8 * v31);
          if (v33 >= v34 && (v33 == v34 ? (uint64_t v35 = v29 >= v31) : (uint64_t v35 = 1), v35))
          {
            Swift::Int v37 = v25 - 1;
            if (v32 < v25 || v28 >= v25 || v32 != v25) {
              *uint64_t v28 = *(v25 - 1);
            }
            --v25;
            if (v8 <= v9) {
              goto LABEL_58;
            }
          }
          else
          {
            if (v32 != v8 || v28 >= v8) {
              *uint64_t v28 = v31;
            }
            Swift::Int v39 = (char *)--v8;
            if (v30 <= v9) {
              goto LABEL_58;
            }
          }
          --v28;
          if (v25 <= v6) {
            goto LABEL_58;
          }
        }
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
LABEL_58:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    Swift::Int v16 = &v6[v12];
    Swift::Int v37 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      unint64_t v17 = a5 + 32;
      unint64_t v18 = *(void *)(a5 + 16);
      while (1)
      {
        uint64_t v19 = *v8;
        if (*v8 >= v18) {
          break;
        }
        uint64_t v20 = *v6;
        if (*v6 >= v18) {
          goto LABEL_62;
        }
        double v21 = *(double *)(v17 + 8 * v19);
        uint64_t v22 = *(double *)(v17 + 8 * v20);
        if (v21 >= v22 && (v21 == v22 ? (uint64_t v23 = v19 >= v20) : (uint64_t v23 = 1), v23))
        {
          if (v9 != v6) {
            *uint64_t v9 = v20;
          }
          double v38 = ++v6;
          double v24 = v8;
        }
        else
        {
          double v24 = v8 + 1;
          if (v9 < v8 || v9 >= v24 || v9 != v8) {
            *uint64_t v9 = v19;
          }
        }
        ++v9;
        if (v6 < v16)
        {
          Swift::Int v8 = v24;
          if ((unint64_t)v24 < a3) {
            continue;
          }
        }
        Swift::Int v39 = (char *)v9;
        goto LABEL_58;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    goto LABEL_58;
  }
LABEL_63:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in Gesture.gated<A>(by:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  if (*((unsigned char *)a2 + 9) == 3
    && ((int v9 = *((unsigned __int8 *)a2 + 8), v10 = *a2, !v9) ? (v11 = v10 == 0) : (v11 = 0), v11))
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 24) = 3;
  }
  else
  {
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 16) = v7;
    *(unsigned char *)(a3 + 24) = v8;
    return outlined copy of GesturePhase<TappableEvent>(result, v6, v7, v8);
  }
  return result;
}

uint64_t specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()();
  if (!v1) {
    *a1 = result & 1;
  }
  return result;
}

BOOL specialized static Image.LayoutMetrics.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0]&& a1[2].f64[1] == a2[2].f64[1])
  {
    double v4 = a1[3].f64[1];
    BOOL v5 = a1[3].f64[0] == a2[3].f64[0];
    return v4 == a2[3].f64[1] && v5;
  }
  return result;
}

uint64_t sub_245AB2E9C()
{
  return swift_deallocObject();
}

uint64_t sub_245AB2EAC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2) {

  }
  return swift_deallocObject();
}

uint64_t sub_245AB2EFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245AB2F38()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t sub_245AB2F7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245AB2FB8()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for LeafLayoutComputer<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutComputer<Image.Resolved> and conformance LeafLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init;
  if (!lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentTransitionEffect.Init and conformance ContentTransitionEffect.Init);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Image.Resolved(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.Resolved and conformance Image.Resolved();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Resolved and conformance Image.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved;
  if (!lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Resolved and conformance Image.Resolved);
  }
  return result;
}

uint64_t sub_245AB315C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 136);
  return swift_unknownObjectRetain();
}

uint64_t sub_245AB3168(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 136) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Image.LayoutMetrics(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Image.LayoutMetrics(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Image.LayoutMetrics()
{
  return &type metadata for Image.LayoutMetrics;
}

uint64_t outlined destroy of GraphicsImage.Contents(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AccessibilityImageLabel(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy179_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)a2 + 175);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t destroy for Image.NamedResolved(uint64_t a1)
{
  swift_bridgeObjectRelease();
  long long v2 = *(void **)(a1 + 16);
  if ((unint64_t)v2 >= 2) {

  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  long long v5 = *(void **)(a2 + 16);
  swift_bridgeObjectRetain();
  if ((unint64_t)v5 >= 2) {
    id v6 = v5;
  }
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_WORD *)(a1 + 29) = *(_WORD *)(a2 + 29);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  long long v5 = *(void **)(a2 + 16);
  if ((unint64_t)v4 >= 2)
  {
    if ((unint64_t)v5 >= 2)
    {
      *(void *)(a1 + 16) = v5;
      id v7 = v5;

      goto LABEL_8;
    }

    long long v5 = *(void **)(a2 + 16);
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {
LABEL_6:
    *(void *)(a1 + 16) = v5;
    goto LABEL_8;
  }
  *(void *)(a1 + 16) = v5;
  id v6 = v5;
LABEL_8:
  int v8 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 30);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Image.NamedResolved(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(void **)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v5 >= 2)
  {
    if (v6 >= 2)
    {
      *(void *)(a1 + 16) = v6;

      goto LABEL_6;
    }
  }
  *(void *)(a1 + 16) = v6;
LABEL_6:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 30);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.NamedResolved(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.NamedResolved(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.NamedResolved()
{
  return &type metadata for Image.NamedResolved;
}

void *type metadata accessor for ResolvedImageLayoutComputer()
{
  return &unk_26FA6F878;
}

void *type metadata accessor for Image.Resolved.MakeRepresentableContext()
{
  return &unk_26FA7DFE8;
}

unint64_t instantiation function for generic protocol witness table for Image.Resolved.MakeRepresentableContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.Resolved.MakeRepresentableContext and conformance Image.Resolved.MakeRepresentableContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedImageLayoutComputer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedImageLayoutComputer and conformance ResolvedImageLayoutComputer();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>);
    }
  }
}

void specialized ModifierBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2)
{
  v44[44] = *MEMORY[0x263EF8340];
  uint64_t v42 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  unint64_t v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)v35 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = *(_OWORD *)(a1 + 48);
      _OWORD v43[2] = *(_OWORD *)(a1 + 32);
      uint64_t v43[3] = v33;
      v43[4] = *(_OWORD *)(a1 + 64);
      LOBYTE(v43[5]) = *(unsigned char *)(a1 + 80);
      long long v34 = *(_OWORD *)(a1 + 16);
      v43[0] = *(_OWORD *)a1;
      v43[1] = v34;
      SafeAreaPaddingModifier.body(content:)((uint64_t)v44);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
      AGGraphSetOutputValue();
      memcpy(v43, v44, sizeof(v43));
      outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>((uint64_t)v43);
      return;
    }
    int v37 = v10;
    uint64_t v38 = a1;
    uint64_t v39 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v39 + 16;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v6, v9, v42);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v41 = v20;
    uint64_t v21 = swift_allocObject();
    long long v40 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v35[1] = inited;
        uint64_t v36 = v9;
        uint64_t v17 = v37 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v44[3])
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          unsigned int v31 = *(void (**)(char *, uint64_t))(v39 + 8);
          uint64_t v32 = v42;
          v31(v36, v42);
          v31(v6, v32);
          a1 = v38;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v42;
          uint64_t v24 = __swift_project_value_buffer(v42, (uint64_t)static OSSignpostID.continuation);
          double v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_allocObject();
            *(_OWORD *)(v27 + 16) = v40;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v44[3]) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v44, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v42;
            uint64_t v30 = __swift_project_value_buffer(v42, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout;
  if (!lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout;
  if (!lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg?>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>)
  {
    type metadata accessor for ViewList?(255, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg?>);
    }
  }
}

uint64_t _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a2);
  }
  return result;
}

uint64_t sub_245AB421C()
{
  swift_release();

  return swift_deallocObject();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1, double a2, double a3, double a4, double a5)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v74 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v64 - v14;
  if ((a1 & 1) == 0) {
    return;
  }
  LOBYTE(v16) = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled()) {
    goto LABEL_45;
  }
  uint64_t v66 = v10;
  static OSSignpostID.exclusive.getter();
  type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v18 = AGTypeID.description.getter();
  uint64_t v20 = v19;
  uint64_t v21 = MEMORY[0x263F8D310];
  *(void *)(inited + 56) = MEMORY[0x263F8D310];
  unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(inited + 32) = v18;
  uint64_t v68 = inited + 32;
  *(void *)(inited + 64) = v22;
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
  uint64_t v67 = inited + 72;
  *(void *)(inited + 96) = v21;
  *(void *)(inited + 104) = v22;
  uint64_t v69 = inited;
  *(void *)(inited + 80) = v23;
  if (one-time initialization token for _signpostLog != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    unsigned int v76 = v16 | 0x14110014;
    uint64_t v25 = v66 + 16;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    uint64_t v65 = v15;
    v24(v12, v15, v74);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v73 = v26;
    char v27 = 0;
    unint64_t v16 = 0;
    BOOL v70 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
    long long v72 = xmmword_2461BE2B0;
    uint64_t v28 = MEMORY[0x263F8E9C8];
    unint64_t v71 = v12;
LABEL_5:
    uint64_t v29 = (_OWORD *)swift_initStackObject();
    uint64_t v30 = v29;
    v29[1] = v72;
    unsigned int v31 = v29 + 2;
    if (v27)
    {
      long long v32 = 0uLL;
      v29[5] = 0u;
      v29[6] = 0u;
      v29[3] = 0u;
      v29[4] = 0u;
      *unsigned int v31 = 0u;
      goto LABEL_10;
    }
    uint64_t v33 = v69;
    if (v16 >= *(void *)(v69 + 16)) {
      goto LABEL_51;
    }
    outlined init with copy of AnyTrackedValue(v68 + 40 * v16, (uint64_t)v31);
    if (*(void *)(v33 + 16) >= 2uLL) {
      break;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  outlined init with copy of AnyTrackedValue(v67, (uint64_t)v30 + 72);
  long long v32 = 0uLL;
LABEL_10:
  uint64_t v77 = v30;
  v30[7] = v32;
  uint64_t v34 = (uint64_t)(v30 + 7);
  *(void *)(v34 + 32) = 0;
  uint64_t v75 = v34;
  *(_OWORD *)(v34 + 16) = v32;
  uint64_t v78 = (void *)MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  for (uint64_t i = 32; i != 152; i += 40)
  {
    outlined init with copy of CVarArg?((uint64_t)v77 + i, (uint64_t)v81, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
    outlined init with copy of CVarArg?((uint64_t)v81, (uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
    uint64_t v36 = v80;
    if (v80)
    {
      __swift_project_boxed_opaque_existential_1(v79, v80);
      uint64_t v37 = CVarArg.kdebugValue(_:)(v76, v36);
      uint64_t v39 = v38;
      uint64_t v41 = v40;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      if (v39)
      {
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = v39;
        *(void *)(v42 + 24) = v41;
        uint64_t v43 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        uint64_t v43 = 0;
        uint64_t v42 = 0;
      }
    }
    else
    {
      outlined destroy of CVarArg?((uint64_t)v79, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
      uint64_t v37 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 1;
    }
    outlined destroy of CVarArg?((uint64_t)v81, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
    uint64_t v44 = v78;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1);
      uint64_t v44 = v78;
    }
    unint64_t v46 = v44[2];
    unint64_t v45 = v44[3];
    if (v46 >= v45 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      uint64_t v44 = v78;
    }
    v44[2] = v46 + 1;
    uint64_t v47 = &v44[3 * v46];
    v47[4] = v37;
    v47[5] = v43;
    v47[6] = v42;
  }
  v81[0] = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46 + 1, 0);
  uint64_t v12 = (char *)v81[0];
  unint64_t v48 = v46 + 1;
  uint64_t v49 = v44 + 5;
  do
  {
    if (*v49 == 1) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = *(v49 - 1);
    }
    v81[0] = v12;
    unint64_t v52 = *((void *)v12 + 2);
    unint64_t v51 = *((void *)v12 + 3);
    if (v52 >= v51 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      uint64_t v12 = (char *)v81[0];
    }
    *((void *)v12 + 2) = v52 + 1;
    *(void *)&v12[8 * v52 + 32] = v50;
    v49 += 3;
    --v48;
  }
  while (v48);
  uint64_t v15 = v71;
  LOBYTE(v16) = (_BYTE)v71;
  OSSignpostID.rawValue.getter();
  unint64_t v53 = *((void *)v12 + 2);
  if (!v53)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v53 == 1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v53 < 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  kdebug_trace();
  swift_bridgeObjectRelease();
  uint64_t v54 = v44[2];
  if (!v54) {
    goto LABEL_39;
  }
  swift_retain();
  unint64_t v55 = v44 + 6;
  do
  {
    uint64_t v56 = *(v55 - 2);
    double v57 = (void (*)(uint64_t))*(v55 - 1);
    if (!v57) {
      goto LABEL_33;
    }
    if (v57 != (void (*)(uint64_t))1)
    {
      uint64_t v58 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(v55 - 1));
      v57(v58);
LABEL_33:
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v56, (uint64_t)v57);
    }
    v55 += 3;
    --v54;
  }
  while (v54);
  swift_release();
LABEL_39:
  swift_release();
  LOBYTE(v16) = (_BYTE)v77;
  if (*((void *)v77 + 2) < 3uLL) {
    goto LABEL_50;
  }
  outlined init with copy of CVarArg?(v75, (uint64_t)v81, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
  swift_bridgeObjectRelease();
  double v59 = v82;
  outlined destroy of CVarArg?((uint64_t)v81, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
  if (v59 != 0.0)
  {
    if (one-time initialization token for continuation != -1) {
      swift_once();
    }
    uint64_t v60 = v74;
    uint64_t v61 = __swift_project_value_buffer(v74, (uint64_t)static OSSignpostID.continuation);
    (*v70)(v15, v61, v60);
    char v27 = 1;
    unint64_t v16 = 2;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v66 + 8);
  uint64_t v63 = v74;
  v62(v65, v74);
  v62(v15, v63);
LABEL_45:
  AGGraphClearUpdate();
  *(double *)uint64_t v81 = a2;
  *(double *)&v81[1] = a3;
  *(double *)&long long v81[2] = a4;
  double v82 = a5;
  __int16 v83 = 256;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  AGGraphSetOutputValue();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v66 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v68 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (unint64_t)&v56 - v7;
  if ((a2 & 1) == 0) {
    return;
  }
  LODWORD(v9) = 336658452;
  LOBYTE(v10) = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (!kdebug_is_enabled()) {
    goto LABEL_45;
  }
  uint64_t v58 = a1;
  uint64_t v59 = v4;
  static OSSignpostID.exclusive.getter();
  type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v12 = AGTypeID.description.getter();
  uint64_t v14 = v13;
  uint64_t v15 = MEMORY[0x263F8D310];
  *(void *)(inited + 56) = MEMORY[0x263F8D310];
  unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(inited + 32) = v12;
  uint64_t v61 = inited + 32;
  *(void *)(inited + 64) = v16;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
  uint64_t v60 = inited + 72;
  *(void *)(inited + 96) = v15;
  *(void *)(inited + 104) = v16;
  uint64_t v62 = inited;
  *(void *)(inited + 80) = v17;
  if (one-time initialization token for _signpostLog != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    unsigned int v69 = v10 | v9;
    uint64_t v19 = v59 + 16;
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v59 + 16);
    unint64_t v57 = v8;
    v18(v68, v8, v66);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v65 = v20;
    char v21 = 0;
    unint64_t v10 = 0;
    uint64_t v63 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
    long long v64 = xmmword_2461BE2B0;
    uint64_t v22 = MEMORY[0x263F8E9C8];
LABEL_5:
    uint64_t v23 = (_OWORD *)swift_initStackObject();
    uint64_t v24 = v23;
    v23[1] = v64;
    uint64_t v25 = v23 + 2;
    if (v21)
    {
      long long v26 = 0uLL;
      v23[5] = 0u;
      v23[6] = 0u;
      v23[3] = 0u;
      v23[4] = 0u;
      *uint64_t v25 = 0u;
      goto LABEL_10;
    }
    uint64_t v27 = v62;
    if (v10 >= *(void *)(v62 + 16)) {
      goto LABEL_51;
    }
    outlined init with copy of AnyTrackedValue(v61 + 40 * v10, (uint64_t)v25);
    if (*(void *)(v27 + 16) >= 2uLL) {
      break;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  outlined init with copy of AnyTrackedValue(v60, (uint64_t)v24 + 72);
  long long v26 = 0uLL;
LABEL_10:
  BOOL v70 = v24;
  v24[7] = v26;
  uint64_t v28 = (uint64_t)(v24 + 7);
  *(void *)(v28 + 32) = 0;
  uint64_t v67 = v28;
  *(_OWORD *)(v28 + 16) = v26;
  uint64_t v71 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
  for (uint64_t i = 32; i != 152; i += 40)
  {
    outlined init with copy of CVarArg?((uint64_t)v70 + i, (uint64_t)&v74, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
    outlined init with copy of CVarArg?((uint64_t)&v74, (uint64_t)v72, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
    uint64_t v30 = v73;
    if (v73)
    {
      __swift_project_boxed_opaque_existential_1(v72, v73);
      uint64_t v31 = CVarArg.kdebugValue(_:)(v69, v30);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      if (v33)
      {
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = v33;
        *(void *)(v36 + 24) = v35;
        uint64_t v37 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v36 = 0;
      }
    }
    else
    {
      outlined destroy of CVarArg?((uint64_t)v72, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
      uint64_t v31 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 1;
    }
    outlined destroy of CVarArg?((uint64_t)&v74, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
    uint64_t v38 = v71;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
      uint64_t v38 = v71;
    }
    unint64_t v40 = *(void *)(v38 + 16);
    unint64_t v39 = *(void *)(v38 + 24);
    if (v40 >= v39 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
      uint64_t v38 = v71;
    }
    *(void *)(v38 + 16) = v40 + 1;
    uint64_t v41 = (void *)(v38 + 24 * v40);
    v41[4] = v31;
    v41[5] = v37;
    v41[6] = v36;
  }
  uint64_t v74 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 + 1, 0);
  uint64_t v42 = v74;
  unint64_t v43 = v40 + 1;
  long long v9 = (void (*)(void))(v38 + 40);
  do
  {
    if (*(void *)v9 == 1) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = *((void *)v9 - 1);
    }
    uint64_t v74 = v42;
    unint64_t v8 = *(void *)(v42 + 16);
    unint64_t v45 = *(void *)(v42 + 24);
    if (v8 >= v45 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v8 + 1, 1);
      uint64_t v42 = v74;
    }
    *(void *)(v42 + 16) = v8 + 1;
    *(void *)(v42 + 32 + 8 * v8) = v44;
    long long v9 = (void (*)(void))((char *)v9 + 24);
    --v43;
  }
  while (v43);
  LOBYTE(v10) = (_BYTE)v68;
  OSSignpostID.rawValue.getter();
  unint64_t v46 = *(void *)(v42 + 16);
  if (!v46)
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v46 == 1)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v46 < 3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  kdebug_trace();
  swift_bridgeObjectRelease();
  uint64_t v47 = *(void *)(v38 + 16);
  if (!v47) {
    goto LABEL_39;
  }
  swift_retain();
  uint64_t v48 = v38 + 48;
  do
  {
    uint64_t v49 = *(void *)(v48 - 16);
    long long v9 = *(void (**)(void))(v48 - 8);
    if (!v9) {
      goto LABEL_33;
    }
    if (v9 != (void (*)(void))1)
    {
      uint64_t v50 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v48 - 8));
      v9(v50);
LABEL_33:
      _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe(v49, (uint64_t)v9);
    }
    v48 += 24;
    --v47;
  }
  while (v47);
  swift_release();
LABEL_39:
  swift_release();
  LOBYTE(v10) = (_BYTE)v70;
  if (*((void *)v70 + 2) < 3uLL) {
    goto LABEL_50;
  }
  outlined init with copy of CVarArg?(v67, (uint64_t)&v74, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
  swift_bridgeObjectRelease();
  uint64_t v51 = v76;
  outlined destroy of CVarArg?((uint64_t)&v74, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v22);
  if (v51)
  {
    if (one-time initialization token for continuation != -1) {
      swift_once();
    }
    uint64_t v52 = v66;
    uint64_t v53 = __swift_project_value_buffer(v66, (uint64_t)static OSSignpostID.continuation);
    (*v63)(v68, v53, v52);
    char v21 = 1;
    unint64_t v10 = 2;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void (**)(unint64_t, uint64_t))(v59 + 8);
  uint64_t v55 = v66;
  v54(v57, v66);
  v54((unint64_t)v68, v55);
  a1 = v58;
LABEL_45:
  AGGraphClearUpdate();
  swift_bridgeObjectRetain();
  AGGraphSetUpdate();
  uint64_t v74 = a1;
  __int16 v75 = 256;
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  void v33[2];
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v44 = *MEMORY[0x263EF8340];
  unint64_t v40 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)v33 - v8;
  if (a2)
  {
    unint64_t v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      uint64_t v41 = a1;
      uint64_t v42 = 256;
      swift_retain();
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    uint64_t v35 = v10;
    uint64_t v36 = a1;
    uint64_t v37 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v37 + 16;
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v6, v9, v40);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    unint64_t v39 = v20;
    char v21 = swift_initStackObject();
    uint64_t v38 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v33[1] = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v37 + 8);
          uint64_t v32 = v40;
          v31(v34, v40);
          v31(v6, v32);
          a1 = v36;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v40;
          uint64_t v24 = __swift_project_value_buffer(v40, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          long long v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v38;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v43) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v41, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v40;
            uint64_t v30 = __swift_project_value_buffer(v40, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  unsigned __int8 v44;
  __int16 v45;
  unsigned char v46[40];
  uint64_t v47;

  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)v34 - v8;
  if (a2)
  {
    unint64_t v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      uint64_t v33 = *(_OWORD *)(a1 + 16);
      uint64_t v42 = *(_OWORD *)a1;
      unint64_t v43 = v33;
      uint64_t v44 = *(unsigned char *)(a1 + 32);
      unint64_t v45 = 256;
      outlined init with take of Path.Storage(a1, (uint64_t)v46);
      _s7SwiftUI4PathVWOrTm_0((uint64_t)v46, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Path, ForegroundStyle>();
      AGGraphSetOutputValue();
      outlined consume of Path.Storage(v42, *((uint64_t *)&v42 + 1), v43, *((uint64_t *)&v43 + 1), v44);
      return;
    }
    uint64_t v36 = v10;
    uint64_t v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    unint64_t v40 = v20;
    char v21 = swift_initStackObject();
    unint64_t v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        uint64_t v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          long long v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, double a3)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v70 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  long long v72 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v60 - v9;
  if (a2)
  {
    unsigned __int8 v11 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled()) {
      goto LABEL_46;
    }
    uint64_t v62 = a1;
    uint64_t v63 = v6;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v13 = AGTypeID.description.getter();
    a1 = v14;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v13;
    uint64_t v65 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = a1;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v64 = inited + 72;
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    uint64_t v66 = inited;
    *(void *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    unsigned int v73 = v11 | 0x14110014;
    uint64_t v19 = v63 + 16;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    uint64_t v61 = v10;
    v18(v72, v10, v70);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v69 = v20;
    char v21 = 0;
    unint64_t v22 = 0;
    uint64_t v67 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
    long long v68 = xmmword_2461BE2B0;
    uint64_t v23 = MEMORY[0x263F8E9C8];
LABEL_6:
    uint64_t v24 = (_OWORD *)swift_initStackObject();
    uint64_t v25 = v24;
    v24[1] = v68;
    long long v26 = v24 + 2;
    if (v21)
    {
      long long v27 = 0uLL;
      v24[5] = 0u;
      v24[6] = 0u;
      void v24[3] = 0u;
      void v24[4] = 0u;
      *long long v26 = 0u;
    }
    else
    {
      uint64_t v28 = v66;
      if (v22 >= *(void *)(v66 + 16)) {
        goto LABEL_53;
      }
      outlined init with copy of AnyTrackedValue(v65 + 40 * v22, (uint64_t)v26);
      if (*(void *)(v28 + 16) < 2uLL)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      outlined init with copy of AnyTrackedValue(v64, (uint64_t)v25 + 72);
      long long v27 = 0uLL;
    }
    uint64_t v74 = v25;
    v25[7] = v27;
    uint64_t v29 = (uint64_t)(v25 + 7);
    *(void *)(v29 + 32) = 0;
    uint64_t v71 = v29;
    *(_OWORD *)(v29 + 16) = v27;
    uint64_t v75 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
    for (uint64_t i = 32; i != 152; i += 40)
    {
      outlined init with copy of CVarArg?((uint64_t)v74 + i, (uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
      outlined init with copy of CVarArg?((uint64_t)v76, (uint64_t)v80, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
      uint64_t v31 = v81;
      if (v81)
      {
        __swift_project_boxed_opaque_existential_1(v80, v81);
        uint64_t v32 = CVarArg.kdebugValue(_:)(v73, v31);
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
        if (v34)
        {
          uint64_t v37 = swift_allocObject();
          *(void *)(v37 + 16) = v34;
          *(void *)(v37 + 24) = v36;
          uint64_t v38 = (uint64_t)thunk for @escaping @callee_guaranteed () -> ()partial apply;
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v37 = 0;
        }
      }
      else
      {
        outlined destroy of CVarArg?((uint64_t)v80, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
        uint64_t v32 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 1;
      }
      outlined destroy of CVarArg?((uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
      a1 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1);
        a1 = v75;
      }
      unint64_t v40 = *(void *)(a1 + 16);
      unint64_t v39 = *(void *)(a1 + 24);
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        a1 = v75;
      }
      *(void *)(a1 + 16) = v40 + 1;
      uint64_t v41 = (void *)(a1 + 24 * v40);
      v41[4] = v32;
      v41[5] = v38;
      v41[6] = v37;
    }
    v76[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 + 1, 0);
    uint64_t v42 = v76[0];
    unint64_t v43 = v40 + 1;
    uint64_t v44 = (void *)(a1 + 40);
    do
    {
      if (*v44 == 1) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = *(v44 - 1);
      }
      v76[0] = v42;
      unint64_t v47 = *(void *)(v42 + 16);
      unint64_t v46 = *(void *)(v42 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
        uint64_t v42 = v76[0];
      }
      *(void *)(v42 + 16) = v47 + 1;
      uint64_t v25 = (_OWORD *)(v42 + 32);
      *(void *)(v42 + 32 + 8 * v47) = v45;
      v44 += 3;
      --v43;
    }
    while (v43);
    OSSignpostID.rawValue.getter();
    unint64_t v48 = *(void *)(v42 + 16);
    if (v48)
    {
      if (v48 != 1)
      {
        if (v48 >= 3)
        {
          kdebug_trace();
          swift_bridgeObjectRelease();
          uint64_t v49 = *(void *)(a1 + 16);
          if (!v49) {
            goto LABEL_40;
          }
          swift_retain();
          uint64_t v50 = a1 + 48;
          while (1)
          {
            uint64_t v25 = *(_OWORD **)(v50 - 16);
            uint64_t v51 = *(void (**)(uint64_t))(v50 - 8);
            if (v51)
            {
              if (v51 == (void (*)(uint64_t))1) {
                goto LABEL_35;
              }
              uint64_t v52 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v50 - 8));
              v51(v52);
            }
            _ss6UInt64V3arg_xRi_zRi0_zlyytIsegr_Sg10destructortSgWOe((uint64_t)v25, (uint64_t)v51);
LABEL_35:
            v50 += 24;
            if (!--v49)
            {
              swift_release();
LABEL_40:
              swift_release();
              if (*((void *)v74 + 2) >= 3uLL)
              {
                outlined init with copy of CVarArg?(v71, (uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
                swift_bridgeObjectRelease();
                uint64_t v53 = *((void *)&v77 + 1);
                outlined destroy of CVarArg?((uint64_t)v76, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v23);
                if (v53)
                {
                  if (one-time initialization token for continuation != -1) {
                    swift_once();
                  }
                  uint64_t v54 = v70;
                  uint64_t v55 = __swift_project_value_buffer(v70, (uint64_t)static OSSignpostID.continuation);
                  (*v67)(v72, v55, v54);
                  char v21 = 1;
                  unint64_t v22 = 2;
                  goto LABEL_6;
                }
                swift_bridgeObjectRelease();
                uint64_t v56 = *(void (**)(char *, uint64_t))(v63 + 8);
                uint64_t v57 = v70;
                v56(v61, v70);
                v56(v72, v57);
                a1 = v62;
LABEL_46:
                uint64_t v25 = v80;
                AGGraphClearUpdate();
                if (one-time initialization token for symbolImage == -1)
                {
LABEL_47:
                  uint64_t v58 = static SummarySymbol.symbolImage;
                  swift_retain();
                  SummarySymbol.gradient.getter(a1, (uint64_t)v80, a3);
                  v76[0] = v58;
                  v76[1] = v80[0];
                  long long v59 = *(_OWORD *)((char *)v25 + 24);
                  long long v77 = *(_OWORD *)((char *)v25 + 8);
                  long long v78 = v59;
                  uint64_t v79 = a1;
                  swift_retain();
                  AGGraphSetUpdate();
                  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
                  type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>, (void (*)(uint64_t))type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>);
                  AGGraphSetOutputValue();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  return;
                }
LABEL_55:
                swift_once();
                goto LABEL_47;
              }
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
          }
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_51;
  }
}

void type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>()
{
  if (!lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>)
  {
    unint64_t v0 = type metadata accessor for _ForegroundStyleModifier2();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ForegroundStyleModifier2<AngularGradient, Color>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset;
  if (!lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset;
  if (!lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.AsymmetricalInset and conformance Rectangle.AsymmetricalInset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t outlined destroy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined copy of _ShapeStyle_RenderedLayers.Layers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  if (a9 >> 30 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!(a9 >> 30)) {
    return outlined copy of DisplayList.Item.Value(a6, a7);
  }
  return result;
}

uint64_t sub_245AB5E30()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<CombinedContentShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<CombinedContentShape, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CombinedContentShape and conformance CombinedContentShape()
{
  unint64_t result = lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape;
  if (!lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape;
  if (!lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombinedContentShape and conformance CombinedContentShape);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<CombinedContentShape, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<CombinedContentShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

double _s7SwiftUI33PlatformImageRepresentableContextVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0x1FFFFFFFCLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  return result;
}

void outlined consume of AnyGestureInfo<()>.Value?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(char a1, double a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  if (a1)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      double v40 = a2;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v35 = v10;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v33 = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v32 = v39;
          v31(v34, v39);
          v31(v6, v32);
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  if (a1)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      double v40 = a2;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v35 = v10;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v33 = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v32 = v39;
          v31(v34, v39);
          v31(v6, v32);
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  if (a1)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      double v40 = a2;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v35 = v10;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v33 = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v32 = v39;
          v31(v34, v39);
          v31(v6, v32);
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  if (a1)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      double v40 = a2;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v35 = v10;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v33 = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v32 = v39;
          v31(v34, v39);
          v31(v6, v32);
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v33 - v8;
  if (a1)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      double v40 = a2;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v35 = v10;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v33 = inited;
        uint64_t v34 = v9;
        uint64_t v17 = v35 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v32 = v39;
          v31(v34, v39);
          v31(v6, v32);
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v50 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v40 - v14;
  if (a5)
  {
    int v16 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      v52[0] = a1;
      v52[1] = a2;
      v52[2] = a3;
      uint64_t v53 = a4;
      _TestApp.RootView.body.getter(&v51);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    int v42 = v16;
    uint64_t v46 = a4;
    uint64_t v47 = v10;
    uint64_t v43 = a1;
    uint64_t v44 = a2;
    uint64_t v45 = a3;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v18 = AGTypeID.description.getter();
    uint64_t v20 = v19;
    uint64_t v21 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v22 = v15;
    uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v18;
    uint64_t v24 = inited + 32;
    *(void *)(inited + 64) = v23;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v21;
    *(void *)(inited + 104) = v23;
    *(void *)(inited + 80) = v25;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v26 = v47 + 16;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v12, v22, v50);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v49 = v27;
    uint64_t v28 = swift_initStackObject();
    long long v48 = xmmword_2461BE2B0;
    *(_OWORD *)(v28 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v29 = v28;
      outlined init with copy of AnyTrackedValue(inited + 32, v28 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v40 = inited;
        __int16 v41 = v22;
        uint64_t v24 = v42 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v29 + 72);
        *(_OWORD *)(v29 + 128) = 0u;
        *(void *)(v29 + 144) = 0;
        *(_OWORD *)(v29 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v24, v29, v24, (uint64_t)v12);
        outlined init with copy of CVarArg?(v29 + 112, (uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v53)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v38 = *(void (**)(char *, uint64_t))(v47 + 8);
          uint64_t v39 = v50;
          v38(v41, v50);
          v38(v12, v39);
          a3 = v45;
          a4 = v46;
          a1 = v43;
          a2 = v44;
          goto LABEL_15;
        }
        uint64_t v23 = (void (**)(char *, uint64_t, uint64_t))(v26 + 8);
        outlined destroy of CVarArg?((uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v30 = v50;
          uint64_t v31 = __swift_project_value_buffer(v50, (uint64_t)static OSSignpostID.continuation);
          uint64_t v32 = *v23;
          (*v23)(v12, v31, v30);
          uint64_t v33 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v34 = swift_initStackObject();
            *(_OWORD *)(v34 + 16) = v48;
            *(_OWORD *)(v34 + 32) = 0u;
            *(_OWORD *)(v34 + 48) = 0u;
            *(_OWORD *)(v34 + 64) = 0u;
            *(_OWORD *)(v34 + 80) = 0u;
            *(_OWORD *)(v34 + 96) = 0u;
            *(_OWORD *)(v34 + 128) = 0u;
            *(void *)(v34 + 144) = 0;
            *(_OWORD *)(v34 + 112) = 0u;
            uint64_t v35 = v34 + 112;
            specialized withKDebugValues(_:_:closure:)(v24, v34, v24, (uint64_t)v12);
            outlined init with copy of CVarArg?(v35, (uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v33);
            swift_bridgeObjectRelease();
            if (!v53) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v52, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v33);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v36 = v50;
            uint64_t v37 = __swift_project_value_buffer(v50, (uint64_t)static OSSignpostID.continuation);
            v32(v12, v37, v36);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2)
{
  LODWORD(v3) = a1;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v39 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      char v40 = v3 & 1;
      __int16 v41 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v34 = v10;
    int v35 = v3;
    uint64_t v36 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v36 + 16;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v9, v39);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v38 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v37 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v32 = inited;
        uint64_t v33 = v9;
        uint64_t v17 = v34 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v42)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v36 + 8);
          uint64_t v3 = v39;
          v31(v33, v39);
          v31(v6, v3);
          LOBYTE(v3) = v35;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v39;
          uint64_t v24 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v37;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!v42) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v40, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v39;
            uint64_t v30 = __swift_project_value_buffer(v39, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(_OWORD *a1, char a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      long long v44 = a1[2];
      __int16 v45 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v36 = v10;
    long long v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        int v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t inited;
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  long long v33;
  void v34[2];
  char *v35;
  int v36;
  _OWORD *v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  long long v43;
  unsigned char v44[26];
  __int16 v45;
  uint64_t v46;

  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v41 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v34 - v8;
  if (a2)
  {
    int v10 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      long long v33 = a1[1];
      long long v42 = *a1;
      long long v43 = v33;
      *(_OWORD *)long long v44 = a1[2];
      *(_OWORD *)&v44[10] = *(_OWORD *)((char *)a1 + 42);
      __int16 v45 = 256;
      outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)a1);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
      AGGraphSetOutputValue();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    int v36 = v10;
    long long v37 = a1;
    uint64_t v38 = v4;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v14 = v13;
    uint64_t v15 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v16 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v12;
    uint64_t v17 = inited + 32;
    *(void *)(inited + 64) = v16;
    *(void *)(inited + 40) = v14;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v15;
    *(void *)(inited + 104) = v16;
    *(void *)(inited + 80) = v18;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v19 = v38 + 16;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v6, v9, v41);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v40 = v20;
    uint64_t v21 = swift_initStackObject();
    long long v39 = xmmword_2461BE2B0;
    *(_OWORD *)(v21 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v22 = v21;
      outlined init with copy of AnyTrackedValue(inited + 32, v21 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v34[1] = inited;
        int v35 = v9;
        uint64_t v17 = v36 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v22 + 72);
        *(_OWORD *)(v22 + 128) = 0u;
        *(void *)(v22 + 144) = 0;
        *(_OWORD *)(v22 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v17, v22, v17, (uint64_t)v6);
        outlined init with copy of CVarArg?(v22 + 112, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!*((void *)&v43 + 1))
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v31 = *(void (**)(char *, uint64_t))(v38 + 8);
          uint64_t v32 = v41;
          v31(v35, v41);
          v31(v6, v32);
          a1 = v37;
          goto LABEL_15;
        }
        uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v19 + 8);
        outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v23 = v41;
          uint64_t v24 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
          uint64_t v25 = *v12;
          (*v12)(v6, v24, v23);
          uint64_t v26 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v27 = swift_initStackObject();
            *(_OWORD *)(v27 + 16) = v39;
            *(_OWORD *)(v27 + 32) = 0u;
            *(_OWORD *)(v27 + 48) = 0u;
            *(_OWORD *)(v27 + 64) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(void *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            uint64_t v28 = v27 + 112;
            specialized withKDebugValues(_:_:closure:)(v17, v27, v17, (uint64_t)v6);
            outlined init with copy of CVarArg?(v28, (uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            swift_bridgeObjectRelease();
            if (!*((void *)&v43 + 1)) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v42, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v26);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v29 = v41;
            uint64_t v30 = __swift_project_value_buffer(v41, (uint64_t)static OSSignpostID.continuation);
            v25(v6, v30, v29);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, void *a2, void *a3, char a4)
{
  LODWORD(v7) = a1;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v53 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v53 - 8);
  MEMORY[0x270FA5388](v53);
  int v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v44 - v12;
  if ((a4 & 1) == 0) {
    return;
  }
  int v14 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    int v45 = v14;
    uint64_t v49 = a2;
    uint64_t v50 = v8;
    int v47 = v7;
    long long v48 = a3;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v16 = AGTypeID.description.getter();
    uint64_t v18 = v17;
    uint64_t v19 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v20 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v16;
    uint64_t v21 = inited + 32;
    *(void *)(inited + 64) = v20;
    *(void *)(inited + 40) = v18;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v19;
    *(void *)(inited + 104) = v20;
    *(void *)(inited + 80) = v22;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v24 = v50 + 16;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    uint64_t v46 = v13;
    v23(v10, v13, v53);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v52 = v25;
    uint64_t v26 = swift_initStackObject();
    long long v51 = xmmword_2461BE2B0;
    *(_OWORD *)(v26 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v27 = v26;
      outlined init with copy of AnyTrackedValue(inited + 32, v26 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v44[1] = inited;
        uint64_t v21 = v45 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v27 + 72);
        *(_OWORD *)(v27 + 128) = 0u;
        *(void *)(v27 + 144) = 0;
        *(_OWORD *)(v27 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v21, v27, v21, (uint64_t)v10);
        outlined init with copy of CVarArg?(v27 + 112, (uint64_t)v54, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v56)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v54, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          int v36 = *(void (**)(char *, uint64_t))(v50 + 8);
          uint64_t v7 = v53;
          v36(v46, v53);
          v36(v10, v7);
          a3 = v48;
          a2 = v49;
          LOBYTE(v7) = v47;
          goto LABEL_15;
        }
        uint64_t v20 = (void (**)(char *, uint64_t, uint64_t))(v24 + 8);
        outlined destroy of CVarArg?((uint64_t)v54, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v28 = v53;
          uint64_t v29 = __swift_project_value_buffer(v53, (uint64_t)static OSSignpostID.continuation);
          uint64_t v30 = *v20;
          (*v20)(v10, v29, v28);
          uint64_t v31 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v32 = swift_initStackObject();
            *(_OWORD *)(v32 + 16) = v51;
            *(_OWORD *)(v32 + 32) = 0u;
            *(_OWORD *)(v32 + 48) = 0u;
            *(_OWORD *)(v32 + 64) = 0u;
            *(_OWORD *)(v32 + 80) = 0u;
            *(_OWORD *)(v32 + 96) = 0u;
            *(_OWORD *)(v32 + 128) = 0u;
            *(void *)(v32 + 144) = 0;
            *(_OWORD *)(v32 + 112) = 0u;
            uint64_t v33 = v32 + 112;
            specialized withKDebugValues(_:_:closure:)(v21, v32, v21, (uint64_t)v10);
            outlined init with copy of CVarArg?(v33, (uint64_t)v54, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v31);
            swift_bridgeObjectRelease();
            if (!v56) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v54, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v31);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v34 = v53;
            uint64_t v35 = __swift_project_value_buffer(v53, (uint64_t)static OSSignpostID.continuation);
            v30(v10, v35, v34);
          }
          goto LABEL_14;
        }
LABEL_22:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_15:
  AGGraphClearUpdate();
  char v37 = v7 & 1;
  if (v7) {
    double v38 = 1.0;
  }
  else {
    double v38 = 0.0;
  }
  type metadata accessor for ColorBox<CGColorRef>();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = a3;
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.PlatformFontProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.PlatformFontProvider and conformance Font.PlatformFontProvider, (uint64_t)&type metadata for Font.PlatformFontProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a2;
  uint64_t KeyPath = swift_getKeyPath();
  *(double *)uint64_t v54 = v38;
  v54[1] = v39;
  char v55 = v37;
  uint64_t v56 = closure #1 in _IntelligenceSupport.AnimatingSummarySymbol.body.getter;
  uint64_t v57 = 0;
  uint64_t v58 = KeyPath;
  uint64_t v59 = v40;
  id v42 = a3;
  id v43 = a2;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>();
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  LODWORD(v7) = a3;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v50 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  if ((a5 & 1) == 0) {
    return;
  }
  int v47 = (char *)v40 - v14;
  int v15 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    int v41 = v15;
    int v42 = v7;
    uint64_t v45 = a4;
    uint64_t v46 = v10;
    uint64_t v43 = a1;
    uint64_t v44 = a2;
    uint64_t v16 = v47;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v18 = AGTypeID.description.getter();
    uint64_t v20 = v19;
    uint64_t v21 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v22 = (void (**)(char *, uint64_t, uint64_t))lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v18;
    uint64_t v23 = inited + 32;
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v21;
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v46 + 16;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v12, v16, v50);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v49 = v26;
    uint64_t v27 = swift_initStackObject();
    long long v48 = xmmword_2461BE2B0;
    *(_OWORD *)(v27 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v28 = v27;
      outlined init with copy of AnyTrackedValue(inited + 32, v27 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v40[1] = inited;
        uint64_t v23 = v41 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v28 + 72);
        *(_OWORD *)(v28 + 128) = 0u;
        *(void *)(v28 + 144) = 0;
        *(_OWORD *)(v28 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v23, v28, v23, (uint64_t)v12);
        outlined init with copy of CVarArg?(v28 + 112, (uint64_t)&v51, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v54)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)&v51, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          char v37 = *(void (**)(char *, uint64_t))(v46 + 8);
          uint64_t v7 = v50;
          v37(v47, v50);
          v37(v12, v7);
          a2 = v44;
          a4 = v45;
          a1 = v43;
          LOBYTE(v7) = v42;
          goto LABEL_15;
        }
        uint64_t v22 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)&v51, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v29 = v50;
          uint64_t v30 = __swift_project_value_buffer(v50, (uint64_t)static OSSignpostID.continuation);
          uint64_t v31 = *v22;
          (*v22)(v12, v30, v29);
          uint64_t v32 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v33 = swift_initStackObject();
            *(_OWORD *)(v33 + 16) = v48;
            *(_OWORD *)(v33 + 32) = 0u;
            *(_OWORD *)(v33 + 48) = 0u;
            *(_OWORD *)(v33 + 64) = 0u;
            *(_OWORD *)(v33 + 80) = 0u;
            *(_OWORD *)(v33 + 96) = 0u;
            *(_OWORD *)(v33 + 128) = 0u;
            *(void *)(v33 + 144) = 0;
            *(_OWORD *)(v33 + 112) = 0u;
            uint64_t v34 = v33 + 112;
            specialized withKDebugValues(_:_:closure:)(v23, v33, v23, (uint64_t)v12);
            outlined init with copy of CVarArg?(v34, (uint64_t)&v51, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v32);
            swift_bridgeObjectRelease();
            if (!v54) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v51, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v32);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v35 = v50;
            uint64_t v36 = __swift_project_value_buffer(v50, (uint64_t)static OSSignpostID.continuation);
            v31(v12, v36, v35);
          }
          goto LABEL_14;
        }
LABEL_21:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  AGGraphClearUpdate();
  char v38 = v7 & 1;
  outlined copy of Text.Storage(a1, a2, v38);
  uint64_t v39 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  char v53 = v38;
  uint64_t v54 = a4;
  char v55 = closure #1 in _IntelligenceSupport.AnimatingText.body.getter;
  uint64_t v56 = 0;
  long long v57 = static Alignment.topLeading;
  AGGraphSetUpdate();
  $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Text, _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>>, (void (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>);
  AGGraphSetOutputValue();
  outlined consume of Text.Storage(v51, v52, v53);
  swift_bridgeObjectRelease();
  swift_release();
}

void specialized ViewBodyAccessor.updateBody(of:changed:)(int a1, char a2, double a3, double a4, double a5)
{
  LODWORD(v7) = a1;
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v45 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v38 - v14;
  if (a2)
  {
    int v16 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      *(double *)uint64_t v46 = a3;
      *(double *)&v46[1] = a4;
      char v47 = v7 & 1;
      double v48 = a5;
      __int16 v49 = 256;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>();
      AGGraphSetOutputValue();
      return;
    }
    int v40 = v16;
    int v41 = v7;
    uint64_t v42 = v10;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v18 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v20 = v19;
    uint64_t v21 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v18;
    uint64_t v23 = inited + 32;
    *(void *)(inited + 64) = v22;
    *(void *)(inited + 40) = v20;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v21;
    *(void *)(inited + 104) = v22;
    *(void *)(inited + 80) = v24;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v25 = v42 + 16;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v12, v15, v45);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v44 = v26;
    uint64_t v27 = swift_initStackObject();
    long long v43 = xmmword_2461BE2B0;
    *(_OWORD *)(v27 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v28 = v27;
      outlined init with copy of AnyTrackedValue(inited + 32, v27 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v38 = inited;
        uint64_t v39 = v15;
        uint64_t v23 = v40 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v28 + 72);
        *(_OWORD *)(v28 + 128) = 0u;
        *(void *)(v28 + 144) = 0;
        *(_OWORD *)(v28 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v23, v28, v23, (uint64_t)v12);
        outlined init with copy of CVarArg?(v28 + 112, (uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (v48 == 0.0)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          char v37 = *(void (**)(char *, uint64_t))(v42 + 8);
          uint64_t v7 = v45;
          v37(v39, v45);
          v37(v12, v7);
          LOBYTE(v7) = v41;
          goto LABEL_15;
        }
        uint64_t v18 = (void (**)(char *, uint64_t, uint64_t))(v25 + 8);
        outlined destroy of CVarArg?((uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v29 = v45;
          uint64_t v30 = __swift_project_value_buffer(v45, (uint64_t)static OSSignpostID.continuation);
          uint64_t v31 = *v18;
          (*v18)(v12, v30, v29);
          uint64_t v32 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v33 = swift_initStackObject();
            *(_OWORD *)(v33 + 16) = v43;
            *(_OWORD *)(v33 + 32) = 0u;
            *(_OWORD *)(v33 + 48) = 0u;
            *(_OWORD *)(v33 + 64) = 0u;
            *(_OWORD *)(v33 + 80) = 0u;
            *(_OWORD *)(v33 + 96) = 0u;
            *(_OWORD *)(v33 + 128) = 0u;
            *(void *)(v33 + 144) = 0;
            *(_OWORD *)(v33 + 112) = 0u;
            uint64_t v34 = v33 + 112;
            specialized withKDebugValues(_:_:closure:)(v23, v33, v23, (uint64_t)v12);
            outlined init with copy of CVarArg?(v34, (uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v32);
            swift_bridgeObjectRelease();
            if (v48 == 0.0) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v46, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v32);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v35 = v45;
            uint64_t v36 = __swift_project_value_buffer(v45, (uint64_t)static OSSignpostID.continuation);
            v31(v12, v36, v35);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(char a1, double a2, double a3)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v42 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v36 - v10;
  if (a1)
  {
    int v12 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      uint64_t v35 = swift_allocObject();
      *(double *)(v35 + 16) = a3;
      *(double *)(v35 + 24) = a2;
      v43[0] = 0;
      uint64_t v44 = partial apply for closure #1 in DistanceGesture.body.getter;
      uint64_t v45 = v35;
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>();
      AGGraphSetOutputValue();
      swift_release();
      return;
    }
    int v38 = v12;
    uint64_t v39 = v6;
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v16 = v15;
    uint64_t v17 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v18 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v14;
    uint64_t v19 = inited + 32;
    *(void *)(inited + 64) = v18;
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v17;
    *(void *)(inited + 104) = v18;
    *(void *)(inited + 80) = v20;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v21 = v39 + 16;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v8, v11, v42);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v41 = v22;
    uint64_t v23 = swift_initStackObject();
    long long v40 = xmmword_2461BE2B0;
    *(_OWORD *)(v23 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v24 = v23;
      outlined init with copy of AnyTrackedValue(inited + 32, v23 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v36 = inited;
        char v37 = v11;
        uint64_t v19 = v38 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v24 + 72);
        *(_OWORD *)(v24 + 128) = 0u;
        *(void *)(v24 + 144) = 0;
        *(_OWORD *)(v24 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v19, v24, v19, (uint64_t)v8);
        outlined init with copy of CVarArg?(v24 + 112, (uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v33 = *(void (**)(char *, uint64_t))(v39 + 8);
          uint64_t v34 = v42;
          v33(v37, v42);
          v33(v8, v34);
          goto LABEL_15;
        }
        uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v21 + 8);
        outlined destroy of CVarArg?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v25 = v42;
          uint64_t v26 = __swift_project_value_buffer(v42, (uint64_t)static OSSignpostID.continuation);
          uint64_t v27 = *v14;
          (*v14)(v8, v26, v25);
          uint64_t v28 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v29 = swift_initStackObject();
            *(_OWORD *)(v29 + 16) = v40;
            *(_OWORD *)(v29 + 32) = 0u;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 128) = 0u;
            *(void *)(v29 + 144) = 0;
            *(_OWORD *)(v29 + 112) = 0u;
            uint64_t v30 = v29 + 112;
            specialized withKDebugValues(_:_:closure:)(v19, v29, v19, (uint64_t)v8);
            outlined init with copy of CVarArg?(v30, (uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
            swift_bridgeObjectRelease();
            if (!v46) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v43, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v28);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v31 = v42;
            uint64_t v32 = __swift_project_value_buffer(v42, (uint64_t)static OSSignpostID.continuation);
            v27(v8, v32, v31);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

void specialized GestureBodyAccessor.updateBody(of:changed:)(char a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v38 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v32 - v6;
  if (a1)
  {
    int v8 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
LABEL_15:
      AGGraphClearUpdate();
      specialized SingleTapGesture.body.getter((uint64_t)v39);
      AGGraphSetUpdate();
      $defer #1 <A>() in traceRuleBody<A>(_:body:)();
      type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>();
      AGGraphSetOutputValue();
      outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>);
      return;
    }
    int v34 = v8;
    uint64_t v35 = v2;
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    static OSSignpostID.exclusive.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v10 = v7;
    uint64_t v11 = (void (**)(char *, uint64_t, uint64_t))AGTypeID.description.getter();
    uint64_t v13 = v12;
    uint64_t v14 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v15 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v11;
    uint64_t v16 = inited + 32;
    *(void *)(inited + 64) = v15;
    *(void *)(inited + 40) = v13;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v14;
    *(void *)(inited + 104) = v15;
    *(void *)(inited + 80) = v17;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v18 = v35 + 16;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v4, v10, v38);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v37 = v19;
    uint64_t v20 = swift_initStackObject();
    long long v36 = xmmword_2461BE2B0;
    *(_OWORD *)(v20 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v21 = v20;
      outlined init with copy of AnyTrackedValue(inited + 32, v20 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v32 = inited;
        uint64_t v33 = v10;
        uint64_t v16 = v34 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v21 + 72);
        *(_OWORD *)(v21 + 128) = 0u;
        *(void *)(v21 + 144) = 0;
        *(_OWORD *)(v21 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v16, v21, v16, (uint64_t)v4);
        outlined init with copy of CVarArg?(v21 + 112, (uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v40)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          uint64_t v30 = *(void (**)(char *, uint64_t))(v35 + 8);
          uint64_t v31 = v38;
          v30(v33, v38);
          v30(v4, v31);
          goto LABEL_15;
        }
        uint64_t v11 = (void (**)(char *, uint64_t, uint64_t))(v18 + 8);
        outlined destroy of CVarArg?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v22 = v38;
          uint64_t v23 = __swift_project_value_buffer(v38, (uint64_t)static OSSignpostID.continuation);
          uint64_t v24 = *v11;
          (*v11)(v4, v23, v22);
          uint64_t v25 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v26 = swift_initStackObject();
            *(_OWORD *)(v26 + 16) = v36;
            *(_OWORD *)(v26 + 32) = 0u;
            *(_OWORD *)(v26 + 48) = 0u;
            *(_OWORD *)(v26 + 64) = 0u;
            *(_OWORD *)(v26 + 80) = 0u;
            *(_OWORD *)(v26 + 96) = 0u;
            *(_OWORD *)(v26 + 128) = 0u;
            *(void *)(v26 + 144) = 0;
            *(_OWORD *)(v26 + 112) = 0u;
            uint64_t v27 = v26 + 112;
            specialized withKDebugValues(_:_:closure:)(v16, v26, v16, (uint64_t)v4);
            outlined init with copy of CVarArg?(v27, (uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            swift_bridgeObjectRelease();
            if (!v40) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v39, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v25);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v28 = v38;
            uint64_t v29 = __swift_project_value_buffer(v38, (uint64_t)static OSSignpostID.continuation);
            v24(v4, v29, v28);
          }
          goto LABEL_14;
        }
LABEL_19:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
}

uint64_t specialized AnyGestureInfo.eraseItem(info:)()
{
  int v1 = *(_DWORD *)(v0 + 140);
  uint64_t v2 = *(void *)(v0 + 144);
  int v3 = *MEMORY[0x263F288F8];
  swift_bridgeObjectRetain();
  AGGraphSetIndirectAttribute();
  if (v1 != v3) {
    AGGraphSetIndirectAttribute();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 48;
    do
    {
      AGGraphSetIndirectAttribute();
      v5 += 24;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v6);
  AGSubgraphApply();
  return AGSubgraphInvalidate();
}

id outlined copy of AnyGestureInfo<()>.Value?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyResetSeed<()> and conformance AnyResetSeed<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>;
  if (!lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for AnyResetSeed<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for AnyResetSeed);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyResetSeed<()> and conformance AnyResetSeed<A>);
  }
  return result;
}

void type metadata accessor for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>()
{
  if (!lazy cache variable for type metadata for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    unint64_t v0 = type metadata accessor for BodyCountInput();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BodyCountInput<_ViewModifier_Content<SafeAreaPaddingModifier>>);
    }
  }
}

void type metadata accessor for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>()
{
  if (!lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    unint64_t v0 = type metadata accessor for BodyInput();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BodyInput<_ViewModifier_Content<SafeAreaPaddingModifier>>);
    }
  }
}

uint64_t outlined copy of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of SafeAreaPaddingModifier(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_release();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
    type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    }
  }
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>()
{
  if (!lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>, (uint64_t)&type metadata for Color, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
    lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _InsetViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>, (uint64_t)&type metadata for Color, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>);
    }
  }
}

uint64_t sub_245ABD944()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for _ShapeView<Rectangle, MeshGradient>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, MeshGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, MeshGradient>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, MeshGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, MeshGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t outlined consume of MeshGradient?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>);
    }
  }
}

void type metadata accessor for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape._Inset, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<ContainerRelativeShape._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<ContainerRelativeShape._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ContainerRelativeShape, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<ContainerRelativeShape, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout;
  if (!lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout;
  if (!lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AlignmentLayout and conformance _AlignmentLayout);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>);
    }
  }
}

void type metadata accessor for _ShapeView<Circle._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Circle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle._Inset, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Circle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Circle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Circle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Circle._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<Ellipse._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Ellipse._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Ellipse._Inset, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset;
  if (!lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse._Inset and conformance Ellipse._Inset);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Ellipse._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Ellipse._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Ellipse._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<Capsule._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Capsule._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule._Inset, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Capsule._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Capsule._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Capsule._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle._Inset, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset);
  }
  return result;
}

__n128 partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 176);
  a1[10] = *(_OWORD *)(v2 + 160);
  a1[11] = v3;
  a1[12] = *(_OWORD *)(v2 + 192);
  *(_OWORD *)((char *)a1 + 201) = *(_OWORD *)(v2 + 201);
  long long v4 = *(_OWORD *)(v2 + 112);
  a1[6] = *(_OWORD *)(v2 + 96);
  a1[7] = v4;
  long long v5 = *(_OWORD *)(v2 + 144);
  a1[8] = *(_OWORD *)(v2 + 128);
  a1[9] = v5;
  long long v6 = *(_OWORD *)(v2 + 48);
  a1[2] = *(_OWORD *)(v2 + 32);
  a1[3] = v6;
  long long v7 = *(_OWORD *)(v2 + 80);
  a1[4] = *(_OWORD *)(v2 + 64);
  a1[5] = v7;
  __n128 result = *(__n128 *)v2;
  long long v9 = *(_OWORD *)(v2 + 16);
  *a1 = *(_OWORD *)v2;
  a1[1] = v9;
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<RoundedRectangle._Inset, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<RoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<RoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<RoundedRectangle._Inset>>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle._Inset, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle._Inset, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle._Inset, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<Rectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<Rectangle._Inset>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<Rectangle._Inset>>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Circle, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Circle, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Ellipse, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Ellipse, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Ellipse and conformance Ellipse()
{
  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Ellipse, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Ellipse, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<Capsule, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Capsule, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Capsule, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Capsule, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Capsule, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<UnevenRoundedRectangle, ForegroundStyle>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<UnevenRoundedRectangle>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<UnevenRoundedRectangle>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<UnevenRoundedRectangle>>);
    }
  }
}

uint64_t sub_245AC03E4()
{
  return swift_deallocObject();
}

void type metadata accessor for _ShapeView<Path, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Path, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type Path and conformance Path();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Path, ForegroundStyle>);
    }
  }
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(_OWORD *a1)
{
  long long v3 = *(long long **)(v1 + 16);
  long long v26 = *v3;
  long long v4 = v3[1];
  long long v5 = v3[2];
  long long v6 = v3[4];
  long long v29 = v3[3];
  long long v30 = v6;
  long long v27 = v4;
  long long v28 = v5;
  long long v7 = v3[5];
  long long v8 = v3[6];
  long long v9 = v3[8];
  long long v33 = v3[7];
  long long v34 = v9;
  long long v31 = v7;
  long long v32 = v8;
  long long v10 = v3[9];
  long long v11 = v3[10];
  long long v12 = v3[11];
  *(_OWORD *)&v37[9] = *(long long *)((char *)v3 + 185);
  long long v36 = v11;
  *(_OWORD *)uint64_t v37 = v12;
  long long v35 = v10;
  long long v13 = a1[3];
  v38[2] = a1[2];
  v38[3] = v13;
  long long v14 = a1[1];
  v38[0] = *a1;
  v38[1] = v14;
  long long v15 = a1[7];
  v38[6] = a1[6];
  v38[7] = v15;
  long long v16 = a1[5];
  v38[4] = a1[4];
  v38[5] = v16;
  *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)a1 + 185);
  long long v17 = a1[11];
  v38[10] = a1[10];
  v39[0] = v17;
  long long v18 = a1[9];
  v38[8] = a1[8];
  v38[9] = v18;
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v38, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  long long v19 = *(_OWORD *)v37;
  a1[10] = v36;
  a1[11] = v19;
  *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)&v37[9];
  long long v20 = v33;
  a1[6] = v32;
  a1[7] = v20;
  long long v21 = v35;
  a1[8] = v34;
  a1[9] = v21;
  long long v22 = v29;
  a1[2] = v28;
  a1[3] = v22;
  long long v23 = v31;
  a1[4] = v30;
  a1[5] = v23;
  long long v24 = v27;
  *a1 = v26;
  a1[1] = v24;
  return _s7SwiftUI4PathVWOrTm_0((uint64_t)&v26, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *(_OWORD **)(v1 + 16);
  v19[0] = *v2;
  long long v3 = v2[1];
  long long v4 = v2[2];
  long long v5 = v2[4];
  _OWORD v19[3] = v2[3];
  v19[4] = v5;
  v19[1] = v3;
  void v19[2] = v4;
  long long v6 = v2[5];
  long long v7 = v2[6];
  long long v8 = v2[8];
  v19[7] = v2[7];
  char v19[8] = v8;
  v19[5] = v6;
  v19[6] = v7;
  long long v9 = v2[9];
  long long v10 = v2[10];
  long long v11 = v2[11];
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)v2 + 185);
  _OWORD v19[10] = v10;
  *(_OWORD *)long long v20 = v11;
  v19[9] = v9;
  long long v12 = v2[11];
  a1[10] = v2[10];
  a1[11] = v12;
  *(_OWORD *)((char *)a1 + 185) = *(_OWORD *)((char *)v2 + 185);
  long long v13 = v2[7];
  a1[6] = v2[6];
  a1[7] = v13;
  long long v14 = v2[9];
  a1[8] = v2[8];
  a1[9] = v14;
  long long v15 = v2[3];
  a1[2] = v2[2];
  a1[3] = v15;
  long long v16 = v2[5];
  a1[4] = v2[4];
  a1[5] = v16;
  long long v17 = v2[1];
  *a1 = *v2;
  a1[1] = v17;
  return _s7SwiftUI4PathVWOrTm_0((uint64_t)v19, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Path, ForegroundStyle>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Path, ForegroundStyle>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Path, ForegroundStyle>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<AnyShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<AnyShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type AnyShape and conformance AnyShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<AnyShape, ForegroundStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyShape and conformance AnyShape()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyShape and conformance AnyShape;
  if (!lazy protocol witness table cache variable for type AnyShape and conformance AnyShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyShape and conformance AnyShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyShape and conformance AnyShape;
  if (!lazy protocol witness table cache variable for type AnyShape and conformance AnyShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyShape and conformance AnyShape);
  }
  return result;
}

void type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>()
{
  if (!lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for LeafLayoutEngine();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LeafLayoutEngine<AnimatedShape<AnyShape>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderData<AnimatedShape<AnyShape>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderData();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderData<AnimatedShape<AnyShape>>);
    }
  }
}

void type metadata accessor for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledResponderFilter<AnimatedShape<AnyShape>>);
    }
  }
}

void type metadata accessor for ShapeStyledDisplayList<AnimatedShape<AnyShape>>()
{
  if (!lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<AnyShape>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
    unint64_t v0 = type metadata accessor for ShapeStyledDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStyledDisplayList<AnimatedShape<AnyShape>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Font?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    }
  }
}

uint64_t outlined consume of _EnvironmentKeyWritingModifier<Font?>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  return specialized closure #1 in implicit closure #2 in implicit closure #1 in ChildEnvironment.updateValue()(a1);
}

uint64_t outlined copy of _EnvironmentKeyWritingModifier<Font?>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for WritableKeyPath<EnvironmentValues, Font?>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Font?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<EnvironmentValues, Font?>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(255, &lazy cache variable for type metadata for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, &lazy cache variable for type metadata for _ValueTransactionModifier<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F8D510]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Bool>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<Image, _ForegroundStyleModifier2<AngularGradient, Color>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>()
{
  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for _OverlayPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>);
    }
  }
}

void type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>();
    lazy protocol witness table accessor for type ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = MEMORY[0x263F8D6C8];
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    uint64_t v8 = v7;
    type metadata accessor for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>();
    uint64_t v10 = v9;
    unint64_t v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    unint64_t v12 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    v15[0] = v8;
    v15[1] = v6;
    _OWORD v15[2] = v10;
    void v15[3] = v11;
    v15[4] = MEMORY[0x263F8D6D8];
    void v15[5] = v12;
    unint64_t v13 = a3(a1, v15);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>);
    }
  }
}

uint64_t sub_245AC1388()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DistanceGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in DistanceGesture.body.getter(a1, a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24));
}

void type metadata accessor for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>();
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>);
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, EventListener<SpatialEvent>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>)
  {
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t outlined copy of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1) {
    return swift_retain();
  }
  if (!a10) {
    return outlined copy of SpatialEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined copy of SpatialEvent?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1) {
    return swift_release();
  }
  if (!a10) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ObservationTracking._AccessList?(0, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType), MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: EventID, value: EventType)()
{
  if (!lazy cache variable for type metadata for (key: EventID, value: EventType))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType));
    }
  }
}

uint64_t outlined init with copy of CVarArg?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  type metadata accessor for ViewList?(0, a3, a4, a5, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (a10 != 255) {
    return outlined consume of GesturePhase<SpatialEvent>(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

void type metadata accessor for (EventID, EventType)()
{
  if (!lazy cache variable for type metadata for (EventID, EventType))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for EventType);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, EventType));
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle, AngularGradient>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, AngularGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, AngularGradient>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, AngularGradient>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, AngularGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, AngularGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

void type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, EllipticalGradient>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, EllipticalGradient>);
    }
  }
}

void type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
}

void type metadata accessor for ShapeStyledResponderData<_ShapeView<Rectangle, EllipticalGradient>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, EllipticalGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledDisplayList);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledDisplayList<_ShapeView<Rectangle, EllipticalGradient>> and conformance ShapeStyledDisplayList<A>);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1, void (*a2)(_OWORD *), uint64_t (*a3)(long long *))
{
  uint64_t v6 = *(long long **)(v3 + 16);
  long long v7 = v6[1];
  long long v31 = *v6;
  long long v32 = v7;
  long long v8 = v6[2];
  long long v9 = v6[3];
  long long v10 = v6[5];
  long long v35 = v6[4];
  long long v36 = v10;
  long long v33 = v8;
  long long v34 = v9;
  long long v11 = v6[6];
  long long v12 = v6[7];
  long long v13 = v6[9];
  long long v39 = v6[8];
  long long v40 = v13;
  long long v37 = v11;
  long long v38 = v12;
  long long v14 = v6[10];
  long long v15 = v6[11];
  long long v16 = v6[12];
  char v44 = *((unsigned char *)v6 + 208);
  long long v42 = v15;
  long long v43 = v16;
  long long v41 = v14;
  long long v17 = *(_OWORD *)(a1 + 16);
  v45[0] = *(_OWORD *)a1;
  v45[1] = v17;
  long long v18 = *(_OWORD *)(a1 + 80);
  v45[4] = *(_OWORD *)(a1 + 64);
  v45[5] = v18;
  long long v19 = *(_OWORD *)(a1 + 48);
  v45[2] = *(_OWORD *)(a1 + 32);
  void v45[3] = v19;
  long long v20 = *(_OWORD *)(a1 + 144);
  v45[8] = *(_OWORD *)(a1 + 128);
  v45[9] = v20;
  long long v21 = *(_OWORD *)(a1 + 112);
  v45[6] = *(_OWORD *)(a1 + 96);
  v45[7] = v21;
  char v46 = *(unsigned char *)(a1 + 208);
  long long v22 = *(_OWORD *)(a1 + 192);
  long long v23 = *(_OWORD *)(a1 + 160);
  v45[11] = *(_OWORD *)(a1 + 176);
  v45[12] = v22;
  v45[10] = v23;
  a2(v45);
  long long v24 = v42;
  *(_OWORD *)(a1 + 160) = v41;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v43;
  *(unsigned char *)(a1 + 208) = v44;
  long long v25 = v38;
  *(_OWORD *)(a1 + 96) = v37;
  *(_OWORD *)(a1 + 112) = v25;
  long long v26 = v40;
  *(_OWORD *)(a1 + 128) = v39;
  *(_OWORD *)(a1 + 144) = v26;
  long long v27 = v34;
  *(_OWORD *)(a1 + 32) = v33;
  *(_OWORD *)(a1 + 48) = v27;
  long long v28 = v36;
  *(_OWORD *)(a1 + 64) = v35;
  *(_OWORD *)(a1 + 80) = v28;
  long long v29 = v32;
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v29;
  return a3(&v31);
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>>, (uint64_t (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, RadialGradient>, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<_ShapeView<Rectangle, RadialGradient>> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

double partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1)
{
  *(void *)&double result = specialized closure #1 in StatefulRule<>.update<A>(to:)(a1, *(void *)(v1 + 16)).n128_u64[0];
  return result;
}

double partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = specialized closure #2 in StatefulRule<>.update<A>(to:)(*(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_245AC20B8()
{
  return swift_deallocObject();
}

uint64_t sub_245AC20C8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245AC2100()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in RepeatPhase.updateValue()()
{
  return closure #2 in RepeatPhase.updateValue()();
}

uint64_t outlined consume of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_release();
  }
  if (!a4) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilter);
    type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<TappableEvent> and conformance EventFilter<A>, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilter);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>)
  {
    type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255);
    type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent> and conformance Map2Gesture<A, B, C>, type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>);
    }
  }
}

void type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(uint64_t a1)
{
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
    lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture;
  if (!lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

void type metadata accessor for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>)
  {
    type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
    type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>();
    lazy protocol witness table accessor for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>();
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>);
    }
  }
}

void type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for Map2Gesture();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, a2, (uint64_t)&type metadata for TappableEvent, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>()
{
  return lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
}

void type metadata accessor for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentGesture);
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type EventFilter<TappableEvent> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type DependentGesture<TappableEvent> and conformance DependentGesture<A>, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentGesture);
    lazy protocol witness table accessor for type ShapeStyledResponderFilter<AnimatedShape<ContainerRelativeShape._Inset>> and conformance ShapeStyledResponderFilter<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapGesture);
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
    lazy protocol witness table accessor for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableEvent, TappableEvent> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>;
  if (!lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>)
  {
    type metadata accessor for Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>(255, &lazy cache variable for type metadata for Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, (void (*)(void))lazy protocol witness table accessor for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent> and conformance Map2Gesture<A, B, C>);
  }
  return result;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245AC2C08()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Gesture.discrete(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  int v7 = *(unsigned __int8 *)(a1 + 24);
  BOOL v8 = v7 == 1;
  BOOL v9 = (v3 & v8) == 0;
  if ((v3 & v8) != 0) {
    uint64_t v10 = *(void *)a1;
  }
  else {
    uint64_t v10 = *(void *)a1;
  }
  if (v9) {
    char v11 = *(unsigned char *)(a1 + 24);
  }
  else {
    char v11 = 0;
  }
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 24) = v11;
  return outlined copy of GesturePhase<TappableEvent>(v5, v4, v6, v7);
}

uint64_t outlined init with copy of ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>, TappableEvent>, ModifierGesture<Map2Gesture<TappableEvent, ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>, TappableEvent>, ModifierGesture<DependentGesture<TappableEvent>, ModifierGesture<MapGesture<TappableEvent, TappableEvent>, EventListener<TappableEvent>>>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_245AC2CBC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(uint64_t a1)
{
  return specialized closure #1 in Gesture.eventFilter<A>(_:allowOtherTypes:_:)(a1, *(unsigned char *)(v1 + 16), *(uint64_t (**)(uint64_t *))(v1 + 24));
}

uint64_t outlined copy of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_retain();
  }
  if (!a4) {
    return outlined copy of SpatialEvent?(result, a2, a3);
  }
  return result;
}

uint64_t type metadata accessor for (_:_:)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TappableEvent>?(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 != -1) {
    return outlined consume of GesturePhase<TappableEvent>(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_245AC2DE4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245AC2E1C()
{
  return swift_deallocObject();
}

uint64_t sub_245AC2E2C()
{
  return swift_deallocObject();
}

uint64_t sub_245AC2E3C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245AC2E74()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvedStyledText.requiresTransition(to:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in ResolvedStyledText.requiresTransition(to:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32));
}

uint64_t sub_245AC2EC0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for ShapeStyledResponderFilter<StyledTextContentView>, (uint64_t)&type metadata for StyledTextContentView, (uint64_t)&protocol witness table for StyledTextContentView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyledResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyledResponderFilter<StyledTextContentView> and conformance ShapeStyledResponderFilter<A>);
  }
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _UNKNOWN **))
{
  if (!*a2)
  {
    type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(255, &lazy cache variable for type metadata for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>, (uint64_t (*)(uint64_t, void *))type metadata accessor for SizeFittingTextLayoutComputer.Engine);
    unint64_t v7 = a3(a1, v6, &protocol witness table for SizeFittingTextLayoutComputer.Engine<A, B>);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for SizeFittingTextLayoutComputer.Engine<ResolvedTextHelper, StickyTextSizeFittingLogic>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = type metadata accessor for ResolvedTextHelper(255);
    v8[1] = &type metadata for StickyTextSizeFittingLogic;
    _OWORD v8[2] = &protocol witness table for ResolvedTextHelper;
    _OWORD v8[3] = &protocol witness table for StickyTextSizeFittingLogic;
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined consume of SizeFittingTextCacheValue<StyledTextLayoutEngine>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_245AC30D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)()
{
  return specialized closure #1 in SizeFittingTextCache.suggestedVariant(for:)(*(unsigned char **)(v0 + 16));
}

BOOL partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:)@<W0>(unsigned char *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  return partial apply for specialized closure #2 in SizeFittingTextCache.suggestedVariant(for:)(a1, a2, a3);
}

{
  uint64_t v3;
  BOOL result;

  unint64_t result = specialized SizeFittingTextCacheValue.fits(_:)(*(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40), a2, a3);
  *a1 = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>.Engine, (uint64_t)&type metadata for _VSpacer, (uint64_t)&protocol witness table for _VSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_VSpacer>.Engine>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>.Engine, (uint64_t)&type metadata for _HSpacer, (uint64_t)&protocol witness table for _HSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_HSpacer>.Engine>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine, (uint64_t)&type metadata for _TextBaselineRelativeSpacer, (uint64_t)&protocol witness table for _TextBaselineRelativeSpacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<_TextBaselineRelativeSpacer>.Engine>);
    }
  }
}

uint64_t partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)v2 + 8);
  LOBYTE(v2) = *((unsigned char *)v2 + 9);
  *(void *)unint64_t result = v3;
  *(unsigned char *)(result + 8) = v4;
  *(unsigned char *)(result + 9) = (_BYTE)v2;
  return result;
}

void type metadata accessor for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>);
    }
  }
}

void type metadata accessor for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>()
{
  if (!lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    unint64_t v0 = type metadata accessor for TracingLayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>);
    }
  }
}

uint64_t assignWithTake for Image.Resolved(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    int v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      unint64_t v6 = *(void **)a1;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  unint64_t v8 = *(void *)(a1 + 120);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  if (v8 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v9 = *(void *)(a2 + 120);
    if (v9 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)(a2 + 128);
      uint64_t v12 = *(void *)(a1 + 104);
      uint64_t v13 = *(void *)(a1 + 112);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = v9;
      *(void *)(a1 + 128) = v11;
      outlined consume of AccessibilityImageLabel(v12, v13, v8);
      goto LABEL_11;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 104);
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
LABEL_11:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_unknownObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v14 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  return a1;
}

uint64_t storeEnumTagSinglePayload for Image.Resolved(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 178) = 0;
    *(_WORD *)(result + 176) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 179) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 179) = 0;
    }
    if (a2)
    {
      *(void *)(result + 104) = 0;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 2 * ~a2;
      *(void *)(result + 128) = 0;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedImageLayoutEngine()
{
  return &unk_26FA6D0B8;
}

uint64_t sub_245AC38EC()
{
  return swift_deallocObject();
}

uint64_t _ViewInputs.requestedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t PlatformImageRepresentableContext.image.getter@<X0>(uint64_t a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[7];
  long long v24 = v1[8];
  long long v25 = v2;
  long long v4 = v1[9];
  v26[0] = v1[10];
  long long v5 = v1[5];
  long long v7 = v1[3];
  long long v20 = v1[4];
  long long v6 = v20;
  long long v21 = v5;
  long long v8 = v1[5];
  long long v9 = v1[7];
  long long v22 = v1[6];
  long long v10 = v22;
  long long v23 = v9;
  long long v11 = v1[1];
  v17[0] = *v1;
  v17[1] = v11;
  long long v12 = v1[3];
  long long v14 = *v1;
  long long v13 = v1[1];
  long long v18 = v1[2];
  long long v15 = v18;
  long long v19 = v12;
  *(_OWORD *)(a1 + 128) = v24;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v1[10];
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)v1 + 175);
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v1 + 175);
  *(_OWORD *)(a1 + 32) = v15;
  *(_OWORD *)(a1 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

__n128 PlatformImageRepresentableContext.image.setter(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 144);
  v14[8] = *(_OWORD *)(v1 + 128);
  v14[9] = v3;
  v15[0] = *(_OWORD *)(v1 + 160);
  *(_DWORD *)((char *)v15 + 15) = *(_DWORD *)(v1 + 175);
  long long v4 = *(_OWORD *)(v1 + 80);
  v14[4] = *(_OWORD *)(v1 + 64);
  double v14[5] = v4;
  long long v5 = *(_OWORD *)(v1 + 112);
  v14[6] = *(_OWORD *)(v1 + 96);
  void v14[7] = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  _OWORD v14[2] = *(_OWORD *)(v1 + 32);
  v14[3] = v7;
  outlined release of Image.Resolved((uint64_t)v14);
  long long v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v1 + 144) = v8;
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(a1 + 160);
  *(_DWORD *)(v1 + 175) = *(_DWORD *)(a1 + 175);
  long long v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 80) = v9;
  long long v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 112) = v10;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v11;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v13 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v13;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.image.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformImageRepresentableContext.tintColor.getter()
{
  return swift_retain();
}

uint64_t PlatformImageRepresentableContext.tintColor.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 184) = a1;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.tintColor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformImageRepresentableContext.foregroundStyle.getter()
{
  return swift_retain();
}

uint64_t PlatformImageRepresentableContext.foregroundStyle.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 192) = a1;
  return result;
}

uint64_t (*PlatformImageRepresentableContext.foregroundStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _GraphInputs.requestedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _GraphInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*_ViewInputs.requestedImageRepresentation.modify(void *a1))(char **a1, char a2)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *long long v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedImageRepresentation.modify;
}

void _ViewInputs.requestedImageRepresentation.modify(char **a1, char a2)
{
}

void (*_GraphInputs.requestedImageRepresentation.modify(void *a1))(char **a1, char a2)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *long long v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedImageRepresentation.modify;
}

uint64_t PlatformNamedImageRepresentableContext.image.getter()
{
  return swift_retain();
}

uint64_t PlatformNamedImageRepresentableContext.image.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*PlatformNamedImageRepresentableContext.image.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PlatformNamedImageRepresentableContext.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t PlatformNamedImageRepresentableContext.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  *(void *)(v1 + 16) = v3;
  return result;
}

uint64_t (*PlatformNamedImageRepresentableContext.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewInputs.requestedNamedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _ViewInputs.requestedImageRepresentation.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = a1(v3);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 72);
  }
  else {
    uint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v5;
}

uint64_t key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  swift_retain();
  a5(a2, v7, v8, &v10);
  return swift_release();
}

uint64_t _GraphInputs.requestedNamedImageRepresentation.getter()
{
  return _ViewInputs.requestedImageRepresentation.getter(specialized find<A>(_:key:));
}

uint64_t _GraphInputs.requestedNamedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*_ViewInputs.requestedNamedImageRepresentation.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedNamedImageRepresentation.modify;
}

void _ViewInputs.requestedNamedImageRepresentation.modify(char **a1, char a2)
{
}

void _ViewInputs.requestedImageRepresentation.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 4);
  uint64_t v7 = *(void *)*a1;
  uint64_t v8 = *((void *)*a1 + 1);
  swift_retain();
  if (a2) {
    long long v9 = v5 + 16;
  }
  else {
    long long v9 = v5 + 24;
  }
  a3(v6, v7, v8, v9);
  swift_release();

  free(v5);
}

uint64_t key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = a4(a1, a2, a3, a4, a5, a6);
  *a7 = result;
  a7[1] = v9;
  return result;
}

void (*_GraphInputs.requestedNamedImageRepresentation.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v6;
  v3[1] = v7;
  return _ViewInputs.requestedNamedImageRepresentation.modify;
}

uint64_t sub_245AC42DC@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs(_ViewInputs.requestedImageRepresentation.getter, a1);
}

uint64_t sub_245AC4308(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245AC4334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))_GraphInputs.requestedImageRepresentation.getter, a4, a5, a6);
}

uint64_t sub_245AC4360(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245AC438C@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedImageRepresentation : _ViewInputs(_ViewInputs.requestedNamedImageRepresentation.getter, a1);
}

uint64_t sub_245AC43B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245AC43E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return key path getter for _GraphInputs.requestedImageRepresentation : _GraphInputs(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))_GraphInputs.requestedNamedImageRepresentation.getter, a4, a5, a6);
}

uint64_t sub_245AC4410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ViewInputs.requestedImageRepresentation : _ViewInputs(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t dispatch thunk of static PlatformImageRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for PlatformImageRepresentableContext(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != 255) {
    outlined consume of GraphicsImage.Contents(*(void **)a1, v2);
  }
  unint64_t v3 = *(void *)(a1 + 120);
  if (v3 >> 1 != 0xFFFFFFFF) {
    outlined consume of AccessibilityImageLabel(*(void *)(a1 + 104), *(void *)(a1 + 112), v3);
  }
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return swift_release();
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for PlatformImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 != 255)
  {
    int v5 = *(unsigned __int8 *)(a2 + 8);
    if (v5 != 255)
    {
      long long v6 = *(void **)a1;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = v5;
      outlined consume of GraphicsImage.Contents(v6, v4);
      goto LABEL_6;
    }
    outlined destroy of GraphicsImage.Contents(a1);
  }
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  unint64_t v8 = *(void *)(a1 + 120);
  *(_WORD *)(a1 + 98) = *(_WORD *)(a2 + 98);
  if (v8 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v9 = *(void *)(a2 + 120);
    if (v9 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)(a2 + 128);
      uint64_t v12 = *(void *)(a1 + 104);
      uint64_t v13 = *(void *)(a1 + 112);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = v9;
      *(void *)(a1 + 128) = v11;
      outlined consume of AccessibilityImageLabel(v12, v13, v8);
      goto LABEL_11;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 104);
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v10;
LABEL_11:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_unknownObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v14 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformImageRepresentableContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 120) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformImageRepresentableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2)
    {
      *(void *)(result + 104) = 0;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = 2 * ~a2;
      *(void *)(result + 128) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformImageRepresentableContext()
{
  return &type metadata for PlatformImageRepresentableContext;
}

uint64_t dispatch thunk of static PlatformNamedImageRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformNamedImageRepresentable.makeRepresentation(inputs:context:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for PlatformNamedImageRepresentableContext()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t assignWithTake for PlatformNamedImageRepresentableContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for PlatformNamedImageRepresentableContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformNamedImageRepresentableContext()
{
  return &type metadata for PlatformNamedImageRepresentableContext;
}

ValueMetadata *type metadata accessor for _GraphInputs.ImageRepresentationKey()
{
  return &type metadata for _GraphInputs.ImageRepresentationKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.NamedImageRepresentationKey()
{
  return &type metadata for _GraphInputs.NamedImageRepresentationKey;
}

uint64_t ScrollTarget.init(rect:anchor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(double *)(a4 + 16) = a7;
  *(double *)(a4 + 24) = a8;
  *(void *)(a4 + 32) = result;
  *(void *)(a4 + 40) = a2;
  *(unsigned char *)(a4 + 48) = a3 & 1;
  return result;
}

double ScrollTarget.rect.getter()
{
  return *(double *)v0;
}

void ScrollTarget.rect.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ScrollTarget.rect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTarget.anchor.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t ScrollTarget.anchor.setter(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(v3 + 32) = result;
  *(void *)(v3 + 40) = a2;
  *(unsigned char *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t (*ScrollTarget.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ScrollTarget.hash(into:)()
{
  CGFloat v1 = *(double *)v0;
  CGFloat v2 = *(double *)(v0 + 8);
  CGFloat v3 = *(double *)(v0 + 16);
  CGFloat v4 = *(double *)(v0 + 24);
  double v5 = *(double *)(v0 + 32);
  double v6 = *(double *)(v0 + 40);
  int v7 = *(unsigned __int8 *)(v0 + 48);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)v0;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&v2;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  v15.origin.double x = v1;
  v15.origin.CGFloat y = v2;
  v15.size.CGFloat width = v3;
  v15.size.CGFloat height = v4;
  double Width = CGRectGetWidth(v15);
  if ((*(void *)&Width & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = *(void *)&Width;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  v16.origin.double x = v1;
  v16.origin.CGFloat y = v2;
  v16.size.CGFloat width = v3;
  v16.size.CGFloat height = v4;
  double Height = CGRectGetHeight(v16);
  if ((*(void *)&Height & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = *(void *)&Height;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    UnitPoint.hash(into:)(v5, v6);
  }
}

BOOL static ScrollTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 32);
  double v3 = *(double *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  char v7 = *(unsigned char *)(a2 + 48);
  BOOL result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    if (v4)
    {
      if (v7) {
        return 1;
      }
    }
    else if ((v7 & 1) == 0 && v2 == v5 && v3 == v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

Swift::Int ScrollTarget.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ScrollTarget()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollTarget()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ScrollTarget(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 32);
  double v3 = *(double *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 48);
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  BOOL result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    if (v4)
    {
      if (v7) {
        return 1;
      }
    }
    else if ((v7 & 1) == 0 && v2 == v5 && v3 == v6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t ScrollTargetConfiguration.animated.getter()
{
  return *v0;
}

uint64_t ScrollTargetConfiguration.animated.setter(uint64_t result)
{
  *CGFloat v1 = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.animated.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.requiresVisibility.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t ScrollTargetConfiguration.requiresVisibility.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.requiresVisibility.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.preservesVelocity.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t ScrollTargetConfiguration.preservesVelocity.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*ScrollTargetConfiguration.preservesVelocity.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ScrollTargetConfiguration.init(transaction:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (!v3)
  {
    swift_release();
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(v3 + 72);
  swift_release();
  if (!v4)
  {
LABEL_5:
    char v7 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = swift_retain();
  char v6 = specialized closure #1 in PropertyList.subscript.getter(v5);
  swift_release();
  char v7 = v6 ^ 1;
LABEL_6:
  uint64_t v8 = swift_retain();
  char v9 = specialized closure #1 in PropertyList.subscript.getter(v8);
  swift_release();
  uint64_t v10 = swift_retain();
  char v11 = specialized closure #1 in PropertyList.subscript.getter(v10);
  uint64_t result = swift_release_n();
  *a1 = v7 & 1;
  a1[1] = v9 & 1;
  a1[2] = v11 & 1;
  return result;
}

uint64_t Transaction._scrollToRequiresCompleteVisibility.getter()
{
  uint64_t v0 = swift_retain();
  char v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

BOOL static ScrollTargetRole.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ScrollTargetRole.Role.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollTargetRole.Role.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ScrollTargetRole.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ScrollTargetRole.role.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*ScrollTargetRole.role.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static ScrollTargetRole.container.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollTargetRole.target.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static ScrollTargetRole.Key.defaultValue.getter()
{
  return static ScrollGeometryPreferenceKey.defaultValue.getter(&one-time initialization token for defaultValue);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollTargetRole.Key@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance ScrollGeometryPreferenceKey(&one-time initialization token for defaultValue, &static ScrollTargetRole.Key.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollTargetRole.Key(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  return specialized static ScrollTargetRole.ContentKey.reduce(value:nextValue:)(a1, a2);
}

uint64_t static ScrollTargetRole.Key.reduce(value:nextValue:)(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollTargetRole.SetLayout@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = *v1;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = closure #1 in ScrollTargetRole.SetLayout.value.getterpartial apply;
  *(void *)(result + 24) = v3;
  *a1 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t key path getter for _GraphInputs.scrollTargetRole : _GraphInputs@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  int v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollTargetRole : _GraphInputs(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

void (*_GraphInputs.scrollTargetRole.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  int v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((_DWORD *)v3 + 10) = v5;
  return _GraphInputs.scrollTargetRole.modify;
}

void _GraphInputs.scrollTargetRole.modify(uint64_t a1)
{
  Swift::UInt v1 = *(void **)a1;
  int v2 = *(_DWORD *)(*(void *)a1 + 40);
  int v3 = *(uint64_t **)(*(void *)a1 + 24);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();

  free(v1);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ScrollTargetRoleKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.ScrollTargetRoleKey.defaultValue;
  return result;
}

uint64_t key path getter for _GraphInputs.scrollTargetRemovePreference : _GraphInputs@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  char v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a2 = v4 & 1;
  return result;
}

uint64_t key path setter for _GraphInputs.scrollTargetRemovePreference : _GraphInputs(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

void (*_GraphInputs.scrollTargetRemovePreference.modify(void *a1))(char **a1, char a2)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return _GraphInputs.scrollTargetRemovePreference.modify;
}

void _GraphInputs.scrollTargetRemovePreference.modify(char **a1, char a2)
{
}

uint64_t _ViewInputs.scrollTargetRole.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2;
}

uint64_t _ViewInputs.scrollTargetRemovePreference.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  char v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return v2 & 1;
}

uint64_t key path setter for Transaction._scrollToRequiresCompleteVisibility : Transaction(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t Transaction._scrollToRequiresCompleteVisibility.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*Transaction._scrollToRequiresCompleteVisibility.modify(void *a1))(char **a1, char a2)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction._scrollToRequiresCompleteVisibility.modify;
}

void Transaction._scrollToRequiresCompleteVisibility.modify(char **a1, char a2)
{
}

void _GraphInputs.scrollTargetRemovePreference.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, char *))
{
  char v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 3);
  uint64_t v7 = (*a1)[40];
  swift_retain();
  if (a2) {
    uint64_t v8 = v5 + 8;
  }
  else {
    uint64_t v8 = v5 + 16;
  }
  a3(v6, v7, v8);
  swift_release();

  free(v5);
}

uint64_t Transaction.scrollToRequiresCompleteVisibility.getter()
{
  uint64_t v0 = swift_retain();
  char v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

uint64_t key path getter for Transaction._scrollToRequiresCompleteVisibility : Transaction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  char v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t result = swift_release();
  *a1 = v3 & 1;
  return result;
}

uint64_t Transaction.scrollToRequiresCompleteVisibility.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*Transaction.scrollToRequiresCompleteVisibility.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.scrollToRequiresCompleteVisibility.modify;
}

void Transaction.scrollToRequiresCompleteVisibility.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();

  free(v1);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v48 = v8;
  uint64_t v49 = 0;
  uint64_t v50 = v11 & v9;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v44);
  uint64_t v12 = v45;
  if (!v45) {
    goto LABEL_26;
  }
  char v13 = v44;
  long long v14 = (void *)*a5;
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    long long v24 = (void *)*a5;
    *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(unsigned char *)(v24[6] + v16) = v13;
    *(void *)(v24[7] + 8 * v16) = v12;
    uint64_t v25 = v24[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v24[2] = v27;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v44);
    for (uint64_t i = v45; v45; uint64_t i = v45)
    {
      char v31 = v44;
      long long v32 = (void *)*a5;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
      uint64_t v35 = v32[2];
      BOOL v36 = (v34 & 1) == 0;
      BOOL v26 = __OFADD__(v35, v36);
      uint64_t v37 = v35 + v36;
      if (v26) {
        goto LABEL_27;
      }
      char v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
        if ((v38 & 1) != (v39 & 1)) {
          goto LABEL_29;
        }
      }
      if (v38)
      {
        long long v29 = (void *)*a5;
        uint64_t v30 = 8 * v33;
        uint64_t v53 = *(void *)(*(void *)(*a5 + 56) + 8 * v33);
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(i);
        *(void *)(v29[7] + v30) = v53;
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v40 = (void *)*a5;
        *(void *)(*a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(unsigned char *)(v40[6] + v33) = v31;
        *(void *)(v40[7] + 8 * v33) = i;
        uint64_t v41 = v40[2];
        BOOL v26 = __OFADD__(v41, 1);
        uint64_t v42 = v41 + 1;
        if (v26) {
          goto LABEL_28;
        }
        void v40[2] = v42;
      }
      specialized LazyMapSequence.Iterator.next()(&v44);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v23 = *a5;
    uint64_t v53 = *(void *)(*(void *)(*a5 + 56) + 8 * v16);
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v12);
    *(void *)(*(void *)(v23 + 56) + 8 * v16) = v53;
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_29:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  unsigned char v28[40];
  long long v29[2];
  long long v30[2];
  long long v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  unint64_t v33 = a1;
  char v34 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v35 = v8;
  BOOL v36 = 0;
  uint64_t v37 = v11 & v9;
  char v38 = a2;
  char v39 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(v31);
  if (!v32)
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    char v13 = *(void *)&v31[0];
    outlined init with take of ScrollStateRequest((long long *)((char *)v31 + 8), (uint64_t)v30);
    long long v14 = *a5;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    uint64_t v17 = *(void *)(v14 + 16);
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    char v20 = v15;
    if (*(void *)(v14 + 24) >= v19)
    {
      if (a4)
      {
        if (v15) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v20) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_22;
      }
      unint64_t v16 = v21;
      if (v20)
      {
LABEL_6:
        outlined init with copy of AnyTrackedValue(*(void *)(*a5 + 56) + 40 * v16, (uint64_t)v28);
        outlined init with copy of AnyTrackedValue((uint64_t)v28, (uint64_t)v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        uint64_t v12 = *(void *)(*a5 + 56) + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v12);
        outlined init with take of ScrollStateRequest(v29, v12);
        goto LABEL_7;
      }
    }
    uint64_t v23 = (void *)*a5;
    *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(void *)(v23[6] + 8 * v16) = v13;
    outlined init with take of ScrollStateRequest(v30, v23[7] + 40 * v16);
    long long v24 = v23[2];
    uint64_t v25 = __OFADD__(v24, 1);
    BOOL v26 = v24 + 1;
    if (v25) {
      goto LABEL_21;
    }
    v23[2] = v26;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()(v31);
    a4 = 1;
    if (!v32) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  *(unsigned char *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_245AC5DE0()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScrollTarget and conformance ScrollTarget()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget;
  if (!lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTarget and conformance ScrollTarget);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.SetLayout and conformance ScrollTargetRole.SetLayout);
  }
  return result;
}

uint64_t sub_245AC5EB0@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction._scrollToRequiresCompleteVisibility : Transaction(a1);
}

uint64_t sub_245AC5ECC@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction._scrollToRequiresCompleteVisibility : Transaction(a1);
}

uint64_t getEnumTagSinglePayload for ScrollTarget(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollTarget(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 49) = v3;
  return result;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollTargetConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTargetConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)unint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetRole()
{
  return &type metadata for ScrollTargetRole;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.Key()
{
  return &type metadata for ScrollTargetRole.Key;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.ContentKey()
{
  return &type metadata for ScrollTargetRole.ContentKey;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.SetLayout()
{
  return &type metadata for ScrollTargetRole.SetLayout;
}

uint64_t sub_245AC60CC()
{
  return swift_deallocObject();
}

uint64_t sub_245AC60DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t specialized static ScrollTargetRole.ContentKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for Transaction.IsScrollStateValueUpdateKey()
{
  return &type metadata for Transaction.IsScrollStateValueUpdateKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.ScrollTargetRoleKey()
{
  return &type metadata for _GraphInputs.ScrollTargetRoleKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.RemovePreferenceInput()
{
  return &type metadata for _GraphInputs.RemovePreferenceInput;
}

ValueMetadata *type metadata accessor for Transaction.ScrollToRequiresCompleteVisibility()
{
  return &type metadata for Transaction.ScrollToRequiresCompleteVisibility;
}

double DerivedUnaryLayout.sizeThatFits(in:context:child:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v13 = (char *)&v20 - v12;
  uint64_t v14 = *a1;
  int v15 = *((unsigned __int8 *)a1 + 8);
  uint64_t v16 = a1[2];
  LOBYTE(a1) = *((unsigned char *)a1 + 24);
  LODWORD(v12) = *((_DWORD *)a2 + 2);
  HIDWORD(v20) = v15;
  int v21 = v12;
  int v22 = *((_DWORD *)a3 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a5 + 32))(a4, a5, v11);
  uint64_t v28 = v14;
  char v29 = BYTE4(v20);
  uint64_t v30 = v16;
  char v31 = (char)a1;
  uint64_t v26 = *a2;
  int v27 = v21;
  uint64_t v24 = *a3;
  int v25 = v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v18 = (*(double (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(&v28, &v26, &v24, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v13, AssociatedTypeWitness);
  return v18;
}

uint64_t DerivedUnaryLayout.spacing(in:child:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v18[1] = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v13 = (char *)v18 - v12;
  int v14 = *((_DWORD *)a1 + 2);
  int v15 = *((_DWORD *)a2 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v11);
  uint64_t v21 = *a1;
  int v22 = v14;
  uint64_t v19 = *a2;
  int v20 = v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(&v21, &v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t DerivedUnaryLayout.placement(of:in:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v11 = (char *)&v15 - v10;
  int v12 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v9);
  uint64_t v17 = *a1;
  int v18 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v17, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

double DerivedUnaryLayout.layoutPriority(child:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v15 - v9;
  int v11 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  uint64_t v15 = *a1;
  int v16 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v13 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return v13;
}

uint64_t DerivedUnaryLayout.ignoresAutomaticPadding(child:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  int v11 = *((_DWORD *)a1 + 2);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v8);
  uint64_t v14 = *a1;
  int v15 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  return a3 & 1;
}

uint64_t dispatch thunk of DerivedUnaryLayout.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void _OffsetEffect.offset.setter(double a1, double a2)
{
  *int v2 = a1;
  v2[1] = a2;
}

uint64_t (*_OffsetEffect.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

CGFloat _OffsetEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D2>, CGFloat a3@<D3>)
{
  CGAffineTransformMakeTranslation(&v7, a2, a3);
  CGFloat result = v7.a;
  long long v5 = *(_OWORD *)&v7.c;
  long long v6 = *(_OWORD *)&v7.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v7.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

void _OffsetEffect.animatableData.setter(double a1, double a2)
{
  *int v2 = a1;
  v2[1] = a2;
}

__n128 (*_OffsetEffect.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CGPoint;
}

BOOL static _OffsetEffect.== infix(_:_:)(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance _OffsetEffect@<D0>(uint64_t a1@<X8>)
{
  CGAffineTransformMakeTranslation(&v6, *v1, v1[1]);
  CGFloat result = v6.a;
  long long v4 = *(_OWORD *)&v6.c;
  long long v5 = *(_OWORD *)&v6.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v6.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _OffsetEffect(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return CGPoint.animatableData.modify;
}

uint64_t View.offset(_:)(uint64_t a1, double a2, double a3)
{
  *(double *)long long v4 = a2;
  *(double *)&v4[1] = a3;
  return View.modifier<A>(_:)(v4, a1, &type metadata for _OffsetEffect);
}

uint64_t View.repeatingOffset(from:to:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v13 = 0;
  __int16 v14 = 257;
  CGAffineTransform v7 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t))(*(void *)a1 + 144);
  unint64_t v8 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
  uint64_t v9 = v7(&v13, &type metadata for RepeatAnimation, v8);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.appearanceAnimation<A>(animation:modifier:)(v9, (void (*)(void, uint64_t))partial apply for closure #1 in View.repeatingOffset(from:to:animation:), a2, v10, a3, WitnessTable, a4);
  return swift_release();
}

uint64_t static AnyTransition.offset(_:)(double a1, double a2)
{
  type metadata accessor for TransitionBox<OffsetTransition>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  return result;
}

SwiftUI::OffsetTransition __swiftcall OffsetTransition.init(_:)(SwiftUI::OffsetTransition result)
{
  *uint64_t v1 = result.offset.width;
  v1[1] = result.offset.height;
  return result;
}

uint64_t static AnyTransition.offset(x:y:)(double a1, double a2)
{
  type metadata accessor for TransitionBox<OffsetTransition>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a1;
  *(double *)(result + 24) = a2;
  return result;
}

double OffsetTransition.offset.getter()
{
  return *(double *)v0;
}

void OffsetTransition.offset.setter(double a1, double a2)
{
  *int v2 = a1;
  v2[1] = a2;
}

uint64_t (*OffsetTransition.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

int8x16_t OffsetTransition.body(content:phase:)@<Q0>(char a1@<W1>, int8x16_t *a2@<X8>)
{
  int32x2_t v3 = vdup_n_s32(a1 == 1);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  int8x16_t result = vandq_s8(*v2, (int8x16_t)vcgezq_s64(vshlq_n_s64(v4, 0x3FuLL)));
  *a2 = result;
  return result;
}

uint64_t OffsetTransition._makeContentTransition(transition:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    double v5 = *v1;
    double v4 = v1[1];
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
    float v7 = v5;
    float v8 = v4;
    *(_DWORD *)(v6 + 32) = 3;
    *(float *)(v6 + 36) = v7;
    *(unsigned char *)(v6 + 40) = 0;
    *(float *)(v6 + 44) = v8;
    *(unsigned char *)(v6 + 48) = 0;
    *(void *)(v6 + 52) = 0x3F80000000000000;
    *(void *)(v6 + 60) = 3;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v6;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

int8x16_t protocol witness for Transition.body(content:phase:) in conformance OffsetTransition@<Q0>(char a1@<W1>, int8x16_t *a2@<X8>)
{
  int32x2_t v3 = vdup_n_s32(a1 == 1);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  int8x16_t result = vandq_s8(*v2, (int8x16_t)vcgezq_s64(vshlq_n_s64(v4, 0x3FuLL)));
  *a2 = result;
  return result;
}

uint64_t _OffsetEffect.encode(to:)(uint64_t result, double a2, double a3)
{
  uint64_t v5 = result;
  if (a2 != 0.0 || a3 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v6 = *(void *)(v5 + 8);
    float v7 = *(void **)(v5 + 24);
    int8x16_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      int8x16_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      float v7 = (void *)result;
    }
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    if (v9 >= v8 >> 1)
    {
      int8x16_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
      float v7 = (void *)result;
    }
    void v7[2] = v9 + 1;
    v7[v9 + 4] = v6;
    *(void *)(v5 + 24) = v7;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(v5 + 8) = v6 + 1;
      CGSize.encode(to:)((double *)v5, a2, a3);
      return ProtobufEncoder.endLengthDelimited()();
    }
  }
  return result;
}

double _OffsetEffect.init(from:)(void *a1)
{
  return specialized _OffsetEffect.init(from:)(a1);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _OffsetEffect(uint64_t a1)
{
  return _OffsetEffect.encode(to:)(a1, *v1, v1[1]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _OffsetEffect(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized _OffsetEffect.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
  }
}

double OffsetPosition.value.getter@<D0>(double *a1@<X8>)
{
  uint64_t Value = (double *)AGGraphGetValue();
  double v3 = *Value;
  double v4 = Value[1];
  if (*(unsigned char *)AGGraphGetValue()) {
    double v3 = -v3;
  }
  uint64_t v5 = (double *)AGGraphGetValue();
  double result = v3 + *v5;
  double v7 = v4 + v5[1];
  *a1 = result;
  a1[1] = v7;
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance OffsetPosition(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
}

double protocol witness for Rule.value.getter in conformance OffsetPosition@<D0>(double *a1@<X8>)
{
  return OffsetPosition.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation;
  if (!lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatAnimation and conformance RepeatAnimation);
  }
  return result;
}

uint64_t partial apply for closure #1 in View.repeatingOffset(from:to:animation:)(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2[1].i64[0];
  int32x2_t v4 = vdup_n_s32(a2);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  int8x16_t v7 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), v2[2], v2[3]);
  return View.modifier<A>(_:)(&v7, v3, &type metadata for _OffsetEffect);
}

void type metadata accessor for TransitionBox<OffsetTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<OffsetTransition>)
  {
    lazy protocol witness table accessor for type OffsetTransition and conformance OffsetTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<OffsetTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OffsetTransition and conformance OffsetTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition;
  if (!lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetTransition and conformance OffsetTransition);
  }
  return result;
}

uint64_t outlined consume of _Transition_ContentTransition.Result(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

double specialized _OffsetEffect.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  double v6 = 0.0;
  while (1)
  {
    if (v4 >= v5) {
      goto LABEL_34;
    }
    unint64_t v7 = a1[3];
    if (v7)
    {
      unint64_t v8 = a1[4];
      if (v4 < v8) {
        goto LABEL_11;
      }
      if (v8 < v4) {
        goto LABEL_35;
      }
      a1[3] = 0;
    }
    unint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v7 <= 7)
    {
LABEL_35:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return v6;
    }
LABEL_11:
    if ((v7 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      switch(v7 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (!v1) {
            goto LABEL_3;
          }
          return v6;
        case 1uLL:
          unint64_t v17 = a1[1] + 8;
          goto LABEL_30;
        case 2uLL:
          uint64_t v18 = ProtobufDecoder.decodeVarint()();
          if (v1) {
            return v6;
          }
          if (v18 < 0) {
            goto LABEL_40;
          }
          unint64_t v17 = a1[1] + v18;
LABEL_30:
          if (v5 < v17) {
            goto LABEL_35;
          }
          a1[1] = v17;
          break;
        case 5uLL:
          unint64_t v17 = a1[1] + 4;
          goto LABEL_30;
        default:
          goto LABEL_35;
      }
      goto LABEL_3;
    }
    if ((v7 & 7) != 2) {
      goto LABEL_35;
    }
    uint64_t v2 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    v2[v10 + 4] = v5;
    a1[5] = v2;
    uint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v11 < 0) {
      break;
    }
    unint64_t v12 = a1[1] + v11;
    if (v5 < v12) {
      goto LABEL_35;
    }
    a1[2] = v12;
    double v13 = specialized CGPoint.init(from:)(a1);
    uint64_t v2 = (void *)a1[5];
    if (!v2[2]) {
      goto LABEL_39;
    }
    double v6 = v13;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v14 = v2[2];
      if (!v14) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v14 = v2[2];
      if (!v14)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        a1[3] = 0;
        return v6;
      }
    }
    uint64_t v15 = v14 - 1;
    uint64_t v16 = v2[v15 + 4];
    v2[2] = v15;
    a1[5] = v2;
    a1[2] = v16;
LABEL_3:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  __break(1u);
  int v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v23 = v22[2];
  if (!v23)
  {
    __break(1u);
    JUMPOUT(0x245AC74D4);
  }
  uint64_t v20 = v23 - 1;
  uint64_t v21 = v22[v20 + 4];
  _OWORD v22[2] = v20;
  a1[5] = v22;
  a1[2] = v21;
  return v6;
}

unint64_t instantiation function for generic protocol witness table for _OffsetEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect;
  if (!lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OffsetEffect and conformance _OffsetEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in OffsetTransition()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 sub_245AC7584@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_245AC7590(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for OffsetTransition()
{
  return &type metadata for OffsetTransition;
}

uint64_t sub_245AC75AC()
{
  return swift_getWitnessTable();
}

uint64_t sub_245AC7610()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>)
  {
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(255, &lazy cache variable for type metadata for PlaceholderContentView<OffsetTransition>, (uint64_t)&type metadata for OffsetTransition, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<OffsetTransition>, _OffsetEffect>);
    }
  }
}

void *type metadata accessor for OffsetPosition()
{
  return &unk_26FA4D4A8;
}

unint64_t instantiation function for generic protocol witness table for OffsetPosition(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OffsetPosition and conformance OffsetPosition();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _AnyAnimatableData.vtable.getter()
{
  return *(void *)v0;
}

uint64_t _AnyAnimatableData.vtable.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_AnyAnimatableData.vtable.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnyAnimatableData.value.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Any(v1 + 8, a1);
}

_OWORD *_AnyAnimatableData.value.setter(_OWORD *a1)
{
  uint64_t v3 = (_OWORD *)(v1 + 8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);

  return outlined init with take of Any(a1, v3);
}

uint64_t (*_AnyAnimatableData.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _AnyAnimatableData.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v8 = &v11[-v7];
  uint64_t v9 = *v3;
  uint64_t result = type metadata accessor for VTable();
  if (v9 == result)
  {
    outlined init with copy of Any((uint64_t)(v3 + 1), (uint64_t)v11);
    swift_dynamicCast();
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 32))(v8, a2, a3);
  }
  return result;
}

uint64_t static _AnyAnimatableData.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = type metadata accessor for ZeroVTable();
  a1[4] = MEMORY[0x263F8EE60] + 8;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ZeroVTable()
{
  return self;
}

uint64_t static _AnyAnimatableData.== infix(_:_:)(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 88))(a1 + 8, a2 + 1) & 1;
  }
  else {
    return 0;
  }
}

void *static _AnyAnimatableData.+= infix(_:_:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1 == *a2) {
    return (void *)(*(uint64_t (**)(uint64_t *, void *))(v4 + 96))(a1 + 1, a2 + 1);
  }
  uint64_t result = (void *)type metadata accessor for ZeroVTable();
  if ((void *)v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    return outlined init with copy of _AnyAnimatableData(a2, a1);
  }
  return result;
}

void *outlined init with copy of _AnyAnimatableData(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v3 = a1[4];
  a2[4] = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 1), (uint64_t)(a1 + 1));
  return a2;
}

void *static _AnyAnimatableData.+ infix(_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of _AnyAnimatableData(a1, a3);
  uint64_t v5 = *a3;
  if (*a3 == *a2) {
    return (void *)(*(uint64_t (**)(uint64_t *, void *))(v5 + 96))(a3 + 1, a2 + 1);
  }
  uint64_t result = (void *)type metadata accessor for ZeroVTable();
  if ((void *)v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    return outlined init with copy of _AnyAnimatableData(a2, a3);
  }
  return result;
}

uint64_t static _AnyAnimatableData.- infix(_:_:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  outlined init with copy of _AnyAnimatableData(a1, a3);
  uint64_t v5 = *a3;
  if (*a3 == *a2) {
    return (*(uint64_t (**)(void *, void *))(v5 + 104))(a3 + 1, a2 + 1);
  }
  uint64_t result = type metadata accessor for ZeroVTable();
  if (v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    outlined init with copy of _AnyAnimatableData(a2, a3);
    return (*(uint64_t (**)(void *))(*a3 + 112))(a3 + 1);
  }
  return result;
}

Swift::Void __swiftcall _AnyAnimatableData.scale(by:)(Swift::Double by)
{
  (*(void (**)(uint64_t, Swift::Double))(*(void *)v1 + 120))(v1 + 8, by);
}

uint64_t _AnyAnimatableData.magnitudeSquared.getter()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 128))(v0 + 8);
}

uint64_t protocol witness for VectorArithmetic.scale(by:) in conformance _AnyAnimatableData()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 120))(v0 + 8);
}

uint64_t protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance _AnyAnimatableData()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 128))(v0 + 8);
}

uint64_t protocol witness for static AdditiveArithmetic.zero.getter in conformance _AnyAnimatableData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = type metadata accessor for ZeroVTable();
  a1[4] = MEMORY[0x263F8EE60] + 8;
  *a1 = result;
  return result;
}

void *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _AnyAnimatableData@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  outlined init with copy of _AnyAnimatableData(a1, a3);
  uint64_t v5 = *a3;
  if (*a3 == *a2) {
    return (void *)(*(uint64_t (**)(uint64_t *, void *))(v5 + 96))(a3 + 1, a2 + 1);
  }
  uint64_t result = (void *)type metadata accessor for ZeroVTable();
  if ((void *)v5 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a3);
    return outlined init with copy of _AnyAnimatableData(a2, a3);
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _AnyAnimatableData(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1 == *a2) {
    return (void *)(*(uint64_t (**)(uint64_t *, void *))(v4 + 96))(a1 + 1, a2 + 1);
  }
  uint64_t result = (void *)type metadata accessor for ZeroVTable();
  if ((void *)v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    return outlined init with copy of _AnyAnimatableData(a2, a1);
  }
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _AnyAnimatableData@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  outlined init with copy of _AnyAnimatableData(a1, a3);

  return static _AnyAnimatableData.-= infix(_:_:)(a3, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _AnyAnimatableData(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 88))(a1 + 8, a2 + 1) & 1;
  }
  else {
    return 0;
  }
}

void static _AnyAnimatableDataVTable.zero.getter()
{
}

uint64_t static _AnyAnimatableDataVTable.isEqual(_:_:)()
{
  return 0;
}

double static _AnyAnimatableDataVTable.magnitudeSquared(_:)()
{
  return 0.0;
}

uint64_t _AnyAnimatableDataVTable.deinit()
{
  return v0;
}

uint64_t _AnyAnimatableDataVTable.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t static VTable.zero.getter@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a1);
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static AdditiveArithmetic.zero.getter();
}

uint64_t static VTable.add(_:_:)(uint64_t a1, uint64_t a2)
{
  return static VTable.add(_:_:)(a1, a2, MEMORY[0x263F8DF30]);
}

uint64_t static VTable.subtract(_:_:)(uint64_t a1, uint64_t a2)
{
  return static VTable.add(_:_:)(a1, a2, MEMORY[0x263F8DF38]);
}

uint64_t static VTable.add(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, char *, uint64_t, void))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v12 = (char *)v16 - v11;
  outlined init with take of Any((_OWORD *)a1, v16);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v16);
  swift_dynamicCast();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a3(v12, v9, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  *(void *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v12, AssociatedTypeWitness);
}

uint64_t static VTable.negate(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v11 - v7;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  outlined init with take of Any((_OWORD *)a1, v11);
  swift_dynamicCast();
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  *(void *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v8, AssociatedTypeWitness);
}

uint64_t static VTable.scale(_:by:)(uint64_t a1, double a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)v11 - v6;
  outlined init with take of Any((_OWORD *)a1, v11);
  swift_dynamicCast();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, a2);
  *(void *)(a1 + 24) = AssociatedTypeWitness;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v7, AssociatedTypeWitness);
}

double static VTable.magnitudeSquared(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = &v9[-v4];
  outlined init with copy of Any(a1, (uint64_t)v9);
  swift_dynamicCast();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v7 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return v7;
}

void static ZeroVTable.zero.getter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = MEMORY[0x263F8EE60] + 8;
}

uint64_t specialized static _AnyAnimatableData.-= infix(_:_:)(void *a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1 == *a2) {
    return (*(uint64_t (**)(void *, void *))(v4 + 104))(a1 + 1, a2 + 1);
  }
  uint64_t result = type metadata accessor for ZeroVTable();
  if (v4 == result)
  {
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    outlined init with copy of _AnyAnimatableData(a2, a1);
    return (*(uint64_t (**)(void *))(*a1 + 112))(a1 + 1);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _AnyAnimatableData(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _AnyAnimatableData and conformance _AnyAnimatableData();
  *(void *)(a1 + 8) = result;
  return result;
}

void *assignWithCopy for _AnyAnimatableData(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_0(a1 + 1, a2 + 1);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for _AnyAnimatableData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t method lookup function for _AnyAnimatableDataVTable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _AnyAnimatableDataVTable);
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.zero.getter()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.isEqual(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.add(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.subtract(_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.negate(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.scale(_:by:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of static _AnyAnimatableDataVTable.magnitudeSquared(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t _ColorMonochromeEffect.color.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ColorMonochromeEffect.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ColorMonochromeEffect.amount.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*_ColorMonochromeEffect.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ColorMonochromeEffect.bias.getter(double a1, double a2)
{
  return a2;
}

void _ColorMonochromeEffect.bias.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*_ColorMonochromeEffect.bias.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float _ColorMonochromeEffect.resolve(in:)@<S0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  long long v14 = *a1;
  float v8 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v14);
  float v9 = a5;
  *(float *)a3 = v8;
  *(_DWORD *)(a3 + 4) = v10;
  float result = a4;
  *(_DWORD *)(a3 + 8) = v12;
  *(_DWORD *)(a3 + 12) = v13;
  *(float *)(a3 + 16) = v9;
  *(float *)(a3 + 20) = result;
  return result;
}

uint64_t static _ColorMonochromeEffect._requiresMainThread.getter()
{
  return 0;
}

uint64_t _ColorMonochromeEffect._requiresMainThread.getter()
{
  return 0;
}

float32x4_t _ColorMonochromeEffect._Resolved.animatableData.getter@<Q0>(uint64_t a1@<X8>)
{
  int8x16_t v8 = *v1;
  uint64_t v3 = v1[1].i64[0];
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v5 = (float32x4_t)v8;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v9.f32, v8, *(float *)&v8.i32[1], v8.u32[2], *(float *)&v8.i32[3], v4);
    float32x4_t v5 = v9;
  }
  v6.i64[0] = 0x4300000043000000;
  v6.i64[1] = 0x4300000043000000;
  float32x4_t result = vmulq_f32(v5, v6);
  *(void *)a1 = v3;
  *(float32x4_t *)(a1 + 8) = result;
  return result;
}

void _ColorMonochromeEffect._Resolved.animatableData.setter(uint64_t a1)
{
  float32x4_t v2 = *(float32x4_t *)(a1 + 8);
  *(void *)(v1 + 16) = *(void *)a1;
  v3.i64[0] = 0x3C0000003C000000;
  v3.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    float32x4_t v9 = v2;
    swift_once();
    v3.i64[0] = 0x3C0000003C000000;
    v3.i64[1] = 0x3C0000003C000000;
    float32x4_t v2 = v9;
  }
  float32x4_t v8 = vmulq_f32(v2, v3);
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float v4 = v8.f32[0];
    __int32 v6 = v8.i32[2];
    __int32 v5 = v8.i32[1];
    __int32 v7 = v8.i32[3];
  }
  else
  {
    char v11 = 2;
    float32x4_t v10 = v8;
    float v4 = ResolvedGradient.ColorSpace.convertOut(_:)(v10.f32);
  }
  *(float *)uint64_t v1 = v4;
  *(_DWORD *)(v1 + 4) = v5;
  *(_DWORD *)(v1 + 8) = v6;
  *(_DWORD *)(v1 + 12) = v7;
}

void (*_ColorMonochromeEffect._Resolved.animatableData.modify(void *a1))(uint64_t a1, char a2)
{
  float32x4_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((void *)v3 + 3) = v1;
  int8x16_t v9 = *v1;
  uint64_t v4 = v1[1].i64[0];
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v6 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v10.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v5);
    float32x4_t v6 = v10;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *((void *)v3 + 4) = v4;
  *(float32x4_t *)(v3 + 40) = vmulq_f32(v6, v7);
  return _ColorMonochromeEffect._Resolved.animatableData.modify;
}

void _ColorMonochromeEffect._Resolved.animatableData.modify(uint64_t a1, char a2)
{
  float32x4_t v2 = *(void **)a1;
  float32x4_t v3 = *(float32x4_t *)(*(void *)a1 + 40);
  *(void *)(*(void *)(*(void *)a1 + 24) + 16) = *(void *)(*(void *)a1 + 32);
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  float32x4_t v5 = vmulq_f32(v3, v4);
  if (a2)
  {
    if (static Color.Resolved.legacyInterpolation)
    {
      __int32 v6 = v5.i32[1];
      __int32 v8 = v5.i32[3];
      __int32 v7 = v5.i32[2];
    }
    else
    {
      float32x4_t v13 = v5;
      v5.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v13.f32);
    }
    int v12 = (_DWORD *)v2[3];
    *int v12 = v5.i32[0];
    v12[1] = v6;
    _OWORD v12[2] = v7;
    _OWORD v12[3] = v8;
  }
  else
  {
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      float32x4_t v13 = v5;
      v5.f32[0] = ResolvedGradient.ColorSpace.convertOut(_:)(v13.f32);
      v5.i32[1] = v9;
      v5.i64[1] = __PAIR64__(v11, v10);
    }
    *(float32x4_t *)v2[3] = v5;
  }

  free(v2);
}

double _ColorMonochromeEffect._Resolved.effectValue(size:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  __int32 v7 = v1 + 2;
  uint64_t v5 = *((unsigned int *)v1 + 4);
  uint64_t v6 = *((unsigned int *)v7 + 1);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v4;
  *(void *)(v8 + 32) = v6 | (v5 << 32);
  double result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 116) = 0u;
  *(unsigned char *)(v8 + 132) = 11;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _ColorMonochromeEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  __int32 v7 = v1 + 2;
  uint64_t v5 = *((unsigned int *)v1 + 4);
  uint64_t v6 = *((unsigned int *)v7 + 1);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v4;
  *(void *)(v8 + 32) = v6 | (v5 << 32);
  double result = 0.0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 116) = 0u;
  *(unsigned char *)(v8 + 132) = 11;
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

double protocol witness for Animatable.animatableData.getter in conformance _ColorMonochromeEffect._Resolved@<D0>(uint64_t a1@<X8>)
{
  _ColorMonochromeEffect._Resolved.animatableData.getter((uint64_t)&v3);
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance _ColorMonochromeEffect._Resolved(void *a1))(void *a1)
{
  float32x4_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ColorMonochromeEffect._Resolved.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

float protocol witness for EnvironmentalModifier.resolve(in:) in conformance _ColorMonochromeEffect@<S0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = *v2;
  double v5 = v2[1];
  double v6 = v2[2];
  long long v13 = *a1;
  float v7 = (*(float (**)(long long *))(**(void **)&v4 + 104))(&v13);
  float v8 = v6;
  *(float *)a2 = v7;
  *(_DWORD *)(a2 + 4) = v9;
  float result = v5;
  *(_DWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 12) = v12;
  *(float *)(a2 + 16) = v8;
  *(float *)(a2 + 20) = result;
  return result;
}

uint64_t View._colorMonochrome(_:amount:bias:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  v5[0] = a1;
  *(double *)&v5[1] = a3;
  *(double *)&void v5[2] = a4;
  return View.modifier<A>(_:)(v5, a2, &type metadata for _ColorMonochromeEffect);
}

uint64_t sub_245AC9328()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for _ColorMonochromeEffect._Resolved(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for EnvironmentalModifier.ResolvedModifier : ViewModifier in _ColorMonochromeEffect()
{
  return &protocol witness table for _ColorMonochromeEffect._Resolved;
}

double sub_245AC9420@<D0>(uint64_t a1@<X8>)
{
  _ColorMonochromeEffect._Resolved.animatableData.getter((uint64_t)&v3);
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  return result;
}

void sub_245AC9474(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for _ColorMonochromeEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for _ColorMonochromeEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for _ColorMonochromeEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for _ColorMonochromeEffect()
{
  return &type metadata for _ColorMonochromeEffect;
}

uint64_t getEnumTagSinglePayload for _ColorMonochromeEffect._Resolved(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ColorMonochromeEffect._Resolved(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ColorMonochromeEffect._Resolved()
{
  return &type metadata for _ColorMonochromeEffect._Resolved;
}

uint64_t sub_245AC95D4()
{
  return swift_getWitnessTable();
}

uint64_t Gesture.simultaneously<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  long long v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v16, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a3);
  return SimultaneousGesture.init(_:_:)((uint64_t)v14, (uint64_t)v10, a2, a3, a4);
}

uint64_t SimultaneousGesture.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for SimultaneousGesture();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t type metadata accessor for SimultaneousGesture()
{
  return swift_getGenericMetadata();
}

uint64_t SimultaneousGesture.Value.first.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t SimultaneousGesture.Value.first.setter(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*SimultaneousGesture.Value.first.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SimultaneousGesture.Value.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t SimultaneousGesture.Value.second.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*SimultaneousGesture.Value.second.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SimultaneousGesture.Value.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for SimultaneousGesture.Value() + 52);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a2, v8);
}

uint64_t SimultaneousGesture.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t SimultaneousGesture.first.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*SimultaneousGesture.first.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SimultaneousGesture.second.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t SimultaneousGesture.second.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*SimultaneousGesture.second.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static SimultaneousGesture._makeGesture(gesture:inputs:)@<D0>(__int32 *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int32x2_t *a7@<X8>)
{
  uint64_t v8 = a5;
  uint64_t v61 = a7;
  uint64_t v105 = *MEMORY[0x263EF8340];
  __int32 v11 = *a1;
  long long v12 = a2[3];
  long long v101 = a2[2];
  long long v102 = v12;
  long long v13 = a2[5];
  long long v103 = a2[4];
  long long v104 = v13;
  long long v14 = a2[1];
  long long v99 = *a2;
  long long v100 = v14;
  uint64_t v15 = *((void *)a2 + 12);
  unsigned int v16 = *((_DWORD *)a2 + 30);
  int v83 = *((_DWORD *)a2 + 29);
  unsigned int v17 = *((_DWORD *)a2 + 26);
  uint64_t v82 = *(void *)((char *)a2 + 108);
  uint64_t v84 = a3;
  uint64_t v85 = a4;
  uint64_t v86 = a5;
  uint64_t v87 = a6;
  LODWORD(v71) = v11;
  v79.i32[0] = v11;
  *(void *)&long long v88 = a3;
  *((void *)&v88 + 1) = a4;
  *(void *)&long long v89 = a5;
  *((void *)&v89 + 1) = a6;
  uint64_t v60 = type metadata accessor for SimultaneousGesture();
  uint64_t v70 = type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:), a3, &v75);
  long long v90 = v101;
  long long v91 = v102;
  long long v92 = v103;
  long long v93 = v104;
  long long v88 = v99;
  long long v89 = v100;
  uint64_t v94 = v15;
  unsigned int v95 = v17;
  int v97 = v83;
  uint64_t v96 = v82;
  unsigned int v98 = v16;
  uint64_t v18 = (*(void *(**)(int32x2_t *__return_ptr, unint64_t *, long long *, uint64_t, uint64_t))(v8 + 32))(&v79, &v75, &v88, a3, v8);
  uint64_t v73 = v8;
  if ((v16 & 8) != 0)
  {
    uint64_t v18 = (void *)swift_conformsToProtocol2();
    if (!(v18 ? a3 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        char v21 = 2;
      }
      else {
        char v21 = 1;
      }
      v78[0] = v21;
      long long v90 = v101;
      long long v91 = v102;
      long long v92 = v103;
      long long v93 = v104;
      long long v88 = v99;
      long long v89 = v100;
      uint64_t v94 = v15;
      uint64_t v96 = v82;
      unsigned int v95 = v17;
      int v97 = v83;
      unsigned int v98 = v16;
      unint64_t v75 = (unint64_t)v79;
      unint64_t v76 = v80;
      int v77 = v81;
      swift_getAssociatedTypeWitness();
      *(void *)&long long v74 = type metadata accessor for _GestureOutputs();
      unint64_t v22 = _GestureOutputs.debugData.getter();
      LOBYTE(v75) = 1;
      uint64_t v8 = v73;
      uint64_t v18 = (void *)_GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a3, v78, 0x100000000, &v88, v22 | ((HIDWORD(v22) & 1) << 32), 0x100000000);
    }
  }
  uint64_t v69 = &v60;
  *(int32x2_t *)&long long v19 = v79;
  long long v74 = v19;
  unint64_t v72 = v80;
  int v67 = v81;
  MEMORY[0x270FA5388](v18);
  v59[2] = a3;
  v59[3] = a4;
  v59[4] = v8;
  v59[5] = a6;
  LODWORD(v88) = v71;
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:), a4, &v75);
  long long v90 = v101;
  long long v91 = v102;
  long long v92 = v103;
  long long v93 = v104;
  long long v88 = v99;
  long long v89 = v100;
  uint64_t v94 = v15;
  unsigned int v63 = v17;
  unsigned int v95 = v17;
  int v97 = v83;
  uint64_t v96 = v82;
  unsigned int v98 = v16;
  uint64_t v23 = (*(void *(**)(int32x2_t *__return_ptr, unint64_t *, long long *, uint64_t, uint64_t))(a6 + 32))(&v79, &v75, &v88, a4, a6);
  if ((v16 & 8) != 0)
  {
    uint64_t v23 = (void *)swift_conformsToProtocol2();
    if (!(v23 ? a4 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        char v26 = 2;
      }
      else {
        char v26 = 1;
      }
      v78[0] = v26;
      long long v90 = v101;
      long long v91 = v102;
      long long v92 = v103;
      long long v93 = v104;
      long long v88 = v99;
      long long v89 = v100;
      uint64_t v94 = v15;
      uint64_t v96 = v82;
      unsigned int v95 = v63;
      int v97 = v83;
      unsigned int v98 = v16;
      unint64_t v75 = (unint64_t)v79;
      unint64_t v76 = v80;
      int v77 = v81;
      swift_getAssociatedTypeWitness();
      type metadata accessor for _GestureOutputs();
      unint64_t v27 = _GestureOutputs.debugData.getter();
      LOBYTE(v75) = 1;
      uint64_t v23 = (void *)_GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(a4, v78, 0x100000000, &v88, v27 | ((HIDWORD(v27) & 1) << 32), 0x100000000);
    }
  }
  *(int32x2_t *)&long long v24 = v79;
  unint64_t v71 = v80;
  int v66 = v81;
  uint64_t v64 = v59;
  long long v62 = v24;
  int32x2_t v79 = vzip1_s32(*(int32x2_t *)&v74, v79);
  MEMORY[0x270FA5388](v23);
  uint64_t v70 = v15;
  unsigned int v65 = v16;
  *(void *)&long long v88 = a3;
  *((void *)&v88 + 1) = a4;
  uint64_t v28 = v73;
  *(void *)&long long v89 = v73;
  *((void *)&v89 + 1) = a6;
  type metadata accessor for SimultaneousGesture.Value();
  v59[-4] = type metadata accessor for GesturePhase();
  *(void *)&long long v68 = a3;
  *((void *)&v68 + 1) = a4;
  *(void *)&long long v88 = a3;
  *((void *)&v88 + 1) = a4;
  *(void *)&long long v89 = v28;
  *((void *)&v89 + 1) = a6;
  uint64_t v69 = (uint64_t *)a6;
  uint64_t v29 = type metadata accessor for SimultaneousPhase();
  v59[-3] = v29;
  v59[-2] = swift_getWitnessTable();
  unsigned int v30 = v65;
  uint64_t v31 = v70;
  uint64_t v32 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v79, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v59[-6], v29, MEMORY[0x263F8E628], v32, MEMORY[0x263F8E658], v33);
  _GestureOutputs.init(phase:)(v88, (uint64_t)&v79);
  if ((v30 & 8) != 0)
  {
    v78[0] = 4;
    long long v90 = v101;
    long long v91 = v102;
    long long v92 = v103;
    long long v93 = v104;
    long long v88 = v99;
    long long v89 = v100;
    uint64_t v94 = v31;
    uint64_t v96 = v82;
    unsigned int v95 = v63;
    int v97 = v83;
    unsigned int v98 = v30;
    unint64_t v34 = v72;
    swift_bridgeObjectRetain();
    unint64_t v75 = v74;
    unint64_t v76 = v34;
    int v77 = v67;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v35 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    unint64_t v36 = v71;
    swift_bridgeObjectRetain();
    unint64_t v75 = v62;
    unint64_t v76 = v36;
    int v77 = v66;
    swift_getAssociatedTypeWitness();
    type metadata accessor for _GestureOutputs();
    unint64_t v37 = _GestureOutputs.debugData.getter();
    swift_bridgeObjectRelease();
    type metadata accessor for _GestureOutputs();
    LOBYTE(v75) = 1;
    _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v60, v78, 0x100000000, &v88, v35 | ((HIDWORD(v35) & 1) << 32), v37 | ((HIDWORD(v37) & 1) << 32));
  }
  unint64_t v38 = *(void *)(v31 + 16);
  if (v38)
  {
    unsigned int v65 = *MEMORY[0x263F288F8];
    uint64_t v64 = &v80;
    swift_bridgeObjectRetain();
    unint64_t v39 = 0;
    unsigned int v63 = v74;
    long long v40 = (uint64_t *)(v31 + 40);
    do
    {
      if (v39 >= v38) {
        __break(1u);
      }
      ++v39;
      uint64_t v41 = *(v40 - 1);
      uint64_t v42 = *v40;
      *(void *)&long long v88 = v72;
      DWORD2(v88) = v67;
      unint64_t v43 = PreferencesOutputs.subscript.getter(v41, v41, v42);
      unsigned int v44 = v65;
      if ((v43 & 0x100000000) != 0) {
        unsigned int v45 = v65;
      }
      else {
        unsigned int v45 = v43;
      }
      *(void *)&long long v88 = v71;
      DWORD2(v88) = v66;
      unint64_t v46 = PreferencesOutputs.subscript.getter(v41, v41, v42);
      *(void *)&long long v74 = v59;
      if ((v46 & 0x100000000) != 0) {
        unsigned int v47 = v44;
      }
      else {
        unsigned int v47 = v46;
      }
      unint64_t v75 = __PAIR64__(v47, v45);
      unint64_t v76 = __PAIR64__(v62, v63);
      MEMORY[0x270FA5388](v46);
      v59[-4] = swift_getAssociatedTypeWitness();
      long long v88 = v68;
      *(void *)&long long v89 = v41;
      *((void *)&v89 + 1) = v73;
      *(void *)&long long v90 = v69;
      *((void *)&v90 + 1) = v42;
      uint64_t v48 = type metadata accessor for SimultaneousPreference();
      v59[-3] = v48;
      v59[-2] = swift_getWitnessTable();
      uint64_t v49 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v75, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v59[-6], v48, MEMORY[0x263F8E628], v49, MEMORY[0x263F8E658], v50);
      uint64_t v51 = v88;
      swift_beginAccess();
      LOBYTE(v75) = 0;
      uint64_t v52 = (ValueMetadata *)v41;
      uint64_t v53 = v41;
      uint64_t v54 = v70;
      PreferencesOutputs.subscript.setter(v51, v52, v53, v42);
      swift_endAccess();
      unint64_t v38 = *(void *)(v54 + 16);
      v40 += 2;
    }
    while (v39 != v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v55 = v80;
  __int32 v56 = v81;
  double result = *(double *)&v79;
  uint64_t v58 = v61;
  *uint64_t v61 = v79;
  v58[1] = (int32x2_t)v55;
  v58[2].i32[0] = v56;
  return result;
}

uint64_t closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for SimultaneousGesture();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for SimultaneousGesture();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  _OWORD v12[2] = v7;
  _OWORD v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SimultaneousGesture<A, B>@<D0>(__int32 *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, int32x2_t *a4@<X8>)
{
  return static SimultaneousGesture._makeGesture(gesture:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

BOOL static SimultaneousGesture.Value<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v75 = a8;
  uint64_t v78 = a7;
  uint64_t v98 = a1;
  long long v99 = a2;
  uint64_t v83 = a6;
  uint64_t v81 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v84 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v74 = (char *)&v73 - v11;
  uint64_t v94 = v12;
  uint64_t v13 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v76 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v86 = (char *)&v73 - v14;
  uint64_t v87 = v13;
  uint64_t v85 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  int32x2_t v79 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v91 = (char *)&v73 - v18;
  MEMORY[0x270FA5388](v19);
  long long v92 = (char *)&v73 - v20;
  uint64_t v82 = a5;
  uint64_t v80 = a3;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  int v77 = (char *)&v73 - v23;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = swift_getTupleTypeMetadata2();
  uint64_t v88 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v73 - v26;
  uint64_t v28 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v29);
  unsigned int v95 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v73 - v32;
  double v35 = MEMORY[0x270FA5388](v34);
  unint64_t v37 = (char *)&v73 - v36;
  unint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16);
  v38((char *)&v73 - v36, v98, v24, v35);
  ((void (*)(char *, char *, uint64_t))v38)(v33, v99, v24);
  uint64_t v90 = v25;
  unint64_t v39 = &v27[*(int *)(v25 + 48)];
  ((void (*)(char *, char *, uint64_t))v38)(v27, v37, v24);
  uint64_t v96 = v39;
  ((void (*)(char *, char *, uint64_t))v38)(v39, v33, v24);
  uint64_t v89 = v22;
  long long v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v97 = v21;
  if (v40(v27, 1, v21) != 1)
  {
    uint64_t v73 = v28;
    ((void (*)(char *, char *, uint64_t))v38)(v95, v27, v24);
    uint64_t v42 = v96;
    uint64_t v43 = v97;
    int v44 = v40(v96, 1, v97);
    uint64_t v45 = v89;
    unint64_t v46 = (void (**)(char *, uint64_t))(v89 + 8);
    if (v44 != 1)
    {
      uint64_t v48 = v77;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v77, v42, v43);
      uint64_t v49 = v95;
      LODWORD(v96) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v45 + 8);
      v50(v48, v43);
      uint64_t v51 = *(void (**)(char *, uint64_t))(v73 + 8);
      v51(v33, v24);
      v51(v37, v24);
      v50(v49, v43);
      v51(v27, v24);
      if ((v96 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    unsigned int v47 = *(void (**)(char *, uint64_t))(v73 + 8);
    v47(v33, v24);
    v47(v37, v24);
    (*v46)(v95, v43);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v88 + 8))(v27, v90);
    return 0;
  }
  uint64_t v41 = *(void (**)(char *, uint64_t))(v28 + 8);
  v41(v33, v24);
  v41(v37, v24);
  if (v40(v96, 1, v97) != 1) {
    goto LABEL_6;
  }
  v41(v27, v24);
LABEL_8:
  uint64_t v100 = v80;
  uint64_t v101 = v81;
  uint64_t v102 = v82;
  uint64_t v103 = v83;
  uint64_t v52 = type metadata accessor for SimultaneousGesture.Value();
  uint64_t v53 = v85;
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
  unint64_t v55 = v92;
  uint64_t v56 = v87;
  v54(v92, v98 + *(int *)(v52 + 52), v87);
  long long v57 = &v99[*(int *)(v52 + 52)];
  uint64_t v58 = v91;
  v54(v91, (uint64_t)v57, v56);
  uint64_t v59 = v86;
  uint64_t v60 = &v86[*(int *)(TupleTypeMetadata2 + 48)];
  v54(v86, (uint64_t)v55, v56);
  long long v99 = v60;
  v54(v60, (uint64_t)v58, v56);
  uint64_t v61 = v84;
  long long v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  if (v62(v59, 1, v94) == 1)
  {
    unsigned int v63 = *(void (**)(char *, uint64_t))(v53 + 8);
    v63(v58, v56);
    v63(v55, v56);
    if (v62(v99, 1, v94) == 1)
    {
      v63(v59, v56);
      return 1;
    }
    goto LABEL_13;
  }
  v54(v79, (uint64_t)v59, v56);
  uint64_t v64 = v99;
  uint64_t v65 = v94;
  if (v62(v99, 1, v94) == 1)
  {
    int v66 = *(void (**)(char *, uint64_t))(v53 + 8);
    v66(v91, v56);
    v66(v92, v56);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v79, v65);
LABEL_13:
    (*(void (**)(char *, uint64_t))(v76 + 8))(v59, TupleTypeMetadata2);
    return 0;
  }
  long long v68 = v74;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v74, v64, v65);
  uint64_t v69 = v79;
  char v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v71 = *(void (**)(char *, uint64_t))(v61 + 8);
  v71(v68, v65);
  unint64_t v72 = *(void (**)(char *, uint64_t))(v53 + 8);
  v72(v91, v56);
  v72(v92, v56);
  v71(v69, v65);
  v72(v59, v56);
  return (v70 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance <> SimultaneousGesture<A, B>.Value(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static SimultaneousGesture.Value<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t SimultaneousGesture.Value<>.hash(into:)()
{
  return Optional<A>.hash(into:)();
}

Swift::Int SimultaneousGesture.Value<>.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SimultaneousPhase.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t SimultaneousPhase.phase2.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> SimultaneousGesture<A, B>.Value()
{
  return SimultaneousGesture.Value<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> SimultaneousGesture<A, B>.Value()
{
  return SimultaneousGesture.Value<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> SimultaneousGesture<A, B>.Value()
{
  return Hasher._finalize()();
}

uint64_t SimultaneousPhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v108 = a4;
  uint64_t v109 = a5;
  uint64_t v105 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v94 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v88 = (char *)&v87 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v100 = (char *)&v87 - v13;
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  long long v99 = (char *)&v87 - v15;
  uint64_t v92 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v16);
  long long v91 = (char *)&v87 - v17;
  uint64_t v95 = AssociatedTypeWitness;
  uint64_t v18 = type metadata accessor for GesturePhase();
  uint64_t v93 = v11;
  uint64_t v19 = (void (*)(void, void, void))type metadata accessor for GesturePhase();
  double v107 = v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v89 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v87 - v20;
  uint64_t v101 = *((void *)v19 - 1);
  MEMORY[0x270FA5388](v22);
  uint64_t v97 = (uint64_t)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v87 - v25;
  uint64_t v27 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v96 = (uint64_t)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v90 = (char *)&v87 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v87 - v33;
  SimultaneousPhase.phase1.getter((uint64_t)&v87 - v33);
  uint64_t v98 = a1;
  uint64_t v103 = a2;
  uint64_t v104 = a3;
  uint64_t v35 = TupleTypeMetadata2;
  SimultaneousPhase.phase2.getter((uint64_t)v26);
  uint64_t v36 = &v21[*(int *)(v35 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v21, v34, v18);
  uint64_t v37 = v101;
  unint64_t v38 = v107;
  (*(void (**)(char *, char *, void))(v101 + 32))(v36, v26, v107);
  uint64_t v106 = v18;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      goto LABEL_11;
    case 2u:
      unint64_t v39 = v90;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v90, v21, v106);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v58 = v94;
        uint64_t v57 = v95;
        uint64_t v59 = v99;
        (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v99, v39, v95);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
        uint64_t v60 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v100, 1, 1, v93);
        uint64_t v61 = v105;
        uint64_t v62 = (uint64_t)v59;
        uint64_t v63 = (uint64_t)v60;
        goto LABEL_14;
      }
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v41 = v94;
        uint64_t v42 = v95;
        uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
        int v44 = v88;
        v43(v88, v39, v95);
        TupleTypeMetadata2 = v27;
        uint64_t v45 = v92;
        double v107 = *(void (**)(void, void, void))(v92 + 32);
        uint64_t v46 = v93;
        v107(v91, v36, v93);
        unsigned int v47 = v99;
        v43(v99, v44, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v47, 0, 1, v42);
        uint64_t v48 = v100;
        v107(v100, v91, v46);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v48, 0, 1, v46);
        uint64_t v49 = v104;
        uint64_t v50 = (uint64_t)v47;
        uint64_t v51 = (uint64_t)v48;
        uint64_t v52 = v103;
        uint64_t v54 = v108;
        uint64_t v53 = v109;
        SimultaneousGesture.Value.init(first:second:)(v50, v51, v105);
        uint64_t v110 = v52;
        uint64_t v111 = v49;
        uint64_t v112 = v54;
        uint64_t v113 = v53;
        type metadata accessor for SimultaneousGesture.Value();
        type metadata accessor for GesturePhase();
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, uint64_t))(TupleTypeMetadata2 + 8))(v21, v106);
      }
      (*(void (**)(char *, uint64_t))(v94 + 8))(v39, v95);
      goto LABEL_10;
    case 3u:
      int v56 = swift_getEnumCaseMultiPayload();
      if (v56 == 2)
      {
        uint64_t v76 = v92;
        int v77 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
        uint64_t v78 = v91;
        uint64_t v79 = v93;
        v77(v91, v36, v93);
        uint64_t v80 = v99;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v99, 1, 1, v95);
        uint64_t v81 = v100;
        v77(v100, v78, v79);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v81, 0, 1, v79);
        uint64_t v61 = v105;
        uint64_t v62 = (uint64_t)v80;
        uint64_t v63 = (uint64_t)v81;
LABEL_14:
        uint64_t v83 = v103;
        uint64_t v82 = v104;
        uint64_t v84 = v27;
        uint64_t v86 = v108;
        uint64_t v85 = v109;
        SimultaneousGesture.Value.init(first:second:)(v62, v63, v61);
        uint64_t v110 = v83;
        uint64_t v111 = v82;
        uint64_t v112 = v86;
        uint64_t v113 = v85;
        type metadata accessor for SimultaneousGesture.Value();
        type metadata accessor for GesturePhase();
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v21, v106);
      }
      else if (v56 == 3)
      {
        uint64_t v110 = v103;
        uint64_t v111 = v104;
        uint64_t v112 = v108;
        uint64_t v113 = v109;
        type metadata accessor for SimultaneousGesture.Value();
        type metadata accessor for GesturePhase();
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v21, v106);
      }
      else
      {
LABEL_10:
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_11:
          uint64_t v101 = *(void *)(v37 + 8);
          ((void (*)(char *, void (*)(void, void, void)))v101)(v36, v38);
          uint64_t v64 = *(void (**)(char *, uint64_t))(v27 + 8);
          TupleTypeMetadata2 = v27 + 8;
          uint64_t v65 = v106;
          v64(v21, v106);
          uint64_t v66 = v96;
          uint64_t v68 = v103;
          uint64_t v67 = v104;
          uint64_t v70 = v108;
          uint64_t v69 = v109;
          SimultaneousPhase.phase1.getter(v96);
          unint64_t v71 = v99;
          GesturePhase.unwrapped.getter(v65, v99);
          v64((char *)v66, v65);
          uint64_t v72 = v97;
          SimultaneousPhase.phase2.getter(v97);
          uint64_t v73 = v100;
          long long v74 = v107;
          GesturePhase.unwrapped.getter((uint64_t)v107, v100);
          ((void (*)(uint64_t, void (*)(void, void, void)))v101)(v72, v74);
          SimultaneousGesture.Value.init(first:second:)((uint64_t)v71, (uint64_t)v73, v105);
          uint64_t v110 = v68;
          uint64_t v111 = v67;
          uint64_t v112 = v70;
          uint64_t v113 = v69;
          type metadata accessor for SimultaneousGesture.Value();
          type metadata accessor for GesturePhase();
          return swift_storeEnumTagMultiPayload();
        }
        else
        {
          uint64_t v110 = v103;
          uint64_t v111 = v104;
          uint64_t v112 = v108;
          uint64_t v113 = v109;
          uint64_t v75 = type metadata accessor for SimultaneousGesture.Value();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v105, 1, 1, v75);
          type metadata accessor for GesturePhase();
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v21, v35);
        }
      }
    default:
      goto LABEL_10;
  }
}

uint64_t SimultaneousPreference.value1.getter@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = *MEMORY[0x263F288F8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = AssociatedTypeWitness;
  if (v4 == a1)
  {
    uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t SimultaneousPreference.value2.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = HIDWORD(a1);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = AssociatedTypeWitness;
  if (v4 == v3)
  {
    uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t SimultaneousPreference.phase1.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t SimultaneousPreference.phase2.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SimultaneousPhase<A, B>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SimultaneousGesture.Value();
  uint64_t v2 = type metadata accessor for GesturePhase();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SimultaneousPhase<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return SimultaneousPhase.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t SimultaneousPreference.mergedValue()@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v96 = a8;
  uint64_t v93 = a5;
  uint64_t v94 = a7;
  uint64_t v84 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for GesturePhase();
  uint64_t v86 = *(uint64_t **)(v14 - 8);
  uint64_t v87 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v85 = (uint64_t)&v72 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v89 = *(void *)(v17 - 8);
  uint64_t v90 = v17;
  MEMORY[0x270FA5388](v17);
  int v77 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v80 = (uint64_t)&v72 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v79 = (uint64_t)&v72 - v22;
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v24);
  long long v74 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v73 = (char *)&v72 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v78 = (char *)&v72 - v29;
  MEMORY[0x270FA5388](v30);
  uint64_t v76 = (char *)&v72 - v31;
  swift_getAssociatedTypeWitness();
  uint64_t v32 = type metadata accessor for GesturePhase();
  uint64_t v33 = *(void *)(v32 - 8);
  double v34 = MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v72 - v35;
  uint64_t v88 = v23;
  uint64_t v37 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v82 = v23 + 56;
  uint64_t v83 = a9;
  uint64_t v91 = AssociatedTypeWitness;
  uint64_t v81 = (uint64_t (*)(char *, void, uint64_t, uint64_t))v37;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v37)(a9, 1, 1, AssociatedTypeWitness, v34);
  uint64_t v92 = a1;
  uint64_t v95 = a3;
  SimultaneousPreference.phase1.getter((uint64_t)v36);
  LOBYTE(AssociatedTypeWitness) = GesturePhase.isFailed.getter(v32);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
  uint64_t v38 = a6;
  if ((AssociatedTypeWitness & 1) == 0)
  {
    uint64_t v39 = v79;
    SimultaneousPreference.value1.getter((int)v92, v79);
    uint64_t v40 = v88;
    uint64_t v41 = v91;
    int v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v39, 1, v91);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    if (v42 == 1)
    {
      v43(v39, v90);
    }
    else
    {
      uint64_t v75 = a4;
      int v44 = v83;
      v43((uint64_t)v83, v90);
      uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
      uint64_t v46 = v76;
      v45(v76, v39, v41);
      v45(v44, (uint64_t)v46, v41);
      a4 = v75;
      v81(v44, 0, 1, v41);
    }
  }
  uint64_t v47 = v85;
  unint64_t v48 = (unint64_t)v92;
  SimultaneousPreference.phase2.getter(v85);
  uint64_t v49 = v87;
  BOOL v50 = GesturePhase.isFailed.getter(v87);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v86[1])(v47, v49);
  if (!v50)
  {
    uint64_t v52 = v80;
    uint64_t v75 = a4;
    SimultaneousPreference.value2.getter(v48, v80);
    uint64_t v53 = v88;
    uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    uint64_t v55 = v91;
    if (v54((char *)v52, 1, v91) == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v52, v90);
    }
    else
    {
      uint64_t v87 = v38;
      int v56 = v78;
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      v92(v78, v52, v55);
      uint64_t v58 = v89;
      uint64_t v57 = v90;
      uint64_t v59 = v77;
      uint64_t v60 = v83;
      (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v77, v83, v90);
      if (v54(v59, 1, v55) == 1)
      {
        uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
        v61((uint64_t)v60, v57);
        v61((uint64_t)v59, v57);
        uint64_t v62 = v60;
        uint64_t v63 = v56;
      }
      else
      {
        uint64_t v64 = v73;
        v92(v73, (uint64_t)v59, v55);
        uint64_t v65 = v74;
        uint64_t v66 = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 16))(v74, v64, v55);
        uint64_t v86 = &v72;
        double v67 = MEMORY[0x270FA5388](v66);
        uint64_t v68 = v96;
        uint64_t v69 = v75;
        *(&v72 - 8) = v95;
        *(&v72 - 7) = v69;
        uint64_t v70 = v87;
        *(&v72 - 6) = v93;
        *(&v72 - 5) = v70;
        *(&v72 - 4) = v94;
        *(&v72 - 3) = v68;
        *(&v72 - 2) = (uint64_t)v56;
        (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v68 + 24))(v65, partial apply for closure #1 in SimultaneousPreference.mergedValue(), v67);
        unint64_t v71 = *(void (**)(char *, uint64_t))(v53 + 8);
        v71(v64, v55);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
        v71(v56, v55);
        uint64_t v62 = v60;
        uint64_t v63 = v65;
      }
      v92(v62, (uint64_t)v63, v55);
      return v81(v60, 0, 1, v55);
    }
  }
  return result;
}

uint64_t static SimultaneousPreference.initialValue.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v5(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t SimultaneousPreference.value.getter@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v80 = a8;
  uint64_t v81 = a7;
  uint64_t v84 = a5;
  uint64_t v75 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v67 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v68 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v65 = (uint64_t)&v62 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v64 = (char *)&v62 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v63 = (uint64_t)&v62 - v21;
  swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for GesturePhase();
  swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for GesturePhase();
  uint64_t v83 = v22;
  uint64_t v24 = v23;
  uint64_t v76 = v23;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v62 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v77 = (char *)&v62 - v25;
  uint64_t v78 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v62 - v27;
  uint64_t v82 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v62 - v30;
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v34 = a6;
  uint64_t v35 = v80;
  SimultaneousPreference.phase1.getter((uint64_t)&v62 - v30);
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v71 = v32;
  uint64_t v72 = v33;
  uint64_t v73 = v34;
  uint64_t v36 = v76;
  uint64_t v37 = v77;
  uint64_t v38 = TupleTypeMetadata2;
  SimultaneousPreference.phase2.getter((uint64_t)v28);
  uint64_t v39 = &v37[*(int *)(v38 + 48)];
  uint64_t v40 = v78;
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v37, v31, v83);
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v28, v36);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v36);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v37, v83);
      uint64_t v42 = v35;
      uint64_t v43 = v75;
      uint64_t v44 = v84;
      goto LABEL_14;
    case 2u:
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v54 = v65;
        uint64_t v55 = v84;
        SimultaneousPreference.value1.getter((int)v69, v65);
        uint64_t v56 = AssociatedTypeWitness;
        uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v54, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v55, v35);
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v54, v67);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v75, v54, v56);
        }
        return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v37, v83);
      }
      uint64_t v42 = v35;
      uint64_t v43 = v75;
      uint64_t v44 = v84;
      if (EnumCaseMultiPayload != 2) {
        goto LABEL_12;
      }
      uint64_t v46 = v64;
      SimultaneousPreference.mergedValue()(v69, v70, v71, v72, v84, v73, v81, v42, v64);
      uint64_t v47 = AssociatedTypeWitness;
      uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v44, v42);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v67);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v43, v46, v47);
      }
      goto LABEL_25;
    case 3u:
      int v49 = swift_getEnumCaseMultiPayload();
      if (v49 == 2)
      {
        uint64_t v58 = v63;
        uint64_t v59 = v84;
        SimultaneousPreference.value2.getter((unint64_t)v69, v63);
        uint64_t v60 = AssociatedTypeWitness;
        uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v58, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v59, v35);
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v58, v67);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(v75, v58, v60);
        }
LABEL_25:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v36);
        return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v37, v83);
      }
      uint64_t v42 = v35;
      uint64_t v43 = v75;
      uint64_t v44 = v84;
      if (v49 == 3)
      {
        (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v84, v35);
        return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v37, v83);
      }
LABEL_12:
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v44, v42);
        return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v37, v38);
      }
      else
      {
LABEL_13:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v36);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v37, v83);
LABEL_14:
        BOOL v50 = v68;
        SimultaneousPreference.mergedValue()(v69, v70, v71, v72, v44, v73, v81, v42, v68);
        uint64_t v51 = AssociatedTypeWitness;
        uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, AssociatedTypeWitness) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v44, v42);
          return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v50, v67);
        }
        else
        {
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v43, v50, v51);
        }
      }
    default:
      int v41 = swift_getEnumCaseMultiPayload();
      uint64_t v42 = v35;
      uint64_t v43 = v75;
      uint64_t v44 = v84;
      if (v41 == 1) {
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v82 + 8))(v37, v83);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v36);
      goto LABEL_14;
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SimultaneousPreference<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static SimultaneousPreference.initialValue.getter(*(void *)(a1 + 32), *(void *)(a1 + 56), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SimultaneousPreference<A, B, C>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return SimultaneousPreference.value.getter(*(void (**)(char *, uint64_t, uint64_t))v2, *(void *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance SimultaneousPreference<A, B, C>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v17 - v12;
  static SimultaneousPreference.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static SimultaneousGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #2 in static SimultaneousGesture._makeGesture(gesture:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for SimultaneousGesture.Value()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SimultaneousPhase()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SimultaneousPreference()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for SimultaneousGesture<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for Gesture.Body : Gesture in SimultaneousGesture<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t base witness table accessor for Equatable in <> SimultaneousGesture<A, B>.Value()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for SimultaneousGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  unint64_t v11 = ((v6 + v9) & ~v9) + *(void *)(v8 + 64);
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v16, ((unint64_t)a2 + v10) & v16, v7);
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for SimultaneousGesture(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for SimultaneousGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245ACDFF0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for SimultaneousGesture.Value()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SimultaneousGesture.Value(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84)) {
    size_t v6 = *(void *)(v5 + 64);
  }
  else {
    size_t v6 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  size_t v10 = v6 + v9;
  if (*(_DWORD *)(v8 + 84)) {
    size_t v11 = *(void *)(v8 + 64);
  }
  else {
    size_t v11 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v12 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v8 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v6 + v9) & ~v9) + v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = v7;
    uint64_t v17 = ~v9;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
    {
      memcpy(a1, a2, v6);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
    }
    unsigned int v18 = (const void *)(((unint64_t)a2 + v10) & v17);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v18, 1, v16))
    {
      memcpy((void *)(((unint64_t)a1 + v10) & v17), v18, v11);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v17, v18, v16);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 56))(((unint64_t)a1 + v10) & v17, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t destroy for SimultaneousGesture.Value(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }
  int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v5 + a1;
  if (!v4) {
    ++v8;
  }
  unint64_t v9 = (v8 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6);
  if (!result)
  {
    size_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v11(v9, v6);
  }
  return result;
}

void *initializeWithCopy for SimultaneousGesture.Value(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    size_t v10 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v9 = v5 + 56;
    v10(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v9 + 28);
    size_t v7 = *(void *)(v9 + 8);
  }
  if (v6) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v7 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (void *)(((unint64_t)a1 + v11 + v14) & ~v14);
  uint64_t v17 = (const void *)(((unint64_t)a2 + v15) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v18 = *(void *)(v13 + 64);
    }
    else {
      size_t v18 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v16, v17, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v16, v17, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  return a1;
}

void *assignWithCopy for SimultaneousGesture.Value(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (void *)(((unint64_t)a1 + v12 + v15) & ~v15);
  size_t v18 = (void *)(((unint64_t)a2 + v16) & ~v15);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v20 = v19(v17, 1, v13);
  int v21 = v19(v18, 1, v13);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      return a1;
    }
    int v22 = *(_DWORD *)(v14 + 84);
    size_t v23 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v17, v18, v13);
      return a1;
    }
    uint64_t v25 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v24 = v14 + 8;
    v25(v17, v13);
    int v22 = *(_DWORD *)(v24 + 76);
    size_t v23 = *(void *)(v24 + 56);
  }
  if (v22) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v23 + 1;
  }
  memcpy(v17, v18, v26);
  return a1;
}

void *initializeWithTake for SimultaneousGesture.Value(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
  {
    int v6 = *(_DWORD *)(v5 + 84);
    size_t v7 = *(void *)(v5 + 64);
    if (v6) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v7 + 1;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    size_t v10 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v9 = v5 + 56;
    v10(a1, 0, 1, AssociatedTypeWitness);
    int v6 = *(_DWORD *)(v9 + 28);
    size_t v7 = *(void *)(v9 + 8);
  }
  if (v6) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v7 + 1;
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (void *)(((unint64_t)a1 + v11 + v14) & ~v14);
  uint64_t v17 = (const void *)(((unint64_t)a2 + v15) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v18 = *(void *)(v13 + 64);
    }
    else {
      size_t v18 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v16, v17, v18);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v16, v17, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  return a1;
}

void *assignWithTake for SimultaneousGesture.Value(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, AssociatedTypeWitness);
  int v8 = v6(a2, 1, AssociatedTypeWitness);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
  }
  if (v9) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v10 + 1;
  }
  memcpy(a1, a2, v11);
LABEL_12:
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (void *)(((unint64_t)a1 + v12 + v15) & ~v15);
  size_t v18 = (void *)(((unint64_t)a2 + v16) & ~v15);
  int v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v20 = v19(v17, 1, v13);
  int v21 = v19(v18, 1, v13);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      return a1;
    }
    int v22 = *(_DWORD *)(v14 + 84);
    size_t v23 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v17, v18, v13);
      return a1;
    }
    uint64_t v25 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v24 = v14 + 8;
    v25(v17, v13);
    int v22 = *(_DWORD *)(v24 + 76);
    size_t v23 = *(void *)(v24 + 56);
  }
  if (v22) {
    size_t v26 = v23;
  }
  else {
    size_t v26 = v23 + 1;
  }
  memcpy(v17, v18, v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousGesture.Value(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 <= v6) {
    unsigned int v11 = v6;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v5) {
    uint64_t v12 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v4 + 64) + 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(v7 + 64);
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v12 + v13;
  if (a2 <= v11) {
    goto LABEL_36;
  }
  uint64_t v17 = v15 + (v16 & ~v13);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v20 = ((a2 - v11 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v20))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    if (v20 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    if (v20 < 2)
    {
LABEL_36:
      if (v11)
      {
        if (v6 >= v10) {
          unsigned int v24 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, AssociatedTypeWitness);
        }
        else {
          unsigned int v24 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)a1 + v16) & ~v13);
        }
        if (v24 >= 2) {
          return v24 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_36;
  }
LABEL_26:
  int v21 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v21 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v22 = v17;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v11 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for SimultaneousGesture.Value(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v8) {
    size_t v16 = *(void *)(v7 + 64);
  }
  else {
    size_t v16 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  size_t v18 = v16 + v17;
  size_t v19 = *(void *)(v11 + 64);
  if (!v13) {
    ++v19;
  }
  size_t v20 = ((v16 + v17) & ~v17) + v19;
  if (a3 <= v15) {
    goto LABEL_22;
  }
  if (v20 <= 3)
  {
    unsigned int v21 = ((a3 - v15 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v21))
    {
      int v10 = 4;
      if (v15 >= a2) {
        goto LABEL_30;
      }
      goto LABEL_23;
    }
    if (v21 >= 0x100) {
      int v10 = 2;
    }
    else {
      int v10 = v21 > 1;
    }
LABEL_22:
    if (v15 >= a2) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
  int v10 = 1;
  if (v15 >= a2)
  {
LABEL_30:
    uint64_t v25 = ~v17;
    size_t v26 = a1;
    switch(v10)
    {
      case 1:
        a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      case 2:
        *(_WORD *)&a1[v20] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      case 3:
        goto LABEL_77;
      case 4:
        *(_DWORD *)&a1[v20] = 0;
        goto LABEL_34;
      default:
LABEL_34:
        if (a2)
        {
LABEL_35:
          if (v9 >= v14)
          {
            if (v9 >= a2)
            {
              uint64_t v35 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56);
              v35(a1, a2 + 1, v8, v36);
            }
            else
            {
              if (v16 <= 3) {
                int v31 = ~(-1 << (8 * v16));
              }
              else {
                int v31 = -1;
              }
              if (v16)
              {
                int v32 = v31 & (~v9 + a2);
                if (v16 <= 3) {
                  int v33 = v16;
                }
                else {
                  int v33 = 4;
                }
                bzero(v26, v16);
                switch(v33)
                {
                  case 2:
                    *(_WORD *)size_t v26 = v32;
                    break;
                  case 3:
                    *(_WORD *)size_t v26 = v32;
                    _OWORD v26[2] = BYTE2(v32);
                    break;
                  case 4:
                    *(_DWORD *)size_t v26 = v32;
                    break;
                  default:
                    *size_t v26 = v32;
                    break;
                }
              }
            }
          }
          else
          {
            uint64_t v27 = (unsigned char *)((unint64_t)&a1[v18] & v25);
            if (v14 >= a2)
            {
              uint64_t v34 = *(void (**)(unint64_t, void))(v12 + 56);
              v34((unint64_t)&v26[v18] & v25, a2 + 1);
            }
            else
            {
              if (v19 <= 3) {
                int v28 = ~(-1 << (8 * v19));
              }
              else {
                int v28 = -1;
              }
              if (v19)
              {
                int v29 = v28 & (~v14 + a2);
                if (v19 <= 3) {
                  int v30 = v19;
                }
                else {
                  int v30 = 4;
                }
                bzero(v27, v19);
                switch(v30)
                {
                  case 2:
                    *(_WORD *)uint64_t v27 = v29;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v27 = v29;
                    v27[2] = BYTE2(v29);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v27 = v29;
                    break;
                  default:
                    *uint64_t v27 = v29;
                    break;
                }
              }
            }
          }
        }
        break;
    }
    return;
  }
LABEL_23:
  unsigned int v22 = ~v15 + a2;
  if (v20 < 4)
  {
    int v23 = (v22 >> (8 * v20)) + 1;
    if (v20)
    {
      int v24 = v22 & ~(-1 << (8 * v20));
      bzero(a1, v20);
      if (v20 == 3)
      {
        *(_WORD *)a1 = v24;
        a1[2] = BYTE2(v24);
      }
      else if (v20 == 2)
      {
        *(_WORD *)a1 = v24;
      }
      else
      {
        *a1 = v24;
      }
    }
  }
  else
  {
    bzero(a1, v20);
    *(_DWORD *)a1 = v22;
    int v23 = 1;
  }
  switch(v10)
  {
    case 1:
      a1[v20] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v20] = v23;
      break;
    case 3:
LABEL_77:
      __break(1u);
      JUMPOUT(0x245ACF680);
    case 4:
      *(_DWORD *)&a1[v20] = v23;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in SimultaneousPreference<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in SimultaneousPhase<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in SimultaneousPreference.mergedValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a1, v3, AssociatedTypeWitness);
}

uint64_t RangeSet.overlaps(_:)(uint64_t a1, uint64_t a2)
{
  return RangeSet.overlaps(_:)(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  char v9;
  unsigned char v11[16];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = type metadata accessor for RangeSet.Ranges();
  unsigned int v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-v7];
  RangeSet.ranges.getter();
  uint64_t v12 = v3;
  int v13 = v4;
  unsigned int v14 = a1;
  swift_getWitnessTable();
  unsigned int v9 = Sequence.contains(where:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return v9 & 1;
}

uint64_t partial apply for closure #1 in RangeSet.overlaps(_:)(uint64_t a1)
{
  return partial apply for closure #1 in RangeSet.overlaps(_:)(a1, MEMORY[0x263F8D868]) & 1;
}

uint64_t RangeSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  return RangeSet.overlaps(_:)(a1, a2);
}

uint64_t partial apply for closure #1 in RangeSet.contains(_:)(uint64_t a1)
{
  return partial apply for closure #1 in RangeSet.overlaps(_:)(a1, (uint64_t (*)(uint64_t, uint64_t))Range.contains(_:)) & 1;
}

uint64_t partial apply for closure #1 in RangeSet.overlaps(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = type metadata accessor for Range();
  return a2(v4, v5) & 1;
}

uint64_t RangeSet.insert(contentsOf:)()
{
  uint64_t v37 = type metadata accessor for Range();
  uint64_t v27 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v36 = (char *)&v27 - v0;
  uint64_t v1 = type metadata accessor for RangeSet.Ranges();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v27 - v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for IndexingIterator();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unsigned int v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v27 - v11;
  RangeSet.ranges.getter();
  int v32 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v33 = v2 + 16;
  v32(v9, v4, v1);
  dispatch thunk of Collection.startIndex.getter();
  int v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v34 = v4;
  uint64_t v35 = v2 + 8;
  int v31 = v13;
  v13(v4, v1);
  *(void *)&v9[*(int *)(v6 + 36)] = v38[0];
  uint64_t v28 = v7;
  unsigned int v14 = v12;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
  uint64_t v29 = v6;
  unsigned int v15 = &v12[*(int *)(v6 + 36)];
  uint64_t v16 = *(void *)v15;
  dispatch thunk of Collection.endIndex.getter();
  if (v16 != v38[0])
  {
    int v30 = (void (**)(char *))(v27 + 16);
    uint64_t v17 = (void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v18 = v37;
    do
    {
      size_t v19 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      size_t v20 = v14;
      uint64_t v21 = WitnessTable;
      unsigned int v22 = v36;
      (*v30)(v36);
      v19(v38, 0);
      int v23 = v34;
      v32(v34, v20, v1);
      dispatch thunk of Collection.formIndex(after:)();
      v31(v23, v1);
      RangeSet.insert(contentsOf:)();
      int v24 = v22;
      uint64_t WitnessTable = v21;
      unsigned int v14 = v20;
      (*v17)(v24, v18);
      uint64_t v25 = *(void *)v15;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v25 != v38[0]);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v29);
}

{
  return MEMORY[0x270FA0028]();
}

uint64_t RangeSet.lowerBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for RangeSet.Ranges();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = type metadata accessor for Range();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  RangeSet.ranges.getter();
  swift_getWitnessTable();
  Collection.first.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = *(void *)(v2 - 8);
    uint64_t v14 = 1;
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v13 = *(void *)(v2 - 8);
    uint64_t v16 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v19, v11, v2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    uint64_t v14 = 0;
    uint64_t v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, v14, 1, v2);
}

uint64_t RangeSet.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for RangeSet.Ranges();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v18 - v5;
  uint64_t v7 = type metadata accessor for Range();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - v10;
  RangeSet.ranges.getter();
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = *(void *)(v2 - 8);
    uint64_t v14 = 1;
    uint64_t v15 = v19;
  }
  else
  {
    uint64_t v13 = *(void *)(v2 - 8);
    uint64_t v16 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v19, &v11[*(int *)(v7 + 36)], v2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v7);
    uint64_t v14 = 0;
    uint64_t v15 = v16;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v15, v14, 1, v2);
}

uint64_t RangeSet<>.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v45 = a1;
  uint64_t v2 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v42 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v36 - v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v36 - v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (void (**)(char *, uint64_t))((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Range();
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v39 = (char *)&v36 - v17;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v18 = v45;
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v19 = v9;
  uint64_t v20 = v18;
  v44[1](v19, AssociatedTypeWitness);
  uint64_t v44 = v13;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    unsigned int v22 = v42;
    int v23 = v6;
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v25 = &v6[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v26 = v37;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    v27(v23, v20, v2);
    uint64_t v28 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v26 + 32);
    uint64_t v36 = v25;
    v28(v25, v44, v2);
    uint64_t v29 = &v22[*(int *)(v24 + 48)];
    v27(v22, (uint64_t)v23, v2);
    v27(v29, (uint64_t)v25, v2);
    int v30 = v38;
    v28(v38, (void (**)(char *, uint64_t))v22, v2);
    int v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v31(v29, v2);
    int v32 = &v22[*(int *)(TupleTypeMetadata2 + 48)];
    v28(v22, (void (**)(char *, uint64_t))v23, v2);
    v28(v32, (void (**)(char *, uint64_t))v36, v2);
    uint64_t v33 = v41;
    v28(&v30[*(int *)(v41 + 36)], (void (**)(char *, uint64_t))v32, v2);
    v31(v22, v2);
    uint64_t v35 = v39;
    uint64_t v34 = v40;
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v30, v33);
    RangeSet.insert(contentsOf:)();
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RangeSet<>.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v55 = a4;
  uint64_t v51 = a6;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v60 = a1;
  uint64_t v61 = a7;
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v11;
  uint64_t v12 = type metadata accessor for Range();
  uint64_t v47 = *(void (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v57 = (char *)&v42 - v13;
  uint64_t v14 = type metadata accessor for RangeSet.Ranges();
  uint64_t v53 = *(void **)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for IndexingIterator();
  uint64_t v44 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v42 - v23;
  uint64_t v45 = (void (**)(uint64_t, char *, uint64_t))v8;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(v8 + 16);
  uint64_t v26 = v60;
  uint64_t v60 = a5;
  v25(v61, v26, a5, v22);
  uint64_t v27 = v53;
  RangeSet.ranges.getter();
  uint64_t v54 = (void (*)(char *, char *, uint64_t))v27[2];
  uint64_t v55 = (char *)(v27 + 2);
  v54(v20, v16, v14);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v28 = (void *)v27[1];
  uint64_t v56 = v16;
  uint64_t v53 = v28;
  ((void (*)(char *, uint64_t))v28)(v16, v14);
  *(void *)&v20[*(int *)(v18 + 36)] = v66[0];
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v24, v20, v18);
  uint64_t v43 = v18;
  uint64_t v52 = &v24[*(int *)(v18 + 36)];
  uint64_t v29 = *(void *)v52;
  uint64_t v62 = v24;
  dispatch thunk of Collection.endIndex.getter();
  if (v29 != v66[0])
  {
    uint64_t v48 = (void (**)(char *))(v47 + 2);
    ++v47;
    uint64_t v46 = (void (**)(uint64_t, uint64_t))(v45 + 1);
    v45 += 4;
    uint64_t v49 = v14;
    uint64_t v63 = WitnessTable;
    do
    {
      int v30 = v52;
      int v31 = v62;
      int v32 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v33 = v57;
      (*v48)(v57);
      v32(v66, 0);
      uint64_t v34 = v56;
      v54(v56, v31, v14);
      uint64_t v35 = v30;
      dispatch thunk of Collection.formIndex(after:)();
      ((void (*)(char *, uint64_t))v53)(v34, v14);
      uint64_t v64 = v50;
      uint64_t v65 = v51;
      swift_getWitnessTable();
      uint64_t v36 = v10;
      uint64_t v37 = v60;
      uint64_t v38 = v61;
      Sequence.reduce<A>(_:_:)();
      (*v47)(v33, v12);
      (*v46)(v38, v37);
      uint64_t v39 = v38;
      uint64_t v10 = v36;
      (*v45)(v39, v36, v37);
      uint64_t v14 = v49;
      uint64_t v40 = *(void *)v35;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v40 != v66[0]);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v62, v43);
}

uint64_t RangeSet<>.indexSequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, a1, v5);
  return RangeSet<>.IndexSequence.init(_:)((uint64_t)v7, a2);
}

uint64_t RangeSet<>.IndexSequence.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = type metadata accessor for RangeSet();
  RangeSet.ranges.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t RangeSet<>.IndexSequence.Iterator.init(ranges:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  *a2 = 0;
  uint64_t v4 = type metadata accessor for RangeSet<>.IndexSequence.Iterator();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  swift_checkMetadataState();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v5 = (char *)a2 + *(int *)(v4 + 48);
  uint64_t v6 = type metadata accessor for RangeSet.Ranges();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a1, v6);
}

uint64_t RangeSet<>.IndexSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v90 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v79 = (char *)v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v80 = (char *)v74 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v87 = (char *)v74 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v94 = (char *)v74 - v13;
  uint64_t v83 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v93 = *(void *)(v83 + 16);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v14);
  uint64_t v92 = (char *)v74 - v15;
  uint64_t v88 = v4;
  uint64_t v85 = type metadata accessor for Range();
  uint64_t v95 = *(void *)(v85 - 8);
  MEMORY[0x270FA5388](v85);
  uint64_t v84 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v74 - v18;
  uint64_t v96 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v20);
  double v22 = (char *)v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v74 - v24;
  uint64_t v26 = *v2;
  uint64_t v91 = a1;
  uint64_t v27 = *(int *)(a1 + 48);
  uint64_t v86 = v2;
  uint64_t v28 = (char *)v2 + v27;
  type metadata accessor for RangeSet.Ranges();
  if (v26 >= RangeSet.Ranges.count.getter())
  {
    uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v96 + 56);
    uint64_t v47 = v90;
    return v46(v47, 1, 1, v5);
  }
  uint64_t v76 = v28;
  RangeSet.Ranges.subscript.getter();
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v22, v19, v5);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v95 + 8);
  v95 += 8;
  int v77 = v29;
  int v30 = v19;
  uint64_t v31 = v85;
  v29(v30, v85);
  uint64_t v81 = (char *)v86 + *(int *)(v91 + 44);
  uint64_t v75 = v25;
  uint64_t v32 = v88;
  dispatch thunk of Strideable.advanced(by:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v96 + 8);
  uint64_t v82 = v5;
  v33(v22, v5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v78 = v14;
  v74[1] = AssociatedConformanceWitness;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v35 = v94;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v36 = v81;
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  uint64_t v37 = v89;
  uint64_t v83 = *(void *)(v89 + 8);
  ((void (*)(char *, uint64_t))v83)(v35, AssociatedTypeWitness);
  uint64_t v38 = v84;
  RangeSet.Ranges.subscript.getter();
  uint64_t v39 = *(void *)(v91 + 32);
  uint64_t v98 = v32;
  uint64_t v99 = v39;
  swift_getWitnessTable();
  uint64_t v91 = Collection.count.getter();
  v77(v38, v31);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  uint64_t v41 = v87;
  v40(v87, v36, AssociatedTypeWitness);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v43 = v41;
      uint64_t v44 = v42;
      uint64_t v45 = v43;
LABEL_15:
      uint64_t v55 = AssociatedTypeWitness;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v83)(v45, AssociatedTypeWitness);
      BOOL v59 = v44 < v91;
      goto LABEL_16;
    }
    uint64_t v97 = v91;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v51 = v94;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    swift_getAssociatedConformanceWitness();
    uint64_t v56 = v41;
    char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v57 = (uint64_t (*)(char *, uint64_t))v83;
    ((void (*)(char *, uint64_t))v83)(v51, AssociatedTypeWitness);
LABEL_23:
    uint64_t v55 = AssociatedTypeWitness;
    uint64_t result = v57(v56, AssociatedTypeWitness);
    goto LABEL_24;
  }
  char v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v49 & 1) == 0)
  {
    if (v50 < 64)
    {
      uint64_t v58 = v87;
      uint64_t v44 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v45 = v58;
      goto LABEL_15;
    }
    uint64_t v68 = v79;
    uint64_t v69 = v87;
    v40(v79, v87, AssociatedTypeWitness);
    uint64_t v97 = v91;
    if (v91 <= 0)
    {
      uint64_t v73 = (uint64_t (*)(char *, uint64_t))v83;
      ((void (*)(char *, uint64_t))v83)(v68, AssociatedTypeWitness);
      uint64_t v55 = AssociatedTypeWitness;
      uint64_t result = v73(v69, AssociatedTypeWitness);
      uint64_t v61 = v89;
      uint64_t v60 = v90;
      uint64_t v51 = v94;
      uint64_t v62 = v75;
      goto LABEL_25;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v51 = v94;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    swift_getAssociatedConformanceWitness();
    uint64_t v56 = v69;
    char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v57 = (uint64_t (*)(char *, uint64_t))v83;
    ((void (*)(char *, uint64_t))v83)(v51, AssociatedTypeWitness);
    v57(v68, AssociatedTypeWitness);
    goto LABEL_23;
  }
  if (v50 <= 64)
  {
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v63 = v94;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    swift_getAssociatedConformanceWitness();
    uint64_t v64 = v87;
    char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v66 = (void (*)(char *, uint64_t))v83;
    ((void (*)(char *, uint64_t))v83)(v63, AssociatedTypeWitness);
    uint64_t v67 = v80;
    v40(v80, v64, AssociatedTypeWitness);
    if ((v65 & 1) == 0)
    {
      uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter();
      v66(v67, AssociatedTypeWitness);
      uint64_t v72 = (uint64_t (*)(char *, uint64_t))v66;
      uint64_t v55 = AssociatedTypeWitness;
      uint64_t result = v72(v64, AssociatedTypeWitness);
      BOOL v59 = v71 < v91;
LABEL_16:
      uint64_t v61 = v89;
      uint64_t v60 = v90;
      uint64_t v51 = v94;
      uint64_t v62 = v75;
      if (v59) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
    v66(v67, AssociatedTypeWitness);
    v66(v64, AssociatedTypeWitness);
    uint64_t v60 = v90;
    uint64_t v62 = v75;
LABEL_27:
    uint64_t v70 = v82;
    (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v60, v62, v82);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v60, 0, 1, v70);
  }
  uint64_t v97 = v91;
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v51 = v94;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  swift_getAssociatedConformanceWitness();
  uint64_t v52 = v87;
  char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v54 = (uint64_t (*)(char *, uint64_t))v83;
  ((void (*)(char *, uint64_t))v83)(v51, AssociatedTypeWitness);
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t result = v54(v52, AssociatedTypeWitness);
LABEL_24:
  uint64_t v61 = v89;
  uint64_t v60 = v90;
  uint64_t v62 = v75;
  if (v53) {
    goto LABEL_27;
  }
LABEL_25:
  if (!__OFADD__(*v86, 1))
  {
    ++*v86;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    (*(void (**)(char *, char *, uint64_t))(v61 + 40))(v81, v51, v55);
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t RangeSet<>.IndexSequence.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RangeSet.Ranges();
  double v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, double))(v7 + 16))((char *)&v9 - v5, v1, v4);
  return RangeSet<>.IndexSequence.Iterator.init(ranges:)((uint64_t)v6, a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RangeSet<A><>.IndexSequence()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance RangeSet<A><>.IndexSequence@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  RangeSet<>.IndexSequence.makeIterator()(a2);
  double v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RangeSet<A><>.IndexSequence()
{
  return MEMORY[0x270F9D960]();
}

uint64_t type metadata completion function for RangeSet<>.IndexSequence()
{
  uint64_t result = type metadata accessor for RangeSet.Ranges();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for RangeSet<>.IndexSequence(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RangeSet.Ranges();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245AD2234);
}

uint64_t sub_245AD2234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RangeSet<>.IndexSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245AD22BC);
}

uint64_t sub_245AD22BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RangeSet.Ranges();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RangeSet<>.IndexSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for RangeSet<>.IndexSequence.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RangeSet.Ranges();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RangeSet<>.IndexSequence.Iterator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 44);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v8, v9, AssociatedTypeWitness);
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for RangeSet.Ranges();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for RangeSet<>.IndexSequence.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v4, AssociatedTypeWitness);
  uint64_t v6 = a1 + *(int *)(a2 + 48);
  uint64_t v7 = type metadata accessor for RangeSet.Ranges();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

void *initializeWithCopy for RangeSet<>.IndexSequence.Iterator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v7, v8, AssociatedTypeWitness);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

void *assignWithCopy for RangeSet<>.IndexSequence.Iterator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v7, v8, AssociatedTypeWitness);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

void *initializeWithTake for RangeSet<>.IndexSequence.Iterator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v7, v8, AssociatedTypeWitness);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void *assignWithTake for RangeSet<>.IndexSequence.Iterator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(v7, v8, AssociatedTypeWitness);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for RangeSet.Ranges();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for RangeSet<>.IndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245AD2A98);
}

uint64_t sub_245AD2A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = AssociatedTypeWitness;
    uint64_t v9 = a1 + *(int *)(a3 + 44);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for RangeSet.Ranges();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 48);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for RangeSet<>.IndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245AD2BD8);
}

uint64_t sub_245AD2BD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = AssociatedTypeWitness;
    uint64_t v11 = a1 + *(int *)(a4 + 44);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v14 = type metadata accessor for RangeSet.Ranges();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + *(int *)(a4 + 48);
    return v15(v17, a2, a2, v16);
  }
}

uint64_t type metadata accessor for RangeSet<>.IndexSequence.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

CGFloat specialized RangeSet<>.reduce<A>(_:_:)(CGFloat x, CGFloat y, CGFloat width, CGFloat height, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v46 - v14;
  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  uint64_t v17 = v16 - 8;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  double v22 = (char *)v46 - v21;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  RangeSet.ranges.getter();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v50 = v13 + 16;
  char v49 = v23;
  v23(v19, v15, v12);
  unint64_t v24 = lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v51 = v15;
  uint64_t v52 = v13 + 8;
  uint64_t v48 = v25;
  v25(v15, v12);
  *(CGFloat *)&v19[*(int *)(v17 + 44)] = buffer.x;
  outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v19, (uint64_t)v22);
  uint64_t v26 = &v22[*(int *)(v17 + 44)];
  uint64_t v27 = *(void *)v26;
  dispatch thunk of Collection.endIndex.getter();
  if (v27 != *(void *)&buffer.x)
  {
    uint64_t v47 = v22;
    v46[1] = v24;
    v46[0] = v26;
    do
    {
      int v30 = (void (*)(CGPoint *, void))dispatch thunk of Collection.subscript.read();
      CFIndex v33 = *v31;
      CFIndex v32 = v31[1];
      v30(&buffer, 0);
      uint64_t v34 = v51;
      v49(v51, v22, v12);
      dispatch thunk of Collection.formIndex(after:)();
      v48(v34, v12);
      if (v33 != v32)
      {
        if (v32 < v33)
        {
          __break(1u);
        }
        else if (v33 < v32)
        {
          uint64_t v35 = *(void **)a6;
          char v36 = *(unsigned char *)(a6 + 16);
          while (1)
          {
            outlined retain of Text.Layout.Line(a6);
            CGFloat v53 = height;
            if (v36)
            {
              uint64_t v45 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v35);
              if (!v45) {
                goto LABEL_16;
              }
              uint64_t v37 = v45;
              outlined release of Text.Layout.Line(a6);
            }
            else
            {
              outlined retain of Text.Layout.Line(a6);

              swift_release();
              uint64_t v37 = (const __CTLine *)v35;
            }
            CFIndex v38 = v33 + 1;
            double v39 = *(double *)(a6 + 24);
            double v40 = *(double *)(a6 + 32);
            uint64_t v41 = (id)_CTLineGetRunAtIndex(v37, v33);
            buffer.double x = 0.0;
            buffer.CGFloat y = 0.0;
            CGFloat descent = 0.0;
            CGFloat ascent = 0.0;
            originsBuffer.CGFloat y = 0.0;
            CGFloat leading = 0.0;
            originsBuffer.double x = 0.0;
            v60.location = 0;
            v60.length = 1;
            CTRunGetPositions((CTRunRef)v41, v60, &buffer);
            v61.location = 0;
            v61.length = 1;
            CTRunGetBaseAdvancesAndOrigins((CTRunRef)v41, v61, 0, &originsBuffer);
            CGFloat v42 = buffer.x - originsBuffer.x;
            CGFloat v43 = buffer.y - originsBuffer.y;
            v62.location = 0;
            v62.length = 0;
            double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v41, v62, &ascent, &descent, &leading);

            swift_release();
            v65.origin.double x = v39 + v42;
            v65.origin.CGFloat y = v40 - v43 - ascent;
            v65.size.CGFloat height = fabs(descent) + ascent;
            v63.origin.double x = x;
            v63.origin.CGFloat y = y;
            v63.size.CGFloat width = width;
            v63.size.CGFloat height = v53;
            v65.size.CGFloat width = TypographicBounds;
            CGRect v64 = CGRectUnion(v63, v65);
            double x = v64.origin.x;
            CGFloat y = v64.origin.y;
            CGFloat width = v64.size.width;
            CGFloat height = v64.size.height;
            CFIndex v33 = v38;
            if (v32 == v38) {
              goto LABEL_4;
            }
          }
        }
        __break(1u);
LABEL_16:
        __break(1u);
      }
LABEL_4:
      uint64_t v29 = *(void *)v46[0];
      double v22 = v47;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v29 != *(void *)&buffer.x);
  }
  outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>((uint64_t)v22);
  return x;
}

void type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
    lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<RangeSet<Int>.Ranges>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges)
  {
    _ss8RangeSetV6RangesVySi_GMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges;
  if (!lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges)
  {
    type metadata accessor for RangeSet<Int>.Ranges(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges);
  }
  return result;
}

void type metadata accessor for RangeSet<Int>.Ranges(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Text.Layout.Line(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Layout.Line(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of IndexingIterator<RangeSet<Int>.Ranges>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<RangeSet<Int>.Ranges>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _GraphInputs.hasWidgetMetadata.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _GraphInputs.hasWidgetMetadata : _GraphInputs@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _GraphInputs.hasWidgetMetadata.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for _GraphInputs.hasWidgetMetadata : _GraphInputs(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, (uint64_t)&v5);
  return swift_release();
}

uint64_t _GraphInputs.hasWidgetMetadata.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_GraphInputs.hasWidgetMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    char v5 = *(unsigned char *)(v4 + 72);
  }
  else {
    char v5 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = v5;
  return _GraphInputs.hasWidgetMetadata.modify;
}

uint64_t _GraphInputs.hasWidgetMetadata.modify(uint64_t a1, char a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  swift_retain();
  if (a2)
  {
    uint64_t v6 = v4;
    char v7 = v5;
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a1 + 8;
    uint64_t v6 = v4;
    char v7 = v5;
  }
  specialized closure #1 in PropertyList.subscript.setter(v6, v7, v8);

  return swift_release();
}

uint64_t _ViewInputs.hasWidgetMetadata.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2) {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 72);
  }
  else {
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v3;
}

uint64_t key path getter for _ViewInputs.hasWidgetMetadata : _ViewInputs@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _ViewInputs.hasWidgetMetadata.getter();
  *a1 = result & 1;
  return result;
}

uint64_t _ViewInputs.hasWidgetMetadata.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1, (uint64_t)&v4);
  return swift_release();
}

uint64_t (*_ViewInputs.hasWidgetMetadata.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (v4) {
    char v5 = *(unsigned char *)(v4 + 72);
  }
  else {
    char v5 = 0;
  }
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = v5;
  return _GraphInputs.hasWidgetMetadata.modify;
}

ValueMetadata *type metadata accessor for _GraphInputs.HasWidgetMetadataKey()
{
  return &type metadata for _GraphInputs.HasWidgetMetadataKey;
}

uint64_t specialized ProtobufDecoder.messageField<A>(_:)(char a1)
{
  if ((a1 & 7) == 2) {
    return specialized ProtobufDecoder.decodeMessage<A>()();
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t specialized ProtobufDecoder.messageField<A>(_:)@<X0>(char a1@<W0>, unint64_t a2@<X8>)
{
  if ((a1 & 7) == 2) {
    return specialized ProtobufDecoder.decodeMessage<A>()(a2);
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t CodableAttributedString.Range.extent.getter()
{
  return *(void *)v0;
}

uint64_t CodableAttributedString.Range.extent.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*CodableAttributedString.Range.extent.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAttributedString.Range.attributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CodableAttributedString.Range.attributes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*CodableAttributedString.Range.attributes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id CodableAttributedString.base.getter()
{
  return *v0;
}

void CodableAttributedString.base.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CodableAttributedString.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::CodableAttributedString __swiftcall CodableAttributedString.init(_:)(SwiftUI::CodableAttributedString result)
{
  v1->base.super.Class isa = result.base.super.isa;
  return result;
}

uint64_t CodableAttributedString.encode(to:)(uint64_t a1)
{
  id v4 = *v1;
  id v5 = objc_msgSend(*v1, sel_string);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (v6) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8 == 0xE000000000000000;
  }
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (ProtobufEncoder.stringFieldAlways(_:_:)(1), !v2))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v4);
    if (one-time initialization token for resolvableTextSegment != -1) {
      goto LABEL_25;
    }
    while (1)
    {
      uint64_t v11 = static NSAttributedStringKey.resolvableTextSegment;
      id v12 = objc_msgSend(v10, sel_length, v31);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v10;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:);
      *(void *)(v14 + 24) = v13;
      CFIndex v38 = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
      uint64_t v39 = v14;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v35 = 1107296256;
      char v36 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      uint64_t v37 = &block_descriptor_2;
      uint64_t v15 = _Block_copy(&aBlock);
      uint64_t v16 = v10;
      swift_retain();
      swift_release();
      objc_msgSend(v16, sel_enumerateAttribute_inRange_options_usingBlock_, v11, 0, v12, 0, v15);
      _Block_release(v15);
      LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      uint64_t result = swift_release();
      if (v11)
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      uint64_t v33 = MEMORY[0x263F8EE78];
      uint64_t v18 = v16;
      id v19 = objc_msgSend(v18, sel_length);

      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = &v33;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = partial apply for closure #1 in CodableAttributedString.encode(to:);
      *(void *)(v21 + 24) = v20;
      CFIndex v38 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
      uint64_t v39 = v21;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v35 = 1107296256;
      char v36 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
      uint64_t v37 = &block_descriptor_12_0;
      double v22 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_enumerateAttributesInRange_options_usingBlock_, 0, v19, 0, v22);
      _Block_release(v22);
      LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (v19) {
        goto LABEL_27;
      }
      uint64_t v23 = *(void *)(v33 + 16);
      if (!v23) {
        break;
      }
      CFIndex v32 = v18;
      uint64_t v31 = swift_bridgeObjectRetain();
      unint64_t v24 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 48);
      while (1)
      {
        uint64_t v25 = (uint64_t)*(v24 - 1);
        uint64_t v26 = *v24;
        uint64_t v27 = (uint64_t)*(v24 - 2);
        swift_bridgeObjectRetain();
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        uint64_t aBlock = v27;
        uint64_t v35 = v25;
        char v36 = v26;
        uint64_t v10 = *(char **)(a1 + 8);
        uint64_t v28 = *(void **)(a1 + 24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        }
        unint64_t v30 = v28[2];
        unint64_t v29 = v28[3];
        if (v30 >= v29 >> 1) {
          uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
        }
        v28[2] = v30 + 1;
        v28[v30 + 4] = v10;
        *(void *)(a1 + 24) = v28;
        if (__OFADD__(v10, 1)) {
          break;
        }
        *(void *)(a1 + 8) = v10 + 1;
        CodableAttributedString.Range.encode(to:)(a1);
        if (v2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_22;
        }
        ProtobufEncoder.endLengthDelimited()();
        swift_bridgeObjectRelease();
        v24 += 3;
        if (!--v23)
        {

          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_25:
      swift_once();
    }

LABEL_22:
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CodableAttributedString.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  BOOL v9 = (void *)*a5;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    BOOL v9 = (void *)result;
    *a5 = result;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    BOOL v9 = (void *)result;
    *a5 = result;
  }
  void v9[2] = v12 + 1;
  uint64_t v13 = &v9[3 * v12];
  unsigned __int8 v13[4] = a2;
  v13[5] = a3;
  v13[6] = a1;
  return result;
}

uint64_t CodableAttributedString.init(from:)@<X0>(id *a1@<X0>, id **a2@<X8>)
{
  id v3 = v2;
  CGRect v65 = a2;
  uint64_t v5 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v73 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = (unint64_t)a1[1];
  uint64_t v8 = a1[2];
  if (v7 >= (unint64_t)v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
    unint64_t v11 = 0xE000000000000000;
LABEL_4:
    v64[0] = v3;
    a1[3] = 0;
    id v12 = objc_allocWithZone(MEMORY[0x263F089B8]);
    uint64_t v13 = (void *)MEMORY[0x24C522820](v9, v11);
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_initWithString_, v13);

    id v3 = v14;
    id v15 = objc_msgSend(v3, sel_length);

    uint64_t v16 = v10[2];
    v64[1] = v10;
    if (v16)
    {
      type metadata accessor for NSAttributedStringKey(0);
      uint64_t v73 = v17;
      uint64_t v66 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      uint64_t v18 = v10 + 6;
      do
      {
        NSUInteger v19 = *(v18 - 2);
        NSUInteger v20 = *(v18 - 1);
        v18 += 3;
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v74.location = v19;
        v74.length = v20;
        v75.location = 0;
        v75.length = (NSUInteger)v15;
        NSRange v22 = NSIntersectionRange(v74, v75);
        swift_bridgeObjectRelease();
        objc_msgSend(v3, sel_addAttributes_range_, isa, v22.location, v22.length);

        --v16;
      }
      while (v16);
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for resolvableTextSegment != -1) {
      goto LABEL_63;
    }
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  unint64_t v11 = 0xE000000000000000;
  while (1)
  {
    unint64_t v31 = (unint64_t)a1[3];
    if (v31)
    {
      unint64_t v32 = (unint64_t)a1[4];
      if (v7 < v32) {
        goto LABEL_19;
      }
      if (v32 < v7) {
        goto LABEL_53;
      }
      a1[3] = 0;
    }
    unint64_t v33 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_54;
    }
    unint64_t v31 = v33;
    if (v33 < 8)
    {
LABEL_53:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
LABEL_54:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_19:
    if (v31 >> 3 != 2) {
      break;
    }
    if ((v31 & 7) != 2) {
      goto LABEL_53;
    }
    ProtobufDecoder.beginMessage()();
    if (v3) {
      goto LABEL_54;
    }
    CodableAttributedString.Range.init(from:)((uint64_t)a1, &aBlock);
    id v3 = 0;
    uint64_t v45 = a1[5];
    if (!v45[2]) {
      goto LABEL_61;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v46 = v45[2];
      if (!v46) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
      uint64_t v46 = v45[2];
      if (!v46) {
        goto LABEL_62;
      }
    }
    uint64_t v47 = v46 - 1;
    uint64_t v48 = (void *)v45[v47 + 4];
    v45[2] = v47;
    a1[5] = v45;
    a1[2] = v48;
    uint64_t v49 = aBlock;
    uint64_t v50 = v68;
    uint64_t v51 = v69;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    uint64_t v52 = v10;
    unint64_t v53 = v10[2];
    uint64_t v54 = v52;
    unint64_t v55 = v52[3];
    if (v53 >= v55 >> 1) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v53 + 1, 1, v54);
    }
    void v54[2] = v53 + 1;
    uint64_t v56 = &v54[3 * v53];
    uint64_t v10 = v54;
    v56[4] = v49;
    v56[5] = v50;
    v56[6] = v51;
    id v3 = 0;
LABEL_12:
    unint64_t v7 = (unint64_t)a1[1];
    uint64_t v8 = a1[2];
    if (v7 >= (unint64_t)v8) {
      goto LABEL_4;
    }
  }
  if (v31 >> 3 != 1)
  {
    switch(v31 & 7)
    {
      case 0uLL:
        ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_54;
        }
        goto LABEL_12;
      case 1uLL:
        unint64_t v30 = (unint64_t)a1[1] + 8;
        if ((unint64_t)v8 < v30) {
          goto LABEL_53;
        }
        goto LABEL_11;
      case 2uLL:
        uint64_t v59 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_54;
        }
        if (v59 < 0) {
          goto LABEL_67;
        }
        unint64_t v30 = (unint64_t)a1[1] + v59;
        if ((unint64_t)v8 < v30) {
          goto LABEL_53;
        }
LABEL_11:
        a1[1] = (id)v30;
        break;
      case 5uLL:
        unint64_t v30 = (unint64_t)a1[1] + 4;
        if ((unint64_t)v8 < v30) {
          goto LABEL_53;
        }
        goto LABEL_11;
      default:
        goto LABEL_53;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  if ((v31 & 7) != 2) {
    goto LABEL_58;
  }
  uint64_t v34 = ProtobufDecoder.decodeVarint()();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v35 = v34;
  if ((v34 & 0x8000000000000000) == 0)
  {
    char v36 = v10;
    uint64_t v37 = a1[1];
    if (v8 < (void *)&v37[v34])
    {
LABEL_58:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      a1[1] = &v37[v34];
      if (v34)
      {
        uint64_t v38 = v37 - (unsigned char *)objc_msgSend(objc_retainAutorelease(*a1), sel_bytes);
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v8 = v40;
        if (__OFADD__(v38, v35)) {
          goto LABEL_65;
        }
        if (v38 + v35 < v38) {
          goto LABEL_66;
        }
        uint64_t v41 = v39;
        uint64_t v42 = Data._Representation.subscript.getter();
        unint64_t v44 = v43;
        outlined consume of Data._Representation(v41, (unint64_t)v8);
      }
      else
      {
        uint64_t v42 = 0;
        unint64_t v44 = 0xC000000000000000;
      }
      static String.Encoding.utf8.getter();
      uint64_t v57 = String.init(data:encoding:)();
      uint64_t v10 = v36;
      if (v58)
      {
        uint64_t v9 = v57;
        unint64_t v11 = v58;
        outlined consume of Data._Representation(v42, v44);
        goto LABEL_12;
      }
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      outlined consume of Data._Representation(v42, v44);
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_8:
  uint64_t v23 = static NSAttributedStringKey.resolvableTextSegment;
  id v24 = objc_msgSend(v3, sel_length);
  uint64_t v25 = v3;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)partial apply;
  *(void *)(v27 + 24) = v26;
  uint64_t v71 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v72 = (void *)v27;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v68 = 1107296256;
  uint64_t v69 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v70 = &block_descriptor_23_0;
  uint64_t v28 = _Block_copy(&aBlock);
  uint64_t v8 = v72;
  a1 = v25;
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateAttribute_inRange_options_usingBlock_, v23, 0, v24, 0, v28);
  _Block_release(v28);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v28)
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    __break(1u);
    CFRange v62 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    uint64_t v63 = v62[2];
    if (!v63)
    {
      __break(1u);
      JUMPOUT(0x245AD4930);
    }
    uint64_t v60 = v63 - 1;
    CFRange v61 = (void *)v62[v60 + 4];
    v62[2] = v60;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    a1[5] = v62;
    a1[2] = v61;
  }
  else
  {
    NSMutableAttributedString.resolveUpdateSchedule(recalculate:)(1, (uint64_t)&aBlock);
    uint64_t result = outlined destroy of AnyTrackedValue?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    *CGRect v65 = a1;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAttributedString(uint64_t a1)
{
  return CodableAttributedString.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAttributedString@<X0>(id *a1@<X0>, id **a2@<X8>)
{
  return CodableAttributedString.init(from:)(a1, a2);
}

uint64_t protocol witness for Error._domain.getter in conformance CodableAttributedString.Range.Error()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance CodableAttributedString.Range.Error()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance CodableAttributedString.Range.Error()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance CodableAttributedString.Range.Error()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t CodableAttributedString.Range.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v2;
  Swift::String v223 = (long long *)a1;
  uint64_t v243 = *MEMORY[0x263EF8340];
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x270FA5388](v4 - 8);
  Swift::String v220 = (char *)&v215 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v6 = *v1;
  if ((*v1 & 0x8000000000000000) != 0) {
    goto LABEL_338;
  }
  Swift::UInt v7 = v1[1];
  Swift::UInt v8 = v1[2];
  if (v6)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v6);
  }
  uint64_t v9 = (uint64_t)v223;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_338;
  }
  double v10 = COERCE_DOUBLE(&v235);
  uint64_t v11 = (uint64_t)v220;
  if (v7)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
    uint64_t v9 = (uint64_t)v223;
  }
  uint64_t v12 = *(void *)(v9 + 16);
  long long v13 = *(_OWORD *)(v9 + 24);
  uint64_t v219 = v9 + 24;
  long long v240 = *(_OWORD *)v9;
  uint64_t v241 = v12;
  long long v242 = v13;
  double v14 = COERCE_DOUBLE(&v240);
  uint64_t v217 = ProtobufEncoder.preferredBundleLanguage.getter();
  uint64_t v218 = v15;
  uint64_t v16 = *(void *)(v8 + 64);
  Swift::UInt v221 = v8 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v224 = (uint64_t)&v237 + 8;
  Swift::String v225 = (long long *)((char *)&v240 + 8);
  int64_t v222 = (unint64_t)(v17 + 63) >> 6;
  int64_t v215 = v222 - 1;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  if (!v19) {
    goto LABEL_12;
  }
  while (2)
  {
    unint64_t v21 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    int64_t v226 = v20;
    unint64_t v22 = v21 | (v20 << 6);
LABEL_11:
    uint64_t v23 = *(void *)(v8 + 56);
    *(void *)&long long v237 = *(void *)(*(void *)(v8 + 48) + 8 * v22);
    id v24 = (void *)v237;
    outlined init with copy of Any(v23 + 32 * v22, v224);
    id v25 = v24;
LABEL_24:
    _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0((uint64_t)&v237, (uint64_t)&v240, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any)?);
    double v14 = *(double *)&v240;
    if (!(void)v240)
    {
      uint64_t result = swift_release();
      uint64_t v209 = v218;
      if (!v218) {
        return result;
      }
      uint64_t v210 = *((void *)v223 + 2);
      long long v240 = *v223;
      uint64_t v241 = v210;
      long long v242 = *(long long *)((char *)v223 + 24);
      swift_bridgeObjectRetain();
      uint64_t v211 = ProtobufEncoder.preferredBundleLanguage.getter();
      if (v212)
      {
        uint64_t v213 = v217;
        if (v217 == v211 && v209 == v212)
        {
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        char v214 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v214) {
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v213 = v217;
      }
      if ((v213 || v209 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        ProtobufEncoder.stringFieldAlways(_:_:)(15);
      }
      return swift_bridgeObjectRelease();
    }
    outlined init with take of Any(v225, &v235);
    LODWORD(v28) = GetAttributedStringKey(*(void **)&v14);
    type metadata accessor for _AttributedStringKey(0);
    switch((int)v28)
    {
      case 0:
      case 19:
      case 20:
        goto LABEL_212;
      case 1:
        __swift_project_boxed_opaque_existential_1(&v235, v236);
        uint64_t v95 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(void *)&long long v237 = 0;
        double v233 = 0.0;
        *(void *)&long long v231 = 0;
        v228[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v95, (uint64_t)&v237, (uint64_t)&v233, (uint64_t)&v231, (uint64_t)v228) & 1) == 0) {
          goto LABEL_130;
        }
        float v96 = *(double *)&v237;
        float v97 = v233;
        float v98 = *(double *)&v231;
        char v227 = 0;
        float v99 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v227, v96, v97, v98);
        float v101 = v100;
        float v103 = v102;
        Swift::Float v105 = v104;
        swift_unknownObjectRelease();
        uint64_t v28 = v223;
        int64_t v106 = *((void *)v223 + 1);
        int64_t v107 = *((void *)v223 + 2);
        if (v106 >= v107)
        {
          int64_t v190 = v106 + 1;
          if (__OFADD__(v106, 1)) {
            goto LABEL_330;
          }
          if (v107 < v190)
          {
            Swift::String v191 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v190);
            uint64_t v28 = v223;
          }
          else
          {
            *((void *)v223 + 1) = v190;
            Swift::String v191 = (unsigned char *)(*v28 + v106);
          }
          *Swift::String v191 = 34;
          int64_t v108 = v28[1];
        }
        else
        {
          *(unsigned char *)(*(void *)v223 + v106) = 34;
          int64_t v108 = v106 + 1;
          v28[1] = v106 + 1;
        }
        uint64_t v109 = v219;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v110 = *(void *)(*(void *)v109 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v110);
        uint64_t v111 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v110, v108);
        _ViewInputs.base.modify(v111, v112);
        int64_t v113 = v108 + 1;
        if (__OFADD__(v108, 1)) {
          goto LABEL_318;
        }
        uint64_t v28 = v223;
        *((void *)v223 + 1) = v113;
        double v10 = COERCE_DOUBLE(&v235);
        if (v99 == 0.0)
        {
          if (v101 == 0.0) {
            goto LABEL_85;
          }
        }
        else
        {
          int64_t v167 = v28[2];
          if (v113 >= v167)
          {
            int64_t v204 = v108 + 2;
            if (__OFADD__(v113, 1)) {
              goto LABEL_336;
            }
            if (v167 < v204)
            {
              uint64_t v206 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v204);
            }
            else
            {
              uint64_t v205 = v223;
              *((void *)v223 + 1) = v204;
              uint64_t v206 = (unsigned char *)(*v205 + v113);
            }
            *uint64_t v206 = 13;
            uint64_t v11 = (uint64_t)v220;
          }
          else
          {
            *(unsigned char *)(*v28 + v113) = 13;
            v28[1] = v108 + 2;
          }
          ProtobufEncoder.encodeFloat(_:)(v99);
          if (v101 == 0.0)
          {
LABEL_85:
            if (v103 == 0.0) {
              goto LABEL_86;
            }
            goto LABEL_187;
          }
        }
        ProtobufEncoder.encodeVarint(_:)(0x15uLL);
        ProtobufEncoder.encodeFloat(_:)(v101);
        if (v103 == 0.0) {
          goto LABEL_86;
        }
LABEL_187:
        ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
        ProtobufEncoder.encodeFloat(_:)(v103);
LABEL_86:
        if (v105 != 1.0)
        {
          ProtobufEncoder.encodeVarint(_:)(0x25uLL);
          ProtobufEncoder.encodeFloat(_:)(v105);
        }
        ProtobufEncoder.endLengthDelimited()();
        goto LABEL_212;
      case 2:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        Swift::UInt v80 = v8;
        uint64_t v81 = v3;
        double v10 = COERCE_DOUBLE(*(id *)&v233);
        uint64_t v82 = v223;
        ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
        uint64_t v83 = v82[1];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v84 = *(void *)(v82[3] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v84);
        uint64_t v85 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v84, v83);
        _ViewInputs.base.modify(v85, v86);
        if (__OFADD__(v83, 1)) {
          goto LABEL_317;
        }
        v82[1] = v83 + 1;
        CodableNSParagraphStyle.encode(to:)(v82, *(id *)&v10);
        uint64_t v3 = v81;
        if (v81) {
          goto LABEL_303;
        }
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        goto LABEL_110;
      case 3:
        type metadata accessor for CTFontRef(0);
        __swift_project_boxed_opaque_existential_1(&v235, v236);
        unint64_t v124 = (const void *)_bridgeAnythingToObjectiveC<A>(_:)();
        double v10 = COERCE_DOUBLE(static CTFontRef.make(platformFont:)(v124));
        swift_unknownObjectRelease();
        if (v10 == 0.0) {
          goto LABEL_223;
        }
        uint64_t v28 = v223;
        int64_t v125 = *((void *)v223 + 1);
        int64_t v126 = *((void *)v223 + 2);
        uint64_t v216 = v3;
        if (v125 >= v126)
        {
          int64_t v186 = v125 + 1;
          if (__OFADD__(v125, 1))
          {
            __break(1u);
LABEL_330:
            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            swift_bridgeObjectRelease();
            *(_DWORD *)(*(void *)&v10 + 32) = v28;
            _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
LABEL_338:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x245AD6AE4);
          }
          if (v126 < v186)
          {
            Swift::String v187 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v186);
            uint64_t v28 = v223;
          }
          else
          {
            *((void *)v223 + 1) = v186;
            Swift::String v187 = (unsigned char *)(*v28 + v125);
          }
          unsigned char *v187 = 26;
          int64_t v127 = v28[1];
        }
        else
        {
          *(unsigned char *)(*(void *)v223 + v125) = 26;
          int64_t v127 = v125 + 1;
          v28[1] = v125 + 1;
        }
        uint64_t v128 = v219;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v129 = *(void *)(*(void *)v128 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v129);
        uint64_t v130 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v127);
        uint64_t v132 = _ViewInputs.base.modify(v130, v131);
        if (__OFADD__(v127, 1))
        {
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
LABEL_323:
          __break(1u);
LABEL_324:
          __break(1u);
LABEL_325:
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
        }
        Swift::UInt v80 = v8;
        *((void *)v223 + 1) = v127 + 1;
        *(double *)&long long v237 = v10;
        MEMORY[0x270FA5388](v132);
        Swift::String v133 = *(id *)&v10;
        swift_bridgeObjectRetain();
        uint64_t v134 = v216;
        specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v133, partial apply for specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:));
        if (v134)
        {

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        }

        swift_bridgeObjectRelease();
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        uint64_t v3 = 0;
LABEL_110:
        uint64_t v11 = (uint64_t)v220;
        double v10 = COERCE_DOUBLE(&v235);
        int64_t v20 = v226;
        Swift::UInt v8 = v80;
        if (v19) {
          continue;
        }
        goto LABEL_12;
      case 4:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        double v10 = v233;
        uint64_t v28 = v223;
        int64_t v135 = *((void *)v223 + 1);
        int64_t v136 = *((void *)v223 + 2);
        if (v135 >= v136)
        {
          Swift::UInt v192 = v8;
          int64_t v193 = v135 + 1;
          if (__OFADD__(v135, 1)) {
            goto LABEL_331;
          }
          if (v136 < v193)
          {
            id v207 = *(id *)&v233;
            Swift::String v194 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v193);
          }
          else
          {
            *((void *)v223 + 1) = v193;
            Swift::String v194 = (unsigned char *)(*v28 + v135);
            Swift::String v195 = *(id *)&v10;
          }
          uint64_t v137 = v3;
          *Swift::String v194 = 50;
          int64_t v138 = v28[1];
          Swift::UInt v8 = v192;
        }
        else
        {
          uint64_t v137 = v3;
          *(unsigned char *)(*(void *)v223 + v135) = 50;
          int64_t v138 = v135 + 1;
          v28[1] = v135 + 1;
          Swift::String v139 = *(id *)&v10;
        }
        uint64_t v140 = v219;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v141 = *(void *)(*(void *)v140 + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v141);
        uint64_t v142 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v141, v138);
        _ViewInputs.base.modify(v142, v143);
        if (__OFADD__(v138, 1)) {
          goto LABEL_321;
        }
        uint64_t v144 = (uint64_t)v223;
        *((void *)v223 + 1) = v138 + 1;
        CodableTextAttachment.encode(to:)(v144, *(uint64_t *)&v10);
        uint64_t v3 = v137;
        if (v137)
        {
LABEL_303:
          swift_release();

          goto LABEL_310;
        }
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        goto LABEL_123;
      case 5:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        double v90 = v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        double v91 = fabs(v233);
        BOOL v92 = v91 < 65536.0;
        uint64_t v93 = 57;
        uint64_t v94 = 61;
        goto LABEL_134;
      case 6:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        double v90 = v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        double v91 = fabs(v233);
        BOOL v92 = v91 < 65536.0;
        uint64_t v93 = 65;
        uint64_t v94 = 69;
        goto LABEL_134;
      case 7:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        double v90 = v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        double v91 = fabs(v233);
        BOOL v92 = v91 < 65536.0;
        uint64_t v93 = 73;
        uint64_t v94 = 77;
LABEL_134:
        if (v92) {
          Swift::UInt v153 = v94;
        }
        else {
          Swift::UInt v153 = v93;
        }
        ProtobufEncoder.encodeVarint(_:)(v153);
        if (v91 >= 65536.0)
        {
          ProtobufEncoder.encodeDouble(_:)(v90);
        }
        else
        {
          Swift::Float v154 = v90;
          ProtobufEncoder.encodeFloat(_:)(v154);
        }
        goto LABEL_212;
      case 8:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v155 = *(void *)&v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        uint64_t v28 = v223;
        int64_t v156 = *((void *)v223 + 1);
        int64_t v157 = *((void *)v223 + 2);
        if (v156 >= v157)
        {
          int64_t v202 = v156 + 1;
          if (__OFADD__(v156, 1)) {
            goto LABEL_334;
          }
          uint64_t v28 = v223;
          if (v157 < v202)
          {
            Swift::String v203 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v202);
          }
          else
          {
            *((void *)v223 + 1) = v202;
            Swift::String v203 = (unsigned char *)(*v28 + v156);
          }
          *Swift::String v203 = 80;
          uint64_t v11 = (uint64_t)v220;
          double v10 = COERCE_DOUBLE(&v235);
        }
        else
        {
          *(unsigned char *)(*(void *)v223 + v156) = 80;
          v28[1] = v156 + 1;
        }
        unint64_t v158 = (2 * v155) ^ (v155 >> 63);
        if (v158 > 0x7F)
        {
          char v168 = __clz(v158);
          uint64_t v160 = (((37 * (70 - v168)) >> 8)
                + (((70 - v168 - ((unsigned __int16)(37 * (70 - v168)) >> 8)) & 0xFE) >> 1)) >> 2;
          uint64_t v159 = v28[1];
        }
        else
        {
          uint64_t v159 = v28[1];
          if (v159 < v28[2]) {
            goto LABEL_153;
          }
          uint64_t v160 = 1;
        }
        int64_t v169 = v159 + v160;
        if (__OFADD__(v159, v160)) {
          goto LABEL_327;
        }
        if (v28[2] < v169)
        {
          Swift::String v170 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v169);
        }
        else
        {
          v28[1] = v169;
          Swift::String v170 = (unsigned char *)(*v28 + v159);
        }
        LOBYTE(v171) = v158 & 0x7F;
        if (v158 >= 0x80)
        {
          do
          {
            char v172 = v171 | 0x80;
            uint64_t v171 = (v158 >> 7) & 0x7F;
            *v170++ = v172;
            BOOL v173 = v158 >= 0x4000;
            v158 >>= 7;
          }
          while (v173);
        }
        goto LABEL_203;
      case 9:
        __swift_project_boxed_opaque_existential_1(&v235, v236);
        CGRect v65 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(void *)&long long v237 = 0;
        double v233 = 0.0;
        *(void *)&long long v231 = 0;
        v228[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v65, (uint64_t)&v237, (uint64_t)&v233, (uint64_t)&v231, (uint64_t)v228) & 1) == 0) {
          goto LABEL_130;
        }
        float v66 = *(double *)&v237;
        float v67 = v233;
        float v68 = *(double *)&v231;
        char v227 = 0;
        float v69 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v227, v66, v67, v68);
        float v71 = v70;
        float v73 = v72;
        float v75 = v74;
        swift_unknownObjectRelease();
        uint64_t v28 = v223;
        int64_t v76 = *((void *)v223 + 1);
        int64_t v77 = *((void *)v223 + 2);
        if (v76 < v77)
        {
          uint64_t v78 = *(void *)v223;
          char v79 = 90;
          goto LABEL_127;
        }
        int64_t v188 = v76 + 1;
        if (__OFADD__(v76, 1)) {
          goto LABEL_332;
        }
        if (v77 < v188)
        {
          Swift::String v189 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v188);
        }
        else
        {
          *((void *)v223 + 1) = v188;
          Swift::String v189 = (unsigned char *)(*v28 + v76);
        }
        *Swift::String v189 = 90;
        goto LABEL_128;
      case 10:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v87 = *(void *)&v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        uint64_t v28 = v223;
        int64_t v88 = *((void *)v223 + 1);
        int64_t v89 = *((void *)v223 + 2);
        if (v88 >= v89)
        {
          int64_t v199 = v88 + 1;
          if (__OFADD__(v88, 1)) {
            goto LABEL_335;
          }
          if (v89 < v199)
          {
            uint64_t v201 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v199);
          }
          else
          {
            Swift::String v200 = v223;
            *((void *)v223 + 1) = v199;
            uint64_t v201 = (unsigned char *)(*v200 + v88);
          }
          unsigned char *v201 = 96;
          uint64_t v11 = (uint64_t)v220;
          double v10 = COERCE_DOUBLE(&v235);
        }
        else
        {
          *(unsigned char *)(*(void *)v223 + v88) = 96;
          v28[1] = v88 + 1;
        }
        ProtobufEncoder.encodeVarint(_:)((2 * v87) ^ (v87 >> 63));
        goto LABEL_212;
      case 11:
        __swift_project_boxed_opaque_existential_1(&v235, v236);
        uint64_t v145 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
        *(void *)&long long v237 = 0;
        double v233 = 0.0;
        *(void *)&long long v231 = 0;
        v228[0] = 0;
        if ((CoreColorPlatformColorGetComponents(0, v145, (uint64_t)&v237, (uint64_t)&v233, (uint64_t)&v231, (uint64_t)v228) & 1) == 0)
        {
LABEL_130:

          swift_unknownObjectRelease();
          goto LABEL_213;
        }
        float v146 = *(double *)&v237;
        float v147 = v233;
        float v148 = *(double *)&v231;
        char v227 = 0;
        float v69 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v227, v146, v147, v148);
        float v71 = v149;
        float v73 = v150;
        float v75 = v151;
        swift_unknownObjectRelease();
        uint64_t v28 = v223;
        int64_t v76 = *((void *)v223 + 1);
        int64_t v152 = *((void *)v223 + 2);
        if (v76 >= v152)
        {
          int64_t v196 = v76 + 1;
          if (__OFADD__(v76, 1)) {
            goto LABEL_333;
          }
          if (v152 < v196)
          {
            BOOL v197 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v196);
          }
          else
          {
            *((void *)v223 + 1) = v196;
            BOOL v197 = (unsigned char *)(*v28 + v76);
          }
          *BOOL v197 = 106;
        }
        else
        {
          uint64_t v78 = *(void *)v223;
          char v79 = 106;
LABEL_127:
          *(unsigned char *)(v78 + v76) = v79;
          v28[1] = v76 + 1;
        }
LABEL_128:
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v69, v71, v73, v75);
        if (v3) {
          goto LABEL_308;
        }
        goto LABEL_212;
      case 12:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        double v10 = COERCE_DOUBLE(*(id *)&v233);
        double Offset = CoreShadowGetOffset();
        double v54 = v53;
        double BlurRadius = CoreShadowGetBlurRadius(*(void *)&v10);
        id v56 = (id)CoreShadowGetPlatformColor(*(void *)&v10, 0);
        double v57 = *(double *)&v56;
        if (Offset < 0.0 || v54 < 0.0)
        {
          double v58 = *(double *)&v56;
          double v57 = v10;
LABEL_180:

LABEL_181:
          goto LABEL_182;
        }
        if (BlurRadius < 0.0)
        {
          double v58 = v14;
          double v14 = v10;
          goto LABEL_180;
        }
        if (*(double *)&v56 == 0.0)
        {
          double v57 = v14;
          double v14 = v10;
          goto LABEL_181;
        }
        uint64_t v178 = v3;
        id v179 = v56;
        unint64_t v180 = specialized Color.Resolved.init(platformColor:)(v179);
        uint64_t v182 = v181;
        char v184 = v183;

        uint64_t v3 = v178;
        uint64_t v11 = (uint64_t)v220;

        if ((v184 & 1) == 0)
        {
          v228[1] = v180;
          v228[2] = v182;
          *(double *)&v228[3] = BlurRadius;
          *(double *)&v228[4] = Offset;
          *(double *)&v228[5] = v54;
          int v229 = 1056964608;
          char v230 = 0;
          specialized ProtobufEncoder.messageField<A>(_:_:)(14);
          if (v3) {
            goto LABEL_313;
          }
        }
LABEL_182:

        goto LABEL_224;
      case 13:

        outlined init with take of Any(&v235, &v237);
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          uint64_t v217 = *(void *)&v233;
          uint64_t v218 = v234;
        }
        goto LABEL_234;
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 21:
      case 33:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v233);
        type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        uint64_t v29 = MEMORY[0x263F8EE58];
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v239 = 0;
          long long v237 = 0u;
          long long v238 = 0u;
        }
        if (one-time initialization token for resolvableTextSegment == -1)
        {
          if (!*(void *)(v8 + 16)) {
            goto LABEL_230;
          }
        }
        else
        {
          swift_once();
          if (!*(void *)(v8 + 16))
          {
LABEL_230:
            long long v232 = 0u;
            long long v231 = 0u;
            goto LABEL_231;
          }
        }
        id v30 = (id)static NSAttributedStringKey.resolvableTextSegment;
        uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30);
        if (v32)
        {
          outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v31, (uint64_t)&v231);
        }
        else
        {
          long long v232 = 0u;
          long long v231 = 0u;
        }

        if (*((void *)&v232 + 1))
        {
          uint64_t v33 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
          int v34 = swift_dynamicCast();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v11, v34 ^ 1u, 1, v33);
          goto LABEL_232;
        }
LABEL_231:
        outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v231, (uint64_t)&lazy cache variable for type metadata for Any?, v29 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
        uint64_t v185 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 56))(v11, 1, 1, v185);
LABEL_232:
        specialized static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)((uint64_t)&v237, v11, (uint64_t)v223);
        double v10 = COERCE_DOUBLE(&v235);
        if (v3)
        {

          swift_release();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
          _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(v11, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
          return outlined destroy of AnyTrackedValue?((uint64_t)&v237, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(v11, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
        outlined destroy of AnyTrackedValue?((uint64_t)&v237, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation?, &lazy cache variable for type metadata for ResolvableStringAttributeRepresentation);
        goto LABEL_234;
      case 22:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v164 = v223;
        uint64_t v165 = *((void *)v223 + 1);
        int64_t v166 = v165 + 2;
        if (__OFADD__(v165, 2)) {
          goto LABEL_322;
        }
        Swift::UInt v62 = LOBYTE(v233);
        if (*((void *)v223 + 2) < v166)
        {
          uint64_t v63 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v166);
        }
        else
        {
          *((void *)v223 + 1) = v166;
          uint64_t v63 = (_WORD *)(*v164 + v165);
        }
        __int16 v64 = 424;
        goto LABEL_173;
      case 23:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v114 = v223;
        uint64_t v115 = *((void *)v223 + 1);
        int64_t v116 = v115 + 2;
        if (__OFADD__(v115, 2)) {
          goto LABEL_315;
        }
        Swift::UInt v62 = LOBYTE(v233);
        if (*((void *)v223 + 2) < v116)
        {
          uint64_t v63 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v116);
        }
        else
        {
          *((void *)v223 + 1) = v116;
          uint64_t v63 = (_WORD *)(*v114 + v115);
        }
        __int16 v64 = 432;
        goto LABEL_173;
      case 24:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v117 = v223;
        uint64_t v118 = *((void *)v223 + 1);
        int64_t v119 = v118 + 2;
        if (__OFADD__(v118, 2)) {
          goto LABEL_319;
        }
        double v120 = v233;
        if (*((void *)v223 + 2) < v119)
        {
          uint64_t v121 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v119);
          uint64_t v117 = v223;
        }
        else
        {
          *((void *)v223 + 1) = v119;
          uint64_t v121 = (_WORD *)(*v117 + v118);
        }
        _WORD *v121 = 441;
        uint64_t v122 = v117[1];
        int64_t v123 = v122 + 8;
        if (__OFADD__(v122, 8)) {
          goto LABEL_323;
        }
        if (v117[2] < v123)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v123) = v120;
        }
        else
        {
          v117[1] = v123;
          *(double *)(*v117 + v122) = v120;
        }
        goto LABEL_212;
      case 25:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        if (v233 == 0.0 && v234 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_211;
        }
        uint64_t v35 = 25;
        goto LABEL_210;
      case 26:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        if (v233 == 0.0 && v234 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_211;
        }
        uint64_t v35 = 26;
        goto LABEL_210;
      case 27:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if (swift_dynamicCast())
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            ProtobufEncoder.stringFieldAlways(_:_:)(24);
            if (v3)
            {

              swift_bridgeObjectRelease();
              goto LABEL_309;
            }
          }

          swift_bridgeObjectRelease();
          goto LABEL_213;
        }
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        if ((v233 != 0.0 || v234 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v35 = 24;
          goto LABEL_210;
        }
        goto LABEL_211;
      case 28:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if (swift_dynamicCast())
        {
          switch(LOBYTE(v233))
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                ProtobufEncoder.stringFieldAlways(_:_:)(28);
                if (v3) {
                  goto LABEL_307;
                }
              }
              swift_bridgeObjectRelease();
              break;
            default:
              goto LABEL_163;
          }
LABEL_223:

LABEL_224:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
          double v10 = COERCE_DOUBLE(&v235);
          goto LABEL_234;
        }
LABEL_163:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_223;
        }
        double v10 = COERCE_DOUBLE(&v235);
        if ((v233 != 0.0 || v234 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v35 = 28;
LABEL_210:
          ProtobufEncoder.stringFieldAlways(_:_:)(v35);
          if (v3)
          {
LABEL_307:
            swift_bridgeObjectRelease();
LABEL_308:

            goto LABEL_309;
          }
        }
LABEL_211:
        swift_bridgeObjectRelease();
LABEL_212:

LABEL_213:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
LABEL_234:
        int64_t v20 = v226;
        if (v19) {
          continue;
        }
LABEL_12:
        int64_t v26 = v20 + 1;
        if (!__OFADD__(v20, 1))
        {
          if (v26 >= v222) {
            goto LABEL_22;
          }
          unint64_t v27 = *(void *)(v221 + 8 * v26);
          if (v27) {
            goto LABEL_15;
          }
          v20 += 2;
          if (v26 + 1 >= v222) {
            goto LABEL_228;
          }
          unint64_t v27 = *(void *)(v221 + 8 * v20);
          if (v27) {
            goto LABEL_18;
          }
          if (v26 + 2 >= v222)
          {
LABEL_22:
            int64_t v226 = v20;
            goto LABEL_23;
          }
          unint64_t v27 = *(void *)(v221 + 8 * (v26 + 2));
          if (!v27)
          {
            int64_t v20 = v26 + 3;
            if (v26 + 3 >= v222)
            {
              int64_t v226 = v26 + 2;
              goto LABEL_23;
            }
            unint64_t v27 = *(void *)(v221 + 8 * v20);
            if (v27)
            {
LABEL_18:
              int64_t v26 = v20;
              goto LABEL_15;
            }
            while (1)
            {
              int64_t v26 = v20 + 1;
              if (__OFADD__(v20, 1)) {
                goto LABEL_326;
              }
              if (v26 >= v222) {
                break;
              }
              unint64_t v27 = *(void *)(v221 + 8 * v26);
              ++v20;
              if (v27) {
                goto LABEL_15;
              }
            }
            int64_t v26 = v215;
LABEL_228:
            int64_t v226 = v26;
LABEL_23:
            unint64_t v19 = 0;
            uint64_t v239 = 0;
            long long v237 = 0u;
            long long v238 = 0u;
            goto LABEL_24;
          }
          v26 += 2;
LABEL_15:
          unint64_t v19 = (v27 - 1) & v27;
          unint64_t v22 = __clz(__rbit64(v27)) + (v26 << 6);
          int64_t v226 = v26;
          goto LABEL_11;
        }
        __break(1u);
LABEL_313:

LABEL_309:
        swift_release();
LABEL_310:
        swift_bridgeObjectRelease();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
      case 29:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        unint64_t v158 = *(void *)&v233;
        if (v233 == 0.0) {
          goto LABEL_212;
        }
        uint64_t v28 = v223;
        uint64_t v161 = *((void *)v223 + 1);
        int64_t v162 = v161 + 2;
        if (__OFADD__(v161, 2)) {
          goto LABEL_325;
        }
        if (*((void *)v223 + 2) < v162)
        {
          uint64_t v163 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v162);
          uint64_t v28 = v223;
        }
        else
        {
          *((void *)v223 + 1) = v162;
          uint64_t v163 = (_WORD *)(*v28 + v161);
        }
        *uint64_t v163 = 472;
        if (v158 > 0x7F)
        {
          char v174 = __clz(v158);
          uint64_t v175 = (((37 * (70 - v174)) >> 8)
                + (((70 - v174 - ((unsigned __int16)(37 * (70 - v174)) >> 8)) & 0xFE) >> 1)) >> 2;
          uint64_t v159 = v28[1];
          int64_t v176 = v159 + v175;
          if (__OFADD__(v159, v175)) {
            goto LABEL_328;
          }
        }
        else
        {
          uint64_t v159 = v28[1];
          if (v159 < v28[2])
          {
LABEL_153:
            *(unsigned char *)(*v28 + v159) = v158;
            v28[1] = v159 + 1;
            goto LABEL_212;
          }
          int64_t v176 = v159 + 1;
          if (__OFADD__(v159, 1)) {
            goto LABEL_328;
          }
        }
        if (v28[2] < v176)
        {
          Swift::String v170 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v176);
        }
        else
        {
          v28[1] = v176;
          Swift::String v170 = (unsigned char *)(*v28 + v159);
        }
        LOBYTE(v171) = v158 & 0x7F;
        if (v158 >= 0x80)
        {
          do
          {
            char v177 = v171 | 0x80;
            uint64_t v171 = (v158 >> 7) & 0x7F;
            *v170++ = v177;
            BOOL v173 = v158 >= 0x4000;
            v158 >>= 7;
          }
          while (v173);
        }
LABEL_203:
        *Swift::String v170 = v171;
        goto LABEL_212;
      case 30:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        if (v233 == 0.0 && v234 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_211;
        }
        uint64_t v35 = 29;
        goto LABEL_210;
      case 31:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        if (v233 == 0.0 && v234 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_211;
        }
        uint64_t v35 = 30;
        goto LABEL_210;
      case 32:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        uint64_t v59 = v223;
        uint64_t v60 = *((void *)v223 + 1);
        int64_t v61 = v60 + 2;
        if (__OFADD__(v60, 2)) {
          goto LABEL_320;
        }
        Swift::UInt v62 = LOBYTE(v233);
        if (*((void *)v223 + 2) < v61)
        {
          uint64_t v63 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v61);
        }
        else
        {
          *((void *)v223 + 1) = v61;
          uint64_t v63 = (_WORD *)(*v59 + v60);
        }
        __int16 v64 = 640;
LABEL_173:
        *uint64_t v63 = v64;
        ProtobufEncoder.encodeVarint(_:)(v62);
        goto LABEL_212;
      case 34:
        outlined init with copy of Any((uint64_t)&v235, (uint64_t)&v237);
        type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_212;
        }
        char v36 = v223;
        uint64_t v37 = *((void *)v223 + 1);
        int64_t v38 = v37 + 2;
        if (__OFADD__(v37, 2)) {
          goto LABEL_316;
        }
        double v39 = v233;
        int64_t v40 = *((void *)v223 + 2);
        uint64_t v216 = v3;
        if (v40 < v38)
        {
          id v198 = *(id *)&v233;
          uint64_t v41 = (_WORD *)ProtobufEncoder.growBufferSlow(to:)(v38);
        }
        else
        {
          *((void *)v223 + 1) = v38;
          uint64_t v41 = (_WORD *)(*v36 + v37);
          id v42 = *(id *)&v39;
        }
        _WORD *v41 = 674;
        uint64_t v43 = v36[1];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v44 = *(void *)(v36[3] + 16);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
        uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v43);
        _ViewInputs.base.modify(v45, v46);
        if (__OFADD__(v43, 1)) {
          goto LABEL_324;
        }
        v36[1] = v43 + 1;
        id v47 = objc_msgSend(*(id *)&v39, sel_imageContent);
        uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v50 = v49;

        ProtobufEncoder.encodeVarint(_:)(0xAuLL);
        uint64_t v51 = v216;
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v48, v50);
        if (v51)
        {
          outlined consume of Data._Representation(v48, v50);
          swift_release();

          swift_bridgeObjectRelease();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        }
        outlined consume of Data._Representation(v48, v50);
        ProtobufEncoder.endLengthDelimited()();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v235);
        uint64_t v3 = 0;
LABEL_123:
        uint64_t v11 = (uint64_t)v220;
        double v10 = COERCE_DOUBLE(&v235);
        goto LABEL_234;
      default:
        goto LABEL_337;
    }
  }
}

uint64_t ProtobufEncoder.preferredBundleLanguage.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 32);
  if (one-time initialization token for preferredBundleLanguageKey != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    if (swift_dynamicCast()) {
      return v10;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
    return 0;
  }
}

uint64_t CodableAttributedString.Range.EncodingWrapper.encode(to:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 24) + 24))(v2, a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAttributedString.Range.EncodingWrapper<A>(uint64_t a1, uint64_t a2)
{
  return CodableAttributedString.Range.EncodingWrapper.encode(to:)(a1, a2);
}

uint64_t implicit closure #1 in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)()
{
  _StringGuts.grow(_:)(34);
  v0._unint64_t object = (void *)0x800000024621C0E0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  type metadata accessor for NSAttributedStringKey(0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._unint64_t object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t encode #1 <A>(_:) in static CodableAttributedString.Range.encodeResolvable(_:textSegment:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CodableAttributedString.Range.EncodingWrapper();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  double v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a4, v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v9, a4);
  swift_getWitnessTable();
  ProtobufEncoder.codableField<A>(_:_:)(a3, (uint64_t)v14, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void CodableAttributedString.Range.init(from:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x270FA5388](v6 - 8);
  Swift::String v273 = (char *)&v266 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v272 = *(void *)(v275 - 8);
  MEMORY[0x270FA5388](v275);
  uint64_t v271 = (uint64_t)&v266 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v266 - v10;
  uint64_t v285 = 0;
  uint64_t v286 = 0;
  __int16 v287 = (void *)MEMORY[0x263F8EE80];
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 48);
  long long v281 = *(_OWORD *)a1;
  *(void *)&long long v282 = v12;
  *((void *)&v282 + 1) = v13;
  long long v283 = *(_OWORD *)(a1 + 32);
  uint64_t v284 = v14;
  id countAndFlagsBits = (id)ProtobufDecoder.preferredBundleLanguage.getter();
  unint64_t object = v15;
  char v288 = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  unint64_t v18 = *(void *)(a1 + 16);
  if (v17 >= v18)
  {
LABEL_218:
    *(void *)(a1 + 24) = 0;
    if (object)
    {
      long long v232 = (void *)*MEMORY[0x263F081E8];
      *((void *)&v282 + 1) = MEMORY[0x263F8D310];
      *(void *)&long long v281 = countAndFlagsBits;
      *((void *)&v281 + 1) = object;
      outlined init with take of Any(&v281, v280);
      id v233 = v232;
      uint64_t v234 = v287;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::String v279 = v234;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v280, v233, isUniquelyReferenced_nonNull_native);
      __int16 v287 = v279;

      swift_bridgeObjectRelease();
    }
    uint64_t v236 = v286;
    if (__OFADD__(v285, v286))
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
LABEL_223:
      swift_allocError();
      swift_willThrow();
      goto LABEL_232;
    }
    swift_beginAccess();
    long long v237 = v288;
    if (!v288)
    {
      Swift::String v245 = v287;
LABEL_241:

      *a2 = v285;
      a2[1] = v236;
      a2[2] = (uint64_t)v245;
      return;
    }
    uint64_t v238 = one-time initialization token for resolvableTextSegment;
    uint64_t v239 = v288;
    if (v238 != -1) {
      swift_once();
    }
    long long v240 = v287;
    uint64_t v241 = v275;
    if (v287[2])
    {
      id v242 = (id)static NSAttributedStringKey.resolvableTextSegment;
      uint64_t v243 = specialized __RawDictionaryStorage.find<A>(_:)(v242);
      if (v244)
      {
        outlined init with copy of Any(v240[7] + 32 * v243, (uint64_t)&v281);
      }
      else
      {
        long long v281 = 0u;
        long long v282 = 0u;
      }
      uint64_t v246 = (uint64_t)v273;

      if (*((void *)&v282 + 1))
      {
        int v247 = swift_dynamicCast();
        uint64_t v248 = v272;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v272 + 56))(v246, v247 ^ 1u, 1, v241);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48))(v246, 1, v241) != 1)
        {
          uint64_t v249 = v271;
          _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(v246, v271, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          objc_storeStrong((id *)(v249 + *(int *)(v241 + 20)), v237);
          uint64_t v250 = (void *)static NSAttributedStringKey.resolvableTextSegment;
          *((void *)&v282 + 1) = v241;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v281);
          outlined init with copy of ResolvableTextSegmentAttribute.Value(v249, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          outlined init with take of Any(&v281, v280);
          id v252 = v250;
          unint64_t v253 = v287;
          char v254 = swift_isUniquelyReferenced_nonNull_native();
          Swift::String v278 = v253;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v280, v252, v254);
          Swift::String v245 = v278;

          swift_bridgeObjectRelease();
          _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(v249, type metadata accessor for ResolvableTextSegmentAttribute.Value);
          uint64_t v236 = v286;
          goto LABEL_241;
        }
LABEL_240:
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(v246, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
        Swift::String v277 = a2;
        Swift::String v255 = (void *)static NSAttributedStringKey.resolvableTextSegment;
        uint64_t v236 = v286;
        *((void *)&v282 + 1) = v241;
        Swift::String v256 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v281);
        _sypSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8E0F8]);
        uint64_t v257 = swift_allocObject();
        *(_OWORD *)(v257 + 16) = xmmword_2461B9DC0;
        id v258 = v239;
        id countAndFlagsBits = v255;
        uint64_t v259 = MEMORY[0x263F8EE78];
        unint64_t v260 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v261 = specialized Dictionary.init(dictionaryLiteral:)(v259);
        uint64_t v262 = v260;
        a2 = v277;
        ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(0, v236, v262, v261, (int64_t *)(v257 + 32));
        UUID.init()();
        *(uint64_t *)((char *)v256 + *(int *)(v241 + 20)) = (uint64_t)v258;
        *(uint64_t *)((char *)v256 + *(int *)(v241 + 24)) = v257;
        outlined init with take of Any(&v281, v280);
        Swift::String v263 = v287;
        char v264 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v278 = v263;
        Swift::String v265 = countAndFlagsBits;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v280, countAndFlagsBits, v264);
        Swift::String v245 = v278;

        swift_bridgeObjectRelease();
        goto LABEL_241;
      }
    }
    else
    {
      long long v281 = 0u;
      long long v282 = 0u;
      uint64_t v246 = (uint64_t)v273;
    }
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v281, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v272 + 56))(v246, 1, 1, v241);
    goto LABEL_240;
  }
  Swift::String v269 = v11;
  unint64_t v19 = (void *)(a1 + 40);
  Swift::String v268 = @"UIAccessibilityTokenDurationTimeMMSS";
  id v267 = (id)*MEMORY[0x263F81498];
  Swift::String v274 = (void *)(a1 + 40);
  Swift::String v277 = (uint64_t *)&v287;
  while (2)
  {
    unint64_t v21 = *(void *)(a1 + 24);
    if (v21)
    {
      unint64_t v22 = *(void *)(a1 + 32);
      if (v17 < v22) {
        goto LABEL_12;
      }
      if (v22 < v17) {
        goto LABEL_230;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v23 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_231;
    }
    unint64_t v21 = v23;
    if (v23 < 8)
    {
LABEL_230:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      goto LABEL_231;
    }
LABEL_12:
    switch(v21 >> 3)
    {
      case 1uLL:
        if ((v21 & 7) == 0) {
          goto LABEL_19;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v24 < 0) {
          goto LABEL_263;
        }
        unint64_t v25 = *(void *)(a1 + 8) + v24;
        if (v18 < v25) {
          goto LABEL_230;
        }
        *(void *)(a1 + 24) = 8;
        *(void *)(a1 + 32) = v25;
LABEL_19:
        uint64_t v26 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v26 < 0) {
          goto LABEL_249;
        }
        uint64_t v285 = v26;
        goto LABEL_5;
      case 2uLL:
        if ((v21 & 7) == 0) {
          goto LABEL_94;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        uint64_t v127 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v127 < 0) {
          goto LABEL_264;
        }
        unint64_t v128 = *(void *)(a1 + 8) + v127;
        if (v18 < v128) {
          goto LABEL_230;
        }
        *(void *)(a1 + 24) = 16;
        *(void *)(a1 + 32) = v128;
LABEL_94:
        uint64_t v129 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v129 < 0) {
          goto LABEL_250;
        }
        uint64_t v286 = v129;
        goto LABEL_5;
      case 3uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        int64_t v77 = (void *)*v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
        }
        unint64_t v79 = v77[2];
        unint64_t v78 = v77[3];
        if (v79 >= v78 >> 1) {
          int64_t v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v78 > 1), v79 + 1, 1, v77);
        }
        v77[2] = v79 + 1;
        v77[v79 + 4] = v18;
        *(void *)(a1 + 40) = v77;
        uint64_t v80 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v80 < 0) {
          goto LABEL_247;
        }
        unint64_t v81 = *(void *)(a1 + 8) + v80;
        if (v18 < v81) {
          goto LABEL_230;
        }
        Swift::String v270 = object;
        *(void *)(a1 + 16) = v81;
        uint64_t v82 = *(void *)(a1 + 48);
        swift_bridgeObjectRetain_n();
        uint64_t v83 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((id *)a1, v82);
        swift_bridgeObjectRelease();
        if (!*(void *)(*v19 + 16)) {
          goto LABEL_257;
        }
        uint64_t v84 = specialized Array._customRemoveLast()();
        if (!v84) {
          uint64_t v84 = specialized Array.remove(at:)(*(void *)(*v19 + 16) - 1);
        }
        *(void *)(a1 + 16) = v84;
        if (one-time initialization token for kitFont != -1) {
          swift_once();
        }
        uint64_t v85 = (void *)static NSAttributedStringKey.kitFont;
        type metadata accessor for CTFontRef(0);
        *((void *)&v282 + 1) = v86;
        *(void *)&long long v281 = v83;
        outlined init with take of Any(&v281, v280);
        id v87 = v85;
        int64_t v88 = v83;
        int64_t v89 = v287;
        char v90 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v89;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
        uint64_t v93 = v89[2];
        BOOL v94 = (v91 & 1) == 0;
        uint64_t v95 = v93 + v94;
        if (!__OFADD__(v93, v94)) {
          goto LABEL_169;
        }
        goto LABEL_259;
      case 4uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        specialized ProtobufDecoder.decodeMessage<A>()();
        if (v3) {
          goto LABEL_231;
        }
        float v158 = v154;
        float v159 = v155;
        float v160 = v156;
        float v161 = v157;
        if (one-time initialization token for kitForegroundColor != -1) {
          swift_once();
        }
        uint64_t v162 = one-time initialization token for cache;
        id v130 = (id)static NSAttributedStringKey.kitForegroundColor;
        if (v162 != -1) {
          swift_once();
        }
        id v163 = (id)specialized ObjectCache.subscript.getter((uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), v158, v159, v160, v161);
        uint64_t v164 = (unint64_t *)&lazy cache variable for type metadata for NSObject;
        goto LABEL_147;
      case 5uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        int64_t v167 = (void *)*v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v167[2] + 1, 1, v167);
        }
        unint64_t v169 = v167[2];
        unint64_t v168 = v167[3];
        if (v169 >= v168 >> 1) {
          int64_t v167 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v168 > 1), v169 + 1, 1, v167);
        }
        v167[2] = v169 + 1;
        v167[v169 + 4] = v18;
        *(void *)(a1 + 40) = v167;
        uint64_t v170 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v170 < 0) {
          goto LABEL_248;
        }
        unint64_t v171 = *(void *)(a1 + 8) + v170;
        if (v18 < v171) {
          goto LABEL_230;
        }
        Swift::String v270 = object;
        *(void *)(a1 + 16) = v171;
        id v172 = specialized CodableNSParagraphStyle.init(from:)((void *)a1);
        if (!*(void *)(*v19 + 16)) {
          goto LABEL_258;
        }
        BOOL v173 = v172;
        uint64_t v174 = specialized Array._customRemoveLast()();
        if (!v174) {
          uint64_t v174 = specialized Array.remove(at:)(*(void *)(*v19 + 16) - 1);
        }
        *(void *)(a1 + 16) = v174;
        if (one-time initialization token for kitParagraphStyle != -1) {
          swift_once();
        }
        uint64_t v175 = (void *)static NSAttributedStringKey.kitParagraphStyle;
        *((void *)&v282 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
        *(void *)&long long v281 = v173;
        outlined init with take of Any(&v281, v280);
        id v87 = v175;
        int64_t v88 = v173;
        int64_t v89 = v287;
        char v90 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v89;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
        uint64_t v176 = v89[2];
        BOOL v177 = (v91 & 1) == 0;
        uint64_t v95 = v176 + v177;
        if (!__OFADD__(v176, v177)) {
          goto LABEL_169;
        }
        goto LABEL_260;
      case 6uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_231;
        }
        id v96 = specialized CodableTextAttachment.init(from:)((void *)a1);
        uint64_t v3 = 0;
        float v97 = (void *)*v19;
        if (!*(void *)(*v19 + 16)) {
          goto LABEL_251;
        }
        float v98 = v96;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v99 = v97[2];
          if (!v99) {
            goto LABEL_254;
          }
        }
        else
        {
          float v97 = specialized _ArrayBuffer._consumeAndCreateNew()(v97);
          uint64_t v99 = v97[2];
          if (!v99) {
            goto LABEL_254;
          }
        }
        Swift::String v270 = object;
        uint64_t v100 = v99 - 1;
        uint64_t v101 = v97[v100 + 4];
        v97[2] = v100;
        *(void *)(a1 + 40) = v97;
        *(void *)(a1 + 16) = v101;
        if (one-time initialization token for kitAttachment != -1) {
          swift_once();
        }
        float v102 = (void *)static NSAttributedStringKey.kitAttachment;
        *((void *)&v282 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
        *(void *)&long long v281 = v98;
        outlined init with take of Any(&v281, v280);
        id v103 = v102;
        id v104 = v98;
        Swift::Float v105 = v287;
        char v106 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v105;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v103);
        uint64_t v109 = v105[2];
        BOOL v110 = (v107 & 1) == 0;
        uint64_t v111 = v109 + v110;
        if (__OFADD__(v109, v110)) {
          goto LABEL_256;
        }
        char v112 = v107;
        if (v105[3] >= v111)
        {
          if ((v106 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v111, v106);
          uint64_t v113 = specialized __RawDictionaryStorage.find<A>(_:)(v103);
          if ((v112 & 1) != (v114 & 1)) {
            goto LABEL_269;
          }
          unint64_t v108 = v113;
        }
        char v227 = v279;
        if (v112)
        {
          Swift::String v228 = (_OWORD *)(v279[7] + 32 * v108);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v228);
          outlined init with take of Any(v280, v228);
        }
        else
        {
          v279[(v108 >> 6) + 8] |= 1 << v108;
          *(void *)(v227[6] + 8 * v108) = v103;
          outlined init with take of Any(v280, (_OWORD *)(v227[7] + 32 * v108));
          uint64_t v229 = v227[2];
          BOOL v56 = __OFADD__(v229, 1);
          uint64_t v230 = v229 + 1;
          if (v56) {
            goto LABEL_267;
          }
          v227[2] = v230;
          id v231 = v103;
        }
        __int16 v287 = v227;

        swift_bridgeObjectRelease();
        unint64_t object = v270;
        goto LABEL_215;
      case 7uLL:
        if (one-time initialization token for kitBaselineOffset != -1) {
          swift_once();
        }
        *(void *)&v280[0] = v21;
        id v130 = (id)static NSAttributedStringKey.kitBaselineOffset;
        double v131 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v280);
        uint64_t v3 = v132;
        if (v132) {
          goto LABEL_242;
        }
        *((void *)&v282 + 1) = MEMORY[0x263F8EF38];
        *(double *)&long long v281 = v131;
        outlined init with take of Any(&v281, v280);
        Swift::String v133 = v287;
        char v134 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v133;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
        uint64_t v137 = v133[2];
        BOOL v138 = (v135 & 1) == 0;
        uint64_t v139 = v137 + v138;
        if (__OFADD__(v137, v138)) {
          goto LABEL_245;
        }
        char v140 = v135;
        if (v133[3] >= v139)
        {
          if ((v134 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v139, v134);
          uint64_t v141 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
          if ((v140 & 1) != (v142 & 1)) {
            goto LABEL_269;
          }
          unint64_t v136 = v141;
        }
        uint64_t v218 = v279;
        if (v140) {
          goto LABEL_197;
        }
        v279[(v136 >> 6) + 8] |= 1 << v136;
        *(void *)(v218[6] + 8 * v136) = v130;
        outlined init with take of Any(v280, (_OWORD *)(v218[7] + 32 * v136));
        uint64_t v219 = v218[2];
        BOOL v56 = __OFADD__(v219, 1);
        uint64_t v220 = v219 + 1;
        if (!v56) {
          goto LABEL_199;
        }
        goto LABEL_261;
      case 8uLL:
        if (one-time initialization token for kitKern != -1) {
          swift_once();
        }
        *(void *)&v280[0] = v21;
        id v130 = (id)static NSAttributedStringKey.kitKern;
        double v143 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v280);
        uint64_t v3 = v144;
        if (v144) {
          goto LABEL_242;
        }
        *((void *)&v282 + 1) = MEMORY[0x263F8EF38];
        *(double *)&long long v281 = v143;
        outlined init with take of Any(&v281, v280);
        uint64_t v145 = v287;
        char v146 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v145;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
        uint64_t v148 = v145[2];
        BOOL v149 = (v147 & 1) == 0;
        uint64_t v150 = v148 + v149;
        if (__OFADD__(v148, v149))
        {
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
          __break(1u);
LABEL_269:
          type metadata accessor for NSAttributedStringKey(0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x245AD8EF0);
        }
        char v151 = v147;
        if (v145[3] >= v150)
        {
          if ((v146 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v150, v146);
          uint64_t v152 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
          if ((v151 & 1) != (v153 & 1)) {
            goto LABEL_269;
          }
          unint64_t v136 = v152;
        }
        uint64_t v218 = v279;
        if (v151)
        {
LABEL_197:
          Swift::UInt v221 = (_OWORD *)(v218[7] + 32 * v136);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v221);
          outlined init with take of Any(v280, v221);
        }
        else
        {
          v279[(v136 >> 6) + 8] |= 1 << v136;
          *(void *)(v218[6] + 8 * v136) = v130;
          outlined init with take of Any(v280, (_OWORD *)(v218[7] + 32 * v136));
          uint64_t v222 = v218[2];
          BOOL v56 = __OFADD__(v222, 1);
          uint64_t v220 = v222 + 1;
          if (v56) {
            goto LABEL_262;
          }
LABEL_199:
          v218[2] = v220;
          id v223 = v130;
        }
        __int16 v287 = v218;

        swift_bridgeObjectRelease();
LABEL_215:
        unint64_t v19 = v274;
        goto LABEL_5;
      case 9uLL:
        if (one-time initialization token for kitTracking != -1) {
          swift_once();
        }
        *(void *)&v280[0] = v21;
        id v130 = (id)static NSAttributedStringKey.kitTracking;
        double v186 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)v280);
        uint64_t v3 = v187;
        if (!v187)
        {
          *((void *)&v282 + 1) = MEMORY[0x263F8EF38];
          *(double *)&long long v281 = v186;
          outlined init with take of Any(&v281, v280);
          int64_t v188 = v287;
          char v189 = swift_isUniquelyReferenced_nonNull_native();
          Swift::String v279 = v188;
          __int16 v287 = (void *)0x8000000000000000;
          unint64_t v191 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
          uint64_t v192 = v188[2];
          BOOL v193 = (v190 & 1) == 0;
          uint64_t v194 = v192 + v193;
          if (__OFADD__(v192, v193)) {
            goto LABEL_246;
          }
          char v195 = v190;
          if (v188[3] >= v194)
          {
            if ((v189 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v194, v189);
            uint64_t v196 = specialized __RawDictionaryStorage.find<A>(_:)(v130);
            if ((v195 & 1) != (v197 & 1)) {
              goto LABEL_269;
            }
            unint64_t v191 = v196;
          }
          unint64_t v19 = v274;
          uint64_t v224 = v279;
          if (v195)
          {
            Swift::String v225 = (_OWORD *)(v279[7] + 32 * v191);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v225);
            outlined init with take of Any(v280, v225);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v191, (uint64_t)v130, v280, v279);
            id v226 = v130;
          }
          __int16 v287 = v224;
LABEL_207:

          swift_bridgeObjectRelease();
LABEL_5:
          unint64_t v17 = *(void *)(a1 + 8);
          unint64_t v18 = *(void *)(a1 + 16);
          if (v17 >= v18) {
            goto LABEL_218;
          }
          continue;
        }
LABEL_242:

LABEL_231:
        swift_bridgeObjectRelease();
LABEL_232:

        swift_bridgeObjectRelease();
        return;
      case 0xAuLL:
        if ((v21 & 7) == 0) {
          goto LABEL_143;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        uint64_t v178 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v178 < 0) {
          goto LABEL_265;
        }
        unint64_t v179 = *(void *)(a1 + 8) + v178;
        if (v18 < v179) {
          goto LABEL_230;
        }
        *(void *)(a1 + 24) = 80;
        *(void *)(a1 + 32) = v179;
LABEL_143:
        uint64_t v180 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        uint64_t v181 = v180;
        if (one-time initialization token for kitStrikethroughStyle != -1) {
          swift_once();
        }
        uint64_t v182 = (void *)static NSAttributedStringKey.kitStrikethroughStyle;
        id v183 = objc_allocWithZone(NSNumber);
        id v130 = v182;
        id v163 = objc_msgSend(v183, sel_initWithInteger_, -(v181 & 1) ^ (v181 >> 1));
        uint64_t v164 = &lazy cache variable for type metadata for NSNumber;
LABEL_147:
        *((void *)&v282 + 1) = type metadata accessor for CAPresentationModifier(0, v164);
        *(void *)&long long v281 = v163;
        outlined init with take of Any(&v281, v280);
        char v184 = v287;
        char v185 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v184;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v280, v130, v185);
        __int16 v287 = v279;
        goto LABEL_207;
      case 0xBuLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_231;
        }
        uint64_t v3 = 0;
        float v47 = specialized Color.Resolved.init(from:)((void *)a1);
        float v49 = v48;
        float v51 = v50;
        float v53 = v52;
        if (!specialized Array._getCount()(*v19)) {
          goto LABEL_252;
        }
        uint64_t v54 = specialized Array._customRemoveLast()();
        if (v54) {
          goto LABEL_40;
        }
        uint64_t v55 = specialized Array._getCount()(*v19);
        BOOL v56 = __OFSUB__(v55, 1);
        unint64_t v57 = v55 - 1;
        if (v56) {
          goto LABEL_268;
        }
        uint64_t v54 = specialized Array.remove(at:)(v57);
LABEL_40:
        *(void *)(a1 + 16) = v54;
        double v58 = NSAttributedStringKey.kitStrikethroughStyle.unsafeMutableAddressor();
LABEL_45:
        id v68 = (id)*v58;
        uint64_t v69 = Color.Resolved.kitColor.getter(v47, v49, v51, v53);
        *((void *)&v282 + 1) = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        *(void *)&long long v281 = v69;
        id v34 = v68;
        goto LABEL_183;
      case 0xCuLL:
        if ((v21 & 7) == 0) {
          goto LABEL_83;
        }
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        uint64_t v115 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        if (v115 < 0) {
          goto LABEL_266;
        }
        unint64_t v116 = *(void *)(a1 + 8) + v115;
        if (v18 < v116) {
          goto LABEL_230;
        }
        *(void *)(a1 + 24) = 96;
        *(void *)(a1 + 32) = v116;
LABEL_83:
        uint64_t v117 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_231;
        }
        uint64_t v118 = -(v117 & 1) ^ (v117 >> 1);
        int64_t v119 = (void *)*NSAttributedStringKey.kitUnderlineStyle.unsafeMutableAddressor();
        uint64_t v120 = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
        ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
        id v122 = v119;
        id v123 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithInteger_, v118);
        *((void *)&v282 + 1) = v120;
        *(void *)&long long v281 = v123;
        id v34 = v122;
        goto LABEL_183;
      case 0xDuLL:
        specialized ProtobufDecoder.messageField<A>(_:)(v21);
        if (v3) {
          goto LABEL_231;
        }
        float v47 = v64;
        float v49 = v65;
        float v51 = v66;
        float v53 = v67;
        double v58 = NSAttributedStringKey.kitUnderlineColor.unsafeMutableAddressor();
        goto LABEL_45;
      case 0xEuLL:
        specialized ProtobufDecoder.messageField<A>(_:)(v21, (unint64_t)&v281);
        if (v3) {
          goto LABEL_231;
        }
        Dictionary<>.setShadow(shadowStyle:)((uint64_t)&v281);
        goto LABEL_5;
      case 0xFuLL:
        swift_bridgeObjectRelease();
        *(void *)&long long v281 = v21;
        Swift::String v165 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v166;
        if (v166) {
          goto LABEL_232;
        }
        unint64_t object = v165._object;
        id countAndFlagsBits = (id)v165._countAndFlagsBits;
        goto LABEL_5;
      case 0x10uLL:
        unint64_t v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>;
        uint64_t v28 = &protocol witness table for ResolvableDateInterval;
        uint64_t v29 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        id v30 = type metadata accessor for ResolvableDateInterval;
        goto LABEL_157;
      case 0x11uLL:
        unint64_t v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>;
        uint64_t v28 = &protocol witness table for ResolvableAbsoluteDate;
        uint64_t v29 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        id v30 = type metadata accessor for ResolvableAbsoluteDate;
        goto LABEL_157;
      case 0x12uLL:
        unint64_t v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>;
        uint64_t v28 = &protocol witness table for ResolvableCurrentDate;
        uint64_t v29 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        id v30 = type metadata accessor for ResolvableCurrentDate;
        goto LABEL_157;
      case 0x13uLL:
        unint64_t v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>;
        uint64_t v28 = &protocol witness table for ResolvableTimer;
        uint64_t v29 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        id v30 = type metadata accessor for ResolvableTimer;
        goto LABEL_157;
      case 0x15uLL:
        *(void *)&long long v281 = v21;
        Swift::Bool v70 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v71;
        if (v71) {
          goto LABEL_231;
        }
        Swift::Bool v72 = v70;
        unint64_t v73 = 0xD000000000000029;
        float v74 = "UIAccessibilitySpeechAttributePunctuation";
        goto LABEL_162;
      case 0x16uLL:
        *(void *)&long long v281 = v21;
        Swift::Bool v199 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v200;
        if (v200) {
          goto LABEL_231;
        }
        Swift::Bool v72 = v199;
        unint64_t v73 = 0xD000000000000026;
        float v74 = "UIAccessibilitySpeechAttributeSpellOut";
LABEL_162:
        id v34 = (id)MEMORY[0x24C522820](v73, (unint64_t)(v74 - 32) | 0x8000000000000000);
        *((void *)&v282 + 1) = MEMORY[0x263F8D4F8];
        LOBYTE(v281) = v72;
        goto LABEL_183;
      case 0x17uLL:
        *(void *)&long long v281 = v21;
        double v31 = ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v32;
        if (v32) {
          goto LABEL_231;
        }
        double v33 = v31;
        id v34 = (id)MEMORY[0x24C522820](0xD000000000000023, 0x800000024621B460);
        *((void *)&v282 + 1) = MEMORY[0x263F8D538];
        *(double *)&long long v281 = v33;
        goto LABEL_183;
      case 0x18uLL:
        *(void *)&long long v281 = v21;
        Swift::String v75 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v76;
        if (v76) {
          goto LABEL_231;
        }
        uint64_t v37 = v75._countAndFlagsBits;
        int64_t v38 = v75._object;
        unint64_t v39 = 0xD000000000000032;
        int64_t v40 = "UIAccessibilitySpeechAttributeAnnouncementPriority";
        goto LABEL_87;
      case 0x19uLL:
        *(void *)&long long v281 = v21;
        Swift::String v35 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v36;
        if (v36) {
          goto LABEL_231;
        }
        uint64_t v37 = v35._countAndFlagsBits;
        int64_t v38 = v35._object;
        unint64_t v39 = 0xD000000000000026;
        int64_t v40 = "UIAccessibilitySpeechAttributeLanguage";
        goto LABEL_87;
      case 0x1AuLL:
        *(void *)&long long v281 = v21;
        Swift::String v124 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v125;
        if (v125) {
          goto LABEL_231;
        }
        uint64_t v37 = v124._countAndFlagsBits;
        int64_t v38 = v124._object;
        unint64_t v39 = 0xD000000000000029;
        int64_t v40 = "UIAccessibilitySpeechAttributeIPANotation";
LABEL_87:
        unint64_t v126 = (unint64_t)(v40 - 32) | 0x8000000000000000;
        goto LABEL_178;
      case 0x1BuLL:
        *(void *)&long long v281 = v21;
        Swift::UInt v41 = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v42;
        if (v42) {
          goto LABEL_231;
        }
        Swift::UInt v43 = v41;
        id v34 = (id)MEMORY[0x24C522820](0xD000000000000028, 0x800000024621B430);
        *((void *)&v282 + 1) = MEMORY[0x263F8D9D0];
        *(void *)&long long v281 = v43;
        goto LABEL_183;
      case 0x1CuLL:
        *(void *)&long long v281 = v21;
        Swift::String v211 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v212;
        if (v212) {
          goto LABEL_231;
        }
        uint64_t v37 = v211._countAndFlagsBits;
        int64_t v38 = v211._object;
        unint64_t v126 = 0x800000024621B520;
        unint64_t v39 = 0xD000000000000023;
LABEL_178:
        id v34 = (id)MEMORY[0x24C522820](v39, v126);
        *((void *)&v282 + 1) = MEMORY[0x263F8D310];
        *(void *)&long long v281 = v37;
        *((void *)&v281 + 1) = v38;
        goto LABEL_183;
      case 0x1DuLL:
        *(void *)&long long v281 = v21;
        Swift::String v213 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v214;
        if (v214) {
          goto LABEL_231;
        }
        uint64_t v61 = v213._countAndFlagsBits;
        Swift::UInt v62 = v213._object;
        uint64_t v63 = NSAttributedStringKey.coreAXLabel.unsafeMutableAddressor();
        goto LABEL_181;
      case 0x1EuLL:
        *(void *)&long long v281 = v21;
        Swift::String v59 = ProtobufDecoder.stringField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v60;
        if (v60) {
          goto LABEL_231;
        }
        uint64_t v61 = v59._countAndFlagsBits;
        Swift::UInt v62 = v59._object;
        uint64_t v63 = NSAttributedStringKey._textScale.unsafeMutableAddressor();
LABEL_181:
        uint64_t v46 = (void *)*v63;
        *((void *)&v282 + 1) = MEMORY[0x263F8D310];
        *(void *)&long long v281 = v61;
        *((void *)&v281 + 1) = v62;
        goto LABEL_182;
      case 0x1FuLL:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type CodableAttributedString.Range.Error and conformance CodableAttributedString.Range.Error();
        goto LABEL_223;
      case 0x20uLL:
        *(void *)&long long v281 = v21;
        Swift::Bool v44 = ProtobufDecoder.BOOLField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
        uint64_t v3 = v45;
        if (v45) {
          goto LABEL_231;
        }
        *((void *)&v282 + 1) = MEMORY[0x263F8D4F8];
        LOBYTE(v281) = v44;
        uint64_t v46 = v268;
LABEL_182:
        id v34 = v46;
LABEL_183:
        specialized Dictionary.subscript.setter((uint64_t)&v281, v34);
        goto LABEL_5;
      case 0x21uLL:
        unint64_t v27 = &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>;
        uint64_t v28 = &protocol witness table for ResolvableProgress;
        uint64_t v29 = specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:);
        id v30 = type metadata accessor for ResolvableProgress;
LABEL_157:
        uint64_t v198 = v3;
        specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(a1, v21, (uint64_t)&v285, &v288, (void (*)(void *__return_ptr))v29, (uint64_t)v27, (uint64_t)v30, (uint64_t)v28);
        goto LABEL_158;
      case 0x22uLL:
        uint64_t v215 = (uint64_t)v269;
        specialized ProtobufDecoder.codableField<A>(_:)(v21, (uint64_t)v269);
        if (v3) {
          goto LABEL_231;
        }
        uint64_t v216 = (void *)*NSAttributedStringKey.resolvableTextSegment.unsafeMutableAddressor();
        *((void *)&v282 + 1) = v275;
        uint64_t v217 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v281);
        outlined init with copy of ResolvableTextSegmentAttribute.Value(v215, (uint64_t)v217, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        specialized Dictionary.subscript.setter((uint64_t)&v281, v216);
        _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0(v215, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        goto LABEL_5;
      case 0x23uLL:
        uint64_t v198 = v3;
        specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(a1, v21, (uint64_t)&v285, &v288);
        goto LABEL_158;
      case 0x24uLL:
        if ((v21 & 7) != 2) {
          goto LABEL_230;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_231;
        }
        Swift::String v270 = object;
        uint64_t v201 = specialized CodableAdaptiveImageGlyph.init(from:)((void *)a1);
        uint64_t v3 = 0;
        if (!*(void *)(*v19 + 16)) {
          goto LABEL_253;
        }
        int64_t v202 = v201;
        uint64_t v203 = specialized Array._customRemoveLast()();
        if (!v203) {
          uint64_t v203 = specialized Array.remove(at:)(*(void *)(*v19 + 16) - 1);
        }
        *(void *)(a1 + 16) = v203;
        *((void *)&v282 + 1) = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
        *(void *)&long long v281 = v202;
        outlined init with take of Any(&v281, v280);
        id v87 = v267;
        int64_t v88 = v202;
        int64_t v89 = v287;
        char v90 = swift_isUniquelyReferenced_nonNull_native();
        Swift::String v279 = v89;
        __int16 v287 = (void *)0x8000000000000000;
        unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
        uint64_t v204 = v89[2];
        BOOL v205 = (v91 & 1) == 0;
        uint64_t v95 = v204 + v205;
        if (__OFADD__(v204, v205)) {
          goto LABEL_255;
        }
LABEL_169:
        char v206 = v91;
        if (v89[3] >= v95)
        {
          if ((v90 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v95, v90);
          uint64_t v207 = specialized __RawDictionaryStorage.find<A>(_:)(v87);
          if ((v206 & 1) != (v208 & 1)) {
            goto LABEL_269;
          }
          unint64_t v92 = v207;
        }
        unint64_t v19 = v274;
        uint64_t v209 = v279;
        if (v206)
        {
          uint64_t v210 = (_OWORD *)(v279[7] + 32 * v92);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v210);
          outlined init with take of Any(v280, v210);
        }
        else
        {
          specialized _NativeDictionary._insert(at:key:value:)(v92, (uint64_t)v87, v280, v279);
          id v20 = v87;
        }
        __int16 v287 = v209;

        swift_bridgeObjectRelease();
        unint64_t object = v270;
        goto LABEL_5;
      default:
        *(void *)&long long v281 = v21;
        ProtobufDecoder.skipField(_:)((SwiftUI::ProtobufFormat::Field)&v281);
LABEL_158:
        uint64_t v3 = v198;
        if (v198) {
          goto LABEL_231;
        }
        goto LABEL_5;
    }
  }
}

uint64_t ProtobufDecoder.preferredBundleLanguage.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 48);
  if (one-time initialization token for preferredBundleLanguageKey != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    if (swift_dynamicCast()) {
      return v10;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
    return 0;
  }
}

void specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, void (*a5)(void *__return_ptr), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v32)(void *__return_ptr);

  uint64_t v32 = a5;
  long long v13 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v13;
  v30[2] = *(_OWORD *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 48);
  v28[0] = a2;
  outlined retain of ProtobufDecoder((id *)v30);
  uint64_t v14 = ProtobufDecoder.dataField(_:)(v28);
  if (v8)
  {
    outlined release of ProtobufDecoder((void **)v30);
  }
  else
  {
    uint64_t v16 = v14;
    unint64_t v17 = v15;
    v32(v29);
    outlined release of ProtobufDecoder((void **)v30);
    outlined consume of Data._Representation(v16, v17);
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v29, (uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if (v27)
    {
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)v28);
      __swift_project_boxed_opaque_existential_1(v28, v28[3]);
      swift_getDynamicType();
      unint64_t v18 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
      outlined init with copy of ResolvableStringAttribute?((uint64_t)v29, (uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      uint64_t v19 = v27;
      if (v27)
      {
        id v20 = __swift_project_boxed_opaque_existential_1(&v26, v27);
        *((void *)&v25 + 1) = v19;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(boxed_opaque_existential_1, v20, v19);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
        long long v24 = 0u;
        long long v25 = 0u;
      }
      id v22 = v18;
      specialized Dictionary.subscript.setter((uint64_t)&v24, v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v29, a6, a7, a8, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>);
      swift_beginAccess();
      unint64_t v23 = *a4;
      *a4 = v22;
    }
    else
    {
      outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v29, a6, a7, a8, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>);
      outlined destroy of AnyTrackedValue?((uint64_t)&v26, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    }
  }
}

void specialized initializeResolvable #1 <A>(_:) in CodableAttributedString.Range.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  v23[0] = *(_OWORD *)a1;
  v23[1] = v6;
  v23[2] = *(_OWORD *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 48);
  v21[0] = a2;
  outlined retain of ProtobufDecoder((id *)v23);
  uint64_t v7 = ProtobufDecoder.dataField(_:)(v21);
  if (v4)
  {
    outlined release of ProtobufDecoder((void **)v23);
  }
  else
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)((uint64_t)v22);
    outlined release of ProtobufDecoder((void **)v23);
    outlined consume of Data._Representation(v9, v10);
    outlined init with copy of ResolvableStringAttribute?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    if (v20)
    {
      outlined init with take of ScrollStateRequest(&v19, (uint64_t)v21);
      __swift_project_boxed_opaque_existential_1(v21, v21[3]);
      swift_getDynamicType();
      long long v11 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
      outlined init with copy of ResolvableStringAttribute?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
      uint64_t v12 = v20;
      if (v20)
      {
        long long v13 = __swift_project_boxed_opaque_existential_1(&v19, v20);
        *((void *)&v18 + 1) = v12;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(boxed_opaque_existential_1, v13, v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      }
      else
      {
        outlined destroy of AnyTrackedValue?((uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
        long long v17 = 0u;
        long long v18 = 0u;
      }
      id v15 = v11;
      specialized Dictionary.subscript.setter((uint64_t)&v17, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
      swift_beginAccess();
      uint64_t v16 = *a4;
      *a4 = v15;
    }
    else
    {
      _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
      outlined destroy of AnyTrackedValue?((uint64_t)&v19, &lazy cache variable for type metadata for ResolvableStringAttribute?, &lazy cache variable for type metadata for ResolvableStringAttribute);
    }
  }
}

void **specialized ProtobufDecoder.codableField<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v5;
  _OWORD v11[2] = *(_OWORD *)(v2 + 32);
  uint64_t v12 = *(void *)(v2 + 48);
  uint64_t v13 = a1;
  outlined retain of ProtobufDecoder((id *)v11);
  uint64_t v6 = ProtobufDecoder.dataField(_:)(&v13);
  if (v3) {
    return outlined release of ProtobufDecoder((void **)v11);
  }
  uint64_t v9 = v6;
  unint64_t v10 = v7;
  specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)(a2);
  outlined release of ProtobufDecoder((void **)v11);
  return (void **)outlined consume of Data._Representation(v9, v10);
}

uint64_t CodableAttributedString.Range.DecodingWrapper.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v3) {
    return outlined init with take of Any?((uint64_t)v7, a3, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute, (uint64_t)&protocol descriptor for ResolvableStringAttribute, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AnyTrackedValue?);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAttributedString.Range.DecodingWrapper<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CodableAttributedString.Range.DecodingWrapper.init(from:)(a1, *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAttributedString.Range(uint64_t a1)
{
  return CodableAttributedString.Range.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAttributedString.Range(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

void CodableNSParagraphStyle.encode(to:)(void *a1, id a2)
{
  id v4 = objc_msgSend(a2, sel_horizontalAlignment);
  unsigned int v5 = objc_msgSend(a2, sel_isFullyJustified);
  unsigned int v6 = v4 == (id)3;
  if (v4 == (id)4) {
    unsigned int v6 = 2;
  }
  if (v5) {
    Swift::UInt v7 = 3;
  }
  else {
    Swift::UInt v7 = v6;
  }
  if (v7)
  {
    ProtobufEncoder.encodeVarint(_:)(8uLL);
    ProtobufEncoder.encodeVarint(_:)(v7);
  }
  Swift::UInt v8 = (Swift::UInt)objc_msgSend(a2, sel_lineBreakMode);
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_93;
  }
  Swift::UInt v9 = v8;
  if (v8 != 4)
  {
    ProtobufEncoder.encodeVarint(_:)(0x10uLL);
    ProtobufEncoder.encodeVarint(_:)(v9);
  }
  id v10 = objc_msgSend(a2, sel_lineBreakStrategy);
  if (v10 != (id)0xFFFF)
  {
    Swift::UInt v11 = (Swift::UInt)v10;
    ProtobufEncoder.encodeVarint(_:)(0x18uLL);
    ProtobufEncoder.encodeVarint(_:)(v11);
  }
  objc_msgSend(a2, sel_lineSpacing);
  if (v12 == 0.0) {
    goto LABEL_24;
  }
  double v13 = v12;
  double v14 = fabs(v12);
  if (v14 >= 65536.0) {
    Swift::UInt v15 = 33;
  }
  else {
    Swift::UInt v15 = 37;
  }
  ProtobufEncoder.encodeVarint(_:)(v15);
  if (v14 >= 65536.0)
  {
    uint64_t v18 = a1[1];
    int64_t v17 = v18 + 8;
    if (!__OFADD__(v18, 8))
    {
      if (a1[2] < v17)
      {
        *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
      }
      else
      {
        a1[1] = v17;
        *(double *)(*a1 + v18) = v13;
      }
      goto LABEL_24;
    }
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v16 = a1[1];
  int64_t v17 = v16 + 4;
  if (__OFADD__(v16, 4))
  {
    __break(1u);
    goto LABEL_78;
  }
  *(float *)&double v13 = v13;
  if (a1[2] < v17) {
    goto LABEL_83;
  }
  a1[1] = v17;
  *(_DWORD *)(*a1 + v16) = LODWORD(v13);
  while (1)
  {
LABEL_24:
    objc_msgSend(a2, sel_lineHeightMultiple);
    if (v19 == 0.0) {
      goto LABEL_35;
    }
    double v13 = v19;
    double v20 = fabs(v19);
    Swift::UInt v21 = v20 >= 65536.0 ? 41 : 45;
    ProtobufEncoder.encodeVarint(_:)(v21);
    if (v20 >= 65536.0) {
      break;
    }
    uint64_t v22 = a1[1];
    int64_t v17 = v22 + 4;
    if (!__OFADD__(v22, 4))
    {
      *(float *)&double v13 = v13;
      if (a1[2] >= v17)
      {
        a1[1] = v17;
        *(_DWORD *)(*a1 + v22) = LODWORD(v13);
        goto LABEL_35;
      }
      goto LABEL_87;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v13);
  }
  uint64_t v23 = a1[1];
  int64_t v17 = v23 + 8;
  if (__OFADD__(v23, 8)) {
    goto LABEL_80;
  }
  if (a1[2] < v17)
  {
    *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
  }
  else
  {
    a1[1] = v17;
    *(double *)(*a1 + v23) = v13;
  }
  while (1)
  {
LABEL_35:
    objc_msgSend(a2, sel_maximumLineHeight);
    double v13 = v24;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    if (v13 != *(double *)&static MaximumLineHeightKey.defaultValue)
    {
      double v25 = fabs(v13);
      if (v25 >= 65536.0) {
        Swift::UInt v26 = 49;
      }
      else {
        Swift::UInt v26 = 53;
      }
      ProtobufEncoder.encodeVarint(_:)(v26);
      if (v25 >= 65536.0)
      {
        uint64_t v29 = a1[1];
        int64_t v17 = v29 + 8;
        if (__OFADD__(v29, 8)) {
          goto LABEL_82;
        }
        if (a1[2] < v17)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
        }
        else
        {
          a1[1] = v17;
          *(double *)(*a1 + v29) = v13;
        }
      }
      else
      {
        uint64_t v27 = a1[1];
        int64_t v17 = v27 + 4;
        if (__OFADD__(v27, 4)) {
          goto LABEL_81;
        }
        float v28 = v13;
        if (a1[2] < v17)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v17) = v28;
        }
        else
        {
          a1[1] = v17;
          *(float *)(*a1 + v27) = v28;
        }
      }
    }
    objc_msgSend(a2, sel_minimumLineHeight);
    double v13 = v30;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    if (v13 == *(double *)&static MinimumLineHeightKey.defaultValue) {
      break;
    }
    double v31 = fabs(v13);
    if (v31 >= 65536.0) {
      Swift::UInt v32 = 57;
    }
    else {
      Swift::UInt v32 = 61;
    }
    ProtobufEncoder.encodeVarint(_:)(v32);
    if (v31 >= 65536.0)
    {
      uint64_t v35 = a1[1];
      int64_t v17 = v35 + 8;
      if (!__OFADD__(v35, 8))
      {
        if (a1[2] < v17)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v17) = v13;
        }
        else
        {
          a1[1] = v17;
          *(double *)(*a1 + v35) = v13;
        }
        break;
      }
    }
    else
    {
      uint64_t v33 = a1[1];
      int64_t v17 = v33 + 4;
      if (!__OFADD__(v33, 4))
      {
        float v34 = v13;
        if (a1[2] < v17)
        {
          *(float *)ProtobufEncoder.growBufferSlow(to:)(v17) = v34;
        }
        else
        {
          a1[1] = v17;
          *(float *)(*a1 + v33) = v34;
        }
        break;
      }
      __break(1u);
    }
    __break(1u);
LABEL_87:
    *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v17) = LODWORD(v13);
  }
  objc_msgSend(a2, sel_hyphenationFactor);
  if (v36 != 0.0)
  {
    float v37 = v36;
    ProtobufEncoder.encodeVarint(_:)(0x45uLL);
    uint64_t v38 = a1[1];
    int64_t v39 = v38 + 4;
    if (__OFADD__(v38, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v39)
    {
      a1[1] = v39;
      *(float *)(*a1 + v38) = v37;
      goto LABEL_65;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(v39) = v37;
  }
LABEL_65:
  if (objc_msgSend(a2, sel_allowsDefaultTighteningForTruncation))
  {
    ProtobufEncoder.encodeVarint(_:)(0x48uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  id v40 = objc_msgSend(a2, sel_baseWritingDirection);
  if (v40 != (id)-1)
  {
    uint64_t v41 = (uint64_t)v40;
    ProtobufEncoder.encodeVarint(_:)(0x50uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v41) ^ (v41 >> 63));
  }
  if (objc_msgSend(a2, sel_spansAllLines))
  {
    ProtobufEncoder.encodeVarint(_:)(0x58uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  Swift::UInt v42 = (Swift::UInt)objc_msgSend(a2, sel_compositionLanguage);
  if ((v42 & 0x8000000000000000) != 0)
  {
LABEL_93:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  Swift::UInt v43 = v42;
  if (v42)
  {
    ProtobufEncoder.encodeVarint(_:)(0x60uLL);
    ProtobufEncoder.encodeVarint(_:)(v43);
  }
}

uint64_t ProtobufDecoder.preferredCompositionLanguage.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  id v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(v0 + 48);
  if (one-time initialization token for preferredCompositionLanguage != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for CTCompositionLanguage(0);
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v10[15];
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
    return 0;
  }
  return result;
}

void CodableTextAttachment.encode(to:)(uint64_t a1, uint64_t a2)
{
  id v3 = (id)_NSTextAttachmentGetImage(a2);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = (objc_class *)type metadata accessor for CorePlatformImage();
    uint64_t v6 = objc_allocWithZone(v5);
    v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = 0;
    *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = v4;
    id v7 = v4;
    char v8 = v6;
    v8[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(0, v7);

    v15.receiver = v8;
    v15.super_class = v5;
    id v9 = objc_msgSendSuper2(&v15, sel_init);
    specialized ProtobufEncoder.messageField<A>(_:_:)(1, (uint64_t)v9);
  }
  else
  {
    id v10 = (id)_NSTextAttachmentGetContents(a2);
    if (v10)
    {
      long long v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v12, v14);
      outlined consume of Data._Representation(v12, v14);
    }
    else
    {
      lazy protocol witness table accessor for type CodableTextAttachment.Error and conformance CodableTextAttachment.Error();
      swift_allocError();
      swift_willThrow();
    }
  }
}

void CodablePlatformFont.encode(to:)(const __CTFontDescriptor **a1, void *a2)
{
  unint64_t v4 = v2;
  uint64_t v120 = a1;
  uint64_t v6 = type metadata accessor for URL();
  unint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = a2;
  CTFontDescriptorRef v11 = CTFontCopyFontDescriptor((CTFontRef)v10);
  if (!CTFontIsSystemUIFont())
  {
    if (CTFontDescriptorIsAppleFont()) {
      goto LABEL_22;
    }
    unint64_t v115 = v2;
    CTFontDescriptorRef v14 = v11;
    objc_super v15 = *v120;
    uint64_t v16 = v120[1];
    int64_t v17 = v120[2];
    int64_t v18 = (int64_t)v120[3];
    uint64_t v19 = (uint64_t)v120[4];
    id v123 = *v120;
    Swift::String v124 = v16;
    int64_t v121 = (int64_t)v17;
    uint64_t v125 = v17;
    int64_t v126 = v18;
    uint64_t v117 = v19;
    int64_t v118 = v18;
    uint64_t v127 = v19;
    ProtobufEncoder.archiveOptions.getter(&v122);
    double v20 = (id *)MEMORY[0x263F03BB0];
    if ((LOBYTE(v122) & 4) != 0) {
      double v20 = (id *)MEMORY[0x263F03B20];
    }
    Swift::UInt v21 = (__CFString *)*v20;
    unint64_t v116 = v14;
    if (CTFontDescriptorCopyAttribute(v14, v21))
    {
      unint64_t v112 = v7;
      type metadata accessor for CFURLRef(0);
      CFURLRef v22 = (const __CFURL *)swift_dynamicCastUnknownClassUnconditional();
      uint64_t v23 = (__CFString *)CFURLCopyScheme(v22);
      CFURLRef v24 = (const __CFURL *)MEMORY[0x24C522820](1701603686, 0xE400000000000000);
      if (v23)
      {
        uint64_t v113 = v21;
        CFURLRef v114 = v22;
        id v119 = (id)v10;
        type metadata accessor for CFStringRef(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, type metadata accessor for CFStringRef);
        double v25 = v23;
        char v26 = static _CFObject.== infix(_:_:)();

        if (v26)
        {
          id v123 = v15;
          Swift::String v124 = v16;
          uint64_t v125 = (const __CTFontDescriptor *)v121;
          int64_t v126 = v118;
          uint64_t v127 = v117;
          ProtobufEncoder.archiveOptions.getter(&v122);
          if ((LOBYTE(v122) & 4) != 0)
          {
            static URL._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v82 = v120;
            ProtobufEncoder.encodeVarint(_:)(0x12uLL);
            float v28 = v82[1];
            uint64_t v29 = (uint64_t)v82[3];
            int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v4 = v115;
            CTFontDescriptorRef v11 = v116;
            unint64_t v10 = (unint64_t)v119;
            if (isUniquelyReferenced_nonNull_native)
            {
LABEL_118:
              unint64_t v85 = *(void *)(v29 + 16);
              unint64_t v84 = *(void *)(v29 + 24);
              uint64_t v86 = (uint64_t)v120;
              if (v85 >= v84 >> 1)
              {
                int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v84 > 1), v85 + 1, 1, (void *)v29);
                uint64_t v86 = (uint64_t)v120;
                uint64_t v29 = isUniquelyReferenced_nonNull_native;
              }
              *(void *)(v29 + 16) = v85 + 1;
              *(void *)(v29 + 8 * v85 + 32) = v28;
              *(void *)(v86 + 24) = v29;
              if (__OFADD__(v28, 1))
              {
                __break(1u);
                goto LABEL_187;
              }
              *(void *)(v86 + 8) = (char *)v28 + 1;
              URL.encode(to:)(v86);
              id v87 = (void (**)(uint64_t, uint64_t))(v112 + 8);
              unint64_t v7 = (unint64_t)v114;
              if (v4)
              {
                (*v87)(v9, v6);

                return;
              }
              ProtobufEncoder.endLengthDelimited()();
              (*v87)(v9, v6);

LABEL_22:
              CFTypeRef v38 = CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03AE8]);
              if (v38)
              {
                uint64_t v29 = (uint64_t)v38;
                self;
                if (swift_dynamicCastObjCClass())
                {
                  if (static String._unconditionallyBridgeFromObjectiveC(_:)()) {
                    BOOL v40 = 0;
                  }
                  else {
                    BOOL v40 = v39 == 0xE000000000000000;
                  }
                  if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                  {
                    ProtobufEncoder.stringFieldAlways(_:_:)(3);
                    if (v4)
                    {
                      swift_bridgeObjectRelease();
                      swift_unknownObjectRelease();
                      goto LABEL_169;
                    }
                  }
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_57;
                }
                swift_unknownObjectRelease();
              }
              lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
              swift_allocError();
              swift_willThrow();
              goto LABEL_169;
            }
          }
          else
          {
            uint64_t v27 = v120;
            ProtobufEncoder.encodeVarint(_:)(0xAuLL);
            float v28 = v27[1];
            uint64_t v29 = (uint64_t)v27[3];
            char v30 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v4 = v115;
            CTFontDescriptorRef v11 = v116;
            unint64_t v10 = (unint64_t)v119;
            if ((v30 & 1) == 0) {
LABEL_183:
            }
              uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, (void *)v29);
            unint64_t v7 = *(void *)(v29 + 16);
            unint64_t v31 = *(void *)(v29 + 24);
            Swift::UInt v32 = v120;
            if (v7 >= v31 >> 1)
            {
              uint64_t v111 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v7 + 1, 1, (void *)v29);
              Swift::UInt v32 = v120;
              uint64_t v29 = (uint64_t)v111;
            }
            *(void *)(v29 + 16) = v7 + 1;
            *(void *)(v29 + 8 * v7 + 32) = v28;
            v32[3] = (const __CTFontDescriptor *)v29;
            if (!__OFADD__(v28, 1))
            {
              v32[1] = (const __CTFontDescriptor *)((char *)v28 + 1);
              uint64_t v33 = (uint64_t)v32;
              id v34 = (id)v10;
              CFURLRef v35 = v114;
              specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v34, v33, v35);
              if (v4)
              {

                return;
              }

              ProtobufEncoder.endLengthDelimited()();
              goto LABEL_22;
            }
            __break(1u);
          }
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1, (void *)v29);
          uint64_t v29 = isUniquelyReferenced_nonNull_native;
          goto LABEL_118;
        }
        Swift::UInt v21 = v113;
        CFURLRef v24 = v114;
        unint64_t v10 = (unint64_t)v119;
      }
      else
      {
      }
    }
    lazy protocol witness table accessor for type CodablePlatformFont.Error and conformance CodablePlatformFont.Error();
    swift_allocError();
    swift_willThrow();

LABEL_116:
    return;
  }
  id v119 = (id)v10;
  id v12 = (id)CTFontGetTextStyle();
  if (!v12)
  {
    unsigned int Options = CTFontDescriptorGetOptions();
    if (Options)
    {
      Swift::UInt v37 = Options;
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v37);
    }
    unint64_t v10 = (unint64_t)v119;
    goto LABEL_22;
  }
  unint64_t v10 = (unint64_t)v12;
  if ((static String._unconditionallyBridgeFromObjectiveC(_:)() || v13 != 0xE000000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    ProtobufEncoder.stringFieldAlways(_:_:)(5);
    if (v2)
    {
      swift_bridgeObjectRelease();

      return;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = 0x263F08000uLL;
  if (CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03B30]))
  {
    self;
    uint64_t v41 = (void *)swift_dynamicCastObjCClass();
    if (v41)
    {
      id v42 = objc_msgSend(v41, sel_unsignedIntegerValue);
      if (v42)
      {
        Swift::UInt v43 = (Swift::UInt)v42;
        ProtobufEncoder.encodeVarint(_:)(0x30uLL);
        ProtobufEncoder.encodeVarint(_:)(v43);
      }
    }
    swift_unknownObjectRelease();
  }
  if (!CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03B50])) {
    goto LABEL_46;
  }
  self;
  Swift::Bool v44 = (void *)swift_dynamicCastObjCClass();
  if (!v44)
  {
    swift_unknownObjectRelease();
LABEL_46:
    unsigned int DefaultTextStylePlatform = CTFontDescriptorGetDefaultTextStylePlatform();
    goto LABEL_47;
  }
  unsigned int DefaultTextStylePlatform = objc_msgSend(v44, sel_unsignedIntValue);
  swift_unknownObjectRelease();
LABEL_47:
  uint64_t v29 = DefaultTextStylePlatform;
  uint64_t v46 = (double *)v120;
  ProtobufEncoder.encodeVarint(_:)(0x80uLL);
  ProtobufEncoder.encodeVarint(_:)(v29);
  uint64_t v9 = (uint64_t)v11;
  float v47 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03B58]);
  if (v47)
  {
    CTFontDescriptorRef v11 = v47;
    swift_unknownObjectRetain();
    self;
    uint64_t v29 = swift_dynamicCastObjCClassUnconditional();
    ProtobufEncoder.encodeVarint(_:)(0x42uLL);
    unint64_t v7 = *((void *)v46 + 1);
    double v48 = v46[3];
    int64_t v49 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = v2;
    if ((v49 & 1) == 0)
    {
LABEL_176:
      int64_t v49 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&v48 + 16) + 1, 1, *(void **)&v48);
      double v48 = *(double *)&v49;
    }
    unint64_t v4 = *(void *)(*(void *)&v48 + 16);
    unint64_t v50 = *(void *)(*(void *)&v48 + 24);
    float v51 = (double *)v120;
    if (v4 >= v50 >> 1)
    {
      int64_t v49 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v4 + 1, 1, *(void **)&v48);
      float v51 = (double *)v120;
      double v48 = *(double *)&v49;
    }
    *(void *)(*(void *)&v48 + 16) = v4 + 1;
    *(void *)(*(void *)&v48 + 8 * v4 + 32) = v7;
    v51[3] = v48;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_178;
    }
    *((void *)v51 + 1) = v7 + 1;
    CodableFontTraits.encode(to:)(v51, (id)v29);
    unint64_t v4 = v6;
    if (v6)
    {

      swift_unknownObjectRelease();
      return;
    }
    ProtobufEncoder.endLengthDelimited()();

    swift_unknownObjectRelease();
  }

  CTFontDescriptorRef v11 = (CTFontDescriptorRef)v9;
  unint64_t v10 = (unint64_t)v119;
LABEL_57:
  double Size = CTFontGetSize((CTFontRef)v10);
  if (Size != 0.0)
  {
    double v3 = Size;
    double v53 = fabs(Size);
    if (v53 >= 65536.0) {
      Swift::UInt v54 = 57;
    }
    else {
      Swift::UInt v54 = 61;
    }
    uint64_t v55 = v120;
    ProtobufEncoder.encodeVarint(_:)(v54);
    if (v53 >= 65536.0)
    {
      unint64_t v57 = v55[1];
      int64_t v49 = (int64_t)v57 + 8;
      if (!__OFADD__(v57, 8))
      {
        if ((uint64_t)v55[2] < v49)
        {
          *(double *)ProtobufEncoder.growBufferSlow(to:)(v49) = v3;
        }
        else
        {
          v55[1] = (const __CTFontDescriptor *)v49;
          *(double *)((char *)v57 + (void)*v55) = v3;
        }
        goto LABEL_69;
      }
      goto LABEL_179;
    }
    BOOL v56 = v55[1];
    int64_t v49 = (int64_t)v56 + 4;
    if (!__OFADD__(v56, 4))
    {
      *(float *)&double v3 = v3;
      if ((uint64_t)v55[2] >= v49)
      {
        v55[1] = (const __CTFontDescriptor *)v49;
        *(_DWORD *)((char *)v56 + (void)*v55) = LODWORD(v3);
        goto LABEL_69;
      }
LABEL_180:
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v49) = LODWORD(v3);
      goto LABEL_69;
    }
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
    goto LABEL_180;
  }
LABEL_69:
  CFTypeRef v58 = CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03A98]);
  if (v58)
  {
    uint64_t v29 = (uint64_t)v58;
    swift_unknownObjectRetain();
    specialized ProtobufEncoder.codableField<A>(_:_:)(9, v29);
    if (v4)
    {
      swift_unknownObjectRelease_n();
      goto LABEL_169;
    }
    swift_unknownObjectRelease_n();
  }
  Swift::String v59 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F039B0]);
  float v28 = (const __CTFontDescriptor *)MEMORY[0x263F8EE50];
  if (!v59) {
    goto LABEL_129;
  }
  id v123 = v59;
  type metadata accessor for [Int : CGFloat](0, &lazy cache variable for type metadata for [Int : CGFloat]);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_129;
  }
  double v48 = v122;
  if (!*(void *)(*(void *)&v122 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_129;
  }
  id v119 = (id)v10;
  unint64_t v115 = v4;
  unint64_t v116 = v11;
  uint64_t v60 = *(void *)(*(void *)&v122 + 64);
  uint64_t v117 = *(void *)&v122 + 64;
  uint64_t v61 = 1 << *(unsigned char *)(*(void *)&v122 + 32);
  uint64_t v62 = -1;
  if (v61 < 64) {
    uint64_t v62 = ~(-1 << v61);
  }
  unint64_t v10 = v62 & v60;
  int64_t v118 = (unint64_t)(v61 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v63 = 0;
  CTFontDescriptorRef v11 = (CTFontDescriptorRef)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v10)
    {
      unint64_t v64 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v121 = v63;
      unint64_t v65 = v64 | (v63 << 6);
    }
    else
    {
      BOOL v66 = __OFADD__(v63, 1);
      int64_t v67 = v63 + 1;
      if (v66) {
        goto LABEL_175;
      }
      if (v67 >= v118)
      {
        unint64_t v88 = v115;
        unint64_t v10 = (unint64_t)v119;
        goto LABEL_126;
      }
      unint64_t v68 = *(void *)(v117 + 8 * v67);
      unint64_t v10 = (unint64_t)v119;
      if (!v68)
      {
        int64_t v69 = v67 + 1;
        if (v67 + 1 >= v118) {
          goto LABEL_125;
        }
        unint64_t v68 = *(void *)(v117 + 8 * v69);
        if (!v68)
        {
          int64_t v69 = v67 + 2;
          if (v67 + 2 >= v118) {
            goto LABEL_125;
          }
          unint64_t v68 = *(void *)(v117 + 8 * v69);
          if (!v68)
          {
            int64_t v69 = v67 + 3;
            if (v67 + 3 >= v118) {
              goto LABEL_125;
            }
            unint64_t v68 = *(void *)(v117 + 8 * v69);
            if (!v68)
            {
              int64_t v69 = v67 + 4;
              if (v67 + 4 >= v118) {
                goto LABEL_125;
              }
              unint64_t v68 = *(void *)(v117 + 8 * v69);
              if (!v68)
              {
                int64_t v69 = v67 + 5;
                if (v67 + 5 >= v118)
                {
LABEL_125:
                  unint64_t v88 = v115;
                  goto LABEL_126;
                }
                unint64_t v68 = *(void *)(v117 + 8 * v69);
                if (!v68)
                {
                  while (1)
                  {
                    int64_t v67 = v69 + 1;
                    if (__OFADD__(v69, 1)) {
                      break;
                    }
                    if (v67 >= v118) {
                      goto LABEL_173;
                    }
                    unint64_t v68 = *(void *)(v117 + 8 * v67);
                    ++v69;
                    if (v68) {
                      goto LABEL_97;
                    }
                  }
                  __break(1u);
                  goto LABEL_183;
                }
              }
            }
          }
        }
        int64_t v67 = v69;
      }
LABEL_97:
      unint64_t v10 = (v68 - 1) & v68;
      int64_t v121 = v67;
      unint64_t v65 = __clz(__rbit64(v68)) + (v67 << 6);
    }
    uint64_t v70 = 8 * v65;
    unint64_t v4 = *(void *)&v48;
    double v3 = *(double *)(*(void *)(*(void *)&v48 + 56) + v70);
    id v123 = *(const __CTFontDescriptor **)(*(void *)(*(void *)&v48 + 48) + v70);
    unint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = v71;
    uint64_t v9 = swift_isUniquelyReferenced_nonNull_native();
    id v123 = v11;
    double v48 = *(double *)&v11;
    unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v29);
    uint64_t v74 = *((void *)v11 + 2);
    BOOL v75 = (v72 & 1) == 0;
    uint64_t v76 = v74 + v75;
    if (__OFADD__(v74, v75)) {
      break;
    }
    uint64_t v6 = v72;
    if (*((void *)v11 + 3) >= v76)
    {
      if (v9)
      {
        CTFontDescriptorRef v11 = v123;
        if (v72) {
          goto LABEL_79;
        }
      }
      else
      {
        double v48 = COERCE_DOUBLE(&v123);
        specialized _NativeDictionary.copy()();
        CTFontDescriptorRef v11 = v123;
        if (v6) {
          goto LABEL_79;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, v9);
      double v48 = *(double *)&v123;
      unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v29);
      if ((v6 & 1) != (v78 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      unint64_t v73 = v77;
      CTFontDescriptorRef v11 = v123;
      if (v6)
      {
LABEL_79:
        *(double *)(*((void *)v11 + 7) + 8 * v73) = v3;
        goto LABEL_80;
      }
    }
    *((void *)v11 + (v73 >> 6) + 8) |= 1 << v73;
    unint64_t v79 = (unint64_t *)(*((void *)v11 + 6) + 16 * v73);
    *unint64_t v79 = v7;
    v79[1] = v29;
    *(double *)(*((void *)v11 + 7) + 8 * v73) = v3;
    uint64_t v80 = *((void *)v11 + 2);
    BOOL v66 = __OFADD__(v80, 1);
    uint64_t v81 = v80 + 1;
    if (v66)
    {
      __break(1u);
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }
    *((void *)v11 + 2) = v81;
    swift_bridgeObjectRetain();
LABEL_80:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    float v28 = (const __CTFontDescriptor *)MEMORY[0x263F8EE50];
    double v48 = *(double *)&v4;
    int64_t v63 = v121;
  }
  __break(1u);
LABEL_173:
  unint64_t v88 = v115;
LABEL_126:
  swift_release();
  swift_bridgeObjectRelease();
  specialized ProtobufEncoder.codableField<A>(_:_:)(10, (uint64_t)v11);
  unint64_t v4 = v88;
  if (v88)
  {
    swift_bridgeObjectRelease();
    goto LABEL_116;
  }
  swift_bridgeObjectRelease();
  CTFontDescriptorRef v11 = v116;
LABEL_129:
  int64_t v89 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03BB8]);
  if (!v89) {
    goto LABEL_136;
  }
  id v123 = v89;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_136;
  }
  double v3 = v122;
  if (v122 == 0.0) {
    goto LABEL_136;
  }
  char v90 = v120;
  ProtobufEncoder.encodeVarint(_:)(0x59uLL);
  char v91 = v90[1];
  int64_t isUniquelyReferenced_nonNull_native = (int64_t)v91 + 8;
  if (__OFADD__(v91, 8))
  {
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  if ((uint64_t)v90[2] >= isUniquelyReferenced_nonNull_native)
  {
    v90[1] = (const __CTFontDescriptor *)isUniquelyReferenced_nonNull_native;
    unint64_t v92 = (double *)((char *)v91 + (void)*v90);
    goto LABEL_135;
  }
LABEL_188:
  unint64_t v92 = (double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native);
LABEL_135:
  double *v92 = v3;
LABEL_136:
  uint64_t v93 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03A78]);
  if (v93)
  {
    id v123 = v93;
    if (swift_dynamicCast())
    {
      uint64_t v94 = *(void *)&v122;
      if (v122 != 0.0)
      {
        ProtobufEncoder.encodeVarint(_:)(0x60uLL);
        ProtobufEncoder.encodeVarint(_:)((2 * v94) ^ (v94 >> 63));
      }
    }
  }
  double v95 = COERCE_DOUBLE(CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03A20]));
  if (v95 == 0.0 || (double v122 = v95, (swift_dynamicCast() & 1) == 0))
  {
LABEL_146:
    id v96 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03AC8]);
    if (!v96 || (v123 = v96, (swift_dynamicCast() & 1) == 0) || (double v97 = v122, v122 == 0.0))
    {
LABEL_153:
      float v102 = (const __CTFontDescriptor *)CTFontDescriptorCopyAttribute(v11, (CFStringRef)*MEMORY[0x263F03AD8]);
      if (!v102) {
        goto LABEL_169;
      }
      id v123 = v102;
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_169;
      }
      double v103 = v122;
      if (v122 == 0.0) {
        goto LABEL_169;
      }
      double v104 = fabs(v122);
      if (v104 >= 65536.0) {
        Swift::UInt v105 = 121;
      }
      else {
        Swift::UInt v105 = 125;
      }
      char v106 = v120;
      ProtobufEncoder.encodeVarint(_:)(v105);
      if (v104 >= 65536.0)
      {
        uint64_t v109 = v106[1];
        int64_t v108 = (int64_t)v109 + 8;
        if (!__OFADD__(v109, 8))
        {
          if ((uint64_t)v106[2] < v108)
          {
            BOOL v110 = (double *)ProtobufEncoder.growBufferSlow(to:)(v108);
          }
          else
          {
            v106[1] = (const __CTFontDescriptor *)v108;
            BOOL v110 = (double *)((char *)v109 + (void)*v106);
          }
          *BOOL v110 = v103;
          goto LABEL_169;
        }
      }
      else
      {
        char v107 = v106[1];
        int64_t v108 = (int64_t)v107 + 4;
        if (!__OFADD__(v107, 4))
        {
          *(float *)&double v103 = v103;
          if ((uint64_t)v106[2] >= v108)
          {
            v106[1] = (const __CTFontDescriptor *)v108;
            *(_DWORD *)((char *)v107 + (void)*v106) = LODWORD(v103);
            goto LABEL_169;
          }
          goto LABEL_193;
        }
        __break(1u);
      }
      __break(1u);
LABEL_193:
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v108) = LODWORD(v103);
      goto LABEL_169;
    }
    float v98 = v120;
    ProtobufEncoder.encodeVarint(_:)(0x71uLL);
    uint64_t v99 = v98[1];
    int64_t v100 = (int64_t)v99 + 8;
    if (__OFADD__(v99, 8))
    {
      __break(1u);
    }
    else if ((uint64_t)v98[2] >= v100)
    {
      v98[1] = (const __CTFontDescriptor *)v100;
      uint64_t v101 = (double *)((char *)v99 + (void)*v98);
LABEL_152:
      double *v101 = v97;
      goto LABEL_153;
    }
    uint64_t v101 = (double *)ProtobufEncoder.growBufferSlow(to:)(v100);
    goto LABEL_152;
  }
  if (!v123 && v124 == (const __CTFontDescriptor *)0xE000000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_146;
  }
  ProtobufEncoder.stringFieldAlways(_:_:)(13);
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_146;
  }
LABEL_169:
}

uint64_t specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(void *a1, uint64_t (*a2)(void))
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  CTFontDescriptorRef v11 = (char *)&v44 - v10;
  uint64_t v12 = *(void *)(v2 + 16);
  *(_OWORD *)&into.state.h0 = *(_OWORD *)v2;
  *(void *)&into.state.CC_LONG h4 = v12;
  uint64_t v47 = v2;
  *(_OWORD *)&into.state.Nh = *(_OWORD *)(v2 + 24);
  uint64_t v13 = ProtobufEncoder.archiveWriter.getter();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v46 = v3;
    *(void *)&c.h0 = a1;
    lazy protocol witness table accessor for type CodablePlatformFont and conformance CodablePlatformFont();
    id v44 = a1;
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    uint64_t v15 = *(void *)(v14 + 152);
    if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&into), (v17 & 1) != 0))
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)&into);
      lazy protocol witness table accessor for type Int and conformance Int();
      default argument 1 of OSLogInterpolation.appendInterpolation<A>(_:format:align:privacy:attributes:)();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v19);
      static OSSignpostID.exclusive.getter();
      double v20 = OSSignposter.logHandle.getter();
      os_signpost_type_t v21 = static os_signpost_type_t.event.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        id v44 = (id)v18;
        uint64_t v22 = v45;
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v8, v11, v6);
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 134217984;
        *(void *)&into.state.h0 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_245728000, v20, v21, v24, "addAttachment.cacheHit", "index=%{name=index}ld", v23, 0xCu);
        MEMORY[0x24C527CC0](v23, -1, -1);

        double v25 = *(void (**)(char *, uint64_t))(v22 + 8);
        v25(v11, v6);
        v25(v8, v6);
        uint64_t v18 = (uint64_t)v44;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v6);
      }
      if ((v18 & 0x8000000000000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      swift_endAccess();
      uint64_t v26 = outlined destroy of AnyHashable((uint64_t)&into);
      uint64_t v27 = v46;
      uint64_t v28 = ((uint64_t (*)(uint64_t))a2)(v26);
      if (v27) {
        return swift_release();
      }
      unint64_t v30 = v28;
      unint64_t v31 = v29;
      uint64_t v46 = (void *)(v14 + 152);
      memset(&c, 0, sizeof(c));
      outlined copy of Data._Representation(v28, v29);
      CC_SHA1_Init(&c);
      into.state = c;
      Data.hash(into:)(&into);
      memset(&c, 0, 20);
      CC_SHA1_Final((unsigned __int8 *)&c, &into.state);
      outlined consume of Data._Representation(v30, v31);
      CC_LONG h4 = c.h4;
      uint64_t v33 = *(void *)&c.h0;
      uint64_t v34 = *(void *)&c.h2;
      swift_beginAccess();
      uint64_t v35 = specialized Collection<>.firstIndex(of:)(v33, v34, h4, *(void *)(v14 + 32));
      if (v36)
      {
        *(void *)&into.state.h0 = v33;
        *(void *)&into.state.h2 = v34;
        into.state.CC_LONG h4 = h4;
        LOBYTE(into.state.Nl) = 0;
        outlined copy of Data._Representation(v30, v31);
        uint64_t v18 = specialized ArchiveWriter.addAttachment(hash:from:)((unint64_t *)&into.state.h0, (const char *)v14, v30, v31);
        outlined consume of Data._Representation(v30, v31);
      }
      else
      {
        uint64_t v18 = v35;
      }
      outlined consume of Data._Representation(v30, v31);
      id v49 = v44;
      id v41 = v44;
      AnyHashable.init<A>(_:)();
      id v42 = v46;
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v48 = *v42;
      *id v42 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&into, isUniquelyReferenced_nonNull_native);
      *id v42 = v48;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)&into);
      swift_endAccess();
      if ((v18 & 0x8000000000000000) == 0)
      {
LABEL_13:
        ProtobufEncoder.encodeVarint(_:)(8uLL);
        ProtobufEncoder.encodeVarint(_:)(v18);
        return swift_release();
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = a2();
  if (!v3)
  {
    uint64_t v39 = result;
    unint64_t v40 = v38;
    ProtobufEncoder.dataField(_:_:)(2, result, v38);
    return outlined consume of Data._Representation(v39, v40);
  }
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              CTFontDescriptorRef v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodablePlatformFont(const __CTFontDescriptor **a1)
{
  CodablePlatformFont.encode(to:)(a1, *v1);
}

unsigned char *protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodablePlatformFont@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized CodablePlatformFont.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance CodablePlatformFont@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized CodableByProtobuf.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodablePlatformFont(void *a1)
{
  return specialized CodableByProtobuf.encode(to:)(a1, *v1);
}

void CodableCGFont.encode(to:)(uint64_t a1, CGFontRef graphicsFont)
{
  CTFontRef v4 = CTFontCreateWithGraphicsFont(graphicsFont, 1.0, 0, 0);
  ProtobufEncoder.encodeVarint(_:)(0x22uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    uint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    uint64_t v6 = (void *)isUniquelyReferenced_nonNull_native;
  }
  _OWORD v6[2] = v9 + 1;
  v6[v9 + 4] = v5;
  *(void *)(a1 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(a1 + 8) = v5 + 1;
    MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
    uint64_t v10 = v4;
    swift_bridgeObjectRetain();
    specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v10, closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)specialized partial apply);

    if (v2)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      ProtobufEncoder.endLengthDelimited()();
    }
  }
}

void CodableFontTraits.encode(to:)(void *a1, id a2)
{
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x263F03B48]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  uint64_t v5 = MEMORY[0x263F8EE58];
  uint64_t v6 = MEMORY[0x263F8EE58] + 8;
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast())
    {
      id v7 = objc_msgSend(v28, sel_unsignedIntegerValue);
      ProtobufEncoder.encodeVarint(_:)(8uLL);
      ProtobufEncoder.encodeVarint(_:)((Swift::UInt)v7);
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v6, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
  }
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x263F03C00]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_18;
    }
    objc_msgSend(v28, sel_floatValue);
    int v9 = v8;
    ProtobufEncoder.encodeVarint(_:)(0x15uLL);
    uint64_t v10 = a1[1];
    int64_t v11 = v10 + 4;
    if (__OFADD__(v10, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v11)
    {
      a1[1] = v11;
      unsigned int v12 = (_DWORD *)(*a1 + v10);
LABEL_16:
      *unsigned int v12 = v9;

      goto LABEL_18;
    }
    unsigned int v12 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v11);
    goto LABEL_16;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
LABEL_18:
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x263F03C50]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_28;
    }
    objc_msgSend(v28, sel_floatValue);
    int v14 = v13;
    ProtobufEncoder.encodeVarint(_:)(0x1DuLL);
    uint64_t v15 = a1[1];
    int64_t v16 = v15 + 4;
    if (__OFADD__(v15, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v16)
    {
      a1[1] = v16;
      uint64_t v17 = (_DWORD *)(*a1 + v15);
LABEL_26:
      *uint64_t v17 = v14;

      goto LABEL_28;
    }
    uint64_t v17 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v16);
    goto LABEL_26;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
LABEL_28:
  if (objc_msgSend(a2, sel_objectForKey_, *MEMORY[0x263F03B38]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_38;
    }
    objc_msgSend(v28, sel_floatValue);
    int v19 = v18;
    ProtobufEncoder.encodeVarint(_:)(0x25uLL);
    uint64_t v20 = a1[1];
    int64_t v21 = v20 + 4;
    if (__OFADD__(v20, 4))
    {
      __break(1u);
    }
    else if (a1[2] >= v21)
    {
      a1[1] = v21;
      char v22 = (_DWORD *)(*a1 + v20);
LABEL_36:
      *char v22 = v19;

      goto LABEL_38;
    }
    char v22 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v21);
    goto LABEL_36;
  }
  outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
LABEL_38:
  if (!*MEMORY[0x263F03BA8])
  {
    __break(1u);
    goto LABEL_72;
  }
  if (objc_msgSend(a2, sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    if (swift_dynamicCast())
    {
      if (!v28 && v29 == 0xE000000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        ProtobufEncoder.stringFieldAlways(_:_:)(5);
        swift_bridgeObjectRelease();
        if (v2) {
          return;
        }
      }
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
  }
  if (!*MEMORY[0x263F03AB8])
  {
LABEL_72:
    __break(1u);
    return;
  }
  if (objc_msgSend(a2, sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v30, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_0);
  if (v33)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
    if (swift_dynamicCast())
    {
      objc_msgSend(v28, sel_floatValue);
      int v24 = v23;
      ProtobufEncoder.encodeVarint(_:)(0x35uLL);
      uint64_t v25 = a1[1];
      int64_t v26 = v25 + 4;
      if (__OFADD__(v25, 4))
      {
        __break(1u);
      }
      else if (a1[2] >= v26)
      {
        a1[1] = v26;
        uint64_t v27 = (_DWORD *)(*a1 + v25);
LABEL_57:
        *uint64_t v27 = v24;

        return;
      }
      uint64_t v27 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v26);
      goto LABEL_57;
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
  }
}

uint64_t one-time initialization function for preferredBundleLanguageKey(uint64_t a1)
{
  return one-time initialization function for preferredBundleLanguageKey(a1, static ArchivedViewCore.preferredBundleLanguageKey);
}

uint64_t static ArchivedViewCore.preferredBundleLanguageKey.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for preferredBundleLanguageKey, (uint64_t)static ArchivedViewCore.preferredBundleLanguageKey, a1);
}

uint64_t one-time initialization function for preferredCompositionLanguage(uint64_t a1)
{
  return one-time initialization function for preferredBundleLanguageKey(a1, static ArchivedViewCore.preferredCompositionLanguage);
}

uint64_t one-time initialization function for preferredBundleLanguageKey(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for [ResolvableTextSegmentAttribute.Value](0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?, MEMORY[0x263F8DEA0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v6, a2);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a2);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v7, v5, v6);
  }
  __break(1u);
  return result;
}

uint64_t static ArchivedViewCore.preferredCompositionLanguage.getter@<X0>(uint64_t a1@<X8>)
{
  return static ArchivedViewCore.archivedViewHostKey.getter(&one-time initialization token for preferredCompositionLanguage, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage, a1);
}

uint64_t ProtobufEncoder.preferredCompositionLanguage.getter()
{
  uint64_t v1 = type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(v0 + 32);
  if (one-time initialization token for preferredCompositionLanguage != -1) {
    swift_once();
  }
  uint64_t v6 = __swift_project_value_buffer(v1, (uint64_t)static ArchivedViewCore.preferredCompositionLanguage);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  if (*(void *)(v5 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  if (*((void *)&v12 + 1))
  {
    type metadata accessor for CTCompositionLanguage(0);
    uint64_t result = swift_dynamicCast();
    if (result) {
      return v10[15];
    }
  }
  else
  {
    outlined destroy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_0);
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CodablePlatformFont()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CodablePlatformFont()
{
  uint64_t v1 = *v0;
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodablePlatformFont()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CodablePlatformFont()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvableTextSegmentAttribute.Value?(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [ResolvableTextSegmentAttribute.Value](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value] and conformance <A> [A], type metadata accessor for [ResolvableTextSegmentAttribute.Value], (void (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  uint64_t v6 = v13;
  uint64_t v7 = *(void *)(v13 + 16);
  uint64_t v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7)
  {
    outlined init with copy of ResolvableTextSegmentAttribute.Value(v6+ ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80)), (uint64_t)v5, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v10, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ResolvableTextSegmentAttribute.Value?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  swift_release();
  return _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0((uint64_t)v5, a1, type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>] and conformance <A> [A], type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>], (void (*)(void))lazy protocol witness table accessor for type CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting> and conformance CodableAttributedString.Range.DecodingWrapper<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of ResolvableTextSegmentAttribute.Value(v5 + 32, (uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<TimeDataFormatting>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>, (void (*)(uint64_t))type metadata accessor for ResolvableTimer);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableTimer>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableCurrentDate>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableAbsoluteDate>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  long long v4;
  long long v5;
  unsigned char v6[24];

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>]();
  lazy protocol witness table accessor for type [CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>] and conformance <A> [A]();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (*(void *)(v5 + 16))
  {
    outlined init with copy of CodableAttributedString.Range.DecodingWrapper<ResolvableProgress>(v5 + 32, (uint64_t)&v5, &lazy cache variable for type metadata for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
  }
  else
  {
    uint64_t v5 = 0uLL;
    *(void *)uint64_t v6 = 0;
    *(_OWORD *)&unsigned char v6[8] = xmmword_24619B520;
  }
  swift_bridgeObjectRelease();
  if (*(void *)&v6[8] == 1)
  {
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVSgWOhTm_0((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for CodableAttributedString.Range.DecodingWrapper<ResolvableDateInterval>?);
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v4 = *(_OWORD *)v6;
  *(_OWORD *)a1 = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)&v6[16];
  return result;
}

uint64_t specialized ProtobufDecoder.value<A>(fromBinaryPlist:type:)@<X0>(void *a1@<X8>)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListDecoder.userInfo.setter();
  type metadata accessor for [JSONCodable<[String : Double]>](0);
  lazy protocol witness table accessor for type [JSONCodable<CFArrayRef>] and conformance <A> [A](&lazy protocol witness table cache variable for type [JSONCodable<[String : Double]>] and conformance <A> [A], type metadata accessor for [JSONCodable<[String : Double]>], (void (*)(void))lazy protocol witness table accessor for type JSONCodable<[String : Double]> and conformance JSONCodable<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v1) {
    return swift_release();
  }
  if (!*(void *)(v5 + 16))
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return swift_release();
  }
  uint64_t v4 = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

uint64_t specialized closure #1 in ProtobufEncoder.encodeAttachedMessage<A, B>(_:for:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Data.Deallocator();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t v20 = a1;
  swift_bridgeObjectRetain();
  CodablePlatformFont.encode(to:)(&v16, a2);
  uint64_t v9 = v16;
  if (v2)
  {
    free(v16);
    uint64_t v10 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v16)
    {
      uint64_t v11 = v17;
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F06EF0], v5);
      Data.Deallocator._deallocator.getter();
      if (v11)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_retain();
        uint64_t v12 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        uint64_t v10 = specialized Data._Representation.init(_:count:)(v12, v11);
        swift_release();
      }
      else
      {
        uint64_t v13 = (void (*)(const __CTFontDescriptor *, void))Data.Deallocator._deallocator.getter();
        v13(v9, 0);
        swift_release();
        swift_release();
        uint64_t v10 = 0;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()@<X0>(unint64_t a1@<X8>)
{
  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    ResolvedShadowStyle.init(from:)(v1, a1);
    uint64_t v5 = *(void **)(v1 + 40);
    if (v5[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v6 = v5[2];
        if (v6)
        {
LABEL_5:
          uint64_t v7 = v6 - 1;
          uint64_t v8 = v5[v7 + 4];
          void v5[2] = v7;
          *(void *)(v1 + 40) = v5;
          *(void *)(v1 + 16) = v8;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    uint64_t v5 = (void *)result;
    uint64_t v6 = *(void *)(result + 16);
    if (v6) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized ProtobufDecoder.decodeMessage<A>()()
{
  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v1)
  {
    specialized Color.Resolved.init(from:)(v0);
    uint64_t v3 = (void *)v0[5];
    if (v3[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v4 = v3[2];
        if (v4)
        {
LABEL_7:
          uint64_t v5 = v4 - 1;
          uint64_t v6 = v3[v5 + 4];
          v3[2] = v5;
          v0[5] = v3;
          v0[2] = v6;
          return result;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_7;
    }
LABEL_10:
    __break(1u);
  }
  return result;
}