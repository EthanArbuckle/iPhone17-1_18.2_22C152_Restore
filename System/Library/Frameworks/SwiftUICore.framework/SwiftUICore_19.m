uint64_t specialized TextEffectImplementation.lineBreakingState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = *(void *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  v6 = (char *)&v8 - v5;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(uint64_t, uint64_t))(v3 + 120))(a1, v3);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v6);
}

double specialized TextEffectImplementation.lineBreakingMetrics(_:ranges:context:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v64 = a3;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v7 = *MEMORY[0x263F8EED0] & *v4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
  uint64_t v63 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  v62 = (char *)&v55 - v10;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v67 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v65 = (char *)&v55 - v16;
  Swift::UInt64 v17 = *(void *)((char *)v4 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v18 = specialized TextEffectImplementation.lineBreakingState.getter(*(void *)(v7 + 280), *(void *)(v7 + 288));
  swift_beginAccess();
  uint64_t v19 = *(void *)(a4 + 48);
  if (*(void *)(v19 + 16))
  {
    unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
    if (v21)
    {
      uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 16 * v20);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      if ((a2 & 0x8000000000000000) != 0) {
        goto LABEL_36;
      }
      if (*(void *)(v22 + 16) > a2)
      {
        uint64_t v23 = *(void *)(v22 + 8 * a2 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
        v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
        uint64_t v25 = v12;
        uint64_t v61 = v13 + 16;
        v60 = v24;
        v24(v65, v23+ OBJC_IVAR____TtCVVOE7SwiftUIVS_4Text6Effect14KeyframeLayout8FragmentP33_FDECD420473C8A183CD8DF57060B1B937Storage_characterRanges, v12);
        uint64_t v27 = *(void *)(v23 + 16);
        uint64_t v26 = *(void *)(v23 + 24);
        swift_retain();
        double v28 = 0.0;
        double v29 = 0.0;
        double v30 = 0.0;
        double v31 = 0.0;
        if (v27 == v26) {
          goto LABEL_31;
        }
        v58 = (void (**)(char *, uint64_t))(v9 + 8);
        v59 = (void (**)(char *, uint64_t))(v13 + 8);
        uint64_t v56 = v13;
        while (1)
        {
          ++v27;
          while (1)
          {
            v33 = *(void **)(v23 + 32);
            uint64_t v32 = *(void *)(v23 + 40);
            if (*(unsigned char *)(v23 + 48))
            {
              outlined copy of Text.Layout.Line.Line(*(void **)(v23 + 32), *(void *)(v23 + 40), 1);
              id v34 = (id)_NSTextLineFragmentGetCTLine(v33);
              if (!v34) {
                goto LABEL_38;
              }
              id v35 = v34;
              outlined consume of Text.Layout.Line.Line(v33, v32, 1);
              v33 = v35;
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(*(void **)(v23 + 32), *(void *)(v23 + 40), 0);
              outlined copy of Text.Layout.Line.Line(v33, v32, 0);

              swift_release();
            }
            CFIndex v36 = v27 - 1;
            if (v27 - 1 < *(void *)(v23 + 16) || v36 >= *(void *)(v23 + 24))
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
            lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
            uint64_t v37 = v64;
            char v38 = static RangeSet.== infix(_:_:)();
            v60(v67, v37, v25);
            if (v38)
            {
              (*v59)(v67, v25);
              goto LABEL_22;
            }
            uint64_t v66 = v27;
            swift_retain();
            v39 = v33;
            v40 = (id)_CTLineGetRunAtIndex(v39, v27 - 1);
            CFRange StringRange = CTRunGetStringRange((CTRunRef)v40);
            swift_release();

            if (__OFADD__(StringRange.location, StringRange.length)) {
              goto LABEL_34;
            }
            if (StringRange.location + StringRange.length < StringRange.location) {
              goto LABEL_35;
            }
            CFIndex v57 = v36;
            uint64_t v42 = v23;
            *(void *)&buffer.x = StringRange.location;
            *(void *)&buffer.y = StringRange.location + StringRange.length;
            v43 = v62;
            uint64_t v44 = v25;
            v45 = v67;
            uint64_t v46 = RangeSet.ranges.getter();
            MEMORY[0x270FA5388](v46);
            *(&v55 - 2) = (uint64_t)&buffer;
            char v47 = specialized Sequence.contains(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in RangeSet.overlaps(_:), (uint64_t)(&v55 - 4));
            (*v58)(v43, v63);
            v48 = v45;
            uint64_t v25 = v44;
            (*v59)(v48, v44);
            if (v47) {
              break;
            }
            swift_release();

            uint64_t v23 = v42;
            uint64_t v49 = *(void *)(v42 + 24);
            uint64_t v27 = v66 + 1;
            if (v66 == v49)
            {
              uint64_t v13 = v56;
              goto LABEL_31;
            }
          }
          uint64_t v23 = v42;
          uint64_t v27 = v66;
          CFIndex v36 = v57;
LABEL_22:
          v50 = v33;
          swift_retain();
          v51 = (id)_CTLineGetRunAtIndex(v50, v36);
          buffer.x = 0.0;
          buffer.y = 0.0;
          CGFloat descent = 0.0;
          ascent[0] = 0.0;
          originsBuffer.y = 0.0;
          CGFloat leading = 0.0;
          originsBuffer.x = 0.0;
          v74.location = 0;
          v74.length = 1;
          CTRunGetPositions((CTRunRef)v51, v74, &buffer);
          v75.location = 0;
          v75.length = 1;
          CTRunGetBaseAdvancesAndOrigins((CTRunRef)v51, v75, 0, &originsBuffer);
          v76.location = 0;
          v76.length = 0;
          double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v51, v76, ascent, &descent, &leading);
          swift_release_n();

          double v53 = fabs(descent);
          if (v31 <= ascent[0]) {
            double v31 = ascent[0];
          }
          if (v30 <= v53) {
            double v30 = v53;
          }
          if (v29 <= leading) {
            double v29 = leading;
          }
          double v28 = v28 + TypographicBounds;
          uint64_t v13 = v56;
          if (*(void *)(v23 + 24) == v27)
          {
LABEL_31:
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v13 + 8))(v65, v25);
            return v31;
          }
        }
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
    }
  }
  swift_endAccess();
  swift_release();
  return 0.0;
}

uint64_t specialized TextEffectImplementation.ResolvedMap.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TextEffectImplementation.ResolvedMap.Key();
  double v5 = MEMORY[0x270FA5388](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v9 - v6, a2, v4, v5);
  v9[1] = a1;
  swift_getWitnessTable();
  type metadata accessor for Dictionary();
  return Dictionary.subscript.setter();
}

uint64_t specialized TextEffectImplementation.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

id specialized TextEffectStateSnapshot.init(effect:time:state:attributes:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = (void *)MEMORY[0x263F8EED0];
  uint64_t v10 = *a2;
  LOBYTE(a2) = *(unsigned char *)a3;
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(a3 + 32);
  char v13 = *(unsigned char *)(a3 + 40);
  uint64_t v14 = *(void *)(a3 + 48);
  char v15 = *(unsigned char *)(a3 + 56);
  long long v20 = *(_OWORD *)(a3 + 64);
  long long v21 = *(_OWORD *)(a3 + 8);
  uint64_t v16 = *(void *)(a3 + 80);
  uint64_t v17 = *(void *)(a3 + 88);
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v4) + 0x50)
                                                      - 8)
                                          + 16))(&v4[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v4) + 0x60)], a1);
  *(void *)&v4[*(void *)((*v9 & *(void *)v4) + 0x68)] = v10;
  uint64_t v18 = &v4[*(void *)((*v9 & *(void *)v4) + 0x70)];
  *uint64_t v18 = (char)a2;
  *(_OWORD *)(v18 + 8) = v21;
  *((void *)v18 + 3) = v11;
  *((void *)v18 + 4) = v12;
  v18[40] = v13;
  *((void *)v18 + 6) = v14;
  v18[56] = v15;
  *((_OWORD *)v18 + 4) = v20;
  *((void *)v18 + 10) = v16;
  *((void *)v18 + 11) = v17;
  *(void *)&v4[*(void *)((*v9 & *(void *)v4) + 0x78)] = a4;
  v23.receiver = v4;
  v23.super_class = ObjectType;
  return objc_msgSendSuper2(&v23, sel_init);
}

uint64_t specialized TextEffectImplementation.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  LODWORD(v56) = a8;
  uint64_t v61 = a7;
  uint64_t v62 = a4;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  uint64_t v69 = a3;
  uint64_t v60 = a1;
  uint64_t v14 = *(void *)a13;
  uint64_t v15 = *(void *)(*(void *)a13 + 120);
  uint64_t v16 = *(void *)(*(void *)a13 + 128);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v58 = *(void *)(v18 - 8);
  uint64_t v59 = v18;
  MEMORY[0x270FA5388](v18);
  CFIndex v57 = &v52[-v19];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v63 = &v52[-v21];
  uint64_t v22 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v22 - 8);
  v24 = &v52[-v23];
  uint64_t v25 = *(void *)(v14 + 168);
  type metadata accessor for Text.Effect.AttributeTracker();
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = MEMORY[0x263F8EE80];
  *(void *)(v26 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v26 + 24) = v27;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 40) = v27;
  uint64_t v28 = MEMORY[0x263F8EE88];
  *(unsigned char *)(v26 + 48) = 0;
  *(void *)(v26 + 56) = v28;
  *(void *)&a13[v25] = v26;
  *(void *)&a13[*(void *)(*(void *)a13 + 176)] = 0;
  uint64_t v29 = *(void *)(*(void *)a13 + 184);
  swift_retain();
  *(void *)&a13[v29] = TextEffectImplementation.ResolvedMap.init()();
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  (*(void (**)(uint64_t, uint64_t))(v17 + 128))(v15, v17);
  uint64_t v30 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)((uint64_t)v24);
  double v31 = (uint64_t *)&a13[*(void *)(*(void *)a13 + 192)];
  *double v31 = a2;
  v31[1] = v30;
  swift_beginAccess();
  uint64_t v66 = a11;
  uint64_t v32 = *(void *)(a11 + 48);
  uint64_t v33 = *(void *)(v32 + 16);
  swift_retain();
  if (!v33) {
    goto LABEL_10;
  }
  swift_retain();
  unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v30);
  if ((v35 & 1) == 0)
  {
    swift_release();
LABEL_10:
    swift_endAccess();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v55 = a10;
  unsigned int v53 = v56 & 1;
  uint64_t v36 = *(void *)(*(void *)(v32 + 56) + 16 * v34);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v54 = v30;
  swift_release();
  *((void *)a13 + 3) = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 24))(0x6C6F686563616C50, 0xEB00000000726564, v15, v16);
  *((void *)a13 + 4) = v37;
  uint64_t v38 = *v31;
  uint64_t v39 = v31[1];
  swift_retain();
  v40 = v57;
  uint64_t v41 = v55;
  uint64_t v55 = a12;
  uint64_t v56 = a9;
  Text.Effect.BaseContext.content<A>(for:key:)(v15, v38, v39, a9, v41, v66, a12, v15, v17);
  swift_release();
  uint64_t v42 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v17 + 136);
  uint64_t v51 = v17;
  v43 = v63;
  v42(v40, v69, v62, v67, v68, v61, v53, v15, v51);
  (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v40, v59);
  *((void *)a13 + 5) = MEMORY[0x263F8EE80];
  (*(void (**)(char *, unsigned char *, uint64_t))(v64 + 16))(&a13[*(void *)(*(void *)a13 + 160)], v43, v65);
  int64_t v44 = *(void *)(v36 + 16);
  uint64_t v45 = MEMORY[0x263F8EE78];
  if (v44)
  {
    uint64_t v70 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
    uint64_t v45 = v70;
    uint64_t v46 = v36 + 32;
    unint64_t v47 = *(void *)(v70 + 16);
    do
    {
      uint64_t v48 = *(void *)(*(void *)(*(void *)v46 + 96) + 16);
      uint64_t v70 = v45;
      unint64_t v49 = *(void *)(v45 + 24);
      if (v47 >= v49 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v47 + 1, 1);
        uint64_t v45 = v70;
      }
      *(void *)(v45 + 16) = v47 + 1;
      *(void *)(v45 + 8 * v47 + 32) = v48;
      v46 += 8;
      ++v47;
      --v44;
    }
    while (v44);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v64 + 8))(v63, v65);
  swift_bridgeObjectRelease();
  *((void *)a13 + 2) = v45;
  return (uint64_t)a13;
}

uint64_t specialized TextEffectImplementation.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v18 = a8 & 1;
  type metadata accessor for TextEffectImplementation.AnimationInfo();
  uint64_t v19 = (char *)swift_allocObject();
  uint64_t v20 = specialized TextEffectImplementation.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(a1, a2, a3, a4, a5, a6, a7, v18, a9, a10, a11, a12, v19);
  swift_release();
  return v20;
}

void specialized TextEffectImplementation.init()()
{
}

void specialized TextEffectStateSnapshot.init()()
{
}

uint64_t type metadata accessor for TextEffectImplementation.ResolvedMap.Key()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)()
{
  return implicit closure #1 in TextEffectImplementation.animationInfo(persist:from:to:variant:duration:context:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
}

uint64_t _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GADyx_GSlsWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(255, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8ED78]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2460D0E8C()
{
  return swift_deallocObject();
}

void _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(255, &lazy cache variable for type metadata for Range<Text.Effect.FragmentIdentifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Text.Effect.FragmentIdentifier> and conformance <> Range<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextEffectImplementation.AnimationInfo.performLayout(for:state:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL a3@<X8>)
{
  return closure #1 in TextEffectImplementation.AnimationInfo.performLayout(for:state:context:)(a1, a2, *(void **)(v3 + 16), *(unsigned __int8 **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Text.Effect.FragmentIdentifier, @guaranteed Text.Effect.DrawableFragment<A>) -> (@out Text.Effect.Layout.Fragment)(uint64_t *a1)
{
  v2 = *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 32);
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a1 + 3);
  v6[0] = *(_OWORD *)(a1 + 1);
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a1 + 5);
  uint64_t v7 = a1[7];
  return v2(v3, v6);
}

uint64_t outlined init with copy of Text.Effect.Layout.Fragment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _ss16IndexingIteratorVys8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined retain of Text.Effect.State(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Time?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for Time?, (uint64_t)&type metadata for Time, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TextEffectImplementation.AnimationInfo.drawable(_:context:)()
{
  return closure #1 in TextEffectImplementation.AnimationInfo.drawable(_:context:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(uint64_t **)(v0 + 64));
}

void partial apply for closure #2 in TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:)(uint64_t a1)
{
  closure #2 in TextEffectImplementation.AnimationInfo.resolve(id:fragment:ranges:state:in:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(double *)(v1 + 40));
}

BOOL partial apply for closure #1 in TextEffectImplementation.states.getter(uint64_t a1)
{
  return closure #1 in TextEffectImplementation.states.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in TextEffectImplementation.states.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #2 in TextEffectImplementation.states.getter(a1, a2);
}

void type metadata accessor for _NativeDictionary<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>)
  {
    lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier();
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>);
    }
  }
}

void type metadata completion function for TextEffectImplementation.ResolvedMap.Key()
{
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TextEffectImplementation.ResolvedMap.Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for TextEffectImplementation.ResolvedMap.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *initializeWithCopy for TextEffectImplementation.ResolvedMap.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for TextEffectImplementation.ResolvedMap.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for TextEffectImplementation.ResolvedMap.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for TextEffectImplementation.ResolvedMap.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextEffectImplementation.ResolvedMap.Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2460D17F0);
}

uint64_t sub_2460D17F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 36);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for TextEffectImplementation.ResolvedMap.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2460D18AC);
}

uint64_t sub_2460D18AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 36);
  _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t base witness table accessor for Equatable in TextEffectImplementation<A>.ResolvedMap.Key()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type RangeSet<Text.Layout.CharacterIndex> and conformance <> RangeSet<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance <> RangeSet<A>;
  if (!lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance <> RangeSet<A>)
  {
    _ss8RangeSetV6RangesVy7SwiftUI4TextV6LayoutV14CharacterIndexV_GMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex, (uint64_t)&type metadata for Text.Layout.CharacterIndex, MEMORY[0x263F8EDA0]);
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RangeSet<Text.Layout.CharacterIndex> and conformance <> RangeSet<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.TransformedDrawableFragment()
{
  return &type metadata for Text.Effect.TransformedDrawableFragment;
}

BOOL static Font.Design.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t static Font.system(size:weight:design:relativeTo:maximumSize:)(uint64_t a1, char a2, char *a3, char *a4, uint64_t a5, char a6, double a7)
{
  char v12 = *a3;
  char v13 = *a4;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V14SystemProvider33_5603E46EFD6E0B67542F06407CC6DAD5LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider);
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a7;
  *(void *)(result + 24) = a1;
  *(unsigned char *)(result + 32) = a2 & 1;
  *(unsigned char *)(result + 33) = v12;
  *(unsigned char *)(result + 34) = v13;
  *(void *)(result + 40) = a5;
  *(unsigned char *)(result + 48) = a6 & 1;
  return result;
}

uint64_t static Font.system(size:weight:design:)(char *a1, double a2, double a3)
{
  char v5 = *a1;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V14SystemProvider33_5603E46EFD6E0B67542F06407CC6DAD5LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider);
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  *(unsigned char *)(result + 32) = 0;
  *(unsigned char *)(result + 33) = v5;
  *(unsigned char *)(result + 34) = 14;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 1;
  return result;
}

uint64_t static Font.system(size:weight:design:)(void **a1, double a2, double a3)
{
  char v5 = *a1;
  _s7SwiftUI7FontBox33_3D5D82E35921924EBCD40D1BFB222CC3LLCyAA0C0V14SystemProvider33_5603E46EFD6E0B67542F06407CC6DAD5LLVGMaTm_0(0, &lazy cache variable for type metadata for FontBox<Font.PrivateSystemDesignProvider>, (void (*)(void))lazy protocol witness table accessor for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider);
  uint64_t v6 = swift_allocObject();
  *(double *)(v6 + 16) = a2;
  *(double *)(v6 + 24) = a3;
  *(void *)(v6 + 32) = v5;
  id v7 = v5;
  return v6;
}

unint64_t lazy protocol witness table accessor for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider;
  if (!lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider);
  }
  return result;
}

void Font.Design.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Font.Design.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id one-time initialization function for compact()
{
  id result = (id)*MEMORY[0x263F03B68];
  if (*MEMORY[0x263F03B68])
  {
    static Font.PrivateDesign.compact = *MEMORY[0x263F03B68];
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static Font.PrivateDesign.compact.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for compact, (void **)&static Font.PrivateDesign.compact, a1);
}

id one-time initialization function for soft()
{
  id result = (id)*MEMORY[0x263F03BA0];
  if (*MEMORY[0x263F03BA0])
  {
    static Font.PrivateDesign.soft = *MEMORY[0x263F03BA0];
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static Font.PrivateDesign.soft.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for soft, (void **)&static Font.PrivateDesign.soft, a1);
}

id one-time initialization function for compactSoft()
{
  id result = (id)*MEMORY[0x263F03B78];
  if (*MEMORY[0x263F03B78])
  {
    static Font.PrivateDesign.compactSoft = *MEMORY[0x263F03B78];
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static Font.PrivateDesign.compactSoft.getter@<X0>(void **a1@<X8>)
{
  return static Font.PrivateTextStyle.footnote2.getter(&one-time initialization token for compactSoft, (void **)&static Font.PrivateDesign.compactSoft, a1);
}

void Font.PrivateDesign.hash(into:)()
{
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t static Font.PrivateDesign.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

Swift::Int Font.PrivateDesign.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font.PrivateDesign()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateDesign()
{
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateDesign()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *v0;
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v2 = v1;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Font.Design and conformance Font.Design()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Design and conformance Font.Design;
  if (!lazy protocol witness table cache variable for type Font.Design and conformance Font.Design)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Design and conformance Font.Design);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.PrivateDesign and conformance Font.PrivateDesign()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.PrivateDesign and conformance Font.PrivateDesign;
  if (!lazy protocol witness table cache variable for type Font.PrivateDesign and conformance Font.PrivateDesign)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.PrivateDesign and conformance Font.PrivateDesign);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PrivateDesign()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t initializeBufferWithCopyOfBuffer for Font.PrivateSystemDesignProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void destroy for Font.PrivateSystemDesignProvider(uint64_t a1)
{
}

void *assignWithCopy for Font.PrivateSystemDesignProvider(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = (void *)a2[2];
  id v4 = (void *)a1[2];
  a1[2] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for Font.PrivateSystemDesignProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

void *type metadata accessor for Font.PrivateSystemDesignProvider()
{
  return &unk_26FA76658;
}

uint64_t getEnumTagSinglePayload for Font.SystemProvider(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 17) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 17);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 17) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Font.SystemProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Font.SystemProvider()
{
  return &type metadata for Font.SystemProvider;
}

Swift::Int Font.SystemProvider.hashValue.getter()
{
  Swift::UInt64 v2 = *(void *)v0;
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 17);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 18);
  Swift::UInt64 v6 = *(void *)(v0 + 24);
  int v7 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v1;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  if (v4 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
    if (v7)
    {
LABEL_15:
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    switch((int)v5)
    {
      case 1:
        Swift::UInt v5 = 1;
        break;
      case 2:
        Swift::UInt v5 = 2;
        break;
      case 3:
        Swift::UInt v5 = 3;
        break;
      case 4:
        Swift::UInt v5 = 4;
        break;
      case 5:
        Swift::UInt v5 = 5;
        break;
      case 6:
        Swift::UInt v5 = 6;
        break;
      case 7:
        Swift::UInt v5 = 7;
        break;
      case 8:
        Swift::UInt v5 = 8;
        break;
      case 9:
        Swift::UInt v5 = 9;
        break;
      case 10:
        Swift::UInt v5 = 10;
        break;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x2460D2574);
      default:
        break;
    }
    Hasher._combine(_:)(v5);
    if (v7) {
      goto LABEL_15;
    }
  }
  Hasher._combine(_:)(1u);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v6;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.SystemProvider()
{
  Swift::UInt64 v2 = *(void *)v0;
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 17);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 18);
  Swift::UInt64 v6 = *(void *)(v0 + 24);
  int v7 = *(unsigned __int8 *)(v0 + 32);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v2;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v9 = v1;
    }
    else {
      Swift::UInt64 v9 = 0;
    }
    Hasher._combine(_:)(v9);
  }
  if (v4 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
    if (v7)
    {
LABEL_15:
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    switch((int)v5)
    {
      case 1:
        Swift::UInt v5 = 1;
        break;
      case 2:
        Swift::UInt v5 = 2;
        break;
      case 3:
        Swift::UInt v5 = 3;
        break;
      case 4:
        Swift::UInt v5 = 4;
        break;
      case 5:
        Swift::UInt v5 = 5;
        break;
      case 6:
        Swift::UInt v5 = 6;
        break;
      case 7:
        Swift::UInt v5 = 7;
        break;
      case 8:
        Swift::UInt v5 = 8;
        break;
      case 9:
        Swift::UInt v5 = 9;
        break;
      case 10:
        Swift::UInt v5 = 10;
        break;
      case 11:
      case 12:
      case 13:
        _diagnoseUnavailableCodeReached()();
        __break(1u);
        JUMPOUT(0x2460D2754);
      default:
        break;
    }
    Hasher._combine(_:)(v5);
    if (v7) {
      goto LABEL_15;
    }
  }
  Hasher._combine(_:)(1u);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v6;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

Swift::Int Font.PrivateSystemDesignProvider.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  int v3 = (void *)v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v6 = v3;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t protocol witness for FontProvider.resolve(in:) in conformance Font.PrivateSystemDesignProvider(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  double v7 = *v1;
  double v8 = v1[1];
  uint64_t v9 = *((void *)v1 + 2);
  __int16 v11 = v2;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  char v15 = v6;
  return (*(uint64_t (**)(uint64_t, __int16 *, double, double))(v4 + 56))(v9, &v11, v7, v8);
}

uint64_t protocol witness for FontProvider.resolveTraits(in:) in conformance Font.PrivateSystemDesignProvider(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  char v5 = *((unsigned char *)a1 + 24);
  char v6 = *((unsigned char *)a1 + 25);
  double v7 = *v1;
  double v8 = v1[1];
  uint64_t v9 = *((void *)v1 + 2);
  __int16 v11 = v2;
  uint64_t v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  char v15 = v6;
  return (*(uint64_t (**)(uint64_t, __int16 *, double, double))(v4 + 64))(v9, &v11, v7, v8);
}

void protocol witness for Hashable.hash(into:) in conformance Font.PrivateSystemDesignProvider()
{
  Swift::UInt64 v1 = v0[1];
  __int16 v2 = (void *)v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *v0;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v5 = v2;
  _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font.PrivateSystemDesignProvider()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt64 v3 = (void *)v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v6 = v3;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for Font.PrivateSystemDesignProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Font.PrivateSystemDesignProvider and conformance Font.PrivateSystemDesignProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Font.PrivateSystemDesignProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  Swift::UInt64 v4 = *(void **)(a2 + 16);
  Swift::UInt64 v5 = *(void **)(a1 + 16);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  id v6 = v5;
  id v7 = v4;
  char v8 = static _CFObject.== infix(_:_:)();

  return v8 & 1;
}

uint64_t static AccessibilityOptionalPropertiesKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::UInt64 v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActivationPointKey(uint64_t a1)
{
  return *(void *)(a1 + 24) == 0;
}

BOOL static AccessibilityOptionalPropertiesKey.isDefault(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](v3);
  id v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v10 - v6, a1, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v7, 1, AssociatedTypeWitness);
  if (v8 != 1) {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v8 == 1;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ChildBehaviorKind(unsigned __int8 *a1)
{
  return *a1 == 2;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.CustomContentListKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.CustomContentListKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.CustomContentListKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

uint64_t static AccessibilityPropertiesKey<>.isDefault(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 16))(a2, a3, v7);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v10 & 1;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.DataSeriesConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v3);
  return outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v3, a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Any?);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.DataSeriesConfigurationKey(uint64_t a1)
{
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(a1, (uint64_t)v2, (uint64_t)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Any?);
  return _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg((uint64_t)v2) == 1;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.LocaleKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.LocaleKey(MEMORY[0x263F07690], a1);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.LocaleKey(a1, a2, a3, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], MEMORY[0x263F07690]);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.LinkDestinationKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.LocaleKey(type metadata accessor for LinkDestination.Configuration, a1);
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.LocaleKey@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.LinkDestinationKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.LocaleKey(a1, a2, a3, &lazy cache variable for type metadata for LinkDestination.Configuration?, (void (*)(uint64_t))type metadata accessor for LinkDestination.Configuration, type metadata accessor for LinkDestination.Configuration);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.LocaleKey(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t), uint64_t (*a6)(void))
{
  type metadata accessor for AnyAccessibilityPropertiesEntry?(0, a4, a5);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - v11;
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)&v16 - v11, (uint64_t)a4, (uint64_t)a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityPropertiesEntry?);
  uint64_t v13 = a6(0);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (v14 != 1) {
    outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)v12, (uint64_t)a4, (uint64_t)a5, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityPropertiesEntry?);
  }
  return v14 == 1;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TextContentTypeKey(unsigned __int8 *a1)
{
  return *a1 == 8;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TextHeadingLevelKey(unsigned __int8 *a1)
{
  return *a1 == 7;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ValueKey(uint64_t a1)
{
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Any?);
  uint64_t v1 = v4;
  if (v4) {
    outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  return v1 == 0;
}

uint64_t specialized Dictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v19;
    }
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for Text.Effect.InteractionMetrics();
    uint64_t v18 = *(void *)(v11 - 8);
    outlined init with take of Text.Effect.InteractionMetrics(v10 + *(void *)(v18 + 72) * v7, a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    uint64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for Text.Effect.InteractionMetrics();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    uint64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

BOOL AccessibilityProperties.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t AccessibilityProperties.init(reserving:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t result = Dictionary.init(minimumCapacity:)();
  *a1 = result;
  return result;
}

uint64_t AccessibilityPropertiesEntry.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t AccessibilityProperties.update(_:)(uint64_t (*a1)(uint64_t))
{
  return a1(v1);
}

void (*AccessibilityProperties.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  uint64_t v13 = malloc(v12);
  v9[7] = v13;
  AccessibilityProperties.subscript.getter(a3, a4, (uint64_t)v13);
  return AccessibilityProperties.subscript.modify;
}

void AccessibilityProperties.subscript.modify(uint64_t **a1, uint64_t a2)
{
  Swift::UInt64 v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = v2[1];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    AccessibilityProperties.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    AccessibilityProperties.subscript.setter((*a1)[7], a2, v2[1], v2[2]);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t AnyAccessibilityPropertiesEntry.isEqual(to:)()
{
  return 0;
}

uint64_t AccessibilityPropertiesEntry.typedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AccessibilityPropertiesEntry.typedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AccessibilityPropertiesEntry.typedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityPropertiesEntry<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static AccessibilityPropertiesEntry.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), a4, a5, a6, a7, a8);
}

uint64_t AccessibilityPropertiesEntry<A>.merge(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 8))(a1, *(void *)(a2 + 16));
}

{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 8))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for AccessibilityCombinable.merge(with:) in conformance <A> AccessibilityPropertiesEntry<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AccessibilityPropertiesEntry<A>.merge(with:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t static AccessibilityPropertiesKey.isDefault(_:)()
{
  return 0;
}

uint64_t dispatch thunk of AnyAccessibilityPropertiesEntry.anyValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnyAccessibilityPropertiesEntry.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t getEnumTagSinglePayload for AccessibilityPropertiesEntry(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t dispatch thunk of static AccessibilityPropertiesKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static AccessibilityPropertiesKey.isDefault(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static AccessibilityOptionalPropertiesKey.valueType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t AccessibilityAttachment.properties.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityAttachment.properties.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*AccessibilityAttachment.properties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *AccessibilityAttachment.platformElement.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void AccessibilityAttachment.platformElement.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*AccessibilityAttachment.platformElement.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityAttachment.init(properties:platformElement:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v5;
  a3[1] = a2;
  return result;
}

uint64_t AccessibilityAttachment.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t result = Dictionary.init(minimumCapacity:)();
  *a1 = result;
  a1[1] = 0;
  return result;
}

BOOL AccessibilityAttachment.isEmpty.getter()
{
  return !*(void *)(*v0 + 16) && v0[1] == 0;
}

uint64_t AccessibilityAttachmentToken.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t AccessibilityAttachmentToken.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

unint64_t AccessibilityAttachmentToken.attribute.getter()
{
  if (*(unsigned char *)(v0 + 8))
  {
    uint64_t v1 = 0;
    BOOL v2 = 1;
  }
  else
  {
    unsigned int Attribute = AGWeakAttributeGetAttribute();
    BOOL v2 = Attribute == *MEMORY[0x263F288F8];
    if (Attribute == *MEMORY[0x263F288F8]) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = Attribute;
    }
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t AccessibilityAttachmentToken.encode(to:)(void *a1)
{
  if ((*(unsigned char *)(v1 + 8) & 1) == 0) {
    AGWeakAttributeGetAttribute();
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t AccessibilityAttachmentToken.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *(void *)a2 = v5;
    *(unsigned char *)(a2 + 8) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void AccessibilityAttachmentToken.hash(into:)()
{
  unint64_t v1 = *v0;
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    v1 >>= 32;
  }
  Hasher._combine(_:)(v1);
}

BOOL static AccessibilityAttachmentToken.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)a1 == *(void *)a2;
  if (!*(unsigned char *)(a2 + 8)) {
    BOOL v2 = 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return v2;
  }
  else {
    return (*(void *)a1 == *(void *)a2) & ~*(unsigned __int8 *)(a2 + 8);
  }
}

Swift::Int AccessibilityAttachmentToken.hashValue.getter()
{
  unint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    v1 >>= 32;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityAttachmentToken()
{
  unint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    v1 >>= 32;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityAttachmentToken()
{
  unint64_t v1 = *v0;
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    v1 >>= 32;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityAttachmentToken()
{
  Hasher.init(_seed:)();
  unint64_t v1 = *v0;
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
    v1 >>= 32;
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityAttachmentToken@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    *(void *)a2 = v5;
    *(unsigned char *)(a2 + 8) = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityAttachmentToken(void *a1)
{
  return AccessibilityAttachmentToken.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityAttachmentToken(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)a1 == *(void *)a2;
  if (!*(unsigned char *)(a2 + 8)) {
    BOOL v2 = 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return v2;
  }
  else {
    return (*(void *)a1 == *(void *)a2) & ~*(unsigned __int8 *)(a2 + 8);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  }
  return result;
}

void *assignWithCopy for AccessibilityAttachment(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for AccessibilityAttachment(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAttachmentToken()
{
  return &type metadata for AccessibilityAttachmentToken;
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(char **a1, char a2), uint64_t a2, uint64_t a3))(char **a1, char a2)
{
  unint64_t result = (void (*)(char **, char))malloc(0x48uLL);
  *a1 = result;
  *((void *)result + 7) = a3;
  *((void *)result + 8) = v3;
  *((void *)result + 6) = a2;
  uint64_t v8 = *(void *)(v3 + 24);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v8 >= a3)
  {
    int v9 = result;
    uint64_t v11 = *(void *)(v3 + 8);
    uint64_t v10 = *(void *)(v3 + 16);
    *((unsigned char *)v9 + 16) = *(unsigned char *)v3;
    *((void *)v9 + 3) = v11;
    *((void *)v9 + 4) = v10;
    *((void *)v9 + 5) = v8;
    *(void *)int v9 = a2;
    *((void *)v9 + 1) = a3;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_7:
  __break(1u);
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (char **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *((void *)*a1 + 7);
  uint64_t v4 = *((void *)*a1 + 8);
  uint64_t v6 = *((void *)v3 + 6);
  if (a2)
  {
    char v7 = v3[16];
    long long v8 = *(_OWORD *)(v3 + 24);
    uint64_t v9 = *((void *)v3 + 5);
    long long v11 = *(_OWORD *)v3;
    char v12 = v7;
    long long v13 = v8;
    uint64_t v14 = v9;
    uint64_t v10 = &v11;
  }
  else
  {
    uint64_t v10 = (long long *)v3;
  }
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v4, v6, v5, (uint64_t)v10);
  swift_bridgeObjectRelease();

  free(v3);
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(uint64_t **a1, char a2), uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  unint64_t result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1 = result;
  *((void *)result + 4) = a3;
  *((void *)result + 5) = v3;
  *((void *)result + 3) = a2;
  if (a2 < 0 || (long long v8 = result, result = *v3, *((void *)*v3 + 2) < a3))
  {
    __break(1u);
  }
  else
  {
    *((void *)v8 + 1) = a3;
    *((void *)v8 + 2) = result;
    *(void *)long long v8 = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v6 = v3[3];
  if (a2)
  {
    uint64_t v7 = v3[2];
    long long v9 = *(_OWORD *)v3;
    uint64_t v10 = v7;
    long long v8 = (uint64_t *)&v9;
  }
  else
  {
    long long v8 = v3;
  }
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v4, v6, v5, v8);
  swift_bridgeObjectRelease();

  free(v3);
}

uint64_t static PreferenceKey.readableName.getter()
{
  uint64_t v0 = _typeName(_:qualified:)();
  unint64_t v2 = v1;
  uint64_t v19 = v0;
  unint64_t v20 = v1;
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 7955787;
  v3._object = (void *)0xE300000000000000;
  Swift::Bool v4 = String.hasSuffix(_:)(v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(3uLL);
    uint64_t v0 = v19;
    unint64_t v2 = v20;
  }
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 0x6E65726566657250;
  v5._object = (void *)0xEA00000000006563;
  Swift::Bool v6 = String.hasSuffix(_:)(v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(0xAuLL);
    uint64_t v0 = v19;
    unint64_t v2 = v20;
  }
  uint64_t v7 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v7 = v0 & 0xFFFFFFFFFFFFLL;
  }
  if (v7) {
    return v0;
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = _typeName(_:qualified:)();
  unint64_t v10 = v9;
  uint64_t v19 = v8;
  unint64_t v20 = v9;
  v18[0] = 46;
  v18[1] = 0xE100000000000000;
  MEMORY[0x270FA5388](v8);
  v17[2] = v18;
  swift_bridgeObjectRetain_n();
  long long v11 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(1, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v17, v8, v10);
  swift_bridgeObjectRelease();
  if (v11[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v11[2] >= 2uLL)
  {
    uint64_t v13 = v11[8];
    uint64_t v14 = v11[9];
    uint64_t v15 = v11[10];
    uint64_t v16 = v11[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v0 = MEMORY[0x24C522930](v13, v14, v15, v16);
    swift_bridgeObjectRelease();
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t PreferenceKeys.contains(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    Swift::String v3 = (uint64_t *)(*(void *)v1 + 32);
    uint64_t v4 = v2 - 1;
    do
    {
      uint64_t v5 = *v3;
      v3 += 2;
      uint64_t v2 = v5 == a1;
    }
    while (v5 != a1 && v4-- != 0);
  }
  return v2;
}

uint64_t static HostPreferencesKey.makeNodeId()()
{
  return ++static HostPreferencesKey.nodeId;
}

uint64_t static PreferenceKey<>.defaultValue.getter()
{
  return dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
}

BOOL PreferenceKeys.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t PreferenceKeys.startIndex.getter()
{
  return 0;
}

unint64_t PreferenceKeys.subscript.getter(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v1 + 16) > result)
  {
    return *(void *)(*(void *)v1 + 16 * result + 32);
  }
  __break(1u);
  return result;
}

uint64_t key path setter for PreferenceKeys.subscript(_:) : PreferenceKeys(long long *a1, void **a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  long long v7 = *a1;
  uint64_t v5 = *a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = (void *)result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v5[2])
  {
    *(_OWORD *)&v5[2 * v4 + 4] = v7;
    *a2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t PreferenceKeys.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v7 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
  long long v7 = (void *)result;
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v7[2] > a3)
  {
    unint64_t v9 = &v7[2 * a3];
    v9[4] = a1;
    v9[5] = a2;
    *Swift::String v3 = v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*PreferenceKeys.subscript.modify(uint64_t (*result)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  *((void *)result + 2) = a2;
  *((void *)result + 3) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(*(void *)v2 + 16 * a2 + 32);
    return PreferenceKeys.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t PreferenceKeys.subscript.modify(uint64_t *a1, char a2)
{
  unint64_t v4 = (void **)a1[3];
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  long long v7 = *v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      long long v7 = (void *)result;
    }
    unint64_t v9 = a1[2];
    if (v7[2] > v9) {
      goto LABEL_9;
    }
    __break(1u);
  }
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    long long v7 = (void *)result;
  }
  unint64_t v9 = a1[2];
  if (v7[2] > v9)
  {
LABEL_9:
    unint64_t v10 = &v7[2 * v9];
    v10[4] = v6;
    v10[5] = v5;
    void *v4 = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PreferenceKeys(long long *a1, unint64_t *a2)
{
  long long v6 = *a1;
  unint64_t v3 = *a2;
  unint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  unint64_t v4 = (void *)result;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v3 < v4[2])
  {
    *(_OWORD *)&v4[2 * v3 + 4] = v6;
    *uint64_t v2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PreferenceKeys(uint64_t (**a1)(uint64_t *a1, char a2), unint64_t *a2))()
{
  unint64_t v4 = (uint64_t (*)(uint64_t *, char))malloc(0x28uLL);
  *a1 = v4;
  *((void *)v4 + 4) = PreferenceKeys.subscript.modify(v4, *a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PreferenceKeys(uint64_t *a1, uint64_t *a2)
{
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], a1);

  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PreferenceKeys(void (***a1)(uint64_t **a1, char a2), uint64_t *a2))()
{
  unint64_t v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance PreferenceKeys@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance PreferenceKeys(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance PreferenceKeys()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void static HostPreferencesKey.defaultValue.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t static HostPreferencesKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t v3 = v4;
  PreferenceValues.combine(with:)((SwiftUI::PreferenceValues)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 24);
  if (v4 < 0) {
    goto LABEL_49;
  }
  uint64_t v5 = a2;
  if (a2 < 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a3)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v8 = *(void *)a4;
  uint64_t v7 = *(void *)(a4 + 8);
  if (a2 == a3)
  {
LABEL_40:
    if (v8 == v7) {
      return result;
    }
    goto LABEL_52;
  }
  if (v8 != v7)
  {
    if (a2 < a3)
    {
      char v9 = *(unsigned char *)(a4 + 16);
      int v10 = *(unsigned __int8 *)result;
      uint64_t v26 = *(void *)(a4 + 32);
      uint64_t v27 = *(void *)(a4 + 24);
      uint64_t v25 = *(void *)(a4 + 8);
      uint64_t v24 = v8 + a3 - a2;
      if (v4 <= a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *(void *)(result + 24);
      }
      uint64_t v12 = a3 - 1;
      while (1)
      {
        if (v8 >= v7)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (v9)
        {
          if (v8 < 0) {
            goto LABEL_46;
          }
          if (v8 >> 6 >= *(void *)(v26 + 16)) {
            goto LABEL_47;
          }
          uint64_t v13 = *(void *)(v26 + 32 + 8 * (v8 >> 6)) & (1 << v8);
          if (!v10)
          {
LABEL_16:
            if ((unint64_t)v5 < 0x40)
            {
              uint64_t v14 = 1 << v5;
              if (!v13) {
                goto LABEL_30;
              }
LABEL_18:
              uint64_t v15 = *(void *)(result + 8) | v14;
            }
            else
            {
              uint64_t v14 = 0;
              if (v13) {
                goto LABEL_18;
              }
LABEL_30:
              uint64_t v15 = *(void *)(result + 8) & ~v14;
            }
            *(void *)(result + 8) = v15;
            goto LABEL_32;
          }
        }
        else
        {
          if (v8 < 0) {
            goto LABEL_55;
          }
          uint64_t v16 = 1 << v8;
          if ((unint64_t)v8 >= 0x40) {
            uint64_t v16 = 0;
          }
          uint64_t v13 = v16 & v27;
          if (!v10) {
            goto LABEL_16;
          }
        }
        uint64_t v17 = result;
        uint64_t v18 = *(void **)(result + 16);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if (v5 < 0) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = (void *)result;
          if (v5 < 0)
          {
LABEL_38:
            __break(1u);
LABEL_39:
            uint64_t v8 = v24;
            goto LABEL_40;
          }
        }
        if (v5 >> 6 >= v18[2]) {
          goto LABEL_48;
        }
        uint64_t v19 = &v18[v5 >> 6];
        uint64_t v20 = 1 << (v5 & 0x3F);
        uint64_t v21 = v19[4];
        uint64_t v22 = v21 & ~v20;
        uint64_t v23 = v21 | v20;
        if (!v13) {
          uint64_t v23 = v22;
        }
        v19[4] = v23;
        *(void *)(v17 + 16) = v18;
        uint64_t result = v17;
        uint64_t v7 = v25;
LABEL_32:
        if (v11 == v5) {
          goto LABEL_43;
        }
        if (v8 >= *(void *)(a4 + 40)) {
          goto LABEL_44;
        }
        if (v12 == v5) {
          goto LABEL_39;
        }
        ++v8;
        ++v5;
        if (v7 == v8) {
          goto LABEL_45;
        }
      }
    }
    goto LABEL_54;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a2 < 0 || (uint64_t v4 = *(void **)result, *(void *)(*(void *)result + 16) < a3))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (a2 != a3)
  {
    if (v6 == v7)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (a2 >= a3)
    {
LABEL_31:
      __break(1u);
      return result;
    }
    uint64_t v12 = (void *)result;
    uint64_t v8 = 0;
    uint64_t v9 = a4[2];
    uint64_t v10 = ~a2 + a3;
    while (1)
    {
      unint64_t v11 = v6 + v8;
      if (v6 + v8 >= v7) {
        break;
      }
      if (v6 < 0) {
        goto LABEL_22;
      }
      if (v11 >= *(void *)(v9 + 16)) {
        goto LABEL_23;
      }
      long long v13 = *(_OWORD *)(v9 + 16 * v6 + 32 + 16 * v8);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        uint64_t v4 = (void *)result;
      }
      if ((unint64_t)(a2 + v8) >= v4[2]) {
        goto LABEL_24;
      }
      *(_OWORD *)&v4[2 * a2 + 4 + 2 * v8] = v13;
      if ((unint64_t)(a2 + v8) >= v4[2]) {
        goto LABEL_25;
      }
      if (v11 >= *(void *)(v9 + 16)) {
        goto LABEL_26;
      }
      if (v10 == v8)
      {
        *uint64_t v12 = v4;
        v6 += v8 + 1;
        goto LABEL_19;
      }
      ++v8;
      if (!(v6 - v7 + v8)) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_19:
  if (v6 != v7)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  return result;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    long long v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  long long v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  uint64_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      long long v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, unint64_t a6)
{
  v47[3] = a4;
  if (a1 < 0) {
    goto LABEL_35;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = a5;
  if (!a1 || (unint64_t v45 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(a6, v44, a2 & 1, v10);
    swift_bridgeObjectRelease();
    a6 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_5:
    swift_release();
    return a6;
  }
  uint64_t v35 = a1;
  uint64_t v36 = v10;
  uint64_t v43 = (void *)MEMORY[0x263F8EE78];
  unint64_t v12 = a5;
  unint64_t v13 = a5;
  unint64_t v40 = a5;
  while (1)
  {
    v47[0] = Substring.subscript.getter();
    v47[1] = v14;
    char v15 = a3(v47);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a6;
    }
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    unint64_t v12 = Substring.index(after:)();
LABEL_9:
    if (v45 == v12 >> 14) {
      goto LABEL_24;
    }
  }
  if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v12 = Substring.index(after:)();
    *(void *)(v44 + 16) = v12;
    unint64_t v13 = v12;
    unint64_t v40 = v12;
    goto LABEL_9;
  }
  if (v12 >> 14 < v13 >> 14) {
    goto LABEL_34;
  }
  uint64_t v17 = Substring.subscript.getter();
  uint64_t v39 = v18;
  uint64_t v41 = v17;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
  }
  unint64_t v22 = v43[2];
  unint64_t v21 = v43[3];
  if (v22 >= v21 >> 1) {
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v43);
  }
  v43[2] = v22 + 1;
  uint64_t v23 = &v43[4 * v22];
  v23[4] = v41;
  v23[5] = v39;
  v23[6] = v38;
  v23[7] = v37;
  *(void *)(v36 + 16) = v43;
  uint64_t v24 = Substring.index(after:)();
  unint64_t v12 = v24;
  *(void *)(v44 + 16) = v24;
  if (v43[2] != v35)
  {
    unint64_t v13 = v24;
    unint64_t v40 = v24;
    goto LABEL_9;
  }
  unint64_t v40 = v24;
  unint64_t v13 = v24;
LABEL_24:
  if (v45 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
LABEL_33:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  if (v45 >= v40 >> 14)
  {
    uint64_t v25 = Substring.subscript.getter();
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    }
    unint64_t v33 = *(void *)(a6 + 16);
    unint64_t v32 = *(void *)(a6 + 24);
    if (v33 >= v32 >> 1) {
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, (void *)a6);
    }
    *(void *)(a6 + 16) = v33 + 1;
    uint64_t v34 = (void *)(a6 + 32 * v33);
    v34[4] = v25;
    v34[5] = v27;
    v34[6] = v29;
    v34[7] = v31;
    *(void *)(v36 + 16) = a6;
    goto LABEL_33;
  }
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    uint64_t v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t result;

  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = Substring.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    uint64_t v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t result, uint64_t a2)
{
  uint64_t v26 = a2;
  unint64_t v21 = (uint64_t (*)(BOOL *))result;
  uint64_t v4 = *((void *)v2 + 3);
  if (v4 < 1) {
    return 0;
  }
  int v5 = v2;
  unint64_t v6 = 0;
  uint64_t v7 = *((void *)v2 + 3);
  while (1)
  {
    int v8 = *v5;
    uint64_t v9 = *((void *)v5 + 1);
    uint64_t v10 = *((void *)v5 + 2);
    if (v8 == 1) {
      break;
    }
    uint64_t v12 = 1 << v6;
    if (v6 >= 0x40) {
      uint64_t v12 = 0;
    }
    uint64_t v11 = v9 & v12;
LABEL_9:
    v22[0] = v11 != 0;
    uint64_t result = v21(v22);
    if (v3) {
      return v6;
    }
    if (result)
    {
      if (v4 < 1 || v4 > v7) {
        goto LABEL_37;
      }
      if (v6 >= v4 - 1) {
        return v6;
      }
      uint64_t v20 = v10;
      uint64_t v13 = v10 + 32;
      uint64_t v14 = v4 - 2;
      --v4;
      while (1)
      {
        if (v8)
        {
          if ((unint64_t)v4 >> 6 >= *(void *)(v20 + 16)) {
            goto LABEL_35;
          }
          uint64_t v15 = *(void *)(v13 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4);
        }
        else
        {
          uint64_t v16 = 1 << v4;
          if ((unint64_t)v4 >= 0x40) {
            uint64_t v16 = 0;
          }
          uint64_t v15 = v16 & v9;
        }
        v22[0] = v15 != 0;
        uint64_t result = v21(v22);
        if ((result & 1) == 0) {
          break;
        }
        BOOL v17 = v4-- < 1;
        if (v17 || v14 >= v7)
        {
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        if ((uint64_t)v6 >= v4) {
          return v6;
        }
      }
      v22[0] = v8;
      uint64_t v23 = v9;
      uint64_t v24 = v20;
      uint64_t v25 = v7;
      char v18 = BitVector.subscript.getter(v6);
      v22[0] = v8;
      uint64_t v23 = v9;
      uint64_t v24 = v20;
      uint64_t v25 = v7;
      char v19 = BitVector.subscript.getter(v4);
      int v5 = v2;
      BitVector.subscript.setter(v19 & 1, v6);
      uint64_t result = BitVector.subscript.setter(v18 & 1, v4);
      uint64_t v7 = *((void *)v2 + 3);
      if ((uint64_t)v6 >= v7) {
        goto LABEL_39;
      }
    }
    else if ((uint64_t)v6 >= v7)
    {
      goto LABEL_38;
    }
    if ((uint64_t)++v6 >= v4) {
      return v6;
    }
  }
  if (v6 >> 6 < *(void *)(v10 + 16))
  {
    uint64_t v11 = *(void *)(v10 + 8 * (v6 >> 6) + 32) & (1 << v6);
    goto LABEL_9;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t result)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  if (v4)
  {
    int v5 = (uint64_t (*)(long long *))result;
    unint64_t v6 = 0;
    while (v6 < v3[2])
    {
      long long v12 = *(_OWORD *)&v3[2 * v6 + 4];
      uint64_t result = v5(&v12);
      if (v2) {
        return v6;
      }
      int64_t v7 = v3[2];
      if (result)
      {
        if (v4 > v7) {
          goto LABEL_30;
        }
        if ((uint64_t)v6 >= v4 - 1) {
          return v6;
        }
        for (uint64_t i = v4 + 1; ; --i)
        {
          uint64_t v4 = i - 2;
          if (i - 2 >= v7)
          {
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
          long long v12 = *(_OWORD *)&v3[2 * i];
          uint64_t result = v5(&v12);
          int64_t v7 = v3[2];
          if ((result & 1) == 0) {
            break;
          }
          if (v4 > v7) {
            goto LABEL_28;
          }
          uint64_t v9 = i - 3;
          if ((uint64_t)v6 >= v9) {
            return v6;
          }
        }
        if (v6 >= v7) {
          goto LABEL_32;
        }
        if (v4 >= v7) {
          goto LABEL_33;
        }
        long long v10 = *(_OWORD *)&v3[2 * v6 + 4];
        long long v11 = *(_OWORD *)&v3[2 * i];
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v3 = (void *)result;
        }
        if (v6 >= v3[2]) {
          goto LABEL_34;
        }
        *(_OWORD *)&v3[2 * v6 + 4] = v11;
        *(void *)uint64_t v1 = v3;
        if (v4 >= v3[2]) {
          goto LABEL_35;
        }
        *(_OWORD *)&v3[2 * i] = v10;
        *(void *)uint64_t v1 = v3;
        if (v6 >= v3[2]) {
          goto LABEL_36;
        }
      }
      else if (v6 >= v7)
      {
        goto LABEL_31;
      }
      if ((uint64_t)++v6 >= v4) {
        return v6;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PreferenceKeys()
{
  return lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PreferenceKeys> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in PreferenceKeys()
{
  return lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PreferenceKeys> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys);
}

uint64_t lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<PreferenceKeys>(255, &lazy cache variable for type metadata for Slice<PreferenceKeys>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PreferenceKeys()
{
  return lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PreferenceKeys> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PreferenceKeys()
{
  return lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<PreferenceKeys> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<PreferenceKeys>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PreferenceKeys()
{
  return lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<PreferenceKeys> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<PreferenceKeys>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<PreferenceKeys> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<PreferenceKeys>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<PreferenceKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    unint64_t v7 = a3(a1, &type metadata for PreferenceKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_2460D66A0@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)result + 16))
  {
    *a3 = *(_OWORD *)(*(void *)result + 16 * v3 + 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_2460D66D4()
{
  return 0;
}

uint64_t dispatch thunk of static PreferenceKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PreferenceKey.reduce(value:nextValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static PreferenceKey._includesRemovedValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static PreferenceKey._isReadableByHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PreferenceKeyVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for HostPreferencesKey()
{
  return &type metadata for HostPreferencesKey;
}

uint64_t sub_2460D6758()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_2460D6790()
{
  return swift_deallocObject();
}

uint64_t specialized ContentSizedSceneFeature.init(graph:delegate:callback:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = MEMORY[0x263F8EE78];
  *(void *)(a4 + 8) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  id v9 = (id)AGSubgraphGetCurrent();
  swift_beginAccess();
  AGSubgraphSetCurrent();
  *(void *)(a4 + 24) = a1;
  swift_unknownObjectWeakAssign();
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = a3;
  swift_retain();
  AGCreateWeakAttribute();
  specialized Dictionary.init(dictionaryLiteral:)(v8);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for [_ProposedSize : Transaction]();
  type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(0, &lazy cache variable for type metadata for SizeThatFitsTransactions<SizeThatFitsMeasurer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for SizeThatFitsTransactions);
  lazy protocol witness table accessor for type SizeThatFitsTransactions<SizeThatFitsMeasurer> and conformance SizeThatFitsTransactions<A>();
  LODWORD(a2) = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)a4 = a2;
  AGGraphSetFlags();
  AGSubgraphSetCurrent();

  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t ContentSizedSceneFeature.init(graph:delegate:callback:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  ViewGraphGeometryObservers.init()((uint64_t *)(a4 + 8));
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  id v8 = (id)AGSubgraphGetCurrent();
  swift_beginAccess();
  AGSubgraphSetCurrent();
  *(void *)(a4 + 24) = a1;
  swift_unknownObjectWeakAssign();
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = a3;
  swift_retain();
  v13[0] = 0;
  v13[1] = AGCreateWeakAttribute();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = default argument 4 of SizeThatFitsTransactions.init(layoutComputer:safeAreaInsets:layoutDirection:transaction:store:)();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Dictionary();
  uint64_t v16 = type metadata accessor for SizeThatFitsTransactions();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v14, v16, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  swift_bridgeObjectRelease();
  *(_DWORD *)a4 = v12;
  AGGraphSetFlags();
  AGSubgraphSetCurrent();

  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t default argument 4 of SizeThatFitsTransactions.init(layoutComputer:safeAreaInsets:layoutDirection:transaction:store:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)()
{
  return specialized ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)();
}

uint64_t closure #1 in ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)(uint64_t *a1, _OWORD *a2)
{
  uint64_t KeyPath = swift_getKeyPath();
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  v7[2] = a2[2];
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v7);
  specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v7);
  swift_release();
  a1[2] = AGCreateWeakAttribute();
  *a1 = AGCreateWeakAttribute();
  uint64_t result = AGCreateWeakAttribute();
  a1[3] = result;
  return result;
}

uint64_t ContentSizedSceneFeature.uninstantiate(graph:)()
{
  return specialized ContentSizedSceneFeature.uninstantiate(graph:)();
}

uint64_t closure #1 in ContentSizedSceneFeature.uninstantiate(graph:)(uint64_t *a1)
{
  a1[2] = AGCreateWeakAttribute();
  *a1 = AGCreateWeakAttribute();
  uint64_t result = AGCreateWeakAttribute();
  a1[3] = result;
  return result;
}

uint64_t ContentSizedSceneFeature.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ViewGraphGeometryObservers();
  return ViewGraphGeometryObservers.needsUpdate(graph:)(a1, v2) & 1;
}

uint64_t ContentSizedSceneFeature.update(graph:)(uint64_t a1, uint64_t a2)
{
  return specialized ContentSizedSceneFeature.update(graph:)(a2);
}

uint64_t ContentSizedSceneFeature.firstTransaction<A>(for:)(void (**a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v37 = a1;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v33 = *(void *)(a2 + 16);
  uint64_t v34 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void (**)(char *, char *, uint64_t))swift_getAssociatedTypeWitness();
  uint64_t v31 = (uint64_t)*(v15 - 1);
  MEMORY[0x270FA5388](v15);
  BOOL v17 = (char *)&v30 - v16;
  if (specialized static UserDefaultKeyedFeature.isEnabled.getter()) {
    ContentSizedSceneFeature.checkForMultipleTransactions<A>(for:)(v37, v35, a3);
  }
  (*(void (**)(char *, void, uint64_t))(v11 + 16))(v14, v37, a3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v36 = v17;
  uint64_t v37 = v15;
  uint64_t v32 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v19 = v30;
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v20(v10, 1, AssociatedTypeWitness) == 1)
  {
LABEL_7:
    (*(void (**)(char *, void (**)(char *, char *, uint64_t)))(v31 + 8))(v36, v37);
    return 1;
  }
  else
  {
    uint64_t v21 = v19 + 32;
    unint64_t v22 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v23 = (void (**)(char *, uint64_t))(v19 + 8);
    while (1)
    {
      uint64_t v24 = v21;
      v22(v7, v10, AssociatedTypeWitness);
      uint64_t v25 = specialized ContentSizedSceneFeature.transactions.getter();
      uint64_t v26 = swift_getAssociatedConformanceWitness();
      swift_bridgeObjectRetain();
      MEMORY[0x24C522390](&v38, v7, v25, AssociatedTypeWitness, &type metadata for Transaction, v26);
      swift_bridgeObjectRelease();
      (*v23)(v7, AssociatedTypeWitness);
      uint64_t v27 = v38;
      if (v38 != 1) {
        break;
      }
      dispatch thunk of IteratorProtocol.next()();
      int v28 = v20(v10, 1, AssociatedTypeWitness);
      uint64_t v21 = v24;
      if (v28 == 1) {
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, void (**)(char *, char *, uint64_t)))(v31 + 8))(v36, v37);
  }
  return v27;
}

uint64_t ContentSizedSceneFeature.checkForMultipleTransactions<A>(for:)(void (**a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  unsigned int v53 = a1;
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  uint64_t v44 = v5;
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v42 - v6;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v52 = a2;
  uint64_t v50 = v9;
  uint64_t v51 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v42 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a3;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v42 - v22;
  uint64_t result = (uint64_t)specialized static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    uint64_t v43 = v7;
    (*(void (**)(char *, void, uint64_t))(v16 + 16))(v19, v53, v20);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v45 = 0;
    unint64_t v48 = (unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
    uint64_t v49 = AssociatedConformanceWitness;
    unsigned int v53 = (void (**)(char *, char *, uint64_t))(v47 + 32);
    uint64_t v26 = (void (**)(char *, uint64_t))(v47 + 8);
    int v27 = 1;
    do
    {
      while (1)
      {
        LODWORD(v47) = v27;
        int v28 = v23;
        dispatch thunk of IteratorProtocol.next()();
        uint64_t v29 = *v48;
        if ((*v48)(v15, 1, AssociatedTypeWitness) == 1) {
          return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v28, v21);
        }
        uint64_t v30 = *v53;
        while (1)
        {
          uint64_t v31 = v21;
          v30(v12, v15, AssociatedTypeWitness);
          uint64_t v32 = specialized ContentSizedSceneFeature.transactions.getter();
          uint64_t v33 = swift_getAssociatedConformanceWitness();
          swift_bridgeObjectRetain();
          MEMORY[0x24C522390](&v54, v12, v32, AssociatedTypeWitness, &type metadata for Transaction, v33);
          swift_bridgeObjectRelease();
          (*v26)(v12, AssociatedTypeWitness);
          if (v54 != 1) {
            break;
          }
          uint64_t v21 = v31;
          dispatch thunk of IteratorProtocol.next()();
          if (v29(v15, 1, AssociatedTypeWitness) == 1) {
            return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v28, v21);
          }
        }
        uint64_t v21 = v31;
        uint64_t v34 = v54 ? *(void *)(v54 + 64) : 0;
        uint64_t v23 = v28;
        outlined consume of Transaction?(v54);
        if ((v47 & 1) == 0) {
          break;
        }
        int v27 = 0;
        uint64_t v45 = v34;
      }
      int v27 = 0;
    }
    while (v45 == v34);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v21);
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v35 = __swift_project_value_buffer(v44, (uint64_t)static Log.resize);
    uint64_t v36 = (uint64_t)v43;
    outlined init with copy of Logger?(v35, (uint64_t)v43);
    uint64_t v37 = type metadata accessor for Logger();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
    {
      return outlined destroy of Logger?(v36);
    }
    else
    {
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_245728000, v39, v40, "Multiple resize animations, picking one", v41, 2u);
        MEMORY[0x24C527CC0](v41, -1, -1);
      }

      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
    }
  }
  return result;
}

uint64_t specialized ContentSizedSceneFeature.addObserver(for:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  char v8 = a2 & 1;
  char v9 = a4 & 1;
  memset(v13, 0, sizeof(v13));
  char v14 = 2;
  uint64_t v15 = _ViewInputs.base.modify;
  uint64_t v16 = 0;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(v5 + 8);
  *(void *)(v5 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a1, v8, a3, v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 8) = v12;
  swift_bridgeObjectRelease();
  type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(0, &lazy cache variable for type metadata for SizeThatFitsTransactions<SizeThatFitsMeasurer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for SizeThatFitsTransactions);
  return AGGraphMutateAttribute();
}

unint64_t specialized closure #1 in ContentSizedSceneFeature.stopObserving(proposal:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 1, a4, a5 & 1);
  if (v7)
  {
    unint64_t v8 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    specialized _NativeDictionary._delete(at:)(v8, v10);
    *(void *)(a1 + 32) = v10;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance ContentSizedSceneFeature<A>()
{
  return specialized ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)();
}

uint64_t protocol witness for ViewGraphFeature.uninstantiate(graph:) in conformance ContentSizedSceneFeature<A>()
{
  return specialized ContentSizedSceneFeature.uninstantiate(graph:)();
}

uint64_t protocol witness for ViewGraphFeature.update(graph:) in conformance ContentSizedSceneFeature<A>(uint64_t a1, uint64_t a2)
{
  return specialized ContentSizedSceneFeature.update(graph:)(a2);
}

uint64_t static ContentSizedSceneFeature<>.window(graph:delegate:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_retain();
  swift_unknownObjectRetain();

  return specialized ContentSizedSceneFeature.init(graph:delegate:callback:)(a1, (uint64_t)closure #1 in static ContentSizedSceneFeature<>.window(graph:delegate:), 0, a2);
}

unint64_t closure #1 in static ContentSizedSceneFeature<>.window(graph:delegate:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = result;
  if (one-time initialization token for zero != -1) {
    unint64_t result = swift_once();
  }
  long long v4 = 0uLL;
  if (*(void *)(v2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(static _ProposedSize.zero, byte_268EF9428, qword_268EF9430, byte_268EF9438);
    if (v5)
    {
      char v6 = 0;
      long long v4 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * result);
    }
    else
    {
      char v6 = 1;
      long long v4 = 0uLL;
    }
  }
  else
  {
    char v6 = 1;
  }
  if (one-time initialization token for infinity != -1)
  {
    long long v11 = v4;
    unint64_t result = swift_once();
    long long v4 = v11;
  }
  long long v7 = 0uLL;
  if (*(void *)(v2 + 16))
  {
    long long v10 = v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(static _ProposedSize.infinity, byte_268EF9448, qword_268EF9450, byte_268EF9458);
    if (v8)
    {
      char v9 = 0;
      long long v7 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * result);
      long long v4 = v10;
    }
    else
    {
      char v9 = 1;
      long long v4 = v10;
      long long v7 = 0uLL;
    }
  }
  else
  {
    char v9 = 1;
  }
  *(_OWORD *)a2 = v4;
  *(unsigned char *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 40) = v9;
  return result;
}

uint64_t SizeThatFitsTransactions.layoutComputer.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    uint64_t result = swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t *SizeThatFitsTransactions.safeAreaInsets.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *result;
    uint64_t v4 = result[1];
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t *)outlined copy of SafeAreaInsets.OptionalValue?(v4);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t SizeThatFitsTransactions.transaction.getter()
{
  if (AGGraphGetWeakValue()) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

Swift::Void __swiftcall SizeThatFitsTransactions.updateValue()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v161 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v146 = *(char **)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v9 = (char *)&v100 - v8;
  uint64_t v141 = v7;
  v139 = *(void (***)(void, void, void))(v7 - 8);
  MEMORY[0x270FA5388](v10);
  v110 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  v117 = (char *)&v100 - v13;
  MEMORY[0x270FA5388](v14);
  v148 = (char *)&v100 - v15;
  MEMORY[0x270FA5388](v16);
  v118 = (char *)&v100 - v17;
  v150 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  v115 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v142 = (char *)&v100 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v119 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  v109 = (char *)&v100 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v151 = (char *)&v100 - v25;
  uint64_t v26 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v26 - 8);
  v143 = (char *)&v100 - v27;
  uint64_t v28 = *((void *)v1 + 4);
  v145 = v1 + 2;
  uint64_t v149 = v4;
  uint64_t v147 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v152 = AssociatedTypeWitness;
  char v31 = MEMORY[0x24C522310](v30, v22, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if (v31)
  {
    uint64_t v32 = type metadata accessor for Dictionary();
    if (AGGraphGetOutputValue())
    {
      uint64_t v33 = swift_bridgeObjectRetain();
      char v34 = MEMORY[0x24C522310](v33, v22, &type metadata for Transaction, AssociatedConformanceWitness);
      swift_bridgeObjectRelease();
      if (v34) {
        return;
      }
    }
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    *(void *)&long long v158 = Dictionary.init(dictionaryLiteral:)();
    MEMORY[0x270FA5388](v158);
    uint64_t v35 = &v100 - 4;
    *(&v100 - 2) = v3;
    *(&v100 - 1) = swift_getWitnessTable();
    uint64_t v37 = MEMORY[0x263F8EE60] + 8;
    uint64_t v38 = MEMORY[0x263F8E628];
    uint64_t v39 = MEMORY[0x263F8E658];
    os_log_type_t v40 = closure #1 in StatefulRule.value.setterpartial apply;
LABEL_14:
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v158, (uint64_t)v40, (uint64_t)v35, v32, v38, v37, v39, v36);
    swift_bridgeObjectRelease();
    return;
  }
  long long v41 = v2[1];
  long long v154 = *v2;
  long long v155 = v41;
  uint64_t v156 = v28;
  SizeThatFitsTransactions.layoutComputer.getter((uint64_t *)&v158);
  uint64_t v140 = v158;
  if (!(void)v158)
  {
LABEL_12:
    uint64_t v32 = type metadata accessor for Dictionary();
    if (AGGraphGetOutputValue()) {
      return;
    }
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    *(void *)&long long v158 = Dictionary.init(dictionaryLiteral:)();
    MEMORY[0x270FA5388](v158);
    uint64_t v35 = &v100 - 4;
    *(&v100 - 2) = v3;
    *(&v100 - 1) = swift_getWitnessTable();
    uint64_t v37 = MEMORY[0x263F8EE60] + 8;
    uint64_t v38 = MEMORY[0x263F8E628];
    uint64_t v39 = MEMORY[0x263F8E658];
    os_log_type_t v40 = partial apply for closure #1 in StatefulRule.value.setter;
    goto LABEL_14;
  }
  uint64_t v137 = *((void *)&v158 + 1);
  WeakValue = (unsigned __int8 *)AGGraphGetWeakValue();
  if (!WeakValue || (int v43 = *WeakValue, SizeThatFitsTransactions.safeAreaInsets.getter(&v158), !(void)v158))
  {
    swift_release();
    goto LABEL_12;
  }
  uint64_t v101 = *((void *)&v158 + 1);
  uint64_t v105 = v158;
  AGGraphClearUpdate();
  long long v44 = v2[1];
  long long v158 = *v2;
  long long v159 = v44;
  unint64_t v160 = *((void *)v2 + 4);
  uint64_t v106 = SizeThatFitsTransactions.transaction.getter();
  AGGraphSetUpdate();
  uint64_t v45 = *(void *)(v105 + 16);
  if (!v45)
  {
    float64x2_t v49 = 0uLL;
    float64x2_t v50 = 0uLL;
    uint64_t v46 = v146;
    uint64_t v47 = v139;
    goto LABEL_22;
  }
  uint64_t v46 = v146;
  uint64_t v47 = v139;
  if (v45 == 1)
  {
    uint64_t v48 = 0;
    float64x2_t v49 = 0uLL;
    float64x2_t v50 = 0uLL;
LABEL_20:
    uint64_t v57 = v45 - v48;
    uint64_t v58 = (float64x2_t *)(v105 + 40 * v48 + 40);
    do
    {
      float64x2_t v50 = vaddq_f64(v50, v58[1]);
      float64x2_t v49 = vaddq_f64(v49, *v58);
      uint64_t v58 = (float64x2_t *)((char *)v58 + 40);
      --v57;
    }
    while (v57);
    goto LABEL_22;
  }
  uint64_t v48 = v45 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v51 = (float64x2_t *)(v105 + 80);
  float64x2_t v49 = 0uLL;
  uint64_t v52 = v45 & 0x7FFFFFFFFFFFFFFELL;
  float64x2_t v50 = 0uLL;
  do
  {
    float64x2_t v53 = *(float64x2_t *)((char *)v51 - 24);
    float64x2_t v54 = *(float64x2_t *)((char *)v51 - 40);
    float64x2_t v55 = *v51;
    float64x2_t v56 = v51[1];
    v51 += 5;
    float64x2_t v50 = vaddq_f64(vaddq_f64(v50, v53), v56);
    float64x2_t v49 = vaddq_f64(vaddq_f64(v49, v54), v55);
    v52 -= 2;
  }
  while (v52);
  if (v45 != v48) {
    goto LABEL_20;
  }
LABEL_22:
  __n128 v129 = (__n128)v49;
  __n128 v128 = (__n128)v50;
  BOOL v59 = v49.f64[1] != v50.f64[1];
  if ((v43 & v59) != 0) {
    double v60 = v49.f64[1];
  }
  else {
    double v60 = v50.f64[1];
  }
  if ((v43 & v59) != 0) {
    double v61 = v50.f64[1];
  }
  else {
    double v61 = v49.f64[1];
  }
  uint64_t v108 = type metadata accessor for Dictionary();
  if (AGGraphGetOutputValue())
  {
    uint64_t v62 = swift_bridgeObjectRetain();
  }
  else
  {
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    uint64_t v62 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v63 = v143;
  uint64_t v153 = v62;
  uint64_t v103 = v3;
  if ((v28 & 0xC000000000000001) != 0)
  {
    unint64_t v64 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v113 = 0;
    uint64_t v65 = 0;
    uint64_t v120 = 0;
    unint64_t v66 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    _NativeDictionary.makeIterator()();
    uint64_t v113 = *((void *)&v158 + 1);
    unint64_t v64 = v158;
    uint64_t v120 = *((void *)&v159 + 1);
    uint64_t v65 = v159;
    unint64_t v66 = v160;
  }
  int v107 = 0;
  uint64_t v111 = v64 & 0x7FFFFFFFFFFFFFFFLL;
  v136 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56);
  uint64_t v102 = v65;
  int64_t v112 = (unint64_t)(v65 + 64) >> 6;
  v116 = (char **)(v119 + 16);
  v127 = (void (**)(char *, char *, uint64_t))(v119 + 32);
  uint64_t v126 = v149 + 48;
  v139 = (void (**)(void, void, void))(v150 + 16);
  v138 = (void (**)(char *, void, uint64_t, uint64_t))(v150 + 56);
  v125 = (void (**)(char *, char *, uint64_t))(v47 + 2);
  v124 = (unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48);
  v114 = (void (**)(char *, char *, uint64_t))(v150 + 32);
  v123 = (void (**)(char *, uint64_t))(v150 + 8);
  v122 = (void (**)(char *, uint64_t))(v47 + 1);
  v104 = (void (**)(char *, uint64_t))(v46 + 8);
  v131 = (void (**)(char *, uint64_t))(v119 + 8);
  v146 = v9;
  uint64_t v67 = v118;
  uint64_t v68 = v142;
  unint64_t v132 = v64;
  uint64_t v130 = AssociatedConformanceWitness;
  uint64_t v133 = v22;
  while ((v64 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.nextKey()()) {
      goto LABEL_68;
    }
    v150 = (char *)v66;
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
LABEL_61:
    (*v136)(v63, 0, 1, v22);
    v80 = v151;
    (*v127)(v151, v63, v22);
    v157[0] = v140;
    v157[1] = v137;
    (*(void (**)(char *, void *, __n128, double, __n128, double))(v149 + 48))(v80, v157, v129, v61, v128, v60);
    uint64_t v81 = v152;
    MEMORY[0x24C522390](v80, *v145, v22, v152, AssociatedConformanceWitness);
    v82 = v148;
    v134 = (void (*)(char *, char *, uint64_t))*v139;
    v134(v148, v68, v81);
    v135 = *v138;
    v135(v82, 0, 1, v81);
    v83 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    v84 = *v125;
    uint64_t v85 = v141;
    (*v125)(v9, v67, v141);
    v84(v83, v82, v85);
    v86 = *v124;
    if ((*v124)(v9, 1, v81) == 1)
    {
      uint64_t v69 = *v122;
      (*v122)(v82, v85);
      v69(v67, v85);
      unsigned int v70 = v86(v83, 1, v152);
      v71 = v123;
      uint64_t v68 = v142;
      if (v70 == 1)
      {
        v69(v146, v85);
        v72 = *v71;
        uint64_t v22 = v133;
        uint64_t AssociatedConformanceWitness = v130;
        unint64_t v66 = (unint64_t)v150;
LABEL_37:
        v72(v68, v152);
        (*v131)(v151, v22);
        goto LABEL_38;
      }
      goto LABEL_66;
    }
    uint64_t v87 = v152;
    v88 = v117;
    v84(v117, v9, v85);
    if (v86(v83, 1, v87) == 1)
    {
      v91 = *v122;
      (*v122)(v148, v85);
      v91(v118, v85);
      v71 = v123;
      (*v123)(v88, v87);
      uint64_t v68 = v142;
LABEL_66:
      (*v104)(v146, TupleTypeMetadata2);
      uint64_t v22 = v133;
      unint64_t v66 = (unint64_t)v150;
      goto LABEL_67;
    }
    v89 = v115;
    (*v114)(v115, v83, v87);
    swift_getAssociatedConformanceWitness();
    int v121 = dispatch thunk of static Equatable.== infix(_:_:)();
    v71 = v123;
    v72 = *v123;
    (*v123)(v89, v87);
    v90 = *v122;
    (*v122)(v148, v85);
    uint64_t v67 = v118;
    v90(v118, v85);
    v72(v88, v87);
    v90(v9, v85);
    uint64_t v22 = v133;
    uint64_t v68 = v142;
    unint64_t v66 = (unint64_t)v150;
    if (v121)
    {
      uint64_t AssociatedConformanceWitness = v130;
      goto LABEL_37;
    }
LABEL_67:
    v150 = *v116;
    v92 = v109;
    v93 = v151;
    ((void (*)(char *, char *, uint64_t))v150)(v109, v151, v22);
    v94 = v110;
    uint64_t v95 = v152;
    v134(v110, v68, v152);
    int v107 = 1;
    v135(v94, 0, 1, v95);
    uint64_t AssociatedConformanceWitness = v130;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    ((void (*)(char *, char *, uint64_t))v150)(v92, v93, v22);
    v157[0] = v106;
    outlined copy of SafeAreaInsets.OptionalValue?(v106);
    Dictionary.subscript.setter();
    uint64_t v96 = v95;
    uint64_t v67 = v118;
    (*v71)(v68, v96);
    (*v131)(v93, v22);
LABEL_38:
    char v9 = v146;
    uint64_t v63 = v143;
    unint64_t v64 = v132;
  }
  if (v66)
  {
    unint64_t v73 = __clz(__rbit64(v66));
    uint64_t v74 = (v66 - 1) & v66;
    unint64_t v75 = v73 | (v120 << 6);
LABEL_60:
    v150 = (char *)v74;
    (*(void (**)(char *, unint64_t, uint64_t))(v119 + 16))(v63, *(void *)(v64 + 48) + *(void *)(v119 + 72) * v75, v22);
    goto LABEL_61;
  }
  int64_t v76 = v120 + 1;
  if (__OFADD__(v120, 1)) {
    __break(1u);
  }
  if (v76 >= v112) {
    goto LABEL_68;
  }
  unint64_t v77 = *(void *)(v113 + 8 * v76);
  uint64_t v78 = v120 + 1;
  if (v77) {
    goto LABEL_59;
  }
  uint64_t v78 = v120 + 2;
  if (v120 + 2 >= v112) {
    goto LABEL_68;
  }
  unint64_t v77 = *(void *)(v113 + 8 * v78);
  if (v77) {
    goto LABEL_59;
  }
  uint64_t v78 = v120 + 3;
  if (v120 + 3 >= v112) {
    goto LABEL_68;
  }
  unint64_t v77 = *(void *)(v113 + 8 * v78);
  if (v77) {
    goto LABEL_59;
  }
  uint64_t v78 = v120 + 4;
  if (v120 + 4 >= v112) {
    goto LABEL_68;
  }
  unint64_t v77 = *(void *)(v113 + 8 * v78);
  if (v77) {
    goto LABEL_59;
  }
  uint64_t v78 = v120 + 5;
  if (v120 + 5 >= v112) {
    goto LABEL_68;
  }
  unint64_t v77 = *(void *)(v113 + 8 * v78);
  if (v77)
  {
LABEL_59:
    uint64_t v74 = (v77 - 1) & v77;
    unint64_t v75 = __clz(__rbit64(v77)) + (v78 << 6);
    uint64_t v120 = v78;
    goto LABEL_60;
  }
  uint64_t v79 = v120 + 6;
  while (v112 != v79)
  {
    unint64_t v77 = *(void *)(v113 + 8 * v79++);
    if (v77)
    {
      uint64_t v78 = v79 - 1;
      goto LABEL_59;
    }
  }
LABEL_68:
  (*v136)(v63, 1, 1, v22);
  uint64_t OutputValue = outlined consume of Set<EventID>.Iterator._Variant();
  uint64_t v98 = v103;
  if ((v107 & 1) != 0 || (uint64_t OutputValue = AGGraphGetOutputValue()) == 0)
  {
    v157[0] = v153;
    MEMORY[0x270FA5388](OutputValue);
    *(&v100 - 2) = v98;
    *(&v100 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v157, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v100 - 4), v108, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v99);
    swift_release();
    outlined consume of Transaction?(v106);
    outlined consume of _SafeAreaInsetsModifier?(v105, v101);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of _SafeAreaInsetsModifier?(v105, v101);
    outlined consume of Transaction?(v106);
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeThatFitsTransactions<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t SceneSizeRestrictionUpdates.description.getter()
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for CGSize?, type metadata accessor for CGSize);
  v0._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 8236;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0x28776F646E69772ELL;
}

uint64_t ViewGraph.observeWindowResizeProposal(_:)(uint64_t a1)
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)v32 - v8;
  uint64_t v10 = *(void *)a1;
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  char v13 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  if (specialized ViewGraphFeatureBuffer.subscript.getter(*(_DWORD **)(v1 + 216), *(void *)(v1 + 224)))
  {
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v4, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v14, (uint64_t)v9);
    uint64_t v15 = type metadata accessor for Logger();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
    {
      outlined destroy of Logger?((uint64_t)v9);
    }
    else
    {
      uint64_t v36 = v12;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v35 = v10;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v34 = v24;
        uint64_t v33 = v23;
        *(_DWORD *)uint64_t v23 = 136315138;
        uint64_t v41 = v24;
        v32[1] = v23 + 4;
        uint64_t v37 = v35;
        char v38 = v11;
        uint64_t v39 = v36;
        char v40 = v13;
        uint64_t v25 = specialized static ResizeLogs.proposal(_:)((uint64_t)&v37);
        uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v10 = v35;
        swift_bridgeObjectRelease();
        uint64_t v27 = v33;
        _os_log_impl(&dword_245728000, v21, v22, "Observe %s", v33, 0xCu);
        uint64_t v28 = v34;
        swift_arrayDestroy();
        MEMORY[0x24C527CC0](v28, -1, -1);
        MEMORY[0x24C527CC0](v27, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
      uint64_t v12 = v36;
    }
    LOBYTE(v37) = v11;
    LOBYTE(v41) = v13;
    return specialized ContentSizedSceneFeature.addObserver(for:)(v10, v11, v12, v13);
  }
  else
  {
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v17 = __swift_project_value_buffer(v4, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v17, (uint64_t)v6);
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
    {
      return outlined destroy of Logger?((uint64_t)v6);
    }
    else
    {
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        char v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v31 = 0;
        _os_log_impl(&dword_245728000, v29, v30, "Missing ContentSizedWindowFeature", v31, 2u);
        MEMORY[0x24C527CC0](v31, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
  }
}

uint64_t ViewGraph.stopObservingWindowResizeProposal(_:)(uint64_t a1)
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v3);
  char v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v9 = (char *)&v35 - v8;
  uint64_t v10 = *(void *)a1;
  char v11 = *(unsigned char *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  char v13 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  if (specialized ViewGraphFeatureBuffer.subscript.getter(*(_DWORD **)(v1 + 216), *(void *)(v1 + 224)))
  {
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v14 = __swift_project_value_buffer(v4, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v14, (uint64_t)v9);
    uint64_t v15 = type metadata accessor for Logger();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
    {
      outlined destroy of Logger?((uint64_t)v9);
    }
    else
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      int v23 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v24 = swift_slowAlloc();
        int v38 = v23;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v37 = swift_slowAlloc();
        uint64_t v39 = v21;
        uint64_t v40 = v37;
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v35 = v25 + 4;
        uint64_t v36 = v25;
        uint64_t v42 = v10;
        char v43 = v11;
        uint64_t v44 = v12;
        char v45 = v13;
        uint64_t v26 = specialized static ResizeLogs.proposal(_:)((uint64_t)&v42);
        uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v28 = v36;
        _os_log_impl(&dword_245728000, v39, (os_log_type_t)v38, "Remove %s", v36, 0xCu);
        uint64_t v29 = v37;
        swift_arrayDestroy();
        MEMORY[0x24C527CC0](v29, -1, -1);
        MEMORY[0x24C527CC0](v28, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v15);
    }
    uint64_t v42 = v10;
    char v43 = v11;
    uint64_t v44 = v12;
    char v45 = v13;
    LOBYTE(v40) = v11;
    char v41 = v13;
    unint64_t v33 = specialized ViewGraphGeometryObservers.stopObserving(proposal:)(v10, v11, v12, v13);
    MEMORY[0x270FA5388](v33);
    *(&v35 - 2) = (uint8_t *)&v42;
    type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(0, &lazy cache variable for type metadata for SizeThatFitsTransactions<SizeThatFitsMeasurer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for SizeThatFitsTransactions);
    MEMORY[0x270FA5388](v34);
    *(&v35 - 2) = (uint8_t *)partial apply for specialized closure #1 in ContentSizedSceneFeature.stopObserving(proposal:);
    *(&v35 - 1) = (uint8_t *)(&v35 - 4);
    return AGGraphMutateAttribute();
  }
  else
  {
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v17 = __swift_project_value_buffer(v4, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v17, (uint64_t)v6);
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18) == 1)
    {
      return outlined destroy of Logger?((uint64_t)v6);
    }
    else
    {
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_245728000, v30, v31, "Missing ContentSizedWindowFeature", v32, 2u);
        MEMORY[0x24C527CC0](v32, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    }
  }
}

uint64_t ViewGraph.setWindowResizeDelegate(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v26 - v9;
  swift_beginAccess();
  char v11 = specialized ViewGraphFeatureBuffer.subscript.getter(*(_DWORD **)(v2 + 216), *(void *)(v2 + 224));
  if (v11)
  {
    uint64_t v12 = v11;
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v13 = __swift_project_value_buffer(v5, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v13, (uint64_t)v10);
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) == 1)
    {
      outlined destroy of Logger?((uint64_t)v10);
    }
    else
    {
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v22 = 0;
        _os_log_impl(&dword_245728000, v20, v21, "Adding SceneSizeRestrictionsDelegate", v22, 2u);
        MEMORY[0x24C527CC0](v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v14);
    }
    *((void *)v12 + 3) = a2;
    return swift_unknownObjectWeakAssign();
  }
  else
  {
    if (one-time initialization token for resize != -1) {
      swift_once();
    }
    uint64_t v16 = __swift_project_value_buffer(v5, (uint64_t)static Log.resize);
    outlined init with copy of Logger?(v16, (uint64_t)v7);
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17) == 1)
    {
      return outlined destroy of Logger?((uint64_t)v7);
    }
    else
    {
      int v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_245728000, v23, v24, "Missing ContentSizedWindowFeature", v25, 2u);
        MEMORY[0x24C527CC0](v25, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v17);
    }
  }
}

_DWORD *specialized ViewGraphFeatureBuffer.subscript.getter(_DWORD *result, unint64_t a2)
{
  unint64_t v2 = HIDWORD(a2);
  if (!HIDWORD(a2)) {
    return 0;
  }
  uint64_t v3 = result;
  if (result)
  {
    type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(0, &lazy cache variable for type metadata for ContentSizedSceneFeature<SizeThatFitsMeasurer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for ContentSizedSceneFeature);
    uint64_t v5 = v4;
    int v6 = 0;
    for (int i = v2 - 1; ; --i)
    {
      uint64_t v9 = (_DWORD *)((char *)v3 + v6);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 80))(v5, v5)) {
        break;
      }
      if (i) {
        v6 += v9[2];
      }
      else {
        int v6 = 0;
      }
      if (!(i | v6)) {
        return 0;
      }
    }
    return v9 + 4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SizeThatFitsTransactions()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized closure #2 in ContentSizedSceneFeature.addObserver(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  long long v7 = static SizeThatFitsMeasurer.invalidValue;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v4, v5, v6, isUniquelyReferenced_nonNull_native, *(double *)&v7, *((double *)&v7 + 1));
  *(void *)(a1 + 32) = v10;

  return swift_bridgeObjectRelease();
}

uint64_t specialized static SceneSizeRestrictionUpdates.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 16)) {
      return 0;
    }
    if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 40)) {
      return 0;
    }
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24) || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  return 1;
}

uint64_t specialized ContentSizedSceneFeature.uninstantiate(graph:)()
{
  return AGGraphMutateAttribute();
}

uint64_t specialized ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)()
{
  return AGGraphMutateAttribute();
}

uint64_t specialized ContentSizedSceneFeature.transactions.getter()
{
  return *(void *)AGGraphGetValue();
}

unint64_t specialized static ResizeLogs.animation(_:)(uint64_t a1)
{
  unint64_t v1 = 0xD000000000000010;
  if (a1 != 1)
  {
    uint64_t v3 = swift_retain_n();
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 72);
      swift_retain();
      outlined consume of Transaction?(a1);
      if (v5)
      {
        v9[0] = 0;
        v9[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        uint64_t v6 = swift_bridgeObjectRelease();
        unint64_t v10 = 0xD00000000000001BLL;
        unint64_t v11 = 0x8000000246225EC0;
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v5 + 88))(v9, v6);
        type metadata accessor for CustomAnimation();
        v7._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v7);
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Transaction?(a1);
        return v10;
      }
    }
    else
    {
      outlined consume of Transaction?(a1);
    }
    outlined consume of Transaction?(a1);
    return 0xD00000000000001DLL;
  }
  return v1;
}

uint64_t specialized ContentSizedSceneFeature.update(graph:)(uint64_t a1)
{
  void (*v13)(void (**__return_ptr)(char *, char *, uint64_t), void (*)(char *, char *, uint64_t));
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  void v36[2];
  unint64_t v37;
  os_log_t v38;
  int v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  int v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  unsigned __int8 v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t vars8;

  uint64_t v2 = v1;
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  Swift::String v7 = (char *)v36 - v6;
  type metadata accessor for ViewGraphGeometryObservers();
  uint64_t v8 = (void (*)(char *, char *, uint64_t))ViewGraphGeometryObservers.notifySizes()();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if (MEMORY[0x24C522310](v8, AssociatedTypeWitness, v10, AssociatedConformanceWitness))
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void (**)(void (**__return_ptr)(char *, char *, uint64_t), void (*)(char *, char *, uint64_t)))(v1 + 32);
    swift_retain();
    v13(&v50, v8);
    swift_release();
    uint64_t v14 = v50;
    uint64_t v46 = v51;
    char v45 = v52;
    char v43 = v54;
    uint64_t v44 = v53;
    uint64_t v42 = v55;
    float64x2_t v50 = v8;
    uint64_t v15 = type metadata accessor for Dictionary.Keys();
    swift_getWitnessTable();
    uint64_t v16 = ContentSizedSceneFeature.firstTransaction<A>(for:)(&v50, a1, v15);
    swift_bridgeObjectRelease();
    if (specialized static UserDefaultKeyedFeature.isEnabled.getter())
    {
      uint64_t v17 = specialized static ResizeLogs.animation(_:)(v16);
      uint64_t v19 = v18;
      if (one-time initialization token for resize != -1) {
        swift_once();
      }
      uint64_t v20 = __swift_project_value_buffer(v5, (uint64_t)static Log.resize);
      outlined init with copy of Logger?(v20, (uint64_t)v7);
      os_log_type_t v21 = type metadata accessor for Logger();
      os_log_type_t v22 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
      {
        swift_bridgeObjectRelease();
        outlined destroy of Logger?((uint64_t)v7);
      }
      else
      {
        swift_bridgeObjectRetain();
        int v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        uint64_t v25 = v24;
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v26 = swift_slowAlloc();
          uint64_t v39 = v25;
          unint64_t v27 = v26;
          uint64_t v28 = swift_slowAlloc();
          uint64_t v40 = v28;
          *(_DWORD *)unint64_t v27 = 136315394;
          v36[1] = v27 + 4;
          uint64_t v47 = 0x28776F646E69772ELL;
          uint64_t v48 = 0xE800000000000000;
          float64x2_t v49 = v28;
          float64x2_t v50 = v14;
          uint64_t v51 = v46;
          uint64_t v52 = v45;
          type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for CGSize?, type metadata accessor for CGSize);
          uint64_t v37 = v17;
          v29._countAndFlagsBits = String.init<A>(describing:)();
          char v41 = v14;
          int v38 = v23;
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          v30._countAndFlagsBits = 8236;
          v30._object = (void *)0xE200000000000000;
          String.append(_:)(v30);
          float64x2_t v50 = v44;
          uint64_t v51 = v43;
          uint64_t v52 = v42;
          v31._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          float64x2_t v50 = (void (*)(char *, char *, uint64_t))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v49);
          uint64_t v14 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2080;
          swift_bridgeObjectRetain();
          float64x2_t v50 = (void (*)(char *, char *, uint64_t))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v19, &v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v32 = v38;
          _os_log_impl(&dword_245728000, v38, (os_log_type_t)v39, "Resize updates %s with %s", (uint8_t *)v27, 0x16u);
          unint64_t v33 = v40;
          swift_arrayDestroy();
          MEMORY[0x24C527CC0](v33, -1, -1);
          MEMORY[0x24C527CC0](v27, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v21);
      }
    }
    if (MEMORY[0x24C527E00](v2 + 16))
    {
      uint64_t v34 = *(void *)(v2 + 24);
      ObjectType = swift_getObjectType();
      float64x2_t v50 = v14;
      uint64_t v51 = v46;
      uint64_t v52 = v45;
      float64x2_t v53 = v44;
      float64x2_t v54 = v43;
      float64x2_t v55 = v42;
      (*(void (**)(void (**)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v34 + 8))(&v50, v16, ObjectType, v34);
      swift_unknownObjectRelease();
      swift_release();
    }
    return outlined consume of Transaction?(v16);
  }
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResizeLogs.proposal(_:)(uint64_t a1)
{
  double v1 = *(double *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  char v5 = byte_268EF9428;
  char v6 = byte_268EF9438;
  if (v2)
  {
    if (!byte_268EF9428) {
      goto LABEL_11;
    }
  }
  else
  {
    if (*(double *)&static _ProposedSize.zero != v1) {
      char v5 = 1;
    }
    if (v5) {
      goto LABEL_11;
    }
  }
  uint64_t result = 0x6F72657A2ELL;
  if (v4)
  {
    if (byte_268EF9438) {
      return result;
    }
  }
  else
  {
    if (*(double *)&qword_268EF9430 != v3) {
      char v6 = 1;
    }
    if ((v6 & 1) == 0) {
      return result;
    }
  }
LABEL_11:
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  char v8 = byte_268EF9448;
  char v9 = byte_268EF9458;
  if (v2)
  {
    if (!byte_268EF9448) {
      return 0x726568746FLL;
    }
  }
  else
  {
    if (*(double *)&static _ProposedSize.infinity != v1) {
      char v8 = 1;
    }
    if (v8) {
      return 0x726568746FLL;
    }
  }
  uint64_t result = 0x74696E69666E692ELL;
  if (v4)
  {
    if ((byte_268EF9458 & 1) == 0) {
      return 0x726568746FLL;
    }
  }
  else
  {
    if (*(double *)&qword_268EF9450 != v3) {
      char v9 = 1;
    }
    if (v9) {
      return 0x726568746FLL;
    }
  }
  return result;
}

unint64_t partial apply for specialized closure #1 in ContentSizedSceneFeature.stopObserving(proposal:)(uint64_t a1)
{
  return specialized closure #1 in ContentSizedSceneFeature.stopObserving(proposal:)(a1, **(void **)(v1 + 16), *(unsigned char *)(*(void *)(v1 + 16) + 8), *(void *)(*(void *)(v1 + 16) + 16), *(unsigned char *)(*(void *)(v1 + 16) + 24));
}

uint64_t destroy for ContentSizedSceneFeature()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();

  return swift_release();
}

uint64_t initializeWithCopy for ContentSizedSceneFeature(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ContentSizedSceneFeature(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ContentSizedSceneFeature(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectWeakTakeInit();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithTake for ContentSizedSceneFeature(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ContentSizedSceneFeature()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of SceneSizeRestrictionsDelegate.updateSizeRestrictions(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for SceneSizeRestrictionUpdates()
{
  return &type metadata for SceneSizeRestrictionUpdates;
}

uint64_t initializeWithCopy for SizeThatFitsTransactions(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SizeThatFitsTransactions(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SizeThatFitsTransactions(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t instantiation function for generic protocol witness table for SizeThatFitsTransactions<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in SizeThatFitsTransactions<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined consume of _SafeAreaInsetsModifier?(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return outlined consume of Transaction?(a2);
  }
  return result;
}

uint64_t partial apply for specialized closure #2 in ContentSizedSceneFeature.addObserver(for:)(uint64_t a1)
{
  return specialized closure #2 in ContentSizedSceneFeature.addObserver(for:)(a1, *(void *)(v1 + 16));
}

void type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer();
    unint64_t v7 = a3(a1, &type metadata for SizeThatFitsMeasurer, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SizeThatFitsTransactions<SizeThatFitsMeasurer> and conformance SizeThatFitsTransactions<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeThatFitsTransactions<SizeThatFitsMeasurer> and conformance SizeThatFitsTransactions<A>;
  if (!lazy protocol witness table cache variable for type SizeThatFitsTransactions<SizeThatFitsMeasurer> and conformance SizeThatFitsTransactions<A>)
  {
    type metadata accessor for SizeThatFitsTransactions<SizeThatFitsMeasurer>(255, &lazy cache variable for type metadata for SizeThatFitsTransactions<SizeThatFitsMeasurer>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for SizeThatFitsTransactions);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeThatFitsTransactions<SizeThatFitsMeasurer> and conformance SizeThatFitsTransactions<A>);
  }
  return result;
}

unint64_t type metadata accessor for CustomAnimation()
{
  unint64_t result = lazy cache variable for type metadata for CustomAnimation;
  if (!lazy cache variable for type metadata for CustomAnimation)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  }
  return result;
}

uint64_t partial apply for closure #1 in ContentSizedSceneFeature.uninstantiate(graph:)(uint64_t *a1)
{
  return closure #1 in ContentSizedSceneFeature.uninstantiate(graph:)(a1);
}

uint64_t partial apply for closure #1 in ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)(uint64_t *a1)
{
  return closure #1 in ContentSizedSceneFeature.modifyViewOutputs(outputs:inputs:graph:)(a1, *(_OWORD **)(v1 + 32));
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance SpacingLayout@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2460DB08C()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for View.body.getter in conformance LinearGradient@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_WORD *)(a1 + 40) = 256;
  return swift_bridgeObjectRetain();
}

uint64_t ShapeStyle<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v7, v2, a1, v5);
  unint64_t v9 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return _ShapeView.init(shape:style:fillStyle:)(v9, (uint64_t)v7, 256, (uint64_t)&type metadata for Rectangle, a1, a2);
}

double static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 80);
  int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 72);
  int v20 = v10;
  return static _ShapeView._makeView(view:inputs:)(&v21, &v13, a4, a3, a6, a5, a7);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CombinedContentShape@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CombinedContentShape@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t static Shape._makeViewList(view:inputs:)(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = *(_DWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  char v9 = *(unsigned char *)(a2 + 80);
  int v20 = *a1;
  uint64_t v11 = v3;
  int v12 = v4;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a2 + 24);
  uint64_t v15 = v6;
  long long v16 = *(_OWORD *)(a2 + 48);
  int v17 = v7;
  uint64_t v18 = v8;
  char v19 = v9;
  return static View.makeViewList(view:inputs:)(&v20, &v11, a3);
}

uint64_t protocol witness for View.body.getter in conformance CombinedContentShape@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_WORD *)(a1 + 8) = 256;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for View.body.getter in conformance _TrimmedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance _StrokedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance AnyShape@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnyShape@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for View.body.getter in conformance AnyShape@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_WORD *)(a1 + 8) = 256;
  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance Path@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 33) = 256;
  return outlined copy of Path.Storage(v2, v3, v4, v5, v6);
}

__n128 protocol witness for View.body.getter in conformance RoundedRectangle@<Q0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *(__n128 *)a1 = *v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 17) = 256;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance UnevenRoundedRectangle@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UnevenRoundedRectangle@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

__n128 protocol witness for View.body.getter in conformance UnevenRoundedRectangle@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  *(_WORD *)(a1 + 33) = 256;
  return result;
}

void protocol witness for View.body.getter in conformance Capsule(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *v1;
  *(_WORD *)(a1 + 1) = 256;
}

uint64_t Shape.fill<A>(_:style:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v17 + 16))(v16, v18, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v16, (uint64_t)v12, a2 & 0x101, a3, a4, a5);
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v17 + 16))(v16, v18, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v16, (uint64_t)v12, a2 & 0x101, a3, a4, a5);
}

uint64_t Shape.fill(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v5 = a1;
  double v7 = MEMORY[0x270FA5388](a1);
  char v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v9, v3, a2, v7);
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v9, v11, v5 & 0x101, a2, (uint64_t)&type metadata for ForegroundStyle, a3);
}

double protocol witness for View.body.getter in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  double result = *(double *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(double *)(a1 + 24) = result;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance UnevenRoundedRectangle._Inset@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UnevenRoundedRectangle._Inset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

double protocol witness for View.body.getter in conformance UnevenRoundedRectangle._Inset@<D0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  double result = *(double *)(v1 + 40);
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  *(double *)(a1 + 40) = result;
  *(_WORD *)(a1 + 48) = 256;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Rectangle.AsymmetricalInset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Rectangle.AsymmetricalInset@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static View.makeViewList(view:inputs:)(v3, (uint64_t)v7, a3);
}

__n128 protocol witness for View.body.getter in conformance Rectangle.AsymmetricalInset@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeIntersection<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeIntersection<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeIntersection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeUnion<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeUnion<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeUnion<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeSubtraction<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeSubtraction<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeSubtraction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeSymmetricDifference<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeSymmetricDifference<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeSymmetricDifference<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeLineIntersection<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeLineIntersection<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeLineIntersection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ShapeLineSubtraction<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ShapeLineSubtraction<A, B>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance _ShapeLineSubtraction<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for View.body.getter in conformance ContainerRelativeShape._Inset@<D0>(uint64_t a1@<X8>)
{
  double result = *v1;
  *(double *)a1 = *v1;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance MeshGradient@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  char v7 = *(unsigned char *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 57);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 57) = v8;
  *(_WORD *)(a1 + 58) = 256;
  swift_bridgeObjectRetain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for View.body.getter in conformance _SizedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

double protocol witness for static View._makeView(view:inputs:) in conformance AnchoredSizedShape<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, double *a4@<X8>)
{
  swift_getWitnessTable();

  return static Shape._makeView(view:inputs:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnchoredSizedShape<A>(int *a1, uint64_t a2, unint64_t a3)
{
  swift_getWitnessTable();

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance AnchoredSizedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance ScaledShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance RotatedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

uint64_t protocol witness for View.body.getter in conformance TransformedShape<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getWitnessTable();

  return Shape.body.getter(a1, a2);
}

uint64_t Shape.stroke<A>(_:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v17[0] = a6;
  v17[1] = a5;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  int v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _StrokedShape();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v17 - v14;
  Shape.stroke(style:)(a2, a3, (uint64_t)v17 - v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  swift_getWitnessTable();
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v15, (uint64_t)v12, 256, v13, a4, v17[0]);
}

uint64_t Shape.stroke<A>(_:lineWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v18 = a4;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _StrokedShape();
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v19[-1] - v15;
  *(double *)char v19 = a6;
  v19[1] = 0;
  v19[2] = 0x4024000000000000;
  v19[3] = MEMORY[0x263F8EE78];
  v19[4] = 0;
  Shape.stroke(style:)((uint64_t)v19, a2, (uint64_t)&v19[-1] - v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a3);
  swift_getWitnessTable();
  return _ShapeView.init(shape:style:fillStyle:)((uint64_t)v16, (uint64_t)v13, 256, v14, a3, a5);
}

uint64_t _ShapeView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShapeView.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShapeView.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeView.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t _ShapeView.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*_ShapeView.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShapeView.fillStyle.getter(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(v1 + *(int *)(a1 + 56));
  unsigned int v3 = *v2;
  if (v2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return v4 | v3;
}

uint64_t _ShapeView.fillStyle.setter(uint64_t result, uint64_t a2)
{
  unsigned int v3 = (unsigned char *)(v2 + *(int *)(a2 + 56));
  *unsigned int v3 = result & 1;
  v3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t (*_ShapeView.fillStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AnimatedShape<A>.Init@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AnimatedShape();
  unsigned int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

_UNKNOWN **sub_2460DCB2C()
{
  return &protocol witness table for _ShapeView<A, B>;
}

_UNKNOWN **sub_2460DCB38()
{
  return &protocol witness table for _ShapeView<A, B>;
}

_UNKNOWN **sub_2460DCB44()
{
  return &protocol witness table for _ShapeView<A, B>;
}

uint64_t FillShapeView.view.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FillShapeView.view.setter(uint64_t a1)
{
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*FillShapeView.view.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t FillShapeView.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v2 + *(int *)(v5 + 52), v4);
}

uint64_t key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, _OWORD *), uint64_t (*a5)(uint64_t))
{
  long long v6 = *(_OWORD *)(a3 + a2 - 32);
  v9[0] = *(_OWORD *)(a3 + a2 - 48);
  v9[1] = v6;
  void v9[2] = *(_OWORD *)(a3 + a2 - 16);
  uint64_t v7 = a4(0, v9);
  return a5(v7);
}

uint64_t FillShapeView.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v2 + *(int *)(v5 + 52), a1, v4);
}

uint64_t FillShapeView.fillStyle.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _ShapeView() + 56));
  unsigned int v2 = *v1;
  if (v1[1]) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  return v3 | v2;
}

uint64_t key path getter for FillShapeView.fillStyle : <A, B, C>FillShapeView<A, B, C>@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for FillShapeView();
  uint64_t result = FillShapeView.fillStyle.getter();
  *a1 = result & 1;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for FillShapeView.fillStyle : <A, B, C>FillShapeView<A, B, C>(unsigned __int8 *a1)
{
  __int16 v1 = *a1;
  int v2 = a1[1];
  type metadata accessor for FillShapeView();
  if (v2) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  return FillShapeView.fillStyle.setter(v3 | v1);
}

uint64_t FillShapeView.fillStyle.setter(__int16 a1)
{
  uint64_t result = type metadata accessor for _ShapeView();
  uint64_t v4 = (unsigned char *)(v1 + *(int *)(result + 56));
  unsigned char *v4 = a1 & 1;
  v4[1] = HIBYTE(a1) & 1;
  return result;
}

uint64_t FillShapeView.background.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = type metadata accessor for _BackgroundModifier();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)v13 - v8;
  long long v10 = *(_OWORD *)(a1 + 40);
  v13[0] = *(_OWORD *)(a1 + 16);
  v13[1] = v10;
  type metadata accessor for _ShapeView();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2 + *(int *)(v11 + 36), v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v9, v5);
}

uint64_t FillShapeView.background.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ShapeView();
  uint64_t v5 = *(void *)(a2 + 32);
  type metadata accessor for _BackgroundModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(v2 + *(int *)(v6 + 36), a1, v5);
}

uint64_t static FillShapeView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(a2 + 8);
  uint64_t v24 = *(void *)(a2 + 16);
  int v25 = *(_DWORD *)(a2 + 80);
  v36[1] = *a1;
  uint64_t v31 = a6;
  *(void *)&long long v32 = a7;
  type metadata accessor for FillShapeView();
  type metadata accessor for _GraphValue();
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v15 = type metadata accessor for _ShapeView();
  uint64_t v16 = type metadata accessor for _BackgroundModifier();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(a2 + 24);
  uint64_t v19 = *(void *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 56);
  long long v23 = *(_OWORD *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static FillShapeView._makeView(view:inputs:), v17, v36);
  uint64_t v27 = v13;
  LODWORD(v28) = v14;
  uint64_t v29 = v24;
  uint64_t v30 = v18;
  uint64_t v31 = v19;
  long long v32 = v23;
  long long v33 = v22;
  uint64_t v34 = v20;
  int v35 = v25;
  return static ModifiedContent<>._makeView(view:inputs:)(v36, &v27, v15, v16, (uint64_t)&protocol witness table for _ShapeView<A, B>, (uint64_t)&protocol witness table for _BackgroundModifier<A>, a8);
}

uint64_t closure #1 in static FillShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  v15[2] = type metadata accessor for FillShapeView();
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v15, v16, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
  return v17;
}

uint64_t partial apply for closure #1 in static FillShapeView._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static FillShapeView._makeView(view:inputs:)(a1, closure #1 in static FillShapeView._makeView(view:inputs:));
}

uint64_t type metadata accessor for FillShapeView()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))static FillShapeView._makeView(view:inputs:));
}

uint64_t StrokeShapeView.view.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t StrokeShapeView.view.setter(uint64_t a1)
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*StrokeShapeView.view.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path setter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, _OWORD *))
{
  long long v16 = *(_OWORD *)(a4 + a3 - 48);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - v6;
  char v9 = *(void (**)(char *))(v8 + 16);
  long long v11 = *(_OWORD *)(v10 - 32);
  long long v14 = *(_OWORD *)(v10 - 16);
  long long v15 = v11;
  v9(v7);
  v17[0] = v16;
  v17[1] = v15;
  uint64_t v17[2] = v14;
  uint64_t v12 = a5(0, v17);
  return ProxyCodable.wrappedValue.setter((uint64_t)v7, v12);
}

uint64_t StrokeShapeView.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for _StrokedShape();
  uint64_t v7 = *(void *)(a1 + 24);
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, v2 + *(int *)(v5 + 52), v7);
}

uint64_t StrokeShapeView.style.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _StrokedShape();
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v2 + *(int *)(v5 + 52), a1, v7);
}

uint64_t StrokeShapeView.strokeStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return StrokeShapeView.strokeStyle.getter((void (*)(_OWORD *__return_ptr))specialized StrokeShapeView.strokeStyle.getter, a1);
}

__n128 StrokeShapeView.strokeStyle.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  swift_bridgeObjectRelease();
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v5;
  *(void *)(v3 + 32) = *(void *)(a1 + 32);
  return result;
}

uint64_t StrokeShapeView.isAntialiased.getter()
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for _ShapeView() + 56) + 1);
}

uint64_t StrokeShapeView.isAntialiased.setter(char a1)
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for _ShapeView();
  *(unsigned char *)(v1 + *(int *)(result + 56) + 1) = a1;
  return result;
}

uint64_t StrokeShapeView.background.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = type metadata accessor for _BackgroundModifier();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v9 = (char *)v16 - v8;
  uint64_t v10 = type metadata accessor for _StrokedShape();
  uint64_t v11 = a1[3];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = a1[6];
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = WitnessTable;
  v16[3] = v13;
  type metadata accessor for _ShapeView();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2 + *(int *)(v14 + 36), v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a2, v9, v5);
}

uint64_t StrokeShapeView.background.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  uint64_t v5 = *(void *)(a2 + 32);
  type metadata accessor for _BackgroundModifier();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(v2 + *(int *)(v6 + 36), a1, v5);
}

uint64_t StrokeBorderShapeView.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t StrokeBorderShapeView.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*StrokeBorderShapeView.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeBorderShapeView.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t StrokeBorderShapeView.view.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*StrokeBorderShapeView.view.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeBorderShapeView.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  uint64_t v8 = *(void *)(a1 + 24);
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, v5 + *(int *)(v6 + 52), v8);
}

uint64_t key path setter for FillShapeView.style : <A, B, C>FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t *), uint64_t (*a6)(char *, uint64_t))
{
  uint64_t v8 = *(void *)(a4 + a3 - 48);
  uint64_t v9 = *(void *)(a4 + a3 - 8);
  long long v18 = *(_OWORD *)(a4 + a3 - 40);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v13 = *(void (**)(char *))(v12 + 16);
  long long v17 = *(_OWORD *)(v14 - 24);
  v13(v11);
  uint64_t v19 = v8;
  long long v20 = v18;
  long long v21 = v17;
  uint64_t v22 = v9;
  uint64_t v15 = a5(0, &v19);
  return a6(v11, v15);
}

uint64_t StrokeBorderShapeView.style.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(a2 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  uint64_t v8 = *(void *)(a2 + 24);
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for _ShapeView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(v5 + *(int *)(v6 + 52), a1, v8);
}

uint64_t StrokeBorderShapeView.strokeStyle.getter@<X0>(uint64_t a1@<X8>)
{
  return StrokeShapeView.strokeStyle.getter((void (*)(_OWORD *__return_ptr))specialized StrokeBorderShapeView.strokeStyle.getter, a1);
}

uint64_t StrokeShapeView.strokeStyle.getter@<X0>(void (*a1)(_OWORD *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  a1(v5);
  long long v3 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = v6;

  return swift_bridgeObjectRetain();
}

uint64_t key path getter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void, long long *)@<X3>, void (*a4)(long long *__return_ptr, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + a1 - 32);
  long long v11 = *(_OWORD *)(a2 + a1 - 48);
  long long v12 = v7;
  long long v13 = *(_OWORD *)(a2 + a1 - 16);
  uint64_t v8 = a3(0, &v11);
  a4(&v11, v8);
  long long v9 = v12;
  *(_OWORD *)a5 = v11;
  *(_OWORD *)(a5 + 16) = v9;
  *(void *)(a5 + 32) = v13;
  return outlined retain of StrokeStyle((uint64_t)&v11);
}

uint64_t key path setter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, _OWORD *), uint64_t (*a6)(_OWORD *, uint64_t))
{
  uint64_t v8 = a4 + a3;
  long long v9 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v9;
  uint64_t v15 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  long long v10 = *(_OWORD *)(v8 - 32);
  v13[0] = *(_OWORD *)(v8 - 48);
  v13[1] = v10;
  _OWORD v13[2] = *(_OWORD *)(v8 - 16);
  uint64_t v11 = a5(0, v13);
  return a6(v14, v11);
}

__n128 StrokeBorderShapeView.strokeStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  swift_bridgeObjectRelease();
  __n128 result = *(__n128 *)a1;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = *(void *)(a1 + 32);
  return result;
}

uint64_t StrokeBorderShapeView.isAntialiased.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  return *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for _ShapeView() + 56) + 1);
}

uint64_t key path getter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(void, _OWORD *)@<X3>, uint64_t (*a4)(uint64_t)@<X4>, unsigned char *a5@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + a1 - 32);
  v10[0] = *(_OWORD *)(a2 + a1 - 48);
  v10[1] = v7;
  v10[2] = *(_OWORD *)(a2 + a1 - 16);
  uint64_t v8 = a3(0, v10);
  uint64_t result = a4(v8);
  *a5 = result & 1;
  return result;
}

uint64_t key path setter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, _OWORD *), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a4 + a3 - 32);
  v11[0] = *(_OWORD *)(a4 + a3 - 48);
  v11[1] = v8;
  v11[2] = *(_OWORD *)(a4 + a3 - 16);
  uint64_t v9 = a5(0, v11);
  return a6(v7, v9);
}

uint64_t StrokeBorderShapeView.isAntialiased.setter(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for _ShapeView();
  *(unsigned char *)(v4 + *(int *)(result + 56) + 1) = a1;
  return result;
}

uint64_t StrokeBorderShapeView.background.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = type metadata accessor for _BackgroundModifier();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  long long v8 = (char *)&v16 - v7;
  uint64_t v9 = v2 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for _StrokedShape();
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = WitnessTable;
  uint64_t v21 = v13;
  type metadata accessor for _ShapeView();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9 + *(int *)(v14 + 36), v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(v17, v8, v4);
}

uint64_t key path setter for FillShapeView.background : <A, B, C>FillShapeView<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, _OWORD *), uint64_t (*a6)(char *, uint64_t))
{
  long long v18 = *(_OWORD *)(a4 + a3 - 32);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v11 = *(void (**)(char *))(v10 + 16);
  long long v13 = *(_OWORD *)(v12 - 16);
  long long v16 = *(_OWORD *)(v12 - 48);
  long long v17 = v13;
  v11(v9);
  v19[0] = v16;
  v19[1] = v18;
  v19[2] = v17;
  uint64_t v14 = a5(0, v19);
  return a6(v9, v14);
}

uint64_t StrokeBorderShapeView.background.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(a2 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _StrokedShape();
  swift_getWitnessTable();
  type metadata accessor for _ShapeView();
  uint64_t v6 = *(void *)(a2 + 32);
  type metadata accessor for _BackgroundModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(v5 + *(int *)(v7 + 36), a1, v6);
}

uint64_t associated type witness table accessor for ShapeView.Content : Shape in _ShapeView<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t associated type witness table accessor for ShapeView.Content : Shape in StrokeBorderShapeView<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 40) + 8);
}

uint64_t sub_2460DEE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for FillShapeView, (uint64_t (*)(uint64_t))protocol witness for Location.get() in conformance ConstantLocation<A>);
}

uint64_t sub_2460DEE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for FillShapeView);
}

uint64_t sub_2460DEE98()
{
  return 48;
}

__n128 sub_2460DEEA4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DEEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for FillShapeView, (uint64_t (*)(uint64_t))FillShapeView.style.getter);
}

uint64_t sub_2460DEEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.style : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t *))type metadata accessor for FillShapeView, (uint64_t (*)(char *, uint64_t))FillShapeView.style.setter);
}

uint64_t sub_2460DEF38()
{
  return 48;
}

__n128 sub_2460DEF44(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DEF60()
{
  return 48;
}

__n128 sub_2460DEF6C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DEF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for FillShapeView, (uint64_t (*)(uint64_t))FillShapeView.background.getter);
}

uint64_t sub_2460DEFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.background : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for FillShapeView, (uint64_t (*)(char *, uint64_t))FillShapeView.background.setter);
}

uint64_t sub_2460DF000()
{
  return 48;
}

__n128 sub_2460DF00C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(uint64_t))protocol witness for Location.get() in conformance ConstantLocation<A>);
}

uint64_t sub_2460DF060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView);
}

uint64_t sub_2460DF08C()
{
  return 48;
}

__n128 sub_2460DF098(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(uint64_t))StrokeShapeView.style.getter);
}

uint64_t sub_2460DF0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.style : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t *))type metadata accessor for StrokeShapeView, (uint64_t (*)(char *, uint64_t))StrokeShapeView.style.setter);
}

uint64_t sub_2460DF12C()
{
  return 48;
}

__n128 sub_2460DF138(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF14C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, (uint64_t (*)(void, long long *))type metadata accessor for StrokeShapeView, (void (*)(long long *__return_ptr, uint64_t))specialized StrokeShapeView.strokeStyle.getter, a3);
}

uint64_t sub_2460DF18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(_OWORD *, uint64_t))StrokeShapeView.strokeStyle.setter);
}

uint64_t sub_2460DF1CC()
{
  return 48;
}

__n128 sub_2460DF1D8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF1EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  return key path getter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(uint64_t))StrokeShapeView.isAntialiased.getter, a3);
}

uint64_t sub_2460DF22C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(uint64_t, uint64_t))StrokeShapeView.isAntialiased.setter);
}

uint64_t sub_2460DF26C()
{
  return 48;
}

__n128 sub_2460DF278(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(uint64_t))StrokeShapeView.background.getter);
}

uint64_t sub_2460DF2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.background : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeShapeView, (uint64_t (*)(char *, uint64_t))StrokeShapeView.background.setter);
}

uint64_t sub_2460DF30C()
{
  return 48;
}

__n128 sub_2460DF318(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(uint64_t))StrokeBorderShapeView.style.getter);
}

uint64_t sub_2460DF36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.style : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(char *, uint64_t))StrokeBorderShapeView.style.setter);
}

uint64_t sub_2460DF3AC()
{
  return 48;
}

__n128 sub_2460DF3B8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF3CC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return key path getter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, (uint64_t (*)(void, long long *))type metadata accessor for StrokeBorderShapeView, (void (*)(long long *__return_ptr, uint64_t))specialized StrokeBorderShapeView.strokeStyle.getter, a3);
}

uint64_t sub_2460DF40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StrokeShapeView.strokeStyle : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(_OWORD *, uint64_t))StrokeBorderShapeView.strokeStyle.setter);
}

uint64_t sub_2460DF44C()
{
  return 48;
}

__n128 sub_2460DF458(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF46C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  return key path getter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, StrokeBorderShapeView.isAntialiased.getter, a3);
}

uint64_t sub_2460DF4AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for StrokeShapeView.isAntialiased : <A, B, C>StrokeShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(uint64_t, uint64_t))StrokeBorderShapeView.isAntialiased.setter);
}

uint64_t sub_2460DF4EC()
{
  return 48;
}

__n128 sub_2460DF4F8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_2460DF50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for FillShapeView.shape : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(uint64_t))StrokeBorderShapeView.background.getter);
}

uint64_t sub_2460DF54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for FillShapeView.background : <A, B, C>FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(void, _OWORD *))type metadata accessor for StrokeBorderShapeView, (uint64_t (*)(char *, uint64_t))StrokeBorderShapeView.background.setter);
}

uint64_t sub_2460DF58C()
{
  return 48;
}

__n128 sub_2460DF598(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t dispatch thunk of ShapeView.shape.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata completion function for FillShapeView()
{
  type metadata accessor for _ShapeView();
  type metadata accessor for _BackgroundModifier();
  uint64_t result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FillShapeView(uint64_t *a1, uint64_t *a2, void *a3)
{
  long long v3 = a1;
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(a3[3] - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = (v5 + v7) & ~v7;
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(void *)(a3[4] - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = v10 + v13 + v9 + 2;
  uint64_t v15 = *(void *)(v11 + 64) + 7;
  int v16 = *(_DWORD *)(v4 + 80) | *(_DWORD *)(v6 + 80);
  uint64_t v17 = v16 & 0xF8 | v13;
  int v18 = (v16 | v12) & 0x100000;
  if (v17 != 7 || v18 != 0 || (v15 & 0xFFFFFFFFFFFFFFF8) + (v14 & ~v13) + 16 > 0x18)
  {
    uint64_t v21 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v21 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  else
  {
    uint64_t v22 = ~v7;
    uint64_t v28 = a3[3];
    uint64_t v29 = ~v13;
    uint64_t v30 = a3[4];
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
    unint64_t v24 = ((unint64_t)v3 + v8) & v22;
    unint64_t v25 = ((unint64_t)a2 + v8) & v22;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v24, v25, v28);
    *(_WORD *)(v24 + v10) = *(_WORD *)(v25 + v10);
    unint64_t v26 = ((unint64_t)a2 + v14) & v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v3 + v14) & v29, v26, v30);
    *(_OWORD *)((v15 + (((unint64_t)v3 + v14) & v29)) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + v26) & 0xFFFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t destroy for FillShapeView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = v5 + v8;
  (*(void (**)(uint64_t))(v6 + 8))((v5 + v8 + a1) & ~v8);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 8);
  uint64_t v12 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  uint64_t v13 = (a1 + *(void *)(v7 + 56) + (v9 & ~v8) + v12 + 2) & ~v12;

  return v11(v13);
}

uint64_t initializeWithCopy for FillShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))((v10 + a1) & ~v9, (v10 + a2) & ~v9);
  uint64_t v11 = *(void *)(v8 + 48);
  *(_WORD *)(v11 + ((v10 + a1) & ~v9)) = *(_WORD *)(v11 + ((v10 + a2) & ~v9));
  uint64_t v12 = *(void *)(a3[4] - 8);
  uint64_t v13 = v12 + 16;
  uint64_t v14 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  uint64_t v15 = v11 + (v10 & ~v9) + v14 + 2;
  uint64_t v16 = (v15 + a1) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v16, v17);
  *(_OWORD *)((*(void *)(v13 + 48) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v13 + 48)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for FillShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))((v10 + a1) & ~v9, v11);
  uint64_t v12 = *(void *)(v8 + 40);
  uint64_t v13 = (unsigned char *)(v12 + ((v10 + a1) & ~v9));
  *uint64_t v13 = *(unsigned char *)(v12 + v11);
  v13[1] = *(unsigned char *)(v12 + v11 + 1);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = v12 + (v10 & ~v9) + v16 + 2;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 40) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  return a1;
}

uint64_t initializeWithTake for FillShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))((v10 + a1) & ~v9, (v10 + a2) & ~v9);
  uint64_t v11 = *(void *)(v8 + 32);
  *(_WORD *)(v11 + ((v10 + a1) & ~v9)) = *(_WORD *)(v11 + ((v10 + a2) & ~v9));
  uint64_t v12 = *(void *)(a3[4] - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  uint64_t v15 = v11 + (v10 & ~v9) + v14 + 2;
  uint64_t v16 = (v15 + a1) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v16, v17);
  *(_OWORD *)((*(void *)(v13 + 32) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v13 + 32)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for FillShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))((v10 + a1) & ~v9, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = (unsigned char *)(v12 + ((v10 + a1) & ~v9));
  *uint64_t v13 = *(unsigned char *)(v12 + v11);
  v13[1] = *(unsigned char *)(v12 + v11 + 1);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  uint64_t v17 = v12 + (v10 & ~v9) + v16 + 2;
  uint64_t v18 = (v17 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  uint64_t v21 = (void *)((v20 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)((v20 + v19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for FillShapeView(_DWORD *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = a3[4];
  uint64_t v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(*(void *)(a3[3] - 8) + 64);
  if (v13 <= v10) {
    unsigned int v17 = v10;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v14 + v15;
  uint64_t v19 = v16 + ((v14 + v15) & ~v15);
  uint64_t v20 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  uint64_t v21 = v19 + v20 + 2;
  if (v17 < a2)
  {
    unint64_t v22 = ((*(void *)(*(void *)(v11 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + (v21 & ~v20) + 16;
    if ((v22 & 0xFFFFFFF8) != 0) {
      unsigned int v23 = 2;
    }
    else {
      unsigned int v23 = a2 - v17 + 1;
    }
    if (v23 >= 0x10000) {
      unsigned int v24 = 4;
    }
    else {
      unsigned int v24 = 2;
    }
    if (v23 < 0x100) {
      unsigned int v24 = 1;
    }
    if (v23 >= 2) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    switch(v25)
    {
      case 1:
        int v26 = *((unsigned __int8 *)a1 + v22);
        if (!*((unsigned char *)a1 + v22)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v26 = *(unsigned __int16 *)((char *)a1 + v22);
        if (*(_WORD *)((char *)a1 + v22)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460E01E4);
      case 4:
        int v26 = *(_DWORD *)((char *)a1 + v22);
        if (!v26) {
          break;
        }
LABEL_27:
        int v27 = v26 - 1;
        if ((v22 & 0xFFFFFFF8) != 0)
        {
          int v27 = 0;
          int v28 = *a1;
        }
        else
        {
          int v28 = 0;
        }
        int v36 = v17 + (v28 | v27);
        return (v36 + 1);
      default:
        break;
    }
  }
  if (v10 < v13)
  {
    a1 = (_DWORD *)(((unint64_t)a1 + v21) & ~v20);
    uint64_t v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v30 = *(unsigned int *)(v12 + 84);
    uint64_t v31 = a3[4];
    return v29(a1, v30, v31);
  }
  if (v6 == v10)
  {
    uint64_t v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v30 = *(unsigned int *)(v5 + 84);
    uint64_t v31 = a3[2];
    return v29(a1, v30, v31);
  }
  unint64_t v33 = ((unint64_t)a1 + v18) & ~v15;
  if (v8 == v10)
  {
    uint64_t v34 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v34(v33);
  }
  unsigned int v35 = *(unsigned __int8 *)(v33 + v16);
  if (v35 < 2) {
    return 0;
  }
  int v36 = (v35 + 2147483646) & 0x7FFFFFFF;
  return (v36 + 1);
}

void storeEnumTagSinglePayload for FillShapeView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(void *)(v9 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v15 <= v13) {
    unsigned int v19 = v13;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v20 = v16 + v17;
  size_t v21 = v18 + ((v16 + v17) & ~v17) + 2;
  uint64_t v22 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  size_t v23 = ((*(void *)(*(void *)(v9 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v24 = ((v21 + v22) & ~v22) + v23;
  if (v19 >= a3)
  {
    int v27 = 0;
    int v28 = a2 - v19;
    if (a2 <= v19) {
      goto LABEL_22;
    }
LABEL_26:
    if (v24) {
      int v29 = 1;
    }
    else {
      int v29 = v28;
    }
    if (v24)
    {
      unsigned int v30 = ~v19 + a2;
      bzero(a1, ((v21 + v22) & ~v22) + v23);
      *(_DWORD *)uint64_t v5 = v30;
    }
    switch(v27)
    {
      case 1:
        v5[v24] = v29;
        break;
      case 2:
        *(_WORD *)&v5[v24] = v29;
        break;
      case 3:
LABEL_71:
        __break(1u);
        JUMPOUT(0x2460E0600);
      case 4:
        *(_DWORD *)&v5[v24] = v29;
        break;
      default:
        return;
    }
    return;
  }
  unsigned int v25 = a3 - v19;
  if (v24) {
    unsigned int v26 = 2;
  }
  else {
    unsigned int v26 = v25 + 1;
  }
  if (v26 >= 0x10000) {
    int v27 = 4;
  }
  else {
    int v27 = 2;
  }
  if (v26 < 0x100) {
    int v27 = 1;
  }
  if (v26 < 2) {
    int v27 = 0;
  }
  int v28 = a2 - v19;
  if (a2 > v19) {
    goto LABEL_26;
  }
LABEL_22:
  switch(v27)
  {
    case 1:
      a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
      goto LABEL_71;
    case 4:
      *(_DWORD *)&a1[v24] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      if (v13 < v15)
      {
        uint64_t v31 = (_DWORD *)((unint64_t)&a1[v21 + v22] & ~v22);
        if (v15 < a2)
        {
          if (v23)
          {
            unsigned int v32 = ~v15 + a2;
            bzero(v31, v23);
            *uint64_t v31 = v32;
          }
          return;
        }
        int v36 = *(void (**)(char *))(v14 + 56);
        a1 = (char *)((unint64_t)&a1[v21 + v22] & ~v22);
LABEL_55:
        v36(a1);
        return;
      }
      if (v13 >= a2)
      {
        if (v7 == v13)
        {
          int v36 = *(void (**)(char *))(v6 + 56);
          goto LABEL_55;
        }
        unint64_t v37 = (unint64_t)&a1[v20] & ~v17;
        if (v11 == v13)
        {
          int v38 = *(void (**)(unint64_t))(v10 + 56);
          v38(v37);
        }
        else if (a2 > 0xFE)
        {
          *(_WORD *)(v37 + v18) = a2 - 255;
        }
        else
        {
          *(unsigned char *)(v37 + v18) = a2 + 1;
        }
      }
      else
      {
        if (v21 <= 3) {
          int v33 = ~(-1 << (8 * v21));
        }
        else {
          int v33 = -1;
        }
        if (v21)
        {
          int v34 = v33 & (~v13 + a2);
          if (v21 <= 3) {
            int v35 = v21;
          }
          else {
            int v35 = 4;
          }
          bzero(a1, v21);
          switch(v35)
          {
            case 2:
              *(_WORD *)uint64_t v5 = v34;
              break;
            case 3:
              *(_WORD *)uint64_t v5 = v34;
              _OWORD v5[2] = BYTE2(v34);
              break;
            case 4:
              *(_DWORD *)uint64_t v5 = v34;
              break;
            default:
              *uint64_t v5 = v34;
              break;
          }
        }
      }
      break;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StrokeShapeView(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + v8 + 40;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = a3[4] - 8;
  uint64_t v12 = *(void *)v11;
  int v13 = *(_DWORD *)(*(void *)v11 + 80);
  uint64_t v14 = v13 & 0xF8 | 7;
  uint64_t v15 = v10 + v14 + (v9 & ~v8) + 2;
  uint64_t v16 = *(void *)(*(void *)v11 + 64) + 7;
  unsigned int v17 = v8 | *(_DWORD *)(v5 + 80) & 0xF8 | v13 & 0xF8;
  if (v17 > 7
    || ((v13 | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || (v16 & 0xFFFFFFFFFFFFFFF8) + (v15 & ~v14) + 16 > 0x18)
  {
    uint64_t v20 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v21 = ~v8;
    uint64_t v29 = a3[3];
    uint64_t v30 = ~v14;
    uint64_t v31 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v22 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v22 = *(void *)v23;
    *(_DWORD *)(v22 + 8) = *(_DWORD *)(v23 + 8);
    *(_DWORD *)(v22 + 12) = *(_DWORD *)(v23 + 12);
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    *(void *)(v22 + 24) = *(void *)(v23 + 24);
    *(void *)(v22 + 32) = *(void *)(v23 + 32);
    unint64_t v24 = ((unint64_t)v4 + v9) & v21;
    unint64_t v25 = ((unint64_t)a2 + v9) & v21;
    unsigned int v26 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v26(v24, v25, v29);
    *(_WORD *)(v24 + v10) = *(_WORD *)(v25 + v10);
    unint64_t v27 = ((unint64_t)a2 + v15) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(((unint64_t)v4 + v15) & v30, v27, v31);
    *(_OWORD *)((v16 + (((unint64_t)v4 + v15) & v30)) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v16 + v27) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithTake for StrokeShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v9 + 32);
  long long v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  *(void *)(v8 + 32) = v10;
  uint64_t v12 = *(void *)(a3[3] - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + v14 + 40;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((v15 + a1) & ~v14, (v15 + a2) & ~v14);
  uint64_t v16 = *(void *)(v13 + 32);
  *(_WORD *)(v16 + ((v15 + a1) & ~v14)) = *(_WORD *)(v16 + ((v15 + a2) & ~v14));
  uint64_t v17 = *(void *)(a3[4] - 8);
  uint64_t v18 = v17 + 32;
  uint64_t v19 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  uint64_t v20 = v16 + v19 + (v15 & ~v14) + 2;
  uint64_t v21 = (v20 + a1) & ~v19;
  uint64_t v22 = (v20 + a2) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v21, v22);
  *(_OWORD *)((*(void *)(v18 + 32) + 7 + v21) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v18 + 32)
                                                                                       + 7
                                                                                       + v22) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for StrokeShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v10 = *(void *)(a3[3] - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12 + 40;
  unint64_t v14 = (v13 + a2) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((v13 + a1) & ~v12, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = (unsigned char *)(v15 + ((v13 + a1) & ~v12));
  *uint64_t v16 = *(unsigned char *)(v15 + v14);
  v16[1] = *(unsigned char *)(v15 + v14 + 1);
  uint64_t v17 = *(void *)(a3[4] - 8);
  uint64_t v18 = v17 + 40;
  uint64_t v19 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  uint64_t v20 = v15 + v19 + (v13 & ~v12) + 2;
  uint64_t v21 = (v20 + a1) & ~v19;
  uint64_t v22 = (v20 + a2) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v21, v22);
  uint64_t v23 = *(void *)(v18 + 24) + 7;
  unint64_t v24 = (void *)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  void *v24 = *v25;
  v24[1] = v25[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for StrokeShapeView(_DWORD *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = a3[4];
  uint64_t v9 = *(void *)(a3[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v8 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  if (v13 <= v11) {
    unsigned int v16 = v11;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v17 = ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + v15 + 40;
  uint64_t v18 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  uint64_t v19 = *(void *)(*(void *)(a3[3] - 8) + 64) + v18 + (v17 & ~v15) + 2;
  if (v16 < a2)
  {
    unint64_t v20 = ((*(void *)(*(void *)(v8 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + (v19 & ~v18) + 16;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v16 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460E0EFCLL);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_28:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v16 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v11 < v13)
  {
    unint64_t v28 = ((unint64_t)a1 + v19) & ~v18;
    uint64_t v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v30 = *(unsigned int *)(v12 + 84);
    uint64_t v31 = a3[4];
    return v29(v28, v30, v31);
  }
  if (v7 < v10)
  {
    unint64_t v28 = ((unint64_t)a1 + v17) & ~v15;
    uint64_t v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    uint64_t v30 = *(unsigned int *)(v9 + 84);
    uint64_t v31 = a3[3];
    return v29(v28, v30, v31);
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v33 = *(void *)((((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v33 >= 0xFFFFFFFF) {
      LODWORD(v33) = -1;
    }
    return (v33 + 1);
  }
  else
  {
    unsigned int v32 = *(uint64_t (**)(void))(v5 + 48);
    return v32();
  }
}

double storeEnumTagSinglePayload for StrokeShapeView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = a4[3];
  uint64_t v10 = a4[4];
  uint64_t v11 = *(void *)(v9 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(void *)(v10 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  if (v15 <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  unint64_t v19 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  size_t v20 = *(void *)(*(void *)(v9 - 8) + 64) + ((v19 + v17) & ~v17) + 2;
  uint64_t v21 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  unint64_t v22 = ((*(void *)(*(void *)(v10 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v23 = ((v20 + v21) & ~v21) + v22;
  if (v18 >= a3)
  {
    int v26 = 0;
    int v27 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_22;
    }
LABEL_26:
    if (v23) {
      int v28 = 1;
    }
    else {
      int v28 = v27;
    }
    if (v23)
    {
      int v29 = ~v18 + a2;
      bzero(a1, ((v20 + v21) & ~v21) + v22);
      *(_DWORD *)a1 = v29;
    }
    switch(v26)
    {
      case 1:
        a1[v23] = v28;
        break;
      case 2:
        *(_WORD *)&a1[v23] = v28;
        break;
      case 3:
LABEL_75:
        __break(1u);
        JUMPOUT(0x2460E1370);
      case 4:
        *(_DWORD *)&a1[v23] = v28;
        break;
      default:
        return result;
    }
    return result;
  }
  unsigned int v24 = a3 - v18;
  if (v23) {
    unsigned int v25 = 2;
  }
  else {
    unsigned int v25 = v24 + 1;
  }
  if (v25 >= 0x10000) {
    int v26 = 4;
  }
  else {
    int v26 = 2;
  }
  if (v25 < 0x100) {
    int v26 = 1;
  }
  if (v25 < 2) {
    int v26 = 0;
  }
  int v27 = a2 - v18;
  if (a2 > v18) {
    goto LABEL_26;
  }
LABEL_22:
  switch(v26)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_35;
    case 3:
      goto LABEL_75;
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return result;
      }
LABEL_35:
      if (v13 < v15)
      {
        a1 = (char *)((unint64_t)&a1[v20 + v21] & ~v21);
        if (v15 < a2)
        {
          if (!v22) {
            return result;
          }
          int v31 = ~v15 + a2;
          unsigned int v32 = a1;
          size_t v33 = v22;
          goto LABEL_39;
        }
        unint64_t v37 = *(void (**)(char *))(v14 + 56);
        int v38 = a1;
        goto LABEL_56;
      }
      if (v13 >= a2)
      {
        if (v8 < v12)
        {
          int v38 = (char *)((unint64_t)&a1[v19 + v17] & ~v17);
          unint64_t v37 = *(void (**)(char *))(v11 + 56);
LABEL_56:
          v37(v38);
          return result;
        }
        if (v8 >= a2)
        {
          if (v7 < 0x7FFFFFFF)
          {
            unint64_t v40 = (unint64_t)&a1[v16 + 7] & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              double result = 0.0;
              *(_OWORD *)(v40 + 8) = 0u;
              *(_OWORD *)(v40 + 24) = 0u;
              *(void *)unint64_t v40 = a2 ^ 0x80000000;
            }
            else
            {
              *(void *)(v40 + 24) = a2 - 1;
            }
          }
          else
          {
            uint64_t v39 = *(void (**)(char *))(v6 + 56);
            v39(a1);
          }
        }
        else if (((v16 + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
        {
          int v31 = ~v8 + a2;
          unsigned int v32 = a1;
          size_t v33 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
LABEL_39:
          bzero(v32, v33);
          *(_DWORD *)a1 = v31;
          return result;
        }
      }
      else
      {
        if (v20 <= 3) {
          int v34 = ~(-1 << (8 * v20));
        }
        else {
          int v34 = -1;
        }
        if (v20)
        {
          int v35 = v34 & (~v13 + a2);
          if (v20 <= 3) {
            int v36 = v20;
          }
          else {
            int v36 = 4;
          }
          bzero(a1, v20);
          switch(v36)
          {
            case 2:
              *(_WORD *)a1 = v35;
              break;
            case 3:
              *(_WORD *)a1 = v35;
              a1[2] = BYTE2(v35);
              break;
            case 4:
              *(_DWORD *)a1 = v35;
              break;
            default:
              *a1 = v35;
              break;
          }
        }
      }
      break;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for StrokeBorderShapeView(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a3[2];
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = a3[3];
  uint64_t v11 = a3[4];
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  int v15 = *(_DWORD *)(*(void *)(v11 - 8) + 80);
  uint64_t v16 = v15 & 0xF8 | 7;
  uint64_t v17 = (v15 | v10) & 0xF8 | v14 | 7;
  uint64_t v18 = v7 + v17;
  uint64_t v19 = (v7 + v17) & ~v17;
  uint64_t v20 = *(void *)(v9 + 64);
  unint64_t v21 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  uint64_t v22 = *(void *)(v13 + 64);
  uint64_t v23 = *(_DWORD *)(v6 + 80) & 0xF8 | v17;
  if (v23 != 7
    || ((*(_DWORD *)(v13 + 80) | v15 | *(_DWORD *)(v6 + 80) | v10) & 0x100000) != 0
    || v19
     + ((*(void *)(*(void *)(v11 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
     + ((v22 + v16 + ((v21 + v14) & ~v14) + 2) & ~v16)
     + 16 > 0x18)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    int v29 = (void *)(v26 + ((v23 + 16) & ~v23));
    swift_retain();
  }
  else
  {
    uint64_t v47 = *(void *)(*(void *)(v11 - 8) + 64) + 7;
    uint64_t v48 = v22 + v16 + ((v21 + v14) & ~v14) + 2;
    uint64_t v27 = ~v17;
    uint64_t v42 = v12;
    uint64_t v45 = ~v16;
    uint64_t v46 = v11;
    uint64_t v40 = AssociatedTypeWitness;
    unint64_t v41 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
    int v28 = a2;
    int v29 = a1;
    uint64_t v43 = *(void *)(*(void *)(v12 - 8) + 64);
    uint64_t v44 = *(void *)(v11 - 8);
    uint64_t v30 = *(void *)(v12 - 8);
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, v28, v5);
    unint64_t v31 = ((unint64_t)a1 + v18) & v27;
    unint64_t v32 = ((unint64_t)v28 + v18) & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v31, v32, v40);
    unint64_t v33 = ((v31 | 7) + v20) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = ((v32 | 7) + v20) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v33 = *(void *)v34;
    *(_DWORD *)(v33 + 8) = *(_DWORD *)(v34 + 8);
    *(_DWORD *)(v33 + 12) = *(_DWORD *)(v34 + 12);
    *(void *)(v33 + 16) = *(void *)(v34 + 16);
    *(void *)(v33 + 24) = *(void *)(v34 + 24);
    *(void *)(v33 + 32) = *(void *)(v34 + 32);
    unint64_t v35 = (v31 + v14 + v41) & ~v14;
    unint64_t v36 = (v32 + v14 + v41) & ~v14;
    unint64_t v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16);
    swift_bridgeObjectRetain();
    v37(v35, v36, v42);
    *(_WORD *)(v35 + v43) = *(_WORD *)(v36 + v43);
    uint64_t v38 = (v48 + v32) & v45;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 16))((v48 + v31) & v45, v38, v46);
    *(_OWORD *)((v47 + ((v48 + v31) & v45)) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v47 + v38) & 0xFFFFFFFFFFFFFFF8);
  }
  return v29;
}

uint64_t initializeWithTake for StrokeBorderShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = a3[3];
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v33 = a3[4];
  uint64_t v14 = *(void *)(v33 - 8);
  unsigned __int8 v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15 & 0xF8 | 7;
  uint64_t v17 = (v15 | *(_DWORD *)(v9 + 80)) & 0xF8 | v13 | 7;
  uint64_t v18 = v7 + v17;
  uint64_t v19 = (v7 + v17 + a1) & ~v17;
  uint64_t v20 = (v18 + a2) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v19, v20, AssociatedTypeWitness);
  uint64_t v21 = *(void *)(v10 + 32) + 7;
  unint64_t v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)(v23 + 32);
  long long v25 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v25;
  *(void *)(v22 + 32) = v24;
  unint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + v13 + 40;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))((v26 + v19) & ~v13, (v26 + v20) & ~v13, v11);
  uint64_t v27 = *(void *)(v12 + 64);
  *(_WORD *)(((v26 + v19) & ~v13) + v27) = *(_WORD *)(((v26 + v20) & ~v13) + v27);
  uint64_t v28 = v27 + v16 + (v26 & ~v13) + 2;
  uint64_t v29 = (v28 + v19) & ~v16;
  uint64_t v30 = (v28 + v20) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v29, v30, v33);
  *(_OWORD *)((*(void *)(v14 + 64) + 7 + v29) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v14 + 64)
                                                                                       + 7
                                                                                       + v30) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for StrokeBorderShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = a3[3];
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v36 = a3[4];
  uint64_t v14 = *(void *)(v36 - 8);
  unsigned __int8 v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15 & 0xF8 | 7;
  uint64_t v17 = (v15 | *(_DWORD *)(v9 + 80)) & 0xF8 | v13 | 7;
  uint64_t v18 = v7 + v17;
  uint64_t v19 = (v7 + v17 + a1) & ~v17;
  uint64_t v20 = (v18 + a2) & ~v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v19, v20, AssociatedTypeWitness);
  uint64_t v21 = *(void *)(v10 + 24) + 7;
  unint64_t v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v23 + 8);
  *(_DWORD *)(v22 + 12) = *(_DWORD *)(v23 + 12);
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  *(void *)(v22 + 24) = *(void *)(v23 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  unint64_t v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + v13 + 40;
  unint64_t v25 = (v24 + v20) & ~v13;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40))((v24 + v19) & ~v13, v25, v11);
  uint64_t v26 = *(void *)(v12 + 64);
  uint64_t v27 = (unsigned char *)(v26 + ((v24 + v19) & ~v13));
  *uint64_t v27 = *(unsigned char *)(v26 + v25);
  v27[1] = *(unsigned char *)(v26 + v25 + 1);
  uint64_t v28 = (v24 & ~v13) + v26 + v16 + 2;
  uint64_t v29 = (v28 + v19) & ~v16;
  uint64_t v30 = (v28 + v20) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v29, v30, v36);
  uint64_t v31 = *(void *)(v14 + 64) + 7;
  unint64_t v32 = (void *)((v31 + v29) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (void *)((v31 + v30) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  v32[1] = v33[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for StrokeBorderShapeView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v50 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[4];
  uint64_t v14 = *(void *)(v12 - 8);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v16 = *(void *)(a3[3] - 8);
  uint64_t v17 = *(unsigned int *)(v14 + 84);
  if (v17 <= v15) {
    unsigned int v18 = v15;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v19 = *(void *)(v13 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  uint64_t v21 = *(void *)(v7 + 64);
  int v22 = *(_DWORD *)(v9 + 80);
  uint64_t v23 = *(unsigned __int8 *)(v14 + 80);
  int v24 = *(_DWORD *)(v19 + 80);
  uint64_t v25 = *(void *)(v9 + 64);
  uint64_t v26 = *(void *)(v14 + 64);
  if (v20 <= v18) {
    unsigned int v27 = v18;
  }
  else {
    unsigned int v27 = *(_DWORD *)(v19 + 84);
  }
  if (v27 <= v8) {
    unsigned int v28 = v8;
  }
  else {
    unsigned int v28 = v27;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v29 = v24 & 0xF8 | 7;
  uint64_t v30 = (v24 | v22) & 0xF8 | v23 | 7;
  uint64_t v31 = v21 + v30;
  unint64_t v32 = ((v25 + 7) & 0xFFFFFFFFFFFFFFF8) + v23 + 40;
  uint64_t v33 = v26 + (v32 & ~v23) + 2;
  int v34 = a2 - v28;
  if (a2 <= v28) {
    goto LABEL_34;
  }
  unint64_t v35 = ((*(void *)(*(void *)(v13 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + (v31 & ~v30) + ((v33 + v29) & ~v29);
  unint64_t v36 = v35 + 16;
  char v37 = 8 * (v35 + 16);
  if ((v35 + 16) > 3) {
    goto LABEL_16;
  }
  unsigned int v40 = ((v34 + ~(-1 << v37)) >> v37) + 1;
  if (HIWORD(v40))
  {
    int v38 = *(_DWORD *)((char *)a1 + v36);
    if (v38) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v40 <= 0xFF)
    {
      if (v40 < 2) {
        goto LABEL_34;
      }
LABEL_16:
      int v38 = *((unsigned __int8 *)a1 + v36);
      if (!*((unsigned char *)a1 + v36)) {
        goto LABEL_34;
      }
LABEL_24:
      int v41 = (v38 - 1) << v37;
      if (v36 > 3) {
        int v41 = 0;
      }
      if (v35 == -16)
      {
        int v43 = 0;
      }
      else
      {
        if (v36 <= 3) {
          int v42 = v35 + 16;
        }
        else {
          int v42 = 4;
        }
        switch(v42)
        {
          case 2:
            int v43 = *a1;
            break;
          case 3:
            int v43 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v43 = *(_DWORD *)a1;
            break;
          default:
            int v43 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v28 + (v43 | v41) + 1;
    }
    int v38 = *(unsigned __int16 *)((char *)a1 + v36);
    if (*(unsigned __int16 *)((char *)a1 + v36)) {
      goto LABEL_24;
    }
  }
LABEL_34:
  if (v8 >= v27)
  {
    uint64_t v46 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v50 + 48);
    uint64_t v45 = a1;
    uint64_t v47 = v8;
    uint64_t v12 = v6;
    goto LABEL_40;
  }
  unint64_t v44 = ((unint64_t)a1 + v31) & ~v30;
  if (v18 < v20)
  {
    uint64_t v45 = (unsigned __int16 *)((v44 + v29 + v33) & ~v29);
    uint64_t v46 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v47 = *(unsigned int *)(v19 + 84);
    uint64_t v12 = v13;
    return v46(v45, v47, v12);
  }
  if (v15 < v17)
  {
    uint64_t v45 = (unsigned __int16 *)((v32 + v44) & ~v23);
    uint64_t v46 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v47 = v17;
LABEL_40:
    return v46(v45, v47, v12);
  }
  if (v11 < 0x7FFFFFFF)
  {
    unint64_t v49 = *(void *)(((v25 + 7 + v44) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v49 >= 0xFFFFFFFF) {
      LODWORD(v49) = -1;
    }
    return (v49 + 1);
  }
  else
  {
    uint64_t v48 = *(uint64_t (**)(unint64_t))(v10 + 48);
    return v48(v44);
  }
}

void storeEnumTagSinglePayload for StrokeBorderShapeView(unsigned char *a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v8 = a4[2];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v15 = a4[3];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  if (v17 <= v14) {
    unsigned int v18 = v14;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v55 = a4[4];
  uint64_t v19 = *(void *)(v55 - 8);
  uint64_t v20 = *(unsigned int *)(v19 + 84);
  uint64_t v21 = *(void *)(v9 + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  int v23 = *(_DWORD *)(v19 + 80);
  uint64_t v24 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (v20 <= v18) {
    unsigned int v25 = v18;
  }
  else {
    unsigned int v25 = *(_DWORD *)(v19 + 84);
  }
  if (v25 <= v10) {
    unsigned int v26 = v10;
  }
  else {
    unsigned int v26 = v25;
  }
  uint64_t v27 = v23 & 0xF8 | 7;
  uint64_t v28 = (v23 | *(_DWORD *)(v12 + 80)) & 0xF8 | v22 | 7;
  uint64_t v29 = v21 + v28;
  uint64_t v30 = v24 + 7;
  unint64_t v31 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  size_t v32 = *(void *)(*(void *)(v15 - 8) + 64) + ((v31 + v22) & ~v22) + 2;
  unint64_t v33 = ((*(void *)(v19 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v34 = ((v32 + v27) & ~v27) + v33;
  size_t v35 = v34 + ((v21 + v28) & ~v28);
  if (a3 > v26)
  {
    if (v35 <= 3)
    {
      unsigned int v39 = ((a3 - v26 + ~(-1 << (8 * v35))) >> (8 * v35)) + 1;
      if (HIWORD(v39))
      {
        int v36 = 4;
      }
      else if (v39 >= 0x100)
      {
        int v36 = 2;
      }
      else
      {
        int v36 = v39 > 1;
      }
      if (v26 >= a2) {
        goto LABEL_30;
      }
    }
    else
    {
      int v36 = 1;
      if (v26 >= a2) {
        goto LABEL_30;
      }
    }
LABEL_18:
    unsigned int v37 = ~v26 + a2;
    if (v35 < 4)
    {
      int v38 = (v37 >> (8 * v35)) + 1;
      if (v35)
      {
        int v40 = v37 & ~(-1 << (8 * v35));
        bzero(a1, v35);
        if (v35 == 3)
        {
          *(_WORD *)a1 = v40;
          a1[2] = BYTE2(v40);
        }
        else if (v35 == 2)
        {
          *(_WORD *)a1 = v40;
        }
        else
        {
          *a1 = v40;
        }
      }
    }
    else
    {
      bzero(a1, v35);
      *(_DWORD *)a1 = v37;
      int v38 = 1;
    }
    switch(v36)
    {
      case 1:
        a1[v35] = v38;
        break;
      case 2:
        *(_WORD *)&a1[v35] = v38;
        break;
      case 3:
LABEL_85:
        __break(1u);
        JUMPOUT(0x2460E267CLL);
      case 4:
        *(_DWORD *)&a1[v35] = v38;
        break;
      default:
        return;
    }
    return;
  }
  int v36 = 0;
  if (v26 < a2) {
    goto LABEL_18;
  }
LABEL_30:
  switch(v36)
  {
    case 1:
      a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
      goto LABEL_85;
    case 4:
      *(_DWORD *)&a1[v35] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      if (v10 >= v25)
      {
        uint64_t v45 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v46 = a1;
        uint64_t v47 = a2;
        uint64_t v48 = v10;
        uint64_t v15 = v8;
        goto LABEL_41;
      }
      int v41 = (unsigned char *)((unint64_t)&a1[v29] & ~v28);
      if (v25 < a2)
      {
        if (!v34) {
          return;
        }
        int v42 = ~v25 + a2;
        int v43 = v41;
        size_t v44 = ((v32 + v27) & ~v27) + v33;
        goto LABEL_39;
      }
      if (v18 < v20)
      {
        unint64_t v49 = (unint64_t)&v41[v27 + v32];
        int v41 = (unsigned char *)(v49 & ~v27);
        if (v20 < a2)
        {
          if (v33)
          {
            int v42 = ~v20 + a2;
            int v43 = (void *)(v49 & ~v27);
            size_t v44 = v33;
LABEL_39:
            bzero(v43, v44);
            *(_DWORD *)int v41 = v42;
            return;
          }
          return;
        }
        uint64_t v45 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
        uint64_t v46 = (unsigned char *)(v49 & ~v27);
        uint64_t v47 = a2;
        uint64_t v48 = v20;
        uint64_t v15 = v55;
LABEL_43:
        v45(v46, v47, v48, v15);
        return;
      }
      if (v18 < a2)
      {
        if (v32 <= 3) {
          int v50 = ~(-1 << (8 * v32));
        }
        else {
          int v50 = -1;
        }
        if (v32)
        {
          int v51 = v50 & (~v18 + a2);
          if (v32 <= 3) {
            int v52 = v32;
          }
          else {
            int v52 = 4;
          }
          bzero(v41, v32);
          switch(v52)
          {
            case 2:
              *(_WORD *)int v41 = v51;
              break;
            case 3:
              *(_WORD *)int v41 = v51;
              v41[2] = BYTE2(v51);
              break;
            case 4:
              *(_DWORD *)int v41 = v51;
              break;
            default:
              *int v41 = v51;
              break;
          }
        }
        return;
      }
      if (v14 < v17)
      {
        uint64_t v46 = (unsigned char *)((unint64_t)&v41[v31 + v22] & ~v22);
        uint64_t v45 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
        uint64_t v47 = a2;
        uint64_t v48 = v17;
LABEL_41:
        goto LABEL_43;
      }
      if (v14 >= a2)
      {
        if (v13 < 0x7FFFFFFF)
        {
          unint64_t v54 = (unint64_t)&v41[v30] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(_OWORD *)(v54 + 8) = 0u;
            *(_OWORD *)(v54 + 24) = 0u;
            *(void *)unint64_t v54 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v54 + 24) = (a2 - 1);
          }
        }
        else
        {
          float64x2_t v53 = *(void (**)(unsigned char *, uint64_t))(v12 + 56);
          v53(v41, a2);
        }
      }
      else if (v31)
      {
        int v42 = ~v14 + a2;
        int v43 = v41;
        size_t v44 = v31;
        goto LABEL_39;
      }
      return;
  }
}

double specialized StrokeShapeView.strokeStyle.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  uint64_t v5 = *(void *)(v3 + 8);
  double result = *(double *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  return result;
}

double specialized StrokeBorderShapeView.strokeStyle.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 68);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for _StrokedShape() + 36);
  uint64_t v7 = *(void *)(v5 + 8);
  double result = *(double *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v5 + 32);
  *(void *)a2 = *(void *)v5;
  *(void *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v9;
  return result;
}

uint64_t outlined retain of StrokeStyle(uint64_t a1)
{
  return a1;
}

uint64_t static IsCancellableGestureKey.defaultValue.getter()
{
  return 0;
}

uint64_t static IsCancellableGestureKey.reduce(value:nextValue:)(unsigned char *a1, uint64_t (*a2)(void))
{
  if (*a1) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = a2();
  }
  *a1 = result & 1;
  return result;
}

uint64_t sub_2460E2844()
{
  return swift_getWitnessTable();
}

uint64_t BackdropEffect.init(scale:color:filters:captureOnly:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, float a7@<S4>)
{
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(float *)(a2 + 16) = a7;
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BackdropView@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static RendererLeafView.makeLeafView(view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for RendererLeafView.content() in conformance BackdropView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 1065353216;
  *(void *)(result + 28) = 0;
  *(void *)(result + 20) = 0;
  *(void *)(result + 40) = MEMORY[0x263F8EE78];
  *a1 = result;
  return result;
}

float BackdropEffect.scale.getter()
{
  return *(float *)v0;
}

void BackdropEffect.scale.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*BackdropEffect.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float BackdropEffect.color.getter()
{
  return *(float *)(v0 + 4);
}

void BackdropEffect.color.setter(float a1, float a2, float a3, float a4)
{
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*BackdropEffect.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BackdropEffect.filters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BackdropEffect.filters.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*BackdropEffect.filters.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void BackdropEffect.encode(to:)(void *a1)
{
  unint64_t v3 = v2;
  float v6 = *(float *)v1;
  float v5 = *(float *)(v1 + 4);
  float v7 = *(float *)(v1 + 8);
  float v8 = *(float *)(v1 + 12);
  float v9 = *(float *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  if (*(float *)v1 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xDuLL);
    uint64_t v11 = a1[1];
    int64_t isUniquelyReferenced_nonNull_native = v11 + 4;
    if (__OFADD__(v11, 4))
    {
LABEL_24:
      __break(1u);
    }
    else if (a1[2] >= isUniquelyReferenced_nonNull_native)
    {
      a1[1] = isUniquelyReferenced_nonNull_native;
      *(float *)(*a1 + v11) = v6;
      goto LABEL_5;
    }
    *(float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v6;
  }
LABEL_5:
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v7, v8, v9);
  if (!v3)
  {
    uint64_t v13 = *(void *)(v10 + 16);
    if (v13)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = v10 + 80;
      while (1)
      {
        uint64_t v15 = *(void **)(v14 - 48);
        uint64_t v16 = *(void *)(v14 - 40);
        uint64_t v17 = *(void **)(v14 - 32);
        uint64_t v18 = *(void *)(v14 - 24);
        uint64_t v19 = *(void *)(v14 - 16);
        uint64_t v20 = *(void *)(v14 - 8);
        uint64_t v22 = *(void *)v14;
        uint64_t v21 = *(void *)(v14 + 8);
        uint64_t v10 = *(void *)(v14 + 16);
        uint64_t v23 = *(void *)(v14 + 24);
        uint64_t v24 = *(void *)(v14 + 32);
        uint64_t v25 = *(void *)(v14 + 40);
        uint64_t v26 = *(void *)(v14 + 48);
        uint64_t v27 = *(void *)(v14 + 56);
        int v28 = *(_DWORD *)(v14 + 64);
        int64_t v29 = a1[1];
        int64_t v30 = a1[2];
        uint64_t v46 = v17;
        char v47 = v18;
        size_t v44 = v15;
        int v45 = v16;
        uint64_t v42 = v25;
        uint64_t v43 = v24;
        uint64_t v40 = v27;
        uint64_t v41 = v26;
        int v39 = v28;
        uint64_t v38 = v19;
        if (v29 >= v30)
        {
          int64_t v34 = v29 + 1;
          if (__OFADD__(v29, 1))
          {
            __break(1u);
            return;
          }
          if (v30 < v34)
          {
            outlined copy of GraphicsFilter(v15, v16, v17, v18, v38, v20, v22, v21, v10, v23, v24, v25, v26, v27, v28, SBYTE2(v28));
            size_t v35 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v34);
          }
          else
          {
            a1[1] = v34;
            size_t v35 = (unsigned char *)(*a1 + v29);
            outlined copy of GraphicsFilter(v15, v16, v17, v18, v38, v20, v22, v21, v10, v23, v24, v25, v26, v27, v28, SBYTE2(v28));
          }
          *size_t v35 = 26;
        }
        else
        {
          *(unsigned char *)(*a1 + v29) = 26;
          a1[1] = v29 + 1;
          outlined copy of GraphicsFilter(v15, v16, v17, v18, v19, v20, v22, v21, v10, v23, v24, v25, v26, v27, v28, SBYTE2(v28));
        }
        uint64_t v36 = v22;
        uint64_t v31 = a1[1];
        size_t v32 = (void *)a1[3];
        int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v37 = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
          size_t v32 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v3 = v32[2];
        unint64_t v33 = v32[3];
        if (v3 >= v33 >> 1)
        {
          int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v3 + 1, 1, v32);
          size_t v32 = (void *)isUniquelyReferenced_nonNull_native;
        }
        void v32[2] = v3 + 1;
        v32[v3 + 4] = v31;
        a1[3] = v32;
        if (__OFADD__(v31, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
        a1[1] = v31 + 1;
        GraphicsFilter.encode(to:)(a1);
        v14 += 120;
        ProtobufEncoder.endLengthDelimited()();
        outlined consume of GraphicsFilter(v44, v45, v46, v47, v38, v20, v36, v37, v10, v23, v43, v42, v41, v40, v39, SBYTE2(v39));
        if (!--v13)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
  }
}

unint64_t BackdropEffect.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v4 = (void *)result;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  int v8 = 0;
  if (v6 >= v7)
  {
    float v9 = 1.0;
    BOOL v59 = (void *)MEMORY[0x263F8EE78];
    int v10 = 0;
    float v11 = 0.0;
    float v12 = 1.0;
LABEL_4:
    v4[3] = 0;
    *(float *)a2 = v12;
    *(float *)(a2 + 4) = v11;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = v8;
    *(float *)(a2 + 16) = v9;
    *(void *)(a2 + 24) = v59;
    return result;
  }
  BOOL v59 = (void *)MEMORY[0x263F8EE78];
  float v9 = 1.0;
  int v10 = 0;
  float v11 = 0.0;
  float v12 = 1.0;
  uint64_t v48 = a2;
  while (1)
  {
    uint64_t result = v4[3];
    if (result)
    {
      unint64_t v14 = v4[4];
      if (v6 < v14) {
        goto LABEL_14;
      }
      if (v14 < v6) {
        goto LABEL_61;
      }
      v4[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return swift_bridgeObjectRelease();
    }
    if (result < 8) {
      goto LABEL_61;
    }
LABEL_14:
    unint64_t v15 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 2) {
        goto LABEL_61;
      }
      ProtobufDecoder.beginMessage()();
      if (v3) {
        return swift_bridgeObjectRelease();
      }
      GraphicsFilter.init(from:)(v4, (uint64_t)v60);
      uint64_t v3 = 0;
      uint64_t v17 = (void *)v4[5];
      if (!v17[2]) {
        goto LABEL_68;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v18 = v17[2];
        if (!v18) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        uint64_t v18 = v17[2];
        if (!v18) {
          goto LABEL_69;
        }
      }
      uint64_t v19 = v18 - 1;
      uint64_t v20 = v17[v19 + 4];
      uint64_t v17[2] = v19;
      v4[5] = v17;
      v4[2] = v20;
      uint64_t v22 = v60[0];
      uint64_t v21 = v60[1];
      uint64_t v24 = v60[2];
      uint64_t v23 = v60[3];
      uint64_t v25 = v60[4];
      uint64_t v26 = v60[5];
      uint64_t v27 = v60[6];
      uint64_t v56 = v60[8];
      uint64_t v57 = v60[7];
      uint64_t v54 = v60[10];
      uint64_t v55 = v60[9];
      uint64_t v52 = v60[12];
      uint64_t v53 = v60[11];
      uint64_t v51 = v60[13];
      char v49 = v62;
      int v50 = v61;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v58 = v21;
      if ((result & 1) == 0)
      {
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        BOOL v59 = (void *)result;
      }
      unint64_t v29 = v59[2];
      unint64_t v28 = v59[3];
      if (v29 >= v28 >> 1)
      {
        uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v59);
        BOOL v59 = (void *)result;
      }
      v59[2] = v29 + 1;
      int64_t v30 = &v59[15 * v29];
      v30[4] = v22;
      v30[5] = v58;
      v30[6] = v24;
      v30[7] = v23;
      v30[8] = v25;
      v30[9] = v26;
      v30[10] = v27;
      v30[11] = v57;
      v30[12] = v56;
      v30[13] = v55;
      v30[14] = v54;
      v30[15] = v53;
      v30[16] = v52;
      v30[17] = v51;
      *((_DWORD *)v30 + 36) = v50;
      *((unsigned char *)v30 + 148) = v49;
      a2 = v48;
      goto LABEL_7;
    }
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if ((result & 7) == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            return swift_bridgeObjectRelease();
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_71;
          }
          uint64_t v16 = (float *)v4[1];
          if (v7 < (unint64_t)v16 + result) {
            goto LABEL_61;
          }
          v4[3] = 13;
          v4[4] = (char *)v16 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_61;
          }
          uint64_t v16 = (float *)v4[1];
        }
        if (v7 < (unint64_t)(v16 + 1)) {
          goto LABEL_61;
        }
        float v12 = *v16;
        v4[1] = v16 + 1;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return swift_bridgeObjectRelease();
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v13 = v4[1] + 8;
            if (v7 >= v13) {
              goto LABEL_6;
            }
            goto LABEL_61;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return swift_bridgeObjectRelease();
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_72;
            }
            unint64_t v13 = v4[1] + result;
            if (v7 < v13) {
              goto LABEL_61;
            }
LABEL_6:
            v4[1] = v13;
            break;
          case 5uLL:
            unint64_t v13 = v4[1] + 4;
            if (v7 < v13) {
              goto LABEL_61;
            }
            goto LABEL_6;
          default:
            goto LABEL_61;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_61;
    }
    uint64_t v31 = (void *)v4[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    unint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    if (v33 >= v32 >> 1) {
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
    }
    v31[2] = v33 + 1;
    v31[v33 + 4] = v7;
    v4[5] = v31;
    uint64_t v34 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return swift_bridgeObjectRelease();
    }
    if (v34 < 0) {
      break;
    }
    unint64_t v35 = v4[1] + v34;
    if (v7 < v35) {
      goto LABEL_61;
    }
    v4[2] = v35;
    float v36 = specialized Color.Resolved.init(from:)(v4);
    uint64_t v40 = (void *)v4[5];
    if (!v40[2]) {
      goto LABEL_70;
    }
    float v11 = v36;
    int v10 = v37;
    int v8 = v38;
    float v9 = v39;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v41 = v40[2];
      if (!v41) {
        goto LABEL_60;
      }
    }
    else
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      uint64_t v40 = (void *)result;
      uint64_t v41 = *(void *)(result + 16);
      if (!v41)
      {
LABEL_60:
        __break(1u);
LABEL_61:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t v42 = v41 - 1;
    uint64_t v43 = v40[v42 + 4];
    v40[2] = v42;
    v4[5] = v40;
    v4[2] = v43;
LABEL_7:
    unint64_t v6 = v4[1];
    unint64_t v7 = v4[2];
    if (v6 >= v7) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  __break(1u);
  size_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v45 = v44[2];
  if (!v45)
  {
    __break(1u);
    size_t v44 = (void *)v4[5];
    if (v44[2])
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v45 = v44[2];
        if (v45) {
          goto LABEL_66;
        }
LABEL_76:
        __break(1u);
        JUMPOUT(0x2460E3410);
      }
    }
    else
    {
      __break(1u);
    }
    size_t v44 = specialized _ArrayBuffer._consumeAndCreateNew()(v44);
    uint64_t v45 = v44[2];
    if (!v45) {
      goto LABEL_76;
    }
  }
LABEL_66:
  uint64_t v46 = v45 - 1;
  uint64_t v47 = v44[v46 + 4];
  v44[2] = v46;
  v4[5] = v44;
  v4[2] = v47;
  return swift_bridgeObjectRelease();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BackdropEffect(void *a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance BackdropEffect@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BackdropEffect.init(from:)(a1, a2);
}

uint64_t specialized static BackdropEffect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(float *)(a1 + 16) == *(float *)(a2 + 16))
  {
    return specialized static Array<A>.== infix(_:_:)(*(int8x16_t **)(a1 + 24), *(int8x16_t **)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

ValueMetadata *type metadata accessor for BackdropEffect()
{
  return &type metadata for BackdropEffect;
}

ValueMetadata *type metadata accessor for BackdropView()
{
  return &type metadata for BackdropView;
}

uint64_t sub_2460E34C0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t BindingOperations.NilCoalescing.init(defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a3, a1, a2);
  Swift::Int v6 = nilCoalescingGenerationCounter;
  uint64_t result = type metadata accessor for BindingOperations.NilCoalescing();
  *(void *)(a3 + *(int *)(result + 28)) = v6;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    nilCoalescingGenerationCounter = v6 + 1;
    int v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(a1, a2);
  }
  return result;
}

uint64_t type metadata accessor for BindingOperations.NilCoalescing()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Binding.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BindingOperations.Equals();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](v8);
  float v12 = (char *)&v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a2, a3, v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v7, a3);
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t WitnessTable = swift_getWitnessTable();
  Binding.projecting<A>(_:)((uint64_t)v12, v13, v8, WitnessTable, (char *)&v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v17;
}

uint64_t type metadata accessor for BindingOperations.Equals()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Binding<A>.false.getter()
{
  if (one-time initialization token for _constantFalse != -1) {
    swift_once();
  }
  uint64_t v0 = _constantFalse;
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t Binding.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for Binding();
  Binding.wrappedValue.getter(v10);
  int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 48))(v9, 1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    uint64_t v12 = type metadata accessor for Binding();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a3, 1, 1, v12);
  }
  else
  {
    uint64_t v14 = type metadata accessor for BindingOperations.ForceUnwrapping();
    uint64_t WitnessTable = swift_getWitnessTable();
    Binding.projecting<A>(_:)(WitnessTable, v10, v14, WitnessTable, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
    uint64_t v16 = type metadata accessor for Binding();
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 0, 1, v16);
  }
}

double Binding.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = type metadata accessor for BindingOperations.ToDouble();
  uint64_t WitnessTable = swift_getWitnessTable();
  Binding.projecting<A>(_:)(WitnessTable, v2, v3, WitnessTable, (char *)v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return *(double *)&v6[2];
}

uint64_t one-time initialization function for _constantFalse()
{
  type metadata accessor for LocationBox<ConstantLocation<Bool>>();
  uint64_t v0 = swift_allocObject();
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for ConstantLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<LocationProjectionCache>, (uint64_t)&type metadata for LocationProjectionCache, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(void *)(v0 + 24) = result;
  *(unsigned char *)(v0 + 16) = 0;
  _constantFalse = 0;
  *(void *)algn_268F037E8 = v0;
  byte_268F037F0 = 0;
  return result;
}

uint64_t type metadata accessor for BindingOperations.ForceUnwrapping()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BindingOperations.ToAnyHashable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BindingOperations.ToDouble()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BindingOperations.ToOptional.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToOptional.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t static BindingOperations.ToOptional.== infix(_:_:)()
{
  return 1;
}

Swift::Int BindingOperations.ToOptional.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.ToOptional<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToOptional.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t BindingOperations.ToAnyHashable.get(base:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyHashable.init<A>(_:)();
}

uint64_t BindingOperations.ToAnyHashable.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToAnyHashable.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t static BindingOperations.ToAnyHashable.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for Projection.get(base:) in conformance BindingOperations.ToAnyHashable<A>(uint64_t a1)
{
  return BindingOperations.ToAnyHashable.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.ToAnyHashable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToAnyHashable.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t BindingOperations.ForceUnwrapping.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  double v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v13 - v8, a1, v7);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v9, v5);
  }
  __break(1u);
  return result;
}

uint64_t static BindingOperations.ForceUnwrapping.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for Projection.get(base:) in conformance BindingOperations.ForceUnwrapping<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BindingOperations.ForceUnwrapping.get(base:)(a1, a2, a3);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.ForceUnwrapping<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.NilCoalescing.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t BindingOperations.NilCoalescing.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v20 - v16, a1, v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a2);
  uint64_t v18 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v10, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v17, v12);
  }
}

uint64_t BindingOperations.NilCoalescing.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.NilCoalescing.set(base:newValue:)(a1, a2, *(void *)(a3 + 16));
}

BOOL static BindingOperations.NilCoalescing.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BindingOperations.NilCoalescing();
  return *(void *)(a1 + *(int *)(v4 + 28)) == *(void *)(a2 + *(int *)(v4 + 28));
}

void BindingOperations.NilCoalescing.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
}

Swift::Int BindingOperations.NilCoalescing.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 28)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BindingOperations.NilCoalescing<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance BindingOperations.NilCoalescing<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))BindingOperations.NilCoalescing.hash(into:));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BindingOperations.NilCoalescing<A>(uint64_t a1, uint64_t a2)
{
  return static BindingOperations.NilCoalescing.== infix(_:_:)(a1, a2);
}

double BindingOperations.ToDouble.get(base:)(uint64_t a1)
{
  return specialized BindingOperations.ToDouble.get(base:)(a1);
}

uint64_t BindingOperations.ToDouble.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  return specialized BindingOperations.ToDouble.set(base:newValue:)(a1, *(void *)(a2 + 16));
}

uint64_t static BindingOperations.ToDouble.== infix(_:_:)()
{
  return 1;
}

void protocol witness for Projection.get(base:) in conformance BindingOperations.ToDouble<A>(uint64_t a1@<X0>, double *a2@<X8>)
{
  *a2 = specialized BindingOperations.ToDouble.get(base:)(a1);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.ToDouble<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToDouble.set(base:newValue:)(a1, *(void *)(a3 + 16));
}

double BindingOperations.ToDoubleFromInteger.get(base:)(uint64_t a1, uint64_t a2)
{
  return specialized BindingOperations.ToDoubleFromInteger.get(base:)(a1, *(void *)(a2 + 16));
}

uint64_t BindingOperations.ToDoubleFromInteger.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  return specialized BindingOperations.ToDoubleFromInteger.set(base:newValue:)(a1, *(void *)(a2 + 16));
}

uint64_t static BindingOperations.ToDoubleFromInteger.== infix(_:_:)()
{
  return 1;
}

void protocol witness for Projection.get(base:) in conformance BindingOperations.ToDoubleFromInteger<A>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  *a3 = specialized BindingOperations.ToDoubleFromInteger.get(base:)(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.ToDoubleFromInteger<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized BindingOperations.ToDoubleFromInteger.set(base:newValue:)(a1, *(void *)(a3 + 16));
}

uint64_t BindingOperations.Equals.get(base:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t BindingOperations.Equals.set(base:newValue:)(uint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v7 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(result, v5);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    return v6(v4, v3, v5);
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance BindingOperations.Equals<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = BindingOperations.Equals.get(base:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance BindingOperations.Equals<A>(uint64_t a1, char *a2, uint64_t a3)
{
  return BindingOperations.Equals.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BindingOperations.Equals<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance BindingOperations.NilCoalescing<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))CustomColorProvider.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BindingOperations.NilCoalescing<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BindingOperations.Equals<A>()
{
  return static CustomColorProvider.== infix(_:_:)();
}

double specialized BindingOperations.ToDoubleFromInteger.get(base:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    char v8 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v9 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a2);
    if (v8) {
      return (double)v9;
    }
    else {
      return (double)(unint64_t)v9;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a2);
    return *(double *)&v10[1];
  }
}

double specialized BindingOperations.ToDouble.get(base:)(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  return *(double *)&v5[1];
}

uint64_t specialized BindingOperations.ToOptional.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v13 - v9, a2, v6, v8);
  uint64_t v11 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v10, a3);
}

uint64_t specialized BindingOperations.ToAnyHashable.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  double v6 = MEMORY[0x270FA5388](a1);
  double v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(double))(v5 + 8))(v6);
  AnyHashable.base.getter();
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(a1, v8, a3);
}

uint64_t specialized BindingOperations.NilCoalescing.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  uint64_t v9 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a2, a3);
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56);

  return v7(a1, 0, 1, a3);
}

uint64_t specialized BindingOperations.ToDoubleFromInteger.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t specialized BindingOperations.ToDouble.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of BinaryFloatingPoint.init(_:)();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.ToAnyHashable<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in BindingOperations.ToAnyHashable<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.ForceUnwrapping<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in BindingOperations.ForceUnwrapping<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.NilCoalescing<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in BindingOperations.NilCoalescing<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.ToDouble<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in BindingOperations.ToDouble<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.ToDoubleFromInteger<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in BindingOperations.ToDoubleFromInteger<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for BindingOperations()
{
  return &type metadata for BindingOperations;
}

uint64_t type metadata completion function for BindingOperations.NilCoalescing()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BindingOperations.NilCoalescing(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2460E501CLL);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for BindingOperations.NilCoalescing(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460E51DCLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for BindingOperations.ToDoubleFromInteger()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for BindingOperations.Equals(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for BindingOperations.Equals(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460E5590);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for Equatable in BindingOperations.Equals<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for BindingOperations.Equals<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for LocationBox<ConstantLocation<Bool>>()
{
  if (!lazy cache variable for type metadata for LocationBox<ConstantLocation<Bool>>)
  {
    type metadata accessor for ConstantLocation<Bool>(255, &lazy cache variable for type metadata for ConstantLocation<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for ConstantLocation);
    lazy protocol witness table accessor for type ConstantLocation<Bool> and conformance ConstantLocation<A>();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<ConstantLocation<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ConstantLocation<Bool> and conformance ConstantLocation<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantLocation<Bool> and conformance ConstantLocation<A>;
  if (!lazy protocol witness table cache variable for type ConstantLocation<Bool> and conformance ConstantLocation<A>)
  {
    type metadata accessor for ConstantLocation<Bool>(255, &lazy cache variable for type metadata for ConstantLocation<Bool>, MEMORY[0x263F8D4F8], (uint64_t (*)(void, uint64_t))type metadata accessor for ConstantLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantLocation<Bool> and conformance ConstantLocation<A>);
  }
  return result;
}

void type metadata accessor for ConstantLocation<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _sSpsRi_zrlE17withMemoryRebound2to8capacity_qd_1_qd__m_Siqd_1_Spyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)(a8 - 8);
  double v14 = MEMORY[0x270FA5388](a5);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v17(v14);
  if (v11) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a11, v16, a8);
  }
  return result;
}

pthread_key_t *ThreadSpecific.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized ThreadSpecific.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t ThreadSpecific.value.getter()
{
  unint64_t v0 = ThreadSpecific.box.getter();
  outlined init with copy of Any((uint64_t)v0, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t ThreadSpecific.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized ThreadSpecific.value.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

Swift::Void __swiftcall mainThreadPrecondition()()
{
  if (!objc_msgSend(self, sel_isMainThread))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t key path getter for AtomicBox.wrappedValue : <A>AtomicBox<A>@<X0>(os_unfair_lock_s **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v6 = *a1 + 4;
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = (unint64_t)*a1
     + ((*(unsigned __int8 *)(v7 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  swift_retain();
  os_unfair_lock_lock(v6);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(a4, v8, v5);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v6);

  return swift_release();
}

uint64_t key path setter for AtomicBox.wrappedValue : <A>AtomicBox<A>(uint64_t a1, os_unfair_lock_s **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a2 + 4;
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = (unint64_t)*a2
     + ((*(unsigned __int8 *)(v7 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  swift_retain();
  os_unfair_lock_lock(v6);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v8, a1, v5);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v6);

  return swift_release();
}

uint64_t AtomicBox.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (char *)v4 + ((*(unsigned __int8 *)(v6 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v7, a1, v5);
  os_unfair_lock_unlock(v4 + 4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);

  return swift_release();
}

uint64_t AtomicBox<A>.init()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  uint64_t result = AtomicBox.init(wrappedValue:)((uint64_t)v5, a1, &v8);
  *a2 = v8;
  return result;
}

pthread_key_t *ThreadSpecific.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized ThreadSpecific.init(_:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

void @objc closure #1 in ThreadSpecific.init(_:)()
{
  swift_arrayDestroy();

  JUMPOUT(0x24C527CC0);
}

void ThreadSpecific.deinit()
{
}

void ThreadSpecific.__deallocating_deinit()
{
}

uint64_t sub_2460E5E48()
{
  return swift_deallocClassInstance();
}

_OWORD *ThreadSpecific.box.getter()
{
  pthread_key_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = pthread_getspecific(v0[2]);
  if (!v2)
  {
    uint64_t v2 = (_OWORD *)swift_slowAlloc();
    pthread_setspecific(v0[2], v2);
    uint64_t v3 = (char *)v0 + *(void *)(*v0 + 96);
    uint64_t v4 = *(void *)(v1 + 80);
    uint64_t v8 = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v7);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v4 - 8) + 16))(boxed_opaque_existential_1, v3, v4);
    outlined init with take of Any(&v7, v2);
  }
  return v2;
}

void (*ThreadSpecific.value.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  ThreadSpecific.value.getter();
  return ThreadSpecific.value.modify;
}

void ThreadSpecific.value.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized ThreadSpecific.value.setter((uint64_t)v3);
    long long v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized ThreadSpecific.value.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

pthread_key_t *specialized ThreadSpecific.init(_:)(uint64_t a1)
{
  v1[2] = 0;
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(*v1 + 80) - 8) + 16))((char *)v1 + *(void *)(*v1 + 96), a1);
  swift_beginAccess();
  pthread_key_create(v1 + 2, (void (__cdecl *)(void *))@objc closure #1 in ThreadSpecific.init(_:));
  swift_endAccess();
  return v1;
}

uint64_t specialized ThreadSpecific.value.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = ThreadSpecific.box.getter();
  uint64_t v8 = *(void *)(v3 + 80);
  uint64_t v9 = a1;
  return _sSpsRi_zrlE17withMemoryRebound2to8capacity_qd_1_qd__m_Siqd_1_Spyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF(v8, 1, (uint64_t)partial apply for closure #1 in ThreadSpecific.value.setter, (uint64_t)v7, (uint64_t)v4, MEMORY[0x263F8EE58] + 8, v8, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v6);
}

void specialized ThreadSpecific.deinit()
{
  _StringGuts.grow(_:)(34);
  type metadata accessor for ThreadSpecific();
  _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000246225EF0;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_2460E635C()
{
  return 8;
}

void *sub_2460E6368(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2460E6374()
{
  return ThreadSpecific.value.getter();
}

uint64_t sub_2460E6398(uint64_t a1)
{
  return specialized ThreadSpecific.value.setter(a1);
}

uint64_t sub_2460E63BC()
{
  return 8;
}

uint64_t type metadata completion function for ThreadSpecific()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ThreadSpecific()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ThreadSpecific(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ThreadSpecific);
}

uint64_t dispatch thunk of ThreadSpecific.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t partial apply for closure #1 in ThreadSpecific.value.setter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8) + 24))(a1, *(void *)(v1 + 24));
}

id specialized static UserDefaultKeyedFeature.isEnabled.getter()
{
  return specialized static UserDefaultKeyedFeature.isEnabled.getter(static EnableResizeLogging.cachedValue, &static EnableResizeLogging.key, &qword_268F03CD0);
}

id specialized static UserDefaultKeyedFeature.isEnabled.getter(unsigned char *a1, uint64_t *a2, uint64_t *a3)
{
  swift_beginAccess();
  int v6 = *a1;
  if (v6 != 2) {
    return (id)(v6 & 1);
  }
  long long v7 = self;
  id v8 = objc_msgSend(v7, sel_standardUserDefaults);
  uint64_t v9 = *a2;
  uint64_t v10 = *a3;
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)MEMORY[0x24C522820](v9, v10);
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v8, sel_objectForKey_, v11);

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v19);
    id v13 = objc_msgSend(v7, sel_standardUserDefaults);
    uint64_t v14 = *a2;
    uint64_t v15 = *a3;
    swift_bridgeObjectRetain();
    uint64_t v16 = (void *)MEMORY[0x24C522820](v14, v15);
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v13, sel_BOOLForKey_, v16);

    *a1 = (_BYTE)v17;
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    outlined destroy of Any?((uint64_t)v19);
    id v17 = 0;
    *a1 = 0;
  }
  return v17;
}

uint64_t precondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, void (*a3)(void))
{
  uint64_t result = a1();
  if ((result & 1) == 0)
  {
    a3();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static Log.internalWarning(_:)(uint64_t (*a1)(void))
{
  return specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, a1);
}

uint64_t static Log.internalError(_:)(uint64_t (*a1)(void))
{
  return specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, a1);
}

void preconditionFailure(_:)(void (*a1)(void))
{
}

id static Log.runtimeIssuesLog.getter()
{
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static Log.runtimeIssuesLog;

  return v0;
}

unint64_t static Log.subsystem.getter()
{
  return 0xD000000000000011;
}

uint64_t static Log.internalWarning(_:file:line:)(uint64_t (*a1)(void))
{
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  uint64_t v3 = a1();
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 2108704;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 58;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x800000024621D860;
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v10);
  *(void *)(v2 + 56) = MEMORY[0x263F8D310];
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

uint64_t static Log.internalError(_:file:line:)(uint64_t (*a1)(void))
{
  static os_log_type_t.fault.getter();
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)static Log.internalErrorsLog;
  uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461BE2B0;
  id v5 = v2;
  uint64_t v6 = a1();
  uint64_t v25 = a1;
  uint64_t v8 = v7;
  uint64_t v9 = MEMORY[0x263F8D310];
  *(void *)(v4 + 56) = MEMORY[0x263F8D310];
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v4 + 64) = v10;
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v11 = StaticString.description.getter();
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v10;
  *(void *)(v4 + 72) = v11;
  *(void *)(v4 + 80) = v12;
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v4 + 136) = v9;
  *(void *)(v4 + 144) = v10;
  *(void *)(v4 + 112) = v13;
  *(void *)(v4 + 120) = v14;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v3);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  uint64_t v16 = v25();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 2108704;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x800000024621D860;
  v23._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v23);
  *(void *)(v15 + 56) = MEMORY[0x263F8D310];
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for runtimeIssuesLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.runtimeIssuesLog = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.runtimeIssuesLog = result;
  return result;
}

uint64_t one-time initialization function for propertyChangeLog(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.propertyChangeLog);
}

uint64_t static Log.propertyChangeLog.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for propertyChangeLog, (uint64_t)static Log.propertyChangeLog, a1);
}

uint64_t static Log.unlocatedIssuesLog.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unlocatedIssuesLog != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.unlocatedIssuesLog);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static Log.unlocatedIssuesLog.setter(uint64_t a1)
{
  if (one-time initialization token for unlocatedIssuesLog != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Log.unlocatedIssuesLog);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v3, a1, v2);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

uint64_t (*static Log.unlocatedIssuesLog.modify())()
{
  if (one-time initialization token for unlocatedIssuesLog != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.unlocatedIssuesLog);
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t one-time initialization function for internalErrorsLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.internalErrorsLog = result;
  return result;
}

id static Log.internalErrorsLog.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for internalErrorsLog, (void **)&static Log.internalErrorsLog);
}

void static Log.internalErrorsLog.setter(void *a1)
{
}

uint64_t (*static Log.internalErrorsLog.modify())()
{
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t one-time initialization function for eventDebuggingLog()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.eventDebuggingLog = result;
  return result;
}

id static Log.eventDebuggingLog.getter()
{
  return static CoreGlue.shared.getter(&one-time initialization token for eventDebuggingLog, (void **)&static Log.eventDebuggingLog);
}

void static Log.eventDebuggingLog.setter(void *a1)
{
}

uint64_t (*static Log.eventDebuggingLog.modify())()
{
  if (one-time initialization token for eventDebuggingLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static Log.archiving.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for archiving, (uint64_t)static Log.archiving, a1);
}

uint64_t one-time initialization function for archivedToggle(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.archivedToggle);
}

uint64_t static Log.archivedToggle.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for archivedToggle, (uint64_t)static Log.archivedToggle, a1);
}

uint64_t one-time initialization function for archivedButton(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.archivedButton);
}

uint64_t static Log.archivedButton.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for archivedButton, (uint64_t)static Log.archivedButton, a1);
}

uint64_t one-time initialization function for archivedPlaybackButton(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.archivedPlaybackButton);
}

uint64_t static Log.archivedPlaybackButton.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(one-time initialization token for archivedPlaybackButton, (uint64_t)static Log.archivedPlaybackButton, a1);
}

uint64_t static Log.metadataExtraction.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for metadataExtraction, (uint64_t)static Log.metadataExtraction, a1);
}

uint64_t one-time initialization function for unitTests(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.unitTests);
}

uint64_t static Log.unitTests.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for unitTests, (uint64_t)static Log.unitTests, a1);
}

uint64_t one-time initialization function for timelineScheduleSequences(uint64_t a1)
{
  return one-time initialization function for propertyChangeLog(a1, static Log.timelineScheduleSequences);
}

uint64_t static Log.timelineScheduleSequences.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.propertyChangeLog.getter(&one-time initialization token for timelineScheduleSequences, (uint64_t)static Log.timelineScheduleSequences, a1);
}

uint64_t static Log.propertyChangeLog.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

void preconditionFailure(_:file:line:)(void (*a1)(void))
{
}

id static OS_os_log.runtimeIssuesLog.getter()
{
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static OS_os_log.runtimeIssuesLog;

  return v0;
}

void static OS_os_log.runtimeIssuesLog.setter(uint64_t a1)
{
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = (void *)static OS_os_log.runtimeIssuesLog;
  static OS_os_log.runtimeIssuesLog = a1;
}

uint64_t (*static OS_os_log.runtimeIssuesLog.modify())()
{
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t one-time initialization function for focus()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.focus);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.focus);
  swift_beginAccess();
  if (static EnableFocusLogging.cachedValue != 2)
  {
    if (static EnableFocusLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000024, 0x8000000246226260);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableFocusLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD000000000000024, 0x8000000246226260);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableFocusLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.focus.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(one-time initialization token for focus, (uint64_t)static Log.focus, a1);
}

uint64_t one-time initialization function for listSelection()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.listSelection);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.listSelection);
  swift_beginAccess();
  if (static EnableListSelectionLogging.cachedValue != 2)
  {
    if (static EnableListSelectionLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD00000000000002CLL, 0x8000000246226200);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableListSelectionLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD00000000000002CLL, 0x8000000246226200);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableListSelectionLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.listSelection.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for listSelection, (uint64_t)static Log.listSelection, a1);
}

uint64_t one-time initialization function for listDiffing()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.listDiffing);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.listDiffing);
  swift_beginAccess();
  if (static EnableListDiffingLogging.cachedValue != 2)
  {
    if (static EnableListDiffingLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x80000002462261D0);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableListDiffingLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x80000002462261D0);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableListDiffingLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.listDiffing.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for listDiffing, (uint64_t)static Log.listDiffing, a1);
}

uint64_t one-time initialization function for listPerf()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.listPerf);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.listPerf);
  swift_beginAccess();
  if (static EnableListPerformanceLogging.cachedValue != 2)
  {
    if (static EnableListPerformanceLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000027, 0x80000002462261A0);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableListPerformanceLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD000000000000027, 0x80000002462261A0);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableListPerformanceLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.listPerf.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for listPerf, (uint64_t)static Log.listPerf, a1);
}

uint64_t one-time initialization function for listMisc()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.listMisc);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.listMisc);
  swift_beginAccess();
  if (static EnableListMiscLogging.cachedValue != 2)
  {
    if (static EnableListMiscLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000027, 0x8000000246226170);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableListMiscLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD000000000000027, 0x8000000246226170);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableListMiscLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.listMisc.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for listMisc, (uint64_t)static Log.listMisc, a1);
}

uint64_t one-time initialization function for table()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.table);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.table);
  swift_beginAccess();
  if (static EnableTableLogging.cachedValue != 2)
  {
    if (static EnableTableLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000024, 0x8000000246226140);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableTableLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD000000000000024, 0x8000000246226140);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableTableLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.table.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(one-time initialization token for table, (uint64_t)static Log.table, a1);
}

uint64_t one-time initialization function for tabView()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.tabView);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.tabView);
  swift_beginAccess();
  if (static EnableTabViewLogging.cachedValue != 2)
  {
    if (static EnableTabViewLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD000000000000026, 0x80000002462260E0);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableTabViewLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD000000000000026, 0x80000002462260E0);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableTabViewLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.tabView.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for tabView, (uint64_t)static Log.tabView, a1);
}

uint64_t one-time initialization function for urlHandling()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.urlHandling);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.urlHandling);
  swift_beginAccess();
  if (static EnableURLHandlingLogging.cachedValue != 2)
  {
    if (static EnableURLHandlingLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x80000002462260B0);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableURLHandlingLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x80000002462260B0);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableURLHandlingLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.urlHandling.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(one-time initialization token for urlHandling, (uint64_t)static Log.urlHandling, a1);
}

uint64_t one-time initialization function for dragAndDrop()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v16 - v2;
  __swift_allocate_value_buffer(v4, static Log.dragAndDrop);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.dragAndDrop);
  swift_beginAccess();
  if (static EnableDragAndDropLogging.cachedValue != 2)
  {
    if (static EnableDragAndDropLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v14 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 1, 1, v14);
    return outlined init with take of Logger?((uint64_t)v3, v5);
  }
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v8 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x8000000246226020);
  id v9 = objc_msgSend(v7, sel_objectForKey_, v8);

  if (!v9)
  {
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16);
    static EnableDragAndDropLogging.cachedValue = 0;
    goto LABEL_8;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v16);
  id v10 = objc_msgSend(v6, sel_standardUserDefaults);
  uint64_t v11 = (void *)MEMORY[0x24C522820](0xD00000000000002ALL, 0x8000000246226020);
  unsigned __int8 v12 = objc_msgSend(v10, sel_BOOLForKey_, v11);

  static EnableDragAndDropLogging.cachedValue = v12;
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  Logger.init(subsystem:category:)();
  uint64_t v13 = type metadata accessor for Logger();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 0, 1, v13);
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.dragAndDrop.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for dragAndDrop, (uint64_t)static Log.dragAndDrop, a1);
}

uint64_t one-time initialization function for documents()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - v2;
  __swift_allocate_value_buffer(v4, static Log.documents);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.documents);
  if (specialized static UserDefaultKeyedFeature.isEnabled.getter(static EnableDocumentsLogging.cachedValue, &static EnableDocumentsLogging.key, &qword_268F03CE8))
  {
    Logger.init(subsystem:category:)();
    uint64_t v6 = type metadata accessor for Logger();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  }
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.documents.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for documents, (uint64_t)static Log.documents, a1);
}

uint64_t one-time initialization function for resize()
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268], MEMORY[0x263F8D8F0]);
  uint64_t v1 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v9 - v2;
  __swift_allocate_value_buffer(v4, static Log.resize);
  uint64_t v5 = __swift_project_value_buffer(v1, (uint64_t)static Log.resize);
  if (specialized static UserDefaultKeyedFeature.isEnabled.getter(static EnableResizeLogging.cachedValue, &static EnableResizeLogging.key, &qword_268F03CD0))
  {
    Logger.init(subsystem:category:)();
    uint64_t v6 = type metadata accessor for Logger();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  }
  return outlined init with take of Logger?((uint64_t)v3, v5);
}

uint64_t static Log.resize.getter@<X0>(uint64_t a1@<X8>)
{
  return static Log.focus.getter(&one-time initialization token for resize, (uint64_t)static Log.resize, a1);
}

uint64_t specialized static Log.internalWarning(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static Log.internalWarning(_:file:line:)(a1, a2, a3, a4, 0xD000000000000053, 0x80000002462263C0);
}

{
  return specialized static Log.internalWarning(_:file:line:)(a1, a2, a3, a4, 0xD000000000000026, 0x8000000246225FD0);
}

{
  return specialized static Log.internalWarning(_:file:line:)(a1, a2, a3, a4, 0x692074657366666FLL, 0xEE0064696C61766ELL);
}

{
  return specialized static Log.internalWarning(_:file:line:)(a1, a2, a3, a4, 0xD000000000000018, 0x8000000246225FB0);
}

{
  return specialized static Log.internalWarning(_:file:line:)(a1, a2, a3, a4, 0xD00000000000002BLL, 0x8000000246226440);
}

uint64_t specialized static Log.internalError(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static Log.internalError(_:file:line:)(a1, a2, a3, a4, 0xD000000000000020, 0x8000000246226330);
}

{
  return specialized static Log.internalError(_:file:line:)(a1, a2, a3, a4, 0xD000000000000015, 0x8000000246226360);
}

{
  return specialized static Log.internalError(_:file:line:)(a1, a2, a3, a4, 0xD00000000000001ALL, 0x8000000246226380);
}

{
  return specialized static Log.internalError(_:file:line:)(a1, a2, a3, a4, 0xD000000000000023, 0x8000000246226470);
}

{
  return specialized static Log.internalError(_:file:line:)(a1, a2, a3, a4, 0xD00000000000002ELL, 0x8000000246225F80);
}

uint64_t specialized static Log.internalError(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  static os_log_type_t.fault.getter();
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = (void *)static Log.internalErrorsLog;
  uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461BE2B0;
  uint64_t v11 = MEMORY[0x263F8D310];
  *(void *)(v10 + 56) = MEMORY[0x263F8D310];
  unint64_t v12 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v10 + 64) = v12;
  *(void *)(v10 + 32) = a5;
  *(void *)(v10 + 40) = a6;
  uint64_t v25 = a6;
  id v13 = v8;
  uint64_t v14 = StaticString.description.getter();
  *(void *)(v10 + 96) = v11;
  *(void *)(v10 + 104) = v12;
  *(void *)(v10 + 72) = v14;
  *(void *)(v10 + 80) = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v10 + 136) = v11;
  *(void *)(v10 + 144) = v12;
  *(void *)(v10 + 112) = v16;
  *(void *)(v10 + 120) = v17;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v9);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 2108704;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x800000024621D860;
  v23._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v23);
  *(void *)(v18 + 56) = MEMORY[0x263F8D310];
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = v25;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static Log.internalWarning(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8E0F8]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  uint64_t v7 = a5();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 2108704;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x800000024621D860;
  v14._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v14);
  *(void *)(v6 + 56) = MEMORY[0x263F8D310];
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

void specialized static Log.eventDebug(_:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for eventDebuggingLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = (void *)static Log.eventDebuggingLog;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = v4;
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245728000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v8, -1, -1);
    MEMORY[0x24C527CC0](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t specialized static Log.internalError(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  static os_log_type_t.fault.getter();
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  os_log_type_t v6 = (void *)static Log.internalErrorsLog;
  uint64_t v7 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2461BE2B0;
  id v9 = v6;
  uint64_t v10 = a5();
  unint64_t v29 = a5;
  uint64_t v12 = v11;
  uint64_t v13 = MEMORY[0x263F8D310];
  *(void *)(v8 + 56) = MEMORY[0x263F8D310];
  unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v8 + 64) = v14;
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + 40) = v12;
  uint64_t v15 = StaticString.description.getter();
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 104) = v14;
  *(void *)(v8 + 72) = v15;
  *(void *)(v8 + 80) = v16;
  uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v8 + 136) = v13;
  *(void *)(v8 + 144) = v14;
  *(void *)(v8 + 112) = v17;
  *(void *)(v8 + 120) = v18;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v7);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  uint64_t v20 = v29();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 2108704;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 58;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x800000024621D860;
  v27._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v27);
  *(void *)(v19 + 56) = MEMORY[0x263F8D310];
  *(void *)(v19 + 32) = v20;
  *(void *)(v19 + 40) = v22;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t specialized static Log.internalWarning(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x263F8E0F8]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2461B9DC0;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 2108704;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x800000024621D860;
  v13._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v13);
  *(void *)(v8 + 56) = MEMORY[0x263F8D310];
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  print(_:separator:terminator:)();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall isUIKitBased()()
{
  return 1;
}

Swift::Bool __swiftcall isAppKitBased()()
{
  return 0;
}

Swift::Bool __swiftcall isCatalyst()()
{
  return 0;
}

double Text.Measurements.size(of:in:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  if (!*v6)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t v13 = MEMORY[0x263F8EE78];
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TextSizeCache();
    unint64_t v14 = (void *)swift_allocObject();
    _OWORD v14[2] = 0;
    type metadata accessor for PropertyList.Tracker();
    uint64_t v15 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>();
    uint64_t v16 = swift_allocObject();
    *(_DWORD *)(v16 + 16) = 0;
    uint64_t v17 = MEMORY[0x263F8EE80];
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v17;
    *(void *)(v16 + 48) = v13;
    *(unsigned char *)(v16 + 56) = 0;
    *(void *)(v15 + 16) = v16;
    v14[3] = v15;
    v14[4] = v13;
  }
  unsigned __int8 v21 = 2;
  swift_retain();
  TextSizeCache.metrics(of:in:writingMode:)(a1, a2, a3 & 1, a4, &v21, a5, a6);
  double v19 = v18;
  swift_release();
  return v19;
}

uint64_t Text.Measurements.numberOfLines(of:in:writingMode:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 *a5, double a6, double a7)
{
  unsigned __int8 v14 = *a5;
  if (!*v7)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t v15 = MEMORY[0x263F8EE78];
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TextSizeCache();
    uint64_t v16 = (void *)swift_allocObject();
    _OWORD v16[2] = 0;
    type metadata accessor for PropertyList.Tracker();
    uint64_t v17 = swift_allocObject();
    type metadata accessor for AtomicBuffer<TrackerData>();
    uint64_t v18 = swift_allocObject();
    *(_DWORD *)(v18 + 16) = 0;
    uint64_t v19 = MEMORY[0x263F8EE80];
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v19;
    *(void *)(v18 + 48) = v15;
    *(unsigned char *)(v18 + 56) = 0;
    *(void *)(v17 + 16) = v18;
    v16[3] = v17;
    void v16[4] = v15;
  }
  unsigned __int8 v22 = v14;
  swift_retain();
  uint64_t v20 = TextSizeCache.metrics(of:in:writingMode:)(a1, a2, a3 & 1, a4, &v22, a6, a7);
  swift_release();
  return v20;
}

uint64_t static Text.Measurements._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static Text.Measurements._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t TextSizeCache.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t initializeWithCopy for TextSizeCache.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextSizeCache.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for TextSizeCache.Entry(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextSizeCache.Entry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextSizeCache.Entry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSizeCache.Entry()
{
  return &type metadata for TextSizeCache.Entry;
}

ValueMetadata *type metadata accessor for Text.Measurements.Box()
{
  return &type metadata for Text.Measurements.Box;
}

void *type metadata accessor for TextSizeCache.Metrics()
{
  return &unk_26FA49978;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in Text.Measurements.Box()
{
  return &protocol witness table for Text.Measurements;
}

uint64_t CustomHoverEffect.concat<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  Swift::String v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ModifiedContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

uint64_t sub_2460EA848()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for ModifiedContent();
  _OWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t ModifiedContent<>.systemHoverEffect.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  double v12 = MEMORY[0x270FA5388](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v11, v12);
  type metadata accessor for InternalCustomHoverEffect();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)v27);
    uint64_t v15 = v28;
    uint64_t v16 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v16 + 32))(&v24, v15, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    int v17 = v24;
    char v18 = BYTE1(v24);
  }
  else
  {
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    outlined destroy of InternalCustomHoverEffect?((uint64_t)&v24);
    int v17 = 3;
    char v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + *(int *)(a1 + 36), v6);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)v27);
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v20 + 32))(&v24, v19, v20);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    char v22 = v24;
    char v23 = BYTE1(v24);
  }
  else
  {
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t result = outlined destroy of InternalCustomHoverEffect?((uint64_t)&v24);
    char v22 = 3;
    char v23 = 1;
  }
  if (v17 != 3) {
    char v22 = v17;
  }
  *a2 = v22;
  a2[1] = v18 & v23;
  return result;
}

unint64_t type metadata accessor for InternalCustomHoverEffect()
{
  unint64_t result = lazy cache variable for type metadata for InternalCustomHoverEffect;
  if (!lazy cache variable for type metadata for InternalCustomHoverEffect)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect);
  }
  return result;
}

uint64_t outlined destroy of InternalCustomHoverEffect?(uint64_t a1)
{
  type metadata accessor for InternalCustomHoverEffect?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for InternalCustomHoverEffect?()
{
  if (!lazy cache variable for type metadata for InternalCustomHoverEffect?)
  {
    type metadata accessor for InternalCustomHoverEffect();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalCustomHoverEffect?);
    }
  }
}

_UNKNOWN **associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in <> ModifiedContent<A, B>()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for InternalCustomHoverEffect.WrappedEffectType : InternalCustomHoverEffect in <> ModifiedContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeCustomHoverEffect(effect:inputs:body:)(a1, *(void *)(v1 + 16));
}

double ViewTransform.convert(_:point:)(uint64_t a1, double result, double a3)
{
  double v4 = *(double *)v3;
  long long v5 = *(_OWORD *)(v3 + 1);
  double v6 = *((double *)v3 + 3);
  double v7 = *((double *)v3 + 4);
  if (*v3 || v6 != 0.0 || v7 != 0.0)
  {
    *(double *)double v12 = result;
    *(double *)&v12[1] = a3;
    double v8 = v4;
    long long v9 = v5;
    double v10 = v6;
    double v11 = v7;
    specialized ViewTransform.convert(_:_:)(a1, &v8, (uint64_t)v12, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
    return *(double *)v12;
  }
  return result;
}

uint64_t static ViewTransform.Conversion.globalToSpace(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 40) = 2;
  uint64_t result = outlined init with copy of CoordinateSpace(a1, a2 + 48);
  *(unsigned char *)(a2 + 89) = 4;
  return result;
}

uint64_t ViewTransform.convert<A>(_:points:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = result;
  double v9 = *(double *)v4;
  long long v13 = *(_OWORD *)(v4 + 1);
  double v10 = *((double *)v4 + 3);
  double v11 = *((double *)v4 + 4);
  if (v9 != 0.0 || v10 != 0.0 || v11 != 0.0)
  {
    uint64_t result = dispatch thunk of Collection.isEmpty.getter();
    if ((result & 1) == 0)
    {
      double v14 = v9;
      long long v15 = v13;
      double v16 = v10;
      double v17 = v11;
      MEMORY[0x270FA5388](result);
      void v12[2] = a3;
      v12[3] = a4;
      v12[4] = a2;
      return ViewTransform.convert(_:_:)(v8, partial apply for closure #1 in ViewTransform.convert<A>(_:points:), (uint64_t)v12);
    }
  }
  return result;
}

double Path.convert(to:transform:)(uint64_t a1, long long *a2)
{
  return Path.convert(to:transform:)(a1, a2, (void (*)(void **))_s7SwiftUI4PathVAAE7convert2to9transformyAA15CoordinateSpaceO_AA13ViewTransformVtFySaySo7CGPointVGzXEfU_TA_0);
}

void ViewTransform.appendProjectionTransform(_:inverse:)(CGFloat *a1, char a2)
{
  CGFloat v5 = *a1;
  CGFloat v4 = a1[1];
  double v7 = a1[2];
  CGFloat v6 = a1[3];
  CGFloat v8 = a1[4];
  double v9 = a1[5];
  CGFloat v11 = a1[6];
  CGFloat v10 = a1[7];
  double v12 = a1[8];
  if (v7 == 0.0 && v9 == 0.0 && v12 == 1.0)
  {
    _.a = *a1;
    _.b = v4;
    _.c = v6;
    _.d = v8;
    _.tx = v11;
    _.ty = v10;
    ViewTransform.appendAffineTransform(_:inverse:)(&_, a2 & 1);
    return;
  }
  uint64_t v14 = *v2;
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[3];
  uint64_t v19 = *((void *)a1 + 7);
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 32) = v21;
  *(void *)(v15 + 40) = v20;
  *(CGFloat *)(v15 + 48) = v5;
  *(CGFloat *)(v15 + 56) = v4;
  *(double *)(v15 + 64) = v7;
  *(CGFloat *)(v15 + 72) = v6;
  *(CGFloat *)(v15 + 80) = v8;
  *(double *)(v15 + 88) = v9;
  *(CGFloat *)(v15 + 96) = v11;
  *(void *)(v15 + 104) = v19;
  *(double *)(v15 + 112) = v12;
  *(unsigned char *)(v15 + 120) = a2 & 1;
  *(void *)(v15 + 16) = v14;
  if (v14)
  {
    uint64_t v16 = *(void *)(v14 + 24);
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (!v17) {
      goto LABEL_13;
    }
    __break(1u);
  }
  uint64_t v18 = 1;
LABEL_13:
  *(void *)(v15 + 24) = v18;
  *uint64_t v2 = v15;
  v2[3] = 0;
  v2[4] = 0;
}

uint64_t ViewTransform.withPosition(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(void *)a1 = *(void *)v3;
  v4.f64[0] = a2;
  v4.f64[1] = a3;
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*(float64x2_t *)(v3 + 24), vsubq_f64(v4, *(float64x2_t *)(v3 + 8)));
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  return swift_retain();
}

uint64_t ViewTransform.convert(_:points:)(uint64_t result, uint64_t a2)
{
  long long v3 = *(_OWORD *)(v2 + 1);
  double v4 = *((double *)v2 + 3);
  double v5 = *((double *)v2 + 4);
  if (*v2 || v4 != 0.0 || v5 != 0.0)
  {
    if (*(void *)(*(void *)a2 + 16))
    {
      double v6 = *(double *)v2;
      long long v7 = v3;
      double v8 = v4;
      double v9 = v5;
      return specialized ViewTransform.convert(_:_:)(result, &v6, a2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
    }
  }
  return result;
}

double ViewTransform.containingSizedCoordinateSpace(name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  long long v12 = 0u;
  long long v13 = 0u;
  char v14 = 1;
  void v9[5] = v4;
  long long v5 = *(_OWORD *)(v2 + 3);
  long long v10 = *(_OWORD *)(v2 + 1);
  long long v11 = v5;
  void v9[2] = &v12;
  _OWORD v9[3] = a1;
  ViewTransform.forEach(inverted:_:)(0, (void (*)(double *, char *))_s7SwiftUI13ViewTransformV30containingSizedCoordinateSpace4nameSo6CGRectVSgAA0gH0O4NameO_tFyAC4ItemO_SbztXEfU_TA_0, (uint64_t)v9);
  char v6 = v14;
  double result = *(double *)&v12;
  long long v8 = v13;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t ViewTransform.appendScrollGeometry(_:isClipped:)(long long *a1, char a2)
{
  long long v17 = a1[1];
  long long v18 = *a1;
  long long v15 = a1[3];
  long long v16 = a1[2];
  long long v13 = a1[5];
  long long v14 = a1[4];
  uint64_t v4 = *((void *)a1 + 12);
  uint64_t v5 = *((void *)a1 + 13);
  uint64_t v6 = *v2;
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  type metadata accessor for Element<ProjectionTransformElement>(0, (unint64_t *)&lazy cache variable for type metadata for Element<ViewTransform.ScrollGeometryItem>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem, (uint64_t)&type metadata for ViewTransform.ScrollGeometryItem, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = v7;
  *(void *)(result + 40) = v8;
  *(_OWORD *)(result + 48) = v18;
  *(_OWORD *)(result + 64) = v17;
  *(_OWORD *)(result + 80) = v16;
  *(_OWORD *)(result + 96) = v15;
  *(_OWORD *)(result + 112) = v14;
  *(_OWORD *)(result + 128) = v13;
  *(void *)(result + 144) = v4;
  *(void *)(result + 152) = v5;
  *(unsigned char *)(result + 160) = a2;
  *(void *)(result + 16) = v6;
  if (v6)
  {
    uint64_t v10 = *(void *)(v6 + 24);
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (!v11) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v12 = 1;
LABEL_6:
  *(void *)(result + 24) = v12;
  *uint64_t v2 = result;
  v2[3] = 0;
  v2[4] = 0;
  return result;
}

double static ViewTransform.Conversion.spaceToGlobal(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of CoordinateSpace(a1, a2);
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(void *)(a2 + 80) = 0;
  *(_WORD *)(a2 + 88) = 1026;
  return result;
}

uint64_t static ViewTransform.ScrollGeometryItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 112);
  int v3 = *(unsigned __int8 *)(a2 + 112);
  long long v4 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  void v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v6;
  void v12[6] = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  _OWORD v11[3] = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v9;
  v11[6] = *(_OWORD *)(a2 + 96);
  return specialized static ScrollGeometry.== infix(_:_:)((uint64_t)v12, (uint64_t)v11) & ~(v2 ^ v3) & 1;
}

double ViewTransform.positionAdjustment.getter()
{
  return *(double *)(v0 + 8);
}

BOOL ViewTransform.isEmpty.getter()
{
  return !*(void *)v0 && *(double *)(v0 + 24) == 0.0 && *(double *)(v0 + 32) == 0.0;
}

void ViewTransform.UnsafeBuffer.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

Swift::Void __swiftcall ViewTransform.appendTranslation(_:)(CGSize a1)
{
  double v2 = *(double *)(v1 + 32) + a1.height;
  *(double *)(v1 + 24) = *(double *)(v1 + 24) + a1.width;
  *(double *)(v1 + 32) = v2;
}

float64_t ViewTransform.appendPosition(_:scale:)(float64x2_t a1, float64_t a2, double a3)
{
  float64_t v4 = a1.f64[0] * a3;
  a1.f64[1] = a2;
  *(float64x2_t *)(v3 + 24) = vsubq_f64(*(float64x2_t *)(v3 + 24), vsubq_f64(a1, *(float64x2_t *)(v3 + 8)));
  float64_t result = a2 * a3;
  *(float64_t *)(v3 + 8) = v4;
  *(float64_t *)(v3 + 16) = a2 * a3;
  return result;
}

Swift::Void __swiftcall ViewTransform.setPositionAdjustment(_:)(CGSize a1)
{
  *(CGFloat *)(v1 + 8) = a1.width;
  *(CGFloat *)(v1 + 16) = a1.height;
}

Swift::Void __swiftcall ViewTransform.appendAffineTransform(_:inverse:)(CGAffineTransform *_, Swift::Bool inverse)
{
  CGFloat a = _->a;
  double b = _->b;
  double c = _->c;
  double d = _->d;
  long long v8 = (float64x2_t *)(v2 + 3);
  if (_->a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
  {
    int32x2_t v10 = vdup_n_s32(inverse);
    v11.i64[0] = v10.u32[0];
    v11.i64[1] = v10.u32[1];
    *long long v8 = vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v11, 0x3FuLL)), (int8x16_t)vnegq_f64(*(float64x2_t *)&_->tx), *(int8x16_t *)&_->tx), *v8);
    return;
  }
  uint64_t v12 = *v2;
  uint64_t v13 = v2[3];
  uint64_t v14 = v2[4];
  long long v19 = *(_OWORD *)&_->tx;
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v14;
  *(CGFloat *)(v15 + 48) = a;
  *(double *)(v15 + 56) = b;
  *(double *)(v15 + 64) = c;
  *(double *)(v15 + 72) = d;
  *(_OWORD *)(v15 + 80) = v19;
  *(unsigned char *)(v15 + 96) = inverse;
  *(void *)(v15 + 16) = v12;
  if (v12)
  {
    uint64_t v16 = *(void *)(v12 + 24);
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (!v17) {
      goto LABEL_14;
    }
    __break(1u);
  }
  uint64_t v18 = 1;
LABEL_14:
  *(void *)(v15 + 24) = v18;
  *double v2 = v15;
  v8->f64[0] = 0.0;
  v2[4] = 0;
}

Swift::Void __swiftcall ViewTransform.appendCoordinateSpace(id:)(SwiftUI::CoordinateSpace::ID id)
{
  uint64_t v2 = *(void *)id.value.value;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  type metadata accessor for Element<ProjectionTransformElement>(0, &lazy cache variable for type metadata for Element<CoordinateSpaceIDElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type CoordinateSpaceIDElement and conformance CoordinateSpaceIDElement, (uint64_t)&unk_26FA6ACC0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  long long v6 = (void *)swift_allocObject();
  v6[4] = v4;
  v6[5] = v5;
  v6[6] = v2;
  v6[2] = v3;
  if (v3)
  {
    uint64_t v7 = *(void *)(v3 + 24);
    BOOL v8 = __OFADD__(v7, 1);
    uint64_t v9 = v7 + 1;
    if (!v8) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v9 = 1;
LABEL_6:
  void v6[3] = v9;
  *uint64_t v1 = (uint64_t)v6;
  v1[3] = 0;
  v1[4] = 0;
}

uint64_t ViewTransform.forEach(_:)(void (*a1)(double *, char *), uint64_t a2)
{
  return ViewTransform.forEach(inverted:_:)(0, a1, a2);
}

uint64_t ViewTransform.convert(_:_:)(uint64_t result, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  double v6 = *v3;
  uint64_t v7 = *((void *)v3 + 1);
  uint64_t v8 = *((void *)v3 + 2);
  double v9 = v3[3];
  double v10 = v3[4];
  if (!*(void *)v3 && v9 == 0.0 && v10 == 0.0) {
    return result;
  }
  outlined init with copy of ViewTransform.Conversion(result, (uint64_t)v38);
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  if (v36 != 4)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
    goto LABEL_24;
  }
  outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
  outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
  outlined init with copy of CoordinateSpace((uint64_t)&v23, (uint64_t)&v28);
  outlined init with copy of CoordinateSpace((uint64_t)v37, (uint64_t)&v32);
  if (v31 == 2 && *(void *)&v28 == 1)
  {
    int8x16_t v11 = vorrq_s8(v29, v30);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
      char v39 = 2;
      uint64_t v12 = &v32;
LABEL_23:
      outlined destroy of CoordinateSpace((uint64_t)v12);
      goto LABEL_24;
    }
  }
  if (v35 == 2 && v32 == 1)
  {
    int8x16_t v13 = vorrq_s8(v33, v34);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)v37);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
      char v39 = 3;
LABEL_22:
      uint64_t v12 = (uint64_t *)&v28;
      goto LABEL_23;
    }
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v28, (uint64_t)v22);
  if (one-time initialization token for root != -1) {
    swift_once();
  }
  char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  if (v14)
  {
    outlined destroy of CoordinateSpace((uint64_t)&v23);
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
    char v39 = 0;
LABEL_21:
    outlined destroy of CoordinateSpace((uint64_t)&v32);
    goto LABEL_22;
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v32, (uint64_t)v22);
  char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v37);
  if (v15)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
    char v39 = 1;
    goto LABEL_21;
  }
  outlined destroy of CoordinateSpace((uint64_t)&v23);
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)&v28, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
LABEL_24:
  char v27 = 0;
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  switch(v36)
  {
    case 1:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v17 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))) {
          goto LABEL_42;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_40;
    case 2:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v18 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))) {
          goto LABEL_36;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_42;
    case 3:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v19 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if ((v19 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 4:
LABEL_40:
      outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      goto LABEL_43;
    default:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v16 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if (v16)
      {
LABEL_36:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      }
      else
      {
LABEL_42:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
        char v27 = 1;
LABEL_43:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
        switch(v36)
        {
          case 0:
          case 3:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 0;
            break;
          case 1:
          case 2:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 1;
            break;
          case 4:
            outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
            outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
            *(double *)char v22 = v6;
            v22[1] = v7;
            v22[2] = v8;
            *(double *)&v22[3] = v9;
            *(double *)&v22[4] = v10;
            char v21 = ViewTransform.spaceBeforeSpace(_:_:)((uint64_t)&v23, (uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)&v23);
            char v20 = v21 ^ 1;
            break;
          default:
            JUMPOUT(0);
        }
        double v28 = v6;
        v29.i64[0] = v7;
        v29.i64[1] = v8;
        *(double *)v30.i64 = v9;
        *(double *)&v30.i64[1] = v10;
        specialized ViewTransform.forEach(inverted:_:)(v20 & 1, (uint64_t)&v28, (uint64_t)v38, &v27, a2, a3);
      }
      float64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      break;
  }
  return result;
}

uint64_t ViewTransform.spaceBeforeSpace(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  outlined init with copy of CoordinateSpace(a1, (uint64_t)&v20);
  if (v23)
  {
    if (v23 != 1)
    {
      if (!(*((void *)&v21 + 1) | v22 | (unint64_t)v20 | (unint64_t)v21 | *((void *)&v20 + 1))) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
    *(void *)&v24[0] = v20;
    char v9 = 1;
  }
  else
  {
    char v9 = 0;
    v24[0] = v20;
    v24[1] = v21;
    uint64_t v25 = v22;
  }
  char v26 = v9;
  uint64_t v10 = outlined init with copy of CoordinateSpace(a2, (uint64_t)&v16);
  if (!v19)
  {
    char v11 = 0;
    long long v20 = v16;
    long long v21 = v17;
    uint64_t v22 = v18;
    goto LABEL_11;
  }
  if (v19 != 1)
  {
    if (*((void *)&v17 + 1) | v18 | (unint64_t)v16 | (unint64_t)v17 | *((void *)&v16 + 1))
    {
      outlined destroy of CoordinateSpace.Name((uint64_t)v24);
LABEL_14:
      char v12 = 1;
      return v12 & 1;
    }
    outlined destroy of CoordinateSpace.Name((uint64_t)v24);
LABEL_16:
    char v12 = 0;
    return v12 & 1;
  }
  *(void *)&long long v20 = v16;
  char v11 = 1;
LABEL_11:
  char v23 = v11;
  __int16 v15 = 0;
  *(void *)&long long v16 = v4;
  *((void *)&v16 + 1) = v5;
  *(void *)&long long v17 = v6;
  *((void *)&v17 + 1) = v7;
  uint64_t v18 = v8;
  MEMORY[0x270FA5388](v10);
  _OWORD v14[2] = (char *)&v15 + 1;
  v14[3] = v24;
  v14[4] = &v15;
  v14[5] = &v20;
  ViewTransform.forEach(inverted:_:)(0, (void (*)(double *, char *))partial apply for closure #1 in ViewTransform.spaceBeforeSpace(_:_:), (uint64_t)v14);
  char v12 = HIBYTE(v15) & (v15 ^ 1);
  outlined destroy of CoordinateSpace.Name((uint64_t)&v20);
  outlined destroy of CoordinateSpace.Name((uint64_t)v24);
  return v12 & 1;
}

uint64_t closure #1 in ViewTransform.spaceBeforeSpace(_:_:)(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t a4, char *a5, uint64_t a6)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v13);
  if (v14 - 3 > 1)
  {
    uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)v13);
    char v11 = *a5;
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v13, v15);
    *a3 = specialized static CoordinateSpace.Name.== infix(_:_:)(a4, (uint64_t)v15) & 1;
    char v11 = specialized static CoordinateSpace.Name.== infix(_:_:)(a6, (uint64_t)v15);
    uint64_t result = outlined destroy of CoordinateSpace.Name((uint64_t)v15);
    *a5 = v11 & 1;
  }
  *a2 = (*a3 | v11) & 1;
  return result;
}

uint64_t MutableCollection<>._applyTransform(item:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v65 = a1;
  uint64_t v68 = a3;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v11 - 8);
  int8x16_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v57 - v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v17);
  uint64_t v63 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v57 - v18);
  uint64_t v62 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v19);
  long long v21 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v4;
  int v61 = *(void (***)(char *, uint64_t))(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedConformanceWitness = (unsigned int (*)(char *, uint64_t, uint64_t))v17;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  int8x16_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v57 - v26;
  uint64_t result = outlined init with copy of ViewTransform.Item(v65, (uint64_t)&v71);
  switch(v75)
  {
    case 1:
      CGFloat b = v71.b;
      CGFloat a = v71.a;
      CGFloat d = v71.d;
      CGFloat c = v71.c;
      CGFloat ty = v71.ty;
      CGFloat tx = v71.tx;
      unint64_t v66 = v24;
      uint64_t v58 = v7;
      if (v72 == 1)
      {
        CGAffineTransform v76 = v71;
        CGAffineTransformInvert(&v70, &v76);
        CGFloat a = v70.a;
        CGFloat b = v70.b;
        CGFloat c = v70.c;
        CGFloat d = v70.d;
        CGFloat tx = v70.tx;
        CGFloat ty = v70.ty;
      }
      uint64_t v46 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v21, v60, a2);
      dispatch thunk of Collection.indices.getter();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v21, a2);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t AssociatedConformanceWitness = (unsigned int (*)(char *, uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v47 = v69;
      uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
      int v48 = v63(v13, 1, AssociatedTypeWitness);
      uint64_t v65 = v22;
      char v49 = v58;
      if (v48 != 1)
      {
        uint64_t v51 = *(void *)(v47 + 16);
        uint64_t v50 = v47 + 16;
        uint64_t v62 = v51;
        uint64_t v69 = v50;
        do
        {
          ((void (*)(char *, char *, uint64_t))v62)(v10, v13, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v49, v13, AssociatedTypeWitness);
          uint64_t v52 = (void (*)(CGAffineTransform *, void))dispatch thunk of Collection.subscript.read();
          CGFloat v54 = *v53;
          CGFloat v55 = v53[1];
          v52(&v76, 0);
          (*(void (**)(char *, uint64_t))(v50 - 8))(v49, AssociatedTypeWitness);
          v76.CGFloat a = a;
          v76.CGFloat b = b;
          v76.CGFloat c = c;
          v76.CGFloat d = d;
          v76.CGFloat tx = tx;
          v76.CGFloat ty = ty;
          v79.x = v54;
          v79.y = v55;
          CGPoint v56 = CGPointApplyAffineTransform(v79, &v76);
          v76.CGFloat a = v56.x;
          v76.CGFloat b = v56.y;
          dispatch thunk of MutableCollection.subscript.setter();
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v63(v13, 1, AssociatedTypeWitness) != 1);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v66, v65);
      break;
    case 2:
      CGAffineTransform v76 = v71;
      long long v77 = v72;
      uint64_t v78 = v73;
      uint64_t result = MutableCollection<>._apply(_:inverse:)((uint64_t)&v76, v74, a2, v68);
      break;
    case 3:
      uint64_t result = outlined destroy of ViewTransform.Item((uint64_t)&v71);
      break;
    case 4:
      uint64_t result = outlined destroy of CoordinateSpace.Name((uint64_t)&v71);
      break;
    case 5:
      return result;
    default:
      long long v29 = *(_OWORD *)&v71.a;
      int8x16_t v30 = v7;
      uint64_t v31 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v21, v60, a2);
      dispatch thunk of Collection.indices.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v21, a2);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      dispatch thunk of IteratorProtocol.next()();
      uint64_t v32 = v69;
      unint64_t v66 = (char *)a2;
      uint64_t v33 = v69 + 48;
      int8x16_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48);
      if (v34(v16, 1, AssociatedTypeWitness) != 1)
      {
        uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 32);
        uint64_t v62 = v32 + 16;
        uint64_t v69 = v32 + 32;
        int v61 = (void (**)(char *, uint64_t))(v32 + 8);
        uint64_t v65 = v33;
        uint64_t AssociatedConformanceWitness = v34;
        do
        {
          v63(v10, (uint64_t)v16, AssociatedTypeWitness);
          char v35 = (void (*)(CGAffineTransform *, void))dispatch thunk of MutableCollection.subscript.modify();
          *char v36 = *(double *)&v29 + *v36;
          v35(&v76, 0);
          (*(void (**)(char *, char *, uint64_t))v62)(v30, v10, AssociatedTypeWitness);
          int v37 = (void (*)(CGAffineTransform *, void))dispatch thunk of MutableCollection.subscript.modify();
          *(double *)(v38 + 8) = *((double *)&v29 + 1) + *(double *)(v38 + 8);
          v37(&v76, 0);
          char v39 = *v61;
          (*v61)(v30, AssociatedTypeWitness);
          v39(v10, AssociatedTypeWitness);
          dispatch thunk of IteratorProtocol.next()();
        }
        while (AssociatedConformanceWitness(v16, 1, AssociatedTypeWitness) != 1);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v27, v22);
      break;
  }
  return result;
}

uint64_t ViewTransform.description.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(double *)(v0 + 24) != 0.0 || *(double *)(v0 + 32) != 0.0)
  {
    type metadata accessor for CGSize(0);
    uint64_t v3 = (uint64_t *)String.init<A>(describing:)();
    uint64_t v5 = v4;
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    int64_t v8 = v7 + 1;
    if (v7 >= v6 >> 1) {
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
LABEL_6:
  swift_retain();
  if (v1)
  {
    do
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*v1 + 120);
      uint64_t v16 = swift_retain();
      uint64_t v17 = v15(v16);
      if (v18)
      {
        uint64_t v19 = v17;
        uint64_t v20 = v18;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
        }
        unint64_t v22 = v2[2];
        unint64_t v21 = v2[3];
        if (v22 >= v21 >> 1) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v2);
        }
        v2[2] = v22 + 1;
        int8x16_t v13 = &v2[2 * v22];
        v13[4] = v19;
        void v13[5] = v20;
        swift_bridgeObjectRelease();
      }
      swift_release();
      uint64_t v14 = (void *)v1[2];
      swift_retain();
      swift_release();
      uint64_t v1 = v14;
    }
    while (v14);
  }
  uint64_t v10 = v2[2];
  if (v10)
  {
    unint64_t v7 = v10 - 1;
    if (v10 != 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      }
      uint64_t v3 = &v2[2 * v10 + 3];
      uint64_t v5 = v2 + 5;
      int64_t v8 = 1;
      do
      {
        unint64_t v6 = v8 - 1;
        if (v8 - 1 != v7)
        {
          unint64_t v24 = v2[2];
          if (v6 >= v24)
          {
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v8, 1, v2);
LABEL_5:
            v2[2] = v8;
            uint64_t v9 = &v2[2 * v7];
            v9[4] = v3;
            void v9[5] = v5;
            goto LABEL_6;
          }
          if (v7 >= v24) {
            goto LABEL_28;
          }
          uint64_t v1 = (void *)*(v5 - 1);
          uint64_t v25 = *v5;
          uint64_t v26 = *v3;
          *(v5 - 1) = *(v3 - 1);
          *uint64_t v5 = v26;
          unint64_t v27 = v2[2];
          swift_bridgeObjectRetain();
          if (v7 >= v27) {
            goto LABEL_29;
          }
          *(v3 - 1) = (uint64_t)v1;
          *uint64_t v3 = v25;
          swift_bridgeObjectRelease();
        }
        --v7;
        v3 -= 2;
        v5 += 2;
      }
      while (v8++ < (uint64_t)v7);
    }
  }
  type metadata accessor for [String]();
  lazy protocol witness table accessor for type [String] and conformance [A]();
  swift_bridgeObjectRetain();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease_n();
  return v11;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AffineTransformElement(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(a2 + 48);
  return static CGAffineTransform.== infix(_:_:)() & ~(v2 ^ v3) & 1;
}

uint64_t protocol witness for ViewTransformElement.forEach(inverted:stop:_:) in conformance ProjectionTransformElement(char a1, uint64_t a2, void (*a3)(_OWORD *))
{
  uint64_t v4 = *(void *)(v3 + 64);
  char v5 = *(unsigned char *)(v3 + 72) ^ a1;
  long long v6 = *(_OWORD *)(v3 + 16);
  v9[0] = *(_OWORD *)v3;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(v3 + 48);
  void v9[2] = *(_OWORD *)(v3 + 32);
  _OWORD v9[3] = v7;
  uint64_t v10 = v4;
  char v11 = v5 & 1;
  char v12 = 2;
  a3(v9);
  return outlined destroy of ViewTransform.Item((uint64_t)v9);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProjectionTransformElement(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a2[3];
  void v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return specialized static ProjectionTransformElement.== infix(_:_:)((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t AnyElement.__deallocating_deinit()
{
  AnyElement.deinit();

  return swift_deallocClassInstance();
}

uint64_t Element.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  double v3 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, char *, uint64_t, double))(v5 + 16))((char *)v17 - v6, (char *)v1 + *(void *)(v4 + 152), v2, v3);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  double v10 = v1[4];
  double v11 = v1[5];
  if (v10 != 0.0 || v11 != 0.0)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    v12._countAndFlagsBits = 40;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    *(double *)uint64_t v17 = v10;
    *(double *)&v17[1] = v11;
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    v13._countAndFlagsBits = 8236;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = v7;
    v14._object = v9;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 41;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    return v18;
  }
  return v7;
}

Swift::Void __swiftcall ViewTransform.UnsafeBuffer.destroy()()
{
}

uint64_t BufferedElement.description.getter()
{
  swift_beginAccess();
  ViewTransform.UnsafeBuffer.description.getter();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if (*(double *)(v0 + 32) != 0.0 || *(double *)(v0 + 40) != 0.0)
  {
    v5._countAndFlagsBits = 40;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    v6._countAndFlagsBits = 8236;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = v2;
    v7._object = v4;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 41;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    return 0;
  }
  return v2;
}

void ViewTransform.UnsafeBuffer.description.getter()
{
  int v1 = *((_DWORD *)v0 + 3);
  if (!v1)
  {
    Swift::String v5 = (void *)MEMORY[0x263F8EE78];
LABEL_14:
    v19[0] = v5;
    type metadata accessor for [String]();
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    v19[0] = 91;
    v19[1] = 0xE100000000000000;
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = 93;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v2 = *v0;
  if (*v0)
  {
    int v3 = 0;
    int v4 = v1 - 1;
    Swift::String v5 = (void *)MEMORY[0x263F8EE78];
    do
    {
      Swift::String v6 = (uint64_t *)(v2 + v3);
      if (v4) {
        v3 += *((_DWORD *)v6 + 2);
      }
      else {
        int v3 = 0;
      }
      uint64_t v7 = *v6;
      v19[0] = v6;
      uint64_t v8 = (*(uint64_t (**)(void *))(v7 + 120))(v19);
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      }
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1) {
        Swift::String v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v5);
      }
      void v5[2] = v12 + 1;
      Swift::String v13 = &v5[2 * v12];
      v13[4] = v8;
      void v13[5] = v10;
      LODWORD(v13) = v4-- | v3;
    }
    while (v13);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t static ViewTransform.UnsafeBuffer._VTable.description(elt:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  Swift::String v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *v6;
  uint64_t v7 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint(a1, a2, a3, a4, 2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t protocol witness for ViewTransformable.convert(from:transform:) in conformance CGPoint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint(a1, a2, a3, a4, 3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t protocol witness for ViewTransformable.convert(to:transform:) in conformance CGPoint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void, double *, unsigned char *, char *, uint64_t))
{
  uint64_t v12 = *a2;
  long long v9 = *(_OWORD *)(a2 + 3);
  long long v13 = *(_OWORD *)(a2 + 1);
  long long v14 = v9;
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v11);
  v11[89] = a5;
  specialized ViewTransform.convert(_:_:)((uint64_t)v11, (double *)&v12, v6, a6);
  return outlined destroy of ViewTransform.Conversion((uint64_t)v11);
}

uint64_t specialized MutableCollection<>._apply(_:inverse:)(uint64_t result, char a2)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v4)
  {
    uint64_t v6 = result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_20:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      uint64_t v3 = (void *)result;
    }
    unint64_t v7 = 0;
    uint64_t v8 = (double *)(v3 + 4);
    do
    {
      unint64_t v10 = v3[2];
      if (a2)
      {
        if (v7 >= v10)
        {
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
        double v12 = *v8;
        double v11 = v8[1];
        double v13 = *(double *)(v6 + 16);
        double v14 = *(double *)(v6 + 24);
        double v15 = *(double *)(v6 + 8);
        double v16 = v11 * v13 - v15;
        double v18 = *(double *)(v6 + 32);
        double v17 = *(double *)(v6 + 40);
        double v19 = *(double *)v6 * v18 + v14 * v16 - v11 * (*(double *)v6 * v17) + *v8 * (v15 * v17 - v13 * v18);
        if (v19 != 0.0)
        {
          double v21 = *(double *)(v6 + 56);
          double v20 = *(double *)(v6 + 64);
          double v22 = *(double *)(v6 + 48);
          double v23 = (v11 * v17 - v18) * v22 + v14 * v21 + v12 * (v18 * v20 - v17 * v21) - v11 * (v14 * v20);
          double v24 = v16 * v22 + *(double *)v6 * v21 + v12 * (v15 * v20 - v13 * v21) - v11 * (*(double *)v6 * v20);
          double v12 = v23 / v19;
          double v11 = -v24 / v19;
        }
        *uint64_t v8 = v12;
        v8[1] = v11;
      }
      else
      {
        if (v7 >= v10) {
          goto LABEL_19;
        }
        double v25 = v8[1];
        double v26 = *(double *)(v6 + 64) + *v8 * *(double *)(v6 + 16) + v25 * *(double *)(v6 + 40);
        double v9 = 1.0;
        if (v26 != 1.0)
        {
          if (v26 <= 0.0) {
            double v9 = INFINITY;
          }
          else {
            double v9 = 1.0 / v26;
          }
        }
        *(float64x2_t *)uint64_t v8 = vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v6 + 48), vaddq_f64(vmulq_n_f64(*(float64x2_t *)v6, *v8), vmulq_n_f64(*(float64x2_t *)(v6 + 24), v25))), v9);
      }
      ++v7;
      v8 += 2;
    }
    while (v4 != v7);
    *(void *)uint64_t v2 = v3;
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t i;
  double v5;
  double v6;
  float64x2_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float64x2_t v18;

  uint64_t v3 = v2[1];
  if (v3)
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else
    {
      for (int i = 0; i != v3; ++i)
      {
        unint64_t v7 = *(float64x2_t *)(*v2 + 16 * i);
        if (a2)
        {
          uint64_t v8 = *(double *)(result + 16);
          double v9 = *(double *)(result + 24);
          unint64_t v10 = *(double *)(result + 8);
          double v11 = vmuld_lane_f64(v8, v7, 1) - v10;
          double v13 = *(double *)(result + 32);
          double v12 = *(double *)(result + 40);
          double v14 = *(double *)result * v13
              + v9 * v11
              - vmuld_lane_f64(*(double *)result * v12, v7, 1)
              + (v10 * v12 - v8 * v13) * v7.f64[0];
          if (v14 != 0.0)
          {
            double v16 = *(double *)(result + 56);
            double v15 = *(double *)(result + 64);
            double v17 = *(double *)(result + 48);
            v18.f64[0] = (v7.f64[1] * v12 - v13) * v17
                       + v9 * v16
                       + v7.f64[0] * (v13 * v15 - v12 * v16)
                       - v7.f64[1] * (v9 * v15);
            v18.f64[1] = -(v11 * v17
                         + *(double *)result * v16
                         + v7.f64[0] * (v10 * v15 - v8 * v16)
                         - v7.f64[1] * (*(double *)result * v15));
            unint64_t v7 = vdivq_f64(v18, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
          }
        }
        else
        {
          Swift::String v5 = *(double *)(result + 64)
             + *(double *)(result + 16) * v7.f64[0]
             + vmuld_lane_f64(*(double *)(result + 40), v7, 1);
          uint64_t v6 = 1.0;
          if (v5 != 1.0)
          {
            if (v5 <= 0.0) {
              uint64_t v6 = INFINITY;
            }
            else {
              uint64_t v6 = 1.0 / v5;
            }
          }
          unint64_t v7 = vmulq_n_f64(vaddq_f64(*(float64x2_t *)(result + 48), vaddq_f64(vmulq_n_f64(*(float64x2_t *)result, v7.f64[0]), vmulq_laneq_f64(*(float64x2_t *)(result + 24), v7, 1))), v6);
        }
        *(float64x2_t *)(*v2 + 16 * i) = v7;
      }
    }
  }
  return result;
}

uint64_t MutableCollection<>._apply(_:inverse:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v70 = a2;
  uint64_t v66 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v74 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v61 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v65 = (char *)&v58 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v58 - v12;
  MEMORY[0x270FA5388](v13);
  double v15 = (char *)&v58 - v14;
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v16 - 8);
  double v18 = (char *)&v58 - v17;
  uint64_t v71 = v6;
  uint64_t v69 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v69);
  uint64_t v73 = (char *)&v58 - v19;
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v21);
  double v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v72 = *(char **)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(v24 - 8);
  double v25 = MEMORY[0x270FA5388](v24);
  unint64_t v27 = (char *)&v58 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v75, a3, v25);
  dispatch thunk of Collection.indices.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, a3);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v72 = v27;
  uint64_t v73 = (char *)v24;
  uint64_t v69 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v29 = v74;
  uint64_t v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
  uint64_t v68 = v74 + 48;
  if (v67(v18, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v31 = v29 + 32;
    unint64_t v64 = v32;
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v31 - 16);
    uint64_t v74 = v31;
    int8x16_t v34 = (void (**)(char *, uint64_t))(v31 - 24);
    v32(v15, v18, AssociatedTypeWitness);
    while (1)
    {
      int v48 = *v33;
      if (v70)
      {
        v48(v65, v15, AssociatedTypeWitness);
        char v35 = v61;
        v48(v61, v15, AssociatedTypeWitness);
        char v36 = (void (*)(float64x2_t *, void))dispatch thunk of Collection.subscript.read();
        double v39 = *v37;
        double v38 = v37[1];
        v36(&v76, 0);
        uint64_t v40 = *v34;
        (*v34)(v35, AssociatedTypeWitness);
        double v41 = *(double *)(a1 + 16);
        double v42 = *(double *)(a1 + 24);
        double v43 = *(double *)(a1 + 8);
        double v44 = v38 * v41 - v43;
        double v46 = *(double *)(a1 + 32);
        double v45 = *(double *)(a1 + 40);
        double v47 = *(double *)a1 * v46 + v42 * v44 - v38 * (*(double *)a1 * v45) + v39 * (v43 * v45 - v41 * v46);
        if (v47 != 0.0)
        {
          double v55 = *(double *)(a1 + 56);
          double v54 = *(double *)(a1 + 64);
          double v56 = *(double *)(a1 + 48);
          double v57 = *(double *)a1 * v55 + v39 * (v43 * v54 - v41 * v55) - v38 * (*(double *)a1 * v54);
          double v39 = ((v38 * v45 - v46) * v56 + v42 * v55 + v39 * (v46 * v54 - v45 * v55) - v38 * (v42 * v54)) / v47;
          double v38 = -(v44 * v56 + v57) / v47;
        }
        v76.f64[0] = v39;
        v76.f64[1] = v38;
        dispatch thunk of MutableCollection.subscript.setter();
        v40(v15, AssociatedTypeWitness);
      }
      else
      {
        v48(v60, v15, AssociatedTypeWitness);
        char v49 = (void (*)(float64x2_t *, void))dispatch thunk of Collection.subscript.read();
        *(void *)&long long v51 = *v50;
        long long v63 = v51;
        *(void *)&long long v51 = v50[1];
        long long v62 = v51;
        v49(&v76, 0);
        double v52 = *(double *)(a1 + 64) + *(double *)&v63 * *(double *)(a1 + 16) + *(double *)&v62 * *(double *)(a1 + 40);
        double v53 = 1.0;
        if (v52 != 1.0)
        {
          if (v52 <= 0.0) {
            double v53 = INFINITY;
          }
          else {
            double v53 = 1.0 / v52;
          }
        }
        float64x2_t v76 = vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 48), vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, *(double *)&v63), vmulq_n_f64(*(float64x2_t *)(a1 + 24), *(double *)&v62))), v53);
        dispatch thunk of MutableCollection.subscript.setter();
        (*v34)(v15, AssociatedTypeWitness);
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v67(v18, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v64(v15, v18, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, char *))(v59 + 8))(v72, v73);
}

uint64_t protocol witness for ViewTransformable.convert(to:transform:) in conformance <A> [A](uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance <A> [A](a1, a2, a3, a4, 2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t protocol witness for ViewTransformable.convert(from:transform:) in conformance <A> [A](uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance <A> [A](a1, a2, a3, a4, 3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t protocol witness for ViewTransformable.convert(to:transform:) in conformance <A> [A](uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void, double *, unsigned char *, char *, uint64_t))
{
  uint64_t v12 = *a2;
  long long v9 = *(_OWORD *)(a2 + 3);
  long long v13 = *(_OWORD *)(a2 + 1);
  long long v14 = v9;
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v11);
  v11[89] = a5;
  specialized ViewTransform.convert(_:_:)((uint64_t)v11, (double *)&v12, v6, a6);
  return outlined destroy of ViewTransform.Conversion((uint64_t)v11);
}

uint64_t closure #1 in Path.convert(to:transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in Path.convert(to:transform:)(a1, a2, a3, 2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

double Path.convert(from:transform:)(uint64_t a1, long long *a2)
{
  return Path.convert(to:transform:)(a1, a2, (void (*)(void **))partial apply for closure #1 in Path.convert(from:transform:));
}

double Path.convert(to:transform:)(uint64_t a1, long long *a2, void (*a3)(void **))
{
  long long v4 = a2[1];
  long long v12 = *a2;
  long long v13 = v4;
  uint64_t v14 = *((void *)a2 + 4);
  long long v5 = *(_OWORD *)(v3 + 16);
  v10[0] = *(_OWORD *)v3;
  v10[1] = v5;
  char v11 = *(unsigned char *)(v3 + 32);
  Path.mapPoints(_:)(a3, (uint64_t)v8);
  outlined release of Path((uint64_t)v10);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)uint64_t v3 = v8[0];
  *(_OWORD *)(v3 + 16) = v7;
  *(unsigned char *)(v3 + 32) = v9;
  return result;
}

uint64_t closure #1 in Path.convert(to:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void, double *, unsigned char *, char *, uint64_t))
{
  long long v8 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v8;
  uint64_t v12 = *(void *)(a3 + 32);
  outlined init with copy of CoordinateSpace(a2, (uint64_t)v10);
  v10[89] = a4;
  specialized ViewTransform.convert(_:_:)((uint64_t)v10, (double *)v11, a1, a5);
  return outlined destroy of ViewTransform.Conversion((uint64_t)v10);
}

double protocol witness for ViewTransformable.convert(to:transform:) in conformance Path(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance Path(a1, a2, a3, a4, (void (*)(void **))closure #1 in Path.convert(to:transform:)partial apply);
}

double protocol witness for ViewTransformable.convert(from:transform:) in conformance Path(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ViewTransformable.convert(to:transform:) in conformance Path(a1, a2, a3, a4, (void (*)(void **))closure #1 in Path.convert(from:transform:)partial apply);
}

double protocol witness for ViewTransformable.convert(to:transform:) in conformance Path(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, void (*a5)(void **))
{
  long long v6 = a2[1];
  long long v14 = *a2;
  long long v15 = v6;
  uint64_t v16 = *((void *)a2 + 4);
  long long v7 = *(_OWORD *)(v5 + 16);
  v12[0] = *(_OWORD *)v5;
  v12[1] = v7;
  char v13 = *(unsigned char *)(v5 + 32);
  Path.mapPoints(_:)(a5, (uint64_t)v10);
  outlined release of Path((uint64_t)v12);
  double result = *(double *)v10;
  long long v9 = v10[1];
  *(_OWORD *)uint64_t v5 = v10[0];
  *(_OWORD *)(v5 + 16) = v9;
  *(unsigned char *)(v5 + 32) = v11;
  return result;
}

uint64_t specialized static ViewTransform.Item.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v38);
  outlined init with copy of ViewTransform.Item(a2, (uint64_t)&v39);
  switch(v38[113])
  {
    case 1:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      float64x2_t v16 = v30;
      float64x2_t v17 = v31;
      float64x2_t v18 = v32;
      if (v47 != 1) {
        goto LABEL_24;
      }
      char v10 = LOBYTE(v33.f64[0]);
      float64x2_t v23 = v39;
      float64x2_t v24 = v40;
      float64x2_t v25 = v41;
      char v11 = LOBYTE(v42.f64[0]);
      if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
        goto LABEL_27;
      }
      char v5 = v10 ^ v11;
      goto LABEL_21;
    case 2:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      if (v47 != 2) {
        goto LABEL_24;
      }
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v30, v39), (int32x4_t)vceqq_f64(v31, v40)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v32, v41), (int32x4_t)vceqq_f64(v33, v42)))), 7uLL))) & 1) == 0|| *(double *)&v34 != *(double *)&v43)
      {
        goto LABEL_27;
      }
      char v5 = BYTE8(v34) ^ BYTE8(v43);
LABEL_21:
      outlined destroy of ViewTransform.Item((uint64_t)v38);
      char v6 = v5 ^ 1;
      return v6 & 1;
    case 3:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      if (v47 != 3) {
        goto LABEL_17;
      }
      outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content((long long *)&v39, &v23);
      char v6 = specialized static CoordinateSpace.Name.== infix(_:_:)((uint64_t)&v30, (uint64_t)&v23);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v23);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v30);
      goto LABEL_16;
    case 4:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      if (v47 != 4)
      {
LABEL_17:
        outlined destroy of CoordinateSpace.Name((uint64_t)&v30);
LABEL_24:
        outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)v38, &lazy cache variable for type metadata for (ViewTransform.Item, ViewTransform.Item));
        goto LABEL_25;
      }
      float64x2_t v7 = v33;
      float64x2_t v8 = v42;
      outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content((long long *)&v39, &v23);
      char v9 = specialized static CoordinateSpace.Name.== infix(_:_:)((uint64_t)&v30, (uint64_t)&v23);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v23);
      outlined destroy of CoordinateSpace.Name((uint64_t)&v30);
      if ((v9 & 1) == 0)
      {
LABEL_27:
        outlined destroy of ViewTransform.Item((uint64_t)v38);
LABEL_25:
        char v6 = 0;
        return v6 & 1;
      }
      BOOL v3 = v7.f64[0] == v8.f64[0];
      BOOL v4 = v7.f64[1] == v8.f64[1];
LABEL_13:
      char v6 = v4 && v3;
LABEL_16:
      outlined destroy of ViewTransform.Item((uint64_t)v38);
      return v6 & 1;
    case 5:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      if (v47 != 5) {
        goto LABEL_24;
      }
      char v12 = v37;
      char v13 = v46;
      float64x2_t v23 = v30;
      float64x2_t v24 = v31;
      float64x2_t v25 = v32;
      float64x2_t v26 = v33;
      long long v27 = v34;
      long long v28 = v35;
      long long v29 = v36;
      float64x2_t v16 = v39;
      float64x2_t v17 = v40;
      float64x2_t v18 = v41;
      float64x2_t v19 = v42;
      long long v20 = v43;
      long long v21 = v44;
      long long v22 = v45;
      BOOL v14 = specialized static ScrollGeometry.== infix(_:_:)((uint64_t)&v23, (uint64_t)&v16);
      outlined destroy of ViewTransform.Item((uint64_t)v38);
      char v6 = v14 & (v12 ^ v13 ^ 1);
      return v6 & 1;
    default:
      outlined init with copy of ViewTransform.Item((uint64_t)v38, (uint64_t)&v30);
      if (v47) {
        goto LABEL_24;
      }
      BOOL v3 = v30.f64[0] == v39.f64[0];
      BOOL v4 = v30.f64[1] == v39.f64[1];
      goto LABEL_13;
  }
}

uint64_t specialized static ProjectionTransformElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a2 + 40)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a2 + 56))))), 7uLL))) & 1) != 0)
  {
    return (((*(unsigned char *)(a1 + 72) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 72)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t partial apply for closure #1 in ViewTransform.convert<A>(_:points:)(uint64_t a1)
{
  return MutableCollection<>._applyTransform(item:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _s7SwiftUI4PathVAAE7convert2to9transformyAA15CoordinateSpaceO_AA13ViewTransformVtFySaySo7CGPointVGzXEfU_TA_0(uint64_t a1)
{
  return closure #1 in Path.convert(to:transform:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t specialized ViewTransform.forEach(inverted:_:)(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v30 = a3;
  float64x2_t v31 = a4;
  float64x2_t v32 = a5;
  uint64_t v33 = a6;
  char v6 = *(void **)a2;
  if (*(void *)a2)
  {
    double v11 = *(double *)(a2 + 24);
    double v10 = *(double *)(a2 + 32);
    char v28 = 0;
    if (result)
    {
      if (v11 == 0.0 && v10 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v20 = v6[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v6 + 104))(1, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
        while ((v28 & 1) == 0 && v20)
        {
          uint64_t v21 = v20;
          uint64_t v20 = *(void *)(v20 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v21 + 104))(1, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
        }
        return swift_release();
      }
      double v34 = -v11;
      double v35 = -v10;
      char v36 = 0;
      swift_retain();
      closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v28, a3, a4, a5);
      outlined destroy of ViewTransform.Item((uint64_t)&v34);
      if ((v28 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    uint64_t v12 = v6[3];
    if (v12 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v12 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v12 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v14.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        float64x2_t v16 = &v27[-v15];
        *(void *)&v27[-v15] = v6;
        uint64_t v17 = v6[2];
        if (v17)
        {
          float64x2_t v18 = v16 + 8;
          do
          {
            *v18++ = v17;
            uint64_t v17 = *(void *)(v17 + 16);
          }
          while (v17);
        }
        if (v12)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v16[8 * v12 - 8]
                                                                                            + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29, v14);
          if ((v28 & 1) != 0 || v12 == 1)
          {
            if (v28) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v16[8 * v12 - 16]
                                                                                      + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
            if (v28) {
              return swift_release();
            }
            float64x2_t v19 = v16 - 24;
            while (v12 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v19[8 * v12--]
                                                                                        + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
              if (v28) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      long long v22 = (void *)swift_slowAlloc();
      float64x2_t v23 = v22;
      *long long v22 = v6;
      uint64_t v24 = v6[2];
      if (v24)
      {
        float64x2_t v25 = v22 + 1;
        do
        {
          *v25++ = v24;
          uint64_t v24 = *(void *)(v24 + 16);
        }
        while (v24);
      }
      if (v12)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v12 - 1] + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
        char v26 = v28;
        if ((v28 & 1) != 0 || v12 == 1)
        {
          MEMORY[0x24C527CC0](v23, -1, -1);
          if (v26) {
            return swift_release();
          }
LABEL_42:
          if (v11 != 0.0 || v10 != 0.0)
          {
            double v34 = v11;
            double v35 = v10;
            char v36 = 0;
            closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v28, a3, a4, a5);
            outlined destroy of ViewTransform.Item((uint64_t)&v34);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v23[v12 - 2] + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
        if (v28)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v23, -1, -1);
          return swift_release();
        }
        while (v12 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v23[v12-- - 3] + 104))(0, &v28, closure #1 in ViewTransform.convert(_:_:)partial apply, v29);
          if (v28) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v23, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in Path.convert(from:transform:)(uint64_t a1)
{
  return closure #1 in Path.convert(to:transform:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), 3, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

uint64_t assignWithTake for ViewTransform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewTransform(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewTransform(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)double result = a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for ViewTransform.Conversion(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1;
  if ((long long *)a1 == a2) {
    return v2;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 89);
  if (v4 >= 5) {
    unsigned int v4 = *(_DWORD *)a1 + 5;
  }
  if (v4 == 4)
  {
    if (!*(unsigned char *)(a1 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    if (*(unsigned char *)(v2 + 88)) {
      goto LABEL_14;
    }
    a1 = v2 + 48;
  }
  else
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a1 + 2;
    }
    if (v5) {
      goto LABEL_14;
    }
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
LABEL_14:
  unsigned int v6 = *((unsigned __int8 *)a2 + 89);
  if (v6 >= 5) {
    unsigned int v6 = *(_DWORD *)a2 + 5;
  }
  switch(v6)
  {
    case 1u:
      unsigned int v10 = *((unsigned __int8 *)a2 + 40);
      if (v10 >= 2) {
        unsigned int v10 = *(_DWORD *)a2 + 2;
      }
      if (v10 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        char v9 = 1;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else
      {
        if (v10)
        {
          long long v26 = *a2;
          long long v27 = a2[1];
          *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)uint64_t v2 = v26;
          *(_OWORD *)(v2 + 16) = v27;
        }
        else
        {
          uint64_t v11 = *((void *)a2 + 3);
          *(void *)(v2 + 24) = v11;
          *(void *)(v2 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v11 - 8))(v2, a2);
          *(unsigned char *)(v2 + 40) = 0;
        }
        char v9 = 1;
      }
      break;
    case 2u:
      unsigned int v12 = *((unsigned __int8 *)a2 + 40);
      if (v12 >= 2) {
        unsigned int v12 = *(_DWORD *)a2 + 2;
      }
      if (v12 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
        char v9 = 2;
      }
      else
      {
        if (v12)
        {
          long long v28 = *a2;
          long long v29 = a2[1];
          *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)uint64_t v2 = v28;
          *(_OWORD *)(v2 + 16) = v29;
        }
        else
        {
          uint64_t v13 = *((void *)a2 + 3);
          *(void *)(v2 + 24) = v13;
          *(void *)(v2 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v13 - 8))(v2, a2);
          *(unsigned char *)(v2 + 40) = 0;
        }
        char v9 = 2;
      }
      break;
    case 3u:
      unsigned int v14 = *((unsigned __int8 *)a2 + 40);
      if (v14 >= 2) {
        unsigned int v14 = *(_DWORD *)a2 + 2;
      }
      if (v14 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else if (v14)
      {
        long long v30 = *a2;
        long long v31 = a2[1];
        *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)uint64_t v2 = v30;
        *(_OWORD *)(v2 + 16) = v31;
      }
      else
      {
        uint64_t v15 = *((void *)a2 + 3);
        *(void *)(v2 + 24) = v15;
        *(void *)(v2 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v15 - 8))(v2, a2);
        *(unsigned char *)(v2 + 40) = 0;
      }
      char v9 = 3;
      break;
    case 4u:
      if (*((unsigned char *)a2 + 40))
      {
        long long v16 = *a2;
        long long v17 = a2[1];
        *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)uint64_t v2 = v16;
        *(_OWORD *)(v2 + 16) = v17;
      }
      else
      {
        uint64_t v18 = *((void *)a2 + 3);
        *(void *)(v2 + 24) = v18;
        *(void *)(v2 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v18 - 8))(v2, a2);
        *(unsigned char *)(v2 + 40) = 0;
      }
      float64x2_t v19 = (_OWORD *)(v2 + 48);
      uint64_t v20 = a2 + 3;
      if (*((unsigned char *)a2 + 88))
      {
        long long v21 = *v20;
        long long v22 = a2[4];
        *(_OWORD *)(v2 + 73) = *(long long *)((char *)a2 + 73);
        *float64x2_t v19 = v21;
        *(_OWORD *)(v2 + 64) = v22;
      }
      else
      {
        uint64_t v23 = *((void *)a2 + 9);
        *(void *)(v2 + 72) = v23;
        *(void *)(v2 + 80) = *((void *)a2 + 10);
        (**(void (***)(_OWORD *, long long *))(v23 - 8))(v19, v20);
        *(unsigned char *)(v2 + 88) = 0;
      }
      char v9 = 4;
      break;
    default:
      unsigned int v7 = *((unsigned __int8 *)a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        char v9 = 0;
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else if (v7)
      {
        char v9 = 0;
        long long v24 = *a2;
        long long v25 = a2[1];
        *(_OWORD *)(v2 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)uint64_t v2 = v24;
        *(_OWORD *)(v2 + 16) = v25;
      }
      else
      {
        uint64_t v8 = *((void *)a2 + 3);
        *(void *)(v2 + 24) = v8;
        *(void *)(v2 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v8 - 8))(v2, a2);
        char v9 = 0;
        *(unsigned char *)(v2 + 40) = 0;
      }
      break;
  }
  *(unsigned char *)(v2 + 89) = v9;
  return v2;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ViewTransform.Conversion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 == a2) {
    return v2;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 89);
  if (v4 >= 5) {
    unsigned int v4 = *(_DWORD *)a1 + 5;
  }
  if (v4 == 4)
  {
    if (!*(unsigned char *)(a1 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    if (*(unsigned char *)(v2 + 88)) {
      goto LABEL_14;
    }
    a1 = v2 + 48;
  }
  else
  {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a1 + 2;
    }
    if (v5) {
      goto LABEL_14;
    }
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
LABEL_14:
  unsigned int v6 = *(unsigned __int8 *)(a2 + 89);
  if (v6 >= 5) {
    unsigned int v6 = *(_DWORD *)a2 + 5;
  }
  switch(v6)
  {
    case 1u:
      unsigned int v9 = *(unsigned __int8 *)(a2 + 40);
      if (v9 >= 2) {
        unsigned int v9 = *(_DWORD *)a2 + 2;
      }
      if (v9 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        LOBYTE(v7) = 1;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else
      {
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v10;
        if (v9)
        {
          *(_OWORD *)(v2 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(v2 + 40) = 0;
        }
        LOBYTE(v7) = 1;
      }
      break;
    case 2u:
      unsigned int v11 = *(unsigned __int8 *)(a2 + 40);
      if (v11 >= 2) {
        unsigned int v11 = *(_DWORD *)a2 + 2;
      }
      if (v11 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
        LOBYTE(v7) = 2;
      }
      else
      {
        long long v12 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v12;
        if (v11)
        {
          *(_OWORD *)(v2 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(v2 + 40) = 0;
        }
        LOBYTE(v7) = 2;
      }
      break;
    case 3u:
      unsigned int v13 = *(unsigned __int8 *)(a2 + 40);
      if (v13 >= 2) {
        unsigned int v13 = *(_DWORD *)a2 + 2;
      }
      if (v13 == 1)
      {
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else
      {
        long long v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v14;
        if (v13)
        {
          *(_OWORD *)(v2 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          *(void *)(v2 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(v2 + 40) = 0;
        }
      }
      LOBYTE(v7) = 3;
      break;
    case 4u:
      long long v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v2 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v2 + 48) = v15;
      *(_OWORD *)(v2 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v2 + 73) = *(_OWORD *)(a2 + 73);
      long long v16 = *(_OWORD *)(a2 + 16);
      LOBYTE(v7) = 4;
      *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
      *(_OWORD *)(v2 + 16) = v16;
      break;
    default:
      unsigned int v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        LOBYTE(v7) = 0;
        *(void *)uint64_t v2 = *(void *)a2;
        *(unsigned char *)(v2 + 40) = 1;
      }
      else if (v7)
      {
        LOBYTE(v7) = 0;
        long long v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v17;
        *(_OWORD *)(v2 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
        *(_OWORD *)(v2 + 16) = v8;
        *(void *)(v2 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(v2 + 40) = 0;
      }
      break;
  }
  *(unsigned char *)(v2 + 89) = v7;
  return v2;
}

uint64_t getEnumTagSinglePayload for ViewTransform.Conversion(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 90)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 89);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ViewTransform.Conversion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 74) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 90) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 89) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ViewTransform.Conversion(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 89);
  if (result >= 5) {
    return (*(_DWORD *)a1 + 5);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ViewTransform.Conversion(uint64_t result, unsigned int a2)
{
  if (a2 > 4)
  {
    *(_OWORD *)(result + 73) = 0u;
    unsigned int v2 = a2 - 5;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 5;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 89) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.Conversion()
{
  return &type metadata for ViewTransform.Conversion;
}

uint64_t assignWithCopy for ViewTransform.Item(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 113);
    if (v4 >= 6) {
      unsigned int v4 = *(_DWORD *)a1 + 6;
    }
    switch(v4)
    {
      case 3u:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 != 1) {
          goto LABEL_10;
        }
        break;
      case 4u:
        if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
LABEL_10:
        }
          __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    unsigned int v6 = *((unsigned __int8 *)a2 + 113);
    if (v6 >= 6) {
      unsigned int v6 = *(_DWORD *)a2 + 6;
    }
    switch(v6)
    {
      case 1u:
        long long v8 = *a2;
        long long v9 = a2[1];
        long long v10 = a2[2];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 32) = v10;
        *(_OWORD *)a1 = v8;
        char v7 = 1;
        break;
      case 2u:
        *(_OWORD *)a1 = *a2;
        long long v11 = a2[1];
        long long v12 = a2[2];
        long long v13 = a2[3];
        *(_OWORD *)(a1 + 57) = *(long long *)((char *)a2 + 57);
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)(a1 + 48) = v13;
        *(_OWORD *)(a1 + 16) = v11;
        char v7 = 2;
        break;
      case 3u:
        unsigned int v14 = *((unsigned __int8 *)a2 + 40);
        if (v14 >= 2) {
          unsigned int v14 = *(_DWORD *)a2 + 2;
        }
        if (v14 == 1)
        {
          *(void *)a1 = *(void *)a2;
          char v15 = 1;
        }
        else
        {
          uint64_t v24 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v24;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v24 - 8))(a1, a2);
          char v15 = 0;
        }
        *(unsigned char *)(a1 + 40) = v15;
        char v7 = 3;
        break;
      case 4u:
        if (*((unsigned char *)a2 + 40))
        {
          long long v16 = *a2;
          long long v17 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
        }
        else
        {
          uint64_t v25 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v25;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v25 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        *(_OWORD *)(a1 + 48) = a2[3];
        char v7 = 4;
        break;
      case 5u:
        long long v18 = *a2;
        long long v19 = a2[1];
        long long v20 = a2[3];
        *(_OWORD *)(a1 + 32) = a2[2];
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)a1 = v18;
        *(_OWORD *)(a1 + 16) = v19;
        long long v21 = a2[4];
        long long v22 = a2[5];
        long long v23 = a2[6];
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        *(_OWORD *)(a1 + 80) = v22;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v21;
        char v7 = 5;
        break;
      default:
        char v7 = 0;
        *(_OWORD *)a1 = *a2;
        break;
    }
    *(unsigned char *)(a1 + 113) = v7;
  }
  return a1;
}

__n128 __swift_memcpy114_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ViewTransform.Item(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 113);
    if (v4 >= 6) {
      unsigned int v4 = *(_DWORD *)a1 + 6;
    }
    switch(v4)
    {
      case 3u:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 != 1) {
          goto LABEL_10;
        }
        break;
      case 4u:
        if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
LABEL_10:
        }
          __swift_destroy_boxed_opaque_existential_1(a1);
        break;
      default:
        break;
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 113);
    if (v6 >= 6) {
      unsigned int v6 = *(_DWORD *)a2 + 6;
    }
    switch(v6)
    {
      case 1u:
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
        char v7 = 1;
        break;
      case 2u:
        long long v9 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v9;
        *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        char v7 = 2;
        break;
      case 3u:
        unsigned int v11 = *(unsigned __int8 *)(a2 + 40);
        if (v11 >= 2) {
          unsigned int v11 = *(_DWORD *)a2 + 2;
        }
        if (v11 == 1)
        {
          *(void *)a1 = *(void *)a2;
          char v12 = 1;
        }
        else
        {
          char v12 = 0;
          long long v18 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v18;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
        }
        *(unsigned char *)(a1 + 40) = v12;
        char v7 = 3;
        break;
      case 4u:
        long long v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        long long v14 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v14;
        char v7 = 4;
        break;
      case 5u:
        long long v15 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v15;
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
        long long v16 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v16;
        long long v17 = *(_OWORD *)(a2 + 48);
        char v7 = 5;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v17;
        break;
      default:
        char v7 = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        break;
    }
    *(unsigned char *)(a1 + 113) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewTransform.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 114)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 113);
  if (v3 >= 6) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ViewTransform.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_WORD *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 114) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 114) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 113) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ViewTransform.Item(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 113);
  if (result >= 6) {
    return (*(_DWORD *)a1 + 6);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ViewTransform.Item(uint64_t result, unsigned int a2)
{
  if (a2 > 5)
  {
    unsigned int v2 = a2 - 6;
    *(unsigned char *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 6;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 113) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.Item()
{
  return &type metadata for ViewTransform.Item;
}

uint64_t getEnumTagSinglePayload for ViewTransform.ScrollGeometryItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewTransform.ScrollGeometryItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.ScrollGeometryItem()
{
  return &type metadata for ViewTransform.ScrollGeometryItem;
}

ValueMetadata *type metadata accessor for ViewTransform.UnsafeBuffer()
{
  return &type metadata for ViewTransform.UnsafeBuffer;
}

uint64_t dispatch thunk of ViewTransformable.convert(to:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ViewTransformable.convert(from:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void *type metadata accessor for TranslationElement()
{
  return &unk_26FA5CC08;
}

ValueMetadata *type metadata accessor for SizedSpaceIDElement()
{
  return &type metadata for SizedSpaceIDElement;
}

uint64_t *assignWithCopy for SizedSpaceElement(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

void *type metadata accessor for SizedSpaceElement()
{
  return &unk_26FA58110;
}

void *type metadata accessor for CoordinateSpaceIDElement()
{
  return &unk_26FA6ACC0;
}

uint64_t getEnumTagSinglePayload for AffineTransformElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AffineTransformElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AffineTransformElement()
{
  return &type metadata for AffineTransformElement;
}

ValueMetadata *type metadata accessor for CoordinateSpaceElement()
{
  return &type metadata for CoordinateSpaceElement;
}

uint64_t getEnumTagSinglePayload for ProjectionTransformElement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ProjectionTransformElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProjectionTransformElement()
{
  return &type metadata for ProjectionTransformElement;
}

unint64_t instantiation function for generic protocol witness table for CoordinateSpaceElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ProjectionTransformElement(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in ViewTransform.spaceBeforeSpace(_:_:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in ViewTransform.spaceBeforeSpace(_:_:)(a1, a2, *(unsigned char **)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), *(void *)(v2 + 40));
}

void closure #1 in ViewTransform.convert<A>(_:points:)specialized partial apply(uint64_t a1)
{
}

uint64_t FloatingPoint.approximates(_:epsilon:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)&v13 - v8;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  abs<A>(_:)();
  long long v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  char v11 = dispatch thunk of static Comparable.< infix(_:_:)();
  v10(v9, a3);
  return v11 & 1;
}

double EdgeInsets.rounded(_:toMultipleOf:)(uint64_t a1, double a2, double a3)
{
  return a3;
}

double CGRect.roundedCoordinatesToNearestOrUp(toMultipleOf:)(double a1, double a2)
{
  return a2;
}

uint64_t FloatingPoint.rounded(_:toMultipleOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a4, v4);
  return FloatingPoint.round(_:toMultipleOf:)(a1, a2, a3);
}

uint64_t FloatingPoint.round(toMultipleOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v5 + 104))(v8, *MEMORY[0x263F8E210], v4, v6);
  FloatingPoint.round(_:toMultipleOf:)((uint64_t)v8, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t CGPoint.roundToNearestOrUp(toMultipleOf:)(double a1)
{
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v1 = a1 * 0.5 + *v1;
  uint64_t v7 = *MEMORY[0x263F8E220];
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v8(v6, v7, v3);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  long long v9 = *(void (**)(char *, uint64_t))(v4 + 8);
  v9(v6, v3);
  v1[1] = a1 * 0.5 + v1[1];
  v8(v6, v7, v3);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  return ((uint64_t (*)(char *, uint64_t))v9)(v6, v3);
}

uint64_t FloatingPoint.roundToNearestOrUp(toMultipleOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  v20[1] = a3;
  uint64_t v22 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[2] = *(void *)(*(void *)(a3 + 16) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  char v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v15 = (char *)v20 - v14;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v16 = v21;
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  long long v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, a2);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v17(v15, a2);
  uint64_t v18 = v22;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8E220], v22);
  FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, v16, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v18);
}

uint64_t FloatingPoint.roundedToNearestOrUp(toMultipleOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  return FloatingPoint.roundToNearestOrUp(toMultipleOf:)(a1, a2, a3);
}

uint64_t CGSize.round(_:toMultipleOf:)(uint64_t a1, double a2)
{
  return specialized FloatingPoint.round(_:toMultipleOf:)(a1, a2);
}

double CGSize.rounded(_:toMultipleOf:)(uint64_t a1, double a2, double a3)
{
  return a3;
}

double CGPoint.roundedToNearestOrUp(toMultipleOf:)(double a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = a3;
  double v15 = a1 * 0.5 + a2;
  uint64_t v10 = *MEMORY[0x263F8E220];
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v11(v9, v10, v6);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, a1);
  char v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  v12(v9, v6);
  double v14 = a1 * 0.5 + v14;
  v11(v9, v10, v6);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, a1);
  v12(v9, v6);
  return v15;
}

uint64_t CGPoint.round(toMultipleOf:)(double a1)
{
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v3 + 104))(v6, *MEMORY[0x263F8E210], v2, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

double CGPoint.rounded(toMultipleOf:)(double a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v7 + 104))(v10, *MEMORY[0x263F8E210], v6, v8);
  double v13 = a3;
  double v14 = a2;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v10, a1);
  double v11 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v11;
}

uint64_t EdgeInsets.round(_:toMultipleOf:)(uint64_t a1, double a2)
{
  return specialized FloatingPoint.round(_:toMultipleOf:)(a1, a2);
}

uint64_t EdgeInsets.round(toMultipleOf:)(double a1)
{
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v3 + 104))(v6, *MEMORY[0x263F8E210], v2, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v6, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

BOOL EdgeInsets.approximates(_:epsilon:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  return vabdd_f64(a6, a1) < a5 && vabdd_f64(a7, a2) < a5 && vabdd_f64(a8, a3) < a5 && vabdd_f64(a9, a4) < a5;
}

uint64_t EnvironmentValues.vibrantColorStyle.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.vibrantColorStyle : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    uint64_t v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    uint64_t v6 = v8;
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

uint64_t EnvironmentValues.vibrantColorStyle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.vibrantColorStyle.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    uint64_t v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *uint64_t v3 = v5;
  v3[1] = v7;
  return EnvironmentValues.vibrantColorStyle.modify;
}

void EnvironmentValues.vibrantColorStyle.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v4, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t specialized static SystemVibrantColorStyle.apply(_:color:material:to:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *a1;
  int v7 = *a1;
  uint64_t v8 = *(void *)(a4 + 48);
  uint64_t v9 = *(void *)(a4 + 56);
  if (v9)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, v47);
    swift_release_n();
    uint64_t result = swift_release_n();
    if ((v47[0] & 1) == 0)
    {
LABEL_3:
      char v11 = 0;
      char v12 = 0;
      unint64_t v6 = 0xBE83E3FD00000000;
      unint64_t v13 = 0xBE5B9BCC3F0DDDD1;
      switch(v7)
      {
        case 0:
          goto LABEL_34;
        case 1:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0xBF03E77700000000;
          unint64_t v13 = 0x3D8D70F83EF83113;
          goto LABEL_34;
        case 2:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0xBF04730400000000;
          unint64_t v13 = 0x3E90B3923EF719F5;
          goto LABEL_34;
        case 3:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0xBE2844D700000000;
          unint64_t v13 = 0x3E88BA70BE9E6CB8;
          goto LABEL_34;
        case 4:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3E921F7A00000000;
          unint64_t v13 = 0x3E47E29DBE9D0FB3;
          goto LABEL_34;
        case 5:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3E74DEF100000000;
          unint64_t v13 = 0x3E8C818ABF018702;
          goto LABEL_34;
        case 6:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3ECFD8A400000000;
          unint64_t v13 = 0x3E3ACC6ABE9990C1;
          goto LABEL_34;
        case 7:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3F0AF5C900000000;
          unint64_t v13 = 0x3CAE088CBEEA146ALL;
          goto LABEL_34;
        case 8:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3EC0D62200000000;
          unint64_t v13 = 0xBE0055B9BDF09B66;
          goto LABEL_34;
        case 9:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0x3ECD6C3200000000;
          unint64_t v13 = 0xBE1759CD3E5E1BAALL;
          goto LABEL_34;
        case 10:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0xBDC8EBB200000000;
          unint64_t v13 = 0xBE828B3F3F118D33;
          goto LABEL_34;
        case 11:
          char v11 = 0;
          char v12 = 0;
          unint64_t v6 = 0xBE16DBA800000000;
          unint64_t v13 = 0x3ADE76653DF46AC9;
          goto LABEL_34;
        default:
          goto LABEL_11;
      }
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>();
    BloomFilter.init(hashValue:)(v14);
    uint64_t v15 = swift_retain_n();
    uint64_t v16 = specialized find1<A>(_:key:filter:)(v15, v49);
    if (v16) {
      int v17 = *(unsigned __int8 *)(v16 + 72);
    }
    else {
      int v17 = 0;
    }
    uint64_t result = swift_release_n();
    if (!v17) {
      goto LABEL_3;
    }
  }
  char v11 = 1;
  unint64_t v13 = v6;
  char v12 = 1;
  switch(v7)
  {
    case 0:
      break;
    case 1:
      char v12 = 0;
      unint64_t v6 = 0xBD29D1F600000000;
      unint64_t v13 = 0x3F0AF6403F6B588ELL;
      break;
    case 2:
      char v12 = 0;
      unint64_t v6 = 0xBC984A0E00000000;
      unint64_t v13 = 0x3F48092D3F71335DLL;
      break;
    case 3:
      char v12 = 0;
      unint64_t v6 = 0x3E8A027500000000;
      unint64_t v13 = 0x3F3E7A103DE6B50BLL;
      break;
    case 4:
      char v12 = 0;
      unint64_t v6 = 0x3F4A1F4B00000000;
      unint64_t v13 = 0x3F32085B3E260807;
      break;
    case 5:
      char v12 = 0;
      unint64_t v6 = 0x3F3D901900000000;
      unint64_t v13 = 0x3F4195033E783276;
      break;
    case 6:
      char v12 = 0;
      unint64_t v6 = 0x3F60B2EA00000000;
      unint64_t v13 = 0x3F3383CF3E8A3444;
      break;
    case 7:
      char v12 = 0;
      unint64_t v6 = 0x3F79820200000000;
      unint64_t v13 = 0x3EFC06E23C63150ELL;
      break;
    case 8:
      char v12 = 0;
      unint64_t v6 = 0x3F60509C00000000;
      unint64_t v13 = 0x3EAB890D3EAF876ALL;
      break;
    case 9:
      char v12 = 0;
      unint64_t v6 = 0x3F6F160900000000;
      unint64_t v13 = 0x3EACF80E3F3BE2D6;
      break;
    case 10:
      char v12 = 0;
      unint64_t v6 = 0x3ED9EADD00000000;
      unint64_t v13 = 0x3E89A2C63F86CCA3;
      break;
    case 11:
      char v12 = 0;
      unint64_t v6 = 0x3EB1C82100000000;
      unint64_t v13 = 0x3EFE1EF73F1D2A84;
      break;
    default:
LABEL_11:
      return specialized ColorProvider._apply(color:to:)(a2, a4, v7);
  }
LABEL_34:
  uint64_t v18 = *(void *)a4;
  uint64_t v19 = *(void *)(a4 + 8);
  switch(*(unsigned char *)(a4 + 24))
  {
    case 1:
      if (v19 == *(void *)(a4 + 16)) {
        return result;
      }
      if (v12)
      {
        if (v7) {
          char v30 = 0;
        }
        else {
          char v30 = v11;
        }
        if (v30)
        {
          long long v31 = xmmword_246211E50;
          long long v32 = xmmword_246211E60;
          unsigned long long v33 = xmmword_246211E70;
          char v34 = 5;
          uint64_t v35 = 0x3E3717593E9B367ALL;
          uint64_t v36 = 1065353216;
          uint64_t v37 = 1046309063;
LABEL_47:
          uint64_t v49 = v35;
          unsigned long long v50 = v33;
          long long v51 = v32;
          long long v52 = v31;
          uint64_t v53 = v37;
          uint64_t v54 = 0;
          uint64_t v55 = v36;
          char v56 = v34;
          int v57 = 1065353216;
          uint64_t v58 = 0;
          char v59 = -1;
          uint64_t v42 = MEMORY[0x263F8EE78];
          uint64_t v60 = MEMORY[0x263F8EE78];
          uint64_t v43 = *(void *)(a4 + 32);
          int v44 = *(unsigned __int8 *)(a4 + 40);
          if (v44 == 1) {
            uint64_t v42 = *(void *)(a4 + 32);
          }
          unsigned __int8 v48 = v18;
          if (v44 == 1) {
            uint64_t v45 = 0;
          }
          else {
            uint64_t v45 = v43;
          }
          if (v44 == 1) {
            char v46 = 5;
          }
          else {
            char v46 = v44;
          }
          *(void *)char v47 = v42;
          _ShapeStyle_Pack.subscript.setter(&v49, &v48, v19);
          uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v45, v46);
          *(void *)(a4 + 32) = *(void *)v47;
          char v29 = 1;
          goto LABEL_56;
        }
        LOBYTE(v49) = 0;
        float v38 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v49, 1.0, 0.0, 1.0);
        uint64_t v37 = 0;
        uint64_t v36 = 0;
        char v34 = 0;
        uint64_t v35 = LODWORD(v38) | ((unint64_t)v39 << 32);
        unsigned long long v33 = v41 | (unsigned __int128)((unint64_t)v40 << 32);
        long long v32 = 0uLL;
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v36 = 0;
        uint64_t v35 = (v13 << 32) | 0x3F000000;
        long long v32 = 0uLL;
        unsigned long long v33 = v6 | (unsigned __int128)HIDWORD(v13);
        char v34 = 4;
      }
      long long v31 = 0uLL;
      goto LABEL_47;
    case 2:
      uint64_t v49 = v8;
      *(void *)&unsigned long long v50 = v9;
      swift_retain();
      swift_retain();
      EnvironmentValues.systemColorDefinition.getter();
      v47[0] = v7;
      uint64_t v49 = v8;
      *(void *)&unsigned long long v50 = v9;
      float v21 = (*(float (**)(char *, uint64_t *))(v20 + 8))(v47, &v49);
      int v23 = v22;
      int v25 = v24;
      int v27 = v26;
      swift_release();
      swift_release();
      type metadata accessor for ColorBox<ResolvedColorProvider>();
      long long v28 = (float *)swift_allocObject();
      v28[4] = v21;
      *((_DWORD *)v28 + 5) = v23;
      *((_DWORD *)v28 + 6) = v25;
      *((_DWORD *)v28 + 7) = v27;
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a4 + 32), *(unsigned char *)(a4 + 40));
      *(void *)(a4 + 32) = v28;
      char v29 = 3;
LABEL_56:
      *(unsigned char *)(a4 + 40) = v29;
      return result;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a4 + 32), *(unsigned char *)(a4 + 40));
      *(void *)(a4 + 32) = 0;
      *(unsigned char *)(a4 + 40) = 0;
      return result;
  }
}

uint64_t sub_2460F2AD4(uint64_t *a1)
{
  return EnvironmentValues.vibrantColorStyle.setter(*a1, a1[1]);
}

uint64_t dispatch thunk of static VibrantColorStyle.apply(_:color:material:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

ValueMetadata *type metadata accessor for SystemVibrantColorStyle()
{
  return &type metadata for SystemVibrantColorStyle;
}

void type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    }
  }
}

ValueMetadata *type metadata accessor for VibrantColorStyleKey()
{
  return &type metadata for VibrantColorStyleKey;
}

id ImageLayer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id ImageLayer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ImageLayer.__allocating_init(layer:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v4 = objc_msgSend(v3, sel_initWithLayer_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

id ImageLayer.init(layer:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)();
  v7.receiver = v1;
  v7.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v7, sel_initWithLayer_, v4);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v5;
}

id ImageLayer.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ImageLayer.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id ImageLayer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL GraphicsImage.isTiledWhenStretchedToSize(_:)(double a1, double a2)
{
  int v3 = *(unsigned __int8 *)(v2 + 96);
  if (v3 == 2 || (v3 & 1) != 0) {
    return 0;
  }
  double v4 = *(double *)(v2 + 16);
  double v5 = 0.0;
  double v6 = 0.0;
  if (v4 != 0.0)
  {
    double v7 = *(double *)(v2 + 24);
    double v8 = *(double *)(v2 + 32);
    switch(*(unsigned char *)(v2 + 40))
    {
      case 4:
      case 5:
      case 6:
      case 7:
        double v8 = *(double *)(v2 + 24);
        double v7 = *(double *)(v2 + 32);
        break;
      default:
        break;
    }
    double v9 = 1.0 / v4;
    double v5 = v9 * v7;
    double v6 = v9 * v8;
  }
  if (v5 - *(double *)(v2 + 72) - *(double *)(v2 + 88) > 1.0 && v5 != a1) {
    return 1;
  }
  if (v6 == a2) {
    return 0;
  }
  return v6 - *(double *)(v2 + 64) - *(double *)(v2 + 80) > 1.0;
}

uint64_t specialized static ImageLayer.updateAsync(layer:oldImage:oldSize:newImage:newSize:)(Class *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = 0;
  int v8 = *(unsigned __int8 *)(a2 + 60);
  int v9 = *(unsigned __int8 *)(a3 + 60);
  if (v8 == v9)
  {
    int v10 = *(unsigned __int8 *)(a2 + 98);
    if (v10 == *(unsigned __int8 *)(a3 + 98))
    {
      int v11 = *(unsigned __int8 *)(a2 + 97);
      int v12 = *(unsigned __int8 *)(a3 + 97);
      if (((v11 ^ v12) & 1) == 0)
      {
        unint64_t v13 = *(float32x4_t **)a2;
        int v14 = *(unsigned __int8 *)(a2 + 8);
        uint64_t v15 = *(float32x4_t **)a3;
        int v16 = *(unsigned __int8 *)(a3 + 8);
        uint64_t v21 = *(void *)(a2 + 32);
        double v22 = *(double *)(a3 + 16);
        uint64_t v23 = *(void *)(a3 + 24);
        uint64_t v24 = *(void *)(a3 + 32);
        switch(*(unsigned char *)(a2 + 8))
        {
          case 0:
            if (*(unsigned char *)(a3 + 8))
            {
              int v25 = *(float32x4_t **)a3;
              if (v16 == 255)
              {
                outlined copy of GraphicsImage.Contents?(v25, 255);
                outlined copy of GraphicsImage.Contents?(v13, 0);
                int v26 = v13;
                char v27 = 0;
                goto LABEL_20;
              }
              outlined copy of GraphicsImage.Contents?(v25, *(unsigned char *)(a3 + 8));
              outlined copy of GraphicsImage.Contents?(v13, 0);
              long long v28 = v13;
              char v29 = 0;
              goto LABEL_42;
            }
            char v71 = *(unsigned char *)(a2 + 40);
            char v72 = *(unsigned char *)(a2 + 96);
            long long v73 = *(_OWORD *)(a2 + 80);
            long long v74 = *(_OWORD *)(a2 + 64);
            char rect2 = *(unsigned char *)(a2 + 99);
            char v77 = *(unsigned char *)(a3 + 40);
            char v78 = *(unsigned char *)(a3 + 96);
            uint64_t v79 = *(void *)(a3 + 88);
            uint64_t v80 = *(void *)(a3 + 80);
            uint64_t v81 = *(void *)(a3 + 72);
            uint64_t v82 = *(void *)(a3 + 64);
            char v83 = *(unsigned char *)(a3 + 99);
            float32x4_t v90 = *(float32x4_t *)(a2 + 16);
            uint64_t v88 = *(void *)(a3 + 52);
            uint64_t v89 = *(void *)(a3 + 44);
            uint64_t v84 = *(void *)(a2 + 52);
            uint64_t v85 = *(void *)(a2 + 44);
            outlined copy of GraphicsImage.Contents?(v15, 0);
            outlined copy of GraphicsImage.Contents?(v13, 0);
            outlined consume of GraphicsImage.Contents?(v13, 0);
            outlined consume of GraphicsImage.Contents?(v15, 0);
            uint64_t v36 = a1;
            uint64_t v7 = 0;
            if (v13 == v15) {
              goto LABEL_30;
            }
            return v7;
          case 1:
            if (v16 != 1)
            {
              char v30 = *(float32x4_t **)a3;
              if (v16 == 255)
              {
                outlined copy of GraphicsImage.Contents?(v30, 255);
                outlined copy of GraphicsImage.Contents?(v13, 1);
                int v26 = v13;
                char v27 = 1;
                goto LABEL_20;
              }
              outlined copy of GraphicsImage.Contents?(v30, *(unsigned char *)(a3 + 8));
              outlined copy of GraphicsImage.Contents?(v13, 1);
              long long v28 = v13;
              char v29 = 1;
              goto LABEL_42;
            }
            char v71 = *(unsigned char *)(a2 + 40);
            char v72 = *(unsigned char *)(a2 + 96);
            long long v73 = *(_OWORD *)(a2 + 80);
            long long v74 = *(_OWORD *)(a2 + 64);
            char rect2 = *(unsigned char *)(a2 + 99);
            char v77 = *(unsigned char *)(a3 + 40);
            char v78 = *(unsigned char *)(a3 + 96);
            uint64_t v79 = *(void *)(a3 + 88);
            uint64_t v80 = *(void *)(a3 + 80);
            uint64_t v81 = *(void *)(a3 + 72);
            uint64_t v82 = *(void *)(a3 + 64);
            char v83 = *(unsigned char *)(a3 + 99);
            float32x4_t v90 = *(float32x4_t *)(a2 + 16);
            uint64_t v88 = *(void *)(a3 + 52);
            uint64_t v89 = *(void *)(a3 + 44);
            uint64_t v84 = *(void *)(a2 + 52);
            uint64_t v85 = *(void *)(a2 + 44);
            outlined copy of GraphicsImage.Contents?(v15, 1);
            outlined copy of GraphicsImage.Contents?(v13, 1);
            outlined consume of GraphicsImage.Contents?(v13, 1);
            outlined consume of GraphicsImage.Contents?(v15, 1);
            uint64_t v36 = a1;
            if (v13 != v15) {
              goto LABEL_44;
            }
            goto LABEL_30;
          case 2:
            if (v16 != 2)
            {
              long long v31 = *(float32x4_t **)a3;
              if (v16 == 255)
              {
                outlined copy of GraphicsImage.Contents?(v31, 255);
                outlined copy of GraphicsImage.Contents?(v13, 2);
                int v26 = v13;
                char v27 = 2;
                goto LABEL_20;
              }
              outlined copy of GraphicsImage.Contents?(v31, *(unsigned char *)(a3 + 8));
              outlined copy of GraphicsImage.Contents?(v13, 2);
              long long v28 = v13;
              char v29 = 2;
              goto LABEL_42;
            }
            char v71 = *(unsigned char *)(a2 + 40);
            char v72 = *(unsigned char *)(a2 + 96);
            long long v73 = *(_OWORD *)(a2 + 80);
            long long v74 = *(_OWORD *)(a2 + 64);
            char rect2 = *(unsigned char *)(a2 + 99);
            char v77 = *(unsigned char *)(a3 + 40);
            char v78 = *(unsigned char *)(a3 + 96);
            uint64_t v79 = *(void *)(a3 + 88);
            uint64_t v80 = *(void *)(a3 + 80);
            uint64_t v81 = *(void *)(a3 + 72);
            uint64_t v82 = *(void *)(a3 + 64);
            char v83 = *(unsigned char *)(a3 + 99);
            float32x4_t v90 = *(float32x4_t *)(a2 + 16);
            uint64_t v88 = *(void *)(a3 + 52);
            uint64_t v89 = *(void *)(a3 + 44);
            uint64_t v84 = *(void *)(a2 + 52);
            uint64_t v85 = *(void *)(a2 + 44);
            uint64_t v38 = v13[3].i64[0];
            __int8 v39 = v13[2].i8[13];
            __int8 v40 = v13[2].i8[12];
            __int32 v41 = v13[2].i32[2];
            uint64_t v42 = v13[2].i64[0];
            __int8 v43 = v13[1].i8[8];
            CGFloat v44 = *(double *)v15[1].i64;
            __int8 v45 = v15[1].i8[8];
            CGFloat v46 = *(double *)v15[2].i64;
            __int32 v47 = v15[2].i32[2];
            __int8 v48 = v15[2].i8[12];
            __int8 v49 = v15[2].i8[13];
            uint64_t v50 = v15[3].i64[0];
            v92 = (float32x4_t *)v13[1].i64[0];
            __int8 v93 = v43;
            v94.i64[0] = v42;
            v94.i32[2] = v41;
            v94.i8[12] = v40;
            v94.i8[13] = v39;
            uint64_t v95 = v38;
            v106.origin.CGFloat x = v44;
            LOBYTE(v106.origin.y) = v45;
            v106.size.double width = v46;
            LODWORD(v106.size.height) = v47;
            BYTE4(v106.size.height) = v48;
            BYTE5(v106.size.height) = v49;
            uint64_t v107 = v50;
            outlined copy of GraphicsImage.Contents?(v15, 2);
            outlined copy of GraphicsImage.Contents?(v13, 2);
            char v70 = specialized static ResolvedVectorGlyph.== infix(_:_:)((uint64_t)&v92, (uint64_t)&v106);
            outlined consume of GraphicsImage.Contents?(v13, 2);
            outlined consume of GraphicsImage.Contents?(v15, 2);
            uint64_t v7 = 0;
            if ((v70 & 1) == 0) {
              return v7;
            }
            if (a4 != a6) {
              return v7;
            }
            uint64_t v36 = a1;
            if (a5 != a7) {
              return v7;
            }
LABEL_30:
            uint64_t v87 = v36;
            v92 = v13;
            __int8 v93 = v14;
            float32x4_t v94 = v90;
            uint64_t v95 = v21;
            char v96 = v71;
            uint64_t v97 = v85;
            uint64_t v98 = v84;
            char v99 = v8;
            long long v100 = v74;
            long long v101 = v73;
            char v102 = v72;
            char v103 = v11;
            char v104 = v10;
            char v105 = rect2;
            GraphicsImage.layerStretchInPixels(size:)((uint64_t)&v106, a4, a5);
            CGFloat x = v106.origin.x;
            CGFloat y = v106.origin.y;
            CGFloat height = v106.size.height;
            rect2CGFloat a = v106.size.width;
            int v54 = v107;
            v92 = v15;
            __int8 v93 = v16;
            *(double *)v94.i64 = v22;
            v94.i64[1] = v23;
            uint64_t v95 = v24;
            char v96 = v77;
            uint64_t v97 = v89;
            uint64_t v98 = v88;
            char v99 = v9;
            *(void *)&long long v100 = v82;
            *((void *)&v100 + 1) = v81;
            *(void *)&long long v101 = v80;
            *((void *)&v101 + 1) = v79;
            char v102 = v78;
            char v103 = v12;
            char v104 = v10;
            char v105 = v83;
            GraphicsImage.layerStretchInPixels(size:)((uint64_t)&v106, a6, a7);
            if (v54 != v107) {
              goto LABEL_44;
            }
            double v55 = v106.origin.x;
            double v56 = v106.origin.y;
            double width = v106.size.width;
            double v57 = v106.size.height;
            v111.origin.CGFloat x = x;
            v111.origin.CGFloat y = y;
            v111.size.double width = rect2a;
            v111.size.CGFloat height = height;
            if (!CGRectEqualToRect(v106, v111))
            {
              id v59 = objc_msgSend(self, sel_valueWithRect_, v55, v56, width, v57);
              v108.super.isCGFloat a = *v87;
              v60._countAndFlagsBits = 0x73746E65746E6F63;
              v60._object = (void *)0xEE007265746E6543;
              *(void *)&v108._attr.refcount = 1;
              DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v59, v60, v108, v61);
            }
            if (v22 == *(double *)v90.i64)
            {
              if (v9) {
                goto LABEL_49;
              }
            }
            else
            {
              id v67 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v22);
              v110.super.isCGFloat a = *v87;
              uint64_t v7 = 1;
              v68._countAndFlagsBits = 0x73746E65746E6F63;
              v68._object = (void *)0xED0000656C616353;
              *(void *)&v110._attr.refcount = 1;
              DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v67, v68, v110, v69);

              if (v9) {
                return v7;
              }
            }
            specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(v85, v84, v8, v89, v88, v9);
            goto LABEL_49;
          case 3:
            goto LABEL_10;
          case 4:
            if (v16 == 4)
            {
              if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v15[1], v13[1])), 0xFuLL))))
              {
                outlined copy of GraphicsImage.Contents?(*(id *)a3, 4);
                outlined copy of GraphicsImage.Contents?(v13, 4);
                outlined consume of GraphicsImage.Contents?(v13, 4);
                outlined consume of GraphicsImage.Contents?(v15, 4);
LABEL_49:
                uint64_t v7 = 1;
              }
              else
              {
                float32x4_t v91 = v15[1];
                outlined copy of GraphicsImage.Contents?(v15, 4);
                outlined copy of GraphicsImage.Contents?(v13, 4);
                if (one-time initialization token for cache != -1) {
                  swift_once();
                }
                long long v63 = (void *)specialized ObjectCache.subscript.getter(v91.f32[0], v91.f32[1], v91.f32[2], v91.f32[3]);
                v109.super.isCGFloat a = *a1;
                uint64_t v7 = 1;
                v64._countAndFlagsBits = 0x756F72676B636162;
                v64._object = (void *)0xEF726F6C6F43646ELL;
                *(void *)&v109._attr.refcount = 1;
                DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v63, v64, v109, v65);

                outlined consume of GraphicsImage.Contents?(v13, 4);
                outlined consume of GraphicsImage.Contents?(v15, 4);
              }
            }
            else
            {
              long long v32 = *(float32x4_t **)a3;
              if (v16 == 255)
              {
                outlined copy of GraphicsImage.Contents?(v32, 255);
                outlined copy of GraphicsImage.Contents?(v13, 4);
                int v26 = v13;
                char v27 = 4;
LABEL_20:
                outlined consume of GraphicsImage.Contents?(v26, v27);
                unsigned long long v33 = v15;
                char v34 = -1;
              }
              else
              {
                outlined copy of GraphicsImage.Contents?(v32, *(unsigned char *)(a3 + 8));
                outlined copy of GraphicsImage.Contents?(v13, 4);
                long long v28 = v13;
                char v29 = 4;
LABEL_42:
                outlined consume of GraphicsImage.Contents?(v28, v29);
                unsigned long long v33 = v15;
                char v34 = v16;
              }
              outlined consume of GraphicsImage.Contents?(v33, v34);
LABEL_44:
              uint64_t v7 = 0;
            }
            break;
          default:
            if (v14 == 255)
            {
              outlined copy of GraphicsImage.Contents?(*(id *)a3, *(unsigned char *)(a3 + 8));
              long long v28 = v13;
              char v29 = -1;
            }
            else
            {
LABEL_10:
              outlined copy of GraphicsImage.Contents?(*(id *)a3, *(unsigned char *)(a3 + 8));
              outlined copy of GraphicsImage.Contents?(v13, v14);
              long long v28 = v13;
              char v29 = v14;
            }
            goto LABEL_42;
        }
      }
    }
  }
  return v7;
}

Swift::Double __swiftcall DerivedLayoutEngine.layoutPriority()()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v4);
  uint64_t v1 = v4;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    double v2 = (*(double (**)(void))(*(void *)v1 + 88))();
    swift_release();
    return v2;
  }
  return result;
}

Swift::Bool __swiftcall DerivedLayoutEngine.ignoresAutomaticPadding()()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v4);
  uint64_t v1 = v4;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    char v2 = (*(uint64_t (**)(void))(*(void *)v1 + 96))();
    swift_release();
    return v2 & 1;
  }
  return result;
}

Swift::Bool __swiftcall DerivedLayoutEngine.requiresSpacingProjection()()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v4);
  uint64_t v1 = v4;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    char v2 = (*(uint64_t (**)(void))(*(void *)v1 + 104))();
    swift_release();
    return v2 & 1;
  }
  return result;
}

SwiftUI::Spacing __swiftcall DerivedLayoutEngine.spacing()()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  uint64_t v1 = v3;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    result.minima._rawValue = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    (*(void (**)(void))(*(void *)v1 + 112))();
    return (SwiftUI::Spacing)swift_release();
  }
  return result;
}

uint64_t DerivedLayoutEngine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = a1[2];
  char v6 = *((unsigned char *)a1 + 24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v13, a2, a3);
  uint64_t v7 = v13;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v9 = v3;
    char v10 = v4;
    uint64_t v11 = v5;
    char v12 = v6;
    (*(void (**)(uint64_t *))(*(void *)v7 + 120))(&v9);
    return swift_release();
  }
  return result;
}

uint64_t DerivedLayoutEngine.lengthThatFits(_:in:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v7 = a1[2];
  char v8 = *((unsigned char *)a1 + 24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  uint64_t v9 = v15;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    uint64_t v11 = v5;
    char v12 = v6;
    uint64_t v13 = v7;
    char v14 = v8;
    (*(void (**)(uint64_t *, void))(*(void *)v9 + 128))(&v11, a2 & 1);
    return swift_release();
  }
  return result;
}

uint64_t DerivedLayoutEngine.childGeometries(at:origin:)(uint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v15, a2, a3);
  uint64_t v11 = v15;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v14[0] = v7;
    v14[1] = v8;
    _OWORD v14[2] = v9;
    v14[3] = v10;
    uint64_t v12 = (*(uint64_t (**)(void *, double, double))(*(void *)v11 + 136))(v14, a4, a5);
    swift_release();
    return v12;
  }
  return result;
}

uint64_t DerivedLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v13, a3, a4);
  uint64_t v9 = v13;
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v12[0] = v5;
    v12[1] = v6;
    _OWORD v12[2] = v7;
    v12[3] = v8;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 144))(a1, v12);
    swift_release();
    return v10;
  }
  return result;
}

uint64_t dispatch thunk of DerivedLayoutEngine.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

double static CGSize.deviceSize.getter()
{
  return 1.79769313e308;
}

uint64_t dispatch thunk of TestHost.setTestSize(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TestHost.setTestSafeAreaInsets(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TestHost.testSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TestHost.sendTestEvents(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of TestHost.resetTestEvents()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of TestHost.environmentOverride.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of TestHost.environmentOverride.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of TestHost.environmentOverride.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of TestHost.viewCacheIsEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of TestHost.isHiddenForReuse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of TestHost.isHiddenForReuse.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of TestHost.isHiddenForReuse.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of TestHost.forEachIdentifiedView(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of TestHost.forEachDescendantHost(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of TestHost.renderForTest(interval:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of TestHost.testIntentsChanged(before:after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of TestHost.invalidateProperties(_:mayDeferUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of TestHost.accessibilityEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of TestHost.accessibilityEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of TestHost.accessibilityEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of TestHost.attributeCountInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

__C::CGRect __swiftcall CGRect.unapplying(_:)(CGAffineTransform *a1)
{
  CGFloat v20 = v3;
  CGFloat v21 = v4;
  double v5 = v2;
  double v6 = v1;
  CGFloat a = a1->a;
  double b = a1->b;
  double c = a1->c;
  double d = a1->d;
  double tx = a1->tx;
  double ty = a1->ty;
  if (a1->a == 1.0 && b == 0.0 && (c == 0.0 ? (BOOL v13 = d == 1.0) : (BOOL v13 = 0), v13 && !CGRectIsInfinite(*(CGRect *)&v1)))
  {
    double x = v6 - tx;
    double y = v5 - ty;
    v26.origin.double x = v6;
    v26.origin.double y = v5;
    v26.size.double width = v20;
    v26.size.CGFloat height = v21;
    CGFloat Width = CGRectGetWidth(v26);
    v27.origin.double x = v6;
    v27.origin.double y = v5;
    v27.size.double width = v20;
    v27.size.CGFloat height = v21;
    result.size.CGFloat height = CGRectGetHeight(v27);
  }
  else
  {
    v23.CGFloat a = a;
    v23.double b = b;
    v23.double c = c;
    v23.double d = d;
    v23.double tx = tx;
    v23.double ty = ty;
    CGAffineTransformInvert(&v22, &v23);
    CGAffineTransform v23 = v22;
    v24.origin.double x = v6;
    v24.origin.double y = v5;
    v24.size.double width = v20;
    v24.size.CGFloat height = v21;
    __C::CGRect result = (__C::CGRect)CGRectApplyAffineTransform(v24, &v23);
    double x = result.origin.x;
    double y = result.origin.y;
    CGFloat Width = result.size.width;
  }
  double v17 = x;
  double v18 = y;
  double v19 = Width;
  result.size.double width = v19;
  result.origin.double y = v18;
  result.origin.double x = v17;
  return result;
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.getter()
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.speechSpellsOutCharacters.getter()
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
    swift_release_n();
    return v5;
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = a2(v8, &v10);
    swift_release_n();
    return v9;
  }
}

uint64_t EnvironmentValues.speechAdjustedPitch.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.speechAnnouncementsPriority.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.setter(uint64_t a1)
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.speechSpellsOutCharacters.setter(uint64_t a1)
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.speechAlwaysIncludesPunctuation.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.speechAdjustedPitch.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.speechAnnouncementsPriority.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.accessibilityEnabled.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.accessibilityEnabled.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned __int8 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityEnabled.modify;
}

void EnvironmentValues.accessibilityEnabled.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues.speechAlwaysIncludesPunctuation.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned __int8 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5;
  return EnvironmentValues.speechAlwaysIncludesPunctuation.modify;
}

void EnvironmentValues.speechAlwaysIncludesPunctuation.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.speechAlwaysIncludesPunctuation : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v7 = a2(v5);
    swift_release_n();
  }
  else
  {
    uint64_t v9 = swift_retain_n();
    char v7 = a3(v9, &v11);
  }
  uint64_t result = swift_release_n();
  *a4 = v7;
  return result;
}

void (*EnvironmentValues.speechSpellsOutCharacters.modify(void *a1))(uint64_t a1, char a2)
{
  unsigned __int8 v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5;
  return EnvironmentValues.speechSpellsOutCharacters.modify;
}

void EnvironmentValues.speechSpellsOutCharacters.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.speechAlwaysIncludesPunctuation.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *(void ***)a1;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v9 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v10 = *v9;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = v7 + 1;
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  a3(v9, v8, v11);
  swift_release();
  if (v9[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t key path getter for EnvironmentValues.speechAdjustedPitch : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    char v6 = v5;
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v4 = specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)&v10);
    char v6 = v8;
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v6 & 1;
  return result;
}

void (*EnvironmentValues.speechAdjustedPitch.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    char v7 = v6;
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v8, (uint64_t)(v3 + 2));
    char v7 = v9;
  }
  swift_release_n();
  v3[6] = 0;
  *uint64_t v3 = v5;
  *((unsigned char *)v3 + 8) = v7 & 1;
  return EnvironmentValues.speechAdjustedPitch.modify;
}

void EnvironmentValues.speechAdjustedPitch.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[5];
  uint64_t v3 = **a1;
  char v4 = *((unsigned char *)*a1 + 8);
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[5];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t key path getter for EnvironmentValues.speechAnnouncementsPriority : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t (*EnvironmentValues.speechAnnouncementsPriority.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 3;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.speechAnnouncementsPriority.modify;
}

uint64_t EnvironmentValues.speechAnnouncementsPriority.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues._accessibilityDifferentiateWithoutColor.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues._accessibilityDifferentiateWithoutColor.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.accessibilityDifferentiateWithoutColor.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.modify;
}

void EnvironmentValues.accessibilityDifferentiateWithoutColor.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues._accessibilityDifferentiateWithoutColor.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues._accessibilityDifferentiateWithoutColor.modify;
}

void EnvironmentValues._accessibilityDifferentiateWithoutColor.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues._accessibilityReduceTransparency.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues._accessibilityReduceTransparency.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.accessibilityReduceTransparency.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityReduceTransparency.modify;
}

void EnvironmentValues.accessibilityReduceTransparency.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues._accessibilityReduceTransparency.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues._accessibilityReduceTransparency.modify;
}

void EnvironmentValues._accessibilityReduceTransparency.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.accessibilityReduceMotion.getter()
{
  return EnvironmentValues.accessibilityReduceTransparency.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues._accessibilityReduceMotion.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues._accessibilityReduceMotion.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.accessibilityReduceMotion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityReduceMotion.modify;
}

void EnvironmentValues.accessibilityReduceMotion.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues._accessibilityReduceMotion.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues._accessibilityReduceMotion.modify;
}

void EnvironmentValues._accessibilityReduceMotion.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues.accessibilityPrefersCrossFadeTransitions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityPrefersCrossFadeTransitions.modify;
}

void EnvironmentValues.accessibilityPrefersCrossFadeTransitions.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues._accessibilityInvertColors.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues._accessibilityInvertColors.setter(uint64_t a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.accessibilityInvertColors.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityInvertColors.modify;
}

void EnvironmentValues.accessibilityInvertColors.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues._accessibilityInvertColors.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues._accessibilityInvertColors.modify;
}

void EnvironmentValues._accessibilityInvertColors.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues._accessibilityShowButtonShapes.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.accessibilityShowButtonShapes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityShowButtonShapes.modify;
}

void EnvironmentValues.accessibilityShowButtonShapes.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.accessibilityDifferentiateWithoutColor.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *(void ***)a1;
  uint64_t v8 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = v7 + 1;
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

void (*EnvironmentValues._accessibilityShowButtonShapes.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues._accessibilityShowButtonShapes.modify;
}

void EnvironmentValues._accessibilityShowButtonShapes.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.accessibilityDimFlashingLights.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.accessibilityDimFlashingLights.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityDimFlashingLights.modify;
}

void EnvironmentValues.accessibilityDimFlashingLights.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.accessibilityPlayAnimatedImages.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.accessibilityPlayAnimatedImages.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityPlayAnimatedImages.modify;
}

void EnvironmentValues.accessibilityPlayAnimatedImages.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.accessibilityPrefersHeadAnchorAlternative.getter()
{
}

void EnvironmentValues.accessibilityIncreaseFocusStateEnabled.getter()
{
}

void EnvironmentValues.accessibilityReduceHoverReveal.getter()
{
}

void EnvironmentValues.accessibilityReduceHoverReveal.setter()
{
}

void EnvironmentValues.accessibilityReduceHoverReveal.modify()
{
}

uint64_t EnvironmentValues.accessibilityPrefersOnOffLabels.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

void (*EnvironmentValues.accessibilityPrefersOnOffLabels.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.accessibilityPrefersOnOffLabels.modify;
}

void EnvironmentValues.accessibilityPrefersOnOffLabels.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.accessibilityEnabled.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *(void ***)a1;
  uint64_t v8 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = v7 + 1;
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t sub_2460F67F8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6838(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityEnabled.setter(*a1);
}

uint64_t sub_2460F6860@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.speechAlwaysIncludesPunctuation : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F68A0(unsigned __int8 *a1)
{
  return EnvironmentValues.speechAlwaysIncludesPunctuation.setter(*a1);
}

uint64_t sub_2460F68C8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.speechAlwaysIncludesPunctuation : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6908(unsigned __int8 *a1)
{
  return EnvironmentValues.speechSpellsOutCharacters.setter(*a1);
}

uint64_t sub_2460F6934(uint64_t a1)
{
  return EnvironmentValues.speechAdjustedPitch.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_2460F6968(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.speechAnnouncementsPriority.setter(&v2);
}

uint64_t sub_2460F69A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_27Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityDifferentiateWithoutColor.getter, a3);
}

uint64_t sub_2460F69B8(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityDifferentiateWithoutColor.setter(*a1);
}

uint64_t sub_2460F69E0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6A20(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityDifferentiateWithoutColor.setter(*a1);
}

uint64_t sub_2460F6A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_27Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityReduceTransparency.getter, a3);
}

uint64_t sub_2460F6A60(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityReduceTransparency.setter(*a1);
}

uint64_t sub_2460F6A88@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6AC8(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityReduceTransparency.setter(*a1);
}

uint64_t sub_2460F6AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_27Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityReduceMotion.getter, a3);
}

uint64_t sub_2460F6B08(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityReduceMotion.setter(*a1);
}

uint64_t sub_2460F6B30@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6B70(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityReduceMotion.setter(*a1);
}

uint64_t sub_2460F6B98@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6BD8(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter(*a1);
}

uint64_t sub_2460F6C00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_27Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityInvertColors.getter, a3);
}

uint64_t sub_2460F6C18(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityInvertColors.setter(*a1);
}

uint64_t sub_2460F6C40@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6C80(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityInvertColors.setter(*a1);
}

uint64_t sub_2460F6CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_27Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityShowButtonShapes.getter, a3);
}

uint64_t sub_2460F6CC0(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityShowButtonShapes.setter(*a1);
}

uint64_t sub_2460F6CE8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6D28(unsigned __int8 *a1)
{
  return EnvironmentValues._accessibilityShowButtonShapes.setter(*a1);
}

uint64_t sub_2460F6D50@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6D90(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityDimFlashingLights.setter(*a1);
}

uint64_t sub_2460F6DB8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6DF8(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityPlayAnimatedImages.setter(*a1);
}

void sub_2460F6E20()
{
}

void sub_2460F6E30()
{
}

void sub_2460F6E44()
{
}

void sub_2460F6E54()
{
}

uint64_t sub_2460F6E64@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.accessibilityEnabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2460F6EA4(unsigned __int8 *a1)
{
  return EnvironmentValues.accessibilityPrefersOnOffLabels.setter(*a1);
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey()
{
  return &type metadata for EnvironmentValues.AccessibilitySpeechAnnouncementsPriorityKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey()
{
  return &type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey()
{
  return &type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey()
{
  return &type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AccessibilityEnabledKey()
{
  return &type metadata for EnvironmentValues.AccessibilityEnabledKey;
}

ValueMetadata *type metadata accessor for AccessibilityDifferentiateWithoutColorKey()
{
  return &type metadata for AccessibilityDifferentiateWithoutColorKey;
}

ValueMetadata *type metadata accessor for AccessibilityReduceTransparencyKey()
{
  return &type metadata for AccessibilityReduceTransparencyKey;
}

ValueMetadata *type metadata accessor for AccessibilityReduceMotionKey()
{
  return &type metadata for AccessibilityReduceMotionKey;
}

ValueMetadata *type metadata accessor for AccessibilityPrefersCrossFadeTransitionsKey()
{
  return &type metadata for AccessibilityPrefersCrossFadeTransitionsKey;
}

ValueMetadata *type metadata accessor for AccessibilityInvertColorsKey()
{
  return &type metadata for AccessibilityInvertColorsKey;
}

ValueMetadata *type metadata accessor for AccessibilityButtonShapesKey()
{
  return &type metadata for AccessibilityButtonShapesKey;
}

ValueMetadata *type metadata accessor for AccessibilityDimFlashingLightsKey()
{
  return &type metadata for AccessibilityDimFlashingLightsKey;
}

ValueMetadata *type metadata accessor for AccessibilityPlayAnimatedImagesKey()
{
  return &type metadata for AccessibilityPlayAnimatedImagesKey;
}

ValueMetadata *type metadata accessor for AccessibilityOnOffLabelsKey()
{
  return &type metadata for AccessibilityOnOffLabelsKey;
}

void EnvironmentValues.accessibilityPrefersHeadAnchorAlternative.setter()
{
}

void EnvironmentValues.accessibilityIncreaseFocusStateEnabled.setter()
{
}

void sub_2460F6FCC()
{
}

void sub_2460F6FDC()
{
}

__n128 HoverEffectGroupInfo.init(id:behavior:scope:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4 = a1[1].n128_u64[0];
  unsigned __int8 v5 = a1[1].n128_u8[8];
  unsigned __int8 v6 = *a2;
  unsigned __int8 v7 = *a3;
  __n128 result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = v4;
  a4[1].n128_u8[8] = v5;
  a4[1].n128_u8[9] = v6;
  a4[1].n128_u8[10] = v7;
  return result;
}

void HoverEffectGroupInfo.Identifier.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      Swift::UInt v3 = *(void *)(v0 + 16);
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v4 = v3;
      goto LABEL_10;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return;
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      return;
    case 4:
      Swift::UInt v2 = 4;
      goto LABEL_9;
    default:
      Swift::UInt v2 = 0;
LABEL_9:
      Hasher._combine(_:)(v2);
      Swift::UInt v4 = v1;
LABEL_10:
      Hasher._combine(_:)(v4);
      return;
  }
}

Swift::Int HoverEffectGroupInfo.Identifier.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 24);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v5 = v2;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      return Hasher._finalize()();
    case 4:
      Swift::UInt v4 = 4;
      goto LABEL_7;
    default:
      Swift::UInt v4 = 0;
LABEL_7:
      Hasher._combine(_:)(v4);
      Swift::UInt v5 = v1;
LABEL_8:
      Hasher._combine(_:)(v5);
      return Hasher._finalize()();
  }
}

void protocol witness for Hashable.hash(into:) in conformance HoverEffectGroupInfo.Identifier()
{
  Swift::UInt v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      Swift::UInt v3 = *(void *)(v0 + 16);
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v4 = v3;
      goto LABEL_10;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return;
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      return;
    case 4:
      Swift::UInt v2 = 4;
      goto LABEL_9;
    default:
      Swift::UInt v2 = 0;
LABEL_9:
      Hasher._combine(_:)(v2);
      Swift::UInt v4 = v1;
LABEL_10:
      Hasher._combine(_:)(v4);
      return;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HoverEffectGroupInfo.Identifier()
{
  Hasher.init(_seed:)();
  Swift::UInt v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      Swift::UInt v3 = *(void *)(v0 + 16);
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v4 = v3;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      return Hasher._finalize()();
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      return Hasher._finalize()();
    case 4:
      Swift::UInt v2 = 4;
      goto LABEL_7;
    default:
      Swift::UInt v2 = 0;
LABEL_7:
      Hasher._combine(_:)(v2);
      Swift::UInt v4 = v1;
LABEL_8:
      Hasher._combine(_:)(v4);
      return Hasher._finalize()();
  }
}

BOOL static HoverEffectGroupInfo.Behavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HoverEffectGroupInfo.Behavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int HoverEffectGroupInfo.Behavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static HoverEffectGroupInfo.Scope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void HoverEffectGroupInfo.Scope.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t HoverEffectGroupInfo.isEquivalent(to:)(long long *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  char v3 = *((unsigned char *)a1 + 24);
  int v4 = *((unsigned __int8 *)a1 + 25);
  int v5 = *((unsigned __int8 *)a1 + 26);
  uint64_t v6 = *((void *)v1 + 2);
  char v7 = *((unsigned char *)v1 + 24);
  int v8 = *((unsigned __int8 *)v1 + 25);
  int v9 = *((unsigned __int8 *)v1 + 26);
  long long v15 = *v1;
  uint64_t v16 = v6;
  char v17 = v7;
  long long v12 = *a1;
  uint64_t v13 = v2;
  char v14 = v3;
  char v10 = specialized static HoverEffectGroupInfo.Identifier.== infix(_:_:)((uint64_t)&v15, (uint64_t)&v12);
  uint64_t result = 0;
  if ((v10 & 1) != 0 && ((v5 ^ v9) & 1) == 0)
  {
    type metadata accessor for (HoverEffectGroupInfo.Behavior, HoverEffectGroupInfo.Behavior)();
    if (v4)
    {
      if (v4 == 1) {
        return (v8 - 1) < 2;
      }
      else {
        return (v8 & 7) == 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void HoverEffectGroupInfo.hash(into:)()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 25);
  Swift::UInt v3 = *(unsigned __int8 *)(v0 + 26);
  switch(*(unsigned char *)(v0 + 24))
  {
    case 1:
      Swift::UInt v5 = *(void *)(v0 + 16);
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v6 = v5;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      goto LABEL_9;
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      goto LABEL_9;
    case 4:
      Swift::UInt v4 = 4;
      goto LABEL_7;
    default:
      Swift::UInt v4 = 0;
LABEL_7:
      Hasher._combine(_:)(v4);
      Swift::UInt v6 = v1;
LABEL_8:
      Hasher._combine(_:)(v6);
LABEL_9:
      Hasher._combine(_:)(v2);
      Hasher._combine(_:)(v3);
      return;
  }
}

Swift::Int HoverEffectGroupInfo.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  Swift::UInt v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v4 = *(unsigned __int8 *)(v0 + 25);
  Swift::UInt v5 = *(unsigned __int8 *)(v0 + 26);
  Hasher.init(_seed:)();
  switch(v3)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      Swift::UInt v7 = v2;
      goto LABEL_8;
    case 2:
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      goto LABEL_9;
    case 3:
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v1);
      goto LABEL_9;
    case 4:
      Swift::UInt v6 = 4;
      goto LABEL_7;
    default:
      Swift::UInt v6 = 0;
LABEL_7:
      Hasher._combine(_:)(v6);
      Swift::UInt v7 = v1;
LABEL_8:
      Hasher._combine(_:)(v7);
LABEL_9:
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      return Hasher._finalize()();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HoverEffectGroupInfo()
{
  return Hasher._finalize()();
}

uint64_t HoverEffectTransitionInfo.init(animation:to:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *a2;
  *(void *)(a3 + 8) = result;
  return result;
}

uint64_t static HoverEffectTransitionInfo.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return (*(uint64_t (**)(void))(**((void **)a1 + 1) + 104))(*((void *)a2 + 1)) & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectTransitionInfo(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return (*(uint64_t (**)(void))(**((void **)a1 + 1) + 104))(*((void *)a2 + 1)) & 1;
  }
  else {
    return 0;
  }
}

SwiftUI::HoverEffectDelayInfo __swiftcall HoverEffectDelayInfo.init(duration:phase:)(Swift::Double duration, SwiftUI::HoverEffectPhaseInfo phase)
{
  char v3 = *(unsigned char *)phase;
  *(Swift::Double *)uint64_t v2 = duration;
  *(unsigned char *)(v2 + 8) = v3;
  result.duration = duration;
  result.phase = phase;
  return result;
}

uint64_t static HoverEffectDelayInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t HoverEffectAccessibilityOptions.accessibilityID.getter()
{
  return *(void *)v0;
}

uint64_t HoverEffectAccessibilityOptions.accessibilityID.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*HoverEffectAccessibilityOptions.accessibilityID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void HoverEffectAccessibilityOptions.attachmentBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *HoverEffectAccessibilityOptions.attachmentBehavior.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*HoverEffectAccessibilityOptions.attachmentBehavior.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::HoverEffectAccessibilityOptions __swiftcall HoverEffectAccessibilityOptions.init(accessibilityID:attachmentBehavior:)(SwiftUI::Namespace::ID accessibilityID, SwiftUI::HoverEffectAccessibilityOptions::AttachmentBehavior attachmentBehavior)
{
  char v3 = *(unsigned char *)attachmentBehavior;
  *(SwiftUI::Namespace::ID *)uint64_t v2 = accessibilityID;
  *(unsigned char *)(v2 + 8) = v3;
  result.accessibilityID = accessibilityID;
  result.attachmentBehavior = attachmentBehavior;
  return result;
}

uint64_t static HoverEffectAccessibilityOptions.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectAccessibilityOptions(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t specialized static HoverEffectGroupInfo.Identifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 24);
  switch(v5)
  {
    case 1u:
      if (v9 != 1) {
        goto LABEL_22;
      }
      uint64_t v16 = *(void *)a1;
      if (v2 == v6 && v3 == v7)
      {
        outlined copy of HoverEffectGroupInfo.Identifier(v16, v3, v8, 1u);
        outlined copy of HoverEffectGroupInfo.Identifier(v2, v3, v4, 1u);
        outlined consume of HoverEffectGroupInfo.Identifier(v2, v3, v4, 1u);
        outlined consume of HoverEffectGroupInfo.Identifier(v2, v3, v8, 1u);
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined copy of HoverEffectGroupInfo.Identifier(v6, v7, v8, 1u);
        outlined copy of HoverEffectGroupInfo.Identifier(v2, v3, v4, 1u);
        outlined consume of HoverEffectGroupInfo.Identifier(v2, v3, v4, 1u);
        outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, 1u);
        char v15 = 0;
        if ((v18 & 1) == 0) {
          return v15 & 1;
        }
      }
      char v15 = v4 == v8;
      return v15 & 1;
    case 2u:
      if (v9 != 2)
      {
LABEL_22:
        swift_bridgeObjectRetain();
        goto LABEL_23;
      }
      if (v2 == v6 && v3 == v7) {
        char v15 = 1;
      }
      else {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      outlined copy of HoverEffectGroupInfo.Identifier(v6, v7, v8, 2u);
      outlined copy of HoverEffectGroupInfo.Identifier(v2, v3, v4, 2u);
      outlined consume of HoverEffectGroupInfo.Identifier(v2, v3, v4, 2u);
      outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, 2u);
      return v15 & 1;
    case 3u:
      if (v9 != 3) {
        goto LABEL_23;
      }
      outlined consume of HoverEffectGroupInfo.Identifier(*(void *)a1, v3, v4, 3u);
      outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, 3u);
      char v15 = v2 == v6;
      return v15 & 1;
    case 4u:
      if (v9 != 4) {
        goto LABEL_23;
      }
      outlined consume of HoverEffectGroupInfo.Identifier(*(void *)a1, v3, v4, 4u);
      uint64_t v10 = v6;
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      unsigned __int8 v13 = 4;
      goto LABEL_14;
    default:
      if (*(unsigned char *)(a2 + 24))
      {
LABEL_23:
        outlined copy of HoverEffectGroupInfo.Identifier(v6, v7, v8, v9);
        outlined consume of HoverEffectGroupInfo.Identifier(v2, v3, v4, v5);
        outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, v9);
        char v15 = 0;
      }
      else
      {
        outlined consume of HoverEffectGroupInfo.Identifier(*(void *)a1, v3, v4, 0);
        uint64_t v10 = v6;
        uint64_t v11 = v7;
        uint64_t v12 = v8;
        unsigned __int8 v13 = 0;
LABEL_14:
        outlined consume of HoverEffectGroupInfo.Identifier(v10, v11, v12, v13);
        char v15 = v2 == v6;
      }
      return v15 & 1;
  }
}

void type metadata accessor for (HoverEffectGroupInfo.Behavior, HoverEffectGroupInfo.Behavior)()
{
  if (!lazy cache variable for type metadata for (HoverEffectGroupInfo.Behavior, HoverEffectGroupInfo.Behavior))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (HoverEffectGroupInfo.Behavior, HoverEffectGroupInfo.Behavior));
    }
  }
}

uint64_t specialized static HoverEffectGroupInfo.== infix(_:_:)(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  char v3 = *((unsigned char *)a1 + 24);
  int v4 = *((unsigned __int8 *)a1 + 25);
  int v5 = *((unsigned __int8 *)a1 + 26);
  uint64_t v6 = *((void *)a2 + 2);
  char v7 = *((unsigned char *)a2 + 24);
  int v8 = *((unsigned __int8 *)a2 + 25);
  int v9 = *((unsigned __int8 *)a2 + 26);
  long long v14 = *a1;
  uint64_t v15 = v2;
  char v16 = v3;
  long long v11 = *a2;
  uint64_t v12 = v6;
  char v13 = v7;
  return specialized static HoverEffectGroupInfo.Identifier.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v11) & (v4 == v8) & (v5 ^ v9 ^ 1);
}

unint64_t lazy protocol witness table accessor for type HoverEffectPhaseInfo and conformance HoverEffectPhaseInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectPhaseInfo and conformance HoverEffectPhaseInfo;
  if (!lazy protocol witness table cache variable for type HoverEffectPhaseInfo and conformance HoverEffectPhaseInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectPhaseInfo and conformance HoverEffectPhaseInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroupInfo.Identifier and conformance HoverEffectGroupInfo.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectGroupInfo.Identifier and conformance HoverEffectGroupInfo.Identifier;
  if (!lazy protocol witness table cache variable for type HoverEffectGroupInfo.Identifier and conformance HoverEffectGroupInfo.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroupInfo.Identifier and conformance HoverEffectGroupInfo.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroupInfo.Behavior and conformance HoverEffectGroupInfo.Behavior()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectGroupInfo.Behavior and conformance HoverEffectGroupInfo.Behavior;
  if (!lazy protocol witness table cache variable for type HoverEffectGroupInfo.Behavior and conformance HoverEffectGroupInfo.Behavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroupInfo.Behavior and conformance HoverEffectGroupInfo.Behavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroupInfo.Scope and conformance HoverEffectGroupInfo.Scope()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectGroupInfo.Scope and conformance HoverEffectGroupInfo.Scope;
  if (!lazy protocol witness table cache variable for type HoverEffectGroupInfo.Scope and conformance HoverEffectGroupInfo.Scope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroupInfo.Scope and conformance HoverEffectGroupInfo.Scope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroupInfo and conformance HoverEffectGroupInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectGroupInfo and conformance HoverEffectGroupInfo;
  if (!lazy protocol witness table cache variable for type HoverEffectGroupInfo and conformance HoverEffectGroupInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroupInfo and conformance HoverEffectGroupInfo);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectAccessibilityOptions.AttachmentBehavior and conformance HoverEffectAccessibilityOptions.AttachmentBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectAccessibilityOptions.AttachmentBehavior and conformance HoverEffectAccessibilityOptions.AttachmentBehavior;
  if (!lazy protocol witness table cache variable for type HoverEffectAccessibilityOptions.AttachmentBehavior and conformance HoverEffectAccessibilityOptions.AttachmentBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectAccessibilityOptions.AttachmentBehavior and conformance HoverEffectAccessibilityOptions.AttachmentBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectPhaseInfo()
{
  return &type metadata for HoverEffectPhaseInfo;
}

uint64_t outlined copy of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 - 1 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HoverEffectGroupInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroupInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of HoverEffectGroupInfo.Identifier(v8, v9, v10, v11);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroupInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of HoverEffectGroupInfo.Identifier(v6, v7, v8, v9);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroupInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 26);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroupInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 26) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroupInfo()
{
  return &type metadata for HoverEffectGroupInfo;
}

uint64_t destroy for HoverEffectGroupInfo.Identifier(uint64_t a1)
{
  return outlined consume of HoverEffectGroupInfo.Identifier(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of HoverEffectGroupInfo.Identifier(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of HoverEffectGroupInfo.Identifier(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HoverEffectGroupInfo.Identifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of HoverEffectGroupInfo.Identifier(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectGroupInfo.Identifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectGroupInfo.Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for HoverEffectGroupInfo.Identifier(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroupInfo.Identifier()
{
  return &type metadata for HoverEffectGroupInfo.Identifier;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectGroupInfo.Behavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460F84F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroupInfo.Behavior()
{
  return &type metadata for HoverEffectGroupInfo.Behavior;
}

ValueMetadata *type metadata accessor for HoverEffectGroupInfo.Scope()
{
  return &type metadata for HoverEffectGroupInfo.Scope;
}

ValueMetadata *type metadata accessor for HoverEffectTransitionInfo()
{
  return &type metadata for HoverEffectTransitionInfo;
}

ValueMetadata *type metadata accessor for HoverEffectDelayInfo()
{
  return &type metadata for HoverEffectDelayInfo;
}

uint64_t getEnumTagSinglePayload for HoverEffectDelayInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for HoverEffectAccessibilityOptions()
{
  return &type metadata for HoverEffectAccessibilityOptions;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectPhaseInfo(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460F8688);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectAccessibilityOptions.AttachmentBehavior()
{
  return &type metadata for HoverEffectAccessibilityOptions.AttachmentBehavior;
}

uint64_t static AnyTransition.blur(radius:)(double a1)
{
  type metadata accessor for TransitionBox<BlurAndFadeTransition>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a1;
  return result;
}

void type metadata accessor for TransitionBox<BlurAndFadeTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<BlurAndFadeTransition>)
  {
    lazy protocol witness table accessor for type BlurAndFadeTransition and conformance BlurAndFadeTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<BlurAndFadeTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BlurAndFadeTransition and conformance BlurAndFadeTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type BlurAndFadeTransition and conformance BlurAndFadeTransition;
  if (!lazy protocol witness table cache variable for type BlurAndFadeTransition and conformance BlurAndFadeTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlurAndFadeTransition and conformance BlurAndFadeTransition);
  }
  return result;
}

uint64_t BlurAndFadeTransition._makeContentTransition(transition:)(uint64_t a1, double a2)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI17ContentTransitionV6EffectVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2461BDD50;
    float v6 = a2;
    *(_DWORD *)(v5 + 32) = 4;
    *(float *)(v5 + 36) = v6;
    *(unsigned char *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 44) = 0;
    *(unsigned char *)(v5 + 48) = 2;
    *(void *)(v5 + 52) = 0x3F80000000000000;
    *(_OWORD *)(v5 + 60) = xmmword_246212680;
    *(unsigned char *)(v5 + 76) = 2;
    *(_DWORD *)(v5 + 80) = 0;
    *(unsigned char *)(v5 + 84) = 2;
    *(void *)(v5 + 88) = 0x3F80000000000000;
    *(void *)(v5 + 96) = 3;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void protocol witness for Transition.body(content:phase:) in conformance BlurAndFadeTransition(char a1@<W1>, uint64_t a2@<X8>)
{
  double v3 = *v2;
  if (a1 == 1) {
    double v3 = 0.0;
  }
  *(double *)a2 = v3;
  if (a1 == 1) {
    double v4 = 1.0;
  }
  else {
    double v4 = 0.0;
  }
  *(unsigned char *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = v4;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance BlurAndFadeTransition(uint64_t a1)
{
  return BlurAndFadeTransition._makeContentTransition(transition:)(a1, *v1);
}

void static BlurReplaceTransition.Configuration.downUp.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

SwiftUI::BlurReplaceTransition __swiftcall BlurReplaceTransition.init(configuration:)(SwiftUI::BlurReplaceTransition configuration)
{
  *uint64_t v1 = *(unsigned char *)configuration.configuration.storage;
  return configuration;
}

void static BlurReplaceTransition.Configuration.upUp.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static BlurReplaceTransition.Configuration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void BlurReplaceTransition.configuration.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *BlurReplaceTransition.configuration.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*BlurReplaceTransition.configuration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 BlurReplaceTransition.body(content:phase:)@<Q0>(char a1@<W1>, uint64_t a2@<X8>)
{
  if (!a1) {
    goto LABEL_5;
  }
  double v3 = 1.0;
  if (a1 != 1)
  {
    if (*v2 == 1)
    {
      double v3 = 1.1;
      goto LABEL_6;
    }
LABEL_5:
    double v3 = 0.9;
  }
LABEL_6:
  int32x2_t v4 = vdup_n_s32(a1 == 1);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)xmmword_2461BCA80, (int8x16_t)xmmword_246212690);
  *(unsigned char *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v3;
  *(double *)(a2 + 32) = v3;
  __asm { FMOV            V0.2D, #0.5 }
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t BlurReplaceTransition._makeContentTransition(transition:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    int v4 = *v1;
    _ss23_ContiguousArrayStorageCy7SwiftUI17ContentTransitionV6EffectVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2461BE2B0;
    *(void *)(v5 + 32) = 1;
    *(unsigned char *)(v5 + 40) = 2;
    *(_DWORD *)(v5 + 44) = 0;
    *(unsigned char *)(v5 + 48) = 2;
    *(void *)(v5 + 52) = 0x3F2B851E3EA8F5C3;
    *(_OWORD *)(v5 + 60) = xmmword_2462126A0;
    *(unsigned char *)(v5 + 76) = 0;
    *(_DWORD *)(v5 + 80) = 0;
    *(unsigned char *)(v5 + 84) = 2;
    *(void *)(v5 + 88) = 0x3F2B851E3EA8F5C3;
    *(_OWORD *)(v5 + 96) = xmmword_2462126B0;
    *(unsigned char *)(v5 + 112) = 0;
    *(_DWORD *)(v5 + 116) = 0;
    *(unsigned char *)(v5 + 120) = 2;
    *(void *)(v5 + 124) = 0x3F2B851E3EA8F5C3;
    *(_DWORD *)(v5 + 132) = 3;
    *(_DWORD *)(v5 + 136) = v4;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

__n128 protocol witness for Transition.body(content:phase:) in conformance BlurReplaceTransition@<Q0>(char a1@<W1>, uint64_t a2@<X8>)
{
  if (!a1) {
    goto LABEL_5;
  }
  double v3 = 1.0;
  if (a1 != 1)
  {
    if (*v2 == 1)
    {
      double v3 = 1.1;
      goto LABEL_6;
    }
LABEL_5:
    double v3 = 0.9;
  }
LABEL_6:
  int32x2_t v4 = vdup_n_s32(a1 == 1);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)xmmword_2461BCA80, (int8x16_t)xmmword_246212690);
  *(unsigned char *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v3;
  *(double *)(a2 + 32) = v3;
  __asm { FMOV            V0.2D, #0.5 }
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in BlurReplaceTransition()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BlurReplaceTransition()
{
  return &type metadata for BlurReplaceTransition;
}

ValueMetadata *type metadata accessor for BlurReplaceTransition.Configuration()
{
  return &type metadata for BlurReplaceTransition.Configuration;
}

uint64_t sub_2460F8BBC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>(255, &lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, &lazy cache variable for type metadata for PlaceholderContentView<BlurReplaceTransition>, (uint64_t)&type metadata for BlurReplaceTransition);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI17ContentTransitionV6EffectVGMaTm_0(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for PlaceholderContentView);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>(255, &lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, &lazy cache variable for type metadata for PlaceholderContentView<BlurReplaceTransition>, (uint64_t)&type metadata for BlurReplaceTransition);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BlurReplaceTransition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2460F8F80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurReplaceTransition.Configuration.Storage()
{
  return &type metadata for BlurReplaceTransition.Configuration.Storage;
}

void *type metadata accessor for BlurAndFadeTransition()
{
  return &unk_26FA63758;
}

unint64_t lazy protocol witness table accessor for type BlurReplaceTransition.Configuration.Storage and conformance BlurReplaceTransition.Configuration.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type BlurReplaceTransition.Configuration.Storage and conformance BlurReplaceTransition.Configuration.Storage;
  if (!lazy protocol witness table cache variable for type BlurReplaceTransition.Configuration.Storage and conformance BlurReplaceTransition.Configuration.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlurReplaceTransition.Configuration.Storage and conformance BlurReplaceTransition.Configuration.Storage);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in BlurAndFadeTransition()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_2460F903C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<BlurReplaceTransition>, OpacityRendererEffect>, _BlurEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, OpacityRendererEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, OpacityRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, OpacityRendererEffect>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>(255, &lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, &lazy cache variable for type metadata for PlaceholderContentView<BlurAndFadeTransition>, (uint64_t)&unk_26FA63758);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, OpacityRendererEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>(255, &lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect>, &lazy cache variable for type metadata for PlaceholderContentView<BlurAndFadeTransition>, (uint64_t)&unk_26FA63758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<BlurAndFadeTransition>, _BlurEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t Text.resolvesToEmpty(in:with:)(long long *a1, uint64_t *a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a5)
  {
    uint64_t v9 = *a2;
    long long v13 = *a1;
    uint64_t v12 = v9;
    unsigned __int8 v10 = *(uint64_t (**)(long long *, uint64_t *))(*(void *)a3 + 88);
    swift_retain();
    char v8 = v10(&v13, &v12);
    outlined consume of Text.Storage(a3, a4, 1);
  }
  else
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
    }
    char v8 = v7 == 0;
  }
  return v8 & 1;
}

uint64_t Text.resolveStringCheckingForResolvables(in:with:idiom:)(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  long long v14 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  char v17 = &v28[-v16];
  if (a6)
  {
    uint64_t v19 = *a3;
    uint64_t v18 = a3[1];
    uint64_t v20 = *a2;
    CGAffineTransform v23 = a1;
    uint64_t v21 = *a1;
    uint64_t v22 = v23[1];
    Text.Style.init()((uint64_t)&v28[-v16]);
    CGRect v24 = &v17[v14[5]];
    uint64_t v25 = a7;
    CGRect v26 = (uint64_t *)&v17[v14[6]];
    *CGRect v26 = 0;
    v26[1] = 0xE000000000000000;
    v17[v14[7]] = 0;
    void *v24 = v19;
    v24[1] = v18;
    specialized Text.resolve<A>(into:in:with:)((uint64_t)v17, v21, v22, v20, a4, a5, 1, v25);
    a4 = *v26;
    swift_bridgeObjectRetain();
    _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v17, type metadata accessor for Text.ResolvedString);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a4;
}

Swift::Bool __swiftcall Text.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)options.rawValue;
  if ((v3 & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v1;
  uint64_t v16 = *(void *)options.rawValue;
  uint64_t v9 = *(uint64_t (**)(uint64_t *))(*(void *)v1 + 104);
  swift_retain();
  char v10 = v9(&v16);
  Swift::Bool v11 = 1;
  outlined consume of Text.Storage(v8, v7, 1);
  if ((v10 & 1) == 0)
  {
LABEL_3:
    uint64_t v12 = *(void *)(v5 + 16);
    if (v12)
    {
      for (int i = (unsigned char *)(v5 + 40); (*i & 0xE0) == 0xC0; i += 16)
      {
        uint64_t v14 = *((void *)i - 1);
        uint64_t v16 = v6;
        if ((*(uint64_t (**)(uint64_t *))(*(void *)v14 + 80))(&v16)) {
          break;
        }
        if (!--v12) {
          return 0;
        }
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

uint64_t AnyTextStorage.deinit()
{
  return v0;
}

BOOL AnyTextStorage.resolvesToEmpty(in:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = (int *)type metadata accessor for Text.ResolvedString(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = *a2;
  Text.Style.init()((uint64_t)v7);
  Swift::Bool v11 = &v7[v5[5]];
  uint64_t v12 = &v7[v5[6]];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0xE000000000000000;
  v7[v5[7]] = 0;
  _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
  *(void *)Swift::Bool v11 = v13;
  *((void *)v11 + 1) = &protocol witness table for InterfaceIdiomBox<A>;
  v20[0] = v9;
  v20[1] = v8;
  uint64_t v19 = v10;
  (*(void (**)(char *, void *, uint64_t *, int *, _UNKNOWN **))(*(void *)v2 + 80))(v7, v20, &v19, v5, &protocol witness table for Text.ResolvedString);
  unint64_t v14 = *((void *)v12 + 1);
  uint64_t v15 = *(void *)v12 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0) {
    uint64_t v15 = HIBYTE(v14) & 0xF;
  }
  BOOL v16 = v15 == 0;
  _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v7, type metadata accessor for Text.ResolvedString);
  return v16;
}

Swift::Bool __swiftcall Text.allowsTypesettingLanguage()()
{
  if ((v2 & 1) == 0) {
    return 1;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 112);
  uint64_t v7 = swift_retain();
  LOBYTE(v6) = v6(v7);
  outlined consume of Text.Storage(v5, v4, 1);
  return v6 & 1;
}

uint64_t Text.ResolveOptions.init(for:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
    swift_release_n();
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v4 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_release_n();
    uint64_t v7 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v7);
  }
  uint64_t result = swift_release_n();
  uint64_t v9 = v4 & 1;
  if (v5) {
    uint64_t v9 = v4 & 1 | 0x10;
  }
  *a2 = v9;
  return result;
}

uint64_t AnyTextModifier.deinit()
{
  return v0;
}

uint64_t Text.modified(with:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  outlined copy of Text.Storage(a3, a4, a5 & 1);
  swift_bridgeObjectRetain();
  outlined copy of Text.Modifier(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
  }
  unint64_t v11 = a6[2];
  unint64_t v10 = a6[3];
  if (v11 >= v10 >> 1) {
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, a6);
  }
  a6[2] = v11 + 1;
  uint64_t v12 = &a6[2 * v11];
  void v12[4] = a1;
  *((unsigned char *)v12 + 40) = a2;
  return a3;
}

void AnyTextModifier.modify(style:environment:)()
{
}

void AnyTextModifier.isEqual(to:)()
{
}

uint64_t specialized Text.Style.removeFontModifier<A>(ofType:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v9 = *(void *)(v3 + 8);
  uint64_t v7 = (uint64_t *)(v3 + 8);
  uint64_t v8 = v9;
  if (v9 >> 62) {
    goto LABEL_58;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v10)
  {
    uint64_t v11 = 0;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        MEMORY[0x24C523D60](v11, v8);
      }
      else {
        swift_retain();
      }
      type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, (unint64_t *)a2, (void (*)(void))a3);
      if (swift_dynamicCastClass())
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
        }
        else if (!((unint64_t)*v7 >> 62))
        {
          uint64_t v8 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v15 == v8) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15 == v8) {
          goto LABEL_12;
        }
LABEL_18:
        uint64_t v16 = v11 + 5;
        while (2)
        {
          a3 = v16 - 4;
          uint64_t v17 = *v7;
          if ((*v7 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x24C523D60](v16 - 4);
          }
          else
          {
            if ((a3 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (a3 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            uint64_t v8 = *(void *)(v17 + 8 * v16);
            swift_retain();
          }
          a2 = swift_dynamicCastClass();
          swift_release();
          if (a2) {
            goto LABEL_44;
          }
          if (a3 == v11) {
            goto LABEL_43;
          }
          uint64_t v18 = *v7;
          if ((*v7 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x24C523D60](v11, *v7);
            uint64_t v18 = *v7;
            if ((*v7 & 0xC000000000000001) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v11 < 0) {
              goto LABEL_62;
            }
            if ((unint64_t)v11 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_63;
            }
            uint64_t v8 = *(void *)(v18 + 8 * v11 + 32);
            swift_retain();
            if ((v18 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_64;
              }
              if (a3 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_65;
              }
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              swift_retain();
LABEL_32:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v7 = v18;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v18 < 0 || (v18 & 0x4000000000000000) != 0)
              {
                uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
                *uint64_t v7 = v18;
              }
              *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v11 + 0x20) = v19;
              swift_release();
              specialized Array._endMutation()();
              a2 = *v7;
              int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v7 = a2;
              if (!v21 || a2 < 0 || (a2 & 0x4000000000000000) != 0)
              {
                a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
                *uint64_t v7 = a2;
              }
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_66;
              }
              if (a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_67;
              }
              *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v16) = v8;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v11++, 1)) {
                goto LABEL_57;
              }
LABEL_44:
              uint64_t v23 = v16 - 3;
              if (__OFADD__(a3, 1)) {
                goto LABEL_56;
              }
              if ((unint64_t)*v7 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v8 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v16;
              if (v23 == v8) {
                goto LABEL_12;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v19 = MEMORY[0x24C523D60](v16 - 4, v18);
        uint64_t v18 = *v7;
        goto LABEL_32;
      }
      swift_release();
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      ++v11;
      if (v12 == v10) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v7 >> 62) {
    goto LABEL_68;
  }
  uint64_t v11 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!((unint64_t)*v7 >> 62))
  {
    uint64_t v13 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v11) {
      goto LABEL_14;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 < v11) {
    goto LABEL_61;
  }
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v11, v13);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v24, a1);
}

{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v21;
  uint64_t v23;
  uint64_t v24;

  unint64_t v9 = *(void *)(v3 + 8);
  uint64_t v7 = (uint64_t *)(v3 + 8);
  uint64_t v8 = v9;
  if (v9 >> 62) {
    goto LABEL_58;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v10)
  {
    uint64_t v11 = 0;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        MEMORY[0x24C523D60](v11, v8);
      }
      else {
        swift_retain();
      }
      _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, (unint64_t *)a2, a1, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
      if (swift_dynamicCastClass())
      {
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
        }
        else if (!((unint64_t)*v7 >> 62))
        {
          uint64_t v8 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v15 == v8) {
            goto LABEL_12;
          }
          goto LABEL_18;
        }
        swift_bridgeObjectRetain();
        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15 == v8) {
          goto LABEL_12;
        }
LABEL_18:
        uint64_t v16 = v11 + 5;
        while (2)
        {
          a3 = v16 - 4;
          uint64_t v17 = *v7;
          if ((*v7 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x24C523D60](v16 - 4);
          }
          else
          {
            if ((a3 & 0x8000000000000000) != 0) {
              goto LABEL_54;
            }
            if (a3 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_55;
            }
            uint64_t v8 = *(void *)(v17 + 8 * v16);
            swift_retain();
          }
          a2 = swift_dynamicCastClass();
          swift_release();
          if (a2) {
            goto LABEL_44;
          }
          if (a3 == v11) {
            goto LABEL_43;
          }
          uint64_t v18 = *v7;
          if ((*v7 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x24C523D60](v11, *v7);
            uint64_t v18 = *v7;
            if ((*v7 & 0xC000000000000001) == 0) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v11 < 0) {
              goto LABEL_62;
            }
            if ((unint64_t)v11 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_63;
            }
            uint64_t v8 = *(void *)(v18 + 8 * v11 + 32);
            swift_retain();
            if ((v18 & 0xC000000000000001) == 0)
            {
LABEL_29:
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_64;
              }
              if (a3 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_65;
              }
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              swift_retain();
LABEL_32:
              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v7 = v18;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v18 < 0 || (v18 & 0x4000000000000000) != 0)
              {
                uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
                *uint64_t v7 = v18;
              }
              *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v11 + 0x20) = v19;
              swift_release();
              specialized Array._endMutation()();
              a2 = *v7;
              int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
              *uint64_t v7 = a2;
              if (!v21 || a2 < 0 || (a2 & 0x4000000000000000) != 0)
              {
                a2 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
                *uint64_t v7 = a2;
              }
              if ((a3 & 0x8000000000000000) != 0) {
                goto LABEL_66;
              }
              if (a3 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_67;
              }
              *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * v16) = v8;
              swift_release();
              specialized Array._endMutation()();
LABEL_43:
              if (__OFADD__(v11++, 1)) {
                goto LABEL_57;
              }
LABEL_44:
              uint64_t v23 = v16 - 3;
              if (__OFADD__(a3, 1)) {
                goto LABEL_56;
              }
              if ((unint64_t)*v7 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v8 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              ++v16;
              if (v23 == v8) {
                goto LABEL_12;
              }
              continue;
            }
          }
          break;
        }
        uint64_t v19 = MEMORY[0x24C523D60](v16 - 4, v18);
        uint64_t v18 = *v7;
        goto LABEL_32;
      }
      swift_release();
      uint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      ++v11;
      if (v12 == v10) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if ((unint64_t)*v7 >> 62) {
    goto LABEL_68;
  }
  uint64_t v11 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
  while (!((unint64_t)*v7 >> 62))
  {
    uint64_t v13 = *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v11) {
      goto LABEL_14;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 < v11) {
    goto LABEL_61;
  }
LABEL_14:
  specialized Array.replaceSubrange<A>(_:with:)(v11, v13);
  type metadata accessor for Text.Style(0);
  return specialized Set._Variant.insert(_:)(&v24, a1);
}

uint64_t specialized Text.Style.removeFontModifier<A>(ofType:)()
{
  unint64_t v3 = *(void *)(v0 + 8);
  uint64_t v1 = (uint64_t *)(v0 + 8);
  unint64_t v2 = v3;
  if (v3 >> 62) {
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    if ((unint64_t)*v1 >> 62) {
      goto LABEL_31;
    }
    uint64_t v5 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_20:
      if ((unint64_t)*v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11 >= v5)
        {
LABEL_22:
          specialized Array.replaceSubrange<A>(_:with:)(v5, v11);
          type metadata accessor for Text.Style(0);
          return specialized Set._Variant.insert(_:)(&v25, (uint64_t)&type metadata for Font.BoldModifier);
        }
      }
      else
      {
        uint64_t v11 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v5) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
LABEL_3:
  uint64_t v5 = 0;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](v5, v2);
    }
    else {
      swift_retain();
    }
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    if (swift_dynamicCastClass())
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      uint64_t v10 = v5 + 1;
      if (!__OFADD__(v5, 1)) {
        goto LABEL_18;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_15;
      }
      goto LABEL_3;
    }
    type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    uint64_t v6 = swift_dynamicCastClass();
    if (!v6)
    {
      swift_release();
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_26;
      }
      goto LABEL_14;
    }
    double v7 = *(double *)(v6 + 16);
    swift_release();
    if (v7 >= 0.3) {
      break;
    }
    uint64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_26;
    }
LABEL_14:
    ++v5;
    if (v8 == v4) {
      goto LABEL_15;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v10 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_25;
  }
LABEL_18:
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 == v12) {
      goto LABEL_20;
    }
  }
  else if (v10 == *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_20;
  }
  uint64_t v13 = v5 + 5;
  while (2)
  {
    unint64_t v14 = v13 - 4;
    if ((*v1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C523D60](v13 - 4);
      goto LABEL_38;
    }
    if ((v14 & 0x8000000000000000) == 0)
    {
      if (v14 >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_74;
      }
      swift_retain();
LABEL_38:
      if (swift_dynamicCastClass())
      {
        uint64_t result = swift_release();
LABEL_64:
        uint64_t v23 = v13 - 3;
        if (__OFADD__(v14, 1)) {
          goto LABEL_75;
        }
        if ((unint64_t)*v1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v24 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v13;
        if (v23 == v24) {
          goto LABEL_20;
        }
        continue;
      }
      type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
      uint64_t v15 = swift_dynamicCastClass();
      if (v15)
      {
        double v16 = *(double *)(v15 + 16);
        uint64_t result = swift_release();
        if (v16 >= 0.3) {
          goto LABEL_64;
        }
        if (v14 == v5)
        {
LABEL_63:
          if (__OFADD__(v5++, 1)) {
            goto LABEL_76;
          }
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t result = swift_release();
        if (v14 == v5) {
          goto LABEL_63;
        }
      }
      uint64_t v17 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
      {
        uint64_t result = MEMORY[0x24C523D60](v5, *v1);
        uint64_t v18 = result;
        uint64_t v17 = *v1;
        if ((*v1 & 0xC000000000000001) == 0) {
          goto LABEL_49;
        }
      }
      else
      {
        if (v5 < 0) {
          goto LABEL_77;
        }
        if ((unint64_t)v5 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_78;
        }
        uint64_t v18 = *(void *)(v17 + 8 * v5 + 32);
        uint64_t result = swift_retain();
        if ((v17 & 0xC000000000000001) == 0)
        {
LABEL_49:
          if ((v14 & 0x8000000000000000) != 0) {
            goto LABEL_79;
          }
          if (v14 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_80;
          }
          uint64_t v19 = *(void *)(v17 + 8 * v13);
          swift_retain();
          goto LABEL_52;
        }
      }
      uint64_t v19 = MEMORY[0x24C523D60](v13 - 4, v17);
      uint64_t v17 = *v1;
LABEL_52:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v1 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        *uint64_t v1 = v17;
      }
      *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v19;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v21 = *v1;
      uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v1 = v21;
      if (!result || v21 < 0 || (v21 & 0x4000000000000000) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        uint64_t v21 = result;
        *uint64_t v1 = result;
      }
      if ((v14 & 0x8000000000000000) != 0) {
        goto LABEL_81;
      }
      if (v14 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_82;
      }
      *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v18;
      swift_release();
      uint64_t result = specialized Array._endMutation()();
      goto LABEL_63;
    }
    break;
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

id static NSBundle.swiftUICore.getter()
{
  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);

  return v1;
}

Swift::Bool __swiftcall AnyTextStorage.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Text.Storage.resolvesToEmpty(in:with:)(long long *a1, uint64_t *a2, uint64_t a3, unint64_t a4, char a5)
{
  if (a5)
  {
    uint64_t v9 = *a2;
    long long v13 = *a1;
    uint64_t v12 = v9;
    uint64_t v10 = *(uint64_t (**)(long long *, uint64_t *))(*(void *)a3 + 88);
    swift_retain();
    char v8 = v10(&v13, &v12);
    outlined consume of Text.Storage(a3, a4, 1);
  }
  else
  {
    uint64_t v7 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v7 = a3 & 0xFFFFFFFFFFFFLL;
    }
    char v8 = v7 == 0;
  }
  return v8 & 1;
}

uint64_t static Text.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return specialized static Text.Storage.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

Swift::Bool __swiftcall Text.Storage.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v1;
    uint64_t v9 = *(void *)options.rawValue;
    uint64_t v7 = *(uint64_t (**)(uint64_t *))(*(void *)v1 + 104);
    swift_retain();
    char v4 = v7(&v9);
    outlined consume of Text.Storage(v6, v5, 1);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

Swift::Bool __swiftcall Text.Storage.allowsTypesettingLanguage()()
{
  if ((v2 & 1) == 0) {
    return 1;
  }
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 112);
  uint64_t v7 = swift_retain();
  LOBYTE(v6) = v6(v7);
  outlined consume of Text.Storage(v5, v4, 1);
  return v6 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Storage(uint64_t a1, uint64_t a2)
{
  return specialized static Text.Storage.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Modifier(uint64_t a1, uint64_t a2)
{
  return static Text.Modifier.== infix(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t Text.ResolveOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::Text::ResolveOptions __swiftcall Text.ResolveOptions.init(rawValue:)(SwiftUI::Text::ResolveOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static Text.ResolveOptions.includeAccessibility.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static Text.ResolveOptions.foregroundKeyColor.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Text.ResolveOptions.writeAuxiliaryMetadata.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static Text.ResolveOptions.includeTransitions.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static Text.ResolveOptions.disableLinkColor.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static Text.ResolveOptions.allowsKeyColors.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static Text.ResolveOptions.allowsTextSuffix.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static Text.ResolveOptions.includeSupportForRepeatedResolution.getter(void *a1@<X8>)
{
  *a1 = 128;
}

uint64_t Text.storage.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t Text.storage.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = outlined consume of Text.Storage(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*Text.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.modifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Text.modifiers.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*Text.modifiers.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AnyTextStorage.resolve<A>(into:in:with:)()
{
}

void AnyTextStorage.isEqual(to:)()
{
}

uint64_t AnyTextStorage.debugDescription.getter()
{
  uint64_t v1 = v0;
  char v2 = (int *)type metadata accessor for Text.Resolved(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v30[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  v5._countAndFlagsBits = 60;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  uint64_t v33 = v0;
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 62;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  uint64_t v10 = v31;
  unint64_t v9 = v32;
  Text.Style.init()((uint64_t)v4);
  uint64_t v11 = v2[5];
  *(void *)&v4[v11] = 0;
  v4[v2[6]] = 1;
  uint64_t v12 = &v4[v2[7]];
  long long v13 = &v4[v2[8]];
  *((_WORD *)v13 + 16) = 0;
  *(_OWORD *)long long v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v14 = MEMORY[0x263F8EE78];
  *((void *)v13 + 5) = MEMORY[0x263F8EE78];
  *((void *)v13 + 6) = v14;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((void *)v13 + 11) = 0;
  *((_OWORD *)v13 + 6) = xmmword_24619B530;
  *((void *)v13 + 14) = v14;
  _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
  *((void *)v13 + 15) = 0;
  *((void *)v13 + 16) = 0;
  *(void *)uint64_t v12 = v15;
  *((void *)v12 + 1) = &protocol witness table for InterfaceIdiomBox<A>;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v16 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v17 = static CoreGlue2.shared;
  v16(&v33);

  v30[0] = v33;
  v30[1] = v34;
  uint64_t v29 = 0;
  (*(void (**)(char *, void *, uint64_t *, int *, char **))(*(void *)v1 + 80))(v4, v30, &v29, v2, &protocol witness table for Text.Resolved);
  swift_release();
  swift_release();
  uint64_t v18 = *(void **)&v4[v11];
  if (v18)
  {
    id v19 = objc_msgSend(v18, sel_string);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    uint64_t v33 = 2236474;
    unint64_t v34 = 0xE300000000000000;
    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 34;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    uint64_t v25 = v33;
    CGRect v26 = (void *)v34;
    uint64_t v33 = v10;
    unint64_t v34 = v9;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v33;
  }
  _s7SwiftUI4TextV14ResolvedStringVWOhTm_2((uint64_t)v4, type metadata accessor for Text.Resolved);
  return v10;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyTextStorage()
{
  return AnyTextStorage.debugDescription.getter();
}

uint64_t StrikethroughTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == 1)
  {
    uint64_t result = outlined consume of Text.Style.LineStyle(*(void *)(a1 + 80), *(void *)(a1 + 88));
    *(_OWORD *)(a1 + 80) = xmmword_2461E55C0;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(a1 + 80);
    uint64_t v7 = *(void *)(a1 + 88);
    swift_retain();
    uint64_t result = outlined consume of Text.Style.LineStyle(v6, v7);
    *(void *)(a1 + 80) = v5;
    *(void *)(a1 + 88) = v3;
  }
  return result;
}

uint64_t StrikethroughTextModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
    if (v3 != 1)
    {
      if (v4 == 1)
      {
        outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
LABEL_7:
        outlined copy of Text.LineStyle?(v5, v4);
        outlined consume of Text.LineStyle?(v2, v3);
        outlined consume of Text.LineStyle?(v5, v4);
        return 0;
      }
      if (v2 == v5)
      {
        if (!v3)
        {
          outlined copy of Text.LineStyle?(*(void *)(v1 + 16), 0);
          return !v4;
        }
        if (v4)
        {
          if (v3 == v4)
          {
            outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
            swift_release();
            return 1;
          }
          uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
          outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
          outlined copy of Text.LineStyle?(v2, v3);
          outlined copy of Text.LineStyle?(v2, v4);
          swift_retain();
          char v8 = v7(v4);
          outlined consume of Text.LineStyle?(v2, v4);
          swift_release_n();
          outlined consume of Text.LineStyle?(v2, v3);
          return (v8 & 1) != 0;
        }
      }
      outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
      swift_release();
      return 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
  }
  uint64_t v3 = 1;
  if (v4 != 1) {
    goto LABEL_7;
  }
  return v3;
}

uint64_t UnderlineTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == 1)
  {
    uint64_t result = outlined consume of Text.Style.LineStyle(*(void *)(a1 + 96), *(void *)(a1 + 104));
    *(_OWORD *)(a1 + 96) = xmmword_2461E55C0;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(a1 + 96);
    uint64_t v7 = *(void *)(a1 + 104);
    swift_retain();
    uint64_t result = outlined consume of Text.Style.LineStyle(v6, v7);
    *(void *)(a1 + 96) = v5;
    *(void *)(a1 + 104) = v3;
  }
  return result;
}

uint64_t UnderlineTextModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
    if (v3 != 1)
    {
      if (v4 == 1)
      {
        outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
LABEL_7:
        outlined copy of Text.LineStyle?(v5, v4);
        outlined consume of Text.LineStyle?(v2, v3);
        outlined consume of Text.LineStyle?(v5, v4);
        return 0;
      }
      if (v2 == v5)
      {
        if (!v3)
        {
          outlined copy of Text.LineStyle?(*(void *)(v1 + 16), 0);
          return !v4;
        }
        if (v4)
        {
          if (v3 == v4)
          {
            outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
            swift_release();
            return 1;
          }
          uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
          outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
          outlined copy of Text.LineStyle?(v2, v3);
          outlined copy of Text.LineStyle?(v2, v4);
          swift_retain();
          char v8 = v7(v4);
          swift_release();
          outlined consume of Text.LineStyle?(v2, v4);
          swift_release();
          outlined consume of Text.LineStyle?(v2, v3);
          return (v8 & 1) != 0;
        }
      }
      outlined copy of Text.LineStyle?(*(void *)(v1 + 16), v3);
      swift_release();
      return 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24);
  }
  uint64_t v3 = 1;
  if (v4 != 1) {
    goto LABEL_7;
  }
  return v3;
}

uint64_t UnderlineTextModifier.__ivar_destroyer()
{
  return outlined consume of Text.LineStyle?(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t StrikethroughTextModifier.__deallocating_deinit()
{
  outlined consume of Text.LineStyle?(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t StylisticAlternativeTextModifier.modify(style:environment:)(uint64_t a1)
{
  char v3 = *(unsigned char *)(v1 + 16);
  type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.StylisticAlternativeModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier);
  *(unsigned char *)(swift_allocObject() + 16) = v3;
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t StylisticAlternativeTextModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result) {
    return *(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(v0 + 16);
  }
  return result;
}

uint64_t StylisticAlternativeTextModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t BoldTextModifier.modify(style:environment:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 16) != 1) {
    return specialized Text.Style.removeFontModifier<A>(ofType:)();
  }
  specialized static AnyFontModifier.static<A>(_:)();
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t ItalicTextModifier.modify(style:environment:)(uint64_t a1, uint64_t a2)
{
  return ItalicTextModifier.modify(style:environment:)(a1, a2, (void (*)(void))specialized static AnyFontModifier.static<A>(_:), (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&lazy cache variable for type metadata for AnyStaticFontModifier<Font.ItalicModifier>, (unint64_t)&protocol witness table for Font.ItalicModifier);
}

uint64_t MonospacedTextModifier.modify(style:environment:)(uint64_t a1, uint64_t a2)
{
  return ItalicTextModifier.modify(style:environment:)(a1, a2, (void (*)(void))specialized static AnyFontModifier.static<A>(_:), (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedModifier>, (unint64_t)&protocol witness table for Font.MonospacedModifier);
}

uint64_t ItalicTextModifier.modify(style:environment:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (*(unsigned char *)(v6 + 16) != 1) {
    return specialized Text.Style.removeFontModifier<A>(ofType:)(a4, a5, a6);
  }
  a3();
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

BOOL BoldTextModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  return v1 && *(unsigned __int8 *)(v1 + 16) == *(unsigned __int8 *)(v0 + 16);
}

uint64_t TextDesignModifier.modify(style:environment:)(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 4) {
    return specialized Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&type metadata for Font.DesignModifier, (uint64_t)&lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (unint64_t)lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier);
  *(unsigned char *)(swift_allocObject() + 16) = v3;
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t TextDesignModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(v1 + 16);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v2 == 4)
  {
    if (v3 != 4) {
      return 0;
    }
  }
  else if (v3 == 4 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t SpeechModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 33);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  *(_WORD *)a1 = *(_WORD *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v5;
  return swift_bridgeObjectRetain();
}

__n128 SpeechModifier.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 17);
  *(_WORD *)(v2 + 16) = *(_WORD *)a1;
  *(void *)(v2 + 24) = v3;
  *(unsigned char *)(v2 + 32) = v4;
  *(unsigned char *)(v2 + 33) = v5;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

uint64_t SpeechModifier.init(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 17);
  *(_WORD *)(v1 + 16) = *(_WORD *)a1;
  *(void *)(v1 + 24) = v2;
  *(unsigned char *)(v1 + 32) = v3;
  *(unsigned char *)(v1 + 33) = v4;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  return v1;
}

Swift::Bool __swiftcall SpeechModifier.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  return *(_DWORD *)options.rawValue & 1;
}

uint64_t SpeechModifier.modify(style:environment:)(void *a1)
{
  uint64_t v3 = a1[31];
  if (v3 == 1)
  {
    unsigned int v4 = *(unsigned __int8 *)(v1 + 16);
    unsigned int v5 = *(unsigned __int8 *)(v1 + 17);
    uint64_t v6 = *(void *)(v1 + 24);
    unsigned int v7 = *(unsigned __int8 *)(v1 + 32);
    unsigned int v8 = *(unsigned __int8 *)(v1 + 33);
    uint64_t v10 = *(void *)(v1 + 40);
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v12 = a1[27];
    uint64_t v13 = a1[29];
    uint64_t v14 = a1[30];
    unsigned int v15 = v12;
    if (*(unsigned char *)(v1 + 16) != 2) {
      unsigned int v15 = *(unsigned __int8 *)(v1 + 16);
    }
    unsigned int v21 = v15;
    if (*(unsigned char *)(v1 + 17) == 2) {
      unsigned int v16 = BYTE1(v12);
    }
    else {
      unsigned int v16 = *(unsigned __int8 *)(v1 + 17);
    }
    unsigned int v20 = v16;
    unsigned int v18 = (*(unsigned char *)(v1 + 32) & v13);
    uint64_t v19 = a1[28];
    if (*(unsigned char *)(v1 + 32)) {
      uint64_t v17 = a1[28];
    }
    else {
      uint64_t v17 = *(void *)(v1 + 24);
    }
    uint64_t v22 = v17;
    if (*(unsigned char *)(v1 + 33) == 3) {
      unsigned int v8 = BYTE1(v13);
    }
    else {
      unsigned int v8 = *(unsigned __int8 *)(v1 + 33);
    }
    if (*(void *)(v1 + 48))
    {
      uint64_t v10 = *(void *)(v1 + 40);
      uint64_t v9 = *(void *)(v1 + 48);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = v14;
      uint64_t v9 = v3;
    }
    swift_bridgeObjectRetain();
    uint64_t result = outlined consume of AccessibilitySpeechAttributes?(v12, v19, v13, v14, v3);
    uint64_t v6 = v22;
    unsigned int v5 = v20;
    unsigned int v4 = v21;
    unsigned int v7 = v18;
  }
  a1[27] = v4 | ((unint64_t)v5 << 8);
  a1[28] = v6;
  a1[29] = v7 | ((unint64_t)v8 << 8);
  a1[30] = v10;
  a1[31] = v9;
  return result;
}

uint64_t SpeechModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    double v2 = *(double *)(v1 + 24);
    double v3 = *(double *)(v1 + 40);
    double v4 = *(double *)(v1 + 48);
    unint64_t v5 = *(unsigned __int8 *)(v1 + 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 33) << 8);
    __int16 v6 = *(_WORD *)(v0 + 16);
    double v7 = *(double *)(v0 + 24);
    char v8 = *(unsigned char *)(v0 + 32);
    char v9 = *(unsigned char *)(v0 + 33);
    *(void *)&v23[0] = *(unsigned __int16 *)(v1 + 16);
    v23[1] = v2;
    *(void *)&v23[2] = v5;
    v23[3] = v3;
    v23[4] = v4;
    LOWORD(v19[0]) = v6;
    v19[1] = v7;
    char v20 = v8;
    char v21 = v9;
    long long v22 = *(_OWORD *)(v0 + 40);
    char v10 = specialized static AccessibilitySpeechAttributes.== infix(_:_:)(v23, v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v12 = *(unsigned __int8 *)(v0 + 32);
    uint64_t v13 = *(unsigned __int8 *)(v0 + 33);
    uint64_t v14 = *(void *)(v0 + 40);
    uint64_t v15 = *(void *)(v0 + 48);
    uint64_t v16 = *(unsigned __int16 *)(v0 + 16);
    uint64_t v17 = v12 | (v13 << 8);
    swift_bridgeObjectRetain();
    outlined consume of AccessibilitySpeechAttributes?(0, 0, 0, 0, 1);
    outlined consume of AccessibilitySpeechAttributes?(v16, v11, v17, v14, v15);
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t SpeechModifier.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t SpeechModifier.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeechModifier.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t TextShadowModifier.deinit()
{
  swift_release();
  return v0;
}

uint64_t TextTransitionModifier.modify(style:environment:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 312) = v1;
  return result;
}

uint64_t TextTransitionModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = *(unsigned __int8 *)(v1 + 28);
    uint64_t v4 = *(unsigned int *)(v1 + 24);
    uint64_t v5 = v4 | (v3 << 32);
    char v6 = *(unsigned char *)(v1 + 30);
    uint64_t v7 = *(void *)(v0 + 16);
    __int16 v8 = *(_WORD *)(v0 + 28);
    int v9 = *(_DWORD *)(v0 + 24);
    char v10 = *(unsigned char *)(v0 + 30);
    char v11 = *(unsigned char *)(v1 + 29);
    uint64_t v23 = v2;
    char v25 = v3;
    int v24 = v4;
    char v26 = v11;
    uint64_t v20 = v7;
    int v21 = v9;
    __int16 v22 = v8;
    outlined copy of ContentTransition.Storage(v2, v5, v11);
    outlined copy of ContentTransition.Storage(v2, v5, v11);
    char v12 = specialized static ContentTransition.Storage.== infix(_:_:)((uint64_t)&v23, (uint64_t)&v20);
    outlined consume of ContentTransition.Storage(v2, v5, v11);
    outlined consume of ContentTransition.Storage(v2, v5, v11);
    char v13 = v12 & (v10 ^ v6 ^ 1);
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 16);
    unint64_t v15 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32);
    uint64_t v16 = *(unsigned __int8 *)(v0 + 29);
    uint64_t v17 = 0x1000000000000;
    if (!*(unsigned char *)(v0 + 30)) {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v15 | (v16 << 40) | v17;
    outlined copy of ContentTransition.Storage(v14, v15, v16);
    outlined consume of ContentTransition?(0, 0x2000000000000);
    outlined consume of ContentTransition?(v14, v18);
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t TextTransitionModifier.__ivar_destroyer()
{
  return outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
}

uint64_t TextTransitionModifier.deinit()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
  return v0;
}

uint64_t TextTransitionModifier.__deallocating_deinit()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));

  return swift_deallocClassInstance();
}

uint64_t TextWidthModifier.modify(style:environment:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 24)) {
    return specialized Text.Style.removeFontModifier<A>(ofType:)((uint64_t)&type metadata for Font.WidthModifier, (uint64_t)&lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (unint64_t)lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier);
  }
  uint64_t v4 = *(void *)(v1 + 16);
  type metadata accessor for AnyDynamicFontModifier<Font.WidthModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WidthModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WidthModifier and conformance Font.WidthModifier);
  *(void *)(swift_allocObject() + 16) = v4;
  MEMORY[0x24C522D60]();
  if (*(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t TextWidthModifier.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  char v2 = *(unsigned char *)(v0 + 24);
  if (*(unsigned char *)(v1 + 24))
  {
    if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(v1 + 16) != *(double *)(v0 + 16)) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t Text._localizationInfo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    uint64_t v7 = *(void (**)(uint64_t))(*(void *)a1 + 120);
    uint64_t v8 = swift_retain();
    v7(v8);
    return outlined consume of Text.Storage(a1, a2, 1);
  }
  else
  {
    *(void *)a4 = a1;
    *(void *)(a4 + 8) = a2;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 16) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    return swift_bridgeObjectRetain();
  }
}

uint64_t Text.contentTransition(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 14);
  char v12 = *(unsigned char *)(a1 + 13);
  type metadata accessor for TextTransitionModifier();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v8;
  *(unsigned char *)(v13 + 28) = v9;
  *(_DWORD *)(v13 + 24) = v10;
  *(unsigned char *)(v13 + 29) = v12;
  *(unsigned char *)(v13 + 30) = v11;
  outlined copy of ContentTransition.Storage(v8, v10 | (v9 << 32), v12);
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
  }
  unint64_t v15 = a5[2];
  unint64_t v14 = a5[3];
  if (v15 >= v14 >> 1) {
    a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, a5);
  }
  a5[2] = v15 + 1;
  uint64_t v16 = &a5[2 * v15];
  void v16[4] = v13;
  *((unsigned char *)v16 + 40) = -64;
  swift_release();
  return a2;
}

void one-time initialization function for back()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 1801675074;
    *(void *)(v3 + 24) = 0xE400000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.back = v3;
    *(void *)algn_268F03DA8 = 0;
    byte_268F03DB0 = 1;
    qword_268F03DB8 = v4;
  }
  else
  {
    __break(1u);
  }
}

void static Text.System.kitLocalized(_:tableName:comment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  char v12 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v13 = NSClassFromString(v12);

  if (v13)
  {
    if (a6) {
      uint64_t v14 = a5;
    }
    else {
      uint64_t v14 = 0x617A696C61636F4CLL;
    }
    if (a6) {
      unint64_t v15 = a6;
    }
    else {
      unint64_t v15 = 0xEB00000000656C62;
    }
    id v16 = objc_msgSend(self, sel_bundleForClass_, v13);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    *(void *)(v17 + 24) = a2;
    *(unsigned char *)(v17 + 32) = a3 & 1;
    *(void *)(v17 + 40) = a4;
    *(void *)(v17 + 48) = v14;
    *(void *)(v17 + 56) = v15;
    *(void *)(v17 + 64) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.back.getter()
{
  if (one-time initialization token for back != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.back;
  outlined copy of Text.Storage(static Text.System.back, *(uint64_t *)algn_268F03DA8, byte_268F03DB0);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for cancel()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x6C65636E6143;
    *(void *)(v3 + 24) = 0xE600000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.cancel = v3;
    *(void *)algn_268EEB878 = 0;
    byte_268EEB880 = 1;
    qword_268EEB888 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.cancel.getter()
{
  if (one-time initialization token for cancel != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.cancel;
  outlined copy of Text.Storage(static Text.System.cancel, *(uint64_t *)algn_268EEB878, byte_268EEB880);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for uiClose()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x65736F6C43;
    *(void *)(v3 + 24) = 0xE500000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.uiClose = v3;
    *(void *)algn_268F03DC8 = 0;
    byte_268F03DD0 = 1;
    qword_268F03DD8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.uiClose.getter()
{
  if (one-time initialization token for uiClose != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.uiClose;
  outlined copy of Text.Storage(static Text.System.uiClose, *(uint64_t *)algn_268F03DC8, byte_268F03DD0);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for uiCopy()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 2037411651;
    *(void *)(v3 + 24) = 0xE400000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.uiCopdouble y = v3;
    *(void *)algn_268F03DE8 = 0;
    byte_268F03DF0 = 1;
    qword_268F03DF8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.uiCopy.getter()
{
  if (one-time initialization token for uiCopy != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.uiCopy;
  outlined copy of Text.Storage(static Text.System.uiCopy, *(uint64_t *)algn_268F03DE8, byte_268F03DF0);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for uiDelete()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x6574656C6544;
    *(void *)(v3 + 24) = 0xE600000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.uiDelete = v3;
    *(void *)algn_268F03E08 = 0;
    byte_268F03E10 = 1;
    qword_268F03E18 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.uiDelete.getter()
{
  if (one-time initialization token for uiDelete != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.uiDelete;
  outlined copy of Text.Storage(static Text.System.uiDelete, *(uint64_t *)algn_268F03E08, byte_268F03E10);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for done()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 1701736260;
    *(void *)(v3 + 24) = 0xE400000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.done = v3;
    *(void *)algn_268F03E28 = 0;
    byte_268F03E30 = 1;
    qword_268F03E38 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.done.getter()
{
  if (one-time initialization token for done != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.done;
  outlined copy of Text.Storage(static Text.System.done, *(uint64_t *)algn_268F03E28, byte_268F03E30);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for edit()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 1953064005;
    *(void *)(v3 + 24) = 0xE400000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.edit = v3;
    *(void *)algn_268F03E48 = 0;
    byte_268F03E50 = 1;
    qword_268F03E58 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.edit.getter()
{
  if (one-time initialization token for edit != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.edit;
  outlined copy of Text.Storage(static Text.System.edit, *(uint64_t *)algn_268F03E48, byte_268F03E50);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for uiLookUp()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x7055206B6F6F4CLL;
    *(void *)(v3 + 24) = 0xE700000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.uiLookUp = v3;
    *(void *)algn_268F03E68 = 0;
    byte_268F03E70 = 1;
    qword_268F03E78 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.uiLookUp.getter()
{
  if (one-time initialization token for uiLookUp != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.uiLookUp;
  outlined copy of Text.Storage(static Text.System.uiLookUp, *(uint64_t *)algn_268F03E68, byte_268F03E70);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for ok()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 19279;
    *(void *)(v3 + 24) = 0xE200000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.ok = v3;
    *(void *)algn_268F03E88 = 0;
    byte_268F03E90 = 1;
    qword_268F03E98 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.ok.getter()
{
  if (one-time initialization token for ok != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.ok;
  outlined copy of Text.Storage(static Text.System.ok, *(uint64_t *)algn_268F03E88, byte_268F03E90);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for on()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 28239;
    *(void *)(v3 + 24) = 0xE200000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.on = v3;
    *(void *)algn_268F03EA8 = 0;
    byte_268F03EB0 = 1;
    qword_268F03EB8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.on.getter()
{
  if (one-time initialization token for on != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.on;
  outlined copy of Text.Storage(static Text.System.on, *(uint64_t *)algn_268F03EA8, byte_268F03EB0);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for paste()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x6574736150;
    *(void *)(v3 + 24) = 0xE500000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.paste = v3;
    *(void *)algn_268F03EC8 = 0;
    byte_268F03ED0 = 1;
    qword_268F03ED8 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.paste.getter()
{
  if (one-time initialization token for paste != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.paste;
  outlined copy of Text.Storage(static Text.System.paste, *(uint64_t *)algn_268F03EC8, byte_268F03ED0);
  swift_bridgeObjectRetain();
  return v0;
}

double one-time initialization function for share()
{
  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  type metadata accessor for LocalizedTextStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0x6572616853;
  *(void *)(v2 + 24) = 0xE500000000000000;
  *(unsigned char *)(v2 + 32) = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 40) = MEMORY[0x263F8EE78];
  *(void *)&double result = 1701998403;
  *(_OWORD *)(v2 + 48) = xmmword_246212800;
  *(void *)(v2 + 64) = v1;
  static Text.System.share = v2;
  *(void *)algn_268F03EE8 = 0;
  byte_268F03EF0 = 1;
  qword_268F03EF8 = v3;
  return result;
}

uint64_t static Text.System.swiftUICoreLocalized(_:tableName:comment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  Class v13 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = objc_msgSend(v13, sel_bundleForClass_, ObjCClassFromMetadata);
  type metadata accessor for LocalizedTextStorage();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  *(unsigned char *)(v15 + 32) = a3;
  *(void *)(v15 + 40) = a4;
  *(void *)(v15 + 48) = a5;
  *(void *)(v15 + 56) = a6;
  *(void *)(v15 + 64) = v14;
  swift_bridgeObjectRetain();
  return v15;
}

uint64_t static Text.System.share.getter()
{
  if (one-time initialization token for share != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.share;
  outlined copy of Text.Storage(static Text.System.share, *(uint64_t *)algn_268F03EE8, byte_268F03EF0);
  swift_bridgeObjectRetain();
  return v0;
}

double one-time initialization function for shareEllipses()
{
  type metadata accessor for SwiftUICoreClass();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  type metadata accessor for LocalizedTextStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0xA680E26572616853;
  *(void *)(v2 + 24) = 0xA800000000000000;
  *(unsigned char *)(v2 + 32) = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v2 + 40) = MEMORY[0x263F8EE78];
  *(void *)&double result = 1701998403;
  *(_OWORD *)(v2 + 48) = xmmword_246212800;
  *(void *)(v2 + 64) = v1;
  static Text.System.shareEllipses = v2;
  *(void *)algn_268F03F08 = 0;
  byte_268F03F10 = 1;
  qword_268F03F18 = v3;
  return result;
}

uint64_t static Text.System.shareEllipses.getter()
{
  if (one-time initialization token for shareEllipses != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.shareEllipses;
  outlined copy of Text.Storage(static Text.System.shareEllipses, *(uint64_t *)algn_268F03F08, byte_268F03F10);
  swift_bridgeObjectRetain();
  return v0;
}

void one-time initialization function for rename()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    type metadata accessor for LocalizedTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0x656D616E6552;
    *(void *)(v3 + 24) = 0xE600000000000000;
    *(unsigned char *)(v3 + 32) = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    *(void *)(v3 + 40) = MEMORY[0x263F8EE78];
    *(_OWORD *)(v3 + 48) = xmmword_2462127F0;
    *(void *)(v3 + 64) = v2;
    static Text.System.rename = v3;
    *(void *)algn_268F03F28 = 0;
    byte_268F03F30 = 1;
    qword_268F03F38 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static Text.System.rename.getter()
{
  if (one-time initialization token for rename != -1) {
    swift_once();
  }
  uint64_t v0 = static Text.System.rename;
  outlined copy of Text.Storage(static Text.System.rename, *(uint64_t *)algn_268F03F28, byte_268F03F30);
  swift_bridgeObjectRetain();
  return v0;
}

void static String.System.kitLocalized(_:tableName:comment:)(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  char v12 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v13 = NSClassFromString(v12);

  if (v13)
  {
    id v14 = objc_msgSend(self, sel_bundleForClass_, v13);
    v18._object = a6;
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    v16.value._countAndFlagsBits = a3;
    v16.value._object = a4;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = a5;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v18);
  }
  else
  {
    __break(1u);
  }
}

void static NSBundle.kit.getter()
{
  uint64_t v0 = (NSString *)MEMORY[0x24C522820](0x63696C7070414955, 0xED00006E6F697461);
  Class v1 = NSClassFromString(v0);

  if (v1)
  {
    id v2 = objc_msgSend(self, sel_bundleForClass_, v1);
    id v3 = v2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t specialized static _LocalizationInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  unint64_t v11 = *(void *)(a2 + 32);
  LODWORD(v12) = *(unsigned __int8 *)(a2 + 40);
  unsigned int v75 = *(unsigned __int8 *)(a1 + 40);
  if (v75 >> 6)
  {
    if (v75 >> 6 == 1)
    {
      if ((v12 & 0xC0) == 0x40)
      {
        uint64_t v71 = *(void *)a2;
        if (v2 == v7 && v3 == v8) {
          goto LABEL_7;
        }
        uint64_t v68 = *(void *)(a2 + 8);
        unint64_t v13 = *(void *)(a2 + 32);
        uint64_t v14 = *(void *)(a2 + 24);
        uint64_t v15 = *(void *)(a2 + 16);
        Swift::String_optional v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void *)(a1 + 8);
        uint64_t v19 = *(void *)(a1 + 24);
        uint64_t v20 = *(void *)a2;
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v7 = v20;
        uint64_t v5 = v19;
        uint64_t v3 = v18;
        uint64_t v2 = v17;
        char v6 = v16;
        uint64_t v9 = v15;
        uint64_t v10 = v14;
        unint64_t v11 = v13;
        uint64_t v8 = v68;
        if (v21)
        {
LABEL_7:
          if (v5)
          {
            if (v10)
            {
              if (v4 == v9 && v5 == v10) {
                goto LABEL_12;
              }
              uint64_t v69 = v8;
              unint64_t v22 = v11;
              uint64_t v23 = v10;
              uint64_t v24 = v9;
              char v25 = v6;
              uint64_t v26 = v2;
              uint64_t v27 = v3;
              uint64_t v28 = v5;
              uint64_t v29 = v7;
              char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v7 = v29;
              uint64_t v5 = v28;
              uint64_t v3 = v27;
              uint64_t v2 = v26;
              char v6 = v25;
              uint64_t v9 = v24;
              uint64_t v10 = v23;
              unint64_t v11 = v22;
              uint64_t v8 = v69;
              if (v30) {
                goto LABEL_12;
              }
            }
          }
          else if (!v10)
          {
LABEL_12:
            if (!v6)
            {
              uint64_t v56 = v10;
              outlined copy of _LocalizationInfo(v7, v8, v9, v10, (void *)v11, v12);
              outlined copy of _LocalizationInfo(v2, v3, v4, v5, 0, v75);
              double v57 = (void *)v11;
              id v58 = (id)v11;
              outlined consume of _LocalizationInfo(v2, v3, v4, v5, 0, v75);
              outlined consume of _LocalizationInfo(v71, v8, v9, v56, v57, v12);
              if (!v57)
              {
LABEL_37:
                char v41 = ((v75 & 1) == 0) ^ v12;
                return v41 & 1;
              }

              goto LABEL_27;
            }
            uint64_t v65 = v9;
            if (v11)
            {
              uint64_t v62 = v4;
              unsigned __int8 v31 = v12;
              uint64_t v32 = v7;
              char v12 = v6;
              type metadata accessor for NSBundle();
              id v33 = v12;
              uint64_t v34 = v8;
              uint64_t v67 = v5;
              uint64_t v70 = v8;
              uint64_t v35 = (void *)v11;
              uint64_t v36 = v9;
              uint64_t v37 = v12;
              id v63 = v33;
              outlined copy of _LocalizationInfo(v32, v34, v36, v10, (void *)v11, v31);
              outlined copy of _LocalizationInfo(v2, v3, v62, v5, v12, v75);
              id v64 = (id)v11;
              id v38 = v63;
              char v39 = static NSObject.== infix(_:_:)();
              LOBYTE(v12) = v31;
              outlined consume of _LocalizationInfo(v2, v3, v62, v67, v37, v75);
              outlined consume of _LocalizationInfo(v71, v70, v65, v10, v35, v31);

              if (v39) {
                goto LABEL_37;
              }
              goto LABEL_27;
            }
            uint64_t v59 = v9;
            uint64_t v60 = v7;
            Swift::Bool v61 = v6;
            outlined copy of _LocalizationInfo(v7, v8, v59, v10, 0, v12);
            outlined copy of _LocalizationInfo(v2, v3, v4, v5, v61, v75);
            outlined consume of _LocalizationInfo(v2, v3, v4, v5, v61, v75);
            uint64_t v46 = v60;
            uint64_t v47 = v8;
            uint64_t v48 = v65;
            uint64_t v49 = v10;
            uint64_t v50 = 0;
            goto LABEL_25;
          }
        }
        double v55 = v6;
        outlined copy of _LocalizationInfo(v7, v8, v9, v10, (void *)v11, v12);
        outlined copy of _LocalizationInfo(v2, v3, v4, v5, v55, v75);
        outlined consume of _LocalizationInfo(v2, v3, v4, v5, v55, v75);
        uint64_t v46 = v71;
        uint64_t v47 = v8;
        uint64_t v48 = v9;
        uint64_t v49 = v10;
        uint64_t v50 = (void *)v11;
        unsigned __int8 v51 = v12;
        goto LABEL_26;
      }
    }
    else
    {
      BOOL v42 = (v12 & 0xC0) == 0x80 && (v8 | v7 | v9 | v10 | v11) == 0;
      if (v42 && v12 == 128)
      {
        outlined consume of _LocalizationInfo(v2, v3, v4, v5, v6, v75);
        outlined consume of _LocalizationInfo(0, 0, 0, v10, (void *)v11, 0x80u);
        char v41 = 1;
        return v41 & 1;
      }
    }
LABEL_24:
    uint64_t v73 = *(void *)(a2 + 24);
    __int8 v43 = *(void **)(a1 + 32);
    long long v74 = *(void **)(a2 + 32);
    uint64_t v44 = *(void *)(a2 + 16);
    uint64_t v45 = *(void *)a2;
    outlined copy of _LocalizationInfo(v7, v8, v44, v73, v74, v12);
    outlined copy of _LocalizationInfo(v2, v3, v4, v5, v43, v75);
    outlined consume of _LocalizationInfo(v2, v3, v4, v5, v43, v75);
    uint64_t v46 = v45;
    uint64_t v47 = v8;
    uint64_t v48 = v44;
    uint64_t v49 = v73;
    uint64_t v50 = v74;
LABEL_25:
    unsigned __int8 v51 = v12;
LABEL_26:
    outlined consume of _LocalizationInfo(v46, v47, v48, v49, v50, v51);
LABEL_27:
    char v41 = 0;
    return v41 & 1;
  }
  if (v12 >= 0x40) {
    goto LABEL_24;
  }
  uint64_t v66 = *(void **)(a1 + 32);
  if (v2 == v7 && v3 == v8)
  {
    __int8 v40 = *(void **)(a2 + 32);
    char v41 = 1;
  }
  else
  {
    __int8 v40 = *(void **)(a2 + 32);
    uint64_t v53 = *(void *)a2;
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v7 = v53;
    char v41 = v54;
  }
  uint64_t v72 = v7;
  outlined copy of _LocalizationInfo(v7, v8, v9, v10, v40, v12);
  outlined copy of _LocalizationInfo(v2, v3, v4, v5, v66, v75);
  outlined consume of _LocalizationInfo(v2, v3, v4, v5, v66, v75);
  outlined consume of _LocalizationInfo(v72, v8, v9, v10, v40, v12);
  return v41 & 1;
}

uint64_t type metadata accessor for SwiftUICoreClass()
{
  return self;
}

uint64_t specialized static Text.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a6)
    {
      unint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
      outlined copy of Text.Storage(a1, a2, 1);
      outlined copy of Text.Storage(a4, a5, 1);
      LOBYTE(v11) = v11(a4);
      outlined consume of Text.Storage(a4, a5, 1);
      outlined consume of Text.Storage(a1, a2, 1);
      return v11 & 1;
    }
    return 0;
  }
  if (a6) {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t outlined consume of AccessibilitySpeechAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for TextTransitionModifier()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type Text.ResolveOptions and conformance Text.ResolveOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions;
  if (!lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions;
  if (!lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions;
  if (!lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions;
  if (!lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.ResolveOptions and conformance Text.ResolveOptions);
  }
  return result;
}

uint64_t destroy for Text.Storage(uint64_t a1)
{
  return outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Text.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Text.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Text.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Storage()
{
  return &type metadata for Text.Storage;
}

uint64_t assignWithCopy for Text.Modifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Modifier(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Text.Modifier(v5, v6);
  return a1;
}

uint64_t assignWithTake for Text.Modifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of Text.Modifier(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Modifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x79 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 121);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 8) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x78) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Text.Modifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x78)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 121;
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x79) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(unsigned char *)(result + 8) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Modifier(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8) >> 5;
  if (v1 == 7) {
    return (*(_DWORD *)a1 + 7);
  }
  else {
    return v1;
  }
}

uint64_t destructiveProjectEnumData for Text.Modifier(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Modifier(uint64_t result, unsigned int a2)
{
  if (a2 < 7)
  {
    *(unsigned char *)(result + 8) = *(unsigned char *)(result + 8) & 1 | (32 * a2);
  }
  else
  {
    *(void *)unint64_t result = a2 - 7;
    *(unsigned char *)(result + 8) = -32;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Modifier()
{
  return &type metadata for Text.Modifier;
}

ValueMetadata *type metadata accessor for Text.ResolveOptions()
{
  return &type metadata for Text.ResolveOptions;
}

uint64_t method lookup function for AnyTextStorage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyTextStorage);
}

uint64_t type metadata accessor for AnyTextModifier()
{
  return self;
}

uint64_t method lookup function for AnyTextModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyTextModifier);
}

uint64_t type metadata accessor for StrikethroughTextModifier()
{
  return self;
}

uint64_t type metadata accessor for UnderlineTextModifier()
{
  return self;
}

uint64_t type metadata accessor for StylisticAlternativeTextModifier()
{
  return self;
}

uint64_t type metadata accessor for BoldTextModifier()
{
  return self;
}

uint64_t type metadata accessor for ItalicTextModifier()
{
  return self;
}

uint64_t type metadata accessor for MonospacedTextModifier()
{
  return self;
}

uint64_t type metadata accessor for TextDesignModifier()
{
  return self;
}

uint64_t type metadata accessor for SpeechModifier()
{
  return self;
}

uint64_t method lookup function for SpeechModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpeechModifier);
}

uint64_t dispatch thunk of SpeechModifier.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for TextShadowModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextShadowModifier);
}

uint64_t method lookup function for TextTransitionModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TextTransitionModifier);
}

uint64_t type metadata accessor for TextWidthModifier()
{
  return self;
}

uint64_t outlined copy of _LocalizationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 >> 6)
  {
    if (a6 >> 6 != 1) {
      return result;
    }
    id v6 = a5;
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

void destroy for _LocalizationInfo(uint64_t a1)
{
}

void outlined consume of _LocalizationInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned __int8 a6)
{
  if (a6 >> 6 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (!(a6 >> 6))
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for _LocalizationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  outlined copy of _LocalizationInfo(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for _LocalizationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  outlined copy of _LocalizationInfo(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(void **)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of _LocalizationInfo(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for _LocalizationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of _LocalizationInfo(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LocalizationInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 40) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 40) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _LocalizationInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 40) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for _LocalizationInfo(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveProjectEnumData for _LocalizationInfo(uint64_t result)
{
  *(unsigned char *)(result + 40) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for _LocalizationInfo(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(unsigned char *)(result + 40) = *(unsigned char *)(result + 40) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)uint64_t result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(unsigned char *)(result + 40) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for _LocalizationInfo()
{
  return &type metadata for _LocalizationInfo;
}

ValueMetadata *type metadata accessor for Text.System()
{
  return &type metadata for Text.System;
}

ValueMetadata *type metadata accessor for String.System()
{
  return &type metadata for String.System;
}

double _SafeAreaInsetsModifier.init(insets:nextInsets:)@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v11 = *a1;
  type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v12 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
  *(void *)(v12 + 32) = 1;
  *(double *)(v12 + 40) = a3;
  *(double *)(v12 + 48) = a4;
  *(double *)(v12 + 56) = a5;
  *(double *)(v12 + 64) = a6;
  *a2 = v12;
  a2[1] = v11;
  return result;
}

uint64_t static SafeAreaRegions.background.getter()
{
  return 1;
}

uint64_t static SafeAreaInsets.OptionalValue.== infix(_:_:)(void *a1, void *a2)
{
  int v2 = (void *)*a1;
  unsigned int v3 = (void *)*a2;
  if (*a1)
  {
    if (v3)
    {
      if (v2[2] == v3[2])
      {
        uint64_t v4 = v2[4];
        uint64_t v5 = v3[4];
        if (specialized static Array<A>.== infix(_:_:)(v2[3], v3[3]))
        {
          uint64_t v8 = v5;
          uint64_t v9 = v4;
          swift_retain();
          swift_retain();
          char v6 = static SafeAreaInsets.OptionalValue.== infix(_:_:)(&v9, &v8);
          swift_release();
          swift_release();
          if (v6) {
            return 1;
          }
        }
      }
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t SafeAreaInsets.Element.regions.getter()
{
  return *(void *)v0;
}

uint64_t SafeAreaInsets.Element.regions.setter(uint64_t result)
{
  *unsigned int v1 = result;
  return result;
}

uint64_t (*SafeAreaInsets.Element.regions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double SafeAreaInsets.Element.insets.getter()
{
  return *(double *)(v0 + 8);
}

void SafeAreaInsets.Element.insets.setter(double a1, double a2, double a3, double a4)
{
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*SafeAreaInsets.Element.insets.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SafeAreaInsets.Element.init(regions:insets:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void SafeAreaInsets.space.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

void *SafeAreaInsets.space.setter(void *result)
{
  *unsigned int v1 = *result;
  return result;
}

uint64_t (*SafeAreaInsets.space.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SafeAreaInsets.elements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SafeAreaInsets.elements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SafeAreaInsets.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SafeAreaInsets.next.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t SafeAreaInsets.next.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*SafeAreaInsets.next.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *SafeAreaInsets.init(space:elements:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  a3[2] = 0;
  return result;
}

void *SafeAreaInsets.init(space:elements:next:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a3;
  *a4 = *result;
  a4[1] = a2;
  a4[2] = v4;
  return result;
}

void _SafeAreaInsetsModifier.init()(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 1;
}

uint64_t _SafeAreaInsetsModifier.init(elements:nextInsets:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = result;
  a3[1] = v3;
  return result;
}

uint64_t specialized static _SafeAreaInsetsModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  int v42 = *a1;
  uint64_t v43 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 28);
  int v57 = *(_DWORD *)(a2 + 8);
  int v58 = *(_DWORD *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 32);
  int v7 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v47 = *(void *)(a2 + 48);
  int v9 = *(_DWORD *)(a2 + 56);
  int v56 = *(_DWORD *)(a2 + 60);
  int v10 = *(_DWORD *)(a2 + 68);
  int v52 = *(_DWORD *)(a2 + 64);
  int v11 = *(_DWORD *)(a2 + 72);
  int v49 = *(_DWORD *)(a2 + 76);
  int v12 = *(_DWORD *)(a2 + 80);
  uint64_t v44 = AGMakeUniqueID();
  swift_beginAccess();
  int v48 = v5;
  int v50 = v12;
  int v51 = v10;
  int v54 = v9;
  int v55 = v7;
  int v53 = v6;
  if ((v7 & 0x20) != 0)
  {
    uint64_t v66 = v43;
    int v67 = v57;
    uint64_t v69 = v4;
    int v70 = v58;
    int v71 = v5;
    int v72 = v6;
    int v73 = v7;
    uint64_t v74 = v8;
    uint64_t v75 = v47;
    int v76 = v9;
    int v77 = v56;
    int v78 = v52;
    int v79 = v10;
    int v80 = v11;
    int v81 = v49;
    int v82 = v12;
    swift_retain_n();
    swift_retain_n();
    uint64_t v41 = v8;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    int v19 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v21 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    uint64_t v13 = v43;
    if ((*(unsigned char *)(v4 + 81) & 1) == 0
      && v52 == *(_DWORD *)(v4 + 32)
      && v11 == *(_DWORD *)(v4 + 36)
      && v21 == *(_DWORD *)(v4 + 40)
      && v57 == *(_DWORD *)(v4 + 44)
      && v19 == *(_DWORD *)(v4 + 48)
      && v58 == *(_DWORD *)(v4 + 52))
    {
      int v22 = v12;
      int v23 = v51;
      uint64_t v8 = v41;
      uint64_t v14 = v47;
      if ((*(unsigned char *)(v4 + 64) & 1) == 0)
      {
        LODWORD(v40) = *(_DWORD *)(v4 + 60);
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v66 = v43;
      int v67 = v57;
      uint64_t v69 = v4;
      int v70 = v58;
      int v71 = v19;
      int v72 = v6;
      int v73 = v7;
      uint64_t v8 = v41;
      uint64_t v14 = v47;
      uint64_t v74 = v41;
      uint64_t v75 = v47;
      int v76 = v9;
      int v77 = v56;
      int v22 = v12;
      int v23 = v51;
      int v78 = v52;
      int v79 = v51;
      int v80 = v11;
      int v81 = v49;
      int v82 = v12;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v66, v21, (uint64_t)&v59);
      long long v24 = v60;
      uint64_t v25 = v61;
      unsigned __int8 v26 = v65;
      unint64_t v27 = v61 | ((unint64_t)v62 << 32);
      unint64_t v28 = v63 | ((unint64_t)v64 << 32);
      *(_OWORD *)(v4 + 32) = v59;
      *(_OWORD *)(v4 + 48) = v24;
      *(void *)(v4 + 64) = v27;
      *(void *)(v4 + 72) = v28;
      *(_WORD *)(v4 + 80) = v26;
      if (v25 != 1)
      {
        uint64_t v40 = HIDWORD(*((void *)&v24 + 1));
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v66 = v43;
        int v67 = v57;
        uint64_t v69 = v4;
        int v70 = v58;
        int v71 = v48;
        int v72 = v53;
        int v73 = v7;
        uint64_t v74 = v8;
        uint64_t v75 = v14;
        int v76 = v54;
        int v77 = v56;
        int v78 = v52;
        int v79 = v23;
        int v18 = v49;
        int v80 = v11;
        int v81 = v49;
        int v82 = v22;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v29 = _ViewInputs.geometryTransaction()();
        uint64_t v30 = swift_getKeyPath();
        int v31 = specialized CachedEnvironment.attribute<A>(keyPath:)(v30);
        swift_release();
        if ((*(unsigned char *)(v4 + 81) & 1) == 0
          && v52 == *(_DWORD *)(v4 + 32)
          && v11 == *(_DWORD *)(v4 + 36)
          && v31 == *(_DWORD *)(v4 + 40)
          && v57 == *(_DWORD *)(v4 + 44)
          && v29 == *(_DWORD *)(v4 + 48)
          && v58 == *(_DWORD *)(v4 + 52))
        {
          int v17 = v42;
          int v16 = v40;
          if ((*(unsigned char *)(v4 + 72) & 1) == 0)
          {
            int OffsetAttribute2 = *(_DWORD *)(v4 + 68);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v66 = v43;
          int v67 = v57;
          uint64_t v69 = v4;
          int v70 = v58;
          int v71 = v29;
          int v72 = v53;
          int v73 = v55;
          uint64_t v74 = v8;
          uint64_t v75 = v14;
          int v76 = v54;
          int v77 = v56;
          int v78 = v52;
          int v79 = v51;
          int v80 = v11;
          int v81 = v49;
          int v82 = v50;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v66, v31, (uint64_t)&v59);
          int OffsetAttribute2 = v62;
          uint64_t v32 = v63;
          unsigned __int8 v33 = v65;
          unint64_t v34 = v61 | ((unint64_t)v62 << 32);
          unint64_t v35 = v63 | ((unint64_t)v64 << 32);
          long long v36 = v60;
          *(_OWORD *)(v4 + 32) = v59;
          *(_OWORD *)(v4 + 48) = v36;
          *(void *)(v4 + 64) = v34;
          *(void *)(v4 + 72) = v35;
          *(_WORD *)(v4 + 80) = v33;
          int v17 = v42;
          int v16 = v40;
          if (v32 != 1) {
            goto LABEL_25;
          }
        }
        int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v4 + 68) = OffsetAttribute2;
        *(unsigned char *)(v4 + 72) = 0;
LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_26;
      }
    }
    LODWORD(v40) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v4 + 60) = v40;
    *(unsigned char *)(v4 + 64) = 0;
    goto LABEL_14;
  }
  uint64_t v13 = v43;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = v47;
  swift_bridgeObjectRetain();
  int OffsetAttribute2 = v11;
  int v16 = v52;
  int v17 = v42;
  int v18 = v49;
LABEL_26:
  swift_endAccess();
  uint64_t v66 = v44;
  int v67 = v56;
  int v68 = v16;
  LODWORD(v69) = OffsetAttribute2;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform();
  int v37 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v66 = v44;
  int v67 = v17;
  int v68 = v18;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets();
  int v38 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v66 = v13;
  int v67 = v57;
  uint64_t v69 = v4;
  int v70 = v58;
  int v71 = v48;
  int v72 = v53 | 4;
  int v73 = v55;
  uint64_t v74 = v8;
  uint64_t v75 = v14;
  int v76 = v54;
  int v77 = v37;
  int v78 = v52;
  int v79 = v51;
  int v80 = v11;
  int v81 = v38;
  int v82 = v50;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)((uint64_t)&v66, a3, a4);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return outlined release of _ViewInputs(a3);
}

void protocol witness for static Rule.initialValue.getter in conformance _SafeAreaInsetsModifier.Insets(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t View._safeAreaInsets(_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = 1;
  return View.safeAreaInsets(_:next:)(&v6, a1, a2, a3, a4, a5);
}

uint64_t View.safeAreaInsets(_:next:)(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11 = *a1;
  type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
  *(void *)(v12 + 32) = 1;
  *(double *)(v12 + 40) = a3;
  *(double *)(v12 + 48) = a4;
  *(double *)(v12 + 56) = a5;
  *(double *)(v12 + 64) = a6;
  v15[0] = 15;
  double v16 = a3;
  double v17 = a4;
  double v18 = a5;
  double v19 = a6;
  char v20 = 0;
  uint64_t v21 = v12;
  uint64_t v22 = v11;
  _ss7KeyPathCy7SwiftUI17EnvironmentValuesVAC15LayoutDirectionOGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier>, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
  View.modifier<A>(_:)(v15, a2, v13);
  outlined copy of SafeAreaInsets.OptionalValue?(v11);
  swift_bridgeObjectRelease();
  return outlined consume of Transaction?(v11);
}

void protocol witness for Rule.value.getter in conformance ResolvedSafeAreaInsets(void *a1@<X8>)
{
  ResolvedSafeAreaInsets.value.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

uint64_t specialized static SafeAreaInsets.Element.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1;
  }
  else {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type SafeAreaRegions and conformance SafeAreaRegions()
{
  unint64_t result = lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions;
  if (!lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions;
  if (!lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions;
  if (!lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions;
  if (!lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SafeAreaRegions and conformance SafeAreaRegions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets;
  if (!lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for ResolvedSafeAreaInsets(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t assignWithTake for SafeAreaInsets(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SafeAreaInsets.OptionalValue()
{
  return &type metadata for SafeAreaInsets.OptionalValue;
}

ValueMetadata *type metadata accessor for SafeAreaInsets.Element()
{
  return &type metadata for SafeAreaInsets.Element;
}

void *assignWithTake for _SafeAreaInsetsModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a2[1];
  if (a1[1] != 1)
  {
    if (v5 != 1)
    {
      uint64_t *v4 = v5;
      swift_release();
      return a1;
    }
    outlined release of ViewTransform((uint64_t)(a1 + 1));
    uint64_t v5 = 1;
  }
  uint64_t *v4 = v5;
  return a1;
}

ValueMetadata *type metadata accessor for _SafeAreaInsetsModifier()
{
  return &type metadata for _SafeAreaInsetsModifier;
}

ValueMetadata *type metadata accessor for ResolvedSafeAreaInsets()
{
  return &type metadata for ResolvedSafeAreaInsets;
}

uint64_t sub_2460FFEF0()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>)
  {
    _ss7KeyPathCy7SwiftUI17EnvironmentValuesVAC15LayoutDirectionOGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier>, (uint64_t)&type metadata for _PaddingLayout, (uint64_t)&type metadata for _SafeAreaInsetsModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_PaddingLayout, _SafeAreaInsetsModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for _SafeAreaInsetsModifier.Insets()
{
  return &type metadata for _SafeAreaInsetsModifier.Insets;
}

ValueMetadata *type metadata accessor for _SafeAreaInsetsModifier.Transform()
{
  return &type metadata for _SafeAreaInsetsModifier.Transform;
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaInsetsModifier.Transform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _SafeAreaInsetsModifier.Insets(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24610009C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t static CTFontRef.make(platformFont:)(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 != CTFontGetTypeID()) {
    return 0;
  }
  swift_unknownObjectRetain();
  return swift_dynamicCastUnknownClassUnconditional();
}

double static CTFontRef.limitedHeight(by:lineHeight:leading:)(uint64_t a1, double a2, double a3)
{
  if (a1 < 1) {
    return 0.0;
  }
  else {
    return (double)a1 * a2 + (double)(a1 - 1) * a3;
  }
}

uint64_t IDView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IDView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*IDView.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t IDView.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t IDView.id.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*IDView.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void IDView.body.getter()
{
}

void protocol witness for View.body.getter in conformance IDView<A, B>()
{
}

uint64_t closure #1 in static IDView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for IDView();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  _OWORD v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t IDPhase.init(id:phase:lastID:delta:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _DWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v8 = type metadata accessor for IDPhase();
  uint64_t v9 = (char *)a5 + *(int *)(v8 + 40);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  *(_DWORD *)((char *)a5 + *(int *)(v8 + 44)) = a4;
  return result;
}

uint64_t closure #2 in static IDView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for IDView();
  _OWORD v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v10, a2, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v11;
}

uint64_t IDPhase.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  int v51 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v11 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v12);
  long long v60 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  long long v59 = (char *)&v49 - v15;
  MEMORY[0x270FA5388](v16);
  unsigned __int8 v63 = (char *)&v49 - v17;
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v49 - v19;
  MEMORY[0x270FA5388](v21);
  int v23 = (char *)&v49 - v22;
  uint64_t Value = AGGraphGetValue();
  uint64_t v25 = (void (*)(char *, uint64_t, uint64_t))v5[2];
  int v58 = v5 + 2;
  int v56 = v25;
  v25(v23, Value, v4);
  unsigned __int8 v26 = (void (*)(char *, void, uint64_t, uint64_t))v5[7];
  int v57 = v5 + 7;
  int v55 = v26;
  v26(v23, 0, 1, v4);
  uint64_t v65 = v2;
  uint64_t v66 = a1;
  uint64_t v27 = v2 + *(int *)(a1 + 40);
  uint64_t v67 = v11;
  unint64_t v28 = *(void (**)(char *))(v11 + 16);
  uint64_t v62 = v27;
  v28(v20);
  uint64_t v54 = TupleTypeMetadata2;
  int v29 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v28)(v10, v23, v7);
  ((void (*)(char *, char *, uint64_t))v28)(v29, v20, v7);
  int v52 = v5;
  uint64_t v32 = (unsigned int (*)(char *, uint64_t, uint64_t))v5[6];
  uint64_t v30 = v5 + 6;
  int v31 = v32;
  unsigned int v33 = v32(v10, 1, v4);
  unsigned int v64 = v10;
  unsigned __int8 v61 = v28;
  if (v33 == 1)
  {
    unint64_t v34 = *(void (**)(char *, uint64_t))(v67 + 8);
    v34(v20, v7);
    v34(v23, v7);
    if (v31(v29, 1, v4) == 1)
    {
      v34(v64, v7);
      uint64_t v35 = v65;
      uint64_t v36 = v66;
      goto LABEL_12;
    }
    int v37 = (uint64_t (*)(char *, uint64_t, uint64_t))v31;
    uint64_t v35 = v65;
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v28)(v63, v10, v7);
    int v49 = v30;
    int v50 = (uint64_t (*)(char *, uint64_t, uint64_t))v31;
    if (v31(v29, 1, v4) != 1)
    {
      uint64_t v41 = v51;
      uint64_t v40 = v52;
      ((void (*)(char *, char *, uint64_t))v52[4])(v51, v29, v4);
      int v42 = v63;
      LODWORD(v54) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v43 = (void (*)(char *, uint64_t))v40[1];
      v43(v41, v4);
      unint64_t v34 = *(void (**)(char *, uint64_t))(v67 + 8);
      v34(v20, v7);
      v34(v23, v7);
      v43(v42, v4);
      uint64_t v36 = v66;
      v34(v64, v7);
      uint64_t v35 = v65;
      int v38 = (void (*)(char *, uint64_t, uint64_t))v61;
      uint64_t v39 = v62;
      int v37 = v50;
      if (v54) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    unint64_t v34 = *(void (**)(char *, uint64_t))(v67 + 8);
    v34(v20, v7);
    v34(v23, v7);
    ((void (*)(char *, uint64_t))v52[1])(v63, v4);
    uint64_t v35 = v65;
    int v37 = v50;
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v64, v54);
  uint64_t v36 = v66;
  int v38 = (void (*)(char *, uint64_t, uint64_t))v61;
  uint64_t v39 = v62;
LABEL_9:
  uint64_t v44 = v59;
  v38(v59, v39, v7);
  int v45 = v37(v44, 1, v4);
  v34(v44, v7);
  if (v45 != 1) {
    ++*(_DWORD *)(v35 + *(int *)(v36 + 44));
  }
  uint64_t v46 = AGGraphGetValue();
  uint64_t v47 = v60;
  v56(v60, v46, v4);
  v55(v47, 0, 1, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 40))(v39, v47, v7);
LABEL_12:
  int v68 = *(_DWORD *)AGGraphGetValue() + 2 * *(_DWORD *)(v35 + *(int *)(v36 + 44));
  return AGGraphSetOutputValue();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IDPhase<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static IDView.canTransition.getter()
{
  return 1;
}

uint64_t static IDView.traitKeysDependOnView.getter()
{
  return 0;
}

void static IDView.makeID()()
{
}

void IDView.makeChildView(metadata:view:inputs:)()
{
}

void protocol witness for static DynamicView.makeID() in conformance IDView<A, B>()
{
}

void protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance IDView<A, B>()
{
}

void specialized IDView.body.getter()
{
}

void type metadata accessor for Attribute<_GraphInputs.Phase>()
{
  if (!lazy cache variable for type metadata for Attribute<_GraphInputs.Phase>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_GraphInputs.Phase>);
    }
  }
}

uint64_t partial apply for closure #2 in static IDView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #2 in static IDView._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

_UNKNOWN **sub_246100D38()
{
  return &protocol witness table for IDView<A, B>;
}

uint64_t getEnumTagSinglePayload for CachedView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for CachedView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2461010F4);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for IDPhase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v9 + 3 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  int v11 = v7 & 0x100000;
  if ((v8 | 3uLL) > 7 || v11 != 0 || v10 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v14 + ((v8 + 16) & ~(v8 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v15 = *v16;
    unint64_t v17 = (void *)(((unint64_t)v15 + v8 + 4) & ~v8);
    uint64_t v18 = (const void *)(((unint64_t)v16 + v8 + 4) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v8 + 4) & ~v8, 1, v4))
    {
      memcpy(v17, v18, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v4);
    }
    *(_DWORD *)(((unint64_t)v17 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v18 + v9 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v3;
}

_DWORD *initializeWithCopy for IDPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    unsigned int v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(_DWORD *)(((unint64_t)v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v10 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for IDPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(_DWORD *)(((unint64_t)v9 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v10 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for IDPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    size_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  *(_DWORD *)(((unint64_t)v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v10 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for IDPhase(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  unint64_t v10 = (void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(_DWORD *)(((unint64_t)v9 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v10 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDPhase(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = 3;
  if (!v5) {
    uint64_t v8 = 4;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v9 = ((v8 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL)
       + 4;
    unsigned int v10 = a2 - v6;
    uint64_t v11 = v9 & 0xFFFFFFFC;
    if ((v9 & 0xFFFFFFFC) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246101AB8);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v16 = v15 - 1;
        if (v11)
        {
          int v16 = 0;
          LODWORD(v11) = *a1;
        }
        return v6 + (v11 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + v7
                                                               + 4) & ~v7);
  if (v18 >= 2) {
    return v18 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for IDPhase(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = 3;
  if (!v8) {
    uint64_t v11 = 4;
  }
  unint64_t v12 = ((v11 + *(void *)(v7 + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v9 < a3)
  {
    unsigned int v13 = a3 - v9;
    if (((v11 + *(_DWORD *)(v7 + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v9)
  {
    if (((v11 + *(_DWORD *)(v7 + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      int v16 = a2 - v9;
    }
    else {
      int v16 = 1;
    }
    if (((v11 + *(_DWORD *)(v7 + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFC) != 0xFFFFFFFC)
    {
      int v17 = ~v9 + a2;
      bzero(a1, ((v11 + *(void *)(v7 + 64) + ((v10 + 8) & ~v10)) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x246101CB4);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v8 >= 2)
        {
          unint64_t v18 = (((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10;
          uint64_t v19 = a2 + 1;
          char v20 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v20(v18, v19);
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for IDPhase<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in IDPhase<A>()
{
  return swift_getWitnessTable();
}

void ColorScheme.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ColorScheme(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ColorScheme;
}

void *static ColorSchemeContrast.allCases.getter()
{
  return &outlined read-only object #0 of static ColorSchemeContrast.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ColorSchemeContrast(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ColorSchemeContrast;
}

uint64_t View.systemColorScheme()(uint64_t a1)
{
  char v2 = 1;
  return View.modifier<A>(_:)(&v2, a1, &type metadata for SystemColorSchemeModifier);
}

SwiftUI::SystemColorSchemeModifier __swiftcall SystemColorSchemeModifier.init(isEnabled:)(SwiftUI::SystemColorSchemeModifier isEnabled)
{
  v1->isEnabledouble d = isEnabled.isEnabled;
  return isEnabled;
}

uint64_t View.systemColorScheme(_:)(char a1, uint64_t a2)
{
  char v3 = a1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for SystemColorSchemeModifier);
}

uint64_t (*EnvironmentValues.colorScheme.modify(uint64_t a1))(uint64_t a1, char a2)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.colorScheme.modify;
}

uint64_t EnvironmentValues.colorScheme.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.colorScheme.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t key path getter for EnvironmentValues.explicitPreferredColorScheme : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t (*EnvironmentValues.explicitPreferredColorScheme.modify(uint64_t a1))(uint64_t a1)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ExplicitPreferredColorSchemeKey>);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *char v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.explicitPreferredColorScheme.modify;
}

uint64_t EnvironmentValues.explicitPreferredColorScheme.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t EnvironmentValues.systemColorScheme.getter()
{
  return EnvironmentValues.colorScheme.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t (*EnvironmentValues.systemColorScheme.modify(uint64_t a1))(uint64_t a1, char a2)
{
  unsigned __int8 v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *unsigned __int8 v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.systemColorScheme.modify;
}

uint64_t EnvironmentValues.systemColorScheme.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.colorScheme.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t sub_2461022E8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.colorScheme.setter(&v2);
}

uint64_t (*EnvironmentValues._colorSchemeContrast.modify(uint64_t a1))(uint64_t a1, char a2)
{
  unsigned __int8 v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *unsigned __int8 v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues._colorSchemeContrast.modify;
}

uint64_t EnvironmentValues._colorSchemeContrast.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.colorScheme.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.colorScheme.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  unsigned int v8 = *(void **)(a1 + 16);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1 + 8;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v8[1])
  {
    uint64_t v14 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t SystemColorSchemeModifier.isEnabled.getter()
{
  return *v0;
}

uint64_t SystemColorSchemeModifier.isEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SystemColorSchemeModifier.isEnabled.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ColorScheme.protobufValue.getter()
{
  return *v0;
}

SwiftUI::ColorScheme_optional __swiftcall ColorScheme.init(protobufValue:)(Swift::UInt protobufValue)
{
  if (protobufValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!protobufValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::ColorScheme_optional)protobufValue;
}

unsigned char *specialized static SystemColorSchemeModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    if (v5)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v4, (char *)&v11);
      swift_release_n();
      swift_release_n();
      char v6 = v11;
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>);
      BloomFilter.init(hashValue:)(v7);
      uint64_t v8 = swift_retain_n();
      uint64_t v9 = specialized find1<A>(_:key:filter:)(v8, v11);
      if (v9) {
        char v6 = *(unsigned char *)(v9 + 72);
      }
      else {
        char v6 = 0;
      }
      swift_release_n();
    }
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a2, v6);
    swift_release();
    if (v5)
    {
      uint64_t v10 = *a2;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v10);
      swift_release();
      swift_release();
    }
    return (unsigned char *)swift_release();
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ColorScheme()
{
  return lazy protocol witness table accessor for type [ColorScheme] and conformance [A](&lazy protocol witness table cache variable for type [ColorScheme] and conformance [A], &lazy cache variable for type metadata for [ColorScheme], (uint64_t)&type metadata for ColorScheme);
}

unint64_t lazy protocol witness table accessor for type ColorSchemeContrast and conformance ColorSchemeContrast()
{
  unint64_t result = lazy protocol witness table cache variable for type ColorSchemeContrast and conformance ColorSchemeContrast;
  if (!lazy protocol witness table cache variable for type ColorSchemeContrast and conformance ColorSchemeContrast)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColorSchemeContrast and conformance ColorSchemeContrast);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ColorSchemeContrast()
{
  return lazy protocol witness table accessor for type [ColorScheme] and conformance [A](&lazy protocol witness table cache variable for type [ColorSchemeContrast] and conformance [A], &lazy cache variable for type metadata for [ColorSchemeContrast], (uint64_t)&type metadata for ColorSchemeContrast);
}

uint64_t lazy protocol witness table accessor for type [ColorScheme] and conformance [A](unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [ColorScheme](255, a2, a3, MEMORY[0x263F8D488]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2461027FC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.colorScheme : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_24610283C(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.colorScheme.setter(&v2);
}

uint64_t sub_246102878(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.explicitPreferredColorScheme.setter(&v2);
}

uint64_t sub_2461028B0@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.colorScheme : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_2461028F0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.systemColorScheme.setter(&v2);
}

uint64_t sub_246102928@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.colorScheme : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_246102968(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues._colorSchemeContrast.setter(&v2);
}

unsigned char *storeEnumTagSinglePayload for SystemColorSchemeModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246102A94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemColorSchemeModifier()
{
  return &type metadata for SystemColorSchemeModifier;
}

uint64_t sub_246102ACC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for [ColorScheme](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_246102BA8()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SystemColorSchemeKey()
{
  return &type metadata for SystemColorSchemeKey;
}

ValueMetadata *type metadata accessor for ExplicitPreferredColorSchemeKey()
{
  return &type metadata for ExplicitPreferredColorSchemeKey;
}

ValueMetadata *type metadata accessor for ColorSchemeContrastKey()
{
  return &type metadata for ColorSchemeContrastKey;
}

ValueMetadata *type metadata accessor for ColorSchemeKey()
{
  return &type metadata for ColorSchemeKey;
}

uint64_t TestRenderOptions.rawValue.getter()
{
  return *(void *)v0;
}

void one-time initialization function for default()
{
  uint64_t v0 = unk_26FA88270;
  if ((unk_26FA88270 & ~qword_26FA88268) == 0) {
    uint64_t v0 = 0;
  }
  static TestRenderOptions.default = v0 | qword_26FA88268;
}

void *static TestRenderOptions.default.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for default, &static TestRenderOptions.default, a1);
}

void static TestRenderOptions.simple.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static TestRenderOptions.current.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for renderOptions != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  *a1 = static _TestApp.renderOptions;
  return result;
}

uint64_t TestIntents.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t TestIntents.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TestIntents.ignoreGeometry.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static TestIntents.ignoreTinting.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static TestIntents.includeColorScheme.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static TestIntents.ignoreCornerRadius.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static TestIntents.lazyLoadMenus.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static TestIntents.includeChildWindows.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static TestIntents.includeTransparency.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static TestIntents.includeWindowConstraints.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static TestIntents.includeSplitViewItemState.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static TestIntents.includeListSeparators.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static TestIntents.includeTableRowViews.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static TestIntents.includeStatusBar.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

void static TestIntents.includeTruncation.getter(void *a1@<X8>)
{
  *a1 = 4096;
}

void static TestIntents.includeExtendedContents.getter(void *a1@<X8>)
{
  *a1 = 0x2000;
}

void static TestIntents.includeWindowStyleMask.getter(void *a1@<X8>)
{
  *a1 = 0x4000;
}

void static TestIntents.includeBridgeMetrics.getter(void *a1@<X8>)
{
  *a1 = 0x8000;
}

void static TestIntents.ignoreDisabled.getter(void *a1@<X8>)
{
  *a1 = 0x10000;
}

void static TestIntents.includeListBackground.getter(void *a1@<X8>)
{
  *a1 = 0x20000;
}

void static TestIntents.includeExtendedGradients.getter(void *a1@<X8>)
{
  *a1 = 0x40000;
}

void static TestIntents.includeNavigationBar.getter(void *a1@<X8>)
{
  *a1 = 0x80000;
}

void static TestIntents.ignoreOpacity.getter(void *a1@<X8>)
{
  *a1 = 0x100000;
}

void static TestIntents.useFocusNavigation.getter(void *a1@<X8>)
{
  *a1 = 0x200000;
}

void static TestIntents.includeScrollEnvironment.getter(void *a1@<X8>)
{
  *a1 = 0x400000;
}

void static TestIntents.includeFocusableBorder.getter(void *a1@<X8>)
{
  *a1 = 0x800000;
}

void static TestIntents.includeListTypeSelect.getter(void *a1@<X8>)
{
  *a1 = 0x1000000;
}

void static TestIntents.includeSystemMenuItemDetails.getter(void *a1@<X8>)
{
  *a1 = 0x2000000;
}

void static TestIntents.includePlaceholderStyling.getter(void *a1@<X8>)
{
  *a1 = 0x4000000;
}

void static TestIntents.isolateSheetSize.getter(void *a1@<X8>)
{
  *a1 = 0x8000000;
}

void static TestIntents.ignoreStackContent.getter(void *a1@<X8>)
{
  *a1 = 0x10000000;
}

void static TestIntents.includePresentationChildrenGeometry.getter(void *a1@<X8>)
{
  *a1 = 0x20000000;
}

void static TestIntents.includePresentationOptions.getter(void *a1@<X8>)
{
  *a1 = 0x40000000;
}

void static TestIntents.ignoreHoverEffects.getter(void *a1@<X8>)
{
  *a1 = 0x80000000;
}

void static TestIntents.ignoreToolbarContents.getter(void *a1@<X8>)
{
  *a1 = 0x100000000;
}

void static TestIntents.includeSemanticContext.getter(void *a1@<X8>)
{
  *a1 = 0x200000000;
}

void static TestIntents.includeTableHeaderStyling.getter(void *a1@<X8>)
{
  *a1 = 0x1000000000;
}

void static TestIntents.includeBaselines.getter(void *a1@<X8>)
{
  *a1 = 0x2000000000;
}

void static TestIntents.includePageControlGeometry.getter(void *a1@<X8>)
{
  *a1 = 0x4000000000;
}

void static TestIntents.includeHostingViewCornerRadius.getter(void *a1@<X8>)
{
  *a1 = 0x2000000000000;
}

void static TestIntents.includeSheetPresentationProperties.getter(void *a1@<X8>)
{
  *a1 = 0x4000000000000;
}

void static TestIntents.ignoreCompositingFilters.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000;
}

void static TestIntents.includeToolbarLayoutMargins.getter(void *a1@<X8>)
{
  *a1 = 0x10000000000000;
}

void static TestIntents.includeContinuousCorners.getter(void *a1@<X8>)
{
  *a1 = 0x40000000000000;
}

void static TestIntents.includePopoverArrowDirection.getter(void *a1@<X8>)
{
  *a1 = 0x80000000000000;
}

void static TestIntents.includePopoverBackground.getter(void *a1@<X8>)
{
  *a1 = 0x100000000000000;
}

void static TestIntents.validateMenuItemActions.getter(void *a1@<X8>)
{
  *a1 = 0x400000000000000;
}

void one-time initialization function for ignorePlatformSpecificStyling()
{
  uint64_t v0 = unk_26FA44028;
  if ((unk_26FA44028 & ~qword_26FA44020) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = v0 | qword_26FA44020;
  uint64_t v3 = qword_26FA44030;
  uint64_t v2 = unk_26FA44038;
  if ((qword_26FA44030 & ~v1) == 0) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 | v1;
  if ((unk_26FA44038 & ~v4) == 0) {
    uint64_t v2 = 0;
  }
  static TestIntents.ignorePlatformSpecificStyling = v2 | v4;
}

void *static TestIntents.ignorePlatformSpecificStyling.getter@<X0>(void *a1@<X8>)
{
  return static Spacing.Category.textToText.getter(&one-time initialization token for ignorePlatformSpecificStyling, &static TestIntents.ignorePlatformSpecificStyling, a1);
}

uint64_t PlatformViewTestProperties.rawValue.getter()
{
  return *(void *)v0;
}

id CALayer.testProperties.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_swiftUI_viewTestProperties);
  *a1 = result;
  return result;
}

id CALayer.testProperties.setter(void *a1)
{
  return objc_msgSend(v1, sel_setSwiftUI_viewTestProperties_, *a1);
}

id (*CALayer.testProperties.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(v1, sel_swiftUI_viewTestProperties);
  return CALayer.testProperties.modify;
}

id CALayer.testProperties.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), sel_setSwiftUI_viewTestProperties_, *(void *)a1);
}

unint64_t lazy protocol witness table accessor for type TestRenderOptions and conformance TestRenderOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions;
  if (!lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions;
  if (!lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions;
  if (!lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions;
  if (!lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestRenderOptions and conformance TestRenderOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TestIntents and conformance TestIntents()
{
  unint64_t result = lazy protocol witness table cache variable for type TestIntents and conformance TestIntents;
  if (!lazy protocol witness table cache variable for type TestIntents and conformance TestIntents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestIntents and conformance TestIntents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestIntents and conformance TestIntents;
  if (!lazy protocol witness table cache variable for type TestIntents and conformance TestIntents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestIntents and conformance TestIntents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestIntents and conformance TestIntents;
  if (!lazy protocol witness table cache variable for type TestIntents and conformance TestIntents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestIntents and conformance TestIntents);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TestIntents and conformance TestIntents;
  if (!lazy protocol witness table cache variable for type TestIntents and conformance TestIntents)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TestIntents and conformance TestIntents);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformViewTestProperties and conformance PlatformViewTestProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties;
  if (!lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties;
  if (!lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties;
  if (!lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties;
  if (!lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformViewTestProperties and conformance PlatformViewTestProperties);
  }
  return result;
}

id sub_2461034A8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_swiftUI_viewTestProperties);
  *a2 = result;
  return result;
}

id sub_2461034DC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSwiftUI_viewTestProperties_, *a1);
}

uint64_t dispatch thunk of _Test.setUpTest()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _Test.tearDownTest()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of _Test.tearDownTestWithError()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for TestRenderOptions()
{
  return &type metadata for TestRenderOptions;
}

ValueMetadata *type metadata accessor for TestIntents()
{
  return &type metadata for TestIntents;
}

ValueMetadata *type metadata accessor for PlatformViewTestProperties()
{
  return &type metadata for PlatformViewTestProperties;
}

uint64_t PreferenceBridge.viewGraph.getter()
{
  return swift_weakLoadStrong();
}

uint64_t PreferenceBridge.viewGraph.setter()
{
  return swift_release();
}

void (*PreferenceBridge.viewGraph.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return PreferenceBridge.viewGraph.modify;
}

void PreferenceBridge.viewGraph.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t PreferenceBridge.init()()
{
  swift_weakInit();
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 32) = MEMORY[0x263F8EE78];
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = v1;
  specialized static ViewGraph.current.getter();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t PreferenceBridge.deinit()
{
  if (*(unsigned char *)(v0 + 24) == 1) {
    PreferenceBridge.invalidate()();
  }
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PreferenceBridge.removeChild(_:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    if (*(void *)(v4 + 32) == a1)
    {
      unint64_t v7 = 0;
    }
    else
    {
      if (v5 == 1) {
        return result;
      }
      for (uint64_t i = 5; ; ++i)
      {
        unint64_t v7 = i - 4;
        if (*(void *)(v4 + 8 * i) == a1) {
          break;
        }
        uint64_t v8 = i - 3;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
          return result;
        }
        if (v8 == v5) {
          return result;
        }
      }
    }
    swift_beginAccess();
    specialized Array.remove(at:)(v7);
    return swift_endAccess();
  }
  return result;
}

uint64_t PreferenceBridge.removeValue(_:for:isInvalidating:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v5 = *(void *)(v2 + 72);
    unint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      unint64_t v7 = 0;
      for (uint64_t i = v5 + 48; *(void *)(i - 16) != a2; i += 24)
      {
        if (v6 == ++v7) {
          return swift_release();
        }
      }
      if (v7 >= v6)
      {
        __break(1u);
        return result;
      }
      uint64_t Attribute = AGWeakAttributeGetAttribute();
      if (Attribute != *MEMORY[0x263F288F8])
      {
        MEMORY[0x270FA5388](Attribute);
        uint64_t v10 = type metadata accessor for PreferenceCombiner();
        MEMORY[0x270FA5388](v10);
        AGGraphMutateAttribute();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in removeValue #1 <A>(key:) in PreferenceBridge.removeValue(_:for:isInvalidating:)(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for WeakAttribute();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
  {
    uint64_t result = Array.remove(at:)();
    *a3 = 1;
  }
  return result;
}

uint64_t PreferenceBridge.updateHostValues(_:)(unsigned int a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    GraphHost.graphInvalidation(from:)(a1);
    return swift_release();
  }
  return result;
}

uint64_t PreferenceBridge.addHostValues(_:for:)(uint64_t result, unsigned int a2)
{
  int v2 = *MEMORY[0x263F288F8];
  if (*MEMORY[0x263F288F8] != result)
  {
    AGCreateWeakAttribute();
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_beginAccess();
      uint64_t Attribute = AGWeakAttributeGetAttribute();
      if (Attribute != v2)
      {
        MEMORY[0x270FA5388](Attribute);
        MEMORY[0x270FA5388](v5);
        AGGraphMutateAttribute();
        GraphHost.graphInvalidation(from:)(a2);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t PreferenceBridge.removeHostValues(for:isInvalidating:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    uint64_t Attribute = AGWeakAttributeGetAttribute();
    if (Attribute != *MEMORY[0x263F288F8])
    {
      MEMORY[0x270FA5388](Attribute);
      MEMORY[0x270FA5388](v2);
      AGGraphMutateAttribute();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MergePreferenceKeys@<X0>(void *a1@<X8>)
{
  return MergePreferenceKeys.value.getter(a1);
}

uint64_t partial apply for closure #1 in removeValue #1 <A>(key:) in PreferenceBridge.removeValue(_:for:isInvalidating:)(uint64_t a1)
{
  return closure #1 in removeValue #1 <A>(key:) in PreferenceBridge.removeValue(_:for:isInvalidating:)(a1, *(unsigned int *)(v1 + 32), *(unsigned char **)(v1 + 40));
}

uint64_t sub_246103EB8@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_246103F08()
{
  return swift_weakAssign();
}

uint64_t method lookup function for PreferenceBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PreferenceBridge);
}

uint64_t dispatch thunk of PreferenceBridge.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

ValueMetadata *type metadata accessor for PreferenceBridge.BridgedPreference()
{
  return &type metadata for PreferenceBridge.BridgedPreference;
}

void *type metadata accessor for MergePreferenceKeys()
{
  return &unk_26FA5EA60;
}

unint64_t instantiation function for generic protocol witness table for MergePreferenceKeys(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MergePreferenceKeys and conformance MergePreferenceKeys();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL partial apply for closure #1 in closure #1 in removeValue #1 <A>(key:) in PreferenceBridge.removeValue(_:for:isInvalidating:)()
{
  int v1 = *(_DWORD *)(v0 + 32);
  return AGWeakAttributeGetAttribute() == v1;
}

uint64_t static _PreferenceWritingModifier<>.makePreviewColorSchemeList(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  v35[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[3];
  int v17 = *((_DWORD *)a2 + 8);
  int v20 = *((_DWORD *)a2 + 9);
  int v21 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[5];
  uint64_t v18 = a2[7];
  uint64_t v19 = a2[6];
  int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[9];
  char v8 = *((unsigned char *)a2 + 80);
  LODWORD(v23) = *a1;
  HIDWORD(v23) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeTrait);
  lazy protocol witness table accessor for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeTrait);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v9 = Attribute.init<A>(body:value:flags:update:)();
  if (v7)
  {
    uint64_t v23 = v7;
    LOBYTE(v24) = v8 & 1;
    specialized Set._Variant.insert(_:)(v35, (uint64_t)&type metadata for PreviewColorSchemeTraitKey);
    uint64_t v10 = v7;
    v8 &= 1u;
  }
  else
  {
    uint64_t v10 = 0;
  }
  swift_beginAccess();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait(0, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeEnv, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeEnv);
  lazy protocol witness table accessor for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeEnv and conformance _PreferenceWritingModifier<A><>.ColorSchemeEnv, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeEnv, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeEnv);
  int v11 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_7(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_WORD *)(v14 + 80) = 256;
  *(void *)(v14 + 88) = v13;
  swift_release();
  uint64_t v23 = v3;
  int v24 = v21;
  uint64_t v25 = v14;
  uint64_t v26 = v4;
  int v27 = v17 | 0x20;
  int v28 = v20;
  uint64_t v29 = v5;
  uint64_t v30 = v19;
  uint64_t v31 = v18;
  int v32 = v9;
  uint64_t v33 = v10;
  char v34 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v23);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unsigned __int8 *static PreferredColorSchemeKey.reduce(value:nextValue:)(unsigned __int8 *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t result = (unsigned __int8 *)a2(&v4);
    LOBYTE(v3) = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

unsigned __int8 *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PreferredColorSchemeKey(unsigned __int8 *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  int v3 = *result;
  if (v3 == 2)
  {
    unint64_t result = (unsigned __int8 *)a2(&v4);
    LOBYTE(v3) = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t static PreferredColorSchemeKey._isReadableByHost.getter()
{
  return 1;
}

uint64_t View.preferredColorScheme(_:)(uint64_t a1, uint64_t a2)
{
  return View.preference<A>(key:value:)((uint64_t)&type metadata for PreferredColorSchemeKey, a1, a2);
}

uint64_t sub_246104460()
{
  return swift_getWitnessTable();
}

uint64_t _PreferenceWritingModifier<>.ColorSchemeTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    int v3 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    int v3 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier);
  char v4 = *(unsigned char *)AGGraphGetValue();
  uint64_t v5 = v3[2];
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      if (v7 >= v3[2])
      {
        __break(1u);
        goto LABEL_19;
      }
      outlined init with copy of AnyTrackedValue((uint64_t)&v3[v6 + 4], (uint64_t)&v19);
      uint64_t v8 = v20;
      int v9 = v21;
      __swift_project_boxed_opaque_existential_1(&v19, v20);
      uint64_t v10 = (ValueMetadata *)((uint64_t (*)(uint64_t, _UNKNOWN **))v9[1])(v8, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
      if (v10 == &type metadata for PreviewColorSchemeTraitKey) {
        break;
      }
      ++v7;
      v6 += 5;
      if (v5 == v7) {
        goto LABEL_9;
      }
    }
    LOBYTE(v19) = v4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      int v3 = (void *)result;
    }
    if (v7 < v3[2])
    {
      uint64_t v15 = v3[v6 + 7];
      uint64_t v16 = v3[v6 + 8];
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v3[v6 + 4], v15);
      int v17 = *(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t))(v16 + 24);
      _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_7(0, &lazy cache variable for type metadata for ColorScheme?, (uint64_t)&type metadata for ColorScheme, MEMORY[0x263F8D8F0]);
      uint64_t result = v17(&v19, v18, v15, v16);
      goto LABEL_17;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_19:
    }
      int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    unint64_t v12 = v3[2];
    unint64_t v11 = v3[3];
    if (v12 >= v11 >> 1) {
      int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v3);
    }
    type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>(0, &lazy cache variable for type metadata for ViewTraitCollection.AnyTrait<PreviewColorSchemeTraitKey>, (uint64_t)&type metadata for PreviewColorSchemeTraitKey, (uint64_t)&protocol witness table for PreviewColorSchemeTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ViewTraitCollection.AnyTrait);
    uint64_t v20 = v13;
    int v21 = &protocol witness table for ViewTraitCollection.AnyTrait<A>;
    LOBYTE(v19) = v4;
    v3[2] = v12 + 1;
    uint64_t result = outlined init with take of ScrollStateRequest(&v19, (uint64_t)&v3[5 * v12 + 4]);
LABEL_17:
    *a2 = v3;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait@<X0>(void *a1@<X8>)
{
  return _PreferenceWritingModifier<>.ColorSchemeTrait.value.getter(*v1, a1);
}

double _PreferenceWritingModifier<>.ColorSchemeEnv.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v6 = *Value;
  *((void *)&v6 + 1) = v3;
  type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey>, (uint64_t)&type metadata for PreferredColorSchemeKey, (uint64_t)&protocol witness table for PreferredColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _PreferenceWritingModifier);
  unsigned __int8 v4 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB503_s7c45UI26_PreferenceWritingModifierVA2A23PreferredeF98KeyVRszrlE0gH3Env33_E52508E85535897B9A366B470195B29DLLV5valueAA17EnvironmentValuesVvgyAA0gH0OXEfU_AD17EnvironmentValuesVTf1cn_n(v4, (uint64_t *)&v6);
  double result = *(double *)&v6;
  *a1 = v6;
  return result;
}

double protocol witness for Rule.value.getter in conformance _PreferenceWritingModifier<A><>.ColorSchemeEnv@<D0>(_OWORD *a1@<X8>)
{
  return _PreferenceWritingModifier<>.ColorSchemeEnv.value.getter(a1);
}

uint64_t type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeTrait()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeEnv()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _PreferenceWritingModifier<PreferredColorSchemeKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in _PreferenceWritingModifier<A><>.ColorSchemeTrait()
{
  return lazy protocol witness table accessor for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeTrait);
}

uint64_t base witness table accessor for _AttributeBody in _PreferenceWritingModifier<A><>.ColorSchemeEnv()
{
  return lazy protocol witness table accessor for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeTrait and conformance _PreferenceWritingModifier<A><>.ColorSchemeTrait(&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeEnv and conformance _PreferenceWritingModifier<A><>.ColorSchemeEnv, &lazy cache variable for type metadata for _PreferenceWritingModifier<PreferredColorSchemeKey><>.ColorSchemeEnv, (uint64_t (*)(void))type metadata accessor for _PreferenceWritingModifier<>.ColorSchemeEnv);
}

uint64_t Image.init<A>(_:)(uint64_t a1)
{
  return ImageProviderBox.__allocating_init(_:)(a1);
}

uint64_t Image.resolve(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 80))();
}

uint64_t static Image.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a2) & 1;
  }
}

uint64_t AnyImageProviderBox.deinit()
{
  return v0;
}

uint64_t Image.provider.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *int v1 = a1;
  return result;
}

uint64_t (*Image.provider.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageProviderBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 112) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 128), a1);
  return v2;
}

uint64_t ImageResolutionContext.Options.rawValue.getter()
{
  return *v0;
}

uint64_t ImageResolutionContext.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ImageResolutionContext.Options.inferSymbolRenderingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ImageResolutionContext.Options.isArchived.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ImageResolutionContext.Options.useCatalogReferences.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static ImageResolutionContext.Options.animationsDisabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void static ImageResolutionContext.Options.preservesVectors.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t ImageResolutionContext.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t ImageResolutionContext.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_release();
  uint64_t result = swift_release();
  *int v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*ImageResolutionContext.environment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *ImageResolutionContext.symbolAnimator.getter()
{
  int v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void ImageResolutionContext.symbolAnimator.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*ImageResolutionContext.symbolAnimator.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageResolutionContext.textStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ImageResolutionContext() + 24);

  return outlined init with copy of Text.Style?(v3, a1);
}

uint64_t outlined init with copy of Text.Style?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ImageResolutionContext.textStyle.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ImageResolutionContext() + 24);

  return outlined assign with take of Text.Style?(a1, v3);
}

uint64_t (*ImageResolutionContext.textStyle.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageResolutionContext.transaction.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for ImageResolutionContext() + 28));
}

uint64_t ImageResolutionContext.transaction.setter(int a1)
{
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *(_DWORD *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*ImageResolutionContext.transaction.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageResolutionContext.symbolRenderingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ImageResolutionContext.symbolRenderingMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ImageResolutionContext.symbolRenderingMode.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageResolutionContext.allowedDynamicRange.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t ImageResolutionContext.allowedDynamicRange.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*ImageResolutionContext.allowedDynamicRange.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t ImageResolutionContext.options.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t ImageResolutionContext.options.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ImageResolutionContext();
  *(unsigned char *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*ImageResolutionContext.options.modify())(void)
{
  return _ViewInputs.base.modify;
}

void static Image.Style.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Image.ImageViewChild.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t static Image.ImageViewChild.scrapeContent(from:)@<X0>(uint64_t a1@<X8>)
{
  AGGraphGetAttributeInfo();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  type metadata accessor for Image.ImageViewChild();
  *(void *)(v4 + 16) = *(void *)AGGraphGetValue();
  long long v5 = v3[5];
  long long v19 = v3[4];
  v20[0] = v5;
  *(_OWORD *)((char *)v20 + 14) = *(long long *)((char *)v3 + 94);
  long long v6 = v3[1];
  long long v15 = *v3;
  long long v16 = v6;
  long long v7 = v3[3];
  long long v17 = v3[2];
  long long v18 = v7;
  Image.ImageViewChild.environment.getter((void *)(v4 + 24));
  uint64_t v14 = v4 | 0x1000000000000000;
  int v12 = *((_DWORD *)v3 + 7);
  int v13 = 0;
  ScrapeableContent.Item.init(_:ids:_:position:size:transform:)(&v14, &v13, &v12, (uint64_t)&v15);
  uint64_t v8 = v19;
  long long v9 = v16;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v9;
  long long v10 = v18;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = v8;

  return swift_retain();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance Image.ImageViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance Image.ImageViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  return static Image.ImageViewChild.scrapeContent(from:)(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance Image.MakeRepresentableContext@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v5 = *Value;
  uint64_t v4 = Value[1];
  *a1 = v2;
  a1[1] = v5;
  a1[2] = v4;
  swift_retain();
  swift_retain();

  return swift_retain();
}

void AnyImageProviderBox.resolve(in:)()
{
}

void AnyImageProviderBox.resolveNamedImage(in:)()
{
}

void AnyImageProviderBox.isEqual(to:)()
{
}

uint64_t AnyImageProviderBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ImageProviderBox.base.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 112) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 128));
}

uint64_t ImageProviderBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t ImageProviderBox.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
  return v0;
}

unint64_t lazy protocol witness table accessor for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options;
  if (!lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options;
  if (!lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options;
  if (!lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options;
  if (!lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageResolutionContext.Options and conformance ImageResolutionContext.Options);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ImageResolutionContext(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    long long v6 = (void *)a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a3[6];
    uint64_t v8 = (void *)((char *)a1 + v7);
    long long v9 = (void *)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for Text.Style(0);
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
    swift_retain();
    swift_retain();
    id v13 = v6;
    if (v12(v9, 1, v10))
    {
      _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
      memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
      long long v16 = a2;
      long long v15 = a3;
    }
    else
    {
      uint64_t v67 = v11;
      int v68 = (int *)v10;
      uint64_t v17 = *v9;
      if (*v9 >= 2uLL) {
        uint64_t v17 = swift_retain();
      }
      uint64_t v18 = v9[1];
      unint64_t v19 = v9[2];
      *uint64_t v8 = v17;
      v8[1] = v18;
      swift_bridgeObjectRetain();
      outlined copy of Text.Style.TextStyleColor(v19);
      uint64_t v20 = v9[4];
      v8[3] = v9[3];
      v8[4] = v20;
      *((unsigned char *)v8 + 40) = *((unsigned char *)v9 + 40);
      v8[6] = v9[6];
      *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
      v8[8] = v9[8];
      *((unsigned char *)v8 + 72) = *((unsigned char *)v9 + 72);
      int v21 = v9 + 10;
      uint64_t v22 = v9[11];
      _OWORD v8[2] = v19;
      swift_retain();
      if ((unint64_t)(v22 - 1) >= 2)
      {
        v8[10] = *v21;
        v8[11] = v22;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v8 + 5) = *(_OWORD *)v21;
      }
      uint64_t v23 = v9 + 12;
      uint64_t v24 = v9[13];
      if ((unint64_t)(v24 - 1) >= 2)
      {
        v8[12] = *v23;
        v8[13] = v24;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v8 + 6) = *(_OWORD *)v23;
      }
      uint64_t v25 = v8 + 14;
      uint64_t v26 = v9 + 14;
      uint64_t v27 = v9[22];
      if (v27 == 1)
      {
        long long v28 = *((_OWORD *)v9 + 12);
        *((_OWORD *)v8 + 11) = *((_OWORD *)v9 + 11);
        *((_OWORD *)v8 + 12) = v28;
        *((unsigned char *)v8 + 208) = *((unsigned char *)v9 + 208);
        long long v29 = *((_OWORD *)v9 + 8);
        *uint64_t v25 = *v26;
        *((_OWORD *)v8 + 8) = v29;
        long long v30 = *((_OWORD *)v9 + 10);
        *((_OWORD *)v8 + 9) = *((_OWORD *)v9 + 9);
        *((_OWORD *)v8 + 10) = v30;
      }
      else
      {
        *(void *)uint64_t v25 = *(void *)v26;
        *((unsigned char *)v8 + 120) = *((unsigned char *)v9 + 120);
        v8[16] = v9[16];
        *((unsigned char *)v8 + 136) = *((unsigned char *)v9 + 136);
        v8[18] = v9[18];
        *((unsigned char *)v8 + 152) = *((unsigned char *)v9 + 152);
        *((unsigned char *)v8 + 168) = *((unsigned char *)v9 + 168);
        v8[20] = v9[20];
        *((unsigned char *)v8 + 192) = *((unsigned char *)v9 + 192);
        uint64_t v31 = v9[23];
        v8[22] = v27;
        v8[23] = v31;
        *((unsigned char *)v8 + 208) = *((unsigned char *)v9 + 208);
        v8[25] = v9[25];
        swift_retain();
      }
      uint64_t v32 = v9[31];
      if (v32 == 1)
      {
        long long v33 = *(_OWORD *)(v9 + 29);
        *(_OWORD *)(v8 + 27) = *(_OWORD *)(v9 + 27);
        *(_OWORD *)(v8 + 29) = v33;
        v8[31] = v9[31];
      }
      else
      {
        *((_WORD *)v8 + 108) = *((_WORD *)v9 + 108);
        v8[28] = v9[28];
        *((_WORD *)v8 + 116) = *((_WORD *)v9 + 116);
        v8[30] = v9[30];
        v8[31] = v32;
        swift_bridgeObjectRetain();
      }
      uint64_t v34 = v9[36];
      if (v34 == 1)
      {
        long long v35 = *((_OWORD *)v9 + 17);
        *((_OWORD *)v8 + 16) = *((_OWORD *)v9 + 16);
        *((_OWORD *)v8 + 17) = v35;
        v8[36] = v9[36];
      }
      else
      {
        *((unsigned char *)v8 + 256) = *((unsigned char *)v9 + 256);
        *(_WORD *)((char *)v8 + 257) = *(_WORD *)((char *)v9 + 257);
        if (v34)
        {
          uint64_t v36 = v9[33];
          uint64_t v37 = v9[34];
          char v38 = *((unsigned char *)v9 + 280);
          outlined copy of Text.Storage(v36, v37, v38);
          v8[33] = v36;
          v8[34] = v37;
          *((unsigned char *)v8 + 280) = v38;
          v8[36] = v9[36];
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v39 = *(_OWORD *)(v9 + 35);
          *(_OWORD *)(v8 + 33) = *(_OWORD *)(v9 + 33);
          *(_OWORD *)(v8 + 35) = v39;
        }
      }
      uint64_t v40 = (void *)v9[37];
      uint64_t v41 = v9[38];
      v8[37] = (uint64_t)v40;
      v8[38] = v41;
      v8[39] = v9[39];
      *((_WORD *)v8 + 160) = *((_WORD *)v9 + 160);
      uint64_t v42 = *(int *)(v10 + 84);
      __dst = (char *)v8 + v42;
      uint64_t v43 = (char *)v9 + v42;
      type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
      uint64_t v45 = v44;
      uint64_t v65 = *(void *)(v44 - 8);
      uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
      id v47 = v40;
      swift_retain();
      swift_retain();
      if (v46(v43, 2, v45))
      {
        uint64_t v48 = type metadata accessor for TypesettingLanguage.Storage(0);
        int v49 = __dst;
        memcpy(__dst, v43, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        uint64_t v50 = type metadata accessor for Locale.Language();
        int v49 = __dst;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(__dst, v43, v50);
        __dst[*(int *)(v45 + 48)] = v43[*(int *)(v45 + 48)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(__dst, 0, 2, v45);
      }
      uint64_t v51 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
      int v52 = &v49[v51];
      uint64_t v53 = &v43[v51];
      *(void *)int v52 = *(void *)v53;
      v52[8] = v53[8];
      *(uint64_t *)((char *)v8 + v68[22]) = *(void *)((char *)v9 + v68[22]);
      uint64_t v54 = v68[23];
      int v55 = (char *)v8 + v54;
      int v56 = (char *)v9 + v54;
      uint64_t v57 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
      uint64_t v58 = *(void *)(v57 - 8);
      long long v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
      swift_bridgeObjectRetain();
      if (v59(v56, 1, v57))
      {
        _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
        memcpy(v55, v56, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      }
      long long v16 = a2;
      long long v15 = a3;
      *(uint64_t *)((char *)v8 + v68[24]) = *(void *)((char *)v9 + v68[24]);
      unsigned __int8 v61 = *(void (**)(uint64_t *, void, uint64_t, int *))(v67 + 56);
      swift_bridgeObjectRetain();
      v61(v8, 0, 1, v68);
    }
    uint64_t v62 = v15[8];
    *(_DWORD *)((char *)v5 + v15[7]) = *(_DWORD *)((char *)v16 + v15[7]);
    *((unsigned char *)v5 + v62) = *((unsigned char *)v16 + v62);
    uint64_t v63 = v15[10];
    *((unsigned char *)v5 + v15[9]) = *((unsigned char *)v16 + v15[9]);
    *((unsigned char *)v5 + v63) = *((unsigned char *)v16 + v63);
  }
  return v5;
}

void *assignWithCopy for ImageResolutionContext(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v5[1] = v4[1];
  swift_retain();
  swift_release();
  long long v6 = (void *)v5[2];
  uint64_t v7 = (void *)v4[2];
  void v5[2] = v7;
  id v8 = v7;

  uint64_t v9 = a3[6];
  uint64_t v10 = (uint64_t)v5 + v9;
  uint64_t v11 = (char *)v4 + v9;
  int v12 = (int *)type metadata accessor for Text.Style(0);
  id v13 = (void *)*((void *)v12 - 1);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, int *))v13[6];
  int v15 = v14(v10, 1, v12);
  int v16 = v14((uint64_t)v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      _s7SwiftUI22ImageResolutionContextVWOhTm_0(v10, type metadata accessor for Text.Style);
      goto LABEL_9;
    }
    unint64_t v24 = *(void *)v11;
    if (*(void *)v10 >= 2uLL)
    {
      if (v24 >= 2)
      {
        *(void *)uint64_t v10 = v24;
        swift_retain();
        swift_release();
      }
      else
      {
        outlined destroy of Font(v10);
        *(void *)uint64_t v10 = *(void *)v11;
      }
    }
    else
    {
      *(void *)uint64_t v10 = v24;
      if (v24 >= 2) {
        swift_retain();
      }
    }
    *(void *)(v10 + 8) = *((void *)v11 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unint64_t v71 = *((void *)v11 + 2);
    outlined copy of Text.Style.TextStyleColor(v71);
    unint64_t v72 = *(void *)(v10 + 16);
    *(void *)(v10 + 16) = v71;
    outlined consume of Text.Style.TextStyleColor(v72);
    *(void *)(v10 + 24) = *((void *)v11 + 3);
    swift_retain();
    swift_release();
    uint64_t v73 = *((void *)v11 + 4);
    *(unsigned char *)(v10 + 40) = v11[40];
    *(void *)(v10 + 32) = v73;
    uint64_t v74 = *((void *)v11 + 6);
    *(unsigned char *)(v10 + 56) = v11[56];
    *(void *)(v10 + 48) = v74;
    uint64_t v75 = *((void *)v11 + 8);
    *(unsigned char *)(v10 + 72) = v11[72];
    *(void *)(v10 + 64) = v75;
    unint64_t v76 = *((void *)v11 + 11) - 1;
    if ((unint64_t)(*(void *)(v10 + 88) - 1) >= 2)
    {
      if (v76 >= 2)
      {
        *(void *)(v10 + 80) = *((void *)v11 + 10);
        *(void *)(v10 + 88) = *((void *)v11 + 11);
        swift_retain();
        swift_release();
LABEL_47:
        unint64_t v77 = *((void *)v11 + 13) - 1;
        if ((unint64_t)(*(void *)(v10 + 104) - 1) >= 2)
        {
          if (v77 >= 2)
          {
            *(void *)(v10 + 96) = *((void *)v11 + 12);
            *(void *)(v10 + 104) = *((void *)v11 + 13);
            swift_retain();
            swift_release();
LABEL_54:
            int v78 = (long long *)(v10 + 112);
            int v79 = (long long *)(v11 + 112);
            uint64_t v80 = *((void *)v11 + 22);
            if (*(void *)(v10 + 176) == 1)
            {
              if (v80 == 1)
              {
                long long v81 = *v79;
                long long v82 = *((_OWORD *)v11 + 9);
                *(_OWORD *)(v10 + 128) = *((_OWORD *)v11 + 8);
                *(_OWORD *)(v10 + 144) = v82;
                *int v78 = v81;
                long long v83 = *((_OWORD *)v11 + 10);
                long long v84 = *((_OWORD *)v11 + 11);
                long long v85 = *((_OWORD *)v11 + 12);
                *(unsigned char *)(v10 + 208) = v11[208];
                *(_OWORD *)(v10 + 176) = v84;
                *(_OWORD *)(v10 + 192) = v85;
                *(_OWORD *)(v10 + 160) = v83;
              }
              else
              {
                uint64_t v91 = *(void *)v79;
                *(unsigned char *)(v10 + 120) = v11[120];
                *(void *)int v78 = v91;
                uint64_t v92 = *((void *)v11 + 16);
                *(unsigned char *)(v10 + 136) = v11[136];
                *(void *)(v10 + 128) = v92;
                uint64_t v93 = *((void *)v11 + 18);
                *(unsigned char *)(v10 + 152) = v11[152];
                *(void *)(v10 + 144) = v93;
                uint64_t v94 = *((void *)v11 + 20);
                *(unsigned char *)(v10 + 168) = v11[168];
                *(void *)(v10 + 160) = v94;
                *(void *)(v10 + 176) = *((void *)v11 + 22);
                uint64_t v95 = *((void *)v11 + 23);
                *(unsigned char *)(v10 + 192) = v11[192];
                *(void *)(v10 + 184) = v95;
                uint64_t v96 = *((void *)v11 + 25);
                *(unsigned char *)(v10 + 208) = v11[208];
                *(void *)(v10 + 200) = v96;
                swift_retain();
              }
            }
            else if (v80 == 1)
            {
              outlined destroy of Text.Encapsulation(v10 + 112);
              long long v87 = *((_OWORD *)v11 + 8);
              long long v86 = *((_OWORD *)v11 + 9);
              *int v78 = *v79;
              *(_OWORD *)(v10 + 128) = v87;
              *(_OWORD *)(v10 + 144) = v86;
              long long v89 = *((_OWORD *)v11 + 11);
              long long v88 = *((_OWORD *)v11 + 12);
              long long v90 = *((_OWORD *)v11 + 10);
              *(unsigned char *)(v10 + 208) = v11[208];
              *(_OWORD *)(v10 + 176) = v89;
              *(_OWORD *)(v10 + 192) = v88;
              *(_OWORD *)(v10 + 160) = v90;
            }
            else
            {
              uint64_t v97 = *(void *)v79;
              *(unsigned char *)(v10 + 120) = v11[120];
              *(void *)int v78 = v97;
              uint64_t v98 = *((void *)v11 + 16);
              *(unsigned char *)(v10 + 136) = v11[136];
              *(void *)(v10 + 128) = v98;
              uint64_t v99 = *((void *)v11 + 18);
              *(unsigned char *)(v10 + 152) = v11[152];
              *(void *)(v10 + 144) = v99;
              uint64_t v100 = *((void *)v11 + 20);
              *(unsigned char *)(v10 + 168) = v11[168];
              *(void *)(v10 + 160) = v100;
              *(void *)(v10 + 176) = *((void *)v11 + 22);
              swift_retain();
              swift_release();
              uint64_t v101 = *((void *)v11 + 23);
              *(unsigned char *)(v10 + 192) = v11[192];
              *(void *)(v10 + 184) = v101;
              uint64_t v102 = *((void *)v11 + 25);
              *(unsigned char *)(v10 + 208) = v11[208];
              *(void *)(v10 + 200) = v102;
            }
            char v103 = (long long *)(v10 + 216);
            char v104 = (long long *)(v11 + 216);
            uint64_t v105 = *((void *)v11 + 31);
            if (*(void *)(v10 + 248) == 1)
            {
              if (v105 == 1)
              {
                long long v106 = *v104;
                long long v107 = *(_OWORD *)(v11 + 232);
                *(void *)(v10 + 248) = *((void *)v11 + 31);
                *char v103 = v106;
                *(_OWORD *)(v10 + 232) = v107;
              }
              else
              {
                *(unsigned char *)(v10 + 216) = v11[216];
                *(unsigned char *)(v10 + 217) = v11[217];
                uint64_t v110 = *((void *)v11 + 28);
                *(unsigned char *)(v10 + 232) = v11[232];
                *(void *)(v10 + 224) = v110;
                *(unsigned char *)(v10 + 233) = v11[233];
                *(void *)(v10 + 240) = *((void *)v11 + 30);
                *(void *)(v10 + 248) = *((void *)v11 + 31);
                swift_bridgeObjectRetain();
              }
            }
            else if (v105 == 1)
            {
              outlined destroy of AccessibilitySpeechAttributes(v10 + 216);
              uint64_t v108 = *((void *)v11 + 31);
              long long v109 = *(_OWORD *)(v11 + 232);
              *char v103 = *v104;
              *(_OWORD *)(v10 + 232) = v109;
              *(void *)(v10 + 248) = v108;
            }
            else
            {
              *(unsigned char *)(v10 + 216) = v11[216];
              *(unsigned char *)(v10 + 217) = v11[217];
              uint64_t v111 = *((void *)v11 + 28);
              *(unsigned char *)(v10 + 232) = v11[232];
              *(void *)(v10 + 224) = v111;
              *(unsigned char *)(v10 + 233) = v11[233];
              *(void *)(v10 + 240) = *((void *)v11 + 30);
              *(void *)(v10 + 248) = *((void *)v11 + 31);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
            }
            int64_t v112 = (long long *)(v10 + 256);
            uint64_t v113 = (long long *)(v11 + 256);
            uint64_t v114 = *(void *)(v10 + 288);
            uint64_t v115 = *((void *)v11 + 36);
            v173 = a3;
            if (v114 == 1)
            {
              if (v115 == 1)
              {
                long long v116 = *v113;
                long long v117 = *((_OWORD *)v11 + 17);
                *(void *)(v10 + 288) = *((void *)v11 + 36);
LABEL_71:
                *int64_t v112 = v116;
                v112[1] = v117;
                goto LABEL_82;
              }
              *(unsigned char *)(v10 + 256) = v11[256];
              *(unsigned char *)(v10 + 257) = v11[257];
              *(unsigned char *)(v10 + 258) = v11[258];
              if (!*((void *)v11 + 36))
              {
                long long v120 = *(_OWORD *)(v11 + 280);
                *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
                *(_OWORD *)(v10 + 280) = v120;
                goto LABEL_82;
              }
            }
            else
            {
              if (v115 == 1)
              {
                outlined destroy of AccessibilityTextAttributes(v10 + 256);
                uint64_t v118 = *((void *)v11 + 36);
                long long v119 = *((_OWORD *)v11 + 17);
                *int64_t v112 = *v113;
                *(_OWORD *)(v10 + 272) = v119;
                *(void *)(v10 + 288) = v118;
                goto LABEL_82;
              }
              *(unsigned char *)(v10 + 256) = v11[256];
              *(unsigned char *)(v10 + 257) = v11[257];
              *(unsigned char *)(v10 + 258) = v11[258];
              int64_t v112 = (long long *)(v10 + 264);
              int v121 = (long long *)(v11 + 264);
              uint64_t v122 = *((void *)v11 + 36);
              if (v114)
              {
                if (v122)
                {
                  uint64_t v123 = *((void *)v11 + 33);
                  uint64_t v124 = *((void *)v11 + 34);
                  char v125 = v11[280];
                  outlined copy of Text.Storage(v123, v124, v125);
                  uint64_t v126 = *(void *)(v10 + 264);
                  uint64_t v127 = *(void *)(v10 + 272);
                  char v128 = *(unsigned char *)(v10 + 280);
                  *(void *)(v10 + 264) = v123;
                  *(void *)(v10 + 272) = v124;
                  *(unsigned char *)(v10 + 280) = v125;
                  outlined consume of Text.Storage(v126, v127, v128);
                  *(void *)(v10 + 288) = *((void *)v11 + 36);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  outlined destroy of Text(v10 + 264);
                  long long v132 = *(_OWORD *)(v11 + 280);
                  *int64_t v112 = *v121;
                  *(_OWORD *)(v10 + 280) = v132;
                }
LABEL_82:
                uint64_t v133 = *(void **)(v10 + 296);
                v134 = (void *)*((void *)v11 + 37);
                *(void *)(v10 + 296) = v134;
                id v135 = v134;

                *(void *)(v10 + 304) = *((void *)v11 + 38);
                swift_retain();
                swift_release();
                *(void *)(v10 + 312) = *((void *)v11 + 39);
                swift_retain();
                swift_release();
                *(unsigned char *)(v10 + 320) = v11[320];
                *(unsigned char *)(v10 + 321) = v11[321];
                v175 = v12;
                uint64_t v136 = v12[21];
                uint64_t v137 = (char *)(v10 + v136);
                v138 = &v11[v136];
                type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
                uint64_t v140 = v139;
                uint64_t v141 = *(void *)(v139 - 8);
                v142 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
                __dstCGFloat a = v137;
                LODWORD(v137) = v142(v137, 2, v139);
                __srcCGFloat a = v138;
                int v143 = v142(v138, 2, v140);
                if (v137)
                {
                  if (v143)
                  {
                    size_t v144 = *(void *)(*(void *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8)
                                     + 64);
                    v145 = __dsta;
LABEL_87:
                    v146 = __srca;
                    memcpy(v145, __srca, v144);
                    goto LABEL_90;
                  }
                  uint64_t v147 = type metadata accessor for Locale.Language();
                  v145 = __dsta;
                  v146 = __srca;
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v147 - 8) + 16))(__dsta, __srca, v147);
                  __dsta[*(int *)(v140 + 48)] = __srca[*(int *)(v140 + 48)];
                  (*(void (**)(char *, void, uint64_t, uint64_t))(v141 + 56))(__dsta, 0, 2, v140);
                }
                else
                {
                  if (v143)
                  {
                    v145 = __dsta;
                    _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)__dsta, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
                    size_t v144 = *(void *)(*(void *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8)
                                     + 64);
                    goto LABEL_87;
                  }
                  uint64_t v148 = type metadata accessor for Locale.Language();
                  v145 = __dsta;
                  v146 = __srca;
                  (*(void (**)(char *, char *, uint64_t))(*(void *)(v148 - 8) + 24))(__dsta, __srca, v148);
                  __dsta[*(int *)(v140 + 48)] = __srca[*(int *)(v140 + 48)];
                }
LABEL_90:
                uint64_t v149 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
                v150 = &v145[v149];
                v151 = &v146[v149];
                char v152 = v151[8];
                *(void *)v150 = *(void *)v151;
                v150[8] = v152;
                *(void *)(v10 + v175[22]) = *(void *)&v11[v175[22]];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                uint64_t v153 = v175[23];
                long long v154 = (void *)(v10 + v153);
                long long v155 = &v11[v153];
                uint64_t v156 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
                uint64_t v157 = *(void *)(v156 - 8);
                long long v158 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v157 + 48);
                __dstdouble b = v154;
                LODWORD(v154) = v158(v154, 1, v156);
                int v159 = v158(v155, 1, v156);
                if (v154)
                {
                  if (!v159)
                  {
                    (*(void (**)(void *, char *, uint64_t))(v157 + 16))(__dstb, v155, v156);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v157 + 56))(__dstb, 0, 1, v156);
                    goto LABEL_98;
                  }
                  _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
                  size_t v161 = *(void *)(*(void *)(v160 - 8) + 64);
                  v162 = __dstb;
                }
                else
                {
                  if (!v159)
                  {
                    (*(void (**)(void *, char *, uint64_t))(v157 + 24))(__dstb, v155, v156);
                    goto LABEL_98;
                  }
                  (*(void (**)(void *, uint64_t))(v157 + 8))(__dstb, v156);
                  _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
                  size_t v161 = *(void *)(*(void *)(v163 - 8) + 64);
                  v162 = __dstb;
                }
                memcpy(v162, v155, v161);
LABEL_98:
                a3 = v173;
                *(void *)(v10 + v175[24]) = *(void *)&v11[v175[24]];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                goto LABEL_99;
              }
              if (!v122)
              {
                long long v116 = *v121;
                long long v117 = *(_OWORD *)(v11 + 280);
                goto LABEL_71;
              }
            }
            uint64_t v129 = *((void *)v11 + 33);
            uint64_t v130 = *((void *)v11 + 34);
            char v131 = v11[280];
            outlined copy of Text.Storage(v129, v130, v131);
            *(void *)(v10 + 264) = v129;
            *(void *)(v10 + 272) = v130;
            *(unsigned char *)(v10 + 280) = v131;
            *(void *)(v10 + 288) = *((void *)v11 + 36);
            swift_bridgeObjectRetain();
            goto LABEL_82;
          }
          outlined destroy of Text.LineStyle(v10 + 96);
        }
        else if (v77 >= 2)
        {
          *(void *)(v10 + 96) = *((void *)v11 + 12);
          *(void *)(v10 + 104) = *((void *)v11 + 13);
          swift_retain();
          goto LABEL_54;
        }
        *(_OWORD *)(v10 + 96) = *((_OWORD *)v11 + 6);
        goto LABEL_54;
      }
      outlined destroy of Text.LineStyle(v10 + 80);
    }
    else if (v76 >= 2)
    {
      *(void *)(v10 + 80) = *((void *)v11 + 10);
      *(void *)(v10 + 88) = *((void *)v11 + 11);
      swift_retain();
      goto LABEL_47;
    }
    *(_OWORD *)(v10 + 80) = *((_OWORD *)v11 + 5);
    goto LABEL_47;
  }
  if (v16)
  {
LABEL_9:
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    memcpy((void *)v10, v11, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_99;
  }
  uint64_t v17 = *(void *)v11;
  if (*(void *)v11 >= 2uLL) {
    uint64_t v17 = swift_retain();
  }
  *(void *)uint64_t v10 = v17;
  *(void *)(v10 + 8) = *((void *)v11 + 1);
  unint64_t v18 = *((void *)v11 + 2);
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v18);
  *(void *)(v10 + 16) = v18;
  *(void *)(v10 + 24) = *((void *)v11 + 3);
  uint64_t v19 = *((void *)v11 + 4);
  *(unsigned char *)(v10 + 40) = v11[40];
  *(void *)(v10 + 32) = v19;
  uint64_t v20 = *((void *)v11 + 6);
  *(unsigned char *)(v10 + 56) = v11[56];
  *(void *)(v10 + 48) = v20;
  uint64_t v21 = *((void *)v11 + 8);
  *(unsigned char *)(v10 + 72) = v11[72];
  *(void *)(v10 + 64) = v21;
  unint64_t v22 = *((void *)v11 + 11) - 1;
  swift_retain();
  if (v22 >= 2)
  {
    *(void *)(v10 + 80) = *((void *)v11 + 10);
    *(void *)(v10 + 88) = *((void *)v11 + 11);
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v10 + 80) = *((_OWORD *)v11 + 5);
  }
  if ((unint64_t)(*((void *)v11 + 13) - 1) >= 2)
  {
    *(void *)(v10 + 96) = *((void *)v11 + 12);
    *(void *)(v10 + 104) = *((void *)v11 + 13);
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v10 + 96) = *((_OWORD *)v11 + 6);
  }
  uint64_t v25 = (_OWORD *)(v10 + 112);
  uint64_t v26 = (long long *)(v11 + 112);
  if (*((void *)v11 + 22) == 1)
  {
    long long v27 = *v26;
    long long v28 = *((_OWORD *)v11 + 9);
    *(_OWORD *)(v10 + 128) = *((_OWORD *)v11 + 8);
    *(_OWORD *)(v10 + 144) = v28;
    *uint64_t v25 = v27;
    long long v29 = *((_OWORD *)v11 + 10);
    long long v30 = *((_OWORD *)v11 + 11);
    long long v31 = *((_OWORD *)v11 + 12);
    *(unsigned char *)(v10 + 208) = v11[208];
    *(_OWORD *)(v10 + 176) = v30;
    *(_OWORD *)(v10 + 192) = v31;
    *(_OWORD *)(v10 + 160) = v29;
  }
  else
  {
    uint64_t v32 = *(void *)v26;
    *(unsigned char *)(v10 + 120) = v11[120];
    *(void *)uint64_t v25 = v32;
    uint64_t v33 = *((void *)v11 + 16);
    *(unsigned char *)(v10 + 136) = v11[136];
    *(void *)(v10 + 128) = v33;
    uint64_t v34 = *((void *)v11 + 18);
    *(unsigned char *)(v10 + 152) = v11[152];
    *(void *)(v10 + 144) = v34;
    uint64_t v35 = *((void *)v11 + 20);
    *(unsigned char *)(v10 + 168) = v11[168];
    *(void *)(v10 + 160) = v35;
    *(void *)(v10 + 176) = *((void *)v11 + 22);
    uint64_t v36 = *((void *)v11 + 23);
    *(unsigned char *)(v10 + 192) = v11[192];
    *(void *)(v10 + 184) = v36;
    uint64_t v37 = *((void *)v11 + 25);
    *(unsigned char *)(v10 + 208) = v11[208];
    *(void *)(v10 + 200) = v37;
    swift_retain();
  }
  if (*((void *)v11 + 31) == 1)
  {
    long long v38 = *(_OWORD *)(v11 + 216);
    long long v39 = *(_OWORD *)(v11 + 232);
    *(void *)(v10 + 248) = *((void *)v11 + 31);
    *(_OWORD *)(v10 + 216) = v38;
    *(_OWORD *)(v10 + 232) = v39;
  }
  else
  {
    *(unsigned char *)(v10 + 216) = v11[216];
    *(unsigned char *)(v10 + 217) = v11[217];
    uint64_t v40 = *((void *)v11 + 28);
    *(unsigned char *)(v10 + 232) = v11[232];
    *(void *)(v10 + 224) = v40;
    *(unsigned char *)(v10 + 233) = v11[233];
    *(void *)(v10 + 240) = *((void *)v11 + 30);
    *(void *)(v10 + 248) = *((void *)v11 + 31);
    swift_bridgeObjectRetain();
  }
  v171 = v4;
  v172 = a3;
  v174 = v12;
  __srdouble c = v13;
  v165 = v5;
  if (*((void *)v11 + 36) == 1)
  {
    uint64_t v41 = (_OWORD *)(v10 + 256);
    long long v42 = *((_OWORD *)v11 + 16);
    long long v43 = *((_OWORD *)v11 + 17);
    *(void *)(v10 + 288) = *((void *)v11 + 36);
LABEL_30:
    *uint64_t v41 = v42;
    v41[1] = v43;
    goto LABEL_31;
  }
  *(unsigned char *)(v10 + 256) = v11[256];
  *(unsigned char *)(v10 + 257) = v11[257];
  *(unsigned char *)(v10 + 258) = v11[258];
  if (!*((void *)v11 + 36))
  {
    uint64_t v41 = (_OWORD *)(v10 + 264);
    long long v42 = *(_OWORD *)(v11 + 264);
    long long v43 = *(_OWORD *)(v11 + 280);
    goto LABEL_30;
  }
  uint64_t v44 = *((void *)v11 + 33);
  uint64_t v45 = *((void *)v11 + 34);
  char v46 = v11[280];
  outlined copy of Text.Storage(v44, v45, v46);
  *(void *)(v10 + 264) = v44;
  *(void *)(v10 + 272) = v45;
  *(unsigned char *)(v10 + 280) = v46;
  *(void *)(v10 + 288) = *((void *)v11 + 36);
  swift_bridgeObjectRetain();
LABEL_31:
  id v47 = (void *)*((void *)v11 + 37);
  *(void *)(v10 + 296) = v47;
  *(void *)(v10 + 304) = *((void *)v11 + 38);
  *(void *)(v10 + 312) = *((void *)v11 + 39);
  *(unsigned char *)(v10 + 320) = v11[320];
  *(unsigned char *)(v10 + 321) = v11[321];
  uint64_t v48 = v12[21];
  __dst = (char *)(v10 + v48);
  int v49 = &v11[v48];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v51 = v50;
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  id v54 = v47;
  swift_retain();
  int v55 = v49;
  swift_retain();
  if (v53(v49, 2, v51))
  {
    uint64_t v56 = type metadata accessor for TypesettingLanguage.Storage(0);
    uint64_t v57 = __dst;
    memcpy(__dst, v49, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v58 = type metadata accessor for Locale.Language();
    uint64_t v57 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v58 - 8) + 16))(__dst, v49, v58);
    __dst[*(int *)(v51 + 48)] = v49[*(int *)(v51 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 2, v51);
  }
  uint64_t v5 = v165;
  uint64_t v59 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v60 = &v57[v59];
  unsigned __int8 v61 = &v55[v59];
  char v62 = v61[8];
  *(void *)uint64_t v60 = *(void *)v61;
  v60[8] = v62;
  *(void *)(v10 + v12[22]) = *(void *)&v11[v12[22]];
  uint64_t v63 = v12[23];
  unsigned int v64 = (void *)(v10 + v63);
  uint64_t v65 = &v11[v63];
  uint64_t v66 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v67 = *(void *)(v66 - 8);
  int v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  swift_bridgeObjectRetain();
  if (v68(v65, 1, v66))
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v64, v65, *(void *)(*(void *)(v69 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v67 + 16))(v64, v65, v66);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  a3 = v172;
  *(void *)(v10 + v174[24]) = *(void *)&v11[v174[24]];
  int v70 = (void (*)(uint64_t, void, uint64_t, int *))__src[7];
  swift_bridgeObjectRetain();
  v70(v10, 0, 1, v174);
  uint64_t v4 = v171;
LABEL_99:
  *(_DWORD *)((char *)v5 + a3[7]) = *(_DWORD *)((char *)v4 + a3[7]);
  *((unsigned char *)v5 + a3[8]) = *((unsigned char *)v4 + a3[8]);
  *((unsigned char *)v5 + a3[9]) = *((unsigned char *)v4 + a3[9]);
  *((unsigned char *)v5 + a3[10]) = *((unsigned char *)v4 + a3[10]);
  return v5;
}

uint64_t initializeWithTake for ImageResolutionContext(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  id v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v10 + 48))(v8, 1, v9))
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v10;
    long long v12 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v12;
    *((void *)v7 + 4) = *((void *)v8 + 4);
    *((unsigned char *)v7 + 40) = *((unsigned char *)v8 + 40);
    *((void *)v7 + 6) = *((void *)v8 + 6);
    *((unsigned char *)v7 + 56) = *((unsigned char *)v8 + 56);
    *((unsigned char *)v7 + 72) = *((unsigned char *)v8 + 72);
    *((void *)v7 + 8) = *((void *)v8 + 8);
    long long v13 = v8[6];
    _OWORD v7[5] = v8[5];
    void v7[6] = v13;
    long long v14 = v8[12];
    v7[11] = v8[11];
    v7[12] = v14;
    *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
    long long v15 = v8[8];
    v7[7] = v8[7];
    v7[8] = v15;
    long long v16 = v8[10];
    v7[9] = v8[9];
    v7[10] = v16;
    long long v17 = *(_OWORD *)((char *)v8 + 216);
    long long v18 = *(_OWORD *)((char *)v8 + 232);
    *((void *)v7 + 31) = *((void *)v8 + 31);
    *(_OWORD *)((char *)v7 + 232) = v18;
    *(_OWORD *)((char *)v7 + 216) = v17;
    long long v19 = v8[17];
    unsigned char v7[16] = v8[16];
    v7[17] = v19;
    uint64_t v20 = *((void *)v8 + 37);
    *((void *)v7 + 36) = *((void *)v8 + 36);
    *((void *)v7 + 37) = v20;
    v7[19] = v8[19];
    *((_WORD *)v7 + 160) = *((_WORD *)v8 + 160);
    uint64_t v21 = v9[21];
    unint64_t v22 = (char *)v7 + v21;
    uint64_t v23 = (char *)v8 + v21;
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v23, 2, v24))
    {
      uint64_t v27 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v22, v23, v28);
      v22[*(int *)(v25 + 48)] = v23[*(int *)(v25 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 2, v25);
    }
    uint64_t v29 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    long long v30 = &v22[v29];
    long long v31 = &v23[v29];
    *(void *)long long v30 = *(void *)v31;
    v30[8] = v31[8];
    *(void *)((char *)v7 + v9[22]) = *(void *)((char *)v8 + v9[22]);
    uint64_t v32 = v9[23];
    uint64_t v33 = (char *)v7 + v32;
    uint64_t v34 = (char *)v8 + v32;
    uint64_t v35 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    *(void *)((char *)v7 + v9[24]) = *(void *)((char *)v8 + v9[24]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v41 + 56))(v7, 0, 1, v9);
  }
  uint64_t v38 = a3[8];
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v38) = *(unsigned char *)(a2 + v38);
  uint64_t v39 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v39) = *(unsigned char *)(a2 + v39);
  return a1;
}

void *assignWithTake for ImageResolutionContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = (void *)a1[2];
  a1[2] = a2[2];

  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v11 = *((void *)v10 - 1);
  long long v12 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      _s7SwiftUI22ImageResolutionContextVWOhTm_0(v8, type metadata accessor for Text.Style);
      goto LABEL_7;
    }
    unint64_t v32 = *(void *)v9;
    if (*(void *)v8 >= 2uLL)
    {
      if (v32 >= 2)
      {
        *(void *)uint64_t v8 = v32;
        swift_release();
LABEL_18:
        *(void *)(v8 + 8) = *((void *)v9 + 1);
        swift_bridgeObjectRelease();
        unint64_t v43 = *(void *)(v8 + 16);
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        outlined consume of Text.Style.TextStyleColor(v43);
        *(void *)(v8 + 24) = *((void *)v9 + 3);
        swift_release();
        *(void *)(v8 + 32) = *((void *)v9 + 4);
        *(unsigned char *)(v8 + 40) = v9[40];
        *(void *)(v8 + 48) = *((void *)v9 + 6);
        *(unsigned char *)(v8 + 56) = v9[56];
        *(void *)(v8 + 64) = *((void *)v9 + 8);
        *(unsigned char *)(v8 + 72) = v9[72];
        uint64_t v44 = v9 + 80;
        if ((unint64_t)(*(void *)(v8 + 88) - 1) >= 2)
        {
          uint64_t v45 = *((void *)v9 + 11);
          if ((unint64_t)(v45 - 1) >= 2)
          {
            *(void *)(v8 + 80) = *v44;
            *(void *)(v8 + 88) = v45;
            swift_release();
LABEL_23:
            char v46 = v9 + 96;
            if ((unint64_t)(*(void *)(v8 + 104) - 1) >= 2)
            {
              uint64_t v47 = *((void *)v9 + 13);
              if ((unint64_t)(v47 - 1) >= 2)
              {
                *(void *)(v8 + 96) = *v46;
                *(void *)(v8 + 104) = v47;
                swift_release();
LABEL_28:
                uint64_t v48 = (void *)(v8 + 112);
                int v49 = v9 + 112;
                if (*(void *)(v8 + 176) != 1)
                {
                  uint64_t v50 = *((void *)v9 + 22);
                  if (v50 != 1)
                  {
                    void *v48 = *v49;
                    *(unsigned char *)(v8 + 120) = v9[120];
                    *(void *)(v8 + 128) = *((void *)v9 + 16);
                    *(unsigned char *)(v8 + 136) = v9[136];
                    *(void *)(v8 + 144) = *((void *)v9 + 18);
                    *(unsigned char *)(v8 + 152) = v9[152];
                    *(unsigned char *)(v8 + 168) = v9[168];
                    *(void *)(v8 + 160) = *((void *)v9 + 20);
                    *(void *)(v8 + 176) = v50;
                    swift_release();
                    *(void *)(v8 + 184) = *((void *)v9 + 23);
                    *(unsigned char *)(v8 + 192) = v9[192];
                    *(void *)(v8 + 200) = *((void *)v9 + 25);
                    *(unsigned char *)(v8 + 208) = v9[208];
LABEL_33:
                    if (*(void *)(v8 + 248) != 1)
                    {
                      uint64_t v54 = *((void *)v9 + 31);
                      if (v54 != 1)
                      {
                        *(_WORD *)(v8 + 216) = *((_WORD *)v9 + 108);
                        *(void *)(v8 + 224) = *((void *)v9 + 28);
                        *(_WORD *)(v8 + 232) = *((_WORD *)v9 + 116);
                        *(void *)(v8 + 240) = *((void *)v9 + 30);
                        *(void *)(v8 + 248) = v54;
                        swift_bridgeObjectRelease();
LABEL_38:
                        uint64_t v56 = *(void *)(v8 + 288);
                        uint64_t v101 = a3;
                        if (v56 == 1)
                        {
LABEL_41:
                          long long v58 = *((_OWORD *)v9 + 17);
                          *(_OWORD *)(v8 + 256) = *((_OWORD *)v9 + 16);
                          *(_OWORD *)(v8 + 272) = v58;
                          *(void *)(v8 + 288) = *((void *)v9 + 36);
                          goto LABEL_42;
                        }
                        uint64_t v57 = *((void *)v9 + 36);
                        if (v57 == 1)
                        {
                          outlined destroy of AccessibilityTextAttributes(v8 + 256);
                          goto LABEL_41;
                        }
                        *(unsigned char *)(v8 + 256) = v9[256];
                        *(_WORD *)(v8 + 257) = *(_WORD *)(v9 + 257);
                        int v70 = (_OWORD *)(v8 + 264);
                        unint64_t v71 = v9 + 264;
                        if (v56)
                        {
                          if (v57)
                          {
                            char v72 = v9[280];
                            uint64_t v73 = *(void *)(v8 + 264);
                            uint64_t v74 = *(void *)(v8 + 272);
                            char v75 = *(unsigned char *)(v8 + 280);
                            *int v70 = *v71;
                            *(unsigned char *)(v8 + 280) = v72;
                            outlined consume of Text.Storage(v73, v74, v75);
                            *(void *)(v8 + 288) = *((void *)v9 + 36);
                            swift_bridgeObjectRelease();
                            goto LABEL_42;
                          }
                          outlined destroy of Text(v8 + 264);
                        }
                        long long v95 = *(_OWORD *)(v9 + 280);
                        *int v70 = *v71;
                        *(_OWORD *)(v8 + 280) = v95;
LABEL_42:
                        uint64_t v59 = *(void **)(v8 + 296);
                        *(void *)(v8 + 296) = *((void *)v9 + 37);

                        *(void *)(v8 + 304) = *((void *)v9 + 38);
                        swift_release();
                        *(void *)(v8 + 312) = *((void *)v9 + 39);
                        swift_release();
                        *(_WORD *)(v8 + 320) = *((_WORD *)v9 + 160);
                        uint64_t v60 = v10[21];
                        unsigned __int8 v61 = (char *)(v8 + v60);
                        char v62 = &v9[v60];
                        type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
                        uint64_t v64 = v63;
                        uint64_t v96 = *(void *)(v63 - 8);
                        uint64_t v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v96 + 48);
                        __dst = v61;
                        LODWORD(v61) = v65(v61, 2, v63);
                        int v66 = v65(v62, 2, v64);
                        if (v61)
                        {
                          if (v66)
                          {
                            size_t v67 = *(void *)(*(void *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8)
                                            + 64);
                            int v68 = __dst;
LABEL_47:
                            uint64_t v69 = v62;
                            memcpy(v68, v62, v67);
                            goto LABEL_53;
                          }
                          uint64_t v76 = type metadata accessor for Locale.Language();
                          uint64_t v69 = v62;
                          int v68 = __dst;
                          (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 32))(__dst, v62, v76);
                          __dst[*(int *)(v64 + 48)] = v62[*(int *)(v64 + 48)];
                          (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(__dst, 0, 2, v64);
                        }
                        else
                        {
                          if (v66)
                          {
                            int v68 = __dst;
                            _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
                            size_t v67 = *(void *)(*(void *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8)
                                            + 64);
                            goto LABEL_47;
                          }
                          uint64_t v77 = type metadata accessor for Locale.Language();
                          uint64_t v69 = v62;
                          int v68 = __dst;
                          (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 40))(__dst, v62, v77);
                          __dst[*(int *)(v64 + 48)] = v62[*(int *)(v64 + 48)];
                        }
LABEL_53:
                        uint64_t v78 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
                        int v79 = &v68[v78];
                        uint64_t v80 = &v69[v78];
                        *(void *)int v79 = *(void *)v80;
                        v79[8] = v80[8];
                        *(void *)(v8 + v10[22]) = *(void *)&v9[v10[22]];
                        swift_bridgeObjectRelease();
                        uint64_t v97 = v10;
                        uint64_t v81 = v10[23];
                        long long v82 = (void *)(v8 + v81);
                        long long v83 = &v9[v81];
                        uint64_t v84 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
                        uint64_t v85 = *(void *)(v84 - 8);
                        long long v86 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v85 + 48);
                        __dstCGFloat a = v82;
                        LODWORD(v82) = v86(v82, 1, v84);
                        int v87 = v86(v83, 1, v84);
                        if (v82)
                        {
                          if (!v87)
                          {
                            (*(void (**)(void *, char *, uint64_t))(v85 + 32))(__dsta, v83, v84);
                            (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(__dsta, 0, 1, v84);
                            goto LABEL_61;
                          }
                          _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
                          size_t v89 = *(void *)(*(void *)(v88 - 8) + 64);
                          long long v90 = __dsta;
                        }
                        else
                        {
                          if (!v87)
                          {
                            (*(void (**)(void *, char *, uint64_t))(v85 + 40))(__dsta, v83, v84);
                            goto LABEL_61;
                          }
                          (*(void (**)(void *, uint64_t))(v85 + 8))(__dsta, v84);
                          _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
                          size_t v89 = *(void *)(*(void *)(v91 - 8) + 64);
                          long long v90 = __dsta;
                        }
                        memcpy(v90, v83, v89);
LABEL_61:
                        a3 = v101;
                        *(void *)(v8 + v97[24]) = *(void *)&v9[v97[24]];
                        swift_bridgeObjectRelease();
                        goto LABEL_62;
                      }
                      outlined destroy of AccessibilitySpeechAttributes(v8 + 216);
                    }
                    long long v55 = *(_OWORD *)(v9 + 232);
                    *(_OWORD *)(v8 + 216) = *(_OWORD *)(v9 + 216);
                    *(_OWORD *)(v8 + 232) = v55;
                    *(void *)(v8 + 248) = *((void *)v9 + 31);
                    goto LABEL_38;
                  }
                  outlined destroy of Text.Encapsulation(v8 + 112);
                }
                long long v51 = *((_OWORD *)v9 + 12);
                *(_OWORD *)(v8 + 176) = *((_OWORD *)v9 + 11);
                *(_OWORD *)(v8 + 192) = v51;
                *(unsigned char *)(v8 + 208) = v9[208];
                long long v52 = *((_OWORD *)v9 + 8);
                *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
                *(_OWORD *)(v8 + 128) = v52;
                long long v53 = *((_OWORD *)v9 + 10);
                *(_OWORD *)(v8 + 144) = *((_OWORD *)v9 + 9);
                *(_OWORD *)(v8 + 160) = v53;
                goto LABEL_33;
              }
              outlined destroy of Text.LineStyle(v8 + 96);
            }
            *(_OWORD *)(v8 + 96) = *(_OWORD *)v46;
            goto LABEL_28;
          }
          outlined destroy of Text.LineStyle(v8 + 80);
        }
        *(_OWORD *)(v8 + 80) = *(_OWORD *)v44;
        goto LABEL_23;
      }
      outlined destroy of Font(v8);
      unint64_t v32 = *(void *)v9;
    }
    *(void *)uint64_t v8 = v32;
    goto LABEL_18;
  }
  if (v14)
  {
LABEL_7:
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    memcpy((void *)v8, v9, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_62;
  }
  uint64_t v100 = a3;
  long long v15 = *((_OWORD *)v9 + 1);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v15;
  *(void *)(v8 + 32) = *((void *)v9 + 4);
  *(unsigned char *)(v8 + 40) = v9[40];
  *(void *)(v8 + 48) = *((void *)v9 + 6);
  *(unsigned char *)(v8 + 56) = v9[56];
  *(unsigned char *)(v8 + 72) = v9[72];
  *(void *)(v8 + 64) = *((void *)v9 + 8);
  long long v16 = *((_OWORD *)v9 + 6);
  *(_OWORD *)(v8 + 80) = *((_OWORD *)v9 + 5);
  *(_OWORD *)(v8 + 96) = v16;
  long long v17 = *((_OWORD *)v9 + 12);
  *(_OWORD *)(v8 + 176) = *((_OWORD *)v9 + 11);
  *(_OWORD *)(v8 + 192) = v17;
  *(unsigned char *)(v8 + 208) = v9[208];
  long long v18 = *((_OWORD *)v9 + 8);
  *(_OWORD *)(v8 + 112) = *((_OWORD *)v9 + 7);
  *(_OWORD *)(v8 + 128) = v18;
  long long v19 = *((_OWORD *)v9 + 10);
  *(_OWORD *)(v8 + 144) = *((_OWORD *)v9 + 9);
  *(_OWORD *)(v8 + 160) = v19;
  long long v20 = *(_OWORD *)(v9 + 216);
  long long v21 = *(_OWORD *)(v9 + 232);
  *(void *)(v8 + 248) = *((void *)v9 + 31);
  *(_OWORD *)(v8 + 232) = v21;
  *(_OWORD *)(v8 + 216) = v20;
  long long v22 = *((_OWORD *)v9 + 17);
  *(_OWORD *)(v8 + 256) = *((_OWORD *)v9 + 16);
  *(_OWORD *)(v8 + 272) = v22;
  uint64_t v23 = *((void *)v9 + 37);
  *(void *)(v8 + 288) = *((void *)v9 + 36);
  *(void *)(v8 + 296) = v23;
  *(_OWORD *)(v8 + 304) = *((_OWORD *)v9 + 19);
  *(_WORD *)(v8 + 320) = *((_WORD *)v9 + 160);
  uint64_t v24 = v10[21];
  uint64_t v25 = (char *)(v8 + v24);
  uint64_t v26 = &v9[v24];
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 2, v27))
  {
    uint64_t v30 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v33 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v25, v26, v33);
    v25[*(int *)(v28 + 48)] = v26[*(int *)(v28 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 2, v28);
  }
  uint64_t v34 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v35 = &v25[v34];
  uint64_t v36 = &v26[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  *(void *)(v8 + v10[22]) = *(void *)&v9[v10[22]];
  uint64_t v37 = v10[23];
  uint64_t v38 = (void *)(v8 + v37);
  uint64_t v39 = &v9[v37];
  uint64_t v40 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  a3 = v100;
  *(void *)(v8 + v10[24]) = *(void *)&v9[v10[24]];
  (*(void (**)(uint64_t, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
LABEL_62:
  uint64_t v92 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v92) = *((unsigned char *)a2 + v92);
  uint64_t v93 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v93) = *((unsigned char *)a2 + v93);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageResolutionContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246107DB8);
}

uint64_t sub_246107DB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    long long v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ImageResolutionContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246107EA4);
}

void *sub_246107EA4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *unint64_t result = a2;
  }
  else
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageResolutionContext.Options()
{
  return &type metadata for ImageResolutionContext.Options;
}

uint64_t dispatch thunk of ImageProvider.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ImageProvider.resolveNamedImage(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static ImageStyleProtocol._makeImageView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for Image.Style()
{
  return &type metadata for Image.Style;
}

uint64_t method lookup function for AnyImageProviderBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyImageProviderBox);
}

uint64_t method lookup function for ImageProviderBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ImageProviderBox);
}

void *type metadata accessor for Image.MakeRepresentableContext()
{
  return &unk_26FA7D818;
}

unint64_t instantiation function for generic protocol witness table for Image.MakeRepresentableContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t assignWithCopy for Image.ImageViewChild(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 40);
  int v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  id v6 = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v7;
  int v8 = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  int v9 = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = v9;
  int v10 = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v10;
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  return a1;
}

__n128 __swift_memcpy110_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 94) = *(long long *)((char *)a2 + 94);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Image.ImageViewChild(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  swift_release();
  uint64_t v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.ImageViewChild(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 110)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.ImageViewChild(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 108) = 0;
    *(_DWORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 110) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 110) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_246108328()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for BloomTextEffect()
{
  return &type metadata for BloomTextEffect;
}

unint64_t lazy protocol witness table accessor for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState()
{
  unint64_t result = lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState;
  if (!lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BloomTextEffect.LayoutState and conformance BloomTextEffect.LayoutState);
  }
  return result;
}

id closure #1 in BloomTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_246214510;
  *(void *)(v4 + 32) = 0x408F400000000000;
  id v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x24C522D60](v6);
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

id closure #2 in BloomTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<WeightDeltaModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WeightDeltaModifier and conformance WeightDeltaModifier, (uint64_t)&type metadata for WeightDeltaModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_246214520;
  *(void *)(v4 + 32) = 0x408F400000000000;
  id v5 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain();
  MEMORY[0x24C522D60](v6);
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  return v5;
}

uint64_t closure #3 in BloomTextEffect.configuration(_:)(double *a1, uint64_t a2, uint64_t a3)
{
  double v5 = *a1;
  double v6 = a1[1];
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a2, a3, 1, a2, &v32, 0.0);
  double v11 = exp((v6 + -1.0) * -0.75);
  if (v11 < 0.0) {
    double v11 = 0.0;
  }
  uint64_t v38 = v7;
  uint64_t v39 = v8;
  if (v11 <= 1.0) {
    double v12 = v11;
  }
  else {
    double v12 = 1.0;
  }
  uint64_t v40 = v9;
  uint64_t v41 = v10;
  uint64_t v13 = swift_allocObject();
  *(double *)(v13 + 16) = v5;
  *(double *)(v13 + 24) = v6;
  *(void *)(v13 + 32) = v7;
  *(void *)(v13 + 40) = v8;
  *(void *)(v13 + 48) = v9;
  *(void *)(v13 + 56) = v10;
  long long v14 = v35;
  *(_OWORD *)(v13 + 96) = v34;
  *(_OWORD *)(v13 + 112) = v14;
  *(_OWORD *)(v13 + 128) = v36;
  *(void *)(v13 + 144) = v37;
  long long v15 = v33;
  *(__n128 *)(v13 + 64) = v32;
  *(_OWORD *)(v13 + 80) = v15;
  *(double *)(v13 + 152) = v12;
  uint64_t v16 = swift_allocObject();
  long long v17 = v35;
  *(_OWORD *)(v16 + 48) = v34;
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 80) = v36;
  uint64_t v18 = v37;
  long long v19 = v33;
  *(__n128 *)(v16 + 16) = v32;
  *(_OWORD *)(v16 + 32) = v19;
  *(void *)(v16 + 96) = v18;
  *(void *)(v16 + 104) = partial apply for closure #2 in closure #3 in BloomTextEffect.configuration(_:);
  *(void *)(v16 + 112) = v13;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2461B9DC0;
  *(void *)(v20 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v21 = v20 + 32;
  *(void *)(v20 + 40) = v16;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v20;
  int64_t v23 = *(void *)(v20 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v32);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v38);
  outlined retain of LinearGradient((uint64_t)&v39);
  outlined retain of LinearGradient((uint64_t)&v40);
  outlined retain of LinearGradient((uint64_t)&v41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 1, MEMORY[0x263F8EE78]);
  uint64_t v25 = v24;
  if (!*(void *)(v20 + 16))
  {
    if (!v23) {
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v26 = v24[2];
  if ((v24[3] >> 1) - v26 < v23)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v27 = (unint64_t)&v24[2 * v26 + 4];
  if (v21 < v27 + 16 * v23 && v27 < v21 + 16 * v23) {
    goto LABEL_18;
  }
  swift_arrayInitWithCopy();
  if (!v23)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)&v32);
    return (uint64_t)v25;
  }
  uint64_t v28 = v25[2];
  BOOL v29 = __OFADD__(v28, v23);
  uint64_t v30 = v28 + v23;
  if (!v29)
  {
    v25[2] = v30;
    goto LABEL_14;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #3 in BloomTextEffect.configuration(_:)(void *a1, uint64_t a2)
{
  Swift::UInt64 v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 32);
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for Text.Effect.ConcreteLayoutState<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.ConcreteLayoutState);
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  uint64_t v6 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v6, v3, v5, v4, v16);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, isUniquelyReferenced_nonNull_native, 0.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v16);
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 2;
  uint64_t v9 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v9, v3, v8, v4, v17);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v17);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  v18[0] = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, v10, 1.0);
  *a1 = v18[0];
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.BaseFragment((uint64_t)v17);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = 1;
  uint64_t v12 = swift_retain();
  specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v12, v3, v11, v4, v18);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v18);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v13, -1.0);
  *a1 = v15;
  swift_bridgeObjectRelease();
  return outlined release of Text.Effect.BaseFragment((uint64_t)v18);
}

unint64_t closure #2 in closure #3 in BloomTextEffect.configuration(_:)(unint64_t a1, double *a2, uint64_t a3, void *a4, double a5)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  double v7 = *(double *)&a1;
  if (*(void *)(*(void *)(a3 + 16) + 16) <= a1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v11 = *(void *)(a3 + 32);
  if (*(void *)(v11 + 16) <= a1)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v6 = a4;
  uint64_t v5 = a2;
  uint64_t v12 = v11 + 40 * a1;
  double v14 = *(double *)(v12 + 32);
  double v13 = *(double *)(v12 + 40);
  double v15 = a2[5] - a2[4];
  double v8 = 0.0;
  if (v15 < 0.0)
  {
    if (v14 >= 0.0) {
      goto LABEL_11;
    }
    double v8 = 1.0;
    double v15 = 0.0;
    if (v14 + v13 <= 0.0) {
      goto LABEL_11;
    }
LABEL_10:
    double v8 = (v15 - v14) / v13;
    goto LABEL_11;
  }
  if (v15 > v14)
  {
    double v8 = 1.0;
    if (v14 + v13 > v15) {
      goto LABEL_10;
    }
  }
LABEL_11:
  double v16 = *a2;
  if (__OFSUB__(*(void *)a2, a1))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  double v43 = a5;
  double v17 = *(double *)(v12 + 64);
  uint64_t v44 = *(void *)(v12 + 56);
  uint64_t v45 = *(ValueMetadata **)(v12 + 48);
  double v19 = a2[29];
  double v18 = a2[30];
  double v20 = a2[27];
  double v21 = a2[28];
  double v22 = a2[26];
  double v23 = sin(v8 * -6.28318531) * (1.0 - (v8 + v8 + -1.0) * (v8 + v8 + -1.0));
  double v24 = v8 * v23 * 0.3 + 1.0;
  if (*(void *)&v16 == *(void *)&v7) {
    double v25 = v22;
  }
  else {
    double v25 = 0.0;
  }
  if (*(void *)&v16 == *(void *)&v7)
  {
    double v26 = v21;
  }
  else
  {
    double v20 = 0.0;
    double v26 = 0.0;
  }
  if (*(void *)&v16 == *(void *)&v7) {
    double v27 = v19;
  }
  else {
    double v27 = 0.0;
  }
  if (*(void *)&v16 == *(void *)&v7) {
    double v28 = v18;
  }
  else {
    double v28 = 0.0;
  }
  double v29 = v20 - v27;
  double v30 = v28 + v27;
  *(double *)uint64_t v54 = v23;
  memset(&v54[1], 0, 24);
  v54[4] = CGRectGetMidX(*(CGRect *)&v25);
  *(double *)&v54[5] = v20;
  *(double *)&v54[6] = v24;
  *(double *)&v54[7] = v24;
  v54[8] = 0x3FF0000000000000;
  char v55 = 0;
  uint64_t v47 = v45;
  uint64_t v48 = v44;
  double v49 = v17;
  Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v54, v7, (double *)&v47, (uint64_t)v46);
  unint64_t result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v46, 0, 0, 0, 1);
  if (*(void *)&v16 == *(void *)&v7)
  {
    double v9 = v5[17];
    uint64_t v32 = *((void *)v5 + 32);
    uint64_t v33 = *((void *)v5 + 1);
    uint64_t v47 = &type metadata for Text.Effect.DrawingStateAttribute;
    uint64_t v48 = v33;
    double v49 = v7;
    uint64_t v50 = 0;
    char v51 = 1;
    uint64_t v52 = 0;
    char v53 = 1;
    swift_beginAccess();
    if (*(void *)(*(void *)(v32 + 24) + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v47), (v34 & 1) != 0)
      && (_s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute, (uint64_t)&type metadata for Text.Effect.DrawingStateAttribute, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.AttributeTracker.ValueBox), (uint64_t v35 = swift_dynamicCastClass()) != 0))
    {
      double v8 = *(double *)(v35 + 96);
      double v10 = *(double *)(v35 + 144);
    }
    else
    {
      double v10 = 1.0;
      double v8 = 0.0;
      if (one-time initialization token for zero != -1) {
        goto LABEL_48;
      }
    }
    while (1)
    {
      uint64_t v36 = v6[8];
      BOOL v37 = __OFSUB__(*(void *)&v7, v36);
      unint64_t v38 = *(void *)&v7 - v36;
      if (v37) {
        break;
      }
      if ((v38 & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      uint64_t v39 = v6[9];
      if (v38 >= *(void *)(v39 + 16)) {
        goto LABEL_44;
      }
      uint64_t v40 = *(void *)(v39 + 56 * v38 + 64);
      unint64_t result = Text.Effect.PathInterpolator.MapKeys.index(for:)(v6[10], v8);
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v40 + 16);
      if (result >= v42) {
        goto LABEL_46;
      }
      if (result + 1 < v42)
      {
        v5[17] = (1.0 - v43) * v9
               + v10
               * (*(double *)(v40 + 32 + 8 * result)
                + v41 * (*(double *)(v40 + 32 + 8 * (result + 1)) - *(double *)(v40 + 32 + 8 * result)))
               * v43;
        return result;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      swift_once();
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance BloomTextEffect()
{
  return 0x6D6F6F6C62;
}

void *protocol witness for static Text.Effect.Base.states.getter in conformance BloomTextEffect()
{
  return &outlined read-only object #0 of protocol witness for static Text.Effect.Base.states.getter in conformance BloomTextEffect;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance BloomTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)v15 - v9;
  char v33 = 1;
  char v32 = 0;
  char v31 = 0;
  long long v17 = xmmword_2461BD440;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  long long v22 = xmmword_246214530;
  uint64_t v23 = 0x3FB999999999999ALL;
  char v24 = 3;
  long long v25 = xmmword_246214540;
  char v26 = 0;
  uint64_t v27 = MEMORY[0x263F8EE78];
  char v28 = 0;
  long long v29 = xmmword_2461BD450;
  char v30 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static BloomTextEffect.spring;
  double v12 = *(double *)&qword_268F736B0;
  outlined init with copy of Text.Effect.DrawableContent<BloomTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for BloomTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect();
  unint64_t result = lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

void *specialized BloomTextEffect.configuration(_:)()
{
  uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  Swift::UInt64 v3 = &v0[4 * v2];
  v3[4] = 1;
  v3[5] = closure #1 in BloomTextEffect.configuration(_:);
  v3[6] = 0;
  *((unsigned char *)v3 + 56) = 1;
  swift_bridgeObjectRetain();
  unint64_t v4 = v0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 2, 1, v0);
  }
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  v4[2] = v6 + 1;
  double v7 = &v4[4 * v6];
  void v7[4] = 2;
  _OWORD v7[5] = closure #2 in BloomTextEffect.configuration(_:);
  void v7[6] = 0;
  *((unsigned char *)v7 + 56) = 1;
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #3 in BloomTextEffect.configuration(_:);
  *(void *)(v8 + 24) = 0;
  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  void v9[2] = v11 + 1;
  double v12 = &v9[2 * v11];
  void v12[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v12[5] = v8;
  return v4;
}

uint64_t sub_2461093E4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24610941C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144) >= 3uLL) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in closure #3 in BloomTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  return closure #2 in closure #3 in BloomTextEffect.configuration(_:)(a1, a2, v2 + 16, (void *)(v2 + 64), *(double *)(v2 + 152));
}

uint64_t sub_2461094AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<BloomTextEffect>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_0(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for BloomTextEffect.LayoutState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2461096E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BloomTextEffect.LayoutState()
{
  return &type metadata for BloomTextEffect.LayoutState;
}

uint64_t static NSRunLoop.flushObservers()()
{
  uint64_t v0 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (one-time initialization token for observerActions != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    rawuint64_t Value = (char *)observerActions._rawValue;
    uint64_t v3 = *((void *)observerActions._rawValue + 2);
    if (!v3) {
      break;
    }
    observerActions._rawuint64_t Value = v0;
    specialized static Update.begin()();
    unsigned int v4 = rawValue + 40;
    do
    {
      uint64_t v5 = (void (*)(uint64_t))*((void *)v4 - 1);
      uint64_t v6 = swift_retain();
      v5(v6);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    static Update.end()();
  }
  return result;
}

void static NSRunLoop.runAllowingEarlyExit(until:stopCondition:)(uint64_t a1, uint64_t (*a2)(void))
{
  Date.timeIntervalSinceReferenceDate.getter();
  double v4 = v3 - CFAbsoluteTimeGetCurrent();
  if (v4 > 0.0)
  {
    uint64_t v5 = (void *)MEMORY[0x24C526EA0]();
    CFStringRef v6 = (const __CFString *)*MEMORY[0x263EFFE88];
    while (1)
    {
      CFRunLoopRunResult v7 = CFRunLoopRunInMode(v6, v4, 1u);
      if (v7 != kCFRunLoopRunHandledSource) {
        break;
      }
      if (a2()) {
        break;
      }
      Date.timeIntervalSinceReferenceDate.getter();
      double v4 = v8 - CFAbsoluteTimeGetCurrent();
      if (v4 <= 0.0) {
        break;
      }
      uint64_t v5 = (void *)MEMORY[0x24C526EA0]();
    }
  }
}

void static NSRunLoop.runAllowingEarlyExit(until:)()
{
  Date.timeIntervalSinceReferenceDate.getter();
  double v1 = v0 - CFAbsoluteTimeGetCurrent();
  if (v1 > 0.0)
  {
    uint64_t v2 = (void *)MEMORY[0x24C526EA0]();
    CFStringRef v3 = (const __CFString *)*MEMORY[0x263EFFE88];
    while (1)
    {
      CFRunLoopRunResult v4 = CFRunLoopRunInMode(v3, v1, 1u);
      if (v4 != kCFRunLoopRunHandledSource) {
        break;
      }
      Date.timeIntervalSinceReferenceDate.getter();
      double v1 = v5 - CFAbsoluteTimeGetCurrent();
      if (v1 <= 0.0) {
        break;
      }
      uint64_t v2 = (void *)MEMORY[0x24C526EA0]();
    }
  }
}

uint64_t sub_24610997C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30AccessibilityIdentifierStorageVG_SSs5NeverOTg505_sSm7d6UIAA30fgh2V7B89RtzrlE6joined9separatorACSgSS_tFSSACcfu_33_08f1150c3fb7b96e29a2d46234698d55ACSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    CFRunLoopRunResult v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void AccessibilityIdentifierStorage.Placement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static AccessibilityIdentifierStorage.Placement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int AccessibilityIdentifierStorage.Placement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AccessibilityIdentifierStorage.placement.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

SwiftUI::AccessibilityIdentifierStorage __swiftcall AccessibilityIdentifierStorage.init(_:placement:)(Swift::String _, SwiftUI::AccessibilityIdentifierStorage::Placement placement)
{
  char v3 = *(unsigned char *)placement;
  *(Swift::String *)uint64_t v2 = _;
  *(unsigned char *)(v2 + 16) = v3;
  result.rawuint64_t Value = _;
  result.placement = placement;
  return result;
}

uint64_t AccessibilityIdentifierStorage.value.getter()
{
  if (*((unsigned __int8 *)v0 + 16) > 1u) {
    return 0;
  }
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static AccessibilityIdentifierStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

Swift::Bool __swiftcall AccessibilityIdentifierStorage.merge(with:)(SwiftUI::AccessibilityIdentifierStorage with)
{
  uint64_t v3 = *(void *)with.rawValue._countAndFlagsBits;
  uint64_t v2 = *(void *)(with.rawValue._countAndFlagsBits + 8);
  int v4 = *(unsigned __int8 *)(with.rawValue._countAndFlagsBits + 16);
  int v5 = *((unsigned __int8 *)v1 + 16);
  type metadata accessor for (AccessibilityIdentifierStorage.Placement, AccessibilityIdentifierStorage.Placement)();
  if (v5 == 1)
  {
    if (v4 != 1)
    {
      swift_bridgeObjectRelease();
      *uint64_t v1 = v3;
      v1[1] = v2;
      *((unsigned char *)v1 + 16) = v4;
LABEL_11:
      swift_bridgeObjectRetain();
      return 1;
    }
    return 0;
  }
  if (!v4)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      *uint64_t v1 = v3;
      v1[1] = v2;
      *((unsigned char *)v1 + 16) = 0;
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 == 1) {
    return 0;
  }
  type metadata accessor for _ContiguousArrayStorage<AccessibilityIdentifierStorage>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityIdentifierStorage>, (uint64_t)&type metadata for AccessibilityIdentifierStorage, MEMORY[0x263F8E0F8]);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  *(void *)(inited + 32) = *v1;
  *(void *)(inited + 40) = v7;
  *(unsigned char *)(inited + 48) = v5;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = v2;
  *(unsigned char *)(inited + 72) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized RangeReplaceableCollection<>.joined(separator:)(inited, (uint64_t)&v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v9 = v12;
  if (v12)
  {
    LOBYTE(v5) = v13;
    uint64_t v8 = v11;
    swift_bridgeObjectRelease();
    uint64_t v7 = v9;
  }
  *uint64_t v1 = v8;
  v1[1] = v7;
  Swift::Bool result = 1;
  *((unsigned char *)v1 + 16) = v5;
  return result;
}

void type metadata accessor for (AccessibilityIdentifierStorage.Placement, AccessibilityIdentifierStorage.Placement)()
{
  if (!lazy cache variable for type metadata for (AccessibilityIdentifierStorage.Placement, AccessibilityIdentifierStorage.Placement))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityIdentifierStorage.Placement, AccessibilityIdentifierStorage.Placement));
    }
  }
}

uint64_t specialized RangeReplaceableCollection<>.joined(separator:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI30AccessibilityIdentifierStorageVG_SSs5NeverOTg505_sSm7d6UIAA30fgh2V7B89RtzrlE6joined9separatorACSgSS_tFSSACcfu_33_08f1150c3fb7b96e29a2d46234698d55ACSSTf3nnnpk_nTf1cn_n(a1);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    int v5 = (uint64_t *)(v3 + 40);
    uint64_t v6 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v10 = *(v5 - 1);
      uint64_t v11 = *v5;
      uint64_t v12 = HIBYTE(*v5) & 0xF;
      if ((*v5 & 0x2000000000000000) == 0) {
        uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
      }
      if (v12)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        }
        unint64_t v8 = *(void *)(v6 + 16);
        unint64_t v7 = *(void *)(v6 + 24);
        if (v8 >= v7 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        }
        *(void *)(v6 + 16) = v8 + 1;
        uint64_t v9 = v6 + 16 * v8;
        *(void *)(v9 + 32) = v10;
        *(void *)(v9 + 40) = v11;
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16))
  {
    type metadata accessor for _ContiguousArrayStorage<AccessibilityIdentifierStorage>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v15 = v14;
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(unsigned char *)(a2 + 16) = 0;
  return result;
}

uint64_t RangeReplaceableCollection<>.joined(separator:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))specialized implicit closure #1 in RangeReplaceableCollection<>.joined(separator:), 0, a1, MEMORY[0x263F8D310], MEMORY[0x263F8E628], *(void *)(a2 + 8), MEMORY[0x263F8E658], a3);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)(v5 + 40);
    uint64_t v8 = MEMORY[0x263F8EE78];
    do
    {
      uint64_t v12 = *(v7 - 1);
      uint64_t v13 = *v7;
      uint64_t v14 = HIBYTE(*v7) & 0xF;
      if ((*v7 & 0x2000000000000000) == 0) {
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (v14)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        }
        unint64_t v10 = *(void *)(v8 + 16);
        unint64_t v9 = *(void *)(v8 + 24);
        if (v10 >= v9 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        }
        *(void *)(v8 + 16) = v10 + 1;
        uint64_t v11 = v8 + 16 * v10;
        *(void *)(v11 + 32) = v12;
        *(void *)(v11 + 40) = v13;
      }
      v7 += 2;
      --v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v8 + 16))
  {
    type metadata accessor for _ContiguousArrayStorage<AccessibilityIdentifierStorage>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v17 = v16;
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + 8) = v17;
  *(unsigned char *)(a4 + 16) = 0;
  return result;
}

uint64_t specialized implicit closure #1 in RangeReplaceableCollection<>.joined(separator:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = v3;
  a2[1] = v2;
  return swift_bridgeObjectRetain();
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityIdentifierStorage>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityIdentifierStorage.Placement and conformance AccessibilityIdentifierStorage.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityIdentifierStorage.Placement and conformance AccessibilityIdentifierStorage.Placement;
  if (!lazy protocol witness table cache variable for type AccessibilityIdentifierStorage.Placement and conformance AccessibilityIdentifierStorage.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityIdentifierStorage.Placement and conformance AccessibilityIdentifierStorage.Placement);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityIdentifierStorage.Placement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24610A2C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityIdentifierStorage.Placement()
{
  return &type metadata for AccessibilityIdentifierStorage.Placement;
}

void *assignWithCopy for ObjectLocation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = v4;
  return a1;
}

_OWORD *assignWithTake for ObjectLocation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t ObjectLocation.set(_:transaction:)(uint64_t a1, void *a2)
{
  swift_retain();
  Swift::UInt value = _threadTransactionData();
  if (value)
  {
    type metadata accessor for PropertyList.Element();
    swift_unknownObjectRetain();
    Swift::UInt value = swift_dynamicCastClassUnconditional();
    uint64_t v4 = value;
    if (a2)
    {
      if (value)
      {
        if (a2[3])
        {
          type metadata accessor for TypedElement<EmptyKey>();
          swift_allocObject();
          Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for EmptyKey, v4, (uint64_t)a2).value;
          a2 = (void *)value;
        }
        else
        {
          uint64_t v5 = a2[4];
          uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*a2 + 216);
          swift_retain();
          uint64_t v6 = swift_retain();
          uint64_t v9 = v8(v6, v5);
          swift_release();
          swift_release_n();
          Swift::UInt value = swift_release();
          a2 = (void *)v9;
        }
      }
    }
    else
    {
      a2 = (void *)value;
    }
  }
  MEMORY[0x270FA5388](value);
  specialized closure #1 in withTransaction<A>(_:_:)((uint64_t)a2, (void (*)(void *))partial apply for closure #1 in ObjectLocation.set(_:transaction:));
  return swift_release();
}

uint64_t closure #1 in ObjectLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectLocation.checkIsolation()(v13, v14, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a5, a7);
  v17[1] = a1;
  swift_unknownObjectRetain();
  swift_setAtReferenceWritableKeyPath();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance ObjectLocation<A, B>(uint64_t a1, void *a2)
{
  return ObjectLocation.set(_:transaction:)(a1, a2);
}

uint64_t partial apply for closure #1 in ObjectLocation.set(_:transaction:)()
{
  return closure #1 in ObjectLocation.set(_:transaction:)(v0[4], v0[5], v0[6], v0[7], v0[8], v0[2], v0[3]);
}

void CGRect.x.setter(double a1)
{
  *uint64_t v1 = a1;
}

double CGRect.y.getter(double a1, double a2)
{
  return a2;
}

__C::CGRect __swiftcall CGRect.init(size:)(CGSize size)
{
  double height = size.height;
  double width = size.width;
  double v3 = 0.0;
  double v4 = 0.0;
  result.size.double height = height;
  result.size.double width = width;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

__C::CGRect __swiftcall CGRect.flushNullToZero()()
{
  double v4 = v3;
  double v5 = v2;
  double v6 = v1;
  double v7 = v0;
  BOOL IsNull = CGRectIsNull(*(CGRect *)&v0);
  double v9 = 0.0;
  if (IsNull) {
    double v10 = 0.0;
  }
  else {
    double v10 = v7;
  }
  if (IsNull) {
    double v11 = 0.0;
  }
  else {
    double v11 = v6;
  }
  if (IsNull) {
    double v12 = 0.0;
  }
  else {
    double v12 = v5;
  }
  if (!IsNull) {
    double v9 = v4;
  }
  result.size.double height = v9;
  result.size.double width = v12;
  result.origin.double y = v11;
  result.origin.double x = v10;
  return result;
}

Swift::Void __swiftcall CGRect.finalizeLayoutDirection(_:parentSize:)(SwiftUI::LayoutDirection _, CGSize parentSize)
{
  if (*(unsigned char *)_ == 1) {
    v2->origin.double x = parentSize.width - CGRectGetMaxX(*v2);
  }
}

double CGRect.scaledBy(x:y:)(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v9 = a3;
  v12.origin.double x = a3;
  v12.origin.double y = a4;
  v12.size.double width = a5;
  v12.size.double height = a6;
  if (!CGRectIsNull(v12))
  {
    v13.origin.double x = v9;
    v13.origin.double y = a4;
    v13.size.double width = a5;
    v13.size.double height = a6;
    if (!CGRectIsInfinite(v13))
    {
      v14.origin.double x = v9;
      v14.origin.double y = a4;
      v14.size.double width = a5;
      v14.size.double height = a6;
      CGRectGetWidth(v14);
      v15.origin.double x = v9;
      v15.origin.double y = a4;
      v15.size.double width = a5;
      v15.size.double height = a6;
      CGRectGetHeight(v15);
      return a1 * v9;
    }
  }
  return v9;
}

__C::CGRect __swiftcall CGRect.offset(by:)(CGSize by)
{
  CGFloat height = by.height;
  CGFloat width = by.width;
  v7.origin.double x = v1;
  v7.origin.double y = v2;
  v7.size.CGFloat width = v3;
  v7.size.CGFloat height = v4;
  return (__C::CGRect)CGRectOffset(v7, width, height);
}

void CGRect.y.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double CGRect.init(position:size:anchor:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 - a3 * a5;
}

CGFloat CGRect.center.getter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat v8 = CGRectGetWidth(*(CGRect *)&a1) * 0.5 + a1;
  v10.origin.double x = a1;
  v10.origin.double y = a2;
  v10.size.CGFloat width = a3;
  v10.size.CGFloat height = a4;
  CGRectGetHeight(v10);
  return v8;
}

void CGRect.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

double CGRect.minXY.getter(double a1, double a2, double a3, double a4)
{
  return CGRect.minXY.getter(MEMORY[0x263F00178], MEMORY[0x263F00180], a1, a2, a3, a4);
}

double CGRect.maxXY.getter(double a1, double a2, double a3, double a4)
{
  return CGRect.minXY.getter(MEMORY[0x263F00158], MEMORY[0x263F00160], a1, a2, a3, a4);
}

double CGRect.minXY.getter(double (*a1)(void), void (*a2)(double, double, double, double), double a3, double a4, double a5, double a6)
{
  double v11 = a1();
  a2(a3, a4, a5, a6);
  return v11;
}

double CGRect.cornerPoints.getter(double a1, double a2, double a3, double a4)
{
  _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2461C6AA0;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  double result = a1 + a3;
  *(double *)(v8 + 48) = a1 + a3;
  *(double *)(v8 + 56) = a2;
  *(double *)(v8 + 64) = a1 + a3;
  *(double *)(v8 + 72) = a2 + a4;
  *(double *)(v8 + 80) = a1;
  *(double *)(v8 + 88) = a2 + a4;
  return result;
}

void __swiftcall CGRect.init(exactCornerPoints:)(__C::CGRect_optional *__return_ptr retstr, Swift::OpaquePointer exactCornerPoints)
{
  specialized CGRect.init(exactCornerPoints:)((uint64_t)exactCornerPoints._rawValue, (uint64_t)v3);
  outlined init with take of CGRect?((uint64_t)v3, (uint64_t)retstr);
}

uint64_t CGRect.mapCorners(f:)(void (*a1)(uint64_t *), CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t result = CGRectIsNull(*(CGRect *)&a2);
  if ((result & 1) == 0)
  {
    v13.origin.double x = a2;
    v13.origin.double y = a3;
    v13.size.CGFloat width = a4;
    v13.size.CGFloat height = a5;
    uint64_t result = CGRectIsInfinite(v13);
    if ((result & 1) == 0)
    {
      _ss23_ContiguousArrayStorageCySo7CGPointVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_2461C6AA0;
      *(CGFloat *)(v11 + 32) = a2;
      *(CGFloat *)(v11 + 40) = a3;
      *(CGFloat *)(v11 + 48) = a2 + a4;
      *(CGFloat *)(v11 + 56) = a3;
      *(CGFloat *)(v11 + 64) = a2 + a4;
      *(CGFloat *)(v11 + 72) = a3 + a5;
      *(CGFloat *)(v11 + 80) = a2;
      *(CGFloat *)(v11 + 88) = a3 + a5;
      uint64_t v12 = v11;
      a1(&v12);
      uint64_t result = v12;
      if (*(void *)(v12 + 16) < 4uLL) {
        __break(1u);
      }
      else {
        return specialized CGRect.init(cornerPoints:)(v12, v12 + 32, 0, 9uLL);
      }
    }
  }
  return result;
}

double (*CGRect.x.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double (*CGRect.y.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return ViewOrigin.y.modify;
}

double key path getter for CGRect.center : CGRect@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v3 = *a1;
  double v4 = a1[1];
  CGFloat v5 = a1[2];
  CGFloat v6 = a1[3];
  v9.origin.double x = *a1;
  v9.origin.double y = v4;
  v9.size.CGFloat width = v5;
  v9.size.CGFloat height = v6;
  double v7 = v3 + CGRectGetWidth(v9) * 0.5;
  v10.origin.double x = v3;
  v10.origin.double y = v4;
  v10.size.CGFloat width = v5;
  v10.size.CGFloat height = v6;
  double result = v4 + CGRectGetHeight(v10) * 0.5;
  *a2 = v7;
  a2[1] = result;
  return result;
}

double key path setter for CGRect.center : CGRect(double *a1, CGFloat *a2)
{
  double v3 = *a1;
  double v4 = a1[1];
  v9.origin.double x = *a2;
  CGFloat v5 = a2[1];
  CGFloat v6 = a2[2];
  CGFloat v7 = a2[3];
  v9.origin.double y = v5;
  v9.size.CGFloat width = v6;
  v9.size.CGFloat height = v7;
  v10.origin.double x = v3 - CGRectGetWidth(v9) * 0.5;
  *a2 = v10.origin.x;
  v10.origin.double y = v5;
  v10.size.CGFloat width = v6;
  v10.size.CGFloat height = v7;
  double result = v4 - CGRectGetHeight(v10) * 0.5;
  a2[1] = result;
  return result;
}

double CGRect.center.setter(double a1, double a2)
{
  v9.origin.double x = *v2;
  CGFloat v5 = v2[1];
  CGFloat v6 = v2[2];
  CGFloat v7 = v2[3];
  v9.origin.double y = v5;
  v9.size.CGFloat width = v6;
  v9.size.CGFloat height = v7;
  v10.origin.double x = a1 - CGRectGetWidth(v9) * 0.5;
  *CGFloat v2 = v10.origin.x;
  v10.origin.double y = v5;
  v10.size.CGFloat width = v6;
  v10.size.CGFloat height = v7;
  double result = a2 - CGRectGetHeight(v10) * 0.5;
  v2[1] = result;
  return result;
}

double (*CGRect.center.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  double v3 = *v1;
  double v4 = v1[1];
  CGFloat v5 = v1[2];
  CGFloat v6 = v1[3];
  v10.origin.double x = *v1;
  v10.origin.double y = v4;
  v10.size.CGFloat width = v5;
  v10.size.CGFloat height = v6;
  double v7 = v3 + CGRectGetWidth(v10) * 0.5;
  v11.origin.double x = v3;
  v11.origin.double y = v4;
  v11.size.CGFloat width = v5;
  v11.size.CGFloat height = v6;
  CGFloat Height = CGRectGetHeight(v11);
  *(double *)a1 = v7;
  *(double *)(a1 + 8) = v4 + Height * 0.5;
  return CGRect.center.modify;
}

double CGRect.center.modify(uint64_t a1)
{
  uint64_t v1 = *(CGFloat **)(a1 + 16);
  double v2 = *(double *)a1;
  double v3 = *(double *)(a1 + 8);
  v8.origin.double x = *v1;
  CGFloat v4 = v1[1];
  CGFloat v5 = v1[2];
  CGFloat v6 = v1[3];
  v8.origin.double y = v4;
  v8.size.CGFloat width = v5;
  v8.size.CGFloat height = v6;
  v9.origin.double x = v2 - CGRectGetWidth(v8) * 0.5;
  *uint64_t v1 = v9.origin.x;
  v9.origin.double y = v4;
  v9.size.CGFloat width = v5;
  v9.size.CGFloat height = v6;
  double result = v3 - CGRectGetHeight(v9) * 0.5;
  v1[1] = result;
  return result;
}

__C::CGRect __swiftcall CGRect.init(center:size:)(CGPoint center, CGSize size)
{
  double v2 = center.x - size.width * 0.5;
  double v3 = center.y - size.height * 0.5;
  result.size.CGFloat height = size.height;
  result.size.CGFloat width = size.width;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRect.isFinite.getter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  if ((~*(void *)&a1 & 0x7FF0000000000000) == 0
    || (~*(void *)&a2 & 0x7FF0000000000000) == 0
    || (~((uint64_t (__cdecl *)(CGRect))CGRectGetWidth)(*(CGRect *)&a1) & 0x7FF0000000000000) == 0)
  {
    return 0;
  }
  v9.origin.double x = a1;
  v9.origin.double y = a2;
  v9.size.CGFloat width = a3;
  v9.size.CGFloat height = a4;
  return (~((uint64_t (__cdecl *)(CGRect))CGRectGetHeight)(v9) & 0x7FF0000000000000) != 0;
}

double CGRect.scaled(by:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v8 = a2;
  v11.origin.double x = a2;
  v11.origin.double y = a3;
  v11.size.CGFloat width = a4;
  v11.size.CGFloat height = a5;
  if (!CGRectIsNull(v11))
  {
    v12.origin.double x = v8;
    v12.origin.double y = a3;
    v12.size.CGFloat width = a4;
    v12.size.CGFloat height = a5;
    if (!CGRectIsInfinite(v12))
    {
      v13.origin.double x = v8;
      v13.origin.double y = a3;
      v13.size.CGFloat width = a4;
      v13.size.CGFloat height = a5;
      CGRectGetWidth(v13);
      v14.origin.double x = v8;
      v14.origin.double y = a3;
      v14.size.CGFloat width = a4;
      v14.size.CGFloat height = a5;
      CGRectGetHeight(v14);
      return a1 * v8;
    }
  }
  return v8;
}

Swift::Bool __swiftcall CGRect.hasIntersection(_:)(__C::CGRect a1)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  v10.origin.CGFloat x = v1;
  v10.origin.CGFloat y = v2;
  v10.size.CGFloat width = v3;
  v10.size.CGFloat height = v4;
  v12.origin.CGFloat x = x;
  v12.origin.CGFloat y = y;
  v12.size.CGFloat width = width;
  v12.size.CGFloat height = height;
  CGRect v11 = CGRectIntersection(v10, v12);
  return !CGRectIsEmpty(v11);
}

double CGRect.subscript.getter(char a1, CGRect rect)
{
  switch(a1)
  {
    case 1:
      double result = CGRectGetMinX(rect);
      break;
    case 2:
      double result = CGRectGetMaxY(rect);
      break;
    case 3:
      double result = CGRectGetMaxX(rect);
      break;
    default:
      double result = CGRectGetMinY(rect);
      break;
  }
  return result;
}

double CGRect.distance(to:in:)(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9 = a9 * 0.5;
  double v10 = v9 + a7;
  double v11 = a8 * 0.5;
  double v12 = v11 + a6;
  if (a1)
  {
    a2 = a3;
    double v13 = v9;
  }
  else
  {
    double v13 = v11;
  }
  if (a1)
  {
    a4 = a5;
    double v14 = v10;
  }
  else
  {
    double v14 = v12;
  }
  return vabdd_f64(a2 + a4 * 0.5, v14) - (v13 + a4 * 0.5);
}

__C::CGRect __swiftcall CGRect.init(cornerPoints:)(Swift::OpaquePointer cornerPoints)
{
  if (*((void *)cornerPoints._rawValue + 2) < 4uLL) {
    __break(1u);
  }
  else {
    specialized CGRect.init(cornerPoints:)((uint64_t)cornerPoints._rawValue, (uint64_t)cornerPoints._rawValue + 32, 0, 9uLL);
  }
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

void CGRect.distance(to:)(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v12.origin.CGFloat x = a3;
  v12.origin.CGFloat y = a4;
  v12.size.CGFloat width = a5;
  v12.size.CGFloat height = a6;
  vabdd_f64(a1, CGRectGetMidX(v12));
  v13.origin.CGFloat x = a3;
  v13.origin.CGFloat y = a4;
  v13.size.CGFloat width = a5;
  v13.size.CGFloat height = a6;
  vabdd_f64(a2, CGRectGetMidY(v13));
  v14.origin.CGFloat x = a3;
  v14.origin.CGFloat y = a4;
  v14.size.CGFloat width = a5;
  v14.size.CGFloat height = a6;
  CGRectGetWidth(v14);
  v15.origin.CGFloat x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.CGFloat width = a5;
  v15.size.CGFloat height = a6;
  CGRectGetHeight(v15);
}

void CGRect.perpendicularDistance(to:)(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v12.origin.CGFloat x = a3;
  v12.origin.CGFloat y = a4;
  v12.size.CGFloat width = a5;
  v12.size.CGFloat height = a6;
  vabdd_f64(a1, CGRectGetMidX(v12));
  v13.origin.CGFloat x = a3;
  v13.origin.CGFloat y = a4;
  v13.size.CGFloat width = a5;
  v13.size.CGFloat height = a6;
  vabdd_f64(a2, CGRectGetMidY(v13));
  v14.origin.CGFloat x = a3;
  v14.origin.CGFloat y = a4;
  v14.size.CGFloat width = a5;
  v14.size.CGFloat height = a6;
  CGRectGetWidth(v14);
  v15.origin.CGFloat x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.CGFloat width = a5;
  v15.size.CGFloat height = a6;
  CGRectGetHeight(v15);
}

SwiftUI::LoggableRect __swiftcall LoggableRect.init(_:)(SwiftUI::LoggableRect result)
{
  *double v1 = result;
  return result;
}

uint64_t LoggableRect.description.getter()
{
  CGFloat v1 = *v0;
  CGFloat v2 = v0[1];
  CGFloat v3 = v0[2];
  CGFloat v4 = v0[3];
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v14.origin.CGFloat x = v1;
  v14.origin.CGFloat y = v2;
  v14.size.CGFloat width = v3;
  v14.size.CGFloat height = v4;
  CGRectGetWidth(v14);
  v9._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v15.origin.CGFloat x = v1;
  v15.origin.CGFloat y = v2;
  v15.size.CGFloat width = v3;
  v15.size.CGFloat height = v4;
  CGRectGetHeight(v15);
  v11._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 41;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 40;
}

void CGRect.loggable.getter(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

uint64_t (*CGRect.animatableData.modify(void *a1))()
{
  CGFloat v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)CGFloat v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

double *CGRect.encode(to:)(void *a1, double a2, double a3, double a4, double a5)
{
  v6[4] = *(double *)MEMORY[0x263EF8340];
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  void v6[3] = a5;
  return closure #1 in EdgeInsets.encode(to:)(v6, a1);
}

double CGRect.init(from:)(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  closure #1 in CGRect.init(from:)((unint64_t)v4, a1, &v3);
  if (!v1) {
    return *(double *)v4;
  }
  return result;
}

unint64_t closure #1 in CGRect.init(from:)(unint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_38:
    a2[3] = 0;
    return result;
  }
  unint64_t v8 = result;
  while (1)
  {
    unint64_t v10 = a2[3];
    if (v10)
    {
      unint64_t v11 = a2[4];
      if (v6 < v11) {
        goto LABEL_12;
      }
      if (v11 < v6) {
        break;
      }
      a2[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_37;
    }
    unint64_t v10 = result;
    if (result <= 7) {
      break;
    }
LABEL_12:
    if (v10 <= 0x27)
    {
      uint64_t v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        JUMPOUT(0x24610B76CLL);
      }
      if (v12 < 0) {
        goto LABEL_40;
      }
      unint64_t v13 = v10 & 7;
      if (v13 == 5)
      {
        uint64_t v16 = (float *)a2[1];
        if (a2[2] < (unint64_t)(v16 + 1)) {
          break;
        }
        float v17 = *v16;
        a2[1] = v16 + 1;
        double v18 = v17;
      }
      else
      {
        if (v13 == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_41;
          }
          CGRect v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
          if (v15 < (unint64_t)v14 + result) {
            break;
          }
          a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 1;
          a2[4] = (char *)v14 + result;
        }
        else
        {
          if (v13 != 1) {
            break;
          }
          CGRect v14 = (double *)a2[1];
          unint64_t v15 = a2[2];
        }
        if (v15 < (unint64_t)(v14 + 1)) {
          break;
        }
        double v18 = *v14;
        a2[1] = v14 + 1;
      }
      *(double *)(v8 + 8 * v12) = v18;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          break;
        case 1uLL:
          unint64_t v9 = a2[1] + 8;
          if (a2[2] >= v9) {
            goto LABEL_4;
          }
          goto LABEL_36;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_37;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          unint64_t v9 = a2[1] + result;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a2[1] + 4;
          if (a2[2] < v9) {
            goto LABEL_36;
          }
          goto LABEL_4;
        default:
          goto LABEL_36;
      }
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2]) {
      goto LABEL_38;
    }
  }
LABEL_36:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  uint64_t v4 = swift_allocError();
  double result = swift_willThrow();
LABEL_37:
  *a3 = v4;
  return result;
}

double protocol witness for ProtobufDecodableMessage.init(from:) in conformance CGRect@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  long long v7 = 0u;
  long long v8 = 0u;
  closure #1 in CGRect.init(from:)((unint64_t)&v7, a1, &v6);
  if (!v2)
  {
    double result = *(double *)&v7;
    long long v5 = v8;
    *a2 = v7;
    a2[1] = v5;
  }
  return result;
}

uint64_t specialized CGRect.init(exactCornerPoints:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    if (v3 >= 4)
    {
      double v4 = *(double *)(result + 32);
      if (v4 == *(double *)(result + 80)
        && (double v5 = *(double *)(result + 48), v5 == *(double *)(result + 64))
        && (double v6 = *(double *)(result + 40), v6 == *(double *)(result + 56)))
      {
        double v7 = *(double *)(result + 72);
        double v8 = *(double *)(result + 88);
        double result = swift_bridgeObjectRelease();
        if (v7 == v8)
        {
          char v9 = 0;
          double v10 = v5 - v4;
          double v11 = v7 - v6;
          double v12 = v4;
          double v13 = v6;
LABEL_10:
          *(double *)a2 = v12;
          *(double *)(a2 + 8) = v13;
          *(double *)(a2 + 16) = v10;
          *(double *)(a2 + 24) = v11;
          *(unsigned char *)(a2 + 32) = v9;
          return result;
        }
      }
      else
      {
        double result = swift_bridgeObjectRelease();
      }
      double v12 = 0.0;
      double v13 = 0.0;
      char v9 = 1;
      double v10 = 0.0;
      double v11 = 0.0;
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in CGRect()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_24610B95C@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_24610B968(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_24610B974@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_24610B980(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

__n128 sub_24610B994@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_24610B9A0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for LoggableRect()
{
  return &type metadata for LoggableRect;
}

uint64_t specialized static MaskLayer.updateAsync(layer:oldClip:newClip:oldTransform:newTransform:)(Class *a1, uint64_t a2, uint64_t a3, CGFloat *a4, CGFloat *a5)
{
  if (((*(_WORD *)(a2 + 89) ^ *(_WORD *)(a3 + 89)) & 1) != 0
    || ((*(_WORD *)(a2 + 89) ^ *(_WORD *)(a3 + 89)) & 0x100) != 0)
  {
    return 0;
  }
  uint64_t v5 = a3;
  CGFloat v6 = *a5;
  CGFloat v7 = a5[1];
  CGFloat v97 = a5[2];
  CGFloat v95 = a5[3];
  CGFloat v93 = a5[4];
  CGFloat v91 = a5[5];
  CGFloat a = *a4;
  CGFloat b = a4[1];
  CGFloat v10 = a4[2];
  CGFloat v11 = a4[3];
  CGFloat v12 = a4[4];
  CGFloat ty = a4[5];
  long long v14 = *(_OWORD *)(a2 + 16);
  v130[0] = *(_OWORD *)a2;
  v130[1] = v14;
  char v131 = *(unsigned char *)(a2 + 32);
  outlined init with take of Path.Storage((uint64_t)v130, (uint64_t)v132);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v132, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v130, (uint64_t)&t1);
  double rect1 = t1.m11;
  CGFloat m13 = t1.m13;
  double rect2 = t1.m12;
  CGFloat m14 = t1.m14;
  double m21 = t1.m21;
  CGFloat m22 = t1.m22;
  long long v19 = *(_OWORD *)&t1.m23;
  long long v20 = *(_OWORD *)&t1.m31;
  uint64_t m33_low = LOBYTE(t1.m33);
  long long v22 = *(_OWORD *)(v5 + 16);
  v127[0] = *(_OWORD *)v5;
  v127[1] = v22;
  uint64_t v88 = v5;
  char v128 = *(unsigned char *)(v5 + 32);
  outlined init with take of Path.Storage((uint64_t)v127, (uint64_t)v129);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v129, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v127, (uint64_t)&t2);
  CGFloat tx = t2.tx;
  int v24 = v116;
  *(double *)long long v117 = rect1;
  *(double *)&v117[1] = rect2;
  *(CGFloat *)&v117[2] = m13;
  *(CGFloat *)&v117[3] = m14;
  *(double *)&v117[4] = m21;
  *(CGFloat *)&v117[5] = m22;
  long long v118 = v19;
  long long v119 = v20;
  char v120 = m33_low;
  CGAffineTransform v121 = t2;
  double v122 = v112;
  uint64_t v123 = v113;
  uint64_t v124 = v114;
  uint64_t v125 = v115;
  unsigned __int8 v126 = v116;
  CGFloat v25 = m13;
  switch(m33_low)
  {
    case 1:
      if (v116 != 1 || ((LODWORD(t2.ty) ^ LODWORD(m22)) & 1) != 0) {
        goto LABEL_45;
      }
      double v51 = v112;
      double v85 = v7;
      double v86 = v6;
      CGFloat v52 = v25;
      CGFloat v53 = m14;
      double d = t2.d;
      double c = t2.c;
      char v30 = a1;
      if (t2.a != rect1 || t2.b != rect2)
      {
        CGFloat v54 = t2.tx;
        rect1double d = v25;
        rect2CGFloat b = v53;
        id v55 = objc_msgSend(self, sel_valueWithPoint_, t2.a, t2.b);
        v136.super.isCGFloat a = *a1;
        v56._countAndFlagsBits = 0x6E6F697469736F70;
        v56._object = (void *)0xE800000000000000;
        *(void *)&v136._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v55, v56, v136, v57);

        CGFloat v53 = rect2b;
        CGFloat v52 = rect1d;
        CGFloat tx = v54;
      }
      rect1CGFloat b = tx;
      v141.origin.CGFloat x = 0.0;
      v141.origin.CGFloat y = 0.0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      v141.size.CGFloat width = c;
      v141.size.CGFloat height = d;
      if (!CGRectEqualToRect(v141, *(CGRect *)(&v52 - 2)))
      {
        id v60 = objc_msgSend(self, sel_valueWithRect_, 0.0, 0.0, c, d);
        v137.super.isCGFloat a = *a1;
        v61._countAndFlagsBits = 0x73646E756F62;
        v61._object = (void *)0xE600000000000000;
        *(void *)&v137._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v60, v61, v137, v62);
      }
      uint64_t v5 = v88;
      if (rect1b != m21)
      {
        id v63 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, rect1b);
        v138.super.isCGFloat a = *a1;
        v64._countAndFlagsBits = 0x615272656E726F63;
        v64._object = (void *)0xEC00000073756964;
        *(void *)&v138._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v63, v64, v138, v65);
      }
      uint64_t v44 = a2;
      if (v51 == *(double *)&v19) {
        goto LABEL_25;
      }
      id v45 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v51);
      uint64_t v47 = v45;
      v48.super.isCGFloat a = *a1;
      uint64_t v49 = 0x6957726564726F62;
      unint64_t v50 = 0xEB00000000687464;
      goto LABEL_24;
    case 2:
      outlined release of (ShapeType, ShapeType)((uint64_t)v117);
      if (v24 != 2) {
        return 0;
      }
      goto LABEL_36;
    case 3:
      if (!(*(void *)&m13 | *(void *)&rect2 | *(void *)&rect1 | *(void *)&m14 | *(void *)&m21 | *(void *)&m22 | (unint64_t)v19 | *((void *)&v19 + 1) | (unint64_t)v20 | *((void *)&v20 + 1)))
      {
        if (v116 == 3
          && !(*(void *)&t2.c | *(void *)&t2.b | *(void *)&t2.a | *(void *)&t2.d | *(void *)&t2.tx | *(void *)&t2.ty | *(void *)&v112 | v113 | v114 | v115))
        {
          outlined release of (ShapeType, ShapeType)((uint64_t)v117);
          char v30 = a1;
          uint64_t v44 = a2;
          if (*(unsigned char *)(a2 + 88)) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
LABEL_45:
        outlined release of (ShapeType, ShapeType)((uint64_t)v117);
        return 0;
      }
      if (v116 != 3
        || *(void *)&t2.a != 1
        || *(void *)&t2.c | *(void *)&t2.b | *(void *)&t2.d | *(void *)&t2.tx | *(void *)&t2.ty | *(void *)&v112 | v113 | v114 | v115)
      {
        goto LABEL_45;
      }
      outlined release of (ShapeType, ShapeType)((uint64_t)v117);
LABEL_36:
      uint64_t v44 = a2;
      _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0(v5, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      if (specialized static Path.Storage.== infix(_:_:)((uint64_t)v129, (uint64_t)v132))
      {
        _s7SwiftUI4PathV7StorageOWOrTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        char v30 = a1;
        if (*(unsigned char *)(a2 + 88)) {
          goto LABEL_27;
        }
      }
      else
      {
        char v30 = a1;
        CGPathRef v79 = Path.cgPath.getter();
        v140.super.isCGFloat a = *a1;
        v80._countAndFlagsBits = 1752457584;
        v80._object = (void *)0xE400000000000000;
        *(void *)&v140._attr.refcount = 0;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v79, v80, v140, v81);

        _s7SwiftUI4PathV7StorageOWOrTm_0(v5, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        if (*(unsigned char *)(a2 + 88)) {
          goto LABEL_27;
        }
      }
LABEL_26:
      long long v66 = *(_OWORD *)(v44 + 56);
      *(_OWORD *)&t1.m11 = *(_OWORD *)(v44 + 40);
      *(_OWORD *)&t1.CGFloat m13 = v66;
      *(_OWORD *)&t1.double m21 = *(_OWORD *)(v44 + 72);
      t2.CGFloat a = a;
      t2.CGFloat b = b;
      t2.double c = v10;
      t2.double d = v11;
      t2.CGFloat tx = v12;
      t2.CGFloat ty = ty;
      CGAffineTransformConcat(&v133, (CGAffineTransform *)&t1, &t2);
      CGFloat a = v133.a;
      CGFloat b = v133.b;
      CGFloat v10 = v133.c;
      CGFloat v11 = v133.d;
      CGFloat v12 = v133.tx;
      CGFloat ty = v133.ty;
LABEL_27:
      t2.CGFloat a = a;
      t2.CGFloat b = b;
      t2.double c = v10;
      t2.double d = v11;
      t2.CGFloat tx = v12;
      t2.CGFloat ty = ty;
      if (*(unsigned char *)(v5 + 88))
      {
        CGFloat v67 = v97;
        CGFloat v68 = v95;
        CGFloat v69 = v93;
        CGFloat v70 = v91;
      }
      else
      {
        long long v71 = *(_OWORD *)(v5 + 56);
        *(_OWORD *)&t1.m11 = *(_OWORD *)(v5 + 40);
        *(_OWORD *)&t1.CGFloat m13 = v71;
        *(_OWORD *)&t1.double m21 = *(_OWORD *)(v5 + 72);
        v133.CGFloat a = v6;
        v133.CGFloat b = v7;
        v133.double c = v97;
        v133.double d = v95;
        v133.CGFloat tx = v93;
        v133.CGFloat ty = v91;
        CGAffineTransformConcat(&m, (CGAffineTransform *)&t1, &v133);
        CGFloat v6 = m.a;
        CGFloat v7 = m.b;
        CGFloat v67 = m.c;
        CGFloat v68 = m.d;
        CGFloat v69 = m.tx;
        CGFloat v70 = m.ty;
      }
      v133.CGFloat a = v6;
      v133.CGFloat b = v7;
      v133.double c = v67;
      v133.double d = v68;
      v133.CGFloat tx = v69;
      v133.CGFloat ty = v70;
      if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      {
        m.CGFloat a = v6;
        m.CGFloat b = v7;
        m.double c = v67;
        m.double d = v68;
        m.CGFloat tx = v69;
        m.CGFloat ty = v70;
        CATransform3DMakeAffineTransform(&t1, &m);
        rect2double c = *(_OWORD *)&t1.m13;
        long long rect1e = *(_OWORD *)&t1.m11;
        long long v96 = *(_OWORD *)&t1.m23;
        long long v98 = *(_OWORD *)&t1.m21;
        long long v92 = *(_OWORD *)&t1.m33;
        long long v94 = *(_OWORD *)&t1.m31;
        long long v90 = *(_OWORD *)&t1.m41;
        CGFloat m43 = t1.m43;
        CGFloat m44 = t1.m44;
        uint64_t v74 = self;
        *(_OWORD *)&t1.m11 = rect1e;
        *(_OWORD *)&t1.CGFloat m13 = rect2c;
        *(_OWORD *)&t1.double m21 = v98;
        *(_OWORD *)&t1.m23 = v96;
        *(_OWORD *)&t1.m31 = v94;
        *(_OWORD *)&t1.m33 = v92;
        *(_OWORD *)&t1.m41 = v90;
        t1.CGFloat m43 = m43;
        t1.CGFloat m44 = m44;
        id v75 = objc_msgSend(v74, sel_valueWithCATransform3D_, &t1);
        v139.super.isCGFloat a = *v30;
        v76._countAndFlagsBits = 0x726F66736E617274;
        v76._object = (void *)0xE90000000000006DLL;
        *(void *)&v139._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v75, v76, v139, v77);
      }
      return 1;
    default:
      if (v116 || ((LODWORD(t2.ty) ^ LODWORD(m22)) & 1) != 0) {
        goto LABEL_45;
      }
      double v85 = v7;
      double v86 = v6;
      CGFloat v26 = m13;
      CGFloat v27 = m14;
      CGFloat v28 = t2.c;
      CGFloat v29 = t2.d;
      char v30 = a1;
      if (t2.a != rect1 || t2.b != rect2)
      {
        CGFloat v31 = t2.tx;
        rect1double c = t2.c;
        rect2CGFloat a = t2.d;
        double v82 = v27;
        id v32 = objc_msgSend(self, sel_valueWithPoint_, t2.a, t2.b);
        v134.super.isCGFloat a = *a1;
        v33._countAndFlagsBits = 0x6E6F697469736F70;
        v33._object = (void *)0xE800000000000000;
        *(void *)&v134._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v32, v33, v134, v34);

        CGFloat v27 = v82;
        CGFloat v26 = m13;
        CGFloat v29 = rect2a;
        CGFloat v28 = rect1c;
        CGFloat tx = v31;
      }
      rect1CGFloat a = tx;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      double v39 = v28;
      double v40 = v29;
      if (!CGRectEqualToRect(*(CGRect *)(&v28 - 2), *(CGRect *)(&v26 - 2)))
      {
        id v41 = objc_msgSend(self, sel_valueWithRect_, 0.0, 0.0, v39, v40);
        v135.super.isCGFloat a = *a1;
        v42._countAndFlagsBits = 0x73646E756F62;
        v42._object = (void *)0xE600000000000000;
        *(void *)&v135._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v41, v42, v135, v43);
      }
      uint64_t v44 = a2;
      uint64_t v5 = v88;
      if (rect1a != m21)
      {
        id v45 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, rect1a);
        uint64_t v47 = v45;
        v48.super.isCGFloat a = *a1;
        uint64_t v49 = 0x615272656E726F63;
        unint64_t v50 = 0xEC00000073756964;
LABEL_24:
        *(void *)&v48._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v45, *(Swift::String *)&v49, v48, v46);
      }
LABEL_25:
      outlined release of (ShapeType, ShapeType)((uint64_t)v117);
      CGFloat v7 = v85;
      CGFloat v6 = v86;
      if ((*(unsigned char *)(v44 + 88) & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_27;
  }
}

void specialized static MaskLayer.updateClipsAsync(layer:oldClips:newClips:oldTransform:newTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat *a4, CGFloat *a5)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = v6 - 1;
  if (v6 == 1)
  {
    if (v7 == 1)
    {
      long long v9 = *(_OWORD *)(a2 + 80);
      long long v43 = *(_OWORD *)(a2 + 64);
      long long v44 = v9;
      v45[0] = *(_OWORD *)(a2 + 96);
      *(_OWORD *)((char *)v45 + 11) = *(_OWORD *)(a2 + 107);
      long long v10 = *(_OWORD *)(a2 + 48);
      long long v41 = *(_OWORD *)(a2 + 32);
      long long v42 = v10;
      long long v11 = *(_OWORD *)(a3 + 80);
      long long v48 = *(_OWORD *)(a3 + 64);
      long long v49 = v11;
      v50[0] = *(_OWORD *)(a3 + 96);
      *(_OWORD *)((char *)v50 + 11) = *(_OWORD *)(a3 + 107);
      long long v12 = *(_OWORD *)(a3 + 48);
      long long v46 = *(_OWORD *)(a3 + 32);
      long long v47 = v12;
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v41, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v46, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      specialized static MaskLayer.updateAsync(layer:oldClip:newClip:oldTransform:newTransform:)((Class *)a1, (uint64_t)&v41, (uint64_t)&v46, a4, a5);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v41, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v46, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
  }
  else if (v6 && v6 == v7)
  {
    unint64_t v13 = 0;
    id v32 = *(objc_class **)(a1 + 8);
    Class v33 = *(Class *)a1;
    char v31 = *(unsigned char *)(a1 + 16);
    char v14 = *(unsigned char *)(a1 + 17);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = (long long *)(a2 + 32);
    float v17 = (long long *)(a3 + 32);
    char v18 = *(unsigned char *)(a1 + 32);
    while (1)
    {
      long long v19 = v33;
      id v20 = [(objc_class *)v19 sublayers];
      if (!v20) {
        break;
      }
      char v21 = v20;
      type metadata accessor for CALayer();
      uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v22 & 0xC000000000000001) != 0)
      {
        uint64_t v23 = (objc_class *)MEMORY[0x24C523D60](v13, v22);
      }
      else
      {
        if (v13 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          break;
        }
        uint64_t v23 = (objc_class *)*(id *)(v22 + 8 * v13 + 32);
      }
      int v24 = v23;

      swift_bridgeObjectRelease();
      v36[0] = v24;
      v36[1] = v32;
      char v37 = v31;
      char v38 = v14;
      uint64_t v39 = v15;
      char v40 = v18;
      long long v25 = v16[3];
      long long v43 = v16[2];
      long long v44 = v25;
      v45[0] = v16[4];
      *(_OWORD *)((char *)v45 + 11) = *(long long *)((char *)v16 + 75);
      long long v26 = v16[1];
      long long v41 = *v16;
      long long v42 = v26;
      long long v27 = v17[3];
      long long v48 = v17[2];
      long long v49 = v27;
      v50[0] = v17[4];
      *(_OWORD *)((char *)v50 + 11) = *(long long *)((char *)v17 + 75);
      long long v28 = v17[1];
      long long v46 = *v17;
      long long v47 = v28;
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v41, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v46, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      char v29 = specialized static MaskLayer.updateAsync(layer:oldClip:newClip:oldTransform:newTransform:)(v36, (uint64_t)&v41, (uint64_t)&v46, a4, a5);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v41, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v46, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);

      if (v29)
      {
        v17 += 6;
        v16 += 6;
        if (v8 != v13++) {
          continue;
        }
      }
      return;
    }
    __break(1u);
  }
}

BOOL static PhysicalButtonEvent.ButtonType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PhysicalButtonEvent.ButtonType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PhysicalButtonEvent.ButtonType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double PhysicalButtonEvent.timestamp.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double PhysicalButtonEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *Swift::UInt v1 = *(void *)a1;
  return result;
}

uint64_t (*PhysicalButtonEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void PhysicalButtonEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *PhysicalButtonEvent.phase.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*PhysicalButtonEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t PhysicalButtonEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t PhysicalButtonEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*PhysicalButtonEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void PhysicalButtonEvent.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 24);
}

unsigned char *PhysicalButtonEvent.type.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 24) = *result;
  return result;
}

uint64_t (*PhysicalButtonEvent.type.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double PhysicalButtonEvent.init(timestamp:phase:binding:type:)@<D0>(double *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  double result = *a1;
  char v6 = *a2;
  uint64_t v7 = *a3;
  char v8 = *a4;
  *(double *)a5 = *a1;
  *(unsigned char *)(a5 + 8) = v6;
  *(void *)(a5 + 16) = v7;
  *(unsigned char *)(a5 + 24) = v8;
  return result;
}

void protocol witness for EventType.phase.getter in conformance PhysicalButtonEvent(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

BOOL specialized static PhysicalButtonEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v4)
  {
    if (!v6) {
      return v5 == *(unsigned __int8 *)(a2 + 24);
    }
    goto LABEL_13;
  }
  if (!v6)
  {
    swift_retain();
LABEL_13:
    swift_release();
    return 0;
  }
  if (v4 == v6) {
    return v5 == *(unsigned __int8 *)(a2 + 24);
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType;
  if (!lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType);
  }
  return result;
}

uint64_t initializeWithCopy for PhysicalButtonEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhysicalButtonEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for PhysicalButtonEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicalButtonEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicalButtonEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicalButtonEvent()
{
  return &type metadata for PhysicalButtonEvent;
}

unsigned char *storeEnumTagSinglePayload for PhysicalButtonEvent.ButtonType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24610CC20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t View.highPriorityGesture<A>(_:including:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.gesture<A>(_:including:)(a1, a2, a3, a4, a5, a6, (uint64_t)type metadata accessor for HighPriorityGestureModifier, (void (*)(char *, void, void, uint64_t, uint64_t, uint64_t))HighPriorityGestureModifier.init(_:name:gestureMask:));
}

uint64_t View.gesture<A>(_:name:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return View.gesture<A>(_:name:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)type metadata accessor for AddGestureModifier, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AddGestureModifier.init(_:name:gestureMask:));
}

uint64_t View.highPriorityGesture<A>(_:name:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return View.gesture<A>(_:name:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)type metadata accessor for HighPriorityGestureModifier, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))HighPriorityGestureModifier.init(_:name:gestureMask:));
}

uint64_t View.simultaneousGesture<A>(_:name:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return View.gesture<A>(_:name:isEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)type metadata accessor for SimultaneousGestureModifier, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))SimultaneousGestureModifier.init(_:name:gestureMask:));
}

uint64_t View.gesture<A>(_:name:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v35 = a7;
  uint64_t v33 = a9;
  uint64_t v34 = a5;
  int v31 = a4;
  uint64_t v32 = a2;
  uint64_t v15 = *(void *)(a6 - 8);
  double v16 = MEMORY[0x270FA5388](a1);
  char v18 = &v30[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = v21(0, v19, v20, v16);
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x270FA5388](v22);
  long long v26 = &v30[-v25];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v15 + 16))(v18, a1, a6, v24);
  if (v31) {
    uint64_t v27 = 3;
  }
  else {
    uint64_t v27 = 2;
  }
  a11(v18, v32, a3, v27, a6, a8);
  View.modifier<A>(_:)(v26, v34, v22);
  long long v28 = *(uint64_t (**)(unsigned char *, uint64_t))(v23 + 8);
  swift_bridgeObjectRetain();
  return v28(v26, v22);
}

uint64_t static GestureMask.none.getter()
{
  return 0;
}

uint64_t static GestureMask.gesture.getter()
{
  return 1;
}

unint64_t lazy protocol witness table accessor for type GestureMask and conformance GestureMask()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureMask and conformance GestureMask;
  if (!lazy protocol witness table cache variable for type GestureMask and conformance GestureMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureMask and conformance GestureMask);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureMask and conformance GestureMask;
  if (!lazy protocol witness table cache variable for type GestureMask and conformance GestureMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureMask and conformance GestureMask);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureMask and conformance GestureMask;
  if (!lazy protocol witness table cache variable for type GestureMask and conformance GestureMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureMask and conformance GestureMask);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GestureMask and conformance GestureMask;
  if (!lazy protocol witness table cache variable for type GestureMask and conformance GestureMask)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureMask and conformance GestureMask);
  }
  return result;
}

uint64_t sub_24610D098(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA7GestureRd__r__lAA15ModifiedContentVyxAA03AddD8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AddGestureModifier);
}

uint64_t sub_24610D0B8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA7GestureRd__r__lAA15ModifiedContentVyxAA03AddD8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for HighPriorityGestureModifier);
}

uint64_t sub_24610D0D8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA7GestureRd__r__lAA15ModifiedContentVyxAA03AddD8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SimultaneousGestureModifier);
}

void _ScaleEffect.scale.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*_ScaleEffect.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ScaleEffect.anchor.getter(double a1, double a2, double a3)
{
  return a3;
}

void _ScaleEffect.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*_ScaleEffect.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

CGFloat _ScaleEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  CGFloat v10 = a4;
  if (a4 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    CGFloat v10 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  if (a5 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    a5 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  CGFloat v14 = a3 * a7;
  CGFloat v15 = a2 * a6;
  CGAffineTransformMakeTranslation(&t1, -(a2 * a6), -(a3 * a7));
  long long v29 = *(_OWORD *)&t1.c;
  long long v31 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeScale(&t1, v10, a5);
  long long v18 = *(_OWORD *)&t1.a;
  long long v19 = *(_OWORD *)&t1.c;
  long long v20 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v31;
  *(_OWORD *)&t1.double c = v29;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.CGFloat a = v18;
  *(_OWORD *)&t2.double c = v19;
  *(_OWORD *)&t2.CGFloat tx = v20;
  CGAffineTransformConcat(&v33, &t1, &t2);
  long long v30 = *(_OWORD *)&v33.c;
  long long v32 = *(_OWORD *)&v33.a;
  CGFloat v21 = v33.tx;
  CGFloat v22 = v33.ty;
  CGAffineTransformMakeTranslation(&t1, v15, v14);
  long long v23 = *(_OWORD *)&t1.a;
  long long v24 = *(_OWORD *)&t1.c;
  long long v25 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.CGFloat a = v32;
  *(_OWORD *)&t1.double c = v30;
  t1.CGFloat tx = v21;
  t1.CGFloat ty = v22;
  *(_OWORD *)&t2.CGFloat a = v23;
  *(_OWORD *)&t2.double c = v24;
  *(_OWORD *)&t2.CGFloat tx = v25;
  CGAffineTransformConcat(&v33, &t1, &t2);
  CGFloat result = v33.a;
  long long v27 = *(_OWORD *)&v33.c;
  long long v28 = *(_OWORD *)&v33.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v33.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v27;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v28;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

double _ScaleEffect.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  double result = a4 * 0.0078125;
  _OWORD v4[2] = a3 * 0.0078125;
  v4[3] = a4 * 0.0078125;
  return result;
}

uint64_t (*_ScaleEffect.animatableData.modify(float64x2_t **a1))()
{
  int v3 = (float64x2_t *)malloc(0x28uLL);
  *a1 = v3;
  *(void *)&v3[2].f64[0] = v1;
  float64x2_t v4 = vmulq_f64(v1[1], (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *int v3 = *v1;
  v3[1] = v4;
  return _ScaleEffect.animatableData.modify;
}

uint64_t static _ScaleEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static GeometryEffectProvider._makeGeometryEffect(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

BOOL static _ScaleEffect.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a5 || a2 != a6) {
    return 0;
  }
  if (a4 == a8) {
    return a3 == a7;
  }
  return 0;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance _ScaleEffect@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return _ScaleEffect.effectValue(size:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ScaleEffect(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  if (a1[3] == a2[3]) {
    return a1[2] == a2[2];
  }
  return 0;
}

__n128 protocol witness for Animatable.animatableData.getter in conformance _ScaleEffect@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  float64x2_t v3 = vmulq_f64(*(float64x2_t *)(v1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a1 = *(_OWORD *)v1;
  a1[1] = v3;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance _ScaleEffect(uint64_t a1)
{
  __n128 result = *(__n128 *)a1;
  float64x2_t v3 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *uint64_t v1 = *(_OWORD *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance _ScaleEffect(float64x2_t **a1))()
{
  float64x2_t v3 = (float64x2_t *)malloc(0x28uLL);
  *a1 = v3;
  *(void *)&v3[2].f64[0] = v1;
  float64x2_t v4 = vmulq_f64(v1[1], (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *float64x2_t v3 = *v1;
  v3[1] = v4;
  return _ScaleEffect.animatableData.modify;
}

__n128 _ScaleEffect.animatableData.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (_OWORD *)*((void *)v1 + 4);
  float64x2_t v3 = vmulq_f64(*((float64x2_t *)v1 + 1), (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *uint64_t v2 = *(_OWORD *)v1;
  v2[1] = v3;
  free(v1);
  return result;
}

uint64_t View.scaleEffect(_:anchor:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)long long v6 = a2;
  *(double *)&v6[1] = a3;
  *(double *)&v6[2] = a4;
  *(double *)&void v6[3] = a5;
  return View.modifier<A>(_:)(v6, a1, &type metadata for _ScaleEffect);
}

uint64_t View.scaleEffect(x:y:anchor:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)long long v6 = a2;
  *(double *)&v6[1] = a3;
  *(double *)&v6[2] = a4;
  *(double *)&void v6[3] = a5;
  return View.modifier<A>(_:)(v6, a1, &type metadata for _ScaleEffect);
}

double static AnyTransition.scale.getter()
{
  type metadata accessor for TransitionBox<ScaleTransition>();
  uint64_t v0 = swift_allocObject();
  double result = 0.00001;
  *(_OWORD *)(v0 + 16) = xmmword_246214AE0;
  *(void *)(v0 + 32) = 0x3FE0000000000000;
  return result;
}

void ScaleTransition.init(_:anchor:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

double ScaleTransition.scale.getter()
{
  return *(double *)v0;
}

void ScaleTransition.scale.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ScaleTransition.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ScaleTransition.anchor.getter()
{
  return *(double *)(v0 + 8);
}

void ScaleTransition.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 8) = a1;
  *(double *)(v2 + 16) = a2;
}

uint64_t (*ScaleTransition.anchor.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 ScaleTransition.body(content:phase:)@<Q0>(char a1@<W1>, __n128 *a2@<X8>)
{
  double v3 = *(double *)v2;
  if (a1 == 1) {
    double v3 = 1.0;
  }
  a2->n128_f64[0] = v3;
  a2->n128_f64[1] = v3;
  __n128 result = *(__n128 *)(v2 + 8);
  a2[1] = result;
  return result;
}

uint64_t ScaleTransition._makeContentTransition(transition:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 3)
  {
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = 1;
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    double v4 = *v1;
    type metadata accessor for _ContiguousArrayStorage<ContentTransition.Effect>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2461B9DC0;
    float v6 = v4;
    *(_DWORD *)(v5 + 32) = 2;
    *(float *)(v5 + 36) = v6;
    *(unsigned char *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 44) = 0;
    *(unsigned char *)(v5 + 48) = 2;
    *(void *)(v5 + 52) = 0x3F80000000000000;
    *(void *)(v5 + 60) = 3;
    uint64_t result = outlined consume of _Transition_ContentTransition.Result(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    *(void *)(a1 + 24) = v5;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

uint64_t _ScaleEffect.encode(to:)(uint64_t result, double a2, double a3, double a4, double a5)
{
  uint64_t v8 = result;
  if (a2 != 1.0 || a3 != 1.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v11 = *(void *)(v8 + 8);
    long long v12 = *(void **)(v8 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      long long v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    _OWORD v12[2] = v14 + 1;
    v12[v14 + 4] = v11;
    *(void *)(v8 + 24) = v12;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_22:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      long long v12 = (void *)result;
      goto LABEL_16;
    }
    *(void *)(v8 + 8) = v11 + 1;
    CGSize.encode(to:)((double *)v8, a2, a3);
    uint64_t result = ProtobufEncoder.endLengthDelimited()();
  }
  if (a4 == 0.5 && a5 == 0.5) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v11 = *(void *)(v8 + 8);
  long long v12 = *(void **)(v8 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_22;
  }
LABEL_16:
  unint64_t v17 = v12[2];
  unint64_t v16 = v12[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v12);
    long long v12 = (void *)result;
  }
  _OWORD v12[2] = v17 + 1;
  v12[v17 + 4] = v11;
  *(void *)(v8 + 24) = v12;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v8 + 8) = v11 + 1;
    UnitPoint.encode(to:)((double *)v8, a4, a5);
    return ProtobufEncoder.endLengthDelimited()();
  }
  return result;
}

double _ScaleEffect.init(from:)(void *a1)
{
  return specialized _ScaleEffect.init(from:)(a1);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _ScaleEffect(uint64_t a1)
{
  return _ScaleEffect.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance _ScaleEffect(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = specialized _ScaleEffect.init(from:)(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
}

void one-time initialization function for leastNonzeroScaleFactor()
{
  static CGFloat.leastNonzeroScaleFactor = 0x2006A09E667F3BCDLL;
}

double specialized _ScaleEffect.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  double v6 = 1.0;
  if (v4 >= v5) {
    goto LABEL_51;
  }
  while (1)
  {
    unint64_t v7 = a1[3];
    if (v7)
    {
      unint64_t v8 = a1[4];
      if (v4 < v8) {
        goto LABEL_8;
      }
      if (v8 < v4) {
        goto LABEL_52;
      }
      a1[3] = 0;
    }
    unint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v7 <= 7) {
      goto LABEL_52;
    }
LABEL_8:
    if (v7 >> 3 != 2)
    {
      if (v7 >> 3 != 1)
      {
        switch(v7 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v6;
            }
            goto LABEL_45;
          case 1uLL:
            unint64_t v21 = a1[1] + 8;
            if (v5 < v21) {
              goto LABEL_52;
            }
            goto LABEL_44;
          case 2uLL:
            uint64_t v22 = ProtobufDecoder.decodeVarint()();
            if (v1) {
              return v6;
            }
            if (v22 < 0) {
              goto LABEL_63;
            }
            unint64_t v21 = a1[1] + v22;
            if (v5 < v21) {
              goto LABEL_52;
            }
LABEL_44:
            a1[1] = v21;
            break;
          case 5uLL:
            unint64_t v21 = a1[1] + 4;
            if (v5 >= v21) {
              goto LABEL_44;
            }
            goto LABEL_52;
          default:
            goto LABEL_52;
        }
        goto LABEL_45;
      }
      if ((v7 & 7) != 2) {
        goto LABEL_52;
      }
      uint64_t v2 = (void *)a1[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
      }
      unint64_t v10 = v2[2];
      unint64_t v9 = v2[3];
      if (v10 >= v9 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v2);
      }
      v2[2] = v10 + 1;
      v2[v10 + 4] = v5;
      a1[5] = v2;
      uint64_t v11 = ProtobufDecoder.decodeVarint()();
      if (v1) {
        return v6;
      }
      if (v11 < 0)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        __break(1u);
        long long v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        uint64_t v25 = v24[2];
        if (v25) {
          goto LABEL_57;
        }
        __break(1u);
        long long v24 = (void *)a1[5];
        if (v24[2])
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v25 = v24[2];
            if (v25)
            {
LABEL_57:
              uint64_t v26 = v25 - 1;
              uint64_t v27 = v24[v26 + 4];
              _OWORD v24[2] = v26;
              a1[5] = v24;
              a1[2] = v27;
              return v6;
            }
LABEL_67:
            __break(1u);
            JUMPOUT(0x24610DDE0);
          }
        }
        else
        {
          __break(1u);
        }
        long long v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
        uint64_t v25 = v24[2];
        if (v25) {
          goto LABEL_57;
        }
        goto LABEL_67;
      }
      unint64_t v12 = a1[1] + v11;
      if (v5 < v12) {
        goto LABEL_52;
      }
      a1[2] = v12;
      double v13 = specialized CGPoint.init(from:)(a1);
      uint64_t v2 = (void *)a1[5];
      if (!v2[2]) {
        goto LABEL_60;
      }
      double v6 = v13;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v14 = v2[2];
        if (!v14) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        uint64_t v14 = v2[2];
        if (!v14) {
          goto LABEL_62;
        }
      }
      goto LABEL_33;
    }
    if ((v7 & 7) != 2) {
      goto LABEL_52;
    }
    uint64_t v2 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    }
    unint64_t v16 = v2[2];
    unint64_t v15 = v2[3];
    if (v16 >= v15 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v2);
    }
    v2[2] = v16 + 1;
    v2[v16 + 4] = v5;
    a1[5] = v2;
    uint64_t v17 = ProtobufDecoder.decodeVarint()();
    if (v1) {
      return v6;
    }
    if (v17 < 0) {
      goto LABEL_59;
    }
    unint64_t v18 = a1[1] + v17;
    if (v5 < v18)
    {
LABEL_52:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return v6;
    }
    a1[2] = v18;
    specialized UnitPoint.init(from:)(a1);
    uint64_t v2 = (void *)a1[5];
    if (!v2[2]) {
      goto LABEL_61;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v14 = v2[2];
      if (!v14) {
        break;
      }
      goto LABEL_33;
    }
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v14 = v2[2];
    if (!v14) {
      break;
    }
LABEL_33:
    uint64_t v19 = v14 - 1;
    uint64_t v20 = v2[v19 + 4];
    v2[2] = v19;
    a1[5] = v2;
    a1[2] = v20;
LABEL_45:
    unint64_t v4 = a1[1];
    unint64_t v5 = a1[2];
    if (v4 >= v5) {
      goto LABEL_51;
    }
  }
  __break(1u);
LABEL_51:
  a1[3] = 0;
  return v6;
}

__n128 sub_24610DDF8@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  float64x2_t v3 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_24610DE10(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  float64x2_t v3 = vmulq_f64(*(float64x2_t *)(a1 + 16), (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_24610DE28()
{
  return swift_getWitnessTable();
}

uint64_t specialized static ViewModifierContentProvider.providerMakeView(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v27[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)long long v28 = v5;
  *(_OWORD *)&unsigned char v28[16] = *(_OWORD *)(a1 + 64);
  int v29 = *(_DWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v26 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v27 = v6;
  outlined retain of _ViewInputs(a1);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v4, &v17);
  swift_release();
  if (v17)
  {
    uint64_t v7 = *(void *)(v17 + 40);
    unint64_t v9 = *(void (**)(uint64_t, uint64_t *))(v17 + 16);
    uint64_t v8 = *(void *)(v17 + 24);
    int v10 = *(unsigned __int8 *)(v17 + 32);
    outlined copy of BodyInputElement();
    swift_retain();
    swift_release();
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    int v10 = 255;
  }
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v26, v7);
  swift_release();
  swift_release();
  if (v10)
  {
    if (v10 == 255)
    {
      *(void *)a2 = MEMORY[0x263F8EE78];
      int v11 = *MEMORY[0x263F288F8];
      *(_DWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 12) = v11;
    }
    else
    {
      uint64_t v17 = v26;
      int v18 = DWORD2(v26);
      uint64_t v19 = *(void *)v27;
      long long v20 = *(_OWORD *)&v27[8];
      uint64_t v21 = *(void *)&v27[24];
      uint64_t v22 = *(void *)v28;
      long long v23 = *(_OWORD *)&v28[8];
      uint64_t v24 = *(void *)&v28[24];
      int v25 = v29;
      uint64_t v14 = swift_allocObject();
      long long v15 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v14 + 64) = v15;
      *(_OWORD *)(v14 + 80) = *(_OWORD *)(a1 + 64);
      *(_DWORD *)(v14 + 96) = *(_DWORD *)(a1 + 80);
      long long v16 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v14 + 32) = v16;
      *(void *)(v14 + 104) = v9;
      *(void *)(v14 + 112) = v8;
      outlined retain of _ViewInputs(a1);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of BodyInputElement?((uint64_t)v9, v8, v10);
      static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v17, (uint64_t)partial apply for closure #1 in static ViewModifierContentProvider.providerMakeView(view:inputs:), v14, a2);
      swift_release();
      outlined consume of BodyInputElement?((uint64_t)v9, v8, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    uint64_t v17 = v26;
    int v18 = DWORD2(v26);
    uint64_t v19 = *(void *)v27;
    long long v20 = *(_OWORD *)&v27[8];
    uint64_t v21 = *(void *)&v27[24];
    uint64_t v22 = *(void *)v28;
    long long v23 = *(_OWORD *)&v28[8];
    uint64_t v24 = *(void *)&v28[24];
    int v25 = v29;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    v9(v12, &v17);
    outlined consume of BodyInputElement?((uint64_t)v9, v8, 0);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

uint64_t specialized closure #2 in static ModifiedContent<>._makeView(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v6 = *(_DWORD *)(a1 + 80);
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v19 = *(_DWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  long long v16 = *(_OWORD *)(a1 + 48);
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v27 = v16;
  long long v28 = *(_OWORD *)(a1 + 64);
  int v29 = v6;
  long long v17 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v17;
  LODWORD(v26) = 0;
  *(void *)&long long v30 = v7;
  DWORD2(v30) = v8;
  *(void *)&long long v31 = v9;
  *((void *)&v31 + 1) = v13;
  LODWORD(v32) = 0;
  DWORD1(v32) = v10;
  *((void *)&v32 + 1) = v11;
  *(void *)CGAffineTransform v33 = v12;
  *(_OWORD *)&v33[8] = v14;
  *(void *)&v33[24] = v15;
  int v34 = v6;
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  outlined retain of _ViewInputs(a1);
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v21 = v32;
  long long v22 = *(_OWORD *)v33;
  long long v23 = *(_OWORD *)&v33[16];
  int v24 = v34;
  v20[0] = v30;
  v20[1] = v31;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _InsetViewModifier._makeView(modifier:inputs:body:)((uint64_t)&v30, OffsetAttribute2, (void (*)(void *__return_ptr, void, void))specialized closure #2 in static ModifiedContent<>._makeView(view:inputs:), a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v21) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v20);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v26) = v19;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v25);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return outlined release of _ViewInputs(a1);
  }
}

{
  uint64_t OffsetAttribute2;
  int ShouldRecordTree;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t v15;
  long long v16;
  long long v17;
  int v19;
  _OWORD v20[2];
  long long v21;
  long long v22;
  long long v23;
  int v24;
  _OWORD v25[2];
  long long v26;
  long long v27;
  long long v28;
  int v29;
  long long v30;
  long long v31;
  long long v32;
  unsigned char v33[32];
  int v34;
  uint64_t v35;
  uint64_t vars8;

  uint64_t v35 = *MEMORY[0x263EF8340];
  type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(0);
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v6 = *(_DWORD *)(a1 + 80);
  uint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  int v19 = *(_DWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 72);
  long long v16 = *(_OWORD *)(a1 + 48);
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v27 = v16;
  long long v28 = *(_OWORD *)(a1 + 64);
  int v29 = v6;
  long long v17 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v17;
  LODWORD(v26) = 0;
  *(void *)&long long v30 = v7;
  DWORD2(v30) = v8;
  *(void *)&long long v31 = v9;
  *((void *)&v31 + 1) = v13;
  LODWORD(v32) = 0;
  DWORD1(v32) = v10;
  *((void *)&v32 + 1) = v11;
  *(void *)CGAffineTransform v33 = v12;
  *(_OWORD *)&v33[8] = v14;
  *(void *)&v33[24] = v15;
  int v34 = v6;
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  outlined retain of _ViewInputs(a1);
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v21 = v32;
  long long v22 = *(_OWORD *)v33;
  long long v23 = *(_OWORD *)&v33[16];
  int v24 = v34;
  v20[0] = v30;
  v20[1] = v31;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _InsetViewModifier._makeView(modifier:inputs:body:)((uint64_t)&v30, OffsetAttribute2, (void (*)(void *__return_ptr, void, void))specialized closure #2 in static ModifiedContent<>._makeView(view:inputs:), a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v21) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v20);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v26) = v19;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v25);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return outlined release of _ViewInputs(a1);
  }
}

{
  int ShouldRecordTree;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  int v18;
  _OWORD v19[2];
  long long v20;
  long long v21;
  long long v22;
  int v23;
  _OWORD v24[2];
  long long v25;
  long long v26;
  long long v27;
  int v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[32];
  int v33;
  uint64_t v34;
  uint64_t vars8;

  int v34 = *MEMORY[0x263EF8340];
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>();
  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v5 = *(_DWORD *)(a1 + 80);
  int v6 = *(void *)a1;
  uint64_t v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(void *)(a1 + 16);
  int v18 = *(_DWORD *)(a1 + 32);
  uint64_t v9 = *(_DWORD *)(a1 + 36);
  int v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(_OWORD *)(a1 + 56);
  long long v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(_OWORD *)(a1 + 48);
  int v25 = *(_OWORD *)(a1 + 32);
  long long v26 = v15;
  long long v27 = *(_OWORD *)(a1 + 64);
  long long v28 = v5;
  long long v16 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v16;
  LODWORD(v25) = 0;
  *(void *)&int v29 = v6;
  DWORD2(v29) = v7;
  *(void *)&long long v30 = v8;
  *((void *)&v30 + 1) = v12;
  LODWORD(v31) = 0;
  DWORD1(v31) = v9;
  *((void *)&v31 + 1) = v10;
  *(void *)long long v32 = v11;
  *(_OWORD *)&v32[8] = v13;
  *(void *)&v32[24] = v14;
  CGAffineTransform v33 = v5;
  type metadata accessor for _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>();
  outlined retain of _ViewInputs(a1);
  AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v20 = v31;
  long long v21 = *(_OWORD *)v32;
  long long v22 = *(_OWORD *)&v32[16];
  long long v23 = v33;
  v19[0] = v29;
  v19[1] = v30;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static _InsetViewModifier._makeView(modifier:inputs:body:)((uint64_t)&v29, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v20) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v19);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v25) = v18;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a2, v24);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return outlined release of _ViewInputs(a1);
  }
}

uint64_t View.safeAreaInset<A>(edge:alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void (*a5)(double)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v25 = a6;
  int v22 = a4;
  uint64_t v21 = a3;
  uint64_t v23 = a2;
  uint64_t v24 = a8;
  char v10 = a1;
  uint64_t v11 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _InsetViewModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  int v18 = (char *)&v21 - v17;
  a5(v16);
  LOBYTE(a5) = specialized Edge.init(rawValue:)(2 * (v10 & 1u));
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a7);
  int v19 = &v18[*(int *)(v14 + 36)];
  *(void *)int v19 = 1;
  *((void *)v19 + 1) = v21;
  v19[16] = v22 & 1;
  v19[17] = (char)a5;
  *((void *)v19 + 3) = v23;
  View.modifier<A>(_:)(v18, v25, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

{
  char v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  long long v26 = a6;
  uint64_t v23 = a4;
  int v22 = a3;
  uint64_t v24 = a2;
  uint64_t v25 = a8;
  char v10 = a1;
  uint64_t v11 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _InsetViewModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  int v18 = (char *)&v22 - v17;
  a5(v16);
  LOBYTE(a5) = specialized Edge.init(rawValue:)((2 * (v10 & 1)) | 1u);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a7);
  int v19 = &v18[*(int *)(v14 + 36)];
  long long v20 = v22;
  *(void *)int v19 = 1;
  *((void *)v19 + 1) = v20;
  v19[16] = v23 & 1;
  v19[17] = (char)a5;
  *((void *)v19 + 3) = v24;
  View.modifier<A>(_:)(v18, v26, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for _InsetViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _InsetViewModifier.init(content:edge:regions:spacing:alignmentKey:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  uint64_t result = type metadata accessor for _InsetViewModifier();
  uint64_t v15 = a8 + *(int *)(result + 36);
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + 8) = a4;
  *(unsigned char *)(v15 + 16) = a5 & 1;
  *(unsigned char *)(v15 + 17) = a2;
  *(void *)(v15 + 24) = a6;
  return result;
}

uint64_t _InsetViewModifier.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _InsetViewModifier.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_InsetViewModifier.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _InsetViewModifier.properties.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 36));
}

uint64_t _InsetViewModifier.properties.setter(uint64_t result, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6 + *(int *)(a6 + 36);
  *(void *)uint64_t v7 = result;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3 & 1;
  *(unsigned char *)(v7 + 17) = a4;
  *(void *)(v7 + 24) = a5;
  return result;
}

uint64_t (*_InsetViewModifier.properties.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t specialized static _InsetViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return specialized static _InsetViewModifier._makeView(modifier:inputs:body:)(a1, a2, (void (*)(void *__return_ptr, void, void))specialized closure #2 in static ModifiedContent<>._makeView(view:inputs:), a3);
}

uint64_t specialized static _InsetViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(void *__return_ptr, void, void)@<X3>, uint64_t a4@<X8>)
{
  void (*v67)(void *__return_ptr, void, void);
  int v68;
  uint64_t v69;
  unsigned int v70;
  _OWORD v71[2];
  long long v72;
  long long v73;
  long long v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  int v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  int v102;
  _OWORD v103[3];
  uint64_t v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  int v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  long long v115;
  int v116;
  uint64_t v117;

  long long v117 = *MEMORY[0x263EF8340];
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 16);
  v103[0] = *(_OWORD *)a1;
  v103[1] = v9;
  v103[2] = v7;
  __int16 v10 = WORD2(v7);
  uint64_t v99 = v7;
  uint64_t v100 = v8;
  uint64_t v101 = *(_OWORD *)(a1 + 64);
  uint64_t v102 = *(_DWORD *)(a1 + 80);
  CGFloat v97 = v103[0];
  long long v98 = v9;
  outlined retain of _ViewInputs(a1);
  if ((v10 & 0x100) != 0)
  {
    specialized _GraphInputs.pushScope<A>(id:)(0);
    char v104 = *(void *)&v103[0];
    long long v47 = *(_OWORD *)(a1 + 48);
    CGFloat v93 = *(_OWORD *)(a1 + 32);
    long long v94 = v47;
    CGFloat v95 = *(_OWORD *)(a1 + 64);
    long long v96 = *(_DWORD *)(a1 + 80);
    long long v48 = *(_OWORD *)(a1 + 16);
    CGFloat v91 = *(_OWORD *)a1;
    long long v92 = v48;
    outlined retain of _ViewInputs(a1);
    outlined retain of ViewTransform((uint64_t)&v104);
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v91, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    outlined release of ViewTransform((uint64_t)&v104);
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  else
  {
    char v104 = *(void *)&v103[0];
    long long v11 = *(_OWORD *)(a1 + 48);
    CGFloat v93 = *(_OWORD *)(a1 + 32);
    long long v94 = v11;
    CGFloat v95 = *(_OWORD *)(a1 + 64);
    long long v96 = *(_DWORD *)(a1 + 80);
    long long v12 = *(_OWORD *)(a1 + 16);
    CGFloat v91 = *(_OWORD *)a1;
    long long v92 = v12;
    outlined retain of _ViewInputs(a1);
    outlined retain of ViewTransform((uint64_t)&v104);
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v91, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    outlined release of ViewTransform((uint64_t)&v104);
  }
  uint64_t v13 = (unsigned int *)MEMORY[0x263F288F8];
  uint64_t v63 = a1;
  if ((v10 & 0x22) == 0)
  {
    CGFloat v68 = 1;
    int v61 = 0;
    BOOL v62 = 1;
    goto LABEL_11;
  }
  unsigned int v65 = a2;
  CGFloat v67 = a3;
  BOOL v62 = (v10 & 0x20) == 0;
  unsigned int v14 = *(_DWORD *)(a1 + 64);
  unsigned int v15 = *(_DWORD *)(a1 + 72);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v103);
  unsigned int v18 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v103);
  swift_release();
  unsigned int v19 = *v13;
  unsigned int v60 = v18;
  if ((v10 & 0x20) != 0)
  {
    uint64_t v55 = AGMakeUniqueID();
    *(void *)&uint64_t v111 = __PAIR64__(v15, v14);
    *((void *)&v111 + 1) = __PAIR64__(v18, OffsetAttribute2);
    LODWORD(v112) = v19;
    DWORD1(v112) = v19;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for (ViewGeometry, ViewGeometry)();
    lazy protocol witness table accessor for type InsetChildGeometry and conformance InsetChildGeometry();
    Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v101) = AGGraphCreateOffsetAttribute2();
    int v57 = v99;
    DWORD2(v101) = AGGraphCreateOffsetAttribute2();
    unsigned int v20 = *(_DWORD *)(a1 + 76);
    *(void *)&uint64_t v111 = __PAIR64__(v15, v14);
    *((void *)&v111 + 1) = __PAIR64__(v18, OffsetAttribute2);
    LODWORD(v112) = v19;
    *(void *)((char *)&v112 + 4) = __PAIR64__(v20, v19);
    *(void *)&uint64_t v113 = v55;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas();
    HIDWORD(v101) = Attribute.init<A>(body:value:flags:update:)();
    int v21 = *(_DWORD *)(a1 + 60);
    *(void *)&uint64_t v111 = __PAIR64__(v15, v14);
    DWORD2(v111) = v21;
    *(void *)&double v112 = v55;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type InsetPrimaryTransform and conformance InsetPrimaryTransform();
    HIDWORD(v100) = Attribute.init<A>(body:value:flags:update:)();
    LODWORD(v99) = v57 | 0x1C;
    LODWORD(v95) = AGGraphCreateOffsetAttribute2();
    int v22 = v93;
    DWORD2(v95) = AGGraphCreateOffsetAttribute2();
    LODWORD(v93) = v22 | 0x18;
    a3 = v67;
    if ((v10 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_9:
    int v61 = 0;
    CGFloat v68 = 1;
    goto LABEL_10;
  }
  a3 = v67;
  if ((v10 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_6:
  *(void *)&uint64_t v111 = __PAIR64__(v15, v14);
  *((void *)&v111 + 1) = __PAIR64__(v60, OffsetAttribute2);
  LODWORD(v112) = v19;
  DWORD1(v112) = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type InsetLayoutComputer and conformance InsetLayoutComputer();
  int v61 = Attribute.init<A>(body:value:flags:update:)();
  CGFloat v68 = 0;
LABEL_10:
  a2 = v65;
LABEL_11:
  uint64_t v113 = v99;
  uint64_t v114 = v100;
  uint64_t v115 = v101;
  unsigned __int8 v116 = v102;
  uint64_t v111 = v97;
  double v112 = v98;
  a3(&v105, &v111, a2);
  uint64_t v66 = v105;
  int v59 = DWORD2(v105);
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ModifiedContent<Color, _FrameLayout>();
  uint64_t v23 = v91;
  int v24 = DWORD2(v91);
  uint64_t v25 = v92;
  unsigned int v26 = HIDWORD(v92);
  uint64_t v27 = v93;
  unsigned int v56 = DWORD2(v92);
  uint64_t v29 = *((void *)&v93 + 1);
  uint64_t v28 = v94;
  unsigned int v30 = HIDWORD(v94);
  unsigned int v53 = v95;
  unsigned int v54 = DWORD2(v94);
  unsigned int v51 = DWORD2(v95);
  unsigned int v52 = DWORD1(v95);
  int v49 = v96;
  unsigned int v50 = HIDWORD(v95);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  Swift::String v76 = v23;
  Swift::Bool v77 = v24;
  uint64_t v78 = v25;
  CGPathRef v79 = v56;
  Swift::String v80 = v26;
  double v82 = v29;
  long long v83 = v28;
  uint64_t v84 = v54;
  double v85 = v30;
  double v86 = v53;
  int v87 = v52;
  uint64_t v88 = v51;
  size_t v89 = v50;
  long long v90 = v49;
  HIDWORD(v81) = HIDWORD(v27);
  LODWORD(v81) = 0;
  *(void *)&uint64_t v105 = v23;
  DWORD2(v105) = v24;
  *(void *)&long long v106 = v25;
  *((void *)&v106 + 1) = __PAIR64__(v26, v56);
  LODWORD(v107) = 0;
  DWORD1(v107) = HIDWORD(v27);
  *((void *)&v107 + 1) = v29;
  *(void *)&uint64_t v108 = v28;
  *((void *)&v108 + 1) = __PAIR64__(v30, v54);
  *(void *)&long long v109 = __PAIR64__(v52, v53);
  *((void *)&v109 + 1) = __PAIR64__(v50, v51);
  uint64_t v110 = v49;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v31 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  char v72 = v107;
  uint64_t v73 = v108;
  uint64_t v74 = v109;
  id v75 = v110;
  v71[0] = v105;
  v71[1] = v106;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v31, (uint64_t)&v105, (uint64_t)&v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v72) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v69, v71);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v81) = v27;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v69, &v76);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v32 = v66;
  swift_release();
  uint64_t v33 = swift_release();
  uint64_t v34 = v69;
  unsigned int v35 = v70;
  int v36 = *MEMORY[0x263F288F8];
  if (!v62)
  {
    MEMORY[0x270FA5388](v33);
    MEMORY[0x270FA5388](v37);
    uint64_t v38 = AGGraphMutateAttribute();
    MEMORY[0x270FA5388](v38);
    uint64_t v32 = v66;
    MEMORY[0x270FA5388](v39);
    uint64_t v33 = AGGraphMutateAttribute();
  }
  if ((v68 & 1) == 0)
  {
    MEMORY[0x270FA5388](v33);
    MEMORY[0x270FA5388](v40);
    AGGraphMutateAttribute();
  }
  Swift::Bool v81 = MEMORY[0x263F8EE78];
  LODWORD(v82) = 0;
  Swift::String v76 = v32;
  Swift::Bool v77 = v59;
  uint64_t v78 = v34;
  CGPathRef v79 = v35;
  uint64_t v41 = *(void *)(v63 + 48);
  *(void *)&v71[0] = v41;
  DWORD2(v71[0]) = *(_DWORD *)(v63 + 56);
  uint64_t v42 = *(void *)(v41 + 16);
  if (v42)
  {
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)v71);
    long long v43 = (uint64_t *)(v41 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v76, *(v43 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v43, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v43 += 2;
      --v42;
    }
    while (v42);
    outlined release of LinearGradient((uint64_t)v71);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (!v68) {
    int v36 = v61;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v44 = v81;
  int v45 = v82;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v44;
  *(_DWORD *)(a4 + 8) = v45;
  *(_DWORD *)(a4 + 12) = v36;
  return result;
}

uint64_t specialized static _InsetViewModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  v113[0] = *(_OWORD *)a1;
  v113[1] = v5;
  v113[2] = v3;
  __int16 v6 = WORD2(v3);
  long long v109 = v3;
  long long v110 = v4;
  long long v111 = *(_OWORD *)(a1 + 64);
  int v112 = *(_DWORD *)(a1 + 80);
  long long v107 = v113[0];
  long long v108 = v5;
  outlined retain of _ViewInputs(a1);
  if ((v6 & 0x100) != 0)
  {
    specialized _GraphInputs.pushScope<A>(id:)(0);
    uint64_t v114 = *(void *)&v113[0];
    long long v52 = *(_OWORD *)(a1 + 48);
    long long v103 = *(_OWORD *)(a1 + 32);
    long long v104 = v52;
    long long v105 = *(_OWORD *)(a1 + 64);
    int v106 = *(_DWORD *)(a1 + 80);
    long long v53 = *(_OWORD *)(a1 + 16);
    long long v101 = *(_OWORD *)a1;
    long long v102 = v53;
    outlined retain of _ViewInputs(a1);
    outlined retain of ViewTransform((uint64_t)&v114);
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v101, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    outlined release of ViewTransform((uint64_t)&v114);
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  else
  {
    uint64_t v114 = *(void *)&v113[0];
    long long v7 = *(_OWORD *)(a1 + 48);
    long long v103 = *(_OWORD *)(a1 + 32);
    long long v104 = v7;
    long long v105 = *(_OWORD *)(a1 + 64);
    int v106 = *(_DWORD *)(a1 + 80);
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v101 = *(_OWORD *)a1;
    long long v102 = v8;
    outlined retain of _ViewInputs(a1);
    outlined retain of ViewTransform((uint64_t)&v114);
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v101, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
    outlined release of ViewTransform((uint64_t)&v114);
  }
  long long v9 = (int *)MEMORY[0x263F288F8];
  uint64_t v70 = a1;
  if ((v6 & 0x22) != 0)
  {
    BOOL v69 = (v6 & 0x20) == 0;
    unsigned int v10 = *(_DWORD *)(a1 + 64);
    unsigned int v11 = *(_DWORD *)(a1 + 72);
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t KeyPath = swift_getKeyPath();
    swift_beginAccess();
    outlined retain of _GraphInputs((uint64_t)v113);
    int v14 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    outlined release of _GraphInputs((uint64_t)v113);
    swift_release();
    int v15 = *v9;
    if ((v6 & 0x20) != 0)
    {
      uint64_t v75 = AGMakeUniqueID();
      unint64_t v121 = __PAIR64__(v11, v10);
      int v122 = OffsetAttribute2;
      int v123 = v14;
      LODWORD(v124) = v15;
      HIDWORD(v124) = v15;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for (ViewGeometry, ViewGeometry)();
      lazy protocol witness table accessor for type InsetChildGeometry and conformance InsetChildGeometry();
      Attribute.init<A>(body:value:flags:update:)();
      LODWORD(v111) = AGGraphCreateOffsetAttribute2();
      int v76 = v109;
      DWORD2(v111) = AGGraphCreateOffsetAttribute2();
      unsigned int v16 = *(_DWORD *)(a1 + 76);
      unint64_t v121 = __PAIR64__(v11, v10);
      int v122 = OffsetAttribute2;
      int v123 = v14;
      LODWORD(v124) = v15;
      HIDWORD(v124) = v15;
      unsigned int v125 = v16;
      uint64_t v127 = v75;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas();
      HIDWORD(v111) = Attribute.init<A>(body:value:flags:update:)();
      int v17 = *(_DWORD *)(a1 + 60);
      unint64_t v121 = __PAIR64__(v11, v10);
      int v122 = v17;
      uint64_t v124 = v75;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetPrimaryTransform and conformance InsetPrimaryTransform();
      HIDWORD(v110) = Attribute.init<A>(body:value:flags:update:)();
      LODWORD(v109) = v76 | 0x1C;
      LODWORD(v105) = AGGraphCreateOffsetAttribute2();
      int v18 = v103;
      DWORD2(v105) = AGGraphCreateOffsetAttribute2();
      LODWORD(v103) = v18 | 0x18;
      if ((v6 & 2) != 0) {
        goto LABEL_6;
      }
    }
    else if ((v6 & 2) != 0)
    {
LABEL_6:
      unint64_t v121 = __PAIR64__(v11, v10);
      int v122 = OffsetAttribute2;
      int v123 = v14;
      LODWORD(v124) = v15;
      HIDWORD(v124) = v15;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetLayoutComputer and conformance InsetLayoutComputer();
      int v74 = Attribute.init<A>(body:value:flags:update:)();
      int v77 = 0;
      goto LABEL_10;
    }
    int v74 = 0;
    int v77 = 1;
  }
  else
  {
    int v74 = 0;
    int v77 = 1;
    BOOL v69 = 1;
  }
LABEL_10:
  unint64_t v19 = v107;
  int v20 = DWORD2(v107);
  uint64_t v21 = v108;
  unsigned int v22 = DWORD2(v108);
  unsigned int v23 = HIDWORD(v108);
  int v72 = v109;
  uint64_t v24 = *((void *)&v109 + 1);
  uint64_t v25 = v110;
  unsigned int v26 = DWORD2(v110);
  unsigned int v65 = HIDWORD(v110);
  int v67 = DWORD1(v109);
  unsigned int v61 = DWORD1(v111);
  unsigned int v63 = v111;
  unsigned int v57 = HIDWORD(v111);
  unsigned int v59 = DWORD2(v111);
  int v55 = v112;
  _s7SwiftUI21_ViewModifier_ContentVyAA015SafeAreaPaddingD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SafeAreaPaddingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SafeAreaPaddingModifier and conformance SafeAreaPaddingModifier, (uint64_t)&type metadata for SafeAreaPaddingModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ViewModifier_Content);
  AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&long long v115 = v19;
  DWORD2(v115) = v20;
  *(void *)&long long v116 = v21;
  *((void *)&v116 + 1) = __PAIR64__(v23, v22);
  DWORD1(v117) = v67;
  *((void *)&v117 + 1) = v24;
  *(void *)&long long v118 = v25;
  *((void *)&v118 + 1) = __PAIR64__(v65, v26);
  *(void *)&long long v119 = __PAIR64__(v61, v63);
  *((void *)&v119 + 1) = __PAIR64__(v57, v59);
  int v120 = v55;
  unint64_t v121 = v19;
  int v122 = v20;
  uint64_t v124 = v21;
  unsigned int v125 = v22;
  unsigned int v126 = v23;
  LODWORD(v127) = 0;
  HIDWORD(v127) = v67;
  uint64_t v128 = v24;
  uint64_t v129 = v25;
  unsigned int v130 = v26;
  unsigned int v131 = v65;
  unsigned int v132 = v63;
  unsigned int v133 = v61;
  unsigned int v134 = v59;
  unsigned int v135 = v57;
  int v136 = v55;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static ViewModifierContentProvider.providerMakeView(view:inputs:)((uint64_t)&v121, (uint64_t)&v86);
  LODWORD(v117) = v72;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v86, &v115);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v73 = v86;
  int v68 = v87;
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for ModifiedContent<Color, _FrameLayout>();
  uint64_t v27 = v101;
  int v28 = DWORD2(v101);
  uint64_t v29 = v102;
  unsigned int v30 = DWORD2(v102);
  unsigned int v31 = HIDWORD(v102);
  int v54 = v103;
  int v32 = DWORD1(v103);
  uint64_t v34 = *((void *)&v103 + 1);
  uint64_t v33 = v104;
  unsigned int v35 = DWORD2(v104);
  unsigned int v64 = v105;
  unsigned int v66 = HIDWORD(v104);
  unsigned int v60 = DWORD2(v105);
  unsigned int v62 = DWORD1(v105);
  int v56 = v106;
  unsigned int v58 = HIDWORD(v105);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v86 = v27;
  int v87 = v28;
  uint64_t v88 = v29;
  unsigned int v89 = v30;
  unsigned int v90 = v31;
  uint64_t v92 = v34;
  uint64_t v93 = v33;
  unsigned int v94 = v35;
  unsigned int v95 = v66;
  unsigned int v96 = v64;
  unsigned int v97 = v62;
  unsigned int v98 = v60;
  unsigned int v99 = v58;
  int v100 = v56;
  HIDWORD(v91) = v32;
  LODWORD(v91) = 0;
  *(void *)&long long v115 = v27;
  DWORD2(v115) = v28;
  *(void *)&long long v116 = v29;
  *((void *)&v116 + 1) = __PAIR64__(v31, v30);
  LODWORD(v117) = 0;
  DWORD1(v117) = v32;
  *((void *)&v117 + 1) = v34;
  *(void *)&long long v118 = v33;
  *((void *)&v118 + 1) = __PAIR64__(v66, v35);
  *(void *)&long long v119 = __PAIR64__(v62, v64);
  *((void *)&v119 + 1) = __PAIR64__(v58, v60);
  int v120 = v56;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v36 = AGGraphCreateOffsetAttribute2();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v82 = v117;
  long long v83 = v118;
  long long v84 = v119;
  int v85 = v120;
  v81[0] = v115;
  v81[1] = v116;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v36, (uint64_t)&v115, (uint64_t)&v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v82) = 0;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v79, v81);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    LODWORD(v91) = v54;
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v79, &v86);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v37 = v73;
  swift_release();
  uint64_t v38 = swift_release();
  uint64_t v39 = v79;
  unsigned int v40 = v80;
  int v41 = *MEMORY[0x263F288F8];
  if (!v69)
  {
    MEMORY[0x270FA5388](v38);
    MEMORY[0x270FA5388](v42);
    uint64_t v43 = AGGraphMutateAttribute();
    MEMORY[0x270FA5388](v43);
    uint64_t v37 = v73;
    MEMORY[0x270FA5388](v44);
    uint64_t v38 = AGGraphMutateAttribute();
  }
  if ((v77 & 1) == 0)
  {
    MEMORY[0x270FA5388](v38);
    MEMORY[0x270FA5388](v45);
    AGGraphMutateAttribute();
  }
  uint64_t v91 = MEMORY[0x263F8EE78];
  LODWORD(v92) = 0;
  uint64_t v86 = v37;
  int v87 = v68;
  uint64_t v88 = v39;
  unsigned int v89 = v40;
  uint64_t v46 = *(void *)(v70 + 48);
  *(void *)&v81[0] = v46;
  DWORD2(v81[0]) = *(_DWORD *)(v70 + 56);
  uint64_t v47 = *(void *)(v46 + 16);
  if (v47)
  {
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)v81);
    long long v48 = (uint64_t *)(v46 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v86, *(v48 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v48, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v48 += 2;
      --v47;
    }
    while (v47);
    outlined release of LinearGradient((uint64_t)v81);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (!v77) {
    int v41 = v74;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v49 = v91;
  int v50 = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v49;
  *(_DWORD *)(a2 + 8) = v50;
  *(_DWORD *)(a2 + 12) = v41;
  return result;
}

uint64_t static _InsetViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  void (*v37)(uint64_t *__return_ptr, int *, uint64_t *);
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t result;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unint64_t v69;
  unsigned int v70;
  BOOL v71;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  long long v107;
  uint64_t v108;
  uint64_t v109;
  long long v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  long long v132;
  uint64_t v133;
  uint64_t v134;
  long long v135;
  unint64_t v136;
  int v137;
  uint64_t v138;

  CALayer v138 = *MEMORY[0x263EF8340];
  uint64_t v79 = *a1;
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  unsigned int v15 = *(_DWORD *)(a2 + 56);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  unsigned int v16 = *(_DWORD *)(a2 + 64);
  unsigned int v17 = *(_DWORD *)(a2 + 68);
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v19 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  uint64_t v129 = *(void *)a2;
  unsigned int v131 = v7;
  uint64_t v70 = v6;
  unsigned int v130 = v6;
  int v67 = v8;
  *(void *)&unsigned int v132 = __PAIR64__(v9, v8);
  unsigned int v62 = v10;
  unsigned int v65 = v9;
  *((void *)&v132 + 1) = __PAIR64__(v11, v10);
  unsigned int v133 = v13;
  unsigned int v134 = v12;
  *(void *)&unsigned int v135 = __PAIR64__(v14, v15);
  uint64_t v73 = v14;
  int v76 = v19;
  uint64_t v78 = v16;
  *((void *)&v135 + 1) = __PAIR64__(v17, v16);
  unsigned int v80 = v18;
  int v136 = __PAIR64__(v19, v18);
  uint64_t v137 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v75 = v12;
  if ((v11 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)(0);
  }
  uint64_t v113 = v129;
  long long v115 = v7;
  uint64_t v114 = v70;
  long long v116 = v67;
  long long v117 = v65;
  long long v118 = v62;
  int v120 = v13;
  unint64_t v121 = v12;
  long long v119 = v11;
  int v122 = v15;
  int v123 = v73;
  uint64_t v124 = v78;
  unsigned int v125 = v17;
  unsigned int v126 = v80;
  uint64_t v127 = v76;
  uint64_t v128 = v20;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(&v113, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  swift_release();
  if ((v11 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  if ((v11 & 0x22) != 0)
  {
    long long v71 = (v11 & 0x20) == 0;
    closure #1 in static _InsetViewModifier._makeView(modifier:inputs:body:)(1);
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t KeyPath = swift_getKeyPath();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    int v23 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v24 = *MEMORY[0x263F288F8];
    unsigned int v63 = OffsetAttribute2;
    if ((v11 & 0x20) != 0)
    {
      unsigned int v60 = AGMakeUniqueID();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for (ViewGeometry, ViewGeometry)();
      lazy protocol witness table accessor for type InsetChildGeometry and conformance InsetChildGeometry();
      Attribute.init<A>(body:value:flags:update:)();
      DWORD2(v135) = AGGraphCreateOffsetAttribute2();
      unsigned int v66 = DWORD2(v132);
      LODWORD(v136) = AGGraphCreateOffsetAttribute2();
      long long v105 = v23;
      LODWORD(v107) = v76;
      *((void *)&v107 + 1) = v60;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas();
      HIDWORD(v136) = Attribute.init<A>(body:value:flags:update:)();
      long long v103 = __PAIR64__(v80, v78);
      long long v104 = v73;
      int v106 = v60;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetPrimaryTransform and conformance InsetPrimaryTransform();
      DWORD1(v135) = Attribute.init<A>(body:value:flags:update:)();
      DWORD2(v132) = v66 | 0x1C;
      uint64_t v124 = AGGraphCreateOffsetAttribute2();
      int v25 = v118;
      unsigned int v126 = AGGraphCreateOffsetAttribute2();
      long long v118 = v25 | 0x18;
      if ((v11 & 2) != 0) {
        goto LABEL_8;
      }
    }
    else if ((v11 & 2) != 0)
    {
LABEL_8:
      long long v103 = __PAIR64__(v80, v78);
      long long v104 = v63;
      long long v105 = v23;
      LODWORD(v106) = v24;
      HIDWORD(v106) = v24;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type InsetLayoutComputer and conformance InsetLayoutComputer();
      int v74 = Attribute.init<A>(body:value:flags:update:)();
      Swift::Bool v81 = 0;
      goto LABEL_12;
    }
    int v74 = 0;
    Swift::Bool v81 = 1;
  }
  else
  {
    int v74 = 0;
    Swift::Bool v81 = 1;
    long long v71 = 1;
  }
LABEL_12:
  long long v103 = v129;
  int v106 = v131;
  long long v107 = v132;
  long long v108 = v133;
  long long v109 = v134;
  long long v110 = v135;
  long long v111 = v136;
  long long v104 = v130;
  int v112 = v137;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v26 = swift_bridgeObjectRetain();
  a3(&v88, v26, &v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v27 = swift_release();
  BOOL v69 = v88;
  unsigned int v64 = v89;
  MEMORY[0x270FA5388](v27);
  LODWORD(v88) = v79;
  type metadata accessor for _InsetViewModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #6 in static _InsetViewModifier._makeView(modifier:inputs:body:), a4, &v103);
  int v77 = v103;
  uint64_t v28 = v113;
  uint64_t v29 = v115;
  unsigned int v59 = v116;
  unsigned int v57 = v114;
  unsigned int v58 = v117;
  unsigned int v61 = v118;
  uint64_t v30 = v120;
  uint64_t v31 = v121;
  unsigned int v32 = v119;
  int v55 = v123;
  int v56 = v122;
  unsigned int v33 = v124;
  unsigned int v34 = v126;
  unsigned int v35 = v127;
  long long v53 = v128;
  int v54 = v125;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v103 = v28;
  int v106 = v29;
  long long v104 = v57;
  *(void *)&long long v107 = __PAIR64__(v58, v59);
  HIDWORD(v107) = v32;
  long long v108 = v30;
  long long v109 = v31;
  *(void *)&long long v110 = __PAIR64__(v55, v56);
  *((void *)&v110 + 1) = __PAIR64__(v54, v33);
  long long v111 = __PAIR64__(v35, v34);
  int v112 = v53;
  int v85 = v77;
  uint64_t v88 = v28;
  unsigned int v89 = v57;
  unsigned int v90 = v29;
  uint64_t v91 = v59;
  uint64_t v92 = v58;
  uint64_t v93 = v32;
  unsigned int v94 = v30;
  unsigned int v95 = v31;
  unsigned int v96 = v56;
  unsigned int v97 = v55;
  unsigned int v98 = v33;
  unsigned int v99 = v54;
  int v100 = v34;
  long long v101 = v35;
  long long v102 = v53;
  uint64_t v37 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37(&v86, &v85, &v88);
  DWORD2(v107) = v61;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v86, (uint64_t)&v103);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v38 = (int *)MEMORY[0x263F288F8];
  swift_release();
  uint64_t v39 = swift_release();
  unsigned int v40 = v86;
  int v41 = v87;
  uint64_t v42 = *v38;
  if (!v71)
  {
    long long v84 = v87;
    uint64_t v43 = v86;
    MEMORY[0x270FA5388](v39);
    MEMORY[0x270FA5388](v44);
    uint64_t v45 = AGGraphMutateAttribute();
    MEMORY[0x270FA5388](v45);
    unsigned int v40 = v43;
    int v41 = v84;
    MEMORY[0x270FA5388](v46);
    uint64_t v39 = AGGraphMutateAttribute();
  }
  if ((v81 & 1) == 0)
  {
    MEMORY[0x270FA5388](v39);
    MEMORY[0x270FA5388](v47);
    AGGraphMutateAttribute();
  }
  *((void *)&v107 + 1) = MEMORY[0x263F8EE78];
  LODWORD(v108) = 0;
  long long v103 = v69;
  int v106 = v40;
  long long v104 = v64;
  LODWORD(v107) = v41;
  long long v48 = *(void *)(v75 + 16);
  if (v48)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = (uint64_t *)(v75 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v103, *(v49 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v49, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v49 += 2;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v81) {
    uint64_t v42 = v74;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v50 = *((void *)&v107 + 1);
  unsigned int v51 = v108;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a6 = v50;
  *(_DWORD *)(a6 + 8) = v51;
  *(_DWORD *)(a6 + 12) = v42;
  return result;
}

uint64_t closure #1 in static _InsetViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _InsetViewModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  void v9[2] = v2;
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6, (uint64_t)v9, v5, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v9[5];
}

uint64_t closure #6 in static _InsetViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for _InsetViewModifier();
  _OWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _InsetViewModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static _InsetViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t InsetViewLayout.spacing()(uint64_t a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  uint64_t result = AGGraphGetValue();
  if (*(unsigned char *)(result + 16))
  {
    unint64_t v5 = HIDWORD(a3);
    int v6 = *MEMORY[0x263F288F8];
    if (*MEMORY[0x263F288F8] == a3)
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t Value = &static LayoutComputer.defaultValue;
    }
    else
    {
      uint64_t Value = (long long *)AGGraphGetValue();
    }
    uint64_t v8 = *(void *)Value;
    if (v6 == v5)
    {
      uint64_t v9 = one-time initialization token for defaultValue;
      swift_retain();
      if (v9 != -1) {
        swift_once();
      }
      uint64_t v10 = static LayoutComputer.defaultValue;
    }
    else
    {
      uint64_t v10 = *(void *)AGGraphGetValue();
      swift_retain();
    }
    char v11 = *(unsigned char *)(AGGraphGetValue() + 17);
    uint64_t v12 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_28;
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 112))(&v19);
    uint64_t v18 = v19;
    char v17 = *(unsigned char *)AGGraphGetValue();
    if (!lockAssertionsAreEnabled) {
      goto LABEL_23;
    }
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
LABEL_28:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
LABEL_23:
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 112))(&v16);
      uint64_t v15 = v16;
      Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(!(v11 & 1), &v17, &v15);
      char v14 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0 && one-time initialization token for defaultSpacingValue != -1) {
        swift_once();
      }
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t InsetViewLayout.primaryMinimum(parentProposalWithoutSpacing:)(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  switch(*(unsigned char *)(AGGraphGetValue() + 17))
  {
    case 1:
    case 3:
      uint64_t v9 = 0;
      char v8 = 0;
      char v7 = *((unsigned char *)a1 + 24);
      uint64_t v6 = a1[2];
      if (*MEMORY[0x263F288F8] != a4) {
        goto LABEL_3;
      }
      goto LABEL_5;
    default:
      uint64_t v6 = 0;
      char v7 = 0;
      char v8 = *((unsigned char *)a1 + 8);
      uint64_t v9 = *a1;
      if (*MEMORY[0x263F288F8] == a4)
      {
LABEL_5:
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        uint64_t Value = &static LayoutComputer.defaultValue;
      }
      else
      {
LABEL_3:
        uint64_t Value = (long long *)AGGraphGetValue();
      }
      uint64_t v11 = *(void *)Value;
      uint64_t v12 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x246111D5CLL);
        }
      }
      uint64_t v14 = v9;
      char v15 = v8;
      uint64_t v16 = v6;
      char v17 = v7;
      (*(void (**)(uint64_t *))(*(void *)v11 + 120))(&v14);
      return swift_release();
  }
}

uint64_t InsetViewLayout.secondaryProposal(parentProposal:spacing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v11 = *(double *)a1;
  char v12 = *(unsigned char *)(a1 + 8);
  double v13 = *(double *)(a1 + 16);
  char v14 = *(unsigned char *)(a1 + 24);
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  uint64_t result = AGGraphGetValue();
  switch(*(unsigned char *)(result + 17))
  {
    case 1:
    case 3:
      if ((v12 & 1) == 0)
      {
        char v12 = 0;
        if (v11 - a6 < 0.0) {
          double v17 = 0.0;
        }
        else {
          double v17 = v11 - a6;
        }
        char v16 = 1;
        double v11 = v17;
        goto LABEL_14;
      }
      char v12 = 1;
      break;
    default:
      if (v14)
      {
        char v14 = 1;
      }
      else
      {
        char v14 = 0;
        char v16 = 0;
        if (v13 - a6 < 0.0) {
          double v17 = 0.0;
        }
        else {
          double v17 = v13 - a6;
        }
        double v13 = v17;
LABEL_14:
        double v20 = v11;
        char v21 = v12;
        double v22 = v13;
        char v23 = v14;
        uint64_t result = InsetViewLayout.primaryMinimum(parentProposalWithoutSpacing:)((uint64_t *)&v20, a2, a3, a4);
        double v19 = v17 - v18;
        if (v19 < 0.0) {
          double v19 = 0.0;
        }
        if (v16)
        {
          char v12 = 0;
          double v11 = v19;
        }
        else
        {
          char v14 = 0;
          double v13 = v19;
        }
      }
      break;
  }
  *(double *)a5 = v11;
  *(unsigned char *)(a5 + 8) = v12;
  *(double *)(a5 + 16) = v13;
  *(unsigned char *)(a5 + 24) = v14;
  return result;
}

uint64_t InsetViewLayout.primaryProposal(parentProposal:secondarySize:spacing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  double v9 = *(double *)a1;
  char v10 = *(unsigned char *)(a1 + 8);
  double v11 = *(double *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 24);
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  uint64_t result = AGGraphGetValue();
  switch(*(unsigned char *)(result + 17))
  {
    case 1:
    case 3:
      if ((v10 & 1) == 0)
      {
        if (v9 - (a3 + a5) < 0.0) {
          double v9 = 0.0;
        }
        else {
          double v9 = v9 - (a3 + a5);
        }
      }
      break;
    default:
      if ((v12 & 1) == 0)
      {
        if (v11 - (a4 + a5) < 0.0) {
          double v11 = 0.0;
        }
        else {
          double v11 = v11 - (a4 + a5);
        }
      }
      break;
  }
  *(double *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10;
  *(double *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + 24) = v12;
  return result;
}

uint64_t InsetViewLayout.childGeometry()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  int v7 = a5;
  unint64_t v11 = HIDWORD(a5);
  InsetViewLayout.spacing()(a3, a4, a5);
  double v13 = v12;
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  *(void *)&rect.size.CGFloat width = a4;
  int v14 = *(unsigned __int8 *)(AGGraphGetValue() + 17);
  uint64_t Value = AGGraphGetValue();
  double v16 = *(double *)(Value + 16);
  BOOL v18 = (~*(void *)&v16 & 0x7FF0000000000000) == 0 && (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0;
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0 && (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v19 = 0.0;
  }
  else {
    double v19 = *(double *)(Value + 16);
  }
  uint64_t v17 = *(void *)(Value + 24);
  BOOL v20 = (~v17 & 0x7FF0000000000000) == 0 && (v17 & 0xFFFFFFFFFFFFFLL) != 0;
  if ((~v17 & 0x7FF0000000000000) == 0 && (v17 & 0xFFFFFFFFFFFFFLL) != 0) {
    double v21 = 0.0;
  }
  else {
    double v21 = *(double *)(Value + 24);
  }
  if (v14)
  {
    double v16 = *(double *)(Value + 24);
    BOOL v22 = v18;
    if (!v20) {
      goto LABEL_9;
    }
LABEL_11:
    int v24 = (double *)(Value + 8);
    if ((v14 & 1) == 0) {
      int v24 = (double *)Value;
    }
    double v23 = *v24;
    goto LABEL_14;
  }
  BOOL v22 = (~v17 & 0x7FF0000000000000) == 0 && (v17 & 0xFFFFFFFFFFFFFLL) != 0;
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0 && (*(void *)&v16 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_11;
  }
LABEL_9:
  double v23 = v16;
LABEL_14:
  BOOL v25 = (v14 & 1) == 0;
  if (v14) {
    double v26 = v19;
  }
  else {
    double v26 = v23;
  }
  *(void *)&double v27 = v14 & v22;
  if (v14) {
    CGFloat v28 = v23;
  }
  else {
    CGFloat v28 = v21;
  }
  double v111 = v26;
  char v112 = v14 & v22 & 1;
  *(void *)&double v29 = v25 & v20;
  CGFloat v113 = v28;
  char v114 = v25 && v20;
  InsetViewLayout.secondaryProposal(parentProposal:spacing:)((uint64_t)&v111, a3, *(uint64_t *)&rect.size.width, v7, (uint64_t)&rect.size.height, v13);
  double height = rect.size.height;
  int v99 = v106;
  double v103 = v107;
  int v101 = LOBYTE(v108);
  int v30 = *MEMORY[0x263F288F8];
  char v98 = v14;
  if (*MEMORY[0x263F288F8] == v11)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v31 = &static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t v31 = (long long *)AGGraphGetValue();
  }
  CGFloat v32 = *(double *)v31;
  uint64_t v93 = *((void *)v31 + 1);
  uint64_t v33 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v33 != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock)) {
      goto LABEL_40;
    }
  }
  uint64_t v95 = a2;
  rect.size.double height = height;
  LOBYTE(v106) = v99;
  double v107 = v103;
  LOBYTE(v108) = v101;
  double v5 = (*(double (**)(CGFloat *))(**(void **)&v32 + 120))(&rect.size.height);
  double v6 = v34;
  double v111 = v26;
  char v112 = LOBYTE(v27) & 1;
  CGFloat v113 = v28;
  char v114 = LOBYTE(v29);
  InsetViewLayout.primaryProposal(parentProposal:secondarySize:spacing:)((uint64_t)&v111, (uint64_t)&rect.size.height, v5, v34, v13);
  double v29 = rect.size.height;
  LODWORD(a2) = v106;
  double v27 = v107;
  LODWORD(v26) = LOBYTE(v108);
  if (v30 == v7)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    unsigned int v35 = &static LayoutComputer.defaultValue;
  }
  else
  {
    unsigned int v35 = (long long *)AGGraphGetValue();
  }
  CGFloat v28 = *(double *)v35;
  uint64_t v92 = *((void *)v35 + 1);
  if (!lockAssertionsAreEnabled) {
    goto LABEL_41;
  }
  uint64_t v36 = one-time initialization token for _lock;
  swift_retain();
  if (v36 != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_41:
    swift_retain();
  }
  rect.size.double height = v29;
  LOBYTE(v106) = a2;
  double v107 = v27;
  LOBYTE(v108) = LOBYTE(v26);
  double v37 = (*(double (**)(CGFloat *))(**(void **)&v28 + 120))(&rect.size.height);
  double v39 = v38;
  uint64_t v40 = AGGraphGetValue();
  uint64_t v41 = 8 * *(char *)(v40 + 17);
  double v42 = *(double *)((char *)&unk_246215020 + v41);
  double v43 = *(double *)((char *)&unk_246215040 + v41);
  uint64_t v44 = (double *)AGGraphGetValue();
  double v45 = v43 * v44[1];
  if (a2) {
    double v46 = NAN;
  }
  else {
    double v46 = v29;
  }
  if (LODWORD(v26)) {
    double v47 = NAN;
  }
  else {
    double v47 = v27;
  }
  double v48 = v39 * v43;
  CGFloat v49 = v39;
  rect.origin.double x = v42 * *v44 - v37 * v42;
  double v97 = v45 - v48;
  if (v99) {
    double v50 = NAN;
  }
  else {
    double v50 = height;
  }
  if (v101) {
    double v51 = NAN;
  }
  else {
    double v51 = v103;
  }
  unint64_t v52 = *(void *)(v40 + 24);
  unint64_t v53 = v52 >> 1;
  uint64_t v54 = (v52 >> 1) - 1;
  uint64_t v55 = one-time initialization token for _typeCache;
  swift_retain();
  swift_retain();
  double v91 = v46;
  CGFloat v96 = v37;
  if (v98)
  {
    if (v55 == -1)
    {
LABEL_61:
      int v68 = static AlignmentKey._typeCache;
      BOOL v69 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
      swift_retain();
      os_unfair_lock_lock(v69);
      uint64_t v70 = v68[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v69);
      uint64_t result = swift_release();
      if (v52 >= 2)
      {
        if (v53 <= *(void *)(v70 + 16))
        {
          uint64_t v71 = v70 + 16 * v54;
          uint64_t v72 = *(void *)(v71 + 32);
          uint64_t v73 = *(void *)(v71 + 40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v74 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
          swift_retain_n();
          os_unfair_lock_lock(v74 + 4);
          closure #1 in AlignmentKey.init(id:axis:)(&v74[6]._os_unfair_lock_opaque, v72, v73, (uint64_t *)&rect.size.height);
          os_unfair_lock_unlock(v74 + 4);
          swift_release();
          swift_release();
          unint64_t v64 = 2 * *(void *)&rect.size.height + 3;
          uint64_t v65 = v92;
          rect.size.double height = v28;
          uint64_t v106 = v92;
          double v107 = v37;
          CGFloat v108 = v49;
          double v109 = v46;
          double v110 = v47;
          ViewDimensions.subscript.getter(v64);
          double x = v97;
          goto LABEL_64;
        }
LABEL_76:
        __break(1u);
        return result;
      }
      __break(1u);
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
LABEL_73:
    swift_once();
    goto LABEL_61;
  }
  if (v55 != -1) {
    swift_once();
  }
  int v56 = static AlignmentKey._typeCache;
  unsigned int v57 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v57);
  uint64_t v58 = v56[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v57);
  uint64_t result = swift_release();
  if (v52 < 2)
  {
    __break(1u);
    goto LABEL_73;
  }
  if (v53 > *(void *)(v58 + 16)) {
    goto LABEL_75;
  }
  uint64_t v60 = v58 + 16 * v54;
  uint64_t v61 = *(void *)(v60 + 32);
  uint64_t v62 = *(void *)(v60 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned int v63 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
  swift_retain_n();
  os_unfair_lock_lock(v63 + 4);
  closure #1 in AlignmentKey.init(id:axis:)(&v63[6]._os_unfair_lock_opaque, v61, v62, (uint64_t *)&rect.size.height);
  os_unfair_lock_unlock(v63 + 4);
  swift_release();
  swift_release();
  unint64_t v64 = 2 * *(void *)&rect.size.height + 2;
  uint64_t v65 = v92;
  rect.size.double height = v28;
  uint64_t v106 = v92;
  double v107 = v37;
  CGFloat v108 = v49;
  double v109 = v46;
  double v110 = v47;
  ViewDimensions.subscript.getter(v64);
  double x = rect.origin.x;
LABEL_64:
  double v75 = x + v66;
  rect.size.double height = v32;
  uint64_t v106 = v93;
  double v107 = v5;
  CGFloat v108 = v6;
  double v109 = v50;
  double v110 = v51;
  ViewDimensions.subscript.getter(v64);
  double v104 = v47;
  double v77 = v75 - (v76 + 0.0);
  uint64_t v78 = *(char *)(AGGraphGetValue() + 17);
  uint64_t v79 = (double *)AGGraphGetValue();
  unsigned int v80 = v79;
  if (v98)
  {
    double v81 = dbl_246215060[v78] * *v79 - v5 * dbl_246215060[v78];
  }
  else
  {
    double v81 = v77;
    double v77 = dbl_246215080[v78] * v79[1] - v6 * dbl_246215080[v78];
  }
  double v102 = v51;
  double v82 = v50;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    double v83 = *v80;
    v115.origin.double x = rect.origin.x;
    v115.size.CGFloat width = v96;
    v115.origin.CGFloat y = v97;
    v115.size.double height = v49;
    rect.origin.double x = v83 - CGRectGetMaxX(v115);
  }
  CGFloat v84 = v49;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    double v85 = *(double *)AGGraphGetValue();
    v116.origin.double x = v81;
    v116.origin.CGFloat y = v77;
    v116.size.CGFloat width = v5;
    v116.size.double height = v6;
    double v81 = v85 - CGRectGetMaxX(v116);
  }
  double v86 = v6;
  double v87 = v5;
  uint64_t v88 = (double *)AGGraphGetValue();
  double v90 = *v88;
  double v89 = v88[1];
  swift_release();
  uint64_t result = swift_release();
  *(double *)a1 = rect.origin.x + v90;
  *(double *)(a1 + 8) = v97 + v89;
  *(CGFloat *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v65;
  *(CGFloat *)(a1 + 32) = v96;
  *(CGFloat *)(a1 + 40) = v84;
  *(double *)(a1 + 48) = v91;
  *(double *)(a1 + 56) = v104;
  *(double *)uint64_t v95 = v81 + v90;
  *(double *)(v95 + 8) = v77 + v89;
  *(CGFloat *)(v95 + 16) = v32;
  *(void *)(v95 + 24) = v93;
  *(double *)(v95 + 32) = v87;
  *(double *)(v95 + 40) = v86;
  *(double *)(v95 + 48) = v82;
  *(double *)(v95 + 56) = v102;
  return result;
}

uint64_t InsetViewLayout.sizeThatFits(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4 = a4;
  uint64_t v6 = a2;
  unint64_t v7 = HIDWORD(a4);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  uint64_t v10 = a1[2];
  char v11 = *((unsigned char *)a1 + 24);
  InsetViewLayout.spacing()(a2, a3, a4);
  double v13 = v12;
  uint64_t v28 = v8;
  char v29 = v9;
  uint64_t v30 = v10;
  char v31 = v11;
  InsetViewLayout.secondaryProposal(parentProposal:spacing:)((uint64_t)&v28, v6, a3, v4, (uint64_t)&v32, v12);
  uint64_t v27 = v32;
  char v26 = v33;
  uint64_t v25 = v34;
  char v24 = v35;
  int v14 = *MEMORY[0x263F288F8];
  if (*MEMORY[0x263F288F8] == v7)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t Value = (long long *)AGGraphGetValue();
  }
  uint64_t v16 = *(void *)Value;
  uint64_t v17 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock)) {
      goto LABEL_21;
    }
  }
  uint64_t v32 = v27;
  char v33 = v26;
  uint64_t v34 = v25;
  char v35 = v24;
  double v18 = (*(double (**)(uint64_t *))(*(void *)v16 + 120))(&v32);
  double v20 = v19;
  swift_release();
  uint64_t v28 = v8;
  char v29 = v9;
  uint64_t v30 = v10;
  char v31 = v11;
  InsetViewLayout.primaryProposal(parentProposal:secondarySize:spacing:)((uint64_t)&v28, (uint64_t)&v32, v18, v20, v13);
  uint64_t v6 = v32;
  LOBYTE(v8) = v33;
  uint64_t v9 = v34;
  LOBYTE(v10) = v35;
  if (v14 == v4)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    double v21 = &static LayoutComputer.defaultValue;
  }
  else
  {
    double v21 = (long long *)AGGraphGetValue();
  }
  uint64_t v16 = *(void *)v21;
  if (!lockAssertionsAreEnabled) {
    goto LABEL_22;
  }
  uint64_t v22 = one-time initialization token for _lock;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_22:
    swift_retain();
  }
  uint64_t v32 = v6;
  char v33 = v8;
  uint64_t v34 = v9;
  char v35 = v10;
  (*(void (**)(uint64_t *))(*(void *)v16 + 120))(&v32);
  swift_release();
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  return AGGraphGetValue();
}

uint64_t InsetViewLayout.primarySafeAreaInsets()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  unint64_t v8 = HIDWORD(a3);
  InsetViewLayout.spacing()(a1, a2, a3);
  double v10 = v9;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v12 = Value[1];
  uint64_t v34 = *Value;
  char v35 = 0;
  uint64_t v36 = v12;
  char v37 = 0;
  InsetViewLayout.secondaryProposal(parentProposal:spacing:)((uint64_t)&v34, a1, a2, v4, (uint64_t)&v38, v10);
  uint64_t v13 = v38;
  char v14 = v39;
  uint64_t v15 = v40;
  char v16 = v41;
  if (*MEMORY[0x263F288F8] == v8)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v17 = &static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t v17 = (long long *)AGGraphGetValue();
  }
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v19 != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x24611309CLL);
    }
  }
  uint64_t v38 = v13;
  char v39 = v14;
  uint64_t v40 = v15;
  char v41 = v16;
  double v20 = (*(double (**)(uint64_t *))(*(void *)v18 + 120))(&v38);
  double v22 = v21;
  type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)();
  uint64_t v23 = *(unsigned __int8 *)(AGGraphGetValue() + 17);
  switch(v23)
  {
    case 1:
    case 3:
      break;
    default:
      double v20 = v22;
      break;
  }
  double v24 = v10 + v20;
  specialized Edge.Set.init(_:)(v23);
  Swift::Bool v25 = Edge.Set.contains(_:)(SwiftUI_Edge_top);
  double v26 = 0.0;
  if (Edge.Set.contains(_:)(SwiftUI_Edge_leading)) {
    double v27 = v24;
  }
  else {
    double v27 = 0.0;
  }
  Swift::Bool v28 = Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  if (Edge.Set.contains(_:)(SwiftUI_Edge_trailing))
  {
    double v26 = v24;
    if (v27 == v24)
    {
      double v26 = v24;
      goto LABEL_27;
    }
  }
  else if (v27 == 0.0)
  {
    goto LABEL_27;
  }
  char v29 = (unsigned char *)AGGraphGetValue();
  if (*v29) {
    double v30 = v27;
  }
  else {
    double v30 = v26;
  }
  if (*v29) {
    double v27 = v26;
  }
  double v26 = v30;
LABEL_27:
  if (v28) {
    double v31 = v24;
  }
  else {
    double v31 = 0.0;
  }
  if (!v25) {
    double v24 = 0.0;
  }
  uint64_t v32 = *(void *)AGGraphGetValue();
  uint64_t result = swift_release();
  *(void *)a4 = v32;
  *(double *)(a4 + 8) = v24;
  *(double *)(a4 + 16) = v27;
  *(double *)(a4 + 24) = v31;
  *(double *)(a4 + 32) = v26;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InsetChildGeometry@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOi0_(v3);
  return outlined init with take of (ViewGeometry, ViewGeometry)?((uint64_t)v3, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance InsetChildGeometry@<X0>(uint64_t a1@<X8>)
{
  return InsetViewLayout.childGeometry()(a1, a1 + 64, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t InsetLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1)
{
  double v2 = *(double *)a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  __int16 v5 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(v1 + 56);
  if ((*(unsigned char *)(v1 + 80) & 1) == 0)
  {
    if (v3)
    {
      if ((v6 & 1) == 0)
      {
        if (*(unsigned char *)(v1 + 96)) {
          char v10 = *(unsigned char *)(v1 + 136);
        }
        else {
          char v10 = 1;
        }
        if (v10) {
          goto LABEL_3;
        }
        goto LABEL_27;
      }
    }
    else if ((v6 & 1) != 0 || v2 != *(double *)(v1 + 32))
    {
      goto LABEL_2;
    }
    if (v5)
    {
      if (v7) {
        goto LABEL_43;
      }
    }
    else if ((v7 & 1) == 0 && v4 == *(double *)(v1 + 48))
    {
      goto LABEL_43;
    }
  }
LABEL_2:
  if (*(unsigned char *)(v1 + 136)) {
    goto LABEL_3;
  }
  if (v3)
  {
    if ((*(unsigned char *)(v1 + 96) & 1) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(unsigned char *)(v1 + 96) & 1) != 0 || *(double *)(v1 + 88) != v2)
  {
    goto LABEL_3;
  }
LABEL_27:
  if (v5)
  {
    if (*(unsigned char *)(v1 + 112)) {
      goto LABEL_43;
    }
  }
  else if ((*(unsigned char *)(v1 + 112) & 1) == 0 && *(double *)(v1 + 104) == v4)
  {
    goto LABEL_43;
  }
LABEL_3:
  if (*(unsigned char *)(v1 + 192)) {
    goto LABEL_4;
  }
  if (v3)
  {
    if ((*(unsigned char *)(v1 + 152) & 1) == 0) {
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(v1 + 152) & 1) != 0 || *(double *)(v1 + 144) != v2)
  {
    goto LABEL_4;
  }
  if ((v5 & 1) == 0)
  {
    if ((*(unsigned char *)(v1 + 168) & 1) == 0 && *(double *)(v1 + 160) == v4) {
      goto LABEL_43;
    }
LABEL_4:
    swift_beginAccess();
    unint64_t v8 = (double *)static LayoutTrace.recorder;
    if (static LayoutTrace.recorder)
    {
      swift_beginAccess();
      v8[4] = v2;
      *((void *)v8 + 5) = v3;
      v8[6] = v4;
      *((_WORD *)v8 + 28) = v5;
    }
    MEMORY[0x270FA5388](*(unsigned int *)(v1 + 24));
    uint64_t result = AGGraphWithUpdate();
    __break(1u);
    return result;
  }
  if ((*(unsigned char *)(v1 + 168) & 1) == 0) {
    goto LABEL_4;
  }
LABEL_43:
  uint64_t result = swift_beginAccess();
  char v11 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    uint64_t result = swift_beginAccess();
    v11[4] = v2;
    *((void *)v11 + 5) = v3;
    v11[6] = v4;
    *((_WORD *)v11 + 28) = v5 | 0x100;
  }
  return result;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance InsetLayoutComputer()
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result);
    MEMORY[0x270FA5388](v1);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v2, (void (*)(_OWORD *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

uint64_t InsetPrimarySafeAreas.value.getter@<X0>(void *a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  InsetViewLayout.primarySafeAreaInsets()(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), (uint64_t)&v16);
  uint64_t v5 = v16;
  long long v15 = v17;
  uint64_t v6 = v18;
  uint64_t v7 = v19;
  _s7SwiftUI10EdgeInsetsVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t result = swift_allocObject();
  uint64_t v9 = result;
  char v10 = 0;
  *(_OWORD *)(result + 16) = xmmword_2461B9DC0;
  *(void *)(result + 32) = v5;
  *(_OWORD *)(result + 40) = v15;
  *(void *)(result + 56) = v6;
  *(void *)(result + 64) = v7;
  if (v3 != *MEMORY[0x263F288F8])
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v13 = *Value;
    uint64_t v12 = Value[1];
    uint64_t v14 = Value[2];
    char v10 = (void *)swift_allocObject();
    _OWORD v10[2] = v13;
    _OWORD v10[3] = v12;
    v10[4] = v14;
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a1 = v4;
  a1[1] = v9;
  a1[2] = v10;
  return result;
}

uint64_t InsetPrimaryTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)Value;
  double v6 = *(double *)(Value + 8);
  double v7 = *(double *)(Value + 16);
  double v8 = *(double *)(Value + 24);
  double v9 = *(double *)(Value + 32);
  char v10 = (double *)AGGraphGetValue();
  double v11 = v10[1];
  double v12 = v8 - (*v10 - v6);
  double v13 = v9 - (v11 - v7);
  *(double *)(a1 + 8) = *v10;
  *(double *)(a1 + 16) = v11;
  uint64_t v14 = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  _s7SwiftUI21_ViewModifier_ContentVyAA015SafeAreaPaddingD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Element<SizedSpaceIDElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type SizedSpaceIDElement and conformance SizedSpaceIDElement, (uint64_t)&type metadata for SizedSpaceIDElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v17 = swift_allocObject();
  *(double *)(v17 + 32) = v12;
  *(double *)(v17 + 40) = v13;
  *(void *)(v17 + 48) = v3;
  *(void *)(v17 + 56) = v15;
  *(void *)(v17 + 64) = v16;
  *(void *)(v17 + 16) = v5;
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v18 = *(void *)(v5 + 24);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_5:
    uint64_t v20 = 1;
  }
  *(void *)(v17 + 24) = v20;
  *(void *)a1 = v17;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;

  return swift_retain();
}

__n128 SafeAreaPaddingModifier.init(edges:insets:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of EdgeInsets?(a2, (uint64_t)&v11);
  __n128 v10 = v11;
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  char v7 = v14;
  uint64_t KeyPath = swift_getKeyPath();
  *(unsigned char *)a3 = a1;
  __n128 result = v10;
  *(__n128 *)(a3 + 8) = v10;
  *(void *)(a3 + 24) = v5;
  *(void *)(a3 + 32) = v6;
  *(unsigned char *)(a3 + 40) = v7;
  *(void *)(a3 + 48) = KeyPath;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

double SafeAreaPaddingModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  uint64_t v30 = static HorizontalAlignment.center;
  SafeAreaPaddingModifier.insetView(edge:)(0, (uint64_t)&v32);
  uint64_t v25 = v33;
  uint64_t v26 = v32;
  char v4 = v34;
  char v5 = v36;
  uint64_t v29 = v37;
  uint64_t v27 = v35;
  uint64_t v28 = *((void *)&v37 + 1);
  SafeAreaPaddingModifier.insetView(edge:)(2u, (uint64_t)&v32);
  uint64_t v22 = v33;
  uint64_t v23 = v32;
  uint64_t v24 = v35;
  long long v6 = v37;
  char v49 = v4;
  char v47 = v5;
  char v45 = 0;
  char v42 = v34;
  char v40 = v36;
  char v38 = 0;
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  uint64_t v10 = static VerticalAlignment.center;
  SafeAreaPaddingModifier.insetView(edge:)(1u, (uint64_t)&v32);
  uint64_t v17 = v33;
  uint64_t v18 = v32;
  uint64_t v21 = v37;
  uint64_t v19 = v35;
  uint64_t v20 = *((void *)&v37 + 1);
  char v11 = v49;
  char v12 = v47;
  char v13 = v45;
  char v14 = v42;
  char v15 = v40;
  char v16 = v38;
  char v56 = v34;
  char v54 = v36;
  char v52 = 0;
  v31[0] = v3;
  SafeAreaPaddingModifier.insetView(edge:)(3u, (uint64_t)&v32);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)&v31[3];
  *(_DWORD *)(a1 + 281) = *(_DWORD *)v31;
  *(_DWORD *)(a1 + 300) = *(_DWORD *)((char *)&v32 + 3);
  *(_DWORD *)(a1 + 297) = v32;
  *(_DWORD *)(a1 + 338) = v59;
  char v62 = v34;
  char v61 = v36;
  *(void *)a1 = v26;
  *(void *)(a1 + 8) = v25;
  *(unsigned char *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 17) = *(_DWORD *)v48;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)&v48[3];
  *(void *)(a1 + 24) = v27;
  *(unsigned char *)(a1 + 32) = v12;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v46;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v46[3];
  *(void *)(a1 + 40) = v29;
  *(void *)(a1 + 48) = v28;
  *(void *)&double result = 1;
  *(unsigned char *)(a1 + 72) = v13;
  *(_WORD *)(a1 + 78) = v44;
  *(_DWORD *)(a1 + 74) = v43;
  *(void *)(a1 + 88) = v23;
  *(void *)(a1 + 96) = v22;
  *(unsigned char *)(a1 + 104) = v14;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)&v41[3];
  *(_DWORD *)(a1 + 105) = *(_DWORD *)v41;
  *(void *)(a1 + 112) = v24;
  *(unsigned char *)(a1 + 120) = v15;
  *(_DWORD *)(a1 + 124) = *(_DWORD *)&v39[3];
  *(_DWORD *)(a1 + 121) = *(_DWORD *)v39;
  *(_OWORD *)(a1 + 128) = v6;
  *(unsigned char *)(a1 + 160) = v16;
  *(unsigned char *)(a1 + 161) = 2;
  *(_WORD *)(a1 + 166) = v58;
  *(_DWORD *)(a1 + 162) = v57;
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 168) = v30;
  *(void *)(a1 + 176) = v18;
  *(void *)(a1 + 184) = v17;
  *(unsigned char *)(a1 + 192) = v56;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)&v55[3];
  *(_DWORD *)(a1 + 193) = *(_DWORD *)v55;
  *(void *)(a1 + 200) = v19;
  *(unsigned char *)(a1 + 208) = v54;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)&v53[3];
  *(_DWORD *)(a1 + 209) = *(_DWORD *)v53;
  *(void *)(a1 + 216) = v21;
  *(void *)(a1 + 224) = v20;
  *(unsigned char *)(a1 + 248) = v52;
  *(unsigned char *)(a1 + 249) = 1;
  *(_WORD *)(a1 + 254) = v51;
  long long v8 = v37;
  *(_DWORD *)(a1 + 250) = v50;
  uint64_t v9 = v33;
  *(void *)(a1 + 264) = v32;
  *(void *)(a1 + 272) = v9;
  *(unsigned char *)(a1 + 280) = v62;
  *(void *)(a1 + 288) = v35;
  *(unsigned char *)(a1 + 296) = v61;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 337) = 3;
  *(_WORD *)(a1 + 342) = v60;
  *(void *)(a1 + 256) = v10;
  *(void *)(a1 + 344) = v10;
  *(_OWORD *)(a1 + 56) = xmmword_24619B520;
  *(unsigned char *)(a1 + 73) = 0;
  *(_OWORD *)(a1 + 144) = xmmword_24619B520;
  *(_OWORD *)(a1 + 232) = xmmword_24619B520;
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 320) = xmmword_24619B520;
  return result;
}

double SafeAreaPaddingModifier.insetView(edge:)@<D0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1;
  unsigned int v5 = *v2;
  double v6 = *((double *)v2 + 1);
  double v7 = *((double *)v2 + 4);
  double v34 = *((double *)v2 + 2);
  double v35 = *((double *)v2 + 3);
  unsigned __int8 v8 = v2[40];
  uint64_t v36 = *((void *)v2 + 6);
  uint64_t v9 = *((void *)v2 + 8);
  uint64_t v33 = *((void *)v2 + 7);
  uint64_t v10 = *((void *)v2 + 9);
  char v11 = v2[80];
  if (one-time initialization token for clear != -1)
  {
    unsigned __int8 v32 = v2[40];
    swift_once();
    unsigned __int8 v8 = v32;
  }
  uint64_t v12 = static Color.clear;
  unsigned int v13 = v5 >> v4;
  switch(v4)
  {
    case 1:
    case 3:
      if (v13)
      {
        unsigned __int8 v14 = v8;
        if (v8)
        {
          uint64_t v47 = v36;
          uint64_t v48 = v33;
          uint64_t v49 = v9;
          uint64_t v50 = v10;
          char v51 = v11;
          swift_retain();
          outlined copy of Environment<EdgeInsets>.Content(v36, v33, v9, v10, v11);
          specialized Environment.wrappedValue.getter();
          double v21 = v20;
          double v23 = v22;
          double v25 = v24;
          outlined consume of Environment<EdgeInsets>.Content(v36, v33, v9, v10, v11);
          double v15 = v23;
          double v7 = v25;
          double v26 = v21;
        }
        else
        {
          swift_retain();
          double v26 = v34;
          double v15 = v35;
        }
        double v19 = 0.0;
        if (v4 == 1)
        {
          double v7 = v26;
        }
        else if (v4 == 2)
        {
          goto LABEL_5;
        }
      }
      else
      {
        if (v4 == 2) {
          goto LABEL_4;
        }
        swift_retain();
        double v7 = 0.0;
        double v19 = 0.0;
      }
LABEL_17:
      if (one-time initialization token for center != -1) {
        swift_once();
      }
      specialized _FrameLayout.init(width:height:alignment:)(v7, 0, v19, 0, static Alignment.center, *((uint64_t *)&static Alignment.center + 1), (uint64_t)&v37);
      uint64_t v27 = v37;
      char v28 = v38;
      uint64_t v29 = v39;
      char v30 = v40;
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v27;
      *(unsigned char *)(a2 + 16) = v28;
      *(void *)(a2 + 24) = v29;
      *(unsigned char *)(a2 + 32) = v30;
      double result = *(double *)&v41;
      *(_OWORD *)(a2 + 40) = v41;
      return result;
    default:
LABEL_4:
      unsigned __int8 v14 = v8;
      swift_retain();
      double v15 = 0.0;
LABEL_5:
      if (v13)
      {
        if (v14)
        {
          uint64_t v42 = v36;
          uint64_t v43 = v33;
          uint64_t v44 = v9;
          uint64_t v45 = v10;
          char v46 = v11;
          outlined copy of Environment<EdgeInsets>.Content(v36, v33, v9, v10, v11);
          double v6 = specialized Environment.wrappedValue.getter();
          double v17 = v16;
          double v19 = v18;
          outlined consume of Environment<EdgeInsets>.Content(v36, v33, v9, v10, v11);
          if (v4) {
            goto LABEL_8;
          }
        }
        else
        {
          double v17 = v34;
          double v19 = v35;
          if (v4)
          {
LABEL_8:
            if (v4 == 1) {
              double v19 = v17;
            }
            goto LABEL_16;
          }
        }
        double v19 = v6;
      }
      else
      {
        double v19 = 0.0;
      }
LABEL_16:
      double v7 = v15;
      goto LABEL_17;
  }
}

__n128 specialized closure #1 in StatefulRule<>.update<A>(to:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v2;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  long long v3 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v3;
  long long v4 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = *(__n128 *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 specialized closure #2 in StatefulRule<>.update<A>(to:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = v2;
  *(unsigned char *)(a2 + 192) = *(unsigned char *)(a1 + 192);
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t partial apply for closure #6 in static _InsetViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #6 in static _InsetViewModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type InsetLayoutComputer and conformance InsetLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetLayoutComputer and conformance InsetLayoutComputer;
  if (!lazy protocol witness table cache variable for type InsetLayoutComputer and conformance InsetLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetLayoutComputer and conformance InsetLayoutComputer);
  }
  return result;
}

void type metadata accessor for (ViewGeometry, ViewGeometry)()
{
  if (!lazy cache variable for type metadata for (ViewGeometry, ViewGeometry))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ViewGeometry, ViewGeometry));
    }
  }
}

unint64_t lazy protocol witness table accessor for type InsetChildGeometry and conformance InsetChildGeometry()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetChildGeometry and conformance InsetChildGeometry;
  if (!lazy protocol witness table cache variable for type InsetChildGeometry and conformance InsetChildGeometry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetChildGeometry and conformance InsetChildGeometry);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas;
  if (!lazy protocol witness table cache variable for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetPrimaryTransform and conformance InsetPrimaryTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetPrimaryTransform and conformance InsetPrimaryTransform;
  if (!lazy protocol witness table cache variable for type InsetPrimaryTransform and conformance InsetPrimaryTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetPrimaryTransform and conformance InsetPrimaryTransform);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SafeAreaPaddingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for _InsetViewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _InsetViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  return a1;
}

uint64_t assignWithTake for _InsetViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _InsetViewModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFC) {
    unsigned int v7 = 252;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x246114564);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFC) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17);
  if (v17 >= 4) {
    return v17 - 3;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _InsetViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFC) {
    unsigned int v8 = 252;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 32);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x24611475CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xFC)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0xFC)
          {
            *(void *)(v18 + 16) = 0;
            *(void *)(v18 + 24) = 0;
            *(void *)unint64_t v18 = a2 - 253;
            *(void *)(v18 + 8) = 0;
          }
          else
          {
            *(unsigned char *)(v18 + 17) = a2 + 3;
          }
        }
        else
        {
          unsigned int v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t destroy for SafeAreaPaddingModifier(uint64_t a1)
{
  return outlined consume of Environment<EdgeInsets>.Content(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  char v7 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<EdgeInsets>.Content(v3, v4, v5, v6, v7);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(unsigned char *)(a1 + 80) = v7;
  return a1;
}

uint64_t assignWithCopy for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v3 = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 8) = v3;
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  char v9 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<EdgeInsets>.Content(v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = v9;
  outlined consume of Environment<EdgeInsets>.Content(v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for SafeAreaPaddingModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of Environment<EdgeInsets>.Content(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for SafeAreaPaddingModifier()
{
  return &type metadata for SafeAreaPaddingModifier;
}

uint64_t sub_24611492C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI15ModifiedContentVyACyACyACyAA014_ViewModifier_D0VyAA015SafeAreaPaddingF0VGAA06_InseteF0VyACyAA5ColorVAA12_FrameLayoutVGGGAPGAPGAPGMaTm_1(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Color, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Color, _FrameLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>(255);
    lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SafeAreaPaddingModifier>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>>, _InsetViewModifier<ModifiedContent<Color, _FrameLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Color, _FrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for InsetPrimaryTransform()
{
  return &unk_26FA642E8;
}

void *type metadata accessor for InsetLayoutComputer()
{
  return &unk_26FA5E7A0;
}

void *type metadata accessor for InsetPrimarySafeAreas()
{
  return &unk_26FA64250;
}

void *type metadata accessor for InsetChildGeometry()
{
  return &unk_26FA5AEC0;
}

unint64_t instantiation function for generic protocol witness table for InsetChildGeometry(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetChildGeometry and conformance InsetChildGeometry();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for InsetPrimarySafeAreas(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetPrimarySafeAreas and conformance InsetPrimarySafeAreas();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for InsetLayoutComputer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetLayoutComputer and conformance InsetLayoutComputer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for InsetPrimaryTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetPrimaryTransform and conformance InsetPrimaryTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

void _s7SwiftUI21_ViewModifier_ContentVyAA015SafeAreaPaddingD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_246114D78()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey)()
{
  if (!lazy cache variable for type metadata for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey))
  {
    MEMORY[0x270FA5388](0);
    _s7SwiftUI10EdgeInsetsVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (regions: SafeAreaRegions, spacing: CGFloat?, edge: Edge, alignmentKey: AlignmentKey));
    }
  }
}

uint64_t outlined init with take of (ViewGeometry, ViewGeometry)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (ViewGeometry, ViewGeometry)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (ViewGeometry, ViewGeometry)?()
{
  if (!lazy cache variable for type metadata for (ViewGeometry, ViewGeometry)?)
  {
    type metadata accessor for (ViewGeometry, ViewGeometry)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (ViewGeometry, ViewGeometry)?);
    }
  }
}

uint64_t partial apply for closure #8 in static _InsetViewModifier._makeView(modifier:inputs:body:)(uint64_t result)
{
  int v2 = *(_DWORD *)(v1 + 16);
  if (*(unsigned char *)(v1 + 20)) {
    int v2 = *MEMORY[0x263F288F8];
  }
  if (*(unsigned char *)(v1 + 28)) {
    int v3 = *MEMORY[0x263F288F8];
  }
  else {
    int v3 = *(_DWORD *)(v1 + 24);
  }
  *(_DWORD *)(result + 16) = v2;
  *(_DWORD *)(result + 20) = v3;
  return result;
}

uint64_t sub_246114FD4()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

__n128 __swift_memcpy193_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InsetLayoutComputer.Engine(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 193)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InsetLayoutComputer.Engine(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 192) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 193) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InsetLayoutComputer.Engine()
{
  return &type metadata for InsetLayoutComputer.Engine;
}

void *type metadata accessor for InsetViewLayout()
{
  return &unk_26FA505B8;
}

uint64_t partial apply for closure #1 in closure #1 in InsetLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(uint64_t **)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  char v5 = *(unsigned char *)(v0 + 56);
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  unint64_t v8 = v1[2];
  uint64_t v12 = *(void *)(v0 + 32);
  char v13 = v3;
  uint64_t v14 = v4;
  char v15 = v5;
  uint64_t result = InsetViewLayout.sizeThatFits(_:)(&v12, v6, v7, v8);
  *(void *)uint64_t v2 = v10;
  *(void *)(v2 + 8) = v11;
  *(unsigned char *)(v2 + 16) = 0;
  return result;
}

uint64_t Color.tintAdjustmentMode(_:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (*a1 == 1)
  {
    type metadata accessor for ColorBox<Color.DesaturatedColor>(0, &lazy cache variable for type metadata for ColorBox<Color.DesaturatedColor>, (void (*)(void))lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = a2;
  }
  swift_retain();
  return v3;
}

uint64_t Color.tintAdjusted.getter(uint64_t a1)
{
  type metadata accessor for ColorBox<Color.DesaturatedColor>(0, &lazy cache variable for type metadata for ColorBox<Color.TintAdjustmentProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  return v2;
}

float Color.TintAdjustmentProvider.resolve(in:)(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = v4;
  EnvironmentValues.effectiveTintAdjustmentMode.getter(&v11);
  char v5 = a2;
  if (v11 == 1)
  {
    type metadata accessor for ColorBox<Color.DesaturatedColor>(0, &lazy cache variable for type metadata for ColorBox<Color.DesaturatedColor>, (void (*)(void))lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
    char v5 = (void *)swift_allocObject();
    void v5[2] = a2;
  }
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  uint64_t v6 = *(float (**)(uint64_t *))(*v5 + 104);
  swift_retain();
  float v7 = v6(&v9);
  swift_release();
  return v7;
}

float protocol witness for ColorProvider.resolve(in:) in conformance Color.TintAdjustmentProvider(uint64_t *a1)
{
  return Color.TintAdjustmentProvider.resolve(in:)(a1, *v1);
}

float protocol witness for ColorProvider.resolve(in:) in conformance Color.DesaturatedColor(long long *a1)
{
  uint64_t v2 = *v1;
  long long v7 = *a1;
  float v3 = (*(float (**)(long long *))(*(void *)v2 + 104))(&v7);
  return (float)(v5 * 0.0722) + (float)((float)(v3 * 0.2126) + (float)(v4 * 0.7152));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.DesaturatedColor()
{
  uint64_t v1 = *v0;
  strcpy((char *)v7, "Desaturated(");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 144);
  uint64_t v3 = swift_retain();
  v4._countAndFlagsBits = v2(v3);
  String.append(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t View.tintAdjustmentMode(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t EnvironmentValues.tintAdjustmentMode.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t (*EnvironmentValues.tintAdjustmentMode.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TintAdjustmentModeKey>();
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *uint64_t v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.tintAdjustmentMode.modify;
}

uint64_t EnvironmentValues.tintAdjustmentMode.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

BOOL static TintAdjustmentMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TintAdjustmentMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TintAdjustmentMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void type metadata accessor for ColorBox<Color.DesaturatedColor>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider;
  if (!lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider;
  if (!lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider;
  if (!lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider);
  }
  return result;
}

uint64_t sub_2461158D4(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.tintAdjustmentMode.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type TintAdjustmentMode and conformance TintAdjustmentMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TintAdjustmentMode and conformance TintAdjustmentMode;
  if (!lazy protocol witness table cache variable for type TintAdjustmentMode and conformance TintAdjustmentMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintAdjustmentMode and conformance TintAdjustmentMode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TintAdjustmentMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246115A30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_246115A58()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>)
  {
    type metadata accessor for TintAdjustmentMode?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>);
    }
  }
}

void type metadata accessor for TintAdjustmentMode?()
{
  if (!lazy cache variable for type metadata for TintAdjustmentMode?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TintAdjustmentMode?);
    }
  }
}

void *type metadata accessor for Color.TintAdjustmentProvider()
{
  return &unk_26FA7CB58;
}

ValueMetadata *type metadata accessor for Color.DesaturatedColor()
{
  return &type metadata for Color.DesaturatedColor;
}

ValueMetadata *type metadata accessor for TintAdjustmentModeKey()
{
  return &type metadata for TintAdjustmentModeKey;
}

unint64_t instantiation function for generic protocol witness table for Color.TintAdjustmentProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.TintAdjustmentProvider and conformance Color.TintAdjustmentProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Color.DesaturatedColor(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor();
  *(void *)(a1 + 8) = result;
  return result;
}

void specialized Collection.count.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  unsigned int v4 = *(void **)v0;
  if (v3 == 1)
  {
    uint64_t v5 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v4);
    if (v5)
    {
      unsigned int v6 = v5;
      CFArrayRef RunCount = _CTLineGetRunCount(v5);
    }
    else
    {
      CFArrayRef RunCount = 0;
    }
    char v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v1);
    if (!v8) {
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v4, *(void *)(v0 + 8), 0);
    swift_release();
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v1);

    outlined copy of Text.Layout.Line.Line(v1, v2, 0);
    swift_release();
    char v8 = (const __CTLine *)v1;
  }
  CFArrayRef v9 = _CTLineGetRunCount(v8);

  if (((unint64_t)v9 & 0x8000000000000000) == 0)
  {
    if (!v3)
    {
      outlined copy of Text.Layout.Line.Line(v1, v2, 0);
      swift_release();
      goto LABEL_12;
    }
LABEL_9:
    id v10 = (id)_NSTextLineFragmentGetCTLine(v1);
    if (!v10)
    {
      CFArrayRef v11 = 0;
      if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_15:
      if ((uint64_t)v11 >= (uint64_t)RunCount) {
        return;
      }
      goto LABEL_16;
    }
    uint64_t v1 = v10;
LABEL_12:
    CFArrayRef v11 = _CTLineGetRunCount((const __CTLine *)v1);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  const __CTLine *v4;
  const __CTLine *v5;
  CFArrayRef RunCount;
  const __CTLine *v7;
  CFArrayRef v8;
  id v9;
  CFArrayRef v10;

  uint64_t v1 = v0;
  uint64_t v2 = *(void **)v0;
  int v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 1)
  {
    unsigned int v4 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(*(void **)v0);
    if (v4)
    {
      uint64_t v5 = v4;
      CFArrayRef RunCount = _CTLineGetRunCount(v4);
    }
    else
    {
      CFArrayRef RunCount = 0;
    }
    uint64_t v7 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v2);
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    outlined retain of Text.Layout.Line(v0);
    swift_release();
    CFArrayRef RunCount = _CTLineGetRunCount((const __CTLine *)v2);

    outlined retain of Text.Layout.Line(v1);
    swift_release();
    uint64_t v7 = (const __CTLine *)v2;
  }
  char v8 = _CTLineGetRunCount(v7);

  if (((unint64_t)v8 & 0x8000000000000000) == 0)
  {
    if (!v3)
    {
      outlined retain of Text.Layout.Line(v1);
      swift_release();
      goto LABEL_12;
    }
LABEL_9:
    CFArrayRef v9 = (id)_NSTextLineFragmentGetCTLine(v2);
    if (!v9)
    {
      id v10 = 0;
      if (((unint64_t)RunCount & 0x8000000000000000) != 0)
      {
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
LABEL_15:
      if ((uint64_t)v10 >= (uint64_t)RunCount) {
        return;
      }
      goto LABEL_16;
    }
    uint64_t v2 = v9;
LABEL_12:
    id v10 = _CTLineGetRunCount((const __CTLine *)v2);

    if (((unint64_t)RunCount & 0x8000000000000000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t specialized Collection.count.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result + 48 * v1;
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  BOOL v5 = __OFADD__(v3, v4);
  uint64_t v6 = v3 + v4;
  if (v5) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(result + 72);
  if (v6 < v7)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  unint64_t result = v6 - v7;
  if (__OFSUB__(v6, v7))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t SectionConfiguration.id.getter()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t Group.init<A, B>(sections:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Group.init<A, B>(sections:transform:)(a1, a2, a3, a4, a5, a6, a7, partial apply for closure #1 in Group.init<A, B>(sections:transform:));
}

uint64_t SectionConfiguration.containerValues.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(void *)(v1 + 64)) {
    uint64_t result = swift_bridgeObjectRetain();
  }
  else {
    uint64_t result = MEMORY[0x263F8EE78];
  }
  *a1 = result;
  return result;
}

uint64_t Group.init<A, B>(sectionsOf:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Group.init<A, B>(sections:transform:)(a1, a2, a3, a4, a5, a6, a7, partial apply for closure #1 in Group.init<A, B>(sections:transform:));
}

uint64_t Group.init<A, B>(sections:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t GroupSectionsOfContent.init(sections:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a4 - 8);
  double v17 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v23[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19, v17);
  if (swift_dynamicCast())
  {
    outlined destroy of SubviewsCollection((uint64_t)v23);
    specialized static Log.externalWarning(_:)(0xD0000000000000C2, 0x8000000246226C90);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(a8, a1, a4);
  v23[0] = a4;
  v23[1] = a5;
  v23[2] = a6;
  v23[3] = a7;
  uint64_t result = type metadata accessor for GroupSectionsOfContent();
  double v21 = (void *)(a8 + *(int *)(result + 52));
  *double v21 = a2;
  v21[1] = a3;
  return result;
}

uint64_t closure #1 in Group.init<A, B>(sectionsOf:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v30 = a7;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a8;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  uint64_t v19 = type metadata accessor for GroupSectionsOfContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  double v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x270FA5388](v23);
  double v26 = (char *)&v30 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v31, a4, v24);
  swift_retain();
  GroupSectionsOfContent.init(sections:content:)((uint64_t)v14, v32, a3, a4, a5, a6, v30, (uint64_t)v22);
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22, v19, WitnessTable);
  char v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v26, v19, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v28)(v26, v19);
}

uint64_t type metadata accessor for GroupSectionsOfContent()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in Group.init<A, B>(sections:transform:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Group.init<A, B>(sectionsOf:transform:)(v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t GroupSectionsOfContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = type metadata accessor for SectionsRoot();
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = type metadata accessor for _VariadicView.Tree();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  CFArrayRef v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t v15 = (void *)(v2 + *(int *)(a1 + 52));
  uint64_t v16 = v15[1];
  v25[0] = *v15;
  v25[1] = v16;
  v21[4] = v7;
  v21[5] = v4;
  uint64_t v17 = *(void *)(a1 + 32);
  v21[6] = v17;
  v21[7] = v5;
  uint64_t v22 = v2;
  swift_retain();
  _VariadicView.Tree.init(_:content:)((uint64_t)v25, (void (*)(uint64_t))partial apply for closure #1 in GroupSectionsOfContent.body.getter, v6, v7, (uint64_t)v11);
  uint64_t v23 = &protocol witness table for SectionsRoot<A>;
  uint64_t v24 = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11, v8, WitnessTable);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14, v8, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v19)(v14, v8);
}

uint64_t type metadata accessor for SectionsRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in GroupSectionsOfContent.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v9, v10, v11);
  static ViewBuilder.buildExpression<A>(_:)(v8, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t partial apply for closure #1 in GroupSectionsOfContent.body.getter()
{
  return closure #1 in GroupSectionsOfContent.body.getter(v0[6], v0[2], v0[3], v0[4]);
}

unint64_t SectionCollection.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > result)
  {
    return outlined init with copy of SectionConfiguration(*(void *)v2 + 136 * result + 32, a2);
  }
  __break(1u);
  return result;
}

uint64_t SectionCollection.startIndex.getter()
{
  return 0;
}

uint64_t SectionCollection.endIndex.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

void (*protocol witness for Collection.subscript.read in conformance SectionCollection(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  uint64_t result = (void (*)(uint64_t *))malloc(0x88uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v6 < *(void *)(*(void *)v2 + 16))
  {
    outlined init with copy of SectionConfiguration(*(void *)v2 + 136 * v6 + 32, (uint64_t)result);
    return protocol witness for Collection.subscript.read in conformance SectionCollection;
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance SectionCollection(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of SectionConfiguration(*a1);

  free(v1);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance SectionCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static SectionsRoot._viewListOptions.getter()
{
  uint64_t v0 = unk_26FA88190;
  if ((unk_26FA88190 & ~qword_26FA88188) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_26FA88198;
  if ((qword_26FA88198 & ~(v0 | qword_26FA88188)) == 0) {
    uint64_t v1 = 0;
  }
  return v1 | v0 | qword_26FA88188;
}

uint64_t static SectionsRoot._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v12 = *a1;
  long long v13 = *(_OWORD *)(a2 + 48);
  void v17[2] = *(_OWORD *)(a2 + 32);
  _OWORD v17[3] = v13;
  v17[4] = *(_OWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  closure #1 in static SectionsRoot._makeView(root:inputs:body:)((uint64_t)_s7SwiftUI6_GraphVAA11_ViewInputsVAA01_D11ListOutputsVIgnnr_AceGIegnnr_TRTA_0, v15, (uint64_t)v17, v12, a5, a6, a7);
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a6) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static SectionsRoot._makeView(root:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v13 = *(_OWORD *)(a3 + 48);
  void v17[2] = *(_OWORD *)(a3 + 32);
  _OWORD v17[3] = v13;
  v17[4] = *(_OWORD *)(a3 + 64);
  int v18 = *(_DWORD *)(a3 + 80);
  long long v14 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a6;
  *(void *)(v15 + 32) = a1;
  *(void *)(v15 + 40) = a2;
  *(_DWORD *)(v15 + 48) = a4;
  swift_retain();
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)v17, (uint64_t)partial apply for closure #1 in closure #1 in static SectionsRoot._makeView(root:inputs:body:), v15, a7);

  return swift_release();
}

id closure #1 in closure #1 in static SectionsRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *), uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v11 = *(_DWORD *)(a2 + 24);
  unsigned int v10 = *(_DWORD *)(a2 + 28);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  unsigned int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  unsigned int v16 = *(_DWORD *)(a2 + 56);
  unsigned int v17 = *(_DWORD *)(a2 + 60);
  int v18 = *(_DWORD *)(a2 + 64);
  int v19 = *(_DWORD *)(a2 + 68);
  unsigned int v20 = *(_DWORD *)(a2 + 72);
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  unint64_t v65 = *(void *)a2;
  unint64_t v7 = v65;
  LODWORD(v66) = v8;
  uint64_t v67 = v9;
  *(void *)&long long v68 = __PAIR64__(v10, v11);
  *((void *)&v68 + 1) = __PAIR64__(v12, v13);
  uint64_t v69 = v15;
  uint64_t v70 = v14;
  uint64_t v48 = v14;
  unsigned int v46 = v17;
  unsigned int v47 = v16;
  unint64_t v71 = __PAIR64__(v17, v16);
  int v44 = v19;
  int v45 = v18;
  int v72 = v18;
  int v73 = v19;
  unsigned int v42 = v21;
  unsigned int v43 = v20;
  unint64_t v74 = __PAIR64__(v21, v20);
  int v41 = v22;
  int v75 = v22;
  a3(&v54, a1, &v65);
  int v23 = *MEMORY[0x263F288F8];
  unint64_t v65 = v7;
  LODWORD(v66) = v8;
  uint64_t v67 = v9;
  *(void *)&long long v68 = __PAIR64__(v10, v11);
  unsigned int v49 = v13;
  *((void *)&v68 + 1) = __PAIR64__(v12, v13);
  uint64_t v70 = 0;
  unint64_t v71 = 0;
  uint64_t v69 = v15;
  int v72 = v23;
  unint64_t v74 = MEMORY[0x263F8EE88];
  LOBYTE(v75) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v24 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v54);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    double v26 = result;
    unint64_t v65 = __PAIR64__(v24, a5);
    id v66 = result;
    uint64_t v27 = type metadata accessor for SectionsRoot.Child();
    id v40 = v26;
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v65, a6, v27, WitnessTable, &v64);
    uint64_t v29 = v64;
    unint64_t v65 = v7;
    LODWORD(v66) = v8;
    uint64_t v67 = v9;
    *(void *)&long long v68 = __PAIR64__(v10, v11);
    *((void *)&v68 + 1) = __PAIR64__(v12, v49);
    uint64_t v69 = v15;
    uint64_t v70 = v48;
    unint64_t v71 = __PAIR64__(v46, v47);
    int v72 = v45;
    int v73 = v44;
    unint64_t v74 = __PAIR64__(v42, v43);
    int v75 = v41;
    _ViewInputs.implicitRootBodyInputs.getter((uint64_t)&v54);
    unint64_t v30 = v54;
    int v31 = v55;
    uint64_t v32 = v56;
    long long v50 = v57;
    uint64_t v34 = v58;
    uint64_t v33 = v59;
    unint64_t v35 = v60;
    int v36 = v61;
    unint64_t v37 = v62;
    char v38 = v63;
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v53 = v29;
    unint64_t v65 = v30;
    LODWORD(v66) = v31;
    uint64_t v67 = v32;
    long long v68 = v50;
    uint64_t v69 = v34;
    uint64_t v70 = v33;
    unint64_t v71 = v35;
    int v72 = v36;
    unint64_t v74 = v37;
    LOBYTE(v75) = v38;
    (*(void (**)(int *, unint64_t *, uint64_t, uint64_t))(a7 + 32))(&v53, &v65, a6, a7);
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v29, a6, a7);
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static SectionsRoot._makeViewList(root:inputs:body:)(unsigned int *a1, uint64_t a2, void (*a3)(void *__return_ptr, unsigned int *, unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v28 = *a1;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v13 = *(_DWORD *)(a2 + 32);
  int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(a2 + 56);
  int v17 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  unint64_t v38 = *(void *)a2;
  unint64_t v7 = v38;
  LODWORD(v39) = v8;
  uint64_t v40 = v9;
  int v41 = v11;
  int v42 = v10;
  int v43 = v13;
  int v44 = v12;
  uint64_t v45 = v15;
  uint64_t v46 = v14;
  uint64_t v33 = v16;
  uint64_t v34 = v14;
  uint64_t v47 = v16;
  int v32 = v17;
  int v48 = v17;
  uint64_t v31 = v18;
  uint64_t v49 = v18;
  char v30 = v19;
  char v50 = v19;
  a3(v51, a1, &v38);
  int v20 = *MEMORY[0x263F288F8];
  unint64_t v38 = v7;
  LODWORD(v39) = v8;
  uint64_t v40 = v9;
  int v41 = v11;
  int v42 = v10;
  int v35 = v13;
  int v36 = v10;
  int v43 = v13;
  int v44 = v12;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = v15;
  int v48 = v20;
  uint64_t v49 = MEMORY[0x263F8EE88];
  char v50 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v21 = _ViewListOutputs.makeAttribute(inputs:)((uint64_t *)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v51);
  id v22 = (id)AGSubgraphGetCurrent();
  if (v22)
  {
    int v23 = v22;
    unint64_t v38 = __PAIR64__(v21, v28);
    id v39 = v22;
    uint64_t v24 = type metadata accessor for SectionsRoot.Child();
    id v25 = v23;
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)&v38, a5, v24, WitnessTable, v51);
    uint64_t v27 = LODWORD(v51[0]);
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v37 = v27;
    unint64_t v38 = v7;
    LODWORD(v39) = v8;
    uint64_t v40 = v9;
    int v41 = v11;
    int v42 = v36;
    int v43 = v35;
    int v44 = v12;
    uint64_t v45 = v15;
    uint64_t v46 = v34;
    uint64_t v47 = v33;
    int v48 = v32;
    uint64_t v49 = v31;
    char v50 = v30;
    (*(void (**)(int *, unint64_t *, uint64_t, uint64_t))(a6 + 32))(&v37, &v38, a5, a6);
    $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v27, a5, a6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t SectionsRoot.Child.value.getter(unint64_t a1, void *a2)
{
  unint64_t v3 = HIDWORD(a1);
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v37);
  uint64_t v5 = specialized static SectionAccumulator.processUnsectionedContent(list:contentSubgraph:)(&v37, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  if (v5)
  {
    type metadata accessor for SectionsRoot();
    unint64_t v6 = *(void (**)(long long *))AGGraphGetValue();
    int64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      uint64_t v47 = MEMORY[0x263F8EE78];
      swift_retain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
      uint64_t v8 = v47;
      uint64_t v9 = v5 + 32;
      do
      {
        outlined init with copy of SectionAccumulator.Item(v9, (uint64_t)&v37);
        uint64_t v47 = v8;
        unint64_t v11 = *(void *)(v8 + 16);
        unint64_t v10 = *(void *)(v8 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v8 = v47;
        }
        *(void *)(v8 + 16) = v11 + 1;
        uint64_t v12 = v8 + 136 * v11;
        *(_OWORD *)(v12 + 32) = v37;
        long long v13 = v38;
        long long v14 = v39;
        long long v15 = v41;
        *(_OWORD *)(v12 + 80) = v40;
        *(_OWORD *)(v12 + 96) = v15;
        *(_OWORD *)(v12 + 48) = v13;
        *(_OWORD *)(v12 + 64) = v14;
        long long v16 = v42;
        long long v17 = v43;
        long long v18 = v44;
        *(void *)(v12 + 160) = v45;
        *(_OWORD *)(v12 + 128) = v17;
        *(_OWORD *)(v12 + 144) = v18;
        *(_OWORD *)(v12 + 112) = v16;
        v9 += 136;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    *(void *)&long long v37 = v8;
    v6(&v37);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    uint64_t v47 = MEMORY[0x263F8EE78];
    uint64_t v51 = 0;
    char v52 = a2;
    uint64_t v53 = MEMORY[0x263F8EE78];
    uint64_t v54 = 0;
    uint64_t v20 = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(v20, (uint64_t)&v37);
    id v21 = a2;
    LOBYTE(v46) = 0;
    SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)(&v37, v3, (uint64_t)protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
    type metadata accessor for SectionsRoot();
    id v22 = *(void (**)(long long *))AGGraphGetValue();
    uint64_t v23 = v53;
    int64_t v24 = *(void *)(v53 + 16);
    if (v24)
    {
      uint64_t v46 = v19;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      uint64_t v25 = v46;
      uint64_t v26 = v23 + 32;
      do
      {
        outlined init with copy of SectionAccumulator.Item(v26, (uint64_t)&v37);
        uint64_t v46 = v25;
        unint64_t v28 = *(void *)(v25 + 16);
        unint64_t v27 = *(void *)(v25 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v25 = v46;
        }
        *(void *)(v25 + 16) = v28 + 1;
        uint64_t v29 = v25 + 136 * v28;
        *(_OWORD *)(v29 + 32) = v37;
        long long v30 = v38;
        long long v31 = v39;
        long long v32 = v41;
        *(_OWORD *)(v29 + 80) = v40;
        *(_OWORD *)(v29 + 96) = v32;
        *(_OWORD *)(v29 + 48) = v30;
        *(_OWORD *)(v29 + 64) = v31;
        long long v33 = v42;
        long long v34 = v43;
        long long v35 = v44;
        *(void *)(v29 + 160) = v45;
        *(_OWORD *)(v29 + 128) = v34;
        *(_OWORD *)(v29 + 144) = v35;
        *(_OWORD *)(v29 + 112) = v33;
        v26 += 136;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    *(void *)&long long v37 = v25;
    v22(&v37);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined destroy of SectionAccumulator((uint64_t)&v47);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance SectionsRoot<A>.Child()
{
  return SectionsRoot.Child.value.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SectionsRoot<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static SectionsRoot._makeView(root:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

void protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance SectionsRoot<A>(unsigned int *a1, uint64_t a2, void (*a3)(void *__return_ptr, unsigned int *, unint64_t *), uint64_t a4, uint64_t a5)
{
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance SectionsRoot<A>()
{
}

Swift::Int SectionConfiguration.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SectionConfiguration.ID()
{
  return Hasher._finalize()();
}

BOOL SectionConfiguration.hasSubsections.getter()
{
  char v1 = *v0;
  outlined init with copy of SectionConfiguration((uint64_t)v0, (uint64_t)v4);
  BOOL v2 = (v1 & 1) == 0 && specialized Collection.count.getter(v5) > 0;
  outlined destroy of SectionConfiguration((uint64_t)v4);
  return v2;
}

void SectionConfiguration.header.getter(void *a1@<X8>)
{
  if ((uint64_t)v1[13] >= 1)
  {
    uint64_t v3 = v1[8];
    if (v3)
    {
      if (*(void *)(v3 + 16))
      {
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v11);
        outlined init with take of ScrollStateRequest(v11, (uint64_t)v12);
        outlined init with copy of AnyTrackedValue((uint64_t)v12, (uint64_t)v11);
        outlined init with take of ScrollStateRequest(v11, (uint64_t)v10);
        uint64_t v4 = (void *)v1[6];
        if (v4)
        {
          uint64_t v5 = v1[11];
          outlined init with take of ScrollStateRequest(v10, (uint64_t)a1);
          a1[5] = v4;
          a1[6] = v5;
          id v6 = v4;
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
          return;
        }
        goto LABEL_12;
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }
  }
  int64_t v7 = (void *)v1[6];
  if (!v7) {
    goto LABEL_11;
  }
  a1[3] = &type metadata for EmptyViewList;
  a1[4] = &protocol witness table for EmptyViewList;
  uint64_t v8 = MEMORY[0x263F8EE78];
  a1[5] = v7;
  a1[6] = v8;

  id v9 = v7;
}

void SectionConfiguration.footer.getter(void *a1@<X8>)
{
  if ((uint64_t)v1[14] >= 1)
  {
    uint64_t v3 = v1[8];
    if (v3)
    {
      if (*(void *)(v3 + 16) >= 3uLL)
      {
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 128, (uint64_t)v11);
        outlined init with take of ScrollStateRequest(v11, (uint64_t)v12);
        outlined init with copy of AnyTrackedValue((uint64_t)v12, (uint64_t)v11);
        outlined init with take of ScrollStateRequest(v11, (uint64_t)v10);
        uint64_t v4 = (void *)v1[6];
        if (v4)
        {
          uint64_t v5 = v1[11];
          outlined init with take of ScrollStateRequest(v10, (uint64_t)a1);
          a1[5] = v4;
          a1[6] = v5;
          id v6 = v4;
          swift_bridgeObjectRetain();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
          return;
        }
        goto LABEL_12;
      }
      __break(1u);
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }
  }
  int64_t v7 = (void *)v1[6];
  if (!v7) {
    goto LABEL_11;
  }
  a1[3] = &type metadata for EmptyViewList;
  a1[4] = &protocol witness table for EmptyViewList;
  uint64_t v8 = MEMORY[0x263F8EE78];
  a1[5] = v7;
  a1[6] = v8;

  id v9 = v7;
}

void SectionConfiguration.content.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[8];
  if (v3)
  {
    if (*(void *)(v3 + 16) >= 2uLL)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 80, (uint64_t)v17);
      int v4 = v18;
      outlined init with take of ScrollStateRequest(v17, (uint64_t)&v22);
      int v25 = v4;
      outlined init with take of ScrollStateRequest(&v22, (uint64_t)v19);
      int v5 = v25;
      DWORD2(v20) = v25;
      outlined init with take of ScrollStateRequest(v19, (uint64_t)&v22);
      int v25 = v5;
      outlined init with copy of AnyTrackedValue((uint64_t)&v22, (uint64_t)v17);
      outlined init with take of ScrollStateRequest(v17, (uint64_t)v16);
      id v6 = (void *)v1[6];
      if (v6)
      {
        uint64_t v7 = v1[11];
        outlined init with take of ScrollStateRequest(v16, a1);
        *(void *)(a1 + 40) = v6;
        *(void *)(a1 + 48) = v7;
        id v8 = v6;
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
        return;
      }
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_11;
  }
  outlined init with copy of AnyTrackedValue((uint64_t)(v1 + 1), (uint64_t)v19);
  uint64_t v9 = v1[16];
  uint64_t v10 = specialized Collection.count.getter(v1[12]);
  if (__OFADD__(v9, v10))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v9 + v10 < v9)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *((void *)&v20 + 1) = v9;
  uint64_t v21 = v9 + v10;
  uint64_t v23 = &type metadata for ViewListSlice;
  int64_t v24 = &protocol witness table for ViewListSlice;
  uint64_t v11 = swift_allocObject();
  *(void *)&long long v22 = v11;
  long long v12 = v19[1];
  *(_OWORD *)(v11 + 16) = v19[0];
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = v20;
  *(void *)(v11 + 64) = v21;
  long long v13 = (void *)v1[6];
  if (!v13)
  {
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v14 = v1[11];
  outlined init with take of ScrollStateRequest(&v22, a1);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v14;
  id v15 = v13;
  swift_bridgeObjectRetain();
}

uint64_t protocol witness for Identifiable.id.getter in conformance SectionConfiguration()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t outlined destroy of SectionConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t sub_246117D0C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in GroupSectionsOfContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionCollection()
{
  return lazy protocol witness table accessor for type Slice<SectionCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionCollection()
{
  return lazy protocol witness table accessor for type Slice<SectionCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionCollection>(255, &lazy cache variable for type metadata for Slice<SectionCollection>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SectionCollection()
{
  return lazy protocol witness table accessor for type Slice<SectionCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SectionCollection>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SectionCollection()
{
  return lazy protocol witness table accessor for type Slice<SectionCollection> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<SectionCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SectionCollection>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionCollection> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<SectionCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type SectionCollection and conformance SectionCollection();
    unint64_t v7 = a3(a1, &type metadata for SectionCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t type metadata completion function for GroupSectionsOfContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GroupSectionsOfContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x2461182DCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for GroupSectionsOfContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x2461184D0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for SectionCollection()
{
  return &type metadata for SectionCollection;
}

uint64_t assignWithCopy for SectionConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  uint64_t v4 = *(void **)(a1 + 48);
  unsigned int v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  id v6 = v5;

  unsigned int v7 = (_OWORD *)(a1 + 56);
  unsigned int v8 = (_OWORD *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    }
    else
    {
      outlined destroy of _ViewList_Section(a1 + 56);
      long long v10 = *(_OWORD *)(a2 + 65);
      *unsigned int v7 = *v8;
      *(_OWORD *)(a1 + 65) = v10;
    }
  }
  else if (v9)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *v8;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    *unsigned int v7 = v11;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t outlined destroy of _ViewList_Section(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for SectionConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;

  if (!*(void *)(a1 + 64)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 64);
  if (!v6)
  {
    outlined destroy of _ViewList_Section(a1 + 56);
LABEL_5:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

ValueMetadata *type metadata accessor for SectionConfiguration()
{
  return &type metadata for SectionConfiguration;
}

ValueMetadata *type metadata accessor for SectionConfiguration.ID()
{
  return &type metadata for SectionConfiguration.ID;
}

uint64_t sub_2461187CC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SectionsRoot.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24611885C()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI6_GraphVAA11_ViewInputsVAA01_D11ListOutputsVIgnnr_AceGIegnnr_TRTA_0(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@in_guaranteed _Graph, @in_guaranteed _ViewInputs) -> (@out _ViewListOutputs)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_246118874()
{
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in static SectionsRoot._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in static SectionsRoot._makeView(root:inputs:body:)(a1, a2, *(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t *))(v2 + 32), *(void *)(v2 + 40), *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void *initializeBufferWithCopyOfBuffer for SectionsRoot.Child(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for SectionsRoot.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void **)(a2 + 8);
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for SectionsRoot.Child(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a1[1];
  a1[1] = a2[1];

  return a1;
}

uint64_t base witness table accessor for _AttributeBody in SectionsRoot<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of SectionAccumulator(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for SquishTextEffect()
{
  return &type metadata for SquishTextEffect;
}

uint64_t closure #1 in SquishTextEffect.configuration(_:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a6);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v31, a6, a7, 1);
  unsigned int v13 = (double *)swift_allocObject();
  _OWORD v13[2] = a1;
  _OWORD v13[3] = a2;
  v13[4] = a3;
  void v13[5] = a4;
  uint64_t v14 = swift_allocObject();
  long long v15 = v31[3];
  *(_OWORD *)(v14 + 48) = v31[2];
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + 80) = v31[4];
  uint64_t v16 = v32;
  long long v17 = v31[1];
  *(_OWORD *)(v14 + 16) = v31[0];
  *(_OWORD *)(v14 + 32) = v17;
  *(void *)(v14 + 96) = v16;
  *(void *)(v14 + 104) = partial apply for closure #1 in closure #1 in SquishTextEffect.configuration(_:);
  *(void *)(v14 + 112) = v13;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
  *(void *)(v18 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v19 = v18 + 32;
  *(void *)(v18 + 40) = v14;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v18;
  int64_t v21 = *(void *)(v18 + 16);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 1, MEMORY[0x263F8EE78]);
  uint64_t v23 = v22;
  if (!*(void *)(v18 + 16))
  {
    if (!v21) {
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v24 = v22[2];
  if ((v22[3] >> 1) - v24 < v21)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v25 = (unint64_t)&v22[2 * v24 + 4];
  if (v19 < v25 + 16 * v21 && v25 < v19 + 16 * v21) {
    goto LABEL_16;
  }
  swift_arrayInitWithCopy();
  if (!v21)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v31);
    return (uint64_t)v23;
  }
  uint64_t v27 = v23[2];
  BOOL v28 = __OFADD__(v27, v21);
  uint64_t v29 = v27 + v21;
  if (!v28)
  {
    v23[2] = v29;
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in SquishTextEffect.configuration(_:)(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  double v10 = *((double *)a2 + 4);
  double v11 = *((double *)a2 + 5);
  double v12 = *((double *)a2 + 8);
  double v13 = v11 - v10;
  if (v11 - v10 < 0.0)
  {
    double v15 = 0.0;
    double v14 = 0.0 / v12;
    if (0.0 / v12 < 0.0)
    {
LABEL_5:
      if (a5 > 0.0)
      {
        double v16 = 0.0 / a5;
        goto LABEL_13;
      }
      goto LABEL_16;
    }
  }
  else
  {
    double v14 = v13 / v12;
    if (v13 / v12 < 0.0)
    {
      double v15 = 0.0;
      goto LABEL_5;
    }
  }
  double v15 = 1.0;
  if (v14 <= 1.0)
  {
    if (v14 < a5)
    {
      double v16 = v14 / a5;
LABEL_13:
      double v17 = 1.0;
      if (v16 == 1.0) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    double v15 = v14;
  }
  else if (a5 > 1.0)
  {
    double v17 = 1.0;
    double v16 = 1.0 / a5;
    if (1.0 / a5 == 1.0) {
      goto LABEL_19;
    }
LABEL_14:
    double v17 = 1.0 - exp2(v16 * -10.0);
    goto LABEL_19;
  }
LABEL_16:
  double v18 = (v15 - a5) / a6;
  double v19 = 1.0;
  if (v18 != 1.0) {
    double v19 = 1.0 - exp2(v18 * -10.0);
  }
  double v17 = 1.0 - v19;
LABEL_19:
  double v20 = *(double *)a2;
  uint64_t v21 = a2[1];
  char v22 = *((unsigned char *)a2 + 16);
  uint64_t v23 = a2[3];
  uint64_t v24 = a2[6];
  char v25 = *((unsigned char *)a2 + 56);
  char v26 = *((unsigned char *)a2 + 72);
  uint64_t v27 = a2[16];
  uint64_t v28 = a2[25];
  double v29 = *((double *)a2 + 26);
  double v30 = *((double *)a2 + 27);
  double v31 = *((double *)a2 + 28);
  double v32 = *((double *)a2 + 29);
  uint64_t v33 = a2[46];
  char v34 = *((unsigned char *)a2 + 376);
  v64[0] = *a2;
  v64[1] = v21;
  char v65 = v22;
  uint64_t v66 = v23;
  double v67 = v10;
  double v68 = v11;
  uint64_t v69 = v24;
  char v70 = v25;
  double v71 = v12;
  char v72 = v26;
  long long v35 = *((_OWORD *)a2 + 6);
  long long v73 = *((_OWORD *)a2 + 5);
  long long v74 = v35;
  long long v75 = *((_OWORD *)a2 + 7);
  long long v61 = *(_OWORD *)(a2 + 17);
  long long v77 = v61;
  long long v78 = *(_OWORD *)(a2 + 19);
  long long v79 = *(_OWORD *)(a2 + 21);
  long long v80 = *(_OWORD *)(a2 + 23);
  uint64_t v76 = v27;
  uint64_t v81 = v28;
  double v82 = v29;
  double v59 = v31;
  double v60 = v30;
  double v83 = v30;
  double v84 = v31;
  double v58 = v32;
  double v85 = v32;
  long long v56 = *((_OWORD *)a2 + 16);
  long long v57 = *((_OWORD *)a2 + 15);
  long long v86 = v57;
  long long v87 = v56;
  long long v36 = *((_OWORD *)a2 + 18);
  long long v88 = *((_OWORD *)a2 + 17);
  long long v89 = v36;
  long long v37 = *((_OWORD *)a2 + 20);
  long long v90 = *((_OWORD *)a2 + 19);
  long long v91 = v37;
  long long v38 = *((_OWORD *)a2 + 22);
  long long v92 = *((_OWORD *)a2 + 21);
  long long v93 = v38;
  uint64_t v94 = v33;
  char v95 = v34;
  unint64_t result = outlined retain of Text.Effect.TransformContext((uint64_t)v64);
  if (one-time initialization token for spring != -1) {
    unint64_t result = swift_once();
  }
  CGFloat v40 = 0.0;
  if (v13 < 0.0) {
    double v41 = 0.0;
  }
  else {
    double v41 = v13;
  }
  if (__OFSUB__(*(void *)&v20, a1))
  {
    __break(1u);
  }
  else
  {
    double v42 = a4;
    double v43 = v17 * a3 + 1.0;
    double v44 = 1.0;
    double v45 = 0.0;
    CGFloat v46 = 0.0;
    double v47 = 0.0;
    double v48 = 0.0;
    if (*(void *)&v20 == a1)
    {
      v103[0] = &type metadata for Text.Effect.WidthMultiplierAttribute;
      v103[1] = v21;
      v103[2] = a1;
      v103[3] = 0;
      char v104 = 1;
      uint64_t v105 = 0;
      char v106 = 1;
      double v44 = specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v103, v17 * v42 + 1.0, *(double *)&static SquishTextEffect.spring, *((double *)&static SquishTextEffect.spring + 1), *(double *)&qword_268F736D0, v41);
      CGFloat v40 = v29;
      CGFloat v46 = v59;
      double v45 = v60;
      double v47 = v58;
      double v48 = *(double *)&v57;
    }
    double v49 = v44;
    outlined release of Text.Effect.TransformContext((uint64_t)v64);
    v107.origin.CGFloat y = v45 - v47;
    v107.size.double height = v47 + v48;
    v107.origin.double x = v40;
    v107.size.CGFloat width = v46;
    CGFloat MidX = CGRectGetMidX(v107);
    memset(v97, 0, sizeof(v97));
    CGFloat v98 = MidX;
    double v99 = v45;
    double v100 = v43;
    __asm { FMOV            V0.2D, #1.0 }
    long long v101 = _Q0;
    char v102 = 0;
    long long v62 = static SquishTextEffect.spring;
    uint64_t v63 = qword_268F736D0;
    Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v97, *(double *)&a1, (double *)&v62, (uint64_t)v96);
    unint64_t result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v96, 0, 0, 0, 1);
    if (*(void *)&v20 == a1) {
      *((double *)a2 + 17) = v49 * *(double *)&v61;
    }
  }
  return result;
}

uint64_t protocol witness for TextEffect.configuration(_:) in conformance SquishTextEffect()
{
  return specialized SquishTextEffect.configuration(_:)(*v0, v0[1], v0[2], v0[3]);
}

uint64_t protocol witness for static TextEffect.name.getter in conformance SquishTextEffect()
{
  return 0x687369757173;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance SquishTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.DrawableContent<SquishTextEffect>();
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v33 = 1;
  char v32 = 0;
  char v31 = 0;
  long long v17 = xmmword_246215740;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  long long v22 = xmmword_246215750;
  uint64_t v23 = 0;
  char v24 = 1;
  long long v25 = xmmword_246214540;
  char v26 = 0;
  uint64_t v27 = MEMORY[0x263F8EE78];
  char v28 = 0;
  long long v29 = xmmword_2461BD450;
  char v30 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static SquishTextEffect.spring;
  double v12 = *(double *)&qword_268F736D0;
  outlined init with copy of Text.Effect.DrawableContent<SquishTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SquishTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect();
  unint64_t result = lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized SquishTextEffect.configuration(_:)(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = (double *)swift_allocObject();
  _OWORD v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  _OWORD v8[5] = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in SquishTextEffect.configuration(_:);
  *(void *)(v9 + 24) = v8;
  swift_retain();
  double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
  }
  _OWORD v10[2] = v12 + 1;
  long long v13 = &v10[2 * v12];
  v13[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  void v13[5] = v9;
  swift_release();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_2461193A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SquishTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in SquishTextEffect.configuration(_:)(v3[2], v3[3], v3[4], v3[5], a1, a2, a3);
}

uint64_t sub_2461193BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2461193F4()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in SquishTextEffect.configuration(_:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in closure #1 in SquishTextEffect.configuration(_:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_246119410()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for Text.Effect.DrawableContent<SquishTextEffect>()
{
  if (!lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>)
  {
    lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect();
    unint64_t v0 = type metadata accessor for Text.Effect.DrawableContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<SquishTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.DrawableContent<SquishTextEffect>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *static CoordinateSpace.scrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for all, &static ScrollCoordinateSpace.all, a1);
}

void *static CoordinateSpace.scrollViewContent.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for content, &static ScrollCoordinateSpace.content, a1);
}

void *static CoordinateSpace.verticalScrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for vertical, &static ScrollCoordinateSpace.vertical, a1);
}

void *static CoordinateSpace.horizontalScrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for horizontal, &static ScrollCoordinateSpace.horizontal, a1);
}

uint64_t static CoordinateSpace.scrollViewSafeArea.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v2 = static _SemanticFeature_v6.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    uint64_t result = dyld_program_sdk_at_least();
    if ((result & 1) == 0)
    {
LABEL_7:
      if (one-time initialization token for content != -1) {
        uint64_t result = swift_once();
      }
      uint64_t v4 = &static ScrollCoordinateSpace.content;
      goto LABEL_14;
    }
  }
  else if (static Semantics.forced < v2)
  {
    goto LABEL_7;
  }
  if (one-time initialization token for safeArea != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v4 = &static ScrollCoordinateSpace.safeArea;
LABEL_14:
  *(void *)a1 = *v4;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

void *static CoordinateSpace.Name.verticalScrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for vertical, &static ScrollCoordinateSpace.vertical, a1);
}

void *static CoordinateSpace.Name.horizontalScrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for horizontal, &static ScrollCoordinateSpace.horizontal, a1);
}

void *static CoordinateSpace.Name.scrollView.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for all, &static ScrollCoordinateSpace.all, a1);
}

void *static CoordinateSpace.Name.scrollViewContent.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for content, &static ScrollCoordinateSpace.content, a1);
}

void *static CoordinateSpaceProtocol<>.scrollViewContent.getter@<X0>(uint64_t a1@<X8>)
{
  return static CoordinateSpace.scrollView.getter(&one-time initialization token for content, &static ScrollCoordinateSpace.content, a1);
}

ValueMetadata *type metadata accessor for ScrollCoordinateSpace()
{
  return &type metadata for ScrollCoordinateSpace;
}

ValueMetadata *type metadata accessor for BounceTextEffect()
{
  return &type metadata for BounceTextEffect;
}

uint64_t closure #1 in BounceTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v40, a2, a3, 7);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v42 = v9;
  CFIndex v11 = *(void *)(v9 + 16);
  uint64_t v10 = *(void *)(v9 + 24);
  swift_retain_n();
  double v12 = 0.0;
  if (v11 != v10)
  {
    while (1)
    {
      double v14 = *(void **)(v9 + 32);
      uint64_t v13 = *(void *)(v9 + 40);
      if (*(unsigned char *)(v9 + 48))
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(void *)(v9 + 40), 1);
        id v15 = (id)_NSTextLineFragmentGetCTLine(v14);
        if (!v15) {
          goto LABEL_24;
        }
        id v16 = v15;
        outlined consume of Text.Layout.Line.Line(v14, v13, 1);
        double v14 = v16;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(*(void **)(v9 + 32), *(void *)(v9 + 40), 0);
        outlined copy of Text.Layout.Line.Line(v14, v13, 0);

        swift_release();
      }
      if (v11 < *(void *)(v9 + 16) || v11 >= *(void *)(v9 + 24)) {
        break;
      }
      CFIndex v17 = v11 + 1;
      swift_retain();
      char v18 = v14;
      uint64_t v19 = (id)_CTLineGetRunAtIndex(v18, v11);
      uint64_t v20 = (const __CTFont *)(id)CTRunGetFont();
      swift_release();

      double Size = CTFontGetSize(v20);
      swift_release();

      if (v12 <= Size) {
        double v12 = Size;
      }
      CFIndex v11 = v17;
      if (v17 == *(void *)(v9 + 24)) {
        goto LABEL_11;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_11:
  outlined release of ViewTransform((uint64_t)&v42);
  outlined release of ViewTransform((uint64_t)&v42);
  uint64_t v43 = v39;
  uint64_t v44 = v6;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a1;
  *(void *)(v22 + 32) = v39;
  *(void *)(v22 + 40) = v6;
  *(void *)(v22 + 48) = v7;
  *(void *)(v22 + 56) = v8;
  *(double *)(v22 + 64) = v12;
  uint64_t v23 = swift_allocObject();
  long long v24 = v40[3];
  *(_OWORD *)(v23 + 48) = v40[2];
  *(_OWORD *)(v23 + 64) = v24;
  *(_OWORD *)(v23 + 80) = v40[4];
  uint64_t v25 = v41;
  long long v26 = v40[1];
  *(_OWORD *)(v23 + 16) = v40[0];
  *(_OWORD *)(v23 + 32) = v26;
  *(void *)(v23 + 96) = v25;
  *(void *)(v23 + 104) = partial apply for closure #1 in closure #1 in BounceTextEffect.configuration(_:);
  *(void *)(v23 + 112) = v22;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2461B9DC0;
  *(void *)(v27 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v28 = v27 + 32;
  *(void *)(v27 + 40) = v23;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v27;
  int64_t v30 = *(void *)(v27 + 16);
  outlined retain of LinearGradient((uint64_t)&v43);
  outlined retain of LinearGradient((uint64_t)&v44);
  outlined retain of LinearGradient((uint64_t)&v45);
  outlined retain of LinearGradient((uint64_t)&v46);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 1, MEMORY[0x263F8EE78]);
  char v32 = v31;
  if (!*(void *)(v27 + 16))
  {
    if (v30)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v40);
    return (uint64_t)v32;
  }
  uint64_t v33 = v31[2];
  if ((v31[3] >> 1) - v33 < v30)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v34 = (unint64_t)&v31[2 * v33 + 4];
  if (v28 >= v34 + 16 * v30 || v34 >= v28 + 16 * v30)
  {
    swift_arrayInitWithCopy();
    if (v30)
    {
      uint64_t v35 = v32[2];
      BOOL v36 = __OFADD__(v35, v30);
      uint64_t v37 = v35 + v30;
      if (v36) {
        goto LABEL_23;
      }
      void v32[2] = v37;
    }
    goto LABEL_19;
  }
LABEL_25:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in BounceTextEffect.configuration(_:)(unint64_t result, uint64_t *a2, uint64_t a3, double a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(a3 + 16);
  if (*(void *)(v5 + 16) <= result)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v6 = *(void *)(a3 + 32);
  if (*(void *)(v6 + 16) <= result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v9 = v6 + 40 * result;
  double v10 = *(double *)(v9 + 32);
  double v11 = *(double *)(v9 + 40);
  double v12 = *((double *)a2 + 5) - *((double *)a2 + 4);
  double v13 = 0.0;
  if (v12 < 0.0)
  {
    if (v10 >= 0.0) {
      goto LABEL_11;
    }
    double v13 = 1.0;
    double v12 = 0.0;
    if (v10 + v11 <= 0.0) {
      goto LABEL_11;
    }
LABEL_10:
    double v13 = (v12 - v10) / v11;
    goto LABEL_11;
  }
  if (v12 > v10)
  {
    double v13 = 1.0;
    if (v10 + v11 > v12) {
      goto LABEL_10;
    }
  }
LABEL_11:
  double v14 = *(double *)a2;
  if (__OFSUB__(*a2, result))
  {
LABEL_57:
    __break(1u);
    return result;
  }
  double v15 = *(double *)(v5 + 32 * result + 32);
  unint64_t v171 = *(void *)(v9 + 48);
  uint64_t v169 = *(void *)(v9 + 56);
  uint64_t v166 = *(void *)(v9 + 64);
  double v164 = *((double *)a2 + 30);
  double v160 = *((double *)a2 + 29);
  double v16 = *((double *)a2 + 27);
  double v158 = *((double *)a2 + 28);
  double v17 = *((double *)a2 + 26);
  double v162 = ((sin((v13 * 1.375 + -0.4375) * 6.28318531) + 1.0) * 0.5 + -0.308658284) * 1.44646269 * 0.1 + 1.0;
  double v18 = v13
      * ((v15 * 0.5 + 1.0)
       * (((sin((v13 * 1.1 + -0.3) * 6.28318531) + 1.0) * 0.5 + -0.0244717419)
        * -1.02508563))
      * 0.75
      * a4;
  if (*(void *)&v14 == v4) {
    double v19 = v17;
  }
  else {
    double v19 = 0.0;
  }
  if (*(void *)&v14 == v4)
  {
    double v20 = v158;
  }
  else
  {
    double v16 = 0.0;
    double v20 = 0.0;
  }
  if (*(void *)&v14 == v4) {
    double v21 = v160;
  }
  else {
    double v21 = 0.0;
  }
  if (*(void *)&v14 == v4) {
    double v22 = v164;
  }
  else {
    double v22 = 0.0;
  }
  double v23 = v16 - v21;
  double v24 = v22 + v21;
  CGFloat MidX = CGRectGetMidX(*(CGRect *)&v19);
  memset(v231, 0, 48);
  __asm { FMOV            V2.2D, #1.0 }
  long long v141 = _Q2;
  v231[3] = _Q2;
  uint64_t v232 = 0x3FF0000000000000;
  char v233 = 0;
  v265[0] = 0;
  v265[1] = 0;
  *(double *)&v265[2] = v18;
  v265[3] = 0;
  *(CGFloat *)&v265[4] = MidX;
  *(double *)&v265[5] = v16;
  v265[6] = 0x3FF0000000000000;
  *(double *)&v265[7] = v162;
  v265[8] = 0x3FF0000000000000;
  char v266 = 0;
  unint64_t v179 = v171;
  uint64_t v180 = v169;
  uint64_t v181 = v166;
  Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v265, *(double *)&v4, (double *)&v179, (uint64_t)v226);
  unint64_t v31 = *a2;
  uint64_t v32 = a2[1];
  char v225 = *((unsigned char *)a2 + 16);
  *(_DWORD *)((char *)&v181 + 1) = *(_DWORD *)((char *)a2 + 17);
  HIDWORD(v181) = *((_DWORD *)a2 + 5);
  uint64_t v33 = a2[3];
  uint64_t v34 = a2[4];
  double v35 = *((double *)a2 + 5);
  double v36 = *((double *)a2 + 6);
  char v224 = *((unsigned char *)a2 + 56);
  *(_DWORD *)((char *)&v186 + 1) = *(_DWORD *)((char *)a2 + 57);
  HIDWORD(v186) = *((_DWORD *)a2 + 15);
  double v37 = *((double *)a2 + 8);
  char v38 = *((unsigned char *)a2 + 72);
  int v39 = *(_DWORD *)((char *)a2 + 73);
  *(_DWORD *)&v188[4] = *((_DWORD *)a2 + 19);
  *(_DWORD *)&v188[1] = v39;
  uint64_t v40 = a2[10];
  uint64_t v41 = a2[11];
  uint64_t v42 = a2[12];
  uint64_t v43 = a2[13];
  uint64_t v44 = a2[14];
  uint64_t v45 = a2[15];
  double v46 = *((double *)a2 + 16);
  double v47 = *((double *)a2 + 17);
  double v48 = *((double *)a2 + 18);
  double v49 = *((double *)a2 + 19);
  uint64_t v50 = a2[20];
  uint64_t v51 = a2[21];
  uint64_t v52 = a2[22];
  uint64_t v53 = a2[23];
  uint64_t v54 = a2[24];
  uint64_t v55 = a2[25];
  uint64_t v56 = a2[26];
  uint64_t v57 = a2[27];
  uint64_t v58 = a2[28];
  uint64_t v59 = a2[29];
  uint64_t v60 = a2[30];
  uint64_t v61 = a2[31];
  uint64_t v62 = a2[32];
  uint64_t v63 = (void *)a2[33];
  unint64_t v65 = a2[34];
  uint64_t v64 = a2[35];
  uint64_t v66 = a2[36];
  uint64_t v67 = a2[37];
  uint64_t v68 = a2[38];
  uint64_t v69 = a2[39];
  uint64_t v70 = a2[40];
  uint64_t v71 = a2[41];
  uint64_t v72 = a2[42];
  uint64_t v73 = a2[43];
  unint64_t v74 = a2[44];
  uint64_t v75 = a2[45];
  uint64_t v76 = a2[46];
  char v223 = *((unsigned char *)a2 + 376);
  unint64_t v137 = v31;
  unint64_t v179 = v31;
  uint64_t v144 = v32;
  uint64_t v180 = v32;
  LOBYTE(v181) = v225;
  uint64_t v135 = v34;
  uint64_t v136 = v33;
  uint64_t v182 = v33;
  uint64_t v183 = v34;
  double v184 = v35;
  double v185 = v36;
  LOBYTE(v186) = v224;
  double v134 = v37;
  double v187 = v37;
  char v133 = v38;
  v188[0] = v38;
  uint64_t v131 = v41;
  uint64_t v132 = v40;
  *(void *)&v188[8] = v40;
  *(void *)&v188[16] = v41;
  uint64_t v129 = v43;
  uint64_t v130 = v42;
  uint64_t v189 = v42;
  uint64_t v190 = v43;
  uint64_t v127 = v45;
  uint64_t v128 = v44;
  uint64_t v191 = v44;
  uint64_t v192 = v45;
  double v125 = v47;
  double v126 = v46;
  double v193 = v46;
  double v194 = v47;
  double v123 = v49;
  double v124 = v48;
  double v195 = v48;
  double v196 = v49;
  uint64_t v121 = v51;
  uint64_t v122 = v50;
  *(void *)v197 = v50;
  *(void *)&v197[8] = v51;
  uint64_t v119 = v53;
  uint64_t v120 = v52;
  *(void *)&v197[16] = v52;
  uint64_t v198 = v53;
  uint64_t v117 = v55;
  uint64_t v118 = v54;
  uint64_t v199 = v54;
  uint64_t v200 = v55;
  uint64_t v115 = v57;
  uint64_t v116 = v56;
  uint64_t v201 = v56;
  uint64_t v202 = v57;
  uint64_t v113 = v59;
  uint64_t v114 = v58;
  uint64_t v203 = v58;
  uint64_t v204 = v59;
  uint64_t v111 = v61;
  uint64_t v112 = v60;
  uint64_t v205 = v60;
  uint64_t v206 = v61;
  uint64_t v207 = v62;
  v208 = v63;
  unint64_t v209 = v65;
  uint64_t v165 = v64;
  uint64_t v210 = v64;
  uint64_t v163 = v66;
  uint64_t v211 = v66;
  uint64_t v161 = v67;
  uint64_t v212 = v67;
  uint64_t v159 = v68;
  uint64_t v213 = v68;
  uint64_t v172 = v69;
  uint64_t v214 = v69;
  uint64_t v157 = v70;
  uint64_t v215 = v70;
  uint64_t v170 = v71;
  uint64_t v216 = v71;
  uint64_t v155 = v73;
  uint64_t v156 = v72;
  uint64_t v217 = v72;
  uint64_t v218 = v73;
  unint64_t v154 = v74;
  unint64_t v219 = v74;
  uint64_t v150 = v76;
  uint64_t v151 = v75;
  uint64_t v220 = v75;
  uint64_t v221 = v76;
  char v222 = v223;
  uint64_t v77 = Text.Effect.TransformContext.subcomponents(for:)(v4);
  uint64_t v78 = *(void *)(v77 + 16);
  if (v78)
  {
    CGRect v107 = a2;
    char v109 = v225;
    char v142 = v224;
    char v79 = v223;
    uint64_t v140 = v62;
    long long v80 = (void *)(v62 + 16);
    double v110 = v36;
    double v81 = v35 - v36;
    double v82 = (uint64_t *)(v77 + 48);
    if (v81 < 0.0) {
      double v81 = 0.0;
    }
    double v108 = v81;
    double v143 = v35;
    CALayer v138 = v80;
    unint64_t v149 = v65;
    char v139 = v223;
    while (1)
    {
      uint64_t v84 = *(v82 - 2);
      uint64_t v83 = *(v82 - 1);
      uint64_t v85 = *v82;
      uint64_t v152 = *v82;
      uint64_t v153 = v83;
      if (v142)
      {
        v261[0] = &type metadata for Text.Effect.DrawingStateAttribute;
        v261[1] = v144;
        v261[2] = v84;
        v261[3] = v83;
        char v262 = 0;
        uint64_t v263 = v85;
        char v264 = 0;
        if (one-time initialization token for zero != -1) {
          swift_once();
        }
        LOBYTE(v173[0]) = 1;
        LOBYTE(v175) = 1;
        char v178 = 1;
        memset(v238, 0, 48);
        v238[3] = v141;
        uint64_t v239 = 0x3FF0000000000000;
        char v240 = 0;
        long long v241 = 0u;
        long long v242 = 0u;
        long long v243 = 0u;
        long long v244 = v141;
        uint64_t v245 = 0x3FF0000000000000;
        char v246 = 0;
        long long v247 = static Text.Effect.DrawingState.zero;
        long long v248 = xmmword_268F73640;
        long long v249 = xmmword_268F73650;
        long long v250 = xmmword_268F73660;
        uint64_t v251 = qword_268F73670;
        char v252 = byte_268F73678;
        uint64_t v254 = 0;
        uint64_t v255 = 0;
        uint64_t v253 = 0;
        char v256 = 1;
        uint64_t v257 = 0;
        char v258 = 1;
        uint64_t v259 = 0;
        char v260 = 1;
        swift_beginAccess();
        specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)v238, (uint64_t)v261);
        swift_endAccess();
        char v86 = 0;
        double v167 = 1.0;
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        double v92 = 0.0;
        double v93 = 1.0;
        double v94 = 1.0;
        if (!v65) {
          goto LABEL_45;
        }
      }
      else
      {
        unint64_t v179 = v137;
        uint64_t v180 = v144;
        LOBYTE(v181) = v109;
        uint64_t v182 = v136;
        uint64_t v183 = v135;
        double v184 = v35;
        double v185 = v110;
        LOBYTE(v186) = 0;
        double v187 = v134;
        v188[0] = v133;
        *(void *)&v188[8] = v132;
        *(void *)&v188[16] = v131;
        uint64_t v189 = v130;
        uint64_t v190 = v129;
        uint64_t v191 = v128;
        uint64_t v192 = v127;
        double v193 = v126;
        double v194 = v125;
        double v195 = v124;
        double v196 = v123;
        *(void *)v197 = v122;
        *(void *)&v197[8] = v121;
        *(void *)&v197[16] = v120;
        uint64_t v198 = v119;
        uint64_t v199 = v118;
        uint64_t v200 = v117;
        uint64_t v201 = v116;
        uint64_t v202 = v115;
        uint64_t v203 = v114;
        uint64_t v204 = v113;
        uint64_t v205 = v112;
        uint64_t v206 = v111;
        uint64_t v207 = v140;
        v208 = v63;
        unint64_t v209 = v65;
        uint64_t v210 = v165;
        uint64_t v211 = v163;
        uint64_t v212 = v161;
        uint64_t v213 = v159;
        uint64_t v214 = v172;
        uint64_t v215 = v157;
        uint64_t v216 = v170;
        uint64_t v217 = v156;
        uint64_t v218 = v155;
        unint64_t v219 = v154;
        uint64_t v220 = v151;
        uint64_t v221 = v150;
        char v222 = v79;
        v234[0] = &type metadata for Text.Effect.DrawingStateAttribute;
        v234[1] = v144;
        v234[2] = v137;
        v234[3] = 0;
        char v235 = 1;
        uint64_t v236 = 0;
        char v237 = 1;
        v227[0] = &type metadata for Text.Effect.DrawingStateAttribute;
        v227[1] = v144;
        v227[2] = v137;
        v227[3] = 0;
        char v228 = 1;
        uint64_t v229 = 0;
        char v230 = 1;
        swift_beginAccess();
        if (!*(void *)(*(void *)(v140 + 16) + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v234), (v98 & 1) == 0))
        {
          if (one-time initialization token for zero != -1) {
            swift_once();
          }
          long long v168 = static Text.Effect.DrawingState.zero;
          long long v146 = xmmword_268F73650;
          long long v148 = xmmword_268F73640;
          long long v145 = xmmword_268F73660;
          uint64_t v99 = qword_268F73670;
          char v100 = byte_268F73678;
          char v178 = 1;
          char v177 = 1;
          char v176 = 1;
          _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute, (uint64_t)&type metadata for Text.Effect.DrawingStateAttribute, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.AttributeTracker.ValueBox);
          uint64_t v101 = swift_allocObject();
          *(_OWORD *)(v101 + 16) = 0u;
          *(_OWORD *)(v101 + 32) = 0u;
          *(_OWORD *)(v101 + 48) = 0u;
          *(_OWORD *)(v101 + 64) = v141;
          *(void *)(v101 + 80) = 0x3FF0000000000000;
          *(unsigned char *)(v101 + 88) = 0;
          *(_OWORD *)(v101 + 96) = 0u;
          *(_OWORD *)(v101 + 112) = 0u;
          *(_OWORD *)(v101 + 128) = 0u;
          *(_OWORD *)(v101 + 144) = v141;
          *(void *)(v101 + 160) = 0x3FF0000000000000;
          *(unsigned char *)(v101 + 168) = 0;
          *(_OWORD *)(v101 + 176) = v168;
          *(_OWORD *)(v101 + 192) = v148;
          *(_OWORD *)(v101 + 208) = v146;
          *(_OWORD *)(v101 + 224) = v145;
          *(void *)(v101 + 240) = v99;
          *(unsigned char *)(v101 + 248) = v100;
          *(void *)(v101 + 256) = 0;
          *(void *)(v101 + 264) = 0;
          *(void *)(v101 + 272) = 0;
          *(unsigned char *)(v101 + 280) = v178;
          *(void *)(v101 + 288) = 0;
          *(unsigned char *)(v101 + 296) = v177;
          *(void *)(v101 + 304) = 0;
          *(unsigned char *)(v101 + 312) = v176;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v175 = *v80;
          void *v80 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v101, (uint64_t)v234, isUniquelyReferenced_nonNull_native);
          void *v80 = v175;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        outlined retain of Text.Effect.TransformContext((uint64_t)&v179);
        specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
        double v104 = 0.2 / v103 * 0.628318531;
        outlined release of Text.Effect.TransformContext((uint64_t)&v179);
        specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v227, (uint64_t)v231, (uint64_t)v173, 0.0 / v104, 6.28318531 / v104, 1.0, v108);
        unint64_t v87 = v173[0];
        uint64_t v88 = v173[1];
        uint64_t v89 = v173[2];
        uint64_t v90 = v173[3];
        uint64_t v91 = v173[4];
        double v92 = *(double *)&v173[5];
        double v167 = *(double *)&v173[6];
        double v93 = *(double *)&v173[7];
        double v94 = *(double *)&v173[8];
        char v86 = v174;
        if (!v65)
        {
LABEL_45:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
          }
          unint64_t v106 = v63[2];
          unint64_t v105 = v63[3];
          if (v106 >= v105 >> 1) {
            uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v105 > 1), v106 + 1, 1, v63);
          }
          unint64_t v179 = v87;
          uint64_t v180 = v88;
          uint64_t v181 = v89;
          uint64_t v182 = v90;
          uint64_t v183 = v91;
          double v184 = v92;
          double v185 = v167;
          double v186 = v93;
          double v187 = v94;
          v188[0] = v86;
          *(void *)&v188[4] = v151;
          *(void *)&v188[12] = v150;
          v188[20] = v79;
          _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi_((uint64_t)&v179);
          v63[2] = v106 + 1;
          outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v179, (uint64_t)&v63[27 * v106 + 4]);
          goto LABEL_29;
        }
      }
      uint64_t v147 = v84;
      outlined copy of Text.Effect.TransformContext.DrawingMode(v65, v165, v163, v161, v159, v172, v157, v170, v156, v155, v154);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of Text.Effect.PathInterpolator.MapKeys(v154);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
      }
      unint64_t v96 = v63[2];
      unint64_t v95 = v63[3];
      if (v96 >= v95 >> 1) {
        double v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v96 + 1, 1, v63);
      }
      else {
        double v97 = v63;
      }
      LOBYTE(v173[0]) = v79;
      LOBYTE(v175) = 0;
      unint64_t v179 = v65;
      uint64_t v180 = v165;
      uint64_t v181 = v163;
      uint64_t v182 = v161;
      uint64_t v183 = v159;
      double v184 = *(double *)&v172;
      double v185 = *(double *)&v157;
      double v186 = *(double *)&v170;
      double v187 = *(double *)&v156;
      *(void *)v188 = v155;
      *(void *)&v188[8] = v154;
      *(void *)&v188[16] = v87;
      uint64_t v189 = v88;
      uint64_t v190 = v89;
      uint64_t v191 = v90;
      uint64_t v192 = v91;
      double v193 = v92;
      double v194 = v167;
      double v195 = v93;
      double v196 = v94;
      v197[0] = v86;
      *(void *)&v197[4] = v151;
      *(void *)&v197[12] = v150;
      v197[20] = v79;
      uint64_t v198 = v147;
      uint64_t v199 = v153;
      uint64_t v200 = v152;
      LOBYTE(v201) = 0;
      _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi0_((uint64_t)&v179);
      _OWORD v97[2] = v96 + 1;
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v179, (uint64_t)&v97[27 * v96 + 4]);
      char v79 = v139;
      uint64_t v63 = v97;
      unint64_t v65 = v149;
      outlined consume of Text.Effect.TransformContext.DrawingMode(v149, v165, v163, v161, v159, v172, v157, v170, v156, v155, v154);
      long long v80 = v138;
LABEL_29:
      v82 += 3;
      --v78;
      double v35 = v143;
      if (!v78)
      {
        uint64_t result = swift_bridgeObjectRelease();
        v107[33] = (uint64_t)v63;
        return result;
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static TextEffect.staticUnitProgress.getter in conformance BounceTextEffect()
{
  return 0x3FC999999999999ALL;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance BounceTextEffect()
{
  return 0x65636E756F62;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance BounceTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  specialized BounceTextEffect.timing(for:from:to:duration:)(a1, a2, a3 & 1, v7);
  long long v5 = v7[1];
  *a4 = v7[0];
  a4[1] = v5;
  double result = *(double *)&v8;
  a4[2] = v8;
  return result;
}

unint64_t instantiation function for generic protocol witness table for BounceTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect();
  unint64_t result = lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

double specialized BounceTextEffect.timing(for:from:to:duration:)@<D0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = &v33[-v9];
  double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
  }
  _OWORD v11[2] = v13 + 1;
  double v14 = &v11[3 * v13];
  void v14[4] = 0x3FC999999999999ALL;
  v14[5] = 0xE2A1C2BFC23F2E21;
  v14[6] = 0xAA0000000000BD80;
  swift_bridgeObjectRetain();
  double v15 = v11;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
  }
  unint64_t v17 = v15[2];
  unint64_t v16 = v15[3];
  if (v17 >= v16 >> 1) {
    double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
  }
  _OWORD v15[2] = v17 + 1;
  double v18 = &v15[3 * v17];
  uint64_t v19 = 0x3FB999999999999ALL;
  v18[4] = 0x3FB999999999999ALL;
  v18[5] = 32;
  v18[6] = 0xE100000000000000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v20 = specialized Collection.count.getter();
  if (v20 <= 2)
  {
    uint64_t v27 = specialized Sequence.reduce<A>(_:_:)(0, a1);
    uint64_t v19 = 0;
    uint64_t v28 = 80;
    if (v27 > 80) {
      uint64_t v28 = v27;
    }
    double v24 = (double)v28 / 80.0;
    long long v23 = xmmword_246215750;
    uint64_t v26 = 0x3FE0000000000000;
    char v22 = 2;
    char v21 = 1;
    uint64_t v25 = 0x3FF8000000000000;
  }
  else
  {
    char v21 = 0;
    char v22 = 0;
    long long v23 = xmmword_246215800;
    double v24 = 3.0;
    uint64_t v25 = 0x3FF4000000000000;
    uint64_t v26 = 0x3FF0000000000000;
  }
  unsigned char v33[32] = 1;
  v33[24] = 0;
  v33[16] = 0;
  v36[0] = v26;
  *(double *)&v36[1] = v24;
  char v37 = 1;
  uint64_t v38 = v19;
  uint64_t v39 = 0;
  char v40 = v22;
  long long v41 = v23;
  uint64_t v42 = 0;
  char v43 = v21;
  uint64_t v44 = 0x3FF0000000000000;
  uint64_t v45 = v25;
  char v46 = 0;
  double v47 = v15;
  BOOL v48 = v20 > 2;
  long long v49 = xmmword_2461BD450;
  char v50 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v29 = static BounceTextEffect.spring;
  double v30 = *(double *)&qword_268F736F0;
  outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)v36, a2, a3 & 1, (uint64_t)v10, (double *)v34, *(double *)&v29, *((double *)&v29 + 1), v30);
  swift_bridgeObjectRelease();
  long long v31 = v34[1];
  *a4 = v34[0];
  a4[1] = v31;
  double result = *(double *)&v35;
  a4[2] = v35;
  return result;
}

uint64_t specialized BounceTextEffect.configuration(_:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = partial apply for closure #1 in BounceTextEffect.configuration(_:);
  *(void *)(v0 + 24) = 0;
  uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  v1[2] = v3 + 1;
  uint64_t v4 = &v1[2 * v3];
  v4[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v4[5] = v0;
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24611B354()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24611B38C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in BounceTextEffect.configuration(_:)(unint64_t a1, uint64_t *a2)
{
  return closure #1 in closure #1 in BounceTextEffect.configuration(_:)(a1, a2, v2 + 16, *(double *)(v2 + 64));
}

uint64_t sub_24611B3E8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<BounceTextEffect>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>)
  {
    _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<BounceTextEffect> and conformance Text.Effect.DrawableContent<A>();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawableContent<BounceTextEffect> and conformance Text.Effect.DrawableContent<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BounceTextEffect> and conformance Text.Effect.DrawableContent<A>;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BounceTextEffect> and conformance Text.Effect.DrawableContent<A>)
  {
    _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BounceTextEffect> and conformance Text.Effect.DrawableContent<A>);
  }
  return result;
}

uint64_t outlined destroy of Text.Effect.DrawableContent<BounceTextEffect>(uint64_t a1)
{
  _s7SwiftUI4TextVAAE6EffectO16AttributeTrackerC8ValueBox33_68A402DC05814329FD1D0C61D525BA6DLLCy___AE012DrawingStateE0OGMaTm_1(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Effect.DrawableContent);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>(uint64_t a1)
{
  type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void DynamicLayoutMap.init()(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t DynamicLayoutMap.sortedArray.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DynamicLayoutMap.sortedArray.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*DynamicLayoutMap.sortedArray.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicLayoutMap.sortedSeed.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t DynamicLayoutMap.sortedSeed.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*DynamicLayoutMap.sortedSeed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicLayoutMap.init(map:sortedArray:sortedSeed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = a3;
  return result;
}

unsigned int *DynamicLayoutMap.subscript.getter@<X0>(unsigned int *result@<X0>, float32x2_t *a2@<X8>)
{
  unint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    unsigned int v6 = *result;
    signed int v5 = result[1];
    uint64_t v7 = *(void *)v2 + 32;
    unint64_t v8 = *(void *)(*(void *)v2 + 16);
    while (1)
    {
      uint64_t v9 = v8 >> 1;
      unint64_t v10 = v4 + (v8 >> 1);
      if (__OFADD__(v4, v8 >> 1)) {
        break;
      }
      if (v10 >= v3) {
        goto LABEL_20;
      }
      uint64_t v11 = (unsigned int *)(v7 + 16 * v10);
      uint64_t result = (unsigned int *)*v11;
      if (result < v6 || ((signed int v12 = v11[1], result == v6) ? (v13 = v12 < v5) : (v13 = 0), v13))
      {
        unint64_t v4 = v10 + 1;
        uint64_t v9 = v8 + ~v9;
      }
      unint64_t v8 = v9;
      if (v9 <= 0)
      {
        if (v4 == v3) {
          goto LABEL_14;
        }
        if (v4 < v3)
        {
          unint64_t v16 = (_DWORD *)(v7 + 16 * v4);
          if (*v16 == v6 && v16[1] == v5)
          {
            *a2 = *(float32x2_t *)(v7 + 16 * v4 + 8);
            return result;
          }
          goto LABEL_14;
        }
LABEL_21:
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_14:
  double v14 = (const float *)MEMORY[0x263F288F8];
  float32x2_t v15 = vld1_dup_f32(v14);
  *a2 = v15;
  return result;
}

double key path getter for DynamicLayoutMap.subscript(_:) : DynamicLayoutMap@<D0>(long long *a1@<X0>, uint64_t *a2@<X1>, float32x2_t *a3@<X8>)
{
  int v4 = *((_DWORD *)a1 + 4);
  long long v7 = *a1;
  int v8 = v4;
  uint64_t v6 = *a2;
  DynamicLayoutMap.subscript.getter((unsigned int *)&v6, (float32x2_t *)&v9);
  double result = v9;
  *(double *)a3 = v9;
  return result;
}

uint64_t (*DynamicLayoutMap.subscript.modify(float32x2_t *a1, unsigned int *a2))(_DWORD *a1)
{
  *a1 = v2;
  unsigned int v3 = *a2;
  unsigned int v4 = a2[1];
  a1[2].i32[0] = *a2;
  a1[2].i32[1] = v4;
  int v5 = *(_DWORD *)(*(void *)&v2 + 16);
  long long v8 = *(_OWORD *)*(void *)&v2;
  int v9 = v5;
  v7[0] = v3;
  v7[1] = v4;
  DynamicLayoutMap.subscript.getter(v7, a1 + 1);
  return DynamicLayoutMap.subscript.modify;
}

uint64_t DynamicLayoutMap.subscript.modify(_DWORD *a1)
{
  unsigned int v2 = a1[4];
  unsigned int v1 = a1[5];
  int v3 = a1[3];
  v5[0] = a1[2];
  v5[1] = v3;
  v6[0] = v2;
  v6[1] = v1;
  return DynamicLayoutMap.subscript.setter((uint64_t)v5, v6);
}

uint64_t sub_24611BA60(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  return DynamicLayoutMap.subscript.setter((uint64_t)&v6, (unsigned int *)&v5);
}

uint64_t sub_24611BAA0()
{
  return 0;
}

ValueMetadata *type metadata accessor for DynamicLayoutMap()
{
  return &type metadata for DynamicLayoutMap;
}

ValueMetadata *type metadata accessor for ScaleRippleTextEffect()
{
  return &type metadata for ScaleRippleTextEffect;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in ScaleRippleTextEffect()
{
  return &protocol witness table for ScaleRippleTextEffect.Timing;
}

uint64_t closure #1 in ScaleRippleTextEffect.configuration(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v25, a2, a3, 1);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = swift_allocObject();
  long long v9 = v25[3];
  *(_OWORD *)(v8 + 48) = v25[2];
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v25[4];
  uint64_t v10 = v26;
  long long v11 = v25[1];
  *(_OWORD *)(v8 + 16) = v25[0];
  *(_OWORD *)(v8 + 32) = v11;
  *(void *)(v8 + 96) = v10;
  *(void *)(v8 + 104) = partial apply for closure #1 in closure #1 in ScaleRippleTextEffect.configuration(_:);
  *(void *)(v8 + 112) = v7;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
  *(void *)(v12 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v13 = v12 + 32;
  *(void *)(v12 + 40) = v8;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v12;
  int64_t v15 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 1, MEMORY[0x263F8EE78]);
  unint64_t v17 = v16;
  if (!*(void *)(v12 + 16))
  {
    if (!v15) {
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v18 = v16[2];
  if ((v16[3] >> 1) - v18 < v15)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v19 = (unint64_t)&v16[2 * v18 + 4];
  if (v13 < v19 + 16 * v15 && v19 < v13 + 16 * v15) {
    goto LABEL_16;
  }
  swift_arrayInitWithCopy();
  if (!v15)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v25);
    return (uint64_t)v17;
  }
  uint64_t v21 = v17[2];
  BOOL v22 = __OFADD__(v21, v15);
  uint64_t v23 = v21 + v15;
  if (!v22)
  {
    long long v17[2] = v23;
    goto LABEL_12;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in ScaleRippleTextEffect.configuration(_:)(unint64_t result, double *a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v3 = result;
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = a3 + 16 * result;
  double v5 = *(double *)(v4 + 32);
  double v6 = *(double *)(v4 + 40);
  double v7 = a2[5] - a2[4];
  double v8 = 0.0;
  if (v7 < 0.0)
  {
    if (v5 >= 0.0) {
      goto LABEL_10;
    }
    double v8 = 1.0;
    double v7 = 0.0;
    if (v5 + v6 <= 0.0) {
      goto LABEL_10;
    }
LABEL_9:
    double v8 = (v7 - v5) / v6;
    goto LABEL_10;
  }
  if (v7 > v5)
  {
    double v8 = 1.0;
    if (v5 + v6 > v7) {
      goto LABEL_9;
    }
  }
LABEL_10:
  double v9 = *a2;
  if (__OFSUB__(*(void *)a2, result))
  {
LABEL_20:
    __break(1u);
    return result;
  }
  double v10 = a2[29];
  double v11 = a2[28];
  double v12 = a2[26];
  if (*(void *)&v9 == result)
  {
    double v13 = a2[27];
  }
  else
  {
    double v12 = 0.0;
    double v13 = 0.0;
  }
  if (*(void *)&v9 == result)
  {
    double v14 = a2[30];
  }
  else
  {
    double v11 = 0.0;
    double v10 = 0.0;
    double v14 = 0.0;
  }
  double v15 = v13 - v10;
  double v16 = v14 + v10;
  CGFloat MidX = CGRectGetMidX(*(CGRect *)&v12);
  long double v18 = exp(v8 * -4.0) * 0.3;
  memset(v20, 0, sizeof(v20));
  CGFloat v21 = MidX;
  double v22 = v13;
  double v23 = sin(v8 * 13.6) * v18 + 1.0;
  double v24 = v23;
  uint64_t v25 = 0x3FF0000000000000;
  char v26 = 0;
  Text.Effect.TransformContext.record(position:for:)((uint64_t)v20, v3, (uint64_t)v19);
  return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v19, 0, 0, 0, 1);
}

uint64_t protocol witness for static TextEffect.name.getter in conformance ScaleRippleTextEffect()
{
  return 0x706952656C616373;
}

uint64_t protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance ScaleRippleTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, char a3@<W6>, void *a4@<X8>)
{
  int v7 = a3 & 1;
  uint64_t v8 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v10);
  uint64_t result = specialized ScaleRippleTextEffect.Timing.init(content:duration:)((uint64_t)v10, a2, v7);
  *a4 = v12;
  a4[1] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ScaleRippleTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect();
  unint64_t result = lazy protocol witness table accessor for type ScaleRippleTextEffect and conformance ScaleRippleTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21ScaleRippleTextEffectV6TimingV07ClusterJ0Vs5NeverOTg503_s7d4UI21fghi2V6j59V7content8durationAeA0E0VAAE0F0O11BaseContentV_SdSgtcfcAE07K11G0VSiXEfU0_SayAG0H0VAGE0I0O0K5IndexVGSbSiS2dTf1cn_nTf4ngnnnn_n(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7)
{
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_28;
  }
  uint64_t v8 = result;
  unint64_t result = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
    if (a2 < v8 || v7 < 0) {
      goto LABEL_29;
    }
    uint64_t v13 = 0;
    unint64_t result = v28;
    uint64_t v14 = *(void *)(a3 + 16);
    uint64_t v15 = a5;
    char v16 = a4;
    while (v13 != v7)
    {
      if (!v14 || *(void *)(a3 + 32) == v8 || v14 == 1)
      {
LABEL_14:
        uint64_t v18 = 0;
        uint64_t v20 = 0;
        if ((v16 & 1) == 0)
        {
LABEL_15:
          BOOL v21 = __OFSUB__(v15, v20);
          uint64_t v22 = v15 - v20;
          if (v21) {
            goto LABEL_26;
          }
          uint64_t v18 = v22 - 1;
          if (__OFSUB__(v22, 1)) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        uint64_t v17 = 5;
        while (1)
        {
          uint64_t v18 = v17 - 4;
          if (*(void *)(a3 + 8 * v17) == v8) {
            break;
          }
          uint64_t v19 = v17 - 3;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          ++v17;
          if (v19 == v14) {
            goto LABEL_14;
          }
        }
        uint64_t v20 = v17 - 4;
        if ((v16 & 1) == 0) {
          goto LABEL_15;
        }
      }
      uint64_t v29 = result;
      unint64_t v24 = *(void *)(result + 16);
      unint64_t v23 = *(void *)(result + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        char v16 = a4;
        uint64_t v15 = a5;
        unint64_t result = v29;
      }
      ++v13;
      *(void *)(result + 16) = v24 + 1;
      uint64_t v25 = result + 16 * v24;
      *(double *)(v25 + 32) = (double)v18 * a6;
      *(double *)(v25 + 40) = a7;
      ++v8;
      if (v13 == v7) {
        return result;
      }
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  return result;
}

uint64_t specialized ScaleRippleTextEffect.Timing.init(content:duration:)(uint64_t a1, uint64_t a2, int a3)
{
  int v46 = a3;
  double v45 = *(double *)&a2;
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v4 - 8);
  double v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  double v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (uint64_t *)((char *)&v45 - v12);
  uint64_t v48 = MEMORY[0x263F8EE78];
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v6);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v6, (uint64_t)v10);
  uint64_t v14 = *v6;
  Swift::UInt64 v15 = v6[1];
  uint64_t v16 = v6[2];
  swift_beginAccess();
  if (*(void *)(*(void *)(v14 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v15, v16), (v17 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of Text.Effect.BaseContent((uint64_t)v6, type metadata accessor for Text.Effect.BaseContent);
    *(void *)&v10[*(int *)(v8 + 36)] = 0;
    outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v10, (uint64_t)v13);
    uint64_t v18 = *(int *)(v8 + 36);
    uint64_t v19 = *v13;
    Swift::UInt64 v20 = v13[1];
    uint64_t v21 = v13[2];
    uint64_t v22 = *v13 + 48;
    unint64_t v23 = *(uint64_t *)((char *)v13 + v18);
    swift_beginAccess();
    uint64_t v24 = *(void *)(v19 + 48);
    if (*(void *)(v24 + 16))
    {
      do
      {
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v26 & 1) == 0) {
          break;
        }
        uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 16 * v25);
        swift_endAccess();
        uint64_t v28 = *(void *)(v27 + 16);
        if (__OFSUB__(v28, v23))
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          swift_endAccess();
          __break(1u);
LABEL_21:
          swift_endAccess();
          __break(1u);
          goto LABEL_22;
        }
        if (v28 == v23) {
          goto LABEL_14;
        }
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v19, v20, v21, v23, v49);
        swift_beginAccess();
        if (!*(void *)(*(void *)(v19 + 48) + 16)) {
          goto LABEL_20;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v29 & 1) == 0) {
          goto LABEL_20;
        }
        swift_endAccess();
        swift_beginAccess();
        uint64_t v30 = *(void *)v22;
        if (!*(void *)(*(void *)v22 + 16)) {
          goto LABEL_21;
        }
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
        if ((v32 & 1) == 0) {
          goto LABEL_21;
        }
        uint64_t v33 = *(void *)(*(void *)(v30 + 56) + 16 * v31);
        swift_endAccess();
        if (v23 >= *(void *)(v33 + 16)) {
          goto LABEL_19;
        }
        *(uint64_t *)((char *)v13 + v18) = v23 + 1;
        uint64_t v35 = *(void *)(v50 + 104);
        uint64_t v34 = *(void *)(v50 + 112);
        swift_bridgeObjectRetain();
        outlined release of Text.Effect.BaseFragment((uint64_t)v49);
        specialized Array.append<A>(contentsOf:)(v35, v34, v51);
        unint64_t v23 = *(uint64_t *)((char *)v13 + v18);
        swift_beginAccess();
        uint64_t v24 = *(void *)v22;
      }
      while (*(void *)(*(void *)v22 + 16));
    }
    swift_endAccess();
    __break(1u);
LABEL_14:
    outlined destroy of Text.Effect.BaseContent((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
    uint64_t v36 = v48;
    uint64_t v37 = *(void *)(v48 + 16);
    double v38 = (double)(v37 - 1) * 0.05 + 1.16666667;
    if (v46) {
      double v39 = (double)(v37 - 1) * 0.05 + 1.16666667;
    }
    else {
      double v39 = v45;
    }
    double v40 = v39 * 0.05 / v38;
    double v41 = v39 * 1.16666667 / v38;
    Text.Effect.BaseContent.layoutDirection.getter(v47);
    char v42 = v47[0];
    swift_bridgeObjectRetain();
    uint64_t v43 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21ScaleRippleTextEffectV6TimingV07ClusterJ0Vs5NeverOTg503_s7d4UI21fghi2V6j59V7content8durationAeA0E0VAAE0F0O11BaseContentV_SdSgtcfcAE07K11G0VSiXEfU0_SayAG0H0VAGE0I0O0K5IndexVGSbSiS2dTf1cn_nTf4ngnnnn_n(0, v37, v36, (v42 & 1) == 0, v37, v40, v41);
    swift_bridgeObjectRelease();
    outlined destroy of Text.Effect.BaseContent(a1, type metadata accessor for Text.Effect.BaseContent);
    swift_bridgeObjectRelease();
    return v43;
  }
  else
  {
LABEL_22:
    uint64_t result = swift_endAccess();
    __break(1u);
  }
  return result;
}

uint64_t specialized ScaleRippleTextEffect.configuration(_:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = partial apply for closure #1 in ScaleRippleTextEffect.configuration(_:);
  *(void *)(v0 + 24) = 0;
  unsigned int v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    unsigned int v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  v1[2] = v3 + 1;
  uint64_t v4 = &v1[2 * v3];
  v4[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v4[5] = v0;
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24611C6E8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  double v6 = *(uint64_t (**)(void *, _OWORD *, _OWORD *))(v4 + 16);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  long long v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  _OWORD v13[2] = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a3 + 16);
  v15[0] = *(_OWORD *)a3;
  v15[1] = v10;
  uint64_t v16 = *(void *)(a3 + 32);
  v12[0] = v7;
  v12[1] = v8;
  uint64_t result = v6(v12, v13, v15);
  *a4 = result;
  return result;
}

uint64_t sub_24611C79C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in ScaleRippleTextEffect.configuration(_:)(unint64_t a1, double *a2)
{
  return closure #1 in closure #1 in ScaleRippleTextEffect.configuration(_:)(a1, a2, *(void *)(v2 + 24));
}

uint64_t sub_24611C7E0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ScaleRippleTextEffect.Timing.ClusterTiming()
{
  return &type metadata for ScaleRippleTextEffect.Timing.ClusterTiming;
}

void *assignWithCopy for ScaleRippleTextEffect.Timing(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ScaleRippleTextEffect.Timing()
{
  return &type metadata for ScaleRippleTextEffect.Timing;
}

uint64_t Text.Layout.Cluster.stopKey.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 2;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = (CFIndex *)(a3 + 40); ; i += 8)
  {
    double v6 = (void *)*(i - 1);
    CFIndex v7 = *i;
    swift_retain_n();
    uint64_t v8 = v6;
    long long v9 = (id)_CTLineGetRunAtIndex(v8, v7);
    long long v10 = (const __CTFont *)(id)CTRunGetFont();
    swift_release();

    uint64_t v11 = (__CFString *)CTFontCopyPostScriptName(v10);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v12._countAndFlagsBits = 0x696261724146532ELL;
    v12._object = (void *)0xE900000000000063;
    if (String.hasPrefix(_:)(v12))
    {
      swift_bridgeObjectRelease();
      swift_release_n();

      swift_bridgeObjectRelease();
      return 0;
    }
    v13._countAndFlagsBits = 0xD000000000000012;
    v13._object = (void *)0x800000024621EE40;
    Swift::Bool v14 = String.hasPrefix(_:)(v13);
    swift_release_n();

    swift_bridgeObjectRelease();
    if (v14) {
      break;
    }
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

double Text.Effect.PathInterpolator.Glyph.bounds(for:)(unint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  CGFloat v3 = *(double *)(v1 + 32);
  CGFloat v4 = *(double *)(v1 + 40);
  CFIndex v6 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 72);
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 96);
  uint64_t v11 = *(void *)(v1 + 104);
  switch(*(unsigned char *)(v1 + 112))
  {
    case 1:
      if (!*(void *)(v5 + 16)) {
        goto LABEL_18;
      }
      CGFloat v24 = *(double *)(v1 + 32);
      long long v25 = *(_OWORD *)(v5 + 48);
      v61[0] = *(_OWORD *)(v5 + 32);
      v61[1] = v25;
      char v62 = *(unsigned char *)(v5 + 64);
      outlined init with take of Path.Storage((uint64_t)v61, (uint64_t)v63);
      outlined release of Path?((uint64_t)v63, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      uint64_t v27 = v26;
      uint64_t v29 = v28;
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      outlined release of Path?((uint64_t)v61, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      v60.CGFloat a = 1.0;
      v60.CGFloat b = 0.0;
      v60.double c = 0.0;
      v60.double d = -1.0;
      v60.CGFloat tx = v24;
      v60.CGFloat ty = v4;
      uint64_t v34 = v27;
      uint64_t v35 = v29;
      uint64_t v36 = v31;
      uint64_t v37 = v33;
      goto LABEL_14;
    case 2:
      uint64_t v34 = *(void *)(v1 + 72);
      uint64_t v35 = *(void *)(v1 + 80);
      v60.CGFloat a = 1.0;
      v60.CGFloat b = 0.0;
      uint64_t v36 = v8;
      uint64_t v37 = v10;
      v60.double c = 0.0;
      v60.double d = -1.0;
      v60.CGFloat tx = v3;
      v60.CGFloat ty = v4;
      goto LABEL_14;
    case 3:
      if ((a1 & 0x8000000000000000) != 0) {
        goto LABEL_19;
      }
      if (v2[2] <= a1) {
        goto LABEL_20;
      }
      double v38 = (double *)&v2[8 * a1 + 4];
      uint64_t v39 = *((void *)v38 + 7);
      if (!*(void *)(v39 + 16)) {
        goto LABEL_21;
      }
      CGFloat v41 = v38[4];
      CGFloat v40 = v38[5];
      long long v42 = *(_OWORD *)(v39 + 32);
      long long v43 = *(_OWORD *)(v39 + 48);
      char v64 = *(unsigned char *)(v39 + 64);
      v63[0] = v42;
      v63[1] = v43;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Path?((uint64_t)v63, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      Path.boundingRect.getter();
      CGFloat v45 = v44;
      CGFloat v47 = v46;
      CGFloat v49 = v48;
      CGFloat v51 = v50;
      outlined release of Path?((uint64_t)v63, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      v60.CGFloat a = 1.0;
      v60.CGFloat b = 0.0;
      v60.double c = 0.0;
      v60.double d = -1.0;
      v60.CGFloat tx = v41;
      v60.CGFloat ty = v40;
      v70.origin.CGFloat x = v45;
      v70.origin.CGFloat y = v47;
      v70.size.CGFloat width = v49;
      v70.size.CGFloat height = v51;
      unint64_t v23 = (unint64_t)CGRectApplyAffineTransform(v70, &v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 4:
      if ((a1 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      if (v2[2] <= a1) {
        goto LABEL_23;
      }
      uint64_t v52 = &v2[14 * a1];
      uint64_t v34 = v52[13];
      uint64_t v35 = v52[14];
      uint64_t v36 = v52[15];
      uint64_t v37 = v52[16];
      long long v53 = *((_OWORD *)v52 + 4);
      v60.CGFloat a = 1.0;
      v60.CGFloat b = 0.0;
      v60.double c = 0.0;
      v60.double d = -1.0;
      *(_OWORD *)&v60.CGFloat tx = v53;
LABEL_14:
      unint64_t v23 = (unint64_t)CGRectApplyAffineTransform(*(CGRect *)&v34, &v60);
      return *(double *)&v23;
    case 5:
      unint64_t v23 = *(unint64_t *)(v1 + 32);
      return *(double *)&v23;
    default:
      uint64_t v58 = *(void *)(v1 + 32);
      uint64_t v59 = *(void *)(v1 + 64);
      CGFloat v55 = *(double *)(v1 + 16);
      CGFloat v56 = *(double *)(v1 + 24);
      CFIndex v12 = *(void *)(v1 + 8);
      swift_retain_n();
      Swift::String v13 = (id)_CTLineGetRunAtIndex((const __CTLine *)v2, v12);
      uint64_t v57 = *(void *)&v4;
      if (__OFSUB__(v5, v6))
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        JUMPOUT(0x24611CEB8);
      }
      Swift::Bool v14 = v13;
      v65.location = v6;
      v65.length = v5 - v6;
      CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v13, 0, v65);
      CGFloat x = ImageBounds.origin.x;
      CGFloat y = ImageBounds.origin.y;
      CGFloat width = ImageBounds.size.width;
      CGFloat height = ImageBounds.size.height;

      v60.CGFloat a = 1.0;
      v60.CGFloat b = 0.0;
      v60.double c = 0.0;
      v60.double d = -1.0;
      v60.CGFloat tx = v55;
      v60.CGFloat ty = v56;
      v67.origin.CGFloat x = x;
      v67.origin.CGFloat y = y;
      v67.size.CGFloat width = width;
      v67.size.CGFloat height = height;
      CGRect v68 = CGRectApplyAffineTransform(v67, &v60);
      CGFloat v19 = v68.origin.x;
      CGFloat v20 = v68.origin.y;
      CGFloat v21 = v68.size.width;
      CGFloat v22 = v68.size.height;
      outlined consume of Text.Effect.PathInterpolator.Glyph(v2, v12, *(uint64_t *)&v55, *(uint64_t *)&v56, v58, v57, v6, v5, v59, v7, v9, v8, v10, v11, 0);
      v69.origin.CGFloat x = v19;
      v69.origin.CGFloat y = v20;
      v69.size.CGFloat width = v21;
      v69.size.CGFloat height = v22;
      unint64_t v23 = (unint64_t)CGRectInset(v69, -1.0, -1.0);
      outlined consume of Text.Effect.PathInterpolator.Glyph(v2, v12, *(uint64_t *)&v55, *(uint64_t *)&v56, v58, v57, v6, v5, v59, v7, v9, v8, v10, v11, 0);
      outlined consume of Text.Effect.PathInterpolator.Glyph(v2, v12, *(uint64_t *)&v55, *(uint64_t *)&v56, v58, v57, v6, v5, v59, v7, v9, v8, v10, v11, 0);
      break;
  }
  return *(double *)&v23;
}

void closure #1 in Text.Effect.PathInterpolator.SmoothPathGlyph.path(cluster:state:mapKeys:stopSegment:)(uint64_t a1, uint64_t a2, long double a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, double *a8)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  specialized Text.Effect.StopSegment.cubicWeightsAndStates(at:)(a2, a5, (uint64_t)&v40, a3);
  long long v12 = v40;
  long long v13 = v41;
  long long v40 = v42;
  long long v41 = v43;
  long long v42 = v44;
  long long v43 = v45;
  *(void *)&long long v44 = v46;
  BYTE8(v44) = BYTE8(v46);
  long long v45 = v47;
  long long v46 = v48;
  long long v47 = v49;
  long long v48 = v50;
  *(void *)&long long v49 = v51;
  BYTE8(v49) = BYTE8(v51);
  long long v50 = v52;
  long long v51 = v53;
  long long v52 = v54;
  long long v53 = v55;
  *(void *)&long long v54 = v56;
  BYTE8(v54) = BYTE8(v56);
  long long v55 = v57;
  long long v56 = v58;
  long long v57 = v59;
  long long v58 = v60;
  *(void *)&long long v59 = v61;
  BYTE8(v59) = v62;
  Text.Effect.CubicStates.applying(weights:)((uint64_t)v35, *(double *)&v12, *((double *)&v12 + 1), *(double *)&v13, *((double *)&v13 + 1));
  unint64_t v14 = Text.Effect.PathInterpolator.MapKeys.index(for:)(a6, v35[0]);
  uint64_t v16 = a1 * a7;
  if ((unsigned __int128)(a1 * (__int128)a7) >> 64 != (a1 * a7) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  BOOL v17 = __OFADD__(v16, v14);
  unint64_t v18 = v16 + v14;
  if (v17)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = *((void *)a8 + 8);
  if (a7 != 1)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      unint64_t v21 = *(void *)(v19 + 16);
      if (v18 < v21)
      {
        if (v18 + 1 < v21)
        {
          float64x2_t v20 = vaddq_f64(*(float64x2_t *)(v19 + 32 + 16 * v18), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v19 + 32 + 16 * (v18 + 1)), *(float64x2_t *)(v19 + 32 + 16 * v18)), v15));
          goto LABEL_11;
        }
LABEL_18:
        __break(1u);
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v18 >= *(void *)(v19 + 16))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  float64x2_t v20 = *(float64x2_t *)(v19 + 16 * v18 + 32);
LABEL_11:
  CGPoint v31 = (CGPoint)v20;
  CGFloat v22 = a8[4];
  CGFloat v23 = a8[5];
  double v24 = v36;
  double v25 = v37;
  CGAffineTransformMakeTranslation(&t1, v36, v37);
  CGAffineTransformScale(&t2, &t1, v38, v39);
  long long v29 = *(_OWORD *)&t2.c;
  long long v30 = *(_OWORD *)&t2.a;
  CGFloat tx = t2.tx;
  CGFloat ty = t2.ty;
  __double2 v28 = __sincos_stret(v35[3]);
  t1.CGFloat a = v28.__cosval;
  t1.CGFloat b = v28.__sinval;
  t1.double c = -v28.__sinval;
  t1.double d = v28.__cosval;
  t1.CGFloat tx = 0.0;
  t1.CGFloat ty = 0.0;
  *(_OWORD *)&t2.CGFloat a = v30;
  *(_OWORD *)&t2.double c = v29;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v32, &t1, &t2);
  CGAffineTransform t1 = v32;
  CGAffineTransformTranslate(&t2, &t1, -v24, -v25);
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, v35[1], v35[2]);
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.double c = 0.0;
  t1.double d = -1.0;
  t1.CGFloat tx = v22;
  t1.CGFloat ty = v23;
  CGAffineTransformConcat(&v32, &t1, &t2);
  CGAffineTransform t1 = v32;
  CGPointApplyAffineTransform(v31, &t1);
}

unint64_t Text.Effect.PathInterpolator.MapKeys.index(for:)(unint64_t result, double a2)
{
  if (result)
  {
    if (result == 1) {
      return 0;
    }
    if (result == 2)
    {
      if (a2 > -1.0) {
        return a2 >= 0.0;
      }
    }
    else
    {
      unint64_t v2 = *(void *)(result + 16);
      if (!v2) {
        return v2 - 1;
      }
      unint64_t v3 = 0;
      unint64_t v4 = *(void *)(result + 16);
      do
      {
        unint64_t v5 = v4 >> 1;
        unint64_t v6 = v3 + (v4 >> 1);
        if (__OFADD__(v3, v4 >> 1))
        {
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        if (v6 >= v2) {
          goto LABEL_24;
        }
        v4 += ~v5;
        if (*(double *)(result + 32 + 8 * v6) < a2) {
          unint64_t v3 = v6 + 1;
        }
        else {
          unint64_t v4 = v5;
        }
      }
      while ((uint64_t)v4 > 0);
      if (v3 == v2) {
        return v2 - 1;
      }
      if (v3)
      {
        uint64_t result = v3 - 1;
        if (!__OFSUB__(v3, 1))
        {
          if (result < v2)
          {
            if (v3 < v2) {
              return result;
            }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          return result;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    return 0;
  }
  return result;
}

unint64_t Text.Effect.PathInterpolator.PathGlyph.path(state:mapKeys:)@<X0>(double *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t result = Text.Effect.PathInterpolator.MapKeys.index(for:)(a2, *a1);
  double v9 = v8;
  if (a2 - 1 < 2 || a2 && *(void *)(a2 + 16) != 1)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = *(void *)(v4 + 56);
      unint64_t v11 = *(void *)(v10 + 16);
      if (result < v11)
      {
        uint64_t v12 = v10 + 32;
        uint64_t v13 = v10 + 32 + 40 * result;
        long long v14 = *(_OWORD *)v13;
        long long v15 = *(_OWORD *)(v13 + 16);
        char v62 = *(unsigned char *)(v13 + 32);
        v61[0] = v14;
        v61[1] = v15;
        unint64_t v16 = result + 1;
        if (result + 1 < v11)
        {
          BOOL v17 = (long long *)(v12 + 40 * v16);
          long long v18 = *v17;
          long long v19 = v17[1];
          char v60 = *((unsigned char *)v17 + 32);
          long long v58 = v18;
          long long v59 = v19;
          uint64_t v20 = *(void *)(v4 + 48);
          unint64_t v21 = *(void *)(v20 + 16);
          if (result < v21)
          {
            if (v16 < v21)
            {
              uint64_t v22 = v20 + 32;
              CGFloat v23 = (double *)(v22 + 16 * result);
              double v24 = *v23;
              double v25 = v23[1];
              uint64_t v26 = (double *)(v22 + 16 * v16);
              double v28 = *v26;
              double v27 = v26[1];
              outlined release of Path?((uint64_t)v61, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
              outlined release of Path?((uint64_t)&v58, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
              Path.mix(with:by:)((uint64_t)v45);
              long long v43 = v45[0];
              long long v44 = v45[1];
              unsigned __int8 v29 = v46;
              outlined init with take of Path?((uint64_t)v45, (uint64_t)&v51, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path);
              if (v53 == 255)
              {
                outlined release of Path?((uint64_t)&v58, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
                long long v42 = v61;
              }
              else
              {
                double v30 = v24 + v9 * (v28 - v24);
                double v31 = v25 + v9 * (v27 - v25);
                long long v54 = v51;
                long long v55 = v52;
                unsigned __int8 v56 = v53;
                Path.dilatedGlyphPath(with:)((uint64_t)v47, *(double *)(v4 + 16), *(double *)(v4 + 24));
                long long v43 = v47[0];
                long long v44 = v47[1];
                unsigned __int8 v29 = v48;
                outlined release of Path?((uint64_t)v45, (void (*)(void, void, void, void, void))outlined consume of Path?);
                if (v30 == 0.0 && v31 == 0.0)
                {
                  outlined init with take of Path.Storage((uint64_t)v47, (uint64_t)&v57);
                  outlined release of Path?((uint64_t)&v57, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
                }
                else
                {
                  CGAffineTransformMakeTranslation(&v57, v30, v31);
                  Path.applying(_:)(&v57.a, (uint64_t)v49);
                  long long v43 = v49[0];
                  long long v44 = v49[1];
                  unsigned __int8 v29 = v50;
                }
                outlined release of Path?((uint64_t)&v58, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
                outlined release of Path?((uint64_t)v61, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
                long long v42 = v47;
              }
              goto LABEL_22;
            }
            goto LABEL_28;
          }
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v32 = *(void *)(v4 + 48);
  if (result >= *(void *)(v32 + 16))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v33 = *(void *)(v4 + 56);
  if (result < *(void *)(v33 + 16))
  {
    uint64_t v34 = v32 + 16 * result;
    double v35 = *(double *)(v34 + 32);
    double v36 = *(double *)(v34 + 40);
    uint64_t v37 = v33 + 40 * result;
    long long v38 = *(_OWORD *)(v37 + 32);
    long long v39 = *(_OWORD *)(v37 + 48);
    char v60 = *(unsigned char *)(v37 + 64);
    long long v58 = v38;
    long long v59 = v39;
    double v40 = *(double *)(v4 + 16);
    double v41 = *(double *)(v4 + 24);
    outlined init with take of Path.Storage((uint64_t)&v58, (uint64_t)v61);
    outlined release of Path?((uint64_t)v61, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    Path.dilatedGlyphPath(with:)((uint64_t)&v51, v40, v41);
    long long v43 = v51;
    long long v44 = v52;
    unsigned __int8 v29 = v53;
    unint64_t result = outlined release of Path?((uint64_t)&v58, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    if (v35 == 0.0 && v36 == 0.0) {
      goto LABEL_23;
    }
    CGAffineTransformMakeTranslation(&v57, v35, v36);
    long long v42 = &v51;
    Path.applying(_:)(&v57.a, (uint64_t)&v54);
    long long v43 = v54;
    long long v44 = v55;
    unsigned __int8 v29 = v56;
LABEL_22:
    unint64_t result = outlined release of Path?((uint64_t)v42, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
LABEL_23:
    *(_OWORD *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v44;
    *(unsigned char *)(a3 + 32) = v29;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

void closure #1 in Text.Effect.PathInterpolator.Interpolated.init(position:slices:relativePositions:bounds:displayScale:)(uint64_t a1@<X0>, void *a2@<X8>, CGFloat x@<D0>)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  int v10 = *(_DWORD *)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F63868]), sel_init);
  objc_msgSend(v14, sel_setDeviceScale_, x);
  uint64_t v33 = v6;
  uint64_t v34 = v7;
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  int v37 = v10;
  id v38 = v11;
  uint64_t v39 = v12;
  uint64_t v41 = v13;
  uint64_t v40 = v13;
  long long v15 = Text.Layout.RunSlice.positions.getter();
  if (!*(void *)&v15[1].x)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v29 = v12;
  double v30 = a2;
  id v31 = v11;
  CGFloat x = v15[2].x;
  double y = v15[2].y;
  swift_bridgeObjectRelease();
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v16 = one-time initialization token for shared;
  id v11 = v14;
  if (v16 != -1) {
LABEL_11:
  }
    swift_once();
  swift_beginAccess();
  BOOL v17 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  long long v18 = static CoreGlue2.shared;
  v17(&v33);

  uint64_t v20 = v33;
  uint64_t v19 = v34;
  type metadata accessor for GraphicsContext.Storage();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 32) = xmmword_24619B520;
  *(void *)(v21 + 48) = 1065353216;
  *(void *)(v21 + 56) = 0x7FF8000000000000;
  v32[0] = v20;
  v32[1] = v19;
  type metadata accessor for GraphicsContext.Storage.Shared();
  swift_allocObject();
  id v22 = v11;
  *(void *)(v21 + 16) = GraphicsContext.Storage.Shared.init(list:environment:)(v22, v32);
  *(void *)(v21 + 24) = RBDisplayListGetState();
  *(unsigned char *)(v21 + 64) = 0;

  if (x == 0.0 && y == 0.0)
  {
    uint64_t v23 = v29;
    double v24 = v30;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v25 = RBDrawingStateInit();
      swift_allocObject();
      uint64_t v26 = swift_retain();
      uint64_t v27 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v26, v25, 1, 0);
      swift_release();
      uint64_t v21 = v27;
    }
    uint64_t v23 = v29;
    double v24 = v30;
    RBDrawingStateTranslateCTM();
  }
  uint64_t v33 = v6;
  uint64_t v34 = v7;
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  int v37 = v10;
  id v38 = v31;
  uint64_t v39 = v23;
  uint64_t v40 = v41;
  swift_retain();
  GraphicsContext.draw(_:foregroundColor:options:)((uint64_t)&v33, 0, 0, 1, 1, v21);
  swift_release();
  id v28 = objc_msgSend(v22, sel_moveContents);
  swift_release();

  void *v24 = v28;
}

uint64_t Text.Effect.PathInterpolator.Interpolated.resolve(state:mapKeys:in:)(double *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unint64_t v6 = Text.Effect.PathInterpolator.MapKeys.index(for:)(a2, *a1);
  unint64_t v7 = v6;
  double v9 = v8;
  double v10 = *v3;
  if ((*(void *)v3 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 < *(void *)((*(void *)&v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v11 = *(id *)(*(void *)&v10 + 8 * v6 + 32);
        goto LABEL_5;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  id v11 = (id)MEMORY[0x24C523D60](v6);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v12 = v11;
  uint64_t v13 = *((void *)v3 + 1);
  unint64_t v14 = *(void *)(v13 + 16);
  if (v7 >= v14)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }
  if (v7 + 1 >= v14) {
    goto LABEL_23;
  }
  uint64_t v15 = v13 + 32;
  uint64_t v16 = (double *)(v15 + 16 * v7);
  BOOL v17 = (double *)(v15 + 16 * (v7 + 1));
  double v18 = v3[2] + *v16 + v9 * (*v17 - *v16);
  double v73 = v3[3] - (v16[1] + v9 * (v17[1] - v16[1]));
  uint64_t v19 = *a3;
  double v20 = a1[4];
  double v21 = a1[5];
  CGAffineTransformMakeTranslation(&t1, v20, v21);
  CGAffineTransformScale(&t2, &t1, a1[6], a1[7]);
  long long v71 = *(_OWORD *)&t2.c;
  long long v72 = *(_OWORD *)&t2.a;
  CGFloat tx = t2.tx;
  CGFloat ty = t2.ty;
  double v24 = a1[3];
  swift_retain();
  __double2 v25 = __sincos_stret(v24);
  t1.CGFloat a = v25.__cosval;
  t1.CGFloat b = v25.__sinval;
  t1.CGFloat c = -v25.__sinval;
  t1.CGFloat d = v25.__cosval;
  t1.CGFloat tx = 0.0;
  t1.CGFloat ty = 0.0;
  *(_OWORD *)&t2.CGFloat a = v72;
  *(_OWORD *)&t2.CGFloat c = v71;
  t2.CGFloat tx = tx;
  t2.CGFloat ty = ty;
  CGAffineTransformConcat(&v74, &t1, &t2);
  CGAffineTransform t1 = v74;
  CGAffineTransformTranslate(&t2, &t1, -v20, -v21);
  CGFloat v26 = a1[1];
  CGFloat v27 = a1[2];
  CGAffineTransform t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, v26, v27);
  CGFloat a = t2.a;
  CGFloat b = t2.b;
  CGFloat c = t2.c;
  CGFloat d = t2.d;
  CGFloat v33 = t2.tx;
  CGFloat v32 = t2.ty;
  CGAffineTransform t1 = t2;
  if (!CGAffineTransformIsIdentity(&t1))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 24) = 0x3FF0000000000000;
      *(void *)(v34 + 32) = 0;
      *(void *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0x3FF0000000000000;
      *(void *)(v34 + 56) = 0;
      *(void *)(v34 + 64) = 0;
      *(void *)(v34 + 80) = 0;
      *(void *)(v34 + 88) = 0;
      *(void *)(v34 + 72) = 0x3FF0000000000000;
      *(unsigned char *)(v34 + 96) = 1;
      *(_OWORD *)(v34 + 104) = 0u;
      *(_OWORD *)(v34 + 120) = 0u;
      *(_OWORD *)(v34 + 136) = 0u;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(v34 + 152) = _Q1;
      *(void *)(v34 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v34 + 176) = 0;
      *(_OWORD *)(v34 + 184) = 0u;
      *(_OWORD *)(v34 + 200) = 0u;
      *(void *)(v34 + 216) = 0;
      *(void *)(v34 + 16) = *(void *)(v19 + 16);
      long long v40 = *(_OWORD *)(v19 + 40);
      long long v41 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)(v34 + 24) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v34 + 40) = v40;
      *(_OWORD *)(v34 + 56) = v41;
      *(void *)(v34 + 72) = *(void *)(v19 + 72);
      uint64_t v42 = *(void *)(v19 + 184);
      uint64_t v43 = *(void *)(v19 + 192);
      uint64_t v44 = *(void *)(v19 + 200);
      uint64_t v45 = *(void *)(v19 + 208);
      uint64_t v46 = *(void *)(v19 + 216);
      *(void *)(v34 + 184) = v42;
      *(void *)(v34 + 192) = v43;
      *(void *)(v34 + 200) = v44;
      *(void *)(v34 + 208) = v45;
      *(void *)(v34 + 216) = v46;
      swift_retain();
      swift_retain();
      outlined copy of Text.Effect.StopCollector?(v42, v43, v44, v45);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v47 = *(void *)(v19 + 80);
      uint64_t v48 = *(void *)(v19 + 88);
      LOBYTE(v43) = *(unsigned char *)(v19 + 96);
      swift_release();
      *(void *)(v34 + 80) = v47;
      *(void *)(v34 + 88) = v48;
      *(unsigned char *)(v34 + 96) = v43;
      swift_release();
      uint64_t v19 = v34;
    }
    t1.CGFloat a = a;
    t1.CGFloat b = b;
    t1.CGFloat c = c;
    t1.CGFloat d = d;
    t1.CGFloat tx = v33;
    t1.CGFloat ty = v32;
    if (!CGAffineTransformIsIdentity(&t1))
    {
      long long v49 = *(_OWORD *)(v19 + 24);
      long long v50 = *(_OWORD *)(v19 + 40);
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.CGFloat tx = v33;
      t1.CGFloat ty = v32;
      *(_OWORD *)&t2.CGFloat a = v49;
      *(_OWORD *)&t2.CGFloat c = v50;
      *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v19 + 56);
      CGAffineTransformConcat(&v74, &t1, &t2);
      long long v51 = *(_OWORD *)&v74.c;
      long long v52 = *(_OWORD *)&v74.tx;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)&v74.a;
      *(_OWORD *)(v19 + 40) = v51;
      *(_OWORD *)(v19 + 56) = v52;
    }
  }
  t1.CGFloat a = 1.0;
  t1.CGFloat b = 0.0;
  t1.CGFloat c = 0.0;
  t1.CGFloat d = 1.0;
  t1.CGFloat tx = v18;
  t1.CGFloat ty = v73;
  if (!CGAffineTransformIsIdentity(&t1))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 24) = 0x3FF0000000000000;
      *(void *)(v53 + 32) = 0;
      *(void *)(v53 + 40) = 0;
      *(void *)(v53 + 48) = 0x3FF0000000000000;
      *(void *)(v53 + 56) = 0;
      *(void *)(v53 + 64) = 0;
      *(void *)(v53 + 80) = 0;
      *(void *)(v53 + 88) = 0;
      *(void *)(v53 + 72) = 0x3FF0000000000000;
      *(unsigned char *)(v53 + 96) = 1;
      *(_OWORD *)(v53 + 104) = 0u;
      *(_OWORD *)(v53 + 120) = 0u;
      *(_OWORD *)(v53 + 136) = 0u;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(v53 + 152) = _Q1;
      *(void *)(v53 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v53 + 176) = 0;
      *(_OWORD *)(v53 + 184) = 0u;
      *(_OWORD *)(v53 + 200) = 0u;
      *(void *)(v53 + 216) = 0;
      *(void *)(v53 + 16) = *(void *)(v19 + 16);
      long long v55 = *(_OWORD *)(v19 + 40);
      long long v56 = *(_OWORD *)(v19 + 56);
      *(_OWORD *)(v53 + 24) = *(_OWORD *)(v19 + 24);
      *(_OWORD *)(v53 + 40) = v55;
      *(_OWORD *)(v53 + 56) = v56;
      *(void *)(v53 + 72) = *(void *)(v19 + 72);
      uint64_t v57 = *(void *)(v19 + 184);
      uint64_t v58 = *(void *)(v19 + 192);
      uint64_t v59 = *(void *)(v19 + 200);
      uint64_t v60 = *(void *)(v19 + 208);
      uint64_t v61 = *(void *)(v19 + 216);
      *(void *)(v53 + 184) = v57;
      *(void *)(v53 + 192) = v58;
      *(void *)(v53 + 200) = v59;
      *(void *)(v53 + 208) = v60;
      *(void *)(v53 + 216) = v61;
      swift_retain();
      swift_retain();
      outlined copy of Text.Effect.StopCollector?(v57, v58, v59, v60);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v62 = *(void *)(v19 + 80);
      uint64_t v63 = *(void *)(v19 + 88);
      LOBYTE(v58) = *(unsigned char *)(v19 + 96);
      swift_release();
      *(void *)(v53 + 80) = v62;
      *(void *)(v53 + 88) = v63;
      *(unsigned char *)(v53 + 96) = v58;
      swift_release();
      uint64_t v19 = v53;
    }
    t1.CGFloat a = 1.0;
    t1.CGFloat b = 0.0;
    t1.CGFloat c = 0.0;
    t1.CGFloat d = 1.0;
    t1.CGFloat tx = v18;
    t1.CGFloat ty = v73;
    if (!CGAffineTransformIsIdentity(&t1))
    {
      long long v64 = *(_OWORD *)(v19 + 24);
      long long v65 = *(_OWORD *)(v19 + 40);
      t1.CGFloat a = 1.0;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = 1.0;
      t1.CGFloat tx = v18;
      t1.CGFloat ty = v73;
      *(_OWORD *)&t2.CGFloat a = v64;
      *(_OWORD *)&t2.CGFloat c = v65;
      *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v19 + 56);
      CGAffineTransformConcat(&v74, &t1, &t2);
      long long v66 = *(_OWORD *)&v74.c;
      long long v67 = *(_OWORD *)&v74.tx;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)&v74.a;
      *(_OWORD *)(v19 + 40) = v66;
      *(_OWORD *)(v19 + 56) = v67;
    }
  }
  *(float *)&unsigned int v68 = v9;
  *(void *)&t1.CGFloat a = v12;
  *(void *)&t1.CGFloat b = v68;
  memset(&t1.c, 0, 32);
  long long v77 = 0u;
  long long v78 = 0u;
  char v79 = 96;
  id v69 = v12;
  Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&t1);

  return swift_release();
}

uint64_t Text.Effect.PathInterpolator.Glyph.resolve(cluster:state:mapKeys:in:)(uint64_t a1, double *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v250 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void **)v4;
  CFIndex v231 = *(void *)(v4 + 8);
  long long v229 = *(_OWORD *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 40);
  uint64_t v218 = *(void *)(v4 + 32);
  uint64_t v10 = *(void *)(v4 + 48);
  uint64_t v9 = *(void *)(v4 + 56);
  uint64_t v215 = *(void *)(v4 + 72);
  uint64_t v216 = *(void *)(v4 + 64);
  uint64_t v213 = *(void *)(v4 + 88);
  uint64_t v214 = *(void *)(v4 + 80);
  uint64_t v211 = *(void *)(v4 + 104);
  uint64_t v212 = *(void *)(v4 + 96);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 112);
  uint64_t v13 = *(void *)(a4 + 24);
  char v14 = *(unsigned char *)(a4 + 32);
  uint64_t v15 = *(void *)(a4 + 40);
  char v235 = *(unsigned int **)a4;
  uint64_t v12 = v235;
  long long v236 = *(_OWORD *)(a4 + 8);
  uint64_t v237 = v13;
  char v238 = v14;
  uint64_t v239 = v15;
  double v16 = *((double *)v235 + 9);
  double v17 = a2[8] * v16;
  swift_retain();
  uint64_t v217 = v9;
  uint64_t v219 = v10;
  uint64_t v230 = v8;
  char v228 = v7;
  if (v17 != v16)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 80) = 0;
      *(void *)(v18 + 88) = 0;
      *(unsigned char *)(v18 + 96) = 1;
      *(_OWORD *)(v18 + 104) = 0u;
      *(_OWORD *)(v18 + 120) = 0u;
      *(_OWORD *)(v18 + 136) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v18 + 152) = _Q0;
      *(void *)(v18 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v18 + 176) = 0;
      *(void *)(v18 + 16) = *((void *)v12 + 2);
      long long v24 = *(_OWORD *)(v12 + 10);
      long long v25 = *(_OWORD *)(v12 + 14);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v12 + 6);
      *(_OWORD *)(v18 + 40) = v24;
      *(_OWORD *)(v18 + 56) = v25;
      *(void *)(v18 + 72) = *((void *)v12 + 9);
      uint64_t v26 = *((void *)v12 + 23);
      uint64_t v27 = *((void *)v12 + 24);
      uint64_t v205 = v5;
      uint64_t v29 = *((void *)v12 + 25);
      uint64_t v28 = *((void *)v12 + 26);
      uint64_t v30 = *((void *)v12 + 27);
      *(void *)(v18 + 184) = v26;
      *(void *)(v18 + 192) = v27;
      *(void *)(v18 + 200) = v29;
      *(void *)(v18 + 208) = v28;
      *(void *)(v18 + 216) = v30;
      swift_retain();
      swift_retain();
      uint64_t v31 = v27;
      uint64_t v32 = v29;
      uint64_t v8 = v230;
      uint64_t v10 = v219;
      outlined copy of Text.Effect.StopCollector?(v26, v31, v32, v28);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v33 = *((void *)v12 + 10);
      uint64_t v34 = *((void *)v12 + 11);
      LOBYTE(v26) = *((unsigned char *)v12 + 96);
      swift_release();
      *(void *)(v18 + 80) = v33;
      *(void *)(v18 + 88) = v34;
      uint64_t v5 = v205;
      uint64_t v9 = v217;
      *(unsigned char *)(v18 + 96) = v26;
      unint64_t v7 = v228;
      char v235 = (unsigned int *)v18;
      swift_release();
      uint64_t v12 = (unsigned int *)v18;
    }
    *((double *)v12 + 9) = v17;
  }
  switch(v11)
  {
    case 1:
      *(void *)&long long v243 = v7;
      *((void *)&v243 + 1) = v231;
      long long v244 = v229;
      *(void *)&long long v245 = v218;
      *((void *)&v245 + 1) = v8;
      *(void *)&long long v246 = v10;
      *((void *)&v246 + 1) = v9;
      specialized Text.Effect.PathInterpolator.PathGlyph.resolve(cluster:state:mapKeys:in:)(a2, a3, (uint64_t *)&v235);
      return swift_release();
    case 2:
      *(void *)&long long v243 = v7;
      *((void *)&v243 + 1) = v231;
      long long v244 = v229;
      *(void *)&long long v245 = v218;
      *((void *)&v245 + 1) = v8;
      *(void *)&long long v246 = v10;
      *((void *)&v246 + 1) = v9;
      *(void *)&long long v247 = v216;
      *((void *)&v247 + 1) = v215;
      *(void *)&long long v248 = v214;
      *((void *)&v248 + 1) = v213;
      *(void *)&long long v249 = v212;
      *((void *)&v249 + 1) = v211;
      specialized Text.Effect.PathInterpolator.SmoothPathGlyph.resolve(cluster:state:mapKeys:in:)(a1, a3, &v235);
      return swift_release();
    case 3:
      uint64_t v84 = v7[2];
      if (!v84) {
        return swift_release();
      }
      uint64_t v85 = (long long *)(v7 + 4);
      swift_bridgeObjectRetain();
      do
      {
        long long v86 = *v85;
        long long v87 = v85[1];
        long long v88 = v85[3];
        long long v245 = v85[2];
        long long v246 = v88;
        long long v243 = v86;
        long long v244 = v87;
        outlined retain of Text.Effect.PathInterpolator.PathGlyph((uint64_t)&v243);
        specialized Text.Effect.PathInterpolator.PathGlyph.resolve(cluster:state:mapKeys:in:)(a2, a3, (uint64_t *)&v235);
        outlined release of Text.Effect.PathInterpolator.PathGlyph((uint64_t)&v243);
        v85 += 4;
        --v84;
      }
      while (v84);
      char v188 = 3;
      uint64_t v187 = v211;
      uint64_t v186 = v212;
      uint64_t v185 = v213;
      uint64_t v184 = v214;
      uint64_t v183 = v215;
      uint64_t v182 = v216;
      int v37 = v7;
      uint64_t v42 = v230;
      uint64_t v38 = v231;
      uint64_t v40 = *((void *)&v229 + 1);
      uint64_t v39 = v229;
      uint64_t v41 = v218;
      uint64_t v43 = v219;
      goto LABEL_35;
    case 4:
      uint64_t v44 = v7[2];
      if (!v44) {
        return swift_release();
      }
      uint64_t v45 = (long long *)(v7 + 4);
      swift_bridgeObjectRetain();
      break;
    case 5:
      *(void *)&long long v243 = v7;
      *((void *)&v243 + 1) = v231;
      long long v244 = v229;
      *(void *)&long long v245 = v218;
      *((void *)&v245 + 1) = v8;
      *(void *)&long long v246 = v10;
      *((void *)&v246 + 1) = v9;
      Text.Effect.PathInterpolator.Interpolated.resolve(state:mapKeys:in:)(a2, a3, (uint64_t *)&v235);
      return swift_release();
    default:
      *(void *)&long long v243 = v7;
      *((void *)&v243 + 1) = v231;
      long long v244 = v229;
      LODWORD(v245) = v218;
      *((void *)&v245 + 1) = v8;
      *(void *)&long long v246 = v10;
      *((void *)&v246 + 1) = v9;
      swift_retain();
      uint64_t v35 = v7;
      uint64_t v203 = Text.Layout.RunSlice.positions.getter();
      if (*(void *)&v203[1].x && (uint64_t v201 = v35, v10 != v9))
      {
        uint64_t v207 = v5;
        float64x2_t v224 = (float64x2_t)v203[2];
        double v91 = a2[4];
        double v200 = a2[5];
        CGFloat v195 = a2[7];
        CGFloat v196 = a2[6];
        BOOL v92 = __OFADD__(v10, 1);
        CGFloat v193 = a2[1];
        double v194 = a2[3];
        CGFloat v192 = a2[2];
        uint64_t v191 = v35;
        swift_retain();
        if (v10 + 1 < v10) {
          goto LABEL_86;
        }
        uint64_t v93 = 0;
        if (v10 <= v9) {
          uint64_t v94 = v9;
        }
        else {
          uint64_t v94 = v10;
        }
        uint64_t v190 = v10 - v9 + 1;
        uint64_t v198 = v10 - v94;
        __asm { FMOV            V0.2D, #1.0 }
        long long v189 = _Q0;
        while (1)
        {
          *(void *)&CGFloat v96 = v10 + v93;
          uint64_t v227 = v10 + v93 + 1;
          if (v9 < v227)
          {
            v234.CGFloat a = 0.0;
            v234.CGFloat b = -2.68156159e154;
            _StringGuts.grow(_:)(19);
            swift_bridgeObjectRelease();
            v234.CGFloat a = -2.31584178e77;
            *(void *)&v234.CGFloat b = 0x800000024621E3B0;
            v232.CGFloat a = v96;
            v233.CGFloat a = 0.0;
            v233.CGFloat b = -2.68156159e154;
            _print_unlocked<A, B>(_:_:)();
            v180._countAndFlagsBits = 3943982;
            v180._object = (void *)0xE300000000000000;
            String.append(_:)(v180);
            _print_unlocked<A, B>(_:_:)();
            v181._countAndFlagsBits = *(void *)&v233.a;
            v181._object = *(void **)&v233.b;
            String.append(_:)(v181);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x24611F3A0);
          }
          if (!(v198 + v93)) {
            goto LABEL_87;
          }
          if (v92)
          {
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
          }
          uint64_t v222 = v10 + v93;
          uint64_t v208 = v93;
          double v97 = v235;
          long long v98 = *(_OWORD *)(v235 + 10);
          long long v240 = *(_OWORD *)(v235 + 6);
          long long v241 = v98;
          long long v242 = *(_OWORD *)(v235 + 14);
          uint64_t v99 = v191;
          swift_retain_n();
          char v100 = v99;
          uint64_t v101 = (id)_CTLineGetRunAtIndex(v100, v231);
          char v102 = (const __CTFont *)(id)CTRunGetFont();
          swift_release();

          double Size = CTFontGetSize(v102);
          swift_release_n();

          if ((*(unsigned char *)(v207 + 32) & 1) != 0 || *(double *)(v207 + 8) != Size)
          {
            CGAffineTransformMakeScale(&v234, Size * *(double *)(v207 + 40), -(Size * *(double *)(v207 + 40)));
            RBShapeGetFontQuantizationLevel();
            *(double *)(v207 + 8) = Size;
            *(void *)(v207 + 16) = v104;
            *(void *)(v207 + 24) = v105;
            *(unsigned char *)(v207 + 32) = 0;
          }
          double v209 = *(double *)(v207 + 40);
          v234.CGFloat b = 0.0;
          v234.CGFloat c = 0.0;
          v234.CGFloat a = v209;
          v234.CGFloat d = -v209;
          *(float64x2_t *)&v234.CGFloat tx = vmulq_n_f64(v224, v209);
          RBShapeGetPredictedFontQuantizationError();
          double v107 = v106 / v209;
          double v109 = v108 / v209;
          if (v106 / v209 != 0.0 || v109 != 0.0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              uint64_t v110 = swift_allocObject();
              *(void *)(v110 + 24) = 0x3FF0000000000000;
              *(void *)(v110 + 32) = 0;
              *(void *)(v110 + 40) = 0;
              *(void *)(v110 + 48) = 0x3FF0000000000000;
              *(void *)(v110 + 56) = 0;
              *(void *)(v110 + 64) = 0;
              *(void *)(v110 + 80) = 0;
              *(void *)(v110 + 88) = 0;
              *(void *)(v110 + 72) = 0x3FF0000000000000;
              *(unsigned char *)(v110 + 96) = 1;
              *(_OWORD *)(v110 + 104) = 0u;
              *(_OWORD *)(v110 + 120) = 0u;
              *(_OWORD *)(v110 + 136) = 0u;
              *(_OWORD *)(v110 + 152) = v189;
              *(void *)(v110 + 168) = 0x3FF0000000000000;
              *(unsigned char *)(v110 + 176) = 0;
              *(_OWORD *)(v110 + 184) = 0u;
              *(_OWORD *)(v110 + 200) = 0u;
              *(void *)(v110 + 216) = 0;
              *(void *)(v110 + 16) = *((void *)v97 + 2);
              long long v111 = *(_OWORD *)(v97 + 10);
              long long v112 = *(_OWORD *)(v97 + 14);
              *(_OWORD *)(v110 + 24) = *(_OWORD *)(v97 + 6);
              *(_OWORD *)(v110 + 40) = v111;
              *(_OWORD *)(v110 + 56) = v112;
              *(void *)(v110 + 72) = *((void *)v97 + 9);
              uint64_t v113 = *((void *)v97 + 23);
              uint64_t v114 = *((void *)v97 + 24);
              uint64_t v115 = *((void *)v97 + 25);
              uint64_t v116 = *((void *)v97 + 26);
              uint64_t v117 = *((void *)v97 + 27);
              *(void *)(v110 + 184) = v113;
              *(void *)(v110 + 192) = v114;
              *(void *)(v110 + 200) = v115;
              *(void *)(v110 + 208) = v116;
              *(void *)(v110 + 216) = v117;
              swift_retain();
              swift_retain();
              outlined copy of Text.Effect.StopCollector?(v113, v114, v115, v116);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              uint64_t v118 = *((void *)v97 + 10);
              uint64_t v119 = *((void *)v97 + 11);
              LOBYTE(v113) = *((unsigned char *)v97 + 96);
              swift_release();
              *(void *)(v110 + 80) = v118;
              *(void *)(v110 + 88) = v119;
              *(unsigned char *)(v110 + 96) = v113;
              char v235 = (unsigned int *)v110;
              swift_release();
              double v97 = (unsigned int *)v110;
            }
            long long v120 = *(_OWORD *)(v97 + 10);
            *(_OWORD *)&v234.CGFloat a = *(_OWORD *)(v97 + 6);
            *(_OWORD *)&v234.CGFloat c = v120;
            *(_OWORD *)&v234.CGFloat tx = *(_OWORD *)(v97 + 14);
            CGAffineTransformTranslate(&v233, &v234, v107, v109);
            long long v121 = *(_OWORD *)&v233.c;
            long long v122 = *(_OWORD *)&v233.tx;
            *(_OWORD *)(v97 + 6) = *(_OWORD *)&v233.a;
            *(_OWORD *)(v97 + 10) = v121;
            *(_OWORD *)(v97 + 14) = v122;
          }
          CGAffineTransformMakeTranslation(&v234, v91, v200);
          CGAffineTransformScale(&v233, &v234, v196, v195);
          float64x2_t v225 = *(float64x2_t *)&v233.a;
          long long v210 = *(_OWORD *)&v233.c;
          CGFloat tx = v233.tx;
          CGFloat ty = v233.ty;
          __double2 v125 = __sincos_stret(v194);
          v234.CGFloat a = v125.__cosval;
          v234.CGFloat b = v125.__sinval;
          v234.CGFloat c = -v125.__sinval;
          v234.CGFloat d = v125.__cosval;
          v234.CGFloat tx = 0.0;
          v234.CGFloat ty = 0.0;
          *(float64x2_t *)&v233.CGFloat a = v225;
          *(_OWORD *)&v233.CGFloat c = v210;
          v233.CGFloat tx = tx;
          v233.CGFloat ty = ty;
          CGAffineTransformConcat(&v232, &v234, &v233);
          CGAffineTransform v234 = v232;
          CGAffineTransformTranslate(&v233, &v234, -v91, -v200);
          CGAffineTransform v234 = v233;
          CGAffineTransformTranslate(&v233, &v234, v193, v192);
          CGFloat a = v233.a;
          CGFloat b = v233.b;
          CGFloat c = v233.c;
          CGFloat d = v233.d;
          CGFloat v131 = v233.tx;
          CGFloat v130 = v233.ty;
          CGAffineTransform v234 = v233;
          if (!CGAffineTransformIsIdentity(&v234))
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              uint64_t v132 = swift_allocObject();
              *(void *)(v132 + 24) = 0x3FF0000000000000;
              *(void *)(v132 + 32) = 0;
              *(void *)(v132 + 40) = 0;
              *(void *)(v132 + 48) = 0x3FF0000000000000;
              *(void *)(v132 + 56) = 0;
              *(void *)(v132 + 64) = 0;
              *(void *)(v132 + 80) = 0;
              *(void *)(v132 + 88) = 0;
              *(void *)(v132 + 72) = 0x3FF0000000000000;
              *(unsigned char *)(v132 + 96) = 1;
              *(_OWORD *)(v132 + 104) = 0u;
              *(_OWORD *)(v132 + 120) = 0u;
              *(_OWORD *)(v132 + 136) = 0u;
              *(_OWORD *)(v132 + 152) = v189;
              *(void *)(v132 + 168) = 0x3FF0000000000000;
              *(unsigned char *)(v132 + 176) = 0;
              *(_OWORD *)(v132 + 184) = 0u;
              *(_OWORD *)(v132 + 200) = 0u;
              *(void *)(v132 + 216) = 0;
              *(void *)(v132 + 16) = *((void *)v97 + 2);
              long long v133 = *(_OWORD *)(v97 + 10);
              long long v134 = *(_OWORD *)(v97 + 14);
              *(_OWORD *)(v132 + 24) = *(_OWORD *)(v97 + 6);
              *(_OWORD *)(v132 + 40) = v133;
              *(_OWORD *)(v132 + 56) = v134;
              *(void *)(v132 + 72) = *((void *)v97 + 9);
              uint64_t v135 = *((void *)v97 + 23);
              uint64_t v136 = *((void *)v97 + 24);
              uint64_t v137 = *((void *)v97 + 25);
              uint64_t v138 = *((void *)v97 + 26);
              uint64_t v139 = *((void *)v97 + 27);
              *(void *)(v132 + 184) = v135;
              *(void *)(v132 + 192) = v136;
              *(void *)(v132 + 200) = v137;
              *(void *)(v132 + 208) = v138;
              *(void *)(v132 + 216) = v139;
              swift_retain();
              swift_retain();
              outlined copy of Text.Effect.StopCollector?(v135, v136, v137, v138);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              uint64_t v140 = *((void *)v97 + 10);
              uint64_t v141 = *((void *)v97 + 11);
              LOBYTE(v136) = *((unsigned char *)v97 + 96);
              swift_release();
              *(void *)(v132 + 80) = v140;
              *(void *)(v132 + 88) = v141;
              *(unsigned char *)(v132 + 96) = v136;
              char v235 = (unsigned int *)v132;
              swift_release();
            }
            double v97 = v235;
            v234.CGFloat a = a;
            v234.CGFloat b = b;
            v234.CGFloat c = c;
            v234.CGFloat d = d;
            v234.CGFloat tx = v131;
            v234.CGFloat ty = v130;
            if (!CGAffineTransformIsIdentity(&v234))
            {
              long long v142 = *(_OWORD *)(v97 + 6);
              long long v143 = *(_OWORD *)(v97 + 10);
              v234.CGFloat a = a;
              v234.CGFloat b = b;
              v234.CGFloat c = c;
              v234.CGFloat d = d;
              v234.CGFloat tx = v131;
              v234.CGFloat ty = v130;
              *(_OWORD *)&v233.CGFloat a = v142;
              *(_OWORD *)&v233.CGFloat c = v143;
              *(_OWORD *)&v233.CGFloat tx = *(_OWORD *)(v97 + 14);
              CGAffineTransformConcat(&v232, &v234, &v233);
              long long v144 = *(_OWORD *)&v232.c;
              long long v145 = *(_OWORD *)&v232.tx;
              *(_OWORD *)(v97 + 6) = *(_OWORD *)&v232.a;
              *(_OWORD *)(v97 + 10) = v144;
              *(_OWORD *)(v97 + 14) = v145;
            }
          }
          char v146 = *((unsigned char *)v97 + 96);
          if (v146)
          {
            uint64_t v147 = 0;
            uint64_t v148 = 0;
          }
          else
          {
            uint64_t v147 = *((void *)v97 + 10);
            uint64_t v148 = *((void *)v97 + 11);
          }
          uint64_t v149 = *((void *)v97 + 3);
          uint64_t v150 = *((void *)v97 + 4);
          uint64_t v151 = *((void *)v97 + 5);
          uint64_t v152 = *((void *)v97 + 6);
          uint64_t v153 = *((void *)v97 + 7);
          uint64_t v154 = *((void *)v97 + 8);
          uint64_t v155 = *((void *)v97 + 9);
          uint64_t v156 = (void **)(*((void *)v97 + 2) + 16);
          swift_beginAccess();
          uint64_t v157 = *v156;
          double v158 = v100;
          swift_retain();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v156 = v157;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v157[2] + 1, 1, v157);
            *uint64_t v156 = v157;
          }
          unint64_t v161 = v157[2];
          unint64_t v160 = v157[3];
          if (v161 >= v160 >> 1)
          {
            uint64_t v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v160 > 1), v161 + 1, 1, v157);
            *uint64_t v156 = v157;
          }
          char v162 = v146 | 0x20;
          void v157[2] = v161 + 1;
          uint64_t v163 = &v157[18 * v161];
          unint64_t v7 = v228;
          uint64_t v8 = v230;
          v163[4] = v228;
          v163[5] = v231;
          *((_OWORD *)v163 + 3) = v229;
          v163[8] = v218;
          v163[9] = v230;
          v163[10] = v222;
          v163[11] = v227;
          v163[12] = v147;
          v163[13] = v148;
          *((unsigned char *)v163 + 112) = v162;
          int v164 = *(_DWORD *)((char *)&v233.a + 3);
          *(_DWORD *)((char *)v163 + 113) = LODWORD(v233.a);
          *((_DWORD *)v163 + 29) = v164;
          v163[15] = v155;
          v163[16] = v149;
          v163[17] = v150;
          v163[18] = v151;
          v163[19] = v152;
          v163[20] = v153;
          v163[21] = v154;
          swift_endAccess();
          swift_release();
          uint64_t v165 = v235;
          long long v166 = *(_OWORD *)(v235 + 10);
          long long v243 = *(_OWORD *)(v235 + 6);
          long long v244 = v166;
          long long v245 = *(_OWORD *)(v235 + 14);
          uint64_t v9 = v217;
          uint64_t v10 = v219;
          if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Text.Effect.DrawingContext.Storage();
              uint64_t v167 = swift_allocObject();
              *(void *)(v167 + 24) = 0x3FF0000000000000;
              *(void *)(v167 + 32) = 0;
              *(void *)(v167 + 40) = 0;
              *(void *)(v167 + 48) = 0x3FF0000000000000;
              *(void *)(v167 + 56) = 0;
              *(void *)(v167 + 64) = 0;
              *(void *)(v167 + 80) = 0;
              *(void *)(v167 + 88) = 0;
              *(void *)(v167 + 72) = 0x3FF0000000000000;
              *(unsigned char *)(v167 + 96) = 1;
              *(_OWORD *)(v167 + 104) = 0u;
              *(_OWORD *)(v167 + 120) = 0u;
              *(_OWORD *)(v167 + 136) = 0u;
              *(_OWORD *)(v167 + 152) = v189;
              *(void *)(v167 + 168) = 0x3FF0000000000000;
              *(unsigned char *)(v167 + 176) = 0;
              *(_OWORD *)(v167 + 184) = 0u;
              *(_OWORD *)(v167 + 200) = 0u;
              *(void *)(v167 + 216) = 0;
              *(void *)(v167 + 16) = *((void *)v165 + 2);
              long long v168 = *(_OWORD *)(v165 + 10);
              long long v169 = *(_OWORD *)(v165 + 14);
              *(_OWORD *)(v167 + 24) = *(_OWORD *)(v165 + 6);
              *(_OWORD *)(v167 + 40) = v168;
              *(_OWORD *)(v167 + 56) = v169;
              *(void *)(v167 + 72) = *((void *)v165 + 9);
              uint64_t v170 = *((void *)v165 + 23);
              uint64_t v171 = *((void *)v165 + 24);
              uint64_t v172 = *((void *)v165 + 25);
              uint64_t v173 = *((void *)v165 + 26);
              uint64_t v174 = *((void *)v165 + 27);
              *(void *)(v167 + 184) = v170;
              *(void *)(v167 + 192) = v171;
              *(void *)(v167 + 200) = v172;
              *(void *)(v167 + 208) = v173;
              *(void *)(v167 + 216) = v174;
              swift_retain();
              swift_retain();
              uint64_t v175 = v172;
              unint64_t v7 = v228;
              uint64_t v176 = v173;
              uint64_t v8 = v230;
              uint64_t v10 = v219;
              outlined copy of Text.Effect.StopCollector?(v170, v171, v175, v176);
              outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
              uint64_t v177 = *((void *)v165 + 10);
              uint64_t v178 = *((void *)v165 + 11);
              LOBYTE(v171) = *((unsigned char *)v165 + 96);
              swift_release();
              *(void *)(v167 + 80) = v177;
              *(void *)(v167 + 88) = v178;
              *(unsigned char *)(v167 + 96) = v171;
              uint64_t v9 = v217;
              char v235 = (unsigned int *)v167;
              swift_release();
              uint64_t v165 = (unsigned int *)v167;
            }
            *(_OWORD *)(v165 + 6) = v240;
            *(_OWORD *)(v165 + 10) = v241;
            *(_OWORD *)(v165 + 14) = v242;
          }
          swift_release();

          uint64_t v35 = v201;
          unint64_t v179 = *(void *)&v203[1].x;
          if (v208 + 1 == v179) {
            break;
          }
          if (v208 + 1 >= v179) {
            goto LABEL_89;
          }
          if (!(v190 + v208)) {
            break;
          }
          float64x2_t v224 = (float64x2_t)v203[v208 + 3];
          BOOL v92 = __OFADD__(v227, 1);
          uint64_t v93 = v208 + 1;
          if (v227 + 1 < v10 + v208 + 1) {
            goto LABEL_86;
          }
        }
      }
      else
      {
        uint64_t v36 = v35;
        swift_retain();
      }
      swift_release();

      swift_bridgeObjectRelease();
      char v188 = 0;
      uint64_t v187 = v211;
      uint64_t v186 = v212;
      uint64_t v185 = v213;
      uint64_t v184 = v214;
      uint64_t v183 = v215;
      uint64_t v182 = v216;
      int v37 = v7;
      uint64_t v38 = v231;
      uint64_t v40 = *((void *)&v229 + 1);
      uint64_t v39 = v229;
      uint64_t v41 = v218;
      uint64_t v42 = v8;
      uint64_t v43 = v10;
LABEL_35:
      uint64_t v89 = v9;
LABEL_39:
      outlined consume of Text.Effect.PathInterpolator.Glyph(v37, v38, v39, v40, v41, v42, v43, v89, v182, v183, v184, v185, v186, v187, v188);
      return swift_release();
  }
  while (1)
  {
    long long v46 = *v45;
    long long v47 = v45[2];
    long long v244 = v45[1];
    long long v245 = v47;
    long long v243 = v46;
    long long v48 = v45[3];
    long long v49 = v45[4];
    long long v50 = v45[6];
    long long v248 = v45[5];
    long long v249 = v50;
    long long v246 = v48;
    long long v247 = v49;
    long long v51 = v235;
    uint64_t v52 = *((void *)v235 + 26);
    if (v52)
    {
      uint64_t v53 = *((void *)v235 + 27);
      uint64_t v54 = *((void *)v235 + 24);
      uint64_t v55 = *((void *)v235 + 23);
      outlined retain of Text.Effect.PathInterpolator.SmoothPathGlyph((uint64_t)&v243);
      outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v55, v54);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v55, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(void *)(v53 + 16))
      {
        uint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
        if (v57)
        {
          unint64_t v58 = *(void *)(*(void *)(v53 + 56) + 8 * v56);
          if ((v58 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          if (v58 >= *(void *)(v52 + 16)) {
            goto LABEL_85;
          }
          uint64_t v59 = *((void *)&v249 + 1);
          unint64_t v220 = *((void *)&v246 + 1);
          long long v60 = v244;
          uint64_t v61 = *(void *)(*((void *)&v249 + 1) + 16);
          MEMORY[0x270FA5388](v56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySnySiGSay7SwiftUI4TextVAIE6EffectO9StopIndexVGG_So7CGPointVs5NeverOTg505_sSi7f3UI4h5VAAE6i2O9jk4VSo7l17VIgyyd_Si_AGtAIs5M11OIegnrzr_TRSiAoSIgyyd_Tf1cn_nTf4ng_n(0, v61, v59, (double (*)(uint64_t, void, double))partial apply for closure #1 in Text.Effect.PathInterpolator.SmoothPathGlyph.path(cluster:state:mapKeys:stopSegment:));
          uint64_t v63 = v62;
          swift_bridgeObjectRelease();
          uint64_t v64 = swift_bridgeObjectRetain();
          specialized Path.init(elements:points:)(v64, v220, v63, (uint64_t)&v240);
          uint64_t v65 = *((void *)&v240 + 1);
          uint64_t v66 = v240;
          uint64_t v68 = *((void *)&v241 + 1);
          uint64_t v67 = v241;
          unsigned int v221 = v242;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(double *)&v60 == 0.0 && *((double *)&v60 + 1) == 0.0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v51[24] & 1) == 0) {
              goto LABEL_22;
            }
LABEL_24:
            uint64_t v204 = v243;
            uint64_t v202 = DWORD1(v243);
            uint64_t v199 = DWORD2(v243);
            uint64_t v69 = HIDWORD(v243);
          }
          else
          {
            type metadata accessor for Path.PathBox();
            uint64_t v66 = swift_allocObject();
            *(_OWORD *)(v66 + 104) = 0u;
            *(_OWORD *)(v66 + 88) = 0u;
            *(_OWORD *)(v66 + 72) = 0u;
            *(_OWORD *)(v66 + 56) = 0u;
            *(_OWORD *)(v66 + 40) = 0u;
            *(_OWORD *)(v66 + 24) = 0u;
            *(unsigned char *)(v66 + 16) = 2;
            RBPathStorageInit();
            *(_OWORD *)&v234.CGFloat a = v60;
            MEMORY[0x24C526C30](v66 + 24, 22, &v234, 0);
            Path.append(to:)(v66 + 24);
            MEMORY[0x24C526C30](v66 + 24, 16, 0, 0);
            outlined release of Path?((uint64_t)&v240, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v65 = 0;
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            unsigned int v221 = 5;
            if (v51[24]) {
              goto LABEL_24;
            }
LABEL_22:
            uint64_t v202 = HIDWORD(*((void *)v51 + 10));
            uint64_t v204 = *((void *)v51 + 10);
            uint64_t v199 = *((void *)v51 + 11);
            uint64_t v69 = HIDWORD(*((void *)v51 + 11));
          }
          uint64_t v197 = v69;
          uint64_t v70 = *((void *)v51 + 3);
          uint64_t v71 = *((void *)v51 + 4);
          uint64_t v72 = *((void *)v51 + 5);
          uint64_t v73 = *((void *)v51 + 6);
          uint64_t v74 = *((void *)v51 + 7);
          uint64_t v75 = *((void *)v51 + 8);
          uint64_t v76 = *((void *)v51 + 9);
          long long v77 = (void **)(*((void *)v51 + 2) + 16);
          swift_beginAccess();
          long long v78 = *v77;
          outlined copy of Path.Storage(v66, v65, v67, v68, v221);
          swift_retain();
          char v79 = swift_isUniquelyReferenced_nonNull_native();
          *long long v77 = v78;
          uint64_t v206 = v67;
          if ((v79 & 1) == 0)
          {
            long long v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v78[2] + 1, 1, v78);
            *long long v77 = v78;
          }
          unint64_t v81 = v78[2];
          unint64_t v80 = v78[3];
          if (v81 >= v80 >> 1)
          {
            long long v78 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v78);
            *long long v77 = v78;
          }
          v78[2] = v81 + 1;
          double v82 = &v78[18 * v81];
          v82[4] = v66;
          v82[5] = v65;
          v82[6] = v206;
          v82[7] = v68;
          v82[8] = v221 | (unint64_t)(v204 << 32);
          v82[9] = v202 | (v199 << 32);
          v82[10] = v197;
          v82[11] = 0;
          v82[12] = 0;
          v82[13] = 0;
          *((unsigned char *)v82 + 112) = 64;
          int a_low = LODWORD(v233.a);
          *((_DWORD *)v82 + 29) = *(_DWORD *)((char *)&v233.a + 3);
          *(_DWORD *)((char *)v82 + 113) = a_low;
          v82[15] = v76;
          v82[16] = v70;
          v82[17] = v71;
          v82[18] = v72;
          v82[19] = v73;
          v82[20] = v74;
          v82[21] = v75;
          swift_endAccess();
          swift_release();
          outlined consume of Path.Storage(v66, v65, v206, v68, v221);
          outlined release of Text.Effect.PathInterpolator.SmoothPathGlyph((uint64_t)&v243);
          unint64_t v7 = v228;
          goto LABEL_13;
        }
      }
      outlined release of Text.Effect.PathInterpolator.SmoothPathGlyph((uint64_t)&v243);
    }
LABEL_13:
    v45 += 7;
    if (!--v44)
    {
      char v188 = 4;
      uint64_t v187 = v211;
      uint64_t v186 = v212;
      uint64_t v185 = v213;
      uint64_t v184 = v214;
      uint64_t v183 = v215;
      uint64_t v182 = v216;
      int v37 = v7;
      uint64_t v42 = v230;
      uint64_t v38 = v231;
      uint64_t v40 = *((void *)&v229 + 1);
      uint64_t v39 = v229;
      uint64_t v41 = v218;
      uint64_t v43 = v219;
      uint64_t v89 = v217;
      goto LABEL_39;
    }
  }
}

void *Text.Effect.PathInterpolator.Glyph.resolve(keyPath:state:mapKeys:in:)(uint64_t a1, uint64_t a2, unint64_t a3, double *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9 = a4;
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void **)v6;
  CGFloat v216 = *(double *)(v6 + 16);
  CGFloat v217 = *(double *)(v6 + 24);
  CGFloat v11 = *(double *)(v6 + 40);
  CGFloat v218 = *(double *)(v6 + 32);
  uint64_t v221 = *(void *)(v6 + 48);
  CGFloat v214 = *(double *)(v6 + 8);
  uint64_t v215 = *(void *)(v6 + 56);
  uint64_t v12 = *(void *)(v6 + 80);
  uint64_t v212 = *(void *)(v6 + 72);
  uint64_t v213 = *(void *)(v6 + 64);
  uint64_t v13 = *(void *)(v6 + 88);
  uint64_t v210 = *(void *)(v6 + 104);
  uint64_t v211 = *(void *)(v6 + 96);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 112);
  uint64_t v16 = *(void *)(a6 + 24);
  char v17 = *(unsigned char *)(a6 + 32);
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v227 = *(double **)a6;
  uint64_t v15 = v227;
  long long v228 = *(_OWORD *)(a6 + 8);
  uint64_t v229 = v16;
  char v230 = v17;
  uint64_t v231 = v18;
  double v19 = v227[9];
  double v20 = a4[8] * v19;
  swift_retain();
  if (v20 != v19)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Text.Effect.DrawingContext.Storage();
      double v192 = v11;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 80) = 0;
      *(void *)(v21 + 88) = 0;
      *(unsigned char *)(v21 + 96) = 1;
      *(_OWORD *)(v21 + 104) = 0u;
      *(_OWORD *)(v21 + 120) = 0u;
      *(_OWORD *)(v21 + 136) = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v21 + 152) = _Q0;
      *(void *)(v21 + 168) = 0x3FF0000000000000;
      *(unsigned char *)(v21 + 176) = 0;
      *(double *)(v21 + 16) = v15[2];
      long long v27 = *(_OWORD *)(v15 + 5);
      long long v28 = *(_OWORD *)(v15 + 7);
      *(_OWORD *)(v21 + 24) = *(_OWORD *)(v15 + 3);
      *(_OWORD *)(v21 + 40) = v27;
      *(_OWORD *)(v21 + 56) = v28;
      *(double *)(v21 + 72) = v15[9];
      uint64_t v201 = v12;
      uint64_t v203 = v10;
      uint64_t v30 = *((void *)v15 + 23);
      uint64_t v29 = *((void *)v15 + 24);
      unint64_t v193 = a5;
      CGFloat v195 = v9;
      uint64_t v199 = v13;
      uint64_t v31 = *((void *)v15 + 25);
      uint64_t v32 = *((void *)v15 + 26);
      uint64_t v33 = *((void *)v15 + 27);
      *(void *)(v21 + 184) = v30;
      *(void *)(v21 + 192) = v29;
      *(void *)(v21 + 200) = v31;
      *(void *)(v21 + 208) = v32;
      *(void *)(v21 + 216) = v33;
      swift_retain();
      swift_retain();
      uint64_t v34 = v30;
      uint64_t v35 = v32;
      uint64_t v13 = v199;
      uint64_t v12 = v201;
      a5 = v193;
      outlined copy of Text.Effect.StopCollector?(v34, v29, v31, v35);
      outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
      uint64_t v36 = *((void *)v15 + 10);
      uint64_t v37 = *((void *)v15 + 11);
      LOBYTE(v29) = *((unsigned char *)v15 + 96);
      swift_release();
      *(void *)(v21 + 80) = v36;
      *(void *)(v21 + 88) = v37;
      uint64_t v9 = v195;
      *(unsigned char *)(v21 + 96) = v29;
      uint64_t v10 = v203;
      uint64_t v227 = (double *)v21;
      swift_release();
      uint64_t v15 = (double *)v21;
      CGFloat v11 = v192;
    }
    v15[9] = v20;
  }
  switch(v14)
  {
    case 1:
      *(void *)&t1.CGFloat a = v10;
      t1.CGFloat b = v214;
      t1.CGFloat c = v216;
      t1.CGFloat d = v217;
      t1.CGFloat tx = v218;
      t1.CGFloat ty = v11;
      *(void *)&long long v233 = v221;
      *((void *)&v233 + 1) = v215;
      CGFloat v92 = *(double *)(*(void *)a6 + 112);
      CGFloat v93 = *(double *)(*(void *)a6 + 120);
      double v94 = *(double *)(*(void *)a6 + 128);
      double v95 = *(double *)(*(void *)a6 + 136);
      double v96 = *(double *)(*(void *)a6 + 144);
      CGFloat v97 = *(double *)(*(void *)a6 + 152);
      CGFloat v98 = *(double *)(*(void *)a6 + 160);
      CGAffineTransformMakeTranslation(&t2, v95, v96);
      CGAffineTransformScale(&v225, &t2, v97, v98);
      long long v219 = *(_OWORD *)&v225.c;
      long long v222 = *(_OWORD *)&v225.a;
      CGFloat tx = v225.tx;
      CGFloat ty = v225.ty;
      __double2 v101 = __sincos_stret(v94);
      t2.CGFloat a = v101.__cosval;
      t2.CGFloat b = v101.__sinval;
      t2.CGFloat c = -v101.__sinval;
      t2.CGFloat d = v101.__cosval;
      t2.CGFloat tx = 0.0;
      t2.CGFloat ty = 0.0;
      *(_OWORD *)&v225.CGFloat a = v222;
      *(_OWORD *)&v225.CGFloat c = v219;
      v225.CGFloat tx = tx;
      v225.CGFloat ty = ty;
      CGAffineTransformConcat(&v224, &t2, &v225);
      CGAffineTransform t2 = v224;
      CGAffineTransformTranslate(&v225, &t2, -v95, -v96);
      CGAffineTransform t2 = v225;
      CGAffineTransformTranslate(&v225, &t2, v92, v93);
      CGFloat a = v225.a;
      CGFloat b = v225.b;
      CGFloat c = v225.c;
      CGFloat d = v225.d;
      CGFloat v106 = v225.tx;
      CGFloat v107 = v225.ty;
      CGAffineTransform t2 = v225;
      if (!CGAffineTransformIsIdentity(&t2))
      {
        double v108 = v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v109 = swift_allocObject();
          *(_OWORD *)(v109 + 104) = 0u;
          *(_OWORD *)(v109 + 120) = 0u;
          *(_OWORD *)(v109 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v109 + 152) = _Q0;
          *(void *)(v109 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v109 + 176) = 0;
          long long v111 = v9;
          *(double *)(v109 + 16) = v108[2];
          long long v112 = *(_OWORD *)(v108 + 5);
          long long v113 = *(_OWORD *)(v108 + 7);
          *(_OWORD *)(v109 + 24) = *(_OWORD *)(v108 + 3);
          *(_OWORD *)(v109 + 40) = v112;
          *(_OWORD *)(v109 + 56) = v113;
          *(double *)(v109 + 72) = v108[9];
          unint64_t v114 = a5;
          uint64_t v115 = *((void *)v108 + 23);
          uint64_t v116 = *((void *)v108 + 24);
          uint64_t v117 = *((void *)v108 + 25);
          uint64_t v118 = *((void *)v108 + 26);
          uint64_t v119 = *((void *)v108 + 27);
          *(void *)(v109 + 184) = v115;
          *(void *)(v109 + 192) = v116;
          *(void *)(v109 + 200) = v117;
          *(void *)(v109 + 208) = v118;
          *(void *)(v109 + 216) = v119;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v115, v116, v117, v118);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v120 = *((void *)v108 + 10);
          uint64_t v121 = *((void *)v108 + 11);
          LOBYTE(v116) = *((unsigned char *)v108 + 96);
          swift_release();
          *(void *)(v109 + 80) = v120;
          *(void *)(v109 + 88) = v121;
          uint64_t v9 = v111;
          *(unsigned char *)(v109 + 96) = v116;
          a5 = v114;
          uint64_t v227 = (double *)v109;
          swift_release();
          double v108 = (double *)v109;
        }
        t2.CGFloat a = a;
        t2.CGFloat b = b;
        t2.CGFloat c = c;
        t2.CGFloat d = d;
        t2.CGFloat tx = v106;
        t2.CGFloat ty = v107;
        if (!CGAffineTransformIsIdentity(&t2))
        {
          long long v122 = *(_OWORD *)(v108 + 3);
          long long v123 = *(_OWORD *)(v108 + 5);
          t2.CGFloat a = a;
          t2.CGFloat b = b;
          t2.CGFloat c = c;
          t2.CGFloat d = d;
          t2.CGFloat tx = v106;
          t2.CGFloat ty = v107;
          *(_OWORD *)&v225.CGFloat a = v122;
          *(_OWORD *)&v225.CGFloat c = v123;
          *(_OWORD *)&v225.CGFloat tx = *(_OWORD *)(v108 + 7);
          CGAffineTransformConcat(&v224, &t2, &v225);
          long long v124 = *(_OWORD *)&v224.c;
          long long v125 = *(_OWORD *)&v224.tx;
          *(_OWORD *)(v108 + 3) = *(_OWORD *)&v224.a;
          *(_OWORD *)(v108 + 5) = v124;
          *(_OWORD *)(v108 + 7) = v125;
        }
      }
      specialized Text.Effect.PathInterpolator.PathGlyph.resolve(cluster:state:mapKeys:in:)(v9, a5, (uint64_t *)&v227);
      return (void *)swift_release();
    case 2:
      *(void *)&t1.CGFloat a = v10;
      t1.CGFloat b = v214;
      t1.CGFloat c = v216;
      t1.CGFloat d = v217;
      t1.CGFloat tx = v218;
      t1.CGFloat ty = v11;
      *(void *)&long long v233 = v221;
      *((void *)&v233 + 1) = v215;
      *(void *)&long long v234 = v213;
      *((void *)&v234 + 1) = v212;
      *(void *)&long long v235 = v12;
      *((void *)&v235 + 1) = v13;
      *(void *)&long long v236 = v211;
      *((void *)&v236 + 1) = v210;
      specialized Text.Effect.PathInterpolator.SmoothPathGlyph.resolve(cluster:state:mapKeys:in:)(a1, a5, (unsigned int **)&v227);
      goto LABEL_33;
    case 3:
      CGFloat v126 = *(double *)(*(void *)a6 + 112);
      CGFloat v127 = *(double *)(*(void *)a6 + 120);
      double v128 = *(double *)(*(void *)a6 + 128);
      double v129 = *(double *)(*(void *)a6 + 136);
      double v130 = *(double *)(*(void *)a6 + 144);
      CGFloat v131 = *(double *)(*(void *)a6 + 152);
      CGFloat v132 = *(double *)(*(void *)a6 + 160);
      CGAffineTransformMakeTranslation(&t1, v129, v130);
      CGAffineTransformScale(&t2, &t1, v131, v132);
      long long v220 = *(_OWORD *)&t2.c;
      long long v223 = *(_OWORD *)&t2.a;
      CGFloat v133 = t2.tx;
      CGFloat v134 = t2.ty;
      __double2 v135 = __sincos_stret(v128);
      t1.CGFloat a = v135.__cosval;
      t1.CGFloat b = v135.__sinval;
      t1.CGFloat c = -v135.__sinval;
      t1.CGFloat d = v135.__cosval;
      t1.CGFloat tx = 0.0;
      t1.CGFloat ty = 0.0;
      *(_OWORD *)&t2.CGFloat a = v223;
      *(_OWORD *)&t2.CGFloat c = v220;
      t2.CGFloat tx = v133;
      t2.CGFloat ty = v134;
      CGAffineTransformConcat(&v225, &t1, &t2);
      CGAffineTransform t1 = v225;
      CGAffineTransformTranslate(&t2, &t1, -v129, -v130);
      CGAffineTransform t1 = t2;
      CGAffineTransformTranslate(&t2, &t1, v126, v127);
      CGFloat v136 = t2.a;
      CGFloat v137 = t2.b;
      CGFloat v138 = t2.c;
      CGFloat v139 = t2.d;
      CGFloat v140 = t2.tx;
      CGFloat v141 = t2.ty;
      CGAffineTransform t1 = t2;
      if (!CGAffineTransformIsIdentity(&t1))
      {
        long long v142 = v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          unint64_t v194 = a5;
          uint64_t v143 = swift_allocObject();
          *(_OWORD *)(v143 + 104) = 0u;
          *(_OWORD *)(v143 + 120) = 0u;
          *(_OWORD *)(v143 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v143 + 152) = _Q0;
          *(void *)(v143 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v143 + 176) = 0;
          long long v145 = v9;
          *(double *)(v143 + 16) = v142[2];
          long long v146 = *(_OWORD *)(v142 + 5);
          long long v147 = *(_OWORD *)(v142 + 7);
          *(_OWORD *)(v143 + 24) = *(_OWORD *)(v142 + 3);
          *(_OWORD *)(v143 + 40) = v146;
          *(_OWORD *)(v143 + 56) = v147;
          *(double *)(v143 + 72) = v142[9];
          uint64_t v148 = v10;
          uint64_t v149 = *((void *)v142 + 23);
          uint64_t v150 = *((void *)v142 + 24);
          uint64_t v151 = *((void *)v142 + 25);
          uint64_t v152 = *((void *)v142 + 26);
          uint64_t v153 = *((void *)v142 + 27);
          *(void *)(v143 + 184) = v149;
          *(void *)(v143 + 192) = v150;
          *(void *)(v143 + 200) = v151;
          *(void *)(v143 + 208) = v152;
          *(void *)(v143 + 216) = v153;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v149, v150, v151, v152);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v154 = *((void *)v142 + 10);
          uint64_t v155 = *((void *)v142 + 11);
          LOBYTE(v150) = *((unsigned char *)v142 + 96);
          swift_release();
          *(void *)(v143 + 80) = v154;
          *(void *)(v143 + 88) = v155;
          uint64_t v9 = v145;
          *(unsigned char *)(v143 + 96) = v150;
          uint64_t v10 = v148;
          uint64_t v227 = (double *)v143;
          swift_release();
          long long v142 = (double *)v143;
          a5 = v194;
        }
        t1.CGFloat a = v136;
        t1.CGFloat b = v137;
        t1.CGFloat c = v138;
        t1.CGFloat d = v139;
        t1.CGFloat tx = v140;
        t1.CGFloat ty = v141;
        if (!CGAffineTransformIsIdentity(&t1))
        {
          long long v156 = *(_OWORD *)(v142 + 3);
          long long v157 = *(_OWORD *)(v142 + 5);
          t1.CGFloat a = v136;
          t1.CGFloat b = v137;
          t1.CGFloat c = v138;
          t1.CGFloat d = v139;
          t1.CGFloat tx = v140;
          t1.CGFloat ty = v141;
          *(_OWORD *)&t2.CGFloat a = v156;
          *(_OWORD *)&t2.CGFloat c = v157;
          *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v142 + 7);
          CGAffineTransformConcat(&v225, &t1, &t2);
          long long v158 = *(_OWORD *)&v225.c;
          long long v159 = *(_OWORD *)&v225.tx;
          *(_OWORD *)(v142 + 3) = *(_OWORD *)&v225.a;
          *(_OWORD *)(v142 + 5) = v158;
          *(_OWORD *)(v142 + 7) = v159;
        }
      }
      if ((a3 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }
      if (v10[2] <= a3) {
        goto LABEL_44;
      }
      unint64_t v160 = &v10[8 * a3];
      long long v161 = v160[2];
      long long v162 = v160[3];
      long long v163 = v160[5];
      *(_OWORD *)&t1.CGFloat tx = v160[4];
      long long v233 = v163;
      *(_OWORD *)&t1.CGFloat a = v161;
      *(_OWORD *)&t1.CGFloat c = v162;
      outlined retain of Text.Effect.PathInterpolator.PathGlyph((uint64_t)&t1);
      specialized Text.Effect.PathInterpolator.PathGlyph.resolve(cluster:state:mapKeys:in:)(v9, a5, (uint64_t *)&v227);
      outlined release of Text.Effect.PathInterpolator.PathGlyph((uint64_t)&t1);
      return (void *)swift_release();
    case 4:
      if ((a3 & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      if (v10[2] <= a3) {
        goto LABEL_46;
      }
      int v164 = &v10[14 * a3];
      long long v165 = v164[2];
      long long v166 = v164[4];
      *(_OWORD *)&t1.CGFloat c = v164[3];
      *(_OWORD *)&t1.CGFloat tx = v166;
      *(_OWORD *)&t1.CGFloat a = v165;
      long long v167 = v164[5];
      long long v168 = v164[6];
      long long v169 = v164[8];
      long long v235 = v164[7];
      long long v236 = v169;
      long long v233 = v167;
      long long v234 = v168;
      outlined retain of Text.Effect.PathInterpolator.SmoothPathGlyph((uint64_t)&t1);
      specialized Text.Effect.PathInterpolator.SmoothPathGlyph.resolve(cluster:state:mapKeys:in:)(a1, a5, (unsigned int **)&v227);
      outlined release of Text.Effect.PathInterpolator.SmoothPathGlyph((uint64_t)&t1);
      return (void *)swift_release();
    case 5:
      *(void *)&t1.CGFloat a = v10;
      t1.CGFloat b = v214;
      t1.CGFloat c = v216;
      t1.CGFloat d = v217;
      t1.CGFloat tx = v218;
      t1.CGFloat ty = v11;
      *(void *)&long long v233 = v221;
      *((void *)&v233 + 1) = v215;
      Text.Effect.PathInterpolator.Interpolated.resolve(state:mapKeys:in:)(v9, a5, (uint64_t *)&v227);
LABEL_33:
      return (void *)swift_release();
    default:
      CGFloat v38 = *(double *)(*(void *)a6 + 112);
      CGFloat v39 = *(double *)(*(void *)a6 + 120);
      double v41 = *(double *)(*(void *)a6 + 128);
      double v40 = *(double *)(*(void *)a6 + 136);
      double v42 = *(double *)(*(void *)a6 + 144);
      CGFloat v43 = *(double *)(*(void *)a6 + 152);
      CGFloat v44 = *(double *)(*(void *)a6 + 160);
      CGAffineTransformMakeTranslation(&t1, v40, v42);
      CGAffineTransformScale(&t2, &t1, v43, v44);
      long long v206 = *(_OWORD *)&t2.a;
      long long v196 = *(_OWORD *)&t2.c;
      CGFloat v45 = t2.tx;
      CGFloat v46 = t2.ty;
      double v209 = v10;
      swift_retain();
      __double2 v47 = __sincos_stret(v41);
      t1.CGFloat a = v47.__cosval;
      t1.CGFloat b = v47.__sinval;
      t1.CGFloat c = -v47.__sinval;
      t1.CGFloat d = v47.__cosval;
      t1.CGFloat tx = 0.0;
      t1.CGFloat ty = 0.0;
      *(_OWORD *)&t2.CGFloat a = v206;
      *(_OWORD *)&t2.CGFloat c = v196;
      t2.CGFloat tx = v45;
      t2.CGFloat ty = v46;
      CGAffineTransformConcat(&v225, &t1, &t2);
      CGAffineTransform t1 = v225;
      CGAffineTransformTranslate(&t2, &t1, -v40, -v42);
      CGAffineTransform t1 = t2;
      CGAffineTransformTranslate(&t2, &t1, v38, v39);
      CGFloat v48 = t2.a;
      CGFloat v49 = t2.b;
      CGFloat v50 = t2.c;
      CGFloat v51 = t2.d;
      CGFloat v52 = t2.tx;
      CGFloat v53 = t2.ty;
      CGAffineTransform t1 = t2;
      uint64_t v202 = v12;
      uint64_t v204 = v10;
      if (!CGAffineTransformIsIdentity(&t1))
      {
        uint64_t v54 = v227;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v55 = swift_allocObject();
          *(_OWORD *)(v55 + 104) = 0u;
          *(_OWORD *)(v55 + 120) = 0u;
          *(_OWORD *)(v55 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v55 + 152) = _Q0;
          *(void *)(v55 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v55 + 176) = 0;
          uint64_t v197 = v9;
          *(double *)(v55 + 16) = v54[2];
          long long v57 = *(_OWORD *)(v54 + 5);
          long long v58 = *(_OWORD *)(v54 + 7);
          *(_OWORD *)(v55 + 24) = *(_OWORD *)(v54 + 3);
          *(_OWORD *)(v55 + 40) = v57;
          *(_OWORD *)(v55 + 56) = v58;
          *(double *)(v55 + 72) = v54[9];
          uint64_t v59 = *((void *)v54 + 23);
          uint64_t v60 = *((void *)v54 + 24);
          uint64_t v61 = v13;
          double v62 = v11;
          uint64_t v63 = *((void *)v54 + 25);
          uint64_t v64 = *((void *)v54 + 26);
          uint64_t v65 = *((void *)v54 + 27);
          *(void *)(v55 + 184) = v59;
          *(void *)(v55 + 192) = v60;
          *(void *)(v55 + 200) = v63;
          *(void *)(v55 + 208) = v64;
          *(void *)(v55 + 216) = v65;
          swift_retain();
          swift_retain();
          uint64_t v66 = v63;
          uint64_t v13 = v61;
          uint64_t v67 = v64;
          CGFloat v11 = v62;
          outlined copy of Text.Effect.StopCollector?(v59, v60, v66, v67);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v68 = *((void *)v54 + 10);
          uint64_t v69 = *((void *)v54 + 11);
          LOBYTE(v60) = *((unsigned char *)v54 + 96);
          swift_release();
          *(void *)(v55 + 80) = v68;
          *(void *)(v55 + 88) = v69;
          uint64_t v9 = v197;
          uint64_t v10 = v204;
          *(unsigned char *)(v55 + 96) = v60;
          uint64_t v227 = (double *)v55;
          swift_release();
          uint64_t v54 = (double *)v55;
        }
        t1.CGFloat a = v48;
        t1.CGFloat b = v49;
        t1.CGFloat c = v50;
        t1.CGFloat d = v51;
        t1.CGFloat tx = v52;
        t1.CGFloat ty = v53;
        if (!CGAffineTransformIsIdentity(&t1))
        {
          long long v70 = *(_OWORD *)(v54 + 3);
          long long v71 = *(_OWORD *)(v54 + 5);
          t1.CGFloat a = v48;
          t1.CGFloat b = v49;
          t1.CGFloat c = v50;
          t1.CGFloat d = v51;
          t1.CGFloat tx = v52;
          t1.CGFloat ty = v53;
          *(_OWORD *)&t2.CGFloat a = v70;
          *(_OWORD *)&t2.CGFloat c = v71;
          *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v54 + 7);
          CGAffineTransformConcat(&v225, &t1, &t2);
          long long v72 = *(_OWORD *)&v225.c;
          long long v73 = *(_OWORD *)&v225.tx;
          *(_OWORD *)(v54 + 3) = *(_OWORD *)&v225.a;
          *(_OWORD *)(v54 + 5) = v72;
          *(_OWORD *)(v54 + 7) = v73;
        }
      }
      double v74 = v9[4];
      double v75 = v9[5];
      CGAffineTransformMakeTranslation(&t1, v74, v75);
      CGAffineTransformScale(&t2, &t1, v9[6], v9[7]);
      long long v207 = *(_OWORD *)&t2.a;
      long long v198 = *(_OWORD *)&t2.c;
      CGFloat v76 = t2.tx;
      CGFloat v77 = t2.ty;
      __double2 v78 = __sincos_stret(v9[3]);
      t1.CGFloat a = v78.__cosval;
      t1.CGFloat b = v78.__sinval;
      t1.CGFloat c = -v78.__sinval;
      t1.CGFloat d = v78.__cosval;
      t1.CGFloat tx = 0.0;
      t1.CGFloat ty = 0.0;
      *(_OWORD *)&t2.CGFloat a = v207;
      *(_OWORD *)&t2.CGFloat c = v198;
      t2.CGFloat tx = v76;
      t2.CGFloat ty = v77;
      CGAffineTransformConcat(&v225, &t1, &t2);
      CGAffineTransform t1 = v225;
      CGAffineTransformTranslate(&t2, &t1, -v74, -v75);
      CGFloat v79 = v9[1];
      CGFloat v80 = v9[2];
      CGAffineTransform t1 = t2;
      CGAffineTransformTranslate(&t2, &t1, v79, v80);
      CGFloat v81 = t2.a;
      CGFloat v82 = t2.b;
      CGFloat v83 = t2.c;
      CGFloat v84 = t2.d;
      CGFloat v85 = t2.tx;
      CGFloat v86 = t2.ty;
      CGAffineTransform t1 = t2;
      IsIdentiCGFloat ty = CGAffineTransformIsIdentity(&t1);
      long long v88 = v227;
      uint64_t v200 = v13;
      if (IsIdentity)
      {
        CGFloat v90 = v217;
        uint64_t v89 = *(void *)&v218;
        CGFloat v91 = v216;
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v171 = swift_allocObject();
          *(void *)(v171 + 80) = 0;
          *(void *)(v171 + 88) = 0;
          *(unsigned char *)(v171 + 96) = 1;
          *(_OWORD *)(v171 + 104) = 0u;
          *(_OWORD *)(v171 + 120) = 0u;
          *(_OWORD *)(v171 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v171 + 152) = _Q0;
          *(void *)(v171 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v171 + 176) = 0;
          *(double *)(v171 + 16) = v88[2];
          long long v173 = *(_OWORD *)(v88 + 5);
          long long v174 = *(_OWORD *)(v88 + 7);
          *(_OWORD *)(v171 + 24) = *(_OWORD *)(v88 + 3);
          *(_OWORD *)(v171 + 40) = v173;
          *(_OWORD *)(v171 + 56) = v174;
          *(double *)(v171 + 72) = v88[9];
          uint64_t v175 = *((void *)v88 + 23);
          uint64_t v176 = *((void *)v88 + 24);
          uint64_t v177 = *((void *)v88 + 25);
          uint64_t v178 = v88;
          double v179 = v11;
          uint64_t v180 = *((void *)v178 + 26);
          uint64_t v181 = *((void *)v178 + 27);
          *(void *)(v171 + 184) = v175;
          *(void *)(v171 + 192) = v176;
          *(void *)(v171 + 200) = v177;
          *(void *)(v171 + 208) = v180;
          *(void *)(v171 + 216) = v181;
          swift_retain();
          swift_retain();
          uint64_t v182 = v180;
          CGFloat v11 = v179;
          outlined copy of Text.Effect.StopCollector?(v175, v176, v177, v182);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v183 = *((void *)v178 + 10);
          uint64_t v184 = *((void *)v178 + 11);
          LOBYTE(v176) = *((unsigned char *)v178 + 96);
          swift_release();
          *(void *)(v171 + 80) = v183;
          *(void *)(v171 + 88) = v184;
          uint64_t v10 = v204;
          *(unsigned char *)(v171 + 96) = v176;
          uint64_t v227 = (double *)v171;
          swift_release();
          long long v88 = (double *)v171;
        }
        CGFloat v90 = v217;
        uint64_t v89 = *(void *)&v218;
        CGFloat v91 = v216;
        t1.CGFloat a = v81;
        t1.CGFloat b = v82;
        t1.CGFloat c = v83;
        t1.CGFloat d = v84;
        t1.CGFloat tx = v85;
        t1.CGFloat ty = v86;
        if (!CGAffineTransformIsIdentity(&t1))
        {
          long long v185 = *(_OWORD *)(v88 + 3);
          long long v186 = *(_OWORD *)(v88 + 5);
          t1.CGFloat a = v81;
          t1.CGFloat b = v82;
          t1.CGFloat c = v83;
          t1.CGFloat d = v84;
          t1.CGFloat tx = v85;
          t1.CGFloat ty = v86;
          *(_OWORD *)&t2.CGFloat a = v185;
          *(_OWORD *)&t2.CGFloat c = v186;
          *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v88 + 7);
          CGAffineTransformConcat(&v225, &t1, &t2);
          long long v187 = *(_OWORD *)&v225.c;
          long long v188 = *(_OWORD *)&v225.tx;
          *(_OWORD *)(v88 + 3) = *(_OWORD *)&v225.a;
          *(_OWORD *)(v88 + 5) = v187;
          *(_OWORD *)(v88 + 7) = v188;
        }
      }
      char v189 = *((unsigned char *)v88 + 96);
      long long v190 = 0uLL;
      if ((v189 & 1) == 0) {
        long long v190 = *((_OWORD *)v88 + 5);
      }
      *(void *)&t1.CGFloat a = v10;
      t1.CGFloat b = v214;
      t1.CGFloat c = v91;
      t1.CGFloat d = v90;
      *(void *)&t1.CGFloat tx = v89;
      t1.CGFloat ty = v11;
      *(void *)&long long v233 = v221;
      *((void *)&v233 + 1) = v215;
      long long v234 = v190;
      LOBYTE(v235) = v189 | 0x20;
      uint64_t v191 = v209;
      swift_retain();
      Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&t1);
      outlined consume of Text.Effect.PathInterpolator.Glyph(v10, *(uint64_t *)&v214, *(uint64_t *)&v91, *(uint64_t *)&v90, v89, *(uint64_t *)&v11, v221, v215, v213, v212, v202, v200, v211, v210, 0);
      swift_release();
      return outlined consume of Text.Effect.PathInterpolator.Glyph(v204, *(uint64_t *)&v214, *(uint64_t *)&v216, *(uint64_t *)&v217, *(uint64_t *)&v218, *(uint64_t *)&v11, v221, v215, v213, v212, v202, v200, v211, v210, 0);
  }
}

uint64_t Text.Effect.PathInterpolator.Cluster.resolve(cluster:state:mapKeys:in:)(uint64_t a1, double *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(v4 + 24);
  uint64_t v28 = result;
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v9 = a1;
    uint64_t v8 = swift_bridgeObjectRetain() + 72;
    do
    {
      uint64_t v13 = *(void **)(v8 - 40);
      uint64_t v18 = *(void *)(v8 - 32);
      uint64_t v17 = *(void *)(v8 - 24);
      uint64_t v19 = *(void *)(v8 - 16);
      uint64_t v15 = *(void *)v8;
      uint64_t v16 = *(void *)(v8 - 8);
      uint64_t v14 = *(void *)(v8 + 8);
      uint64_t v20 = *(void *)(v8 + 16);
      uint64_t v21 = *(void *)(v8 + 24);
      uint64_t v22 = *(void *)(v8 + 32);
      uint64_t v23 = *(void *)(v8 + 40);
      uint64_t v24 = *(void *)(v8 + 48);
      uint64_t v25 = *(void *)(v8 + 56);
      uint64_t v26 = *(void *)(v8 + 64);
      char v27 = *(unsigned char *)(v8 + 72);
      outlined copy of Text.Effect.PathInterpolator.Glyph(v13, v18, v17, v19, v16, *(void *)v8, v14, v20, v21, v22, v23, v24, v25, v26, v27);
      Text.Effect.PathInterpolator.Glyph.resolve(cluster:state:mapKeys:in:)(v9, a2, a3, a4);
      outlined consume of Text.Effect.PathInterpolator.Glyph(v13, v18, v17, v19, v16, v15, v14, v20, v21, v22, v23, v24, v25, v26, v27);
      v8 += 120;
      --v7;
    }
    while (v7);
    return outlined release of LinearGradient((uint64_t)&v28);
  }
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance Text.Effect.PathInterpolator.Fragment@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v2[1] + 16);
  BOOL v5 = __OFADD__(*v2, v4);
  uint64_t v6 = *v2 + v4;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= *v2 && v3 < v6)
  {
    *a2 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance Text.Effect.PathInterpolator.Fragment(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v1[1] + 16);
  BOOL v4 = __OFADD__(*v1, v3);
  uint64_t v5 = *v1 + v3;
  if (v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v2 >= *v1 && v2 < v5)
  {
    *uint64_t result = v2;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance Text.Effect.PathInterpolator.Fragment(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1[1] + 16);
  if (__OFADD__(*v1, v2)) {
    __break(1u);
  }
  else {
    *a1 = *v1 + v2;
  }
}

void (*protocol witness for Collection.subscript.read in conformance Text.Effect.PathInterpolator.Fragment(void (**a1)(void **a1), void *a2))(void **a1)
{
  uint64_t result = (void (*)(void **))malloc(0x38uLL);
  *a1 = result;
  unint64_t v6 = *a2 - *v2;
  if (__OFSUB__(*a2, *v2))
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = v2[1];
  if (v6 < *(void *)(v7 + 16))
  {
    uint64_t v8 = v7 + 56 * v6;
    uint64_t v9 = *(void *)(v8 + 64);
    long long v10 = *(_OWORD *)(v8 + 72);
    long long v11 = *(_OWORD *)(v8 + 48);
    *(_OWORD *)uint64_t result = *(_OWORD *)(v8 + 32);
    *((_OWORD *)result + 1) = v11;
    *((void *)result + 4) = v9;
    *(_OWORD *)((char *)result + 40) = v10;
    return protocol witness for Collection.subscript.read in conformance Text.Effect.StopCollector.Segment;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance Text.Effect.PathInterpolator.Fragment@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = v2[1];
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *v2 + v6;
  if (__OFADD__(*v2, v6))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < v5)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v8 = *a1;
  if (*a1 < v5)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = a1[1];
  if (v7 >= v9)
  {
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v5;
    a2[3] = result;
    return swift_bridgeObjectRetain();
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance Text.Effect.PathInterpolator.Fragment(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(v1[1] + 16);
  BOOL v4 = __OFADD__(*v1, v3);
  uint64_t v5 = *v1 + v3;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Text.Effect.PathInterpolator.Fragment()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(v0[1] + 16);
  BOOL v3 = __OFADD__(*v0, v2);
  uint64_t v4 = *v0 + v2;
  if (v3)
  {
    __break(1u);
  }
  else if (!__OFSUB__(v4, v1))
  {
    return v4 == v1;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance Text.Effect.PathInterpolator.Fragment@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(v3[1] + 16);
  BOOL v6 = __OFADD__(*v3, v5);
  uint64_t v7 = *v3 + v5;
  if (v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= *v3 && v7 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.PathInterpolator.Fragment@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance Text.Effect.PathInterpolator.Fragment(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(v2[1] + 16);
  BOOL v5 = __OFADD__(*v2, v4);
  uint64_t v6 = *v2 + v4;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *result;
  uint64_t v8 = *a2;
  if (v6 < *a2 || v8 < v3 || v7 < v3 || v6 < v7) {
    goto LABEL_15;
  }
  uint64_t result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7)) {
LABEL_16:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance Text.Effect.PathInterpolator.Fragment@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2[1] + 16);
  uint64_t v4 = *v2 + v3;
  if (__OFADD__(*v2, v3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *result;
    if (*result >= *v2 && v5 < v4)
    {
      *a2 = v5 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance Text.Effect.PathInterpolator.Fragment(uint64_t *result)
{
  uint64_t v2 = *(void *)(v1[1] + 16);
  uint64_t v3 = *v1 + v2;
  if (__OFADD__(*v1, v2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *result;
    if (*result >= *v1 && v4 < v3)
    {
      *uint64_t result = v4 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance Text.Effect.PathInterpolator.Fragment(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v2;
}

uint64_t protocol witness for Collection.count.getter in conformance Text.Effect.PathInterpolator.Fragment()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(v0[1] + 16);
  BOOL v3 = __OFADD__(*v0, v2);
  uint64_t v4 = *v0 + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = v4 - v1;
  if (v4 < v1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(v4, v1)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.PathInterpolator.Fragment()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.PathInterpolator.Fragment(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t Text.Effect.PathInterpolator.Map.computeFragment(quantization:stopMarkers:defaultKey:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6)
{
  double v9 = *(double *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  double v376 = *(double *)(a1 + 32);
  swift_bridgeObjectRetain();
  v464[0] = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(a5);
  specialized MutableCollection<>.sort(by:)(v464);
  swift_bridgeObjectRelease();
  uint64_t v12 = v464[0];
  uint64_t v13 = *(void *)(v464[0] + 16);
  if (!v13)
  {
LABEL_322:
    __break(1u);
    goto LABEL_323;
  }
  int64_t v14 = 0;
  if (*(double *)(v464[0] + 32) != a6)
  {
    while (v13 - 1 != v14)
    {
      double v15 = *(double *)(v464[0] + 40 + 8 * v14++);
      if (v15 == a6) {
        goto LABEL_5;
      }
    }
LABEL_307:
    __break(1u);
LABEL_308:
    __break(1u);
    goto LABEL_309;
  }
LABEL_5:
  int64_t v387 = v14;
  unint64_t v386 = *(void *)(v464[0] + 16);
  swift_bridgeObjectRetain();
  unint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_7SwiftUI4TextVAGE6EffectO12BaseFragmentVs5NeverOTg503_s7d3UI4f5VAAE6g185O16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAE04hX9VSdXEfU1_AK0oP0V0R0VTf1cn_nTf4ng_n(v12, a5);
  swift_bridgeObjectRelease();
  int64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = (void *)MEMORY[0x263F8EE78];
  uint64_t v363 = v16;
  int64_t v351 = v17;
  if (v17)
  {
    v464[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    uint64_t v18 = (void *)v464[0];
    unint64_t v19 = v16 + 56;
    do
    {
      uint64_t v20 = *(void *)(*(void *)v19 + 96);
      v464[0] = (uint64_t)v18;
      unint64_t v22 = v18[2];
      unint64_t v21 = v18[3];
      uint64_t v23 = v18;
      swift_bridgeObjectRetain();
      uint64_t v18 = v23;
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v18 = (void *)v464[0];
      }
      void v18[2] = v22 + 1;
      v18[v22 + 4] = v20;
      v19 += 56;
      --v17;
    }
    while (v17);
  }
  unint64_t v24 = v18[2];
  int64_t v25 = v387;
  if (v387 >= v24)
  {
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
    goto LABEL_327;
  }
  v384 = v18 + 4;
  uint64_t v26 = *(void **)(v18[v387 + 4] + 16);
  int64_t v27 = v351;
  if (*(void **)(v18[4] + 16) != v26) {
    goto LABEL_332;
  }
  if (v24 != 1)
  {
    uint64_t v28 = 5;
    do
    {
      uint64_t v29 = v28 - 3;
      if (__OFADD__(v28 - 4, 1)) {
        goto LABEL_303;
      }
      if (*(void **)(v18[v28] + 16) != v26) {
        goto LABEL_332;
      }
      ++v28;
    }
    while (v29 != v24);
  }
  uint64_t v30 = MEMORY[0x263F8EE78];
  uint64_t v348 = (uint64_t)v18;
  v342 = *(void **)(v18[v387 + 4] + 16);
  char v369 = v11;
  if (v351)
  {
    v464[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v351, 0);
    uint64_t v30 = v464[0];
    unint64_t v31 = *(void *)(v464[0] + 16);
    uint64_t v32 = v363;
    uint64_t v33 = v363 + 56;
    do
    {
      uint64_t v34 = *(void *)(*(void *)v33 + 64);
      v464[0] = v30;
      unint64_t v35 = *(void *)(v30 + 24);
      if (v31 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v31 + 1, 1);
        uint64_t v32 = v363;
        uint64_t v30 = v464[0];
      }
      *(void *)(v30 + 16) = v31 + 1;
      *(void *)(v30 + 8 * v31 + 32) = v34;
      v33 += 56;
      ++v31;
      --v27;
    }
    while (v27);
    uint64_t v26 = v342;
    int64_t v25 = v387;
  }
  else
  {
    uint64_t v32 = v363;
  }
  uint64_t v36 = (void *)MEMORY[0x263F8EE78];
  if (v26)
  {
    uint64_t v26 = 0;
    unint64_t v330 = 0;
    unint64_t v331 = 0;
    unint64_t v385 = 0;
    uint64_t v332 = v32 + 32;
    uint64_t v339 = v32 + 32 + 56 * v25;
    double v37 = -v376;
    uint64_t v344 = v30 + 32;
    int v334 = a4 & 6;
    uint64_t v345 = MEMORY[0x263F8EE58] + 8;
    v361 = (void *)MEMORY[0x263F8EE78];
    int64_t v38 = v351;
    uint64_t v373 = v30;
    while (1)
    {
      if (v38)
      {
        CGFloat v39 = v26;
        *(void *)v410 = v36;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
        uint64_t v36 = *(void **)v410;
        double v40 = (long long *)v332;
        unint64_t v41 = v385;
        while (1)
        {
          long long v42 = *v40;
          long long v43 = v40[1];
          long long v44 = v40[2];
          uint64_t v472 = *((void *)v40 + 6);
          v471[2] = v44;
          v471[1] = v43;
          v471[0] = v42;
          uint64_t v45 = v385 + v472;
          if (__OFADD__(v385, v472)) {
            goto LABEL_297;
          }
          if (__OFADD__(v45, 1)) {
            break;
          }
          if (v45 + 1 < v45) {
            goto LABEL_299;
          }
          outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v471);
          Text.Effect.BaseFragment.typographicBounds(for:)(v45, v45 + 1, (uint64_t)v412);
          outlined release of Text.Effect.BaseFragment((uint64_t)v471);
          uint64_t v46 = v413;
          *(void *)v410 = v36;
          unint64_t v48 = v36[2];
          unint64_t v47 = v36[3];
          if (v48 >= v47 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
            uint64_t v36 = *(void **)v410;
          }
          void v36[2] = v48 + 1;
          v36[v48 + 4] = v46;
          double v40 = (long long *)((char *)v40 + 56);
          if (!--v38)
          {
            uint64_t v32 = v363;
            uint64_t v26 = v39;
            goto LABEL_36;
          }
        }
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
LABEL_303:
        __break(1u);
LABEL_304:
        __break(1u);
LABEL_305:
        __break(1u);
LABEL_306:
        __break(1u);
        goto LABEL_307;
      }
      unint64_t v41 = v385;
LABEL_36:
      int64_t v49 = v387;
      uint64_t v50 = v384[v387];
      if (v41 >= *(void *)(v50 + 16)) {
        goto LABEL_320;
      }
      if (v387 >= *(void *)(v32 + 16))
      {
LABEL_321:
        __break(1u);
        goto LABEL_322;
      }
      v341 = v36;
      v346 = v26;
      CGFloat v51 = (void *)(v50 + 24 * v41);
      uint64_t v52 = v51[6];
      uint64_t v349 = v51[4];
      uint64_t v350 = v51[5];
      long long v53 = *(_OWORD *)v339;
      long long v54 = *(_OWORD *)(v339 + 16);
      long long v55 = *(_OWORD *)(v339 + 32);
      uint64_t v470 = *(void *)(v339 + 48);
      v469[2] = v55;
      v469[1] = v54;
      v469[0] = v53;
      swift_bridgeObjectRetain();
      outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v469);
      uint64_t v364 = v52;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextV6LayoutVAFE7ClusterV_SnySiGs5NeverOTg503_s7d3UI4f57VAAE6EffectO12BaseFragmentV11glyphRanges3forSaySnySiGGAC6g5VAAE7H22V_tFAjM8RunSliceVXEfU_AhFE0M0O0oP0VTf1cn_nTf4xg_n(v52, (uint64_t)v469);
      uint64_t v57 = v56;
      uint64_t v58 = *(void *)(v56 + 16);
      if (v58)
      {
        unint64_t v59 = 0;
        uint64_t v60 = (void *)MEMORY[0x263F8EE78];
        do
        {
          if (v59 >= *(void *)(v57 + 16)) {
            goto LABEL_300;
          }
          uint64_t v61 = (uint64_t *)(v57 + 32 + 16 * v59);
          uint64_t v63 = *v61;
          uint64_t v62 = v61[1];
          if (*v61 != v62)
          {
            if (v62 < v63) {
              goto LABEL_304;
            }
            if (v63 >= v62) {
              goto LABEL_305;
            }
            uint64_t v64 = v60;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v60 = v64;
            }
            else {
              uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
            }
            unint64_t v65 = v60[2];
            do
            {
              unint64_t v66 = v60[3];
              if (v65 >= v66 >> 1) {
                uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v65 + 1, 1, v60);
              }
              v60[2] = v65 + 1;
              v60[v65++ + 4] = v63++;
            }
            while (v62 != v63);
          }
          ++v59;
        }
        while (v59 != v58);
        v359 = v60;
        swift_bridgeObjectRelease();
        uint64_t v36 = (void *)MEMORY[0x263F8EE78];
        int64_t v49 = v387;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = (void *)MEMORY[0x263F8EE78];
        v359 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v67 = outlined release of Text.Effect.BaseFragment((uint64_t)v469);
      char v69 = (a4 & 1) != 0 ? Text.Layout.Cluster.stopKey.getter(v67, v68, v364) : 2;
      if ((a4 & 2) == 0 && v69 == 2) {
        break;
      }
      int64_t v381 = *(void *)(v348 + 16);
      if (v381)
      {
        *(void *)&v408[0] = v36;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v381, 0);
        int64_t v81 = v381;
        uint64_t v82 = 0;
        uint64_t v83 = *(void *)&v408[0];
        while (1)
        {
          uint64_t v84 = v384[v82];
          if (v385 >= *(void *)(v84 + 16)) {
            goto LABEL_310;
          }
          uint64_t v85 = *(void *)(v84 + 24 * v385 + 48);
          uint64_t v86 = *(void *)(v85 + 16);
          if (v86) {
            break;
          }
          long long v88 = v36;
LABEL_93:
          *(void *)&v408[0] = v83;
          unint64_t v108 = *(void *)(v83 + 16);
          unint64_t v107 = *(void *)(v83 + 24);
          if (v108 >= v107 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v108 + 1, 1);
            int64_t v81 = v381;
            uint64_t v83 = *(void *)&v408[0];
          }
          ++v82;
          *(void *)(v83 + 16) = v108 + 1;
          *(void *)(v83 + 8 * v108 + 32) = v88;
          if (v82 == v81) {
            goto LABEL_98;
          }
        }
        uint64_t v388 = v83;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v87 = v85 + 48;
        long long v88 = v36;
        while (2)
        {
          uint64_t v89 = *(void *)(v87 - 8);
          int v91 = *(_DWORD *)(v87 + 16);
          uint64_t v92 = *(void *)(v87 + 40);
          *(void *)v410 = *(void *)(v87 - 16);
          CGFloat v90 = *(void **)v410;
          *(void *)&v410[8] = v89;
          *(_OWORD *)&v410[16] = *(_OWORD *)v87;
          *(_DWORD *)&v410[32] = v91;
          *(_OWORD *)&v410[40] = *(_OWORD *)(v87 + 24);
          uint64_t v411 = v92;
          swift_retain();
          id v93 = v90;
          double v94 = Text.Layout.RunSlice.paths.getter();
          uint64_t v95 = v94[2];
          int64_t v96 = v88[2];
          int64_t v97 = v96 + v95;
          if (__OFADD__(v96, v95)) {
            goto LABEL_289;
          }
          CGFloat v98 = v94;
          char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native && v97 <= v88[3] >> 1)
          {
            if (!v98[2])
            {
LABEL_71:
              if (v95) {
                goto LABEL_290;
              }
              goto LABEL_72;
            }
          }
          else
          {
            if (v96 <= v97) {
              int64_t v100 = v96 + v95;
            }
            else {
              int64_t v100 = v96;
            }
            long long v88 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v100, 1, v88);
            if (!v98[2]) {
              goto LABEL_71;
            }
          }
          uint64_t v101 = v88[2];
          if ((v88[3] >> 1) - v101 < v95) {
            goto LABEL_291;
          }
          unint64_t v102 = (unint64_t)&v88[5 * v101 + 4];
          if ((unint64_t)(v98 + 4) < v102 + 40 * v95 && v102 < (unint64_t)&v98[5 * v95 + 4]) {
            goto LABEL_331;
          }
          type metadata accessor for _DynamicPropertyBuffer?(0, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path, MEMORY[0x263F8D8F0]);
          swift_arrayInitWithCopy();
          if (v95)
          {
            uint64_t v104 = v88[2];
            BOOL v105 = __OFADD__(v104, v95);
            uint64_t v106 = v104 + v95;
            if (v105) {
              goto LABEL_292;
            }
            v88[2] = v106;
          }
LABEL_72:
          v87 += 64;
          swift_bridgeObjectRelease();
          swift_release();

          if (!--v86)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int64_t v49 = v387;
            uint64_t v36 = (void *)MEMORY[0x263F8EE78];
            uint64_t v83 = v388;
            int64_t v81 = v381;
            goto LABEL_93;
          }
          continue;
        }
      }
      uint64_t v83 = (uint64_t)v36;
LABEL_98:
      uint64_t v109 = v384[v49];
      if (v385 >= *(void *)(v109 + 16)) {
        goto LABEL_326;
      }
      uint64_t v389 = v83;
      uint64_t v110 = (void *)(v109 + 24 * v385);
      uint64_t v111 = v110[4];
      uint64_t v112 = v110[5];
      uint64_t v113 = v110[6];
      swift_bridgeObjectRetain();
      uint64_t v352 = Text.Layout.Cluster.glyphSlices.getter(v111, v112, v113);
      swift_bridgeObjectRelease();
      uint64_t v114 = *(void *)(v363 + 16);
      swift_bridgeObjectRetain();
      uint64_t v347 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg50173_s7SwiftUI4TextVAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12d9Graphics7F24VAG7OptionsVtFAWSiXEfU8_Say0I2UI0K0VAME0M0O12BaseFragmentVGSiTf1cn_nTf4ngn_n(0, v114, v363, v385);
      swift_bridgeObjectRelease();
      if (v381)
      {
        *(void *)v410 = v36;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v381, 0);
        int64_t v115 = v381;
        uint64_t v116 = 0;
        uint64_t v117 = *(void *)v410;
        uint64_t v118 = v389;
        while (1)
        {
          uint64_t v119 = v384[v116];
          if (v385 >= *(void *)(v119 + 16)) {
            goto LABEL_311;
          }
          uint64_t v120 = *(void *)(v119 + 24 * v385 + 48);
          uint64_t v395 = *(void *)(v120 + 16);
          if (v395) {
            break;
          }
          long long v122 = v36;
LABEL_142:
          *(void *)v410 = v117;
          unint64_t v156 = *(void *)(v117 + 16);
          unint64_t v155 = *(void *)(v117 + 24);
          if (v156 >= v155 >> 1)
          {
            uint64_t v157 = v116;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v155 > 1, v156 + 1, 1);
            uint64_t v116 = v157;
            int64_t v115 = v381;
            uint64_t v118 = v389;
            uint64_t v117 = *(void *)v410;
          }
          ++v116;
          *(void *)(v117 + 16) = v156 + 1;
          *(void *)(v117 + 8 * v156 + 32) = v122;
          if (v116 == v115) {
            goto LABEL_154;
          }
        }
        uint64_t v377 = v116;
        uint64_t v379 = v117;
        uint64_t v392 = v120 + 32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v121 = 0;
        long long v122 = v36;
        while (2)
        {
          uint64_t v123 = v392 + (v121 << 6);
          CFIndex v125 = *(void *)(v123 + 48);
          uint64_t v124 = *(void *)(v123 + 56);
          uint64_t v126 = v124 - v125;
          if (v124 < v125) {
            goto LABEL_293;
          }
          if (__OFSUB__(v124, v125)) {
            goto LABEL_294;
          }
          CGFloat v127 = *(void **)v123;
          v405 = *(void **)v123;
          if (v126 < 1)
          {
            swift_retain();
            id v143 = v127;
            CGFloat v137 = v36;
            goto LABEL_123;
          }
          v401 = v122;
          CFIndex v128 = *(void *)(v123 + 8);
          float64x2_t v390 = *(float64x2_t *)(v123 + 16);
          type metadata accessor for CGPoint(0);
          double v129 = v127;
          swift_retain();
          uint64_t v130 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v130 + 16) = v126;
          CGFloat v131 = (CGPoint *)(v130 + 32);
          bzero((void *)(v130 + 32), 16 * v126);
          CGFloat v132 = (id)_CTLineGetRunAtIndex(v129, v128);
          PositionsPtr = CTRunGetPositionsPtr((CTRunRef)v132);

          if (PositionsPtr)
          {
            uint64_t v36 = (void *)MEMORY[0x263F8EE78];
            if (v124 != v125)
            {
              CFIndex v134 = v125;
              if (v124 > v125)
              {
                while (!__OFSUB__(v134, v125))
                {
                  v131[v134 - v125] = PositionsPtr[v134];
                  if (v124 == ++v134) {
                    goto LABEL_114;
                  }
                }
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                __break(1u);
LABEL_291:
                __break(1u);
LABEL_292:
                __break(1u);
LABEL_293:
                __break(1u);
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                __break(1u);
LABEL_297:
                __break(1u);
                goto LABEL_298;
              }
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
LABEL_311:
              __break(1u);
LABEL_312:
              __break(1u);
LABEL_313:
              __break(1u);
LABEL_314:
              __break(1u);
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
LABEL_319:
              __break(1u);
LABEL_320:
              __break(1u);
              goto LABEL_321;
            }
LABEL_114:
            int64_t v135 = *(void *)(v130 + 16);
            if (v135)
            {
LABEL_115:
              *(void *)&v408[0] = v36;
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v135, 0);
              uint64_t v136 = 0;
              CGFloat v137 = *(void **)&v408[0];
              unint64_t v138 = *(void *)(*(void *)&v408[0] + 16);
              float64x2_t v139 = v390;
              do
              {
                float64x2_t v140 = *(float64x2_t *)(v130 + 16 * v136 + 32);
                *(void *)&v408[0] = v137;
                unint64_t v141 = v137[3];
                if (v138 >= v141 >> 1)
                {
                  float64x2_t v367 = v140;
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v141 > 1, v138 + 1, 1);
                  float64x2_t v140 = v367;
                  float64x2_t v139 = v390;
                  CGFloat v137 = *(void **)&v408[0];
                }
                *(void *)&long long v142 = *(_OWORD *)&vaddq_f64(v139, v140);
                *((void *)&v142 + 1) = *(void *)&vsubq_f64(v139, v140).f64[1];
                ++v136;
                v137[2] = v138 + 1;
                *(_OWORD *)&v137[2 * v138++ + 4] = v142;
              }
              while (v135 != v136);
              swift_bridgeObjectRelease_n();
              long long v122 = v401;
LABEL_123:
              uint64_t v145 = v137[2];
              int64_t v146 = v122[2];
              int64_t v147 = v146 + v145;
              if (__OFADD__(v146, v145)) {
                goto LABEL_295;
              }
              uint64_t v148 = (void *)swift_isUniquelyReferenced_nonNull_native();
              if (!v148 || v147 > v122[3] >> 1)
              {
                if (v146 <= v147) {
                  int64_t v149 = v146 + v145;
                }
                else {
                  int64_t v149 = v146;
                }
                long long v122 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v148, v149, 1, v122);
              }
              if (v137[2])
              {
                uint64_t v150 = v122[2];
                if ((v122[3] >> 1) - v150 < v145) {
                  goto LABEL_301;
                }
                uint64_t v151 = &v122[2 * v150 + 4];
                if (v137 + 4 < &v151[2 * v145] && v151 < &v137[2 * v145 + 4]) {
                  goto LABEL_331;
                }
                memcpy(v151, v137 + 4, 16 * v145);
                if (v145)
                {
                  uint64_t v153 = v122[2];
                  BOOL v105 = __OFADD__(v153, v145);
                  uint64_t v154 = v153 + v145;
                  if (v105) {
                    goto LABEL_302;
                  }
                  v122[2] = v154;
                }
              }
              else if (v145)
              {
                goto LABEL_296;
              }
              ++v121;
              swift_bridgeObjectRelease();

              swift_release();
              if (v121 == v395)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                int64_t v49 = v387;
                uint64_t v118 = v389;
                uint64_t v117 = v379;
                int64_t v115 = v381;
                uint64_t v116 = v377;
                goto LABEL_142;
              }
              continue;
            }
          }
          else
          {
            long long v144 = (id)_CTLineGetRunAtIndex(v129, v128);
            v473.location = v125;
            v473.length = v124 - v125;
            CTRunGetPositions((CTRunRef)v144, v473, v131);

            uint64_t v36 = (void *)MEMORY[0x263F8EE78];
            int64_t v135 = *(void *)(v130 + 16);
            if (v135) {
              goto LABEL_115;
            }
          }
          break;
        }
        swift_bridgeObjectRelease();
        CGFloat v137 = v36;
        long long v122 = v401;
        goto LABEL_123;
      }
      uint64_t v117 = (uint64_t)v36;
      uint64_t v118 = v389;
LABEL_154:
      uint64_t v358 = *(void *)(v352 + 16);
      uint64_t v165 = *(void *)(v118 + 16);
      if (!v165) {
        goto LABEL_161;
      }
      if (*(void *)(*(void *)(v118 + 32) + 16) == v358)
      {
        if (v165 != 1)
        {
          uint64_t v166 = 5;
          do
          {
            uint64_t v167 = v166 - 3;
            if (__OFADD__(v166 - 4, 1)) {
              goto LABEL_324;
            }
            if (*(void *)(*(void *)(v118 + 8 * v166) + 16) != v358) {
              goto LABEL_268;
            }
            ++v166;
          }
          while (v167 != v165);
        }
LABEL_161:
        v409 = v36;
        uint64_t v380 = v117;
        if (!v358)
        {
          swift_bridgeObjectRelease();
LABEL_276:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v320 = v409;
          swift_bridgeObjectRetain();
          double v158 = Text.Layout.Cluster.xrange.getter(v349, v350, v364);
          uint64_t v160 = v321;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v361 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v361[2] + 1, 1, v361);
          }
          unint64_t v323 = v361[2];
          unint64_t v322 = v361[3];
          uint64_t v32 = v363;
          if (v323 >= v322 >> 1)
          {
            v326 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v322 > 1), v323 + 1, 1, v361);
            uint64_t v32 = v363;
            v361 = v326;
          }
          v361[2] = v323 + 1;
          int v164 = (double *)&v361[7 * v323];
          *((void *)v164 + 4) = v349;
          *((void *)v164 + 5) = v350;
          *((void *)v164 + 6) = v364;
          *((void *)v164 + 7) = v320;
          goto LABEL_151;
        }
        unint64_t v168 = 0;
        uint64_t v343 = v118 + 32;
        uint64_t v365 = v117 + 32;
        while (2)
        {
          if (v168 >= *(void *)(v352 + 16)) {
            goto LABEL_312;
          }
          uint64_t v173 = v352 + 32 + (v168 << 6);
          CFIndex v174 = *(void *)(v173 + 8);
          uint64_t v371 = v173;
          uint64_t v175 = one-time initialization token for kitForegroundColor;
          id v176 = *(id *)v173;
          swift_retain();
          if (v175 != -1) {
            swift_once();
          }
          id v177 = v176;
          swift_retain_n();
          uint64_t v178 = (const __CTLine *)v177;
          CFIndex v368 = v174;
          double v179 = (id)_CTLineGetRunAtIndex(v178, v174);
          uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v181 = (void *)MEMORY[0x24C522820](v180);
          swift_bridgeObjectRelease();
          CFDictionaryRef v182 = _CTRunGetAttributeValueForKey((const __CTRun *)v179, v181);

          if (v182)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v408, 0, sizeof(v408));
          }
          outlined init with take of Path?((uint64_t)v408, (uint64_t)v410, (unint64_t *)&lazy cache variable for type metadata for Any?, v345);
          swift_release_n();

          if (*(void *)&v410[24])
          {
            type metadata accessor for NSObject();
            if (swift_dynamicCast())
            {
              uint64_t v183 = *(void **)&v408[0];
              id v184 = (id)CGColorForCoreColor(0, *(void **)&v408[0]);
              if (v184)
              {
                long long v185 = v184;
                if (v346
                  && (type metadata accessor for CGColorRef(0),
                      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(),
                      id v186 = v346,
                      char v187 = static _CFObject.== infix(_:_:)(),
                      v186,
                      (v187 & 1) != 0))
                {

                  float v188 = *((float *)&v330 + 1);
                  float v189 = *(float *)&v330;
                  float v190 = *((float *)&v331 + 1);
                  float v191 = *(float *)&v331;
                }
                else
                {
                  unint64_t v193 = specialized Color.Resolved.init(failableCGColor:)(v185);
                  uint64_t v195 = v194;
                  char v197 = v196;

                  float v191 = 0.0;
                  float v190 = 0.0;
                  float v189 = 0.0;
                  float v188 = 0.0;
                  if ((v197 & 1) == 0)
                  {
                    float v190 = *((float *)&v193 + 1);
                    float v191 = *(float *)&v193;
                    float v188 = *((float *)&v195 + 1);
                    float v189 = *(float *)&v195;
                  }
                  unint64_t v330 = LODWORD(v189) | ((unint64_t)LODWORD(v188) << 32);
                  unint64_t v331 = LODWORD(v191) | ((unint64_t)LODWORD(v190) << 32);
                  v346 = v185;
                }
                uint64_t v192 = v380;
              }
              else
              {

                float v188 = 1.0;
                float v191 = 0.0;
                float v190 = 0.0;
                float v189 = 0.0;
                uint64_t v192 = v380;
              }
              int64_t v49 = v387;
              goto LABEL_186;
            }
          }
          else
          {
            _sypSgWOhTm_15((uint64_t)v410, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
          }
          float v188 = 1.0;
          float v191 = 0.0;
          float v190 = 0.0;
          float v189 = 0.0;
          uint64_t v192 = v380;
LABEL_186:
          if (v49 >= *(void *)(v389 + 16)) {
            goto LABEL_313;
          }
          uint64_t v198 = *(void *)(v343 + 8 * v49);
          if (v168 >= *(void *)(v198 + 16)) {
            goto LABEL_314;
          }
          if (v49 >= *(void *)(v192 + 16)) {
            goto LABEL_315;
          }
          uint64_t v199 = *(void *)(v365 + 8 * v49);
          if (v168 >= *(void *)(v199 + 16)) {
            goto LABEL_316;
          }
          if (v49 >= *(void *)(v373 + 16)) {
            goto LABEL_317;
          }
          float v355 = v190;
          float v356 = v189;
          float v357 = v191;
          uint64_t v406 = 40 * v168;
          uint64_t v200 = v198 + 40 * v168;
          uint64_t v202 = *(void *)(v200 + 32);
          uint64_t v201 = *(void *)(v200 + 40);
          int64_t v203 = v49;
          uint64_t v205 = *(void *)(v200 + 48);
          uint64_t v204 = *(void *)(v200 + 56);
          int v206 = *(unsigned __int8 *)(v200 + 64);
          float64x2_t v374 = *(float64x2_t *)(v199 + 16 * v168 + 32);
          double v207 = *(double *)(v344 + 8 * v203);
          uint64_t v208 = v178;
          swift_retain_n();
          double v209 = v208;
          uint64_t v396 = v202;
          uint64_t v391 = v201;
          uint64_t v393 = v205;
          uint64_t v378 = v204;
          outlined copy of Path?(v202, v201, v205, v204, v206);
          uint64_t v210 = (id)_CTLineGetRunAtIndex(v209, v368);
          uint64_t v211 = (const __CTFont *)(id)CTRunGetFont();
          swift_release();

          double Size = CTFontGetSize(v211);
          swift_release_n();

          v366 = v209;
          if (v369 & 1 | (v9 != Size))
          {
            CGAffineTransformMakeScale((CGAffineTransform *)v410, v376 * Size, -(v376 * Size));
            RBShapeGetFontQuantizationLevel();
            uint64_t v8 = v213;
            uint64_t v10 = v214;
            double v9 = Size;
          }
          *(void *)&v410[8] = 0;
          *(void *)&v410[16] = 0;
          *(double *)v410 = v376;
          *(double *)&v410[24] = v37;
          *(float64x2_t *)&v410[32] = vmulq_n_f64(v374, v376);
          RBShapeGetPredictedFontQuantizationError();
          uint64_t v217 = *(void *)(v365 + 8 * v387);
          if (v168 >= *(void *)(v217 + 16)) {
            goto LABEL_318;
          }
          if (v387 >= *(void *)(v347 + 16)) {
            goto LABEL_319;
          }
          int v402 = v206;
          v353 = (uint64_t *)(v371 + 48);
          v354 = (uint64_t *)(v371 + 56);
          double v218 = v374.f64[0] + v215 / v376;
          double v362 = v207 + v216 / v376;
          double v219 = *(double *)(v217 + 16 * v168 + 32) - *(double *)(v347 + 32 + 8 * v387);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v375 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CGPointVs5NeverOTg50210_s7SwiftUI4TextVAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFSo7D10VSiXEfU12_Say12CoreGraphics7CGFloatVGAOSaySayAHGGSiSo6CGSizeVTf1cn_nTf4ngggnn_n(0, v386, v347, v373, v380, v168, v219, 0.0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v386 <= 1)
          {
            LOBYTE(v220) = v206;
            int64_t v49 = v387;
            if (v402 != 255) {
              goto LABEL_246;
            }
            unint64_t v383 = v168;
            swift_bridgeObjectRelease();
            long long v223 = *(void **)v371;
            uint64_t v224 = *(void *)(v371 + 8);
            uint64_t v225 = *(void *)(v371 + 16);
            uint64_t v226 = *(void *)(v371 + 24);
            uint64_t v227 = *(unsigned int *)(v371 + 32);
            uint64_t v228 = *(void *)(v371 + 40);
            uint64_t v229 = *v353;
            uint64_t v230 = *v354;
            uint64_t v231 = v409;
            swift_retain();
            id v232 = v223;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v231 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v231[2] + 1, 1, v231);
              v409 = v231;
            }
            unint64_t v234 = v231[2];
            unint64_t v233 = v231[3];
            if (v234 >= v233 >> 1) {
              v409 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v233 > 1), v234 + 1, 1, v231);
            }
            v464[0] = (uint64_t)v232;
            v464[1] = v224;
            v464[2] = v225;
            v464[3] = v226;
            v464[4] = v227;
            v464[5] = v228;
            v464[6] = v229;
            v464[7] = v230;
            long long v465 = 0u;
            long long v466 = 0u;
            long long v467 = 0u;
            char v468 = 0;
            uint64_t v235 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v234, (uint64_t)v464);
            _ViewInputs.base.modify(v235, v236);
            swift_release();

            int64_t v49 = v387;
            uint64_t v36 = (void *)MEMORY[0x263F8EE78];
            unint64_t v168 = v383;
            goto LABEL_165;
          }
          int v220 = v206;
          if (v206 == 255)
          {
            unint64_t v253 = v386;
            uint64_t v254 = 0;
            CFIndex v255 = v368;
            int64_t v49 = v387;
            do
            {
              if (v253 == v254) {
                goto LABEL_308;
              }
              if (v387 != v254)
              {
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v254, 1, v389);
                uint64_t v256 = *(void *)(v389 + 8 * v254 + 32);
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v168, 1, v256);
                unint64_t v253 = v386;
                if (*(unsigned __int8 *)(v256 + v406 + 64) != 255)
                {
                  if ((a4 & 8) == 0) {
                    goto LABEL_244;
                  }
                  goto LABEL_259;
                }
              }
              ++v254;
            }
            while (v253 != v254);
            outlined copy of Path?(v202, v201, v393, v378, 0xFFu);
            if ((a4 & 8) == 0) {
              goto LABEL_244;
            }
LABEL_259:
            char v266 = v366;
            swift_retain_n();
            v267 = v266;
            v268 = (id)_CTLineGetRunAtIndex(v267, v255);
            v269 = (const __CTFont *)(id)CTRunGetFont();
            swift_release();

            CFDictionaryRef v270 = CTFontCopyVariation(v269);
            if (v270)
            {
              unint64_t v257 = v168;
              swift_bridgeObjectRelease();
              swift_release();

              goto LABEL_261;
            }
            double v335 = v9;
            uint64_t v336 = v10;
            uint64_t v337 = v8;
            swift_release();

            swift_bridgeObjectRetain();
            uint64_t v284 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f195VAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAC6g2V8hI10VSiXEfU13_SaySayAkGE7ClusterVGGS2iTf1cn_nTf4ngnn_n(0, v386, v348, v385, v168);
            swift_bridgeObjectRelease();
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v49, 1, v284);
            v285 = (void *)(v284 + (v49 << 6));
            v286 = (void *)v285[4];
            CFIndex v287 = v285[5];
            uint64_t v288 = v285[6];
            uint64_t v289 = v285[7];
            CFIndex v290 = v285[10];
            uint64_t v291 = v285[11];
            swift_retain_n();
            v292 = v286;
            v293 = (id)_CTLineGetRunAtIndex(v292, v287);
            if (!__OFSUB__(v291, v290))
            {
              v294 = v293;
              v474.location = v290;
              v474.length = v291 - v290;
              CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v293, 0, v474);
              CGFloat x = ImageBounds.origin.x;
              CGFloat y = ImageBounds.origin.y;
              CGFloat width = ImageBounds.size.width;
              CGFloat height = ImageBounds.size.height;

              *(void *)&v410[8] = 0;
              *(void *)&v410[16] = 0;
              *(void *)v410 = 0x3FF0000000000000;
              *(void *)&v410[24] = 0xBFF0000000000000;
              *(void *)&v410[32] = v288;
              *(void *)&v410[40] = v289;
              v476.origin.CGFloat x = x;
              v476.origin.CGFloat y = y;
              v476.size.CGFloat width = width;
              v476.size.CGFloat height = height;
              CGRect v477 = CGRectApplyAffineTransform(v476, (CGAffineTransform *)v410);
              CGFloat v299 = v477.origin.x;
              CGFloat v300 = v477.origin.y;
              CGFloat v301 = v477.size.width;
              CGFloat v302 = v477.size.height;
              swift_release();

              v478.origin.CGFloat x = v299;
              v478.origin.CGFloat y = v300;
              v478.size.CGFloat width = v301;
              v478.size.CGFloat height = v302;
              CGRect v479 = CGRectInset(v478, -1.0, -1.0);
              double v303 = v479.origin.x;
              double v304 = v479.origin.y;
              double v305 = v479.size.width;
              double v306 = v479.size.height;
              swift_release();

              specialized Text.Effect.PathInterpolator.Interpolated.init(position:slices:relativePositions:bounds:displayScale:)(v284, v375, (uint64_t)v414, v218, v362, v303, v304, v305, v306, v376);
              v462[0] = v414[0];
              v462[1] = v414[1];
              v462[2] = v414[2];
              v462[3] = v414[3];
              memset(&v462[4], 0, 48);
              char v463 = 5;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              uint64_t v307 = v409[2];
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v307);
              uint64_t v308 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v307, (uint64_t)v462);
              _ViewInputs.base.modify(v308, v309);
              swift_release();

              outlined consume of Path?(v396, v391, v393, v378, v402);
              uint64_t v10 = v336;
              uint64_t v8 = v337;
              double v9 = v335;
              double v37 = -v376;
              goto LABEL_264;
            }
LABEL_328:
            __break(1u);
LABEL_329:
            __break(1u);
LABEL_330:
            __break(1u);
LABEL_331:
            _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
LABEL_332:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            swift_release();
            __break(1u);
            JUMPOUT(0x246123140);
          }
          outlined copy of Path.Storage(v202, v201, v393, v378, v206);
          unint64_t v221 = v386;
          uint64_t v222 = 0;
          int64_t v49 = v387;
          unint64_t v382 = v168;
          float v338 = v188;
          do
          {
            if (v221 == v222) {
              goto LABEL_306;
            }
            if (v49 != v222)
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v222, 1, v389);
              uint64_t v238 = *(void *)(v389 + 8 * v222 + 32);
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v168, 1, v238);
              uint64_t v239 = (uint64_t *)(v238 + v406);
              int v240 = *(unsigned __int8 *)(v238 + v406 + 64);
              if (v240 == 255)
              {
                outlined consume of Path?(v396, v391, v393, v378, v220);
                unint64_t v168 = v382;
                int64_t v49 = v387;
              }
              else
              {
                uint64_t v242 = v239[4];
                uint64_t v241 = v239[5];
                uint64_t v244 = v239[6];
                uint64_t v243 = v239[7];
                switch(v220)
                {
                  case 1:
                    outlined copy of Path?(v239[4], v239[5], v239[6], v239[7], v240);
                    outlined copy of Path.Storage(v242, v241, v244, v243, v240);
                    RBPathMakeEllipse();
                    break;
                  case 2:
                    outlined copy of Path?(v242, v241, v244, v243, v240);
                    outlined copy of Path.Storage(v242, v241, v244, v243, v240);
                    double v37 = -v376;
                    float v188 = v338;
                    RBPathMakeRoundedRect();
                    break;
                  case 3:
                  case 4:
                    goto LABEL_332;
                  case 5:
                    uint64_t v360 = v239[6];
                    uint64_t v370 = v239[5];
                    if (*(unsigned char *)(v396 + 16))
                    {
                      uint64_t v245 = v391;
                      if (*(unsigned char *)(v396 + 16) == 1)
                      {
                        uint64_t v246 = v396;
                        outlined copy of Path?(v242, v241, v360, v243, v240);
                        outlined copy of Path?(v396, v391, v393, v378, 5u);
                        outlined copy of Path?(v242, v241, v360, v243, v240);
                        uint64_t v247 = v378;
                        uint64_t v248 = v393;
                        goto LABEL_225;
                      }
                      outlined copy of Path?(v242, v241, v360, v243, v240);
                      outlined copy of Path?(v396, v391, v393, v378, 5u);
                      outlined copy of Path?(v242, v241, v360, v243, v240);
                      uint64_t v246 = v396;
                      if (one-time initialization token for bufferCallbacks != -1) {
                        swift_once();
                      }
                      uint64_t v247 = v378;
                      uint64_t v248 = v393;
                    }
                    else
                    {
                      uint64_t v247 = v378;
                      uint64_t v248 = v393;
                      if (!*(void *)(v396 + 24)) {
                        goto LABEL_329;
                      }
                      outlined copy of Path?(v242, v370, v360, v243, v240);
                      outlined copy of Path?(v396, v391, v393, v378, 5u);
                      outlined copy of Path?(v242, v370, v360, v243, v240);
                      uint64_t v246 = v396;
                    }
                    uint64_t v245 = v391;
LABEL_225:
                    RBPathRetain();
                    outlined consume of Path?(v246, v245, v248, v247, 5u);
                    uint64_t v241 = v370;
                    uint64_t v244 = v360;
                    break;
                  case 6:
                    outlined copy of Path?(v239[4], v239[5], v239[6], v239[7], v240);
                    outlined copy of Path.Storage(v242, v241, v244, v243, v240);
                    break;
                  default:
                    outlined copy of Path?(v239[4], v239[5], v239[6], v239[7], v240);
                    outlined copy of Path.Storage(v242, v241, v244, v243, v240);
                    RBPathMakeRect();
                    break;
                }
                switch(v240)
                {
                  case 1:
                    RBPathMakeEllipse();
                    goto LABEL_205;
                  case 2:
                    RBPathMakeRoundedRect();
                    goto LABEL_205;
                  case 3:
                  case 4:
                    goto LABEL_332;
                  case 5:
                    if (!*(unsigned char *)(v242 + 16))
                    {
                      if (!*(void *)(v242 + 24)) {
                        goto LABEL_330;
                      }
LABEL_231:
                      swift_retain();
                      goto LABEL_237;
                    }
                    if (*(unsigned char *)(v242 + 16) == 1) {
                      goto LABEL_231;
                    }
                    uint64_t v249 = v243;
                    uint64_t v250 = v244;
                    uint64_t v251 = v241;
                    uint64_t v252 = one-time initialization token for bufferCallbacks;
                    swift_retain();
                    if (v252 != -1) {
                      swift_once();
                    }
                    uint64_t v241 = v251;
                    uint64_t v244 = v250;
                    uint64_t v243 = v249;
LABEL_237:
                    RBPathRetain();
                    outlined consume of Path?(v242, v241, v244, v243, 5u);
LABEL_205:
                    char CanInterpolate = RBPathCanInterpolate();
                    RBPathRelease();
                    RBPathRelease();
                    outlined consume of Path?(v242, v241, v244, v243, v240);
                    outlined consume of Path?(v242, v241, v244, v243, v240);
                    unint64_t v221 = v386;
                    uint64_t v36 = (void *)MEMORY[0x263F8EE78];
                    unint64_t v168 = v382;
                    int64_t v49 = v387;
                    int v220 = v402;
                    if (CanInterpolate) {
                      goto LABEL_206;
                    }
                    outlined consume of Path?(v396, v391, v393, v378, v402);
                    break;
                  case 6:
                    goto LABEL_205;
                  default:
                    RBPathMakeRect();
                    goto LABEL_205;
                }
              }
              CFIndex v255 = v368;
              if ((a4 & 8) != 0) {
                goto LABEL_259;
              }
LABEL_244:
              unint64_t v257 = v168;
              swift_bridgeObjectRelease();
LABEL_261:
              v271 = *(void **)v371;
              uint64_t v272 = *(void *)(v371 + 8);
              uint64_t v273 = *(void *)(v371 + 16);
              uint64_t v274 = *(void *)(v371 + 24);
              uint64_t v275 = *(unsigned int *)(v371 + 32);
              uint64_t v276 = *(void *)(v371 + 40);
              uint64_t v277 = *v353;
              uint64_t v278 = *v354;
              v279 = v409;
              swift_retain();
              id v280 = v271;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                v279 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v279[2] + 1, 1, v279);
                v409 = v279;
              }
              v457[0] = v280;
              v457[1] = v272;
              v457[2] = v273;
              v457[3] = v274;
              v457[4] = v275;
              v457[5] = v276;
              v457[6] = v277;
              v457[7] = v278;
              long long v458 = 0u;
              long long v459 = 0u;
              long long v460 = 0u;
              char v461 = 0;
              uint64_t v281 = v279[2];
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v281);
              uint64_t v282 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v281, (uint64_t)v457);
              _ViewInputs.base.modify(v282, v283);
              swift_release();

              outlined consume of Path?(v396, v391, v393, v378, v402);
              uint64_t v36 = (void *)MEMORY[0x263F8EE78];
              unint64_t v168 = v257;
LABEL_264:
              int64_t v49 = v387;
              goto LABEL_165;
            }
LABEL_206:
            ++v222;
          }
          while (v221 != v222);
          outlined consume of Path?(v396, v391, v393, v378, v220);
LABEL_246:
          uint64_t v258 = v389;
          if ((a4 & 1) == 0) {
            goto LABEL_252;
          }
          if (v168 >= v359[2]) {
            goto LABEL_325;
          }
          if (*(void *)(a3 + 16))
          {
            uint64_t v259 = specialized __RawDictionaryStorage.find<A>(_:)(v359[v168 + 4]);
            uint64_t v258 = v389;
            if (v260)
            {
              uint64_t v261 = *(void *)(*(void *)(a3 + 56) + 8 * v259);
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v261, 1, a2);
              uint64_t v262 = *(void *)(a2 + 32 + 8 * v261);
              swift_bridgeObjectRetain();
              if (v334 == 6)
              {
                uint64_t v263 = specialized static Text.Effect.PathInterpolator.SmoothPathGlyph.subcomponents(clusterPaths:keyCount:glyph:defaultIndex:position:relativePositions:stopSegment:foregroundColor:dilation:)(v389, v386, v168, v49, v375, v262, v218, v362, v357, v355, v356, v188, 0.0, 0.0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v446 = v263;
                long long v447 = 0u;
                long long v448 = 0u;
                long long v449 = 0u;
                long long v450 = 0u;
                long long v451 = 0u;
                long long v452 = 0u;
                uint64_t v453 = 0;
                char v454 = 4;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v169 = v409[2];
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v169);
                uint64_t v170 = &v446;
              }
              else
              {
                unint64_t v310 = swift_bridgeObjectRetain();
                specialized Text.Effect.PathInterpolator.SmoothPathGlyph.init(clusterPaths:keyCount:glyph:defaultIndex:position:relativePositions:stopSegment:foregroundColor:dilation:)(v310, v386, v168, v49, v375, v262, (uint64_t)v415, v218, v362, v357, v355, v356, v188, 0.0, 0.0);
                v455[0] = v415[0];
                v455[1] = v415[1];
                v455[2] = v415[2];
                v455[3] = v415[3];
                v455[4] = v415[4];
                v455[5] = v415[5];
                v455[6] = v415[6];
                char v456 = 2;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v169 = v409[2];
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v169);
                uint64_t v170 = v455;
              }
              goto LABEL_164;
            }
          }
LABEL_252:
          swift_bridgeObjectRetain();
          uint64_t v264 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4PathVs5NeverOTg503_s7d21UI4TextVAAE6EffectO16F189InterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAA0E0VSiXEfU14_SaySayAISgGGSiTf1cn_nTf4ngn_n(0, v386, v258, v168);
          swift_bridgeObjectRelease();
          float v425 = v357;
          float v426 = v355;
          float v427 = v356;
          float v428 = v188;
          uint64_t v429 = 0;
          uint64_t v430 = 0;
          double v431 = v218;
          double v432 = v362;
          uint64_t v433 = v375;
          uint64_t v434 = v264;
          if (v334 == 6)
          {
            v265 = Text.Effect.PathInterpolator.PathGlyph.split()();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v416 = v265;
            long long v417 = 0u;
            long long v418 = 0u;
            long long v419 = 0u;
            long long v420 = 0u;
            long long v421 = 0u;
            long long v422 = 0u;
            uint64_t v423 = 0;
            char v424 = 3;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v169 = v409[2];
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v169);
            uint64_t v170 = &v416;
          }
          else
          {
            *(float *)v435 = v357;
            *(float *)&v435[1] = v355;
            *(float *)&v435[2] = v356;
            *(float *)&v435[3] = v188;
            uint64_t v436 = 0;
            uint64_t v437 = 0;
            double v438 = v218;
            double v439 = v362;
            uint64_t v440 = v375;
            uint64_t v441 = v264;
            long long v442 = 0u;
            long long v443 = 0u;
            long long v444 = 0u;
            char v445 = 1;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v169 = v409[2];
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v169);
            uint64_t v170 = v435;
          }
LABEL_164:
          uint64_t v171 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v169, (uint64_t)v170);
          _ViewInputs.base.modify(v171, v172);
          swift_release();

          outlined consume of Path?(v396, v391, v393, v378, v220);
LABEL_165:
          char v369 = 0;
          if (++v168 == v358)
          {
            swift_bridgeObjectRelease();
            char v369 = 0;
            goto LABEL_276;
          }
          continue;
        }
      }
LABEL_268:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v311 = *(void *)(v364 + 16);
      if (v311)
      {
        *(void *)v410 = v36;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v311, 0);
        long long v72 = *(void **)v410;
        uint64_t v312 = v364 + 48;
        do
        {
          v313 = *(void **)(v312 - 16);
          uint64_t v399 = *(void *)(v312 - 8);
          uint64_t v314 = *(void *)v312;
          uint64_t v315 = *(void *)(v312 + 8);
          uint64_t v407 = *(unsigned int *)(v312 + 16);
          uint64_t v397 = *(void *)(v312 + 40);
          long long v403 = *(_OWORD *)(v312 + 24);
          *(void *)v410 = v72;
          unint64_t v316 = v72[2];
          unint64_t v317 = v72[3];
          id v318 = v313;
          swift_retain();
          if (v316 >= v317 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v317 > 1, v316 + 1, 1);
            long long v72 = *(void **)v410;
          }
          v72[2] = v316 + 1;
          v319 = &v72[15 * v316];
          v319[4] = v318;
          v319[5] = v399;
          v319[6] = v314;
          v319[7] = v315;
          v319[8] = v407;
          *(_OWORD *)(v319 + 9) = v403;
          v319[11] = v397;
          *((_OWORD *)v319 + 6) = 0u;
          *((_OWORD *)v319 + 7) = 0u;
          *((_OWORD *)v319 + 8) = 0u;
          *((unsigned char *)v319 + 144) = 0;
          v312 += 64;
          --v311;
        }
        while (v311);
        uint64_t v36 = (void *)MEMORY[0x263F8EE78];
      }
      else
      {
        long long v72 = v36;
      }
      swift_bridgeObjectRetain();
      double v158 = Text.Layout.Cluster.xrange.getter(v349, v350, v364);
      uint64_t v160 = v324;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v361 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v361[2] + 1, 1, v361);
      }
      uint64_t v32 = v363;
      unint64_t v162 = v361[2];
      unint64_t v161 = v361[3];
      int64_t v163 = v162 + 1;
      if (v162 >= v161 >> 1) {
        goto LABEL_285;
      }
LABEL_150:
      v361[2] = v163;
      int v164 = (double *)&v361[7 * v162];
      *((void *)v164 + 4) = v349;
      *((void *)v164 + 5) = v350;
      *((void *)v164 + 6) = v364;
      *((void *)v164 + 7) = v72;
LABEL_151:
      *((void *)v164 + 8) = v341;
      v164[9] = v158;
      *((void *)v164 + 10) = v160;
      ++v385;
      int64_t v38 = v351;
      uint64_t v26 = v346;
      if ((void *)v385 == v342) {
        goto LABEL_286;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v70 = v364;
    int64_t v71 = *(void *)(v364 + 16);
    if (v71)
    {
      *(void *)v410 = v36;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
      long long v72 = *(void **)v410;
      uint64_t v73 = v364 + 48;
      do
      {
        double v74 = *(void **)(v73 - 16);
        uint64_t v398 = *(void *)(v73 - 8);
        uint64_t v75 = *(void *)v73;
        uint64_t v76 = *(void *)(v73 + 8);
        uint64_t v404 = *(unsigned int *)(v73 + 16);
        uint64_t v394 = *(void *)(v73 + 40);
        long long v400 = *(_OWORD *)(v73 + 24);
        *(void *)v410 = v72;
        unint64_t v77 = v72[2];
        unint64_t v78 = v72[3];
        id v79 = v74;
        swift_retain();
        if (v77 >= v78 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v77 + 1, 1);
          long long v72 = *(void **)v410;
        }
        v72[2] = v77 + 1;
        CGFloat v80 = &v72[15 * v77];
        v80[4] = v79;
        v80[5] = v398;
        v80[6] = v75;
        v80[7] = v76;
        v80[8] = v404;
        *(_OWORD *)(v80 + 9) = v400;
        v80[11] = v394;
        *((_OWORD *)v80 + 6) = 0u;
        *((_OWORD *)v80 + 7) = 0u;
        *((_OWORD *)v80 + 8) = 0u;
        *((unsigned char *)v80 + 144) = 0;
        v73 += 64;
        --v71;
      }
      while (v71);
      uint64_t v36 = (void *)MEMORY[0x263F8EE78];
      uint64_t v70 = v364;
    }
    else
    {
      long long v72 = v36;
    }
    swift_bridgeObjectRetain();
    double v158 = Text.Layout.Cluster.xrange.getter(v349, v350, v70);
    uint64_t v160 = v159;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v361 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v361[2] + 1, 1, v361);
    }
    unint64_t v162 = v361[2];
    unint64_t v161 = v361[3];
    int64_t v163 = v162 + 1;
    uint64_t v32 = v363;
    if (v162 < v161 >> 1) {
      goto LABEL_150;
    }
LABEL_285:
    v325 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v161 > 1), v163, 1, v361);
    uint64_t v32 = v363;
    v361 = v325;
    goto LABEL_150;
  }
LABEL_286:
  v327 = v26;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (v387 >= *(void *)(v363 + 16))
  {
LABEL_327:
    __break(1u);
    goto LABEL_328;
  }
  uint64_t v328 = *(void *)(v363 + 56 * v387 + 80);
  swift_bridgeObjectRelease();

  return v328;
}

uint64_t Text.Layout.Cluster.glyphSlices.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v22 = *(void *)(a3 + 16);
  if (!v22) {
    return v3;
  }
  uint64_t v21 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v6 = v21 + (v4 << 6);
    uint64_t v8 = *(void *)(v6 + 48);
    uint64_t v7 = *(void *)(v6 + 56);
    uint64_t v9 = v7 - v8;
    if (v7 < v8) {
      break;
    }
    if (__OFSUB__(v7, v8)) {
      goto LABEL_25;
    }
    uint64_t v5 = *(void **)v6;
    uint64_t v10 = *(void *)(v6 + 40);
    if (v9)
    {
      uint64_t v26 = *(void *)(v6 + 8);
      long long v25 = *(_OWORD *)(v6 + 16);
      int v24 = *(_DWORD *)(v6 + 32);
      uint64_t v27 = v3;
      id v11 = v5;
      swift_retain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
      if (v9 < 1) {
        goto LABEL_26;
      }
      if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_27;
      }
      if (v7 <= v8) {
        goto LABEL_28;
      }
      uint64_t v23 = v5;
      uint64_t v12 = v27;
      while (1)
      {
        unint64_t v14 = *(void *)(v27 + 16);
        unint64_t v13 = *(void *)(v27 + 24);
        id v15 = v11;
        swift_retain();
        if (v14 >= v13 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        }
        *(void *)(v27 + 16) = v14 + 1;
        unint64_t v16 = v27 + (v14 << 6);
        *(void *)(v16 + 32) = v15;
        *(void *)(v16 + 40) = v26;
        *(_OWORD *)(v16 + 48) = v25;
        *(_DWORD *)(v16 + 64) = v24;
        *(void *)(v16 + 72) = v10;
        *(void *)(v16 + 80) = v8;
        *(void *)(v16 + 88) = v8 + 1;
        if (v7 == v8) {
          break;
        }
        if (v7 - 1 == v8)
        {
          uint64_t v3 = MEMORY[0x263F8EE78];
          uint64_t v5 = v23;
          goto LABEL_4;
        }
        if (v8 == 0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_23;
        }
        if (v7 < ++v8 + 1) {
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
      break;
    }
    swift_retain();
    id v17 = v5;
    uint64_t v12 = v3;
LABEL_4:
    ++v4;
    specialized Array.append<A>(contentsOf:)(v12);
    swift_release();

    if (v4 == v22)
    {
      swift_bridgeObjectRelease();
      return v28;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 3943982;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  _print_unlocked<A, B>(_:_:)();
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *Text.Effect.PathInterpolator.PathGlyph.split()()
{
  uint64_t v1 = type metadata accessor for CGPathFillRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = v0;
  uint64_t v5 = *((void *)v0 + 7);
  uint64_t v85 = v5;
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v6)
  {
    unint64_t v47 = (void *)MEMORY[0x263F8EE78];
    uint64_t v51 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v51) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
  uint64_t v84 = (void *)MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  int64_t v70 = v6;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  uint64_t v8 = 0;
  uint64_t v76 = v5 + 32;
  unsigned int v75 = *MEMORY[0x263F00040];
  uint64_t v10 = *(void (**)(char *, void, uint64_t))(v2 + 104);
  uint64_t v9 = v2 + 104;
  double v74 = v10;
  CGFloat v68 = *MEMORY[0x263F001A0];
  CGFloat v67 = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v66 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v65 = *(double *)(MEMORY[0x263F001A0] + 24);
  char v69 = (void (**)(char *, uint64_t))(v9 - 96);
  uint64_t v73 = v1;
  uint64_t v72 = v9;
  int64_t v71 = v4;
  while (2)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v76 + 40 * v8;
    uint64_t v13 = v11 + 1;
    double v14 = *(double *)v12;
    CGFloat v81 = *(double *)(v12 + 8);
    CGFloat v82 = v14;
    CGFloat v15 = *(double *)(v12 + 16);
    CGFloat v79 = *(double *)(v12 + 24);
    CGFloat v80 = v15;
    uint64_t v16 = *(unsigned __int8 *)(v12 + 32);
    v74(v4, v75, v1);
    uint64_t v17 = v16;
    uint64_t v78 = v13;
    switch(v16)
    {
      case 1:
        uint64_t v18 = *(void *)&v82;
        v89.origin.CGFloat x = v82;
        v89.size.CGFloat width = v80;
        v89.origin.CGFloat y = v81;
        v89.size.CGFloat height = v79;
        CGPathRef RoundedRect = CGPathCreateWithEllipseInRect(v89, 0);
        goto LABEL_23;
      case 2:
        uint64_t v18 = *(void *)&v82;
        CGFloat v20 = *(double *)(*(void *)&v82 + 16);
        CGFloat v21 = *(double *)(*(void *)&v82 + 24);
        CGFloat v22 = *(double *)(*(void *)&v82 + 32);
        CGFloat v23 = *(double *)(*(void *)&v82 + 40);
        double v24 = *(double *)(*(void *)&v82 + 48);
        double v25 = *(double *)(*(void *)&v82 + 56);
        char v26 = *(unsigned char *)(*(void *)&v82 + 64);
        swift_retain();
        v87.origin.CGFloat x = v20;
        v87.origin.CGFloat y = v21;
        v87.size.CGFloat width = v22;
        v87.size.CGFloat height = v23;
        double v27 = fabs(CGRectGetWidth(v87)) * 0.5;
        v88.origin.CGFloat x = v20;
        v88.origin.CGFloat y = v21;
        v88.size.CGFloat width = v22;
        v88.size.CGFloat height = v23;
        double v28 = fabs(CGRectGetHeight(v88)) * 0.5;
        if (v28 >= v27) {
          double v28 = v27;
        }
        if (v28 >= v24) {
          double v29 = v24;
        }
        else {
          double v29 = v28;
        }
        if (v28 >= v25) {
          double v30 = v25;
        }
        else {
          double v30 = v28;
        }
        BOOL v31 = v25 != 0.0;
        if (v24 != 0.0) {
          BOOL v31 = 1;
        }
        char v32 = (v26 & 1) != 0 && v31;
        CGPathRef RoundedRect = _CGPathCreateRoundedRect(v32, v20, v21, v22, v23, v29, v30);
        goto LABEL_23;
      case 3:
      case 4:
        goto LABEL_66;
      case 5:
        uint64_t v18 = *(void *)&v82;
        if (*(unsigned char *)(*(void *)&v82 + 16))
        {
          if (*(unsigned char *)(*(void *)&v82 + 16) == 1)
          {
            swift_retain();
          }
          else
          {
            uint64_t v36 = one-time initialization token for bufferCallbacks;
            swift_retain();
            if (v36 != -1) {
              swift_once();
            }
          }
          uint64_t v34 = RBPathCopyCGPath();
LABEL_30:
          id v33 = (id)v34;
          uint64_t v18 = *(void *)&v82;
        }
        else
        {
          unint64_t v35 = *(void **)(*(void *)&v82 + 24);
          if (!v35) {
            goto LABEL_65;
          }
          id v33 = v35;
          swift_retain();
        }
LABEL_31:
        uint64_t v77 = v17;
        unint64_t v37 = CGPathRef.componentsSeparated(using:)();

        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v38)
          {
LABEL_46:
            swift_bridgeObjectRelease();
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v38) {
            goto LABEL_46;
          }
        }
        uint64_t v83 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38 & ~(v38 >> 63), 0);
        if (v38 < 0)
        {
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x246123BF8);
        }
        uint64_t v39 = 0;
        uint64_t v7 = v83;
        do
        {
          if ((v37 & 0xC000000000000001) != 0) {
            double v40 = (const CGPath *)MEMORY[0x24C523D60](v39, v37);
          }
          else {
            double v40 = (const CGPath *)*(id *)(v37 + 8 * v39 + 32);
          }
          unint64_t v41 = v40;
          if (CGPathIsEmpty(v40))
          {

            uint64_t v42 = 0;
            char v43 = 6;
          }
          else
          {
            type metadata accessor for Path.PathBox();
            uint64_t v42 = swift_allocObject();
            *(_OWORD *)(v42 + 24) = 0u;
            *(_OWORD *)(v42 + 104) = 0u;
            *(_OWORD *)(v42 + 88) = 0u;
            *(_OWORD *)(v42 + 72) = 0u;
            *(_OWORD *)(v42 + 56) = 0u;
            *(_OWORD *)(v42 + 40) = 0u;
            *(unsigned char *)(v42 + 16) = 0;
            char v43 = 5;
            *(void *)(v42 + 24) = v41;
          }
          uint64_t v83 = v7;
          unint64_t v45 = *(void *)(v7 + 16);
          unint64_t v44 = *(void *)(v7 + 24);
          if (v45 >= v44 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
            uint64_t v7 = v83;
          }
          ++v39;
          *(void *)(v7 + 16) = v45 + 1;
          uint64_t v46 = v7 + 40 * v45;
          *(void *)(v46 + 32) = v42;
          *(void *)(v46 + 40) = 0;
          *(void *)(v46 + 48) = 0;
          *(void *)(v46 + 56) = 0;
          *(unsigned char *)(v46 + 64) = v43;
        }
        while (v38 != v39);
        swift_bridgeObjectRelease();
        uint64_t v18 = *(void *)&v82;
LABEL_47:
        uint64_t v4 = v71;
        uint64_t v1 = v73;
        (*v69)(v71, v73);
        outlined consume of Path.Storage(v18, *(uint64_t *)&v81, *(uint64_t *)&v80, *(uint64_t *)&v79, v77);
        unint64_t v47 = v84;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1);
          unint64_t v47 = v84;
        }
        uint64_t v8 = v78;
        unint64_t v49 = v47[2];
        unint64_t v48 = v47[3];
        if (v49 >= v48 >> 1)
        {
          uint64_t v50 = v78;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
          uint64_t v8 = v50;
          unint64_t v47 = v84;
        }
        _OWORD v47[2] = v49 + 1;
        v47[v49 + 4] = v7;
        uint64_t v7 = MEMORY[0x263F8EE78];
        if (v8 != v70) {
          continue;
        }
        outlined release of LinearGradient((uint64_t)&v85);
        uint64_t v51 = v47[2];
        if (!v51)
        {
LABEL_61:
          swift_bridgeObjectRelease();
          type metadata accessor for _DynamicPropertyBuffer?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.PathInterpolator.PathGlyph>, (uint64_t)&type metadata for Text.Effect.PathInterpolator.PathGlyph, MEMORY[0x263F8E0F8]);
          uint64_t v56 = (_OWORD *)swift_allocObject();
          uint64_t v57 = v64;
          long long v58 = *v64;
          long long v59 = v64[1];
          v56[1] = xmmword_2461B9DC0;
          v56[2] = v58;
          long long v60 = v57[2];
          long long v61 = v57[3];
          v56[3] = v59;
          v56[4] = v60;
          v56[5] = v61;
          outlined retain of Text.Effect.PathInterpolator.PathGlyph((uint64_t)v57);
          return v56;
        }
LABEL_55:
        uint64_t v52 = *(void *)(v47[4] + 16);
        if (v51 != 1)
        {
          uint64_t v53 = 5;
          do
          {
            uint64_t v54 = v53 - 3;
            if (__OFADD__(v53 - 4, 1)) {
              goto LABEL_64;
            }
            if (*(void *)(v47[v53] + 16) != v52) {
              goto LABEL_61;
            }
            ++v53;
          }
          while (v54 != v51);
        }
        long long v55 = v64;
        outlined retain of Text.Effect.PathInterpolator.PathGlyph((uint64_t)v64);
        uint64_t v56 = (_OWORD *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextVAGE6EffectO16PathInterpolatorV0H5GlyphVs5NeverOTg503_s7d3UI4f5VAAE6g3O16hi4V0E5J25V5splitSayAIGyFAISiXEfU1_SaySayAG0H0VGGAOTf1cn_nTf4ngg_n(0, v52, (uint64_t)v47, v55);
        outlined release of Text.Effect.PathInterpolator.PathGlyph((uint64_t)v55);
        swift_bridgeObjectRelease();
        return v56;
      case 6:
        v90.origin.CGFloat x = v68;
        v90.origin.CGFloat y = v67;
        v90.size.CGFloat width = v66;
        v90.size.CGFloat height = v65;
        uint64_t v34 = (uint64_t)CGPathCreateWithRect(v90, 0);
        goto LABEL_30;
      default:
        uint64_t v18 = *(void *)&v82;
        v86.origin.CGFloat x = v82;
        v86.size.CGFloat width = v80;
        v86.origin.CGFloat y = v81;
        v86.size.CGFloat height = v79;
        CGPathRef RoundedRect = CGPathCreateWithRect(v86, 0);
LABEL_23:
        id v33 = RoundedRect;
        goto LABEL_31;
    }
  }
}

uint64_t Path.componentsSeparated(using:)()
{
  CGPathRef v0 = Path.cgPath.getter();
  unint64_t v1 = CGPathRef.componentsSeparated(using:)();

  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v13;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        int64_t v6 = (const CGPath *)MEMORY[0x24C523D60](v4, v1);
      }
      else {
        int64_t v6 = (const CGPath *)*(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v7 = v6;
      if (CGPathIsEmpty(v6))
      {

        uint64_t v8 = 0;
        char v9 = 6;
      }
      else
      {
        type metadata accessor for Path.PathBox();
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 104) = 0u;
        *(_OWORD *)(v8 + 88) = 0u;
        *(_OWORD *)(v8 + 72) = 0u;
        *(_OWORD *)(v8 + 56) = 0u;
        *(_OWORD *)(v8 + 40) = 0u;
        *(unsigned char *)(v8 + 16) = 0;
        char v9 = 5;
        *(void *)(v8 + 24) = v7;
      }
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      ++v4;
      *(void *)(v13 + 16) = v11 + 1;
      uint64_t v12 = v13 + 40 * v11;
      *(void *)(v12 + 32) = v8;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(unsigned char *)(v12 + 64) = v9;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextV6LayoutVAFE7ClusterV_SnySiGs5NeverOTg503_s7d3UI4f57VAAE6EffectO12BaseFragmentV11glyphRanges3forSaySnySiGGAC6g5VAAE7H22V_tFAjM8RunSliceVXEfU_AhFE0M0O0oP0VTf1cn_nTf4xg_n(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v45 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t v5 = 0;
  uint64_t v6 = v45;
  int64_t v38 = v3;
  uint64_t v39 = a1 + 32;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v46 = v7;
  do
  {
    uint64_t v8 = v5;
    uint64_t v9 = v39 + (v5 << 6);
    uint64_t v40 = v8 + 1;
    uint64_t v41 = v6;
    unint64_t v10 = *(void **)v9;
    CFIndex v44 = *(void *)(v9 + 8);
    double v11 = *(double *)(v9 + 16);
    double v12 = *(double *)(v9 + 24);
    uint64_t v42 = *(void *)(v9 + 56);
    uint64_t v43 = *(void *)(v9 + 48);
    CFIndex v13 = *(void *)(v7 + 16);
    swift_retain();
    id v14 = v10;
    outlined retain of ViewTransform((uint64_t)&v46);
    outlined retain of ViewTransform((uint64_t)&v46);
    id v15 = v14;
    swift_retain();
    uint64_t v16 = 0;
    while (1)
    {
      if (v13 == *(void *)(v7 + 24)) {
        goto LABEL_21;
      }
      uint64_t v18 = *(void **)(v7 + 32);
      uint64_t v17 = *(void *)(v7 + 40);
      double v20 = *(double *)(v7 + 56);
      double v19 = *(double *)(v7 + 64);
      if (*(unsigned char *)(v7 + 48))
      {
        outlined copy of Text.Layout.Line.Line(v18, v17, 1);
        id v21 = (id)_NSTextLineFragmentGetCTLine(v18);
        if (!v21) {
          goto LABEL_35;
        }
        id v22 = v21;
        outlined consume of Text.Layout.Line.Line(v18, v17, 1);
        uint64_t v18 = v22;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v18, v17, 0);
        outlined copy of Text.Layout.Line.Line(v18, v17, 0);

        swift_release();
      }
      if (v13 < *(void *)(v7 + 16) || v13 >= *(void *)(v7 + 24))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        swift_release();

        __break(1u);
        return;
      }
      CGFloat v23 = (id)_CTLineGetRunAtIndex((const __CTLine *)v18, v13);
      double v24 = (id)_CTLineGetRunAtIndex((const __CTLine *)v15, v44);

      if (v23 == v24 && v20 == v11 && v19 == v12) {
        break;
      }
      swift_retain();
      double v25 = v18;
      char v26 = (id)_CTLineGetRunAtIndex(v25, v13);
      CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v26);

      double v28 = (id)_CTLineGetRunAtIndex(v25, v13);
      CFIndex v29 = CTRunGetGlyphCount((CTRunRef)v28);

      if (v29 < 0) {
        goto LABEL_29;
      }
      double v30 = (id)_CTLineGetRunAtIndex(v25, v13);
      CFIndex v31 = CTRunGetGlyphCount((CTRunRef)v30);
      swift_release_n();

      if (GlyphCount < 0 || v31 < GlyphCount) {
        goto LABEL_30;
      }
      ++v13;
      BOOL v32 = __OFADD__(v16, GlyphCount);
      v16 += GlyphCount;
      if (v32) {
        goto LABEL_31;
      }
    }

    swift_release();
LABEL_21:
    outlined release of ViewTransform((uint64_t)&v46);
    outlined release of ViewTransform((uint64_t)&v46);
    swift_release_n();

    uint64_t v33 = v43 + v16;
    if (__OFADD__(v43, v16)) {
      goto LABEL_32;
    }
    uint64_t v34 = v42 + v16;
    if (__OFADD__(v42, v16)) {
      goto LABEL_33;
    }
    if (v34 < v33) {
      goto LABEL_34;
    }
    uint64_t v6 = v41;
    unint64_t v36 = *(void *)(v41 + 16);
    unint64_t v35 = *(void *)(v41 + 24);
    if (v36 >= v35 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
      uint64_t v6 = v41;
    }
    *(void *)(v6 + 16) = v36 + 1;
    uint64_t v37 = v6 + 16 * v36;
    *(void *)(v37 + 32) = v33;
    *(void *)(v37 + 40) = v34;
    uint64_t v5 = v40;
  }
  while (v40 != v38);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So25RBDisplayListInterpolatorCs5NeverOTg5033_s7SwiftUI4TextVAAE6EffectO16Pathf125V12InterpolatedV8position6slices17relativePositions6bounds12displayScaleAISo7CGPointV_SayAC6LayoutV8RunSliceVGSayAPGSo6CGRectp30CoreGraphics7CGFloatVtcfcSo013dE11F0CSiXEfU0_SaySo0dE8Contents_pGTf1cn_nTf4ng_n(uint64_t result, int64_t a2, uint64_t a3)
{
  int64_t v3 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_25;
  }
  uint64_t v4 = result;
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = self;
    id v13 = (id)result;
    if (a2 < v4 || v3 < 0) {
      goto LABEL_26;
    }
    uint64_t v6 = a3 + 32;
    int64_t v7 = a2;
    int64_t v8 = v4;
    while (v4 != v7)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t result = MEMORY[0x24C523D60](v8, a3);
        int64_t v9 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_21;
        }
        uint64_t v10 = result;
        uint64_t v11 = MEMORY[0x24C523D60](v8 + 1, a3);
      }
      else
      {
        if (v8 < 0) {
          goto LABEL_22;
        }
        unint64_t v12 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v8 >= v12) {
          goto LABEL_23;
        }
        uint64_t v10 = *(void *)(v6 + 8 * v8);
        int64_t v9 = v8 + 1;
        uint64_t result = swift_unknownObjectRetain();
        if (v8 + 1 >= v12) {
          goto LABEL_24;
        }
        uint64_t v11 = *(void *)(v6 + 8 * v9);
        swift_unknownObjectRetain();
      }
      objc_msgSend(v13, sel_newInterpolatorWithFrom_to_options_, v10, v11, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v8 < v4 || v8 >= a2) {
        goto LABEL_20;
      }
      --v7;
      int64_t v8 = v9;
      uint64_t v6 = a3 + 32;
      if (v4 == v7) {
        return v15;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say7SwiftUI4PathVGs5NeverOTg503_s7d21UI4TextVAAE6EffectO16f163InterpolatorV06SmoothE5GlyphV13subcomponents12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationSayAIGSayZ102AA0E0VSgGG_S3iSo7CGPointVSayA_GAE20StopMarkerCollectionV0U0VAA0W0V8ResolvedVSo6CGSizeVtFZSayAVGSiXEfU_SaySayAISgGGSiTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = type metadata accessor for CGPathFillRule();
  uint64_t v9 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  uint64_t v39 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a2;
  uint64_t v11 = a2 - a1;
  if (!__OFSUB__(a2, a1))
  {
    if (!v11) {
      return;
    }
    uint64_t v51 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0) {
      goto LABEL_26;
    }
    if (a4 < 0) {
      goto LABEL_27;
    }
    v32[1] = v4;
    uint64_t v12 = v51;
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v37 = a1;
    uint64_t v38 = 40 * a4;
    unsigned int v36 = *MEMORY[0x263F00040];
    uint64_t v34 = (void (**)(char *, uint64_t))(v9 + 8);
    unint64_t v35 = (void (**)(char *, void, uint64_t))(v9 + 104);
    if (v13 <= a1) {
      uint64_t v13 = a1;
    }
    uint64_t v14 = v13 - a1;
    uint64_t v16 = v40;
    uint64_t v15 = v41;
    if (v41 <= a1) {
      uint64_t v15 = a1;
    }
    uint64_t v17 = v15 - a1;
    uint64_t v18 = a3 + 8 * a1 + 32;
    uint64_t v33 = a4;
    while ((a1 & 0x8000000000000000) == 0)
    {
      if (!v14) {
        goto LABEL_21;
      }
      uint64_t v19 = *(void *)v18;
      if (*(void *)(*(void *)v18 + 16) <= a4) {
        goto LABEL_22;
      }
      uint64_t v42 = v18;
      uint64_t v43 = v14;
      uint64_t v44 = v17;
      uint64_t v45 = v11;
      uint64_t v20 = v19 + v38;
      int v21 = *(unsigned __int8 *)(v20 + 64);
      if (v21 == 255) {
        goto LABEL_28;
      }
      uint64_t v22 = v12;
      CGFloat v23 = (uint64_t *)(v20 + 32);
      uint64_t v25 = v23[2];
      uint64_t v24 = v23[3];
      uint64_t v27 = v23[1];
      uint64_t v46 = *v23;
      uint64_t v26 = v46;
      uint64_t v47 = v27;
      uint64_t v48 = v25;
      uint64_t v49 = v24;
      char v50 = v21;
      double v28 = v39;
      (*v35)(v39, v36, v16);
      outlined copy of Path.Storage(v26, v27, v25, v24, v21);
      uint64_t v29 = Path.componentsSeparated(using:)();
      outlined consume of Path?(v26, v27, v25, v24, v21);
      (*v34)(v28, v16);
      uint64_t v12 = v22;
      uint64_t v51 = v22;
      unint64_t v31 = *(void *)(v22 + 16);
      unint64_t v30 = *(void *)(v22 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v12 = v51;
      }
      *(void *)(v12 + 16) = v31 + 1;
      *(void *)(v12 + 8 * v31 + 32) = v29;
      a1 = v37;
      if (v41 < v37) {
        goto LABEL_23;
      }
      if (!v44) {
        goto LABEL_24;
      }
      uint64_t v17 = v44 - 1;
      uint64_t v14 = v43 - 1;
      uint64_t v18 = v42 + 8;
      uint64_t v11 = v45 - 1;
      a4 = v33;
      if (v45 == 1) {
        return;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7CGPointVG_7SwiftUI4TextVAIE6EffectO9StopIndexVs5NeverOTg503_s7e3UI4g5VAAE6h190O16PathInterpolatorV06SmoothE5GlyphV13subcomponents12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationSayAIGSaySayAA0E0VSgGG_S3iSo7d11VSayA_GAE20I65MarkerCollectionV0U0VAA0W0V8ResolvedVSo6CGSizeVtFZAE0zP0VA_XEfU0_AM0I16MarkerCollectionV7SegmentVAGTf1cn_nTf4ngx_nTm(uint64_t a1, uint64_t a2, double a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (!v4) {
    return result;
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  uint64_t v8 = 0;
  uint64_t result = v23;
  uint64_t v9 = a1 + 32;
  unint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = a2 + 32;
  while (1)
  {
    double v12 = 1.0;
    if (v10) {
      break;
    }
    unint64_t v18 = -2;
LABEL_19:
    uint64_t v24 = result;
    unint64_t v20 = *(void *)(result + 16);
    unint64_t v19 = *(void *)(result + 24);
    if (v20 >= v19 >> 1)
    {
      uint64_t v22 = v9;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
      uint64_t v9 = v22;
      uint64_t result = v24;
    }
    ++v8;
    *(void *)(result + 16) = v20 + 1;
    uint64_t v21 = result + 16 * v20;
    *(void *)(v21 + 32) = v18;
    *(double *)(v21 + 40) = v12;
    if (v8 == v4) {
      return result;
    }
  }
  unint64_t v13 = 0;
  double v14 = *(double *)(v9 + 16 * v8) + a3;
  unint64_t v15 = v10;
  do
  {
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v13 + (v15 >> 1);
    if (__OFADD__(v13, v15 >> 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v10) {
      goto LABEL_24;
    }
    v15 += ~v16;
    if (*(double *)(v11 + 8 * v17) < v14) {
      unint64_t v13 = v17 + 1;
    }
    else {
      unint64_t v15 = v16;
    }
  }
  while ((uint64_t)v15 > 0);
  unint64_t v18 = v10 - 2;
  if (v13 == v10) {
    goto LABEL_19;
  }
  if (!v13)
  {
    unint64_t v18 = 0;
    double v12 = 0.0;
    goto LABEL_19;
  }
  unint64_t v18 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v18 >= v10)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v13 < v10)
  {
    double v12 = (v14 - *(double *)(v11 + 8 * v18)) / (*(double *)(v11 + 8 * v13) - *(double *)(v11 + 8 * v18));
    goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextVAGE6EffectO8FlatPathVs5NeverOTg503_s7d3UI4f5VAAE6g3O16i241InterpolatorV06SmoothE5GlyphV12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationAISaySayAA0E0VSgGG_S3iSo7CGPointVSayAYGAE20StopMarkerCollectionV0T0VAA0V0V8ResolvedVSo6CGSizeVtcfcAE04H10E0VSiXEfU_SaySayAG0I0VSgGGSiTf1cn_nTf4ngn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v43 = a2;
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1)) {
    goto LABEL_42;
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v9 = a1;
    uint64_t v53 = MEMORY[0x263F8EE78];
    uint64_t v10 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (a4 < 0)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v37[1] = v4;
    uint64_t v42 = 40 * a4;
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v6 = v53;
    uint64_t v12 = *MEMORY[0x263F63948];
    uint64_t v40 = *(void *)(MEMORY[0x263F63948] + 8);
    uint64_t v41 = v12;
    if (v11 <= v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v11;
    }
    uint64_t v14 = v13 - v9;
    uint64_t v15 = v43;
    if (v43 <= v9) {
      uint64_t v15 = v9;
    }
    uint64_t v16 = v15 - v9;
    uint64_t v17 = a3 + 8 * v9 + 32;
    uint64_t v38 = a4;
    uint64_t v39 = v9;
    while (2)
    {
      if (v5)
      {
        if (v9 < 0) {
          goto LABEL_36;
        }
        if (v14)
        {
          uint64_t v18 = *(void *)v17;
          if (*(void *)(*(void *)v17 + 16) <= a4) {
            goto LABEL_38;
          }
          uint64_t v44 = v5;
          uint64_t v19 = v18 + v42;
          int v20 = *(unsigned __int8 *)(v19 + 64);
          if (v20 != 255)
          {
            uint64_t v45 = v37;
            uint64_t v22 = *(void *)(v19 + 32);
            uint64_t v21 = *(void *)(v19 + 40);
            uint64_t v24 = *(void *)(v19 + 48);
            uint64_t v23 = *(void *)(v19 + 56);
            uint64_t v47 = v24;
            uint64_t v48 = v21;
            uint64_t v46 = v23;
            uint64_t v51 = MEMORY[0x263F8EE78];
            uint64_t v52 = MEMORY[0x263F8EE78];
            MEMORY[0x270FA5388](v10);
            uint64_t v35 = (uint64_t)&v51;
            unsigned int v36 = &v52;
            uint64_t v25 = swift_allocObject();
            *(void *)(v25 + 16) = closure #1 in Text.Effect.FlatPath.init(_:)partial apply;
            *(void *)(v25 + 24) = &v37[-4];
            uint64_t v26 = v25;
            switch(v20)
            {
              case 1:
                RBPathMakeEllipse();
                goto LABEL_28;
              case 2:
                outlined copy of Path.Storage(v22, v48, v47, v46, 2u);
                RBPathMakeRoundedRect();
                goto LABEL_28;
              case 3:
              case 4:
                LODWORD(v36) = 0;
                uint64_t v35 = 447;
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                JUMPOUT(0x246124CD8);
              case 5:
                if (!*(unsigned char *)(v22 + 16))
                {
                  if (!*(void *)(v22 + 24)) {
                    goto LABEL_46;
                  }
LABEL_22:
                  outlined copy of Path.Storage(v22, v48, v47, v46, 5u);
                  goto LABEL_27;
                }
                if (*(unsigned char *)(v22 + 16) == 1) {
                  goto LABEL_22;
                }
                outlined copy of Path.Storage(v22, v48, v47, v46, 5u);
                if (one-time initialization token for bufferCallbacks != -1) {
                  swift_once();
                }
LABEL_27:
                RBPathRetain();
LABEL_28:
                uint64_t v49 = closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)specialized partial apply;
                uint64_t v50 = v26;
                swift_retain();
                RBPathApply();
                swift_release();
                RBPathRelease();
                char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
                swift_release();
                if (isEscapingClosureAtFileLocation) {
                  goto LABEL_39;
                }
                uint64_t v29 = v51;
                uint64_t v28 = v52;
                uint64_t v30 = *(void *)(v52 + 16);
                uint64_t v10 = outlined consume of Path?(v22, v48, v47, v46, v20);
                uint64_t v53 = v6;
                unint64_t v32 = *(void *)(v6 + 16);
                unint64_t v31 = *(void *)(v6 + 24);
                if (v32 >= v31 >> 1)
                {
                  uint64_t v10 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
                  uint64_t v6 = v53;
                }
                *(void *)(v6 + 16) = v32 + 1;
                uint64_t v33 = (void *)(v6 + 24 * v32);
                v33[4] = v29;
                v33[5] = v30;
                v33[6] = v28;
                uint64_t v9 = v39;
                if (v43 < v39) {
                  goto LABEL_40;
                }
                if (!v16) {
                  goto LABEL_41;
                }
                --v16;
                --v14;
                v17 += 8;
                uint64_t v5 = v44 - 1;
                a4 = v38;
                if (v44 == 1) {
                  return v6;
                }
                continue;
              case 6:
                goto LABEL_28;
              default:
                RBPathMakeRect();
                goto LABEL_28;
            }
          }
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
        }
      }
      else
      {
        __break(1u);
LABEL_36:
        __break(1u);
      }
      break;
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextVAGE6EffectO16PathInterpolatorV0H5GlyphVs5NeverOTg503_s7d3UI4f5VAAE6g3O16hi4V0E5J25V5splitSayAIGyFAISiXEfU1_SaySayAG0H0VGGAOTf1cn_nTf4ngg_n(uint64_t result, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v4) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v46 = MEMORY[0x263F8EE78];
  uint64_t v8 = result;
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v8 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    long long v38 = a4[1];
    long long v39 = *a4;
    long long v37 = a4[2];
    uint64_t v11 = *((void *)a4 + 6);
    uint64_t result = v46;
    int64_t v12 = *(void *)(a3 + 16);
    uint64_t v35 = a3 + 32;
    int64_t v36 = v12;
    uint64_t v33 = v11;
    uint64_t v34 = v4;
    while (v10 != v4)
    {
      uint64_t v42 = v10;
      if (v12)
      {
        uint64_t v40 = result;
        uint64_t v44 = MEMORY[0x263F8EE78];
        uint64_t v41 = v9;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
        if (v9 < 0) {
          goto LABEL_23;
        }
        uint64_t v13 = v44;
        uint64_t v43 = 40 * v9;
        uint64_t v14 = v35;
        int64_t v15 = v12;
        while (v9 < *(void *)(*(void *)v14 + 16))
        {
          uint64_t v16 = *(void *)v14 + v43;
          uint64_t v17 = *(void *)(v16 + 32);
          uint64_t v18 = *(void *)(v16 + 40);
          uint64_t v20 = *(void *)(v16 + 48);
          uint64_t v19 = *(void *)(v16 + 56);
          unsigned __int8 v21 = *(unsigned char *)(v16 + 64);
          uint64_t v22 = v13;
          uint64_t result = outlined copy of Path.Storage(v17, v18, v20, v19, v21);
          uint64_t v13 = v22;
          uint64_t v45 = v22;
          unint64_t v23 = *(void *)(v22 + 16);
          unint64_t v24 = *(void *)(v13 + 24);
          unint64_t v25 = v23 + 1;
          if (v23 >= v24 >> 1)
          {
            uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v23 + 1, 1);
            unint64_t v25 = v23 + 1;
            uint64_t v9 = v41;
            uint64_t v13 = v45;
          }
          *(void *)(v13 + 16) = v25;
          uint64_t v26 = v13 + 40 * v23;
          *(void *)(v26 + 32) = v17;
          *(void *)(v26 + 40) = v18;
          *(void *)(v26 + 48) = v20;
          *(void *)(v26 + 56) = v19;
          *(unsigned char *)(v26 + 64) = v21;
          v14 += 8;
          if (!--v15)
          {
            uint64_t v27 = v13;
            uint64_t v11 = v33;
            uint64_t v4 = v34;
            uint64_t result = v40;
            goto LABEL_16;
          }
        }
        __break(1u);
        break;
      }
      uint64_t v27 = MEMORY[0x263F8EE78];
LABEL_16:
      uint64_t v47 = result;
      unint64_t v29 = *(void *)(result + 16);
      unint64_t v28 = *(void *)(result + 24);
      uint64_t v30 = v11;
      uint64_t v31 = result;
      swift_bridgeObjectRetain();
      uint64_t result = v31;
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t result = v47;
      }
      uint64_t v10 = v42 + 1;
      *(void *)(result + 16) = v29 + 1;
      uint64_t v32 = result + (v29 << 6);
      *(_OWORD *)(v32 + 32) = v39;
      *(_OWORD *)(v32 + 48) = v38;
      *(_OWORD *)(v32 + 64) = v37;
      *(void *)(v32 + 80) = v30;
      *(void *)(v32 + 88) = v27;
      ++v9;
      uint64_t v11 = v30;
      int64_t v12 = v36;
      if (v42 + 1 == v4) {
        return result;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySdG_7SwiftUI4TextVAGE6EffectO12BaseFragmentVs5NeverOTg503_s7d3UI4f5VAAE6g185O16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAE04hX9VSdXEfU1_AK0oP0V0R0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v20;
  int64_t v7 = (double *)(a1 + 32);
  uint64_t v17 = a2;
  while (*(void *)(a2 + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v7);
    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v9 = *(void *)(a2 + 56) + 56 * result;
    uint64_t v11 = *(void *)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    long long v19 = *(_OWORD *)(v9 + 16);
    uint64_t v13 = *(void *)(v9 + 32);
    uint64_t v12 = *(void *)(v9 + 40);
    uint64_t v18 = *(void *)(v9 + 48);
    unint64_t v14 = *(void *)(v20 + 16);
    unint64_t v15 = *(void *)(v20 + 24);
    swift_retain();
    swift_retain();
    unint64_t result = swift_retain();
    if (v14 >= v15 >> 1) {
      unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v14 + 1, 1);
    }
    *(void *)(v20 + 16) = v14 + 1;
    uint64_t v16 = v20 + 56 * v14;
    *(void *)(v16 + 32) = v11;
    *(void *)(v16 + 40) = v10;
    *(_OWORD *)(v16 + 48) = v19;
    *(void *)(v16 + 64) = v13;
    *(void *)(v16 + 72) = v12;
    a2 = v17;
    *(void *)(v16 + 80) = v18;
    ++v7;
    if (!--v2) {
      return v3;
    }
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_12CoreGraphics7CGFloatVs5NeverOTg50173_s7SwiftUI4TextVAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12d9Graphics7F24VAG7OptionsVtFAWSiXEfU8_Say0I2UI0K0VAME0M0O12BaseFragmentVGSiTf1cn_nTf4ngn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v9 = result;
  uint64_t v21 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v21;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10 <= v9) {
      uint64_t v10 = v9;
    }
    uint64_t v11 = v10 - v9;
    uint64_t v12 = a3 + 56 * v9 + 32;
    while ((v9 & 0x8000000000000000) == 0)
    {
      if (!v11) {
        goto LABEL_18;
      }
      long long v13 = *(_OWORD *)(v12 + 16);
      v19[0] = *(_OWORD *)v12;
      v19[1] = v13;
      long long v19[2] = *(_OWORD *)(v12 + 32);
      uint64_t v20 = *(void *)(v12 + 48);
      uint64_t v14 = a4 + v20;
      if (__OFADD__(a4, v20)) {
        goto LABEL_19;
      }
      if (__OFADD__(v14, 1)) {
        goto LABEL_20;
      }
      if (v14 + 1 < v14) {
        goto LABEL_21;
      }
      outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)v19);
      Text.Effect.BaseFragment.typographicBounds(for:)(v14, v14 + 1, (uint64_t)v18);
      unint64_t result = outlined release of Text.Effect.BaseFragment((uint64_t)v19);
      uint64_t v21 = v5;
      unint64_t v16 = *(void *)(v5 + 16);
      unint64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v5 = v21;
      }
      uint64_t v17 = v18[0];
      *(void *)(v5 + 16) = v16 + 1;
      *(void *)(v5 + 8 * v16 + 32) = v17;
      --v11;
      v12 += 56;
      if (!--v4) {
        return v5;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7CGPointVs5NeverOTg50210_s7SwiftUI4TextVAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFSo7D10VSiXEfU12_Say12CoreGraphics7CGFloatVGAOSaySayAHGGSiSo6CGSizeVTf1cn_nTf4ngggnn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_31;
  }
  uint64_t v9 = result;
  unint64_t result = MEMORY[0x263F8EE78];
  if (v8)
  {
    uint64_t v41 = v9;
    uint64_t v42 = MEMORY[0x263F8EE78];
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (a6 < 0)
    {
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    uint64_t v17 = v41;
    if (a2 < v41 || v8 < 0) {
      goto LABEL_33;
    }
    uint64_t v18 = 0;
    unint64_t result = v42;
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v20 = 8 * v41 + 32;
    uint64_t v21 = a3 + v20;
    uint64_t v22 = a4 + v20;
    uint64_t v23 = a5 + v20;
    if (v19 <= v41) {
      uint64_t v19 = v41;
    }
    uint64_t v24 = v19 - v41;
    if (*(void *)(a4 + 16) <= v41) {
      uint64_t v25 = v41;
    }
    else {
      uint64_t v25 = *(void *)(a4 + 16);
    }
    uint64_t v26 = v25 - v41;
    if (*(void *)(a5 + 16) <= v41) {
      uint64_t v27 = v41;
    }
    else {
      uint64_t v27 = *(void *)(a5 + 16);
    }
    uint64_t v28 = v27 - v41;
    while (v8 != v18)
    {
      if (v17 < 0) {
        goto LABEL_26;
      }
      if (v24 == v18) {
        goto LABEL_27;
      }
      if (v26 == v18) {
        goto LABEL_28;
      }
      if (v28 == v18) {
        goto LABEL_29;
      }
      uint64_t v29 = *(void *)(v23 + 8 * v18);
      if (*(void *)(v29 + 16) <= a6) {
        goto LABEL_30;
      }
      double v30 = *(double *)(v21 + 8 * v18);
      double v31 = *(double *)(v22 + 8 * v18);
      uint64_t v32 = v29 + 16 * a6;
      double v33 = *(double *)(v32 + 32);
      double v34 = *(double *)(v32 + 40);
      uint64_t v43 = result;
      unint64_t v36 = *(void *)(result + 16);
      unint64_t v35 = *(void *)(result + 24);
      if (v36 >= v35 >> 1)
      {
        uint64_t v39 = v22;
        uint64_t v40 = v21;
        uint64_t v38 = v23;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v23 = v38;
        uint64_t v22 = v39;
        uint64_t v21 = v40;
        uint64_t v17 = v41;
        unint64_t result = v43;
      }
      ++v18;
      *(void *)(result + 16) = v36 + 1;
      uint64_t v37 = result + 16 * v36;
      *(double *)(v37 + 32) = v33 - v30 - a7;
      *(double *)(v37 + 40) = -(v34 - v31 - a8);
      if (v8 == v18) {
        return result;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextV6LayoutV8RunSliceVs5NeverOTg503_s7d3UI4f195VAAE6EffectO16PathInterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAC6g2V8hI10VSiXEfU13_SaySayAkGE7ClusterVGGS2iTf1cn_nTf4ngnn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = result;
  uint64_t v5 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v5) {
    return v6;
  }
  uint64_t v35 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (a4 < 0) {
    goto LABEL_23;
  }
  if ((a5 & 0x8000000000000000) == 0)
  {
    if (a2 < v31 || v5 < 0) {
      goto LABEL_25;
    }
    uint64_t v29 = a4;
    uint64_t v6 = v35;
    uint64_t v11 = *(void *)(a3 + 16);
    if (v11 <= v31) {
      uint64_t v11 = v31;
    }
    uint64_t v12 = v11 - v31;
    uint64_t v13 = a3 + 8 * v31 + 32;
    uint64_t v30 = a5;
    while ((v31 & 0x8000000000000000) == 0)
    {
      if (!v12) {
        goto LABEL_19;
      }
      if (*(void *)(*(void *)v13 + 16) <= a4) {
        goto LABEL_20;
      }
      uint64_t v14 = (void *)(*(void *)v13 + 24 * a4);
      uint64_t v15 = v14[4];
      uint64_t v16 = v14[5];
      uint64_t v17 = v14[6];
      swift_bridgeObjectRetain();
      uint64_t v18 = Text.Layout.Cluster.glyphSlices.getter(v15, v16, v17);
      unint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v18 + 16) <= a5) {
        goto LABEL_21;
      }
      uint64_t v19 = v18 + (a5 << 6);
      uint64_t v20 = *(void **)(v19 + 32);
      uint64_t v21 = *(void *)(v19 + 40);
      uint64_t v22 = *(void *)(v19 + 48);
      uint64_t v23 = *(void *)(v19 + 56);
      int v33 = *(_DWORD *)(v19 + 64);
      uint64_t v24 = *(void *)(v19 + 72);
      uint64_t v32 = *(void *)(v19 + 80);
      uint64_t v34 = *(void *)(v19 + 88);
      swift_retain();
      id v25 = v20;
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v27 = *(void *)(v35 + 16);
      unint64_t v26 = *(void *)(v35 + 24);
      if (v27 >= v26 >> 1) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      }
      *(void *)(v35 + 16) = v27 + 1;
      uint64_t v28 = v35 + (v27 << 6);
      *(void *)(v28 + 32) = v25;
      *(void *)(v28 + 40) = v21;
      *(void *)(v28 + 48) = v22;
      *(void *)(v28 + 56) = v23;
      *(_DWORD *)(v28 + 64) = v33;
      *(void *)(v28 + 72) = v24;
      *(void *)(v28 + 80) = v32;
      --v12;
      v13 += 8;
      *(void *)(v28 + 88) = v34;
      --v5;
      a4 = v29;
      a5 = v30;
      if (!v5) {
        return v6;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4PathVs5NeverOTg503_s7d21UI4TextVAAE6EffectO16F189InterpolatorV3MapV15computeFragment12quantization11stopMarkers10defaultKey7optionsAG0I0VAE19QuantizationContextV_AE20StopMarkerCollectionV12CoreGraphics7CGFloatVAG7OptionsVtFAA0E0VSiXEfU14_SaySayAISgGGSiTf1cn_nTf4ngn_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (!__OFSUB__(a2, result))
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (!v4) {
      return v5;
    }
    uint64_t v8 = result;
    uint64_t v28 = MEMORY[0x263F8EE78];
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      goto LABEL_28;
    }
    if (a4 < 0) {
      goto LABEL_29;
    }
    uint64_t v22 = a4;
    uint64_t v5 = v28;
    uint64_t v9 = *(void *)(a3 + 16);
    uint64_t v23 = 40 * a4;
    if (v9 <= v8) {
      uint64_t v9 = v8;
    }
    uint64_t v10 = v9 - v8;
    uint64_t v11 = a2;
    if (a2 <= v8) {
      uint64_t v11 = v8;
    }
    uint64_t v12 = v11 - v8;
    uint64_t v13 = a3 + 8 * v8 + 32;
    while (v4)
    {
      if (v8 < 0) {
        goto LABEL_22;
      }
      if (!v10) {
        goto LABEL_23;
      }
      if (*(void *)(*(void *)v13 + 16) <= a4) {
        goto LABEL_24;
      }
      uint64_t v25 = v4;
      uint64_t v14 = *(void *)v13 + v23;
      int v15 = *(unsigned __int8 *)(v14 + 64);
      if (v15 == 255) {
        goto LABEL_30;
      }
      uint64_t v16 = *(void *)(v14 + 32);
      uint64_t v17 = *(void *)(v14 + 48);
      uint64_t v26 = *(void *)(v14 + 56);
      uint64_t v27 = *(void *)(v14 + 40);
      unint64_t result = outlined copy of Path.Storage(v16, v27, v17, v26, v15);
      unint64_t v19 = *(void *)(v28 + 16);
      unint64_t v18 = *(void *)(v28 + 24);
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        unint64_t v20 = v19 + 1;
      }
      *(void *)(v28 + 16) = v20;
      uint64_t v21 = v28 + 40 * v19;
      *(void *)(v21 + 32) = v16;
      *(void *)(v21 + 40) = v27;
      *(void *)(v21 + 48) = v17;
      *(void *)(v21 + 56) = v26;
      *(unsigned char *)(v21 + 64) = v15;
      if (a2 < v8) {
        goto LABEL_25;
      }
      if (!v12) {
        goto LABEL_26;
      }
      --v12;
      --v10;
      v13 += 8;
      uint64_t v4 = v25 - 1;
      a4 = v22;
      if (v25 == 1) {
        return v5;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.PathInterpolator.Interpolated.init(position:slices:relativePositions:bounds:displayScale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, CGFloat a10@<D6>)
{
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint64_t v37 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v21 = (long long *)(a1 + 48);
    uint64_t v22 = v11;
    do
    {
      uint64_t v23 = *((void *)v21 - 1);
      int v25 = *((_DWORD *)v21 + 4);
      uint64_t v26 = *((void *)v21 + 5);
      v31[0] = *((void *)v21 - 2);
      uint64_t v24 = (void *)v31[0];
      v31[1] = v23;
      long long v32 = *v21;
      int v33 = v25;
      long long v34 = *(long long *)((char *)v21 + 24);
      uint64_t v35 = v26;
      swift_retain();
      id v27 = v24;
      closure #1 in Text.Effect.PathInterpolator.Interpolated.init(position:slices:relativePositions:bounds:displayScale:)((uint64_t)v31, &v36, a10);
      swift_release();

      v21 += 4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v22;
    }
    while (v22);
    uint64_t v28 = v37;
    swift_bridgeObjectRelease();
    uint64_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So25RBDisplayListInterpolatorCs5NeverOTg5033_s7SwiftUI4TextVAAE6EffectO16Pathf125V12InterpolatedV8position6slices17relativePositions6bounds12displayScaleAISo7CGPointV_SayAC6LayoutV8RunSliceVGSayAPGSo6CGRectp30CoreGraphics7CGFloatVtcfcSo013dE11F0CSiXEfU0_SaySo0dE8Contents_pGTf1cn_nTf4ng_n(0, v11 - 1, v28);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v29;
    *(void *)(a3 + 8) = a2;
    *(double *)(a3 + 16) = a4;
    *(double *)(a3 + 24) = a5;
    *(double *)(a3 + 32) = a6;
    *(double *)(a3 + 40) = a7;
    *(double *)(a3 + 48) = a8;
    *(double *)(a3 + 56) = a9;
  }
  else
  {
    swift_bridgeObjectRelease();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  return result;
}

void *specialized static Text.Effect.PathInterpolator.SmoothPathGlyph.subcomponents(clusterPaths:keyCount:glyph:defaultIndex:position:relativePositions:stopSegment:foregroundColor:dilation:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, float a9, float a10, float a11, float a12, double a13, double a14)
{
  uint64_t v95 = a6;
  uint64_t v102 = a5;
  double v94 = a14;
  double v93 = a13;
  float v92 = a12;
  float v91 = a11;
  float v90 = a10;
  float v89 = a9;
  double v88 = a8;
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (a2 < 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = 0;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_Say7SwiftUI4PathVGs5NeverOTg503_s7d21UI4TextVAAE6EffectO16f163InterpolatorV06SmoothE5GlyphV13subcomponents12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationSayAIGSayZ102AA0E0VSgGG_S3iSo7CGPointVSayA_GAE20StopMarkerCollectionV0U0VAA0W0V8ResolvedVSo6CGSizeVtFZSayAVGSiXEfU_SaySayAISgGGSiTf1cn_nTf4ngn_n(0, a2, a1, a3);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (!*(void *)(v21 + 16))
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v22 = *(void *)(v21 + 32);
  uint64_t v108 = v21 + 32;
  if (*(void *)(v22 + 16) <= a4)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v23 = v22 + 40 * a4;
  long long v24 = *(_OWORD *)(v23 + 32);
  long long v25 = *(_OWORD *)(v23 + 48);
  char v119 = *(unsigned char *)(v23 + 64);
  v118[0] = v24;
  v118[1] = v25;
  outlined init with take of Path.Storage((uint64_t)v118, (uint64_t)v120);
  outlined release of Path?((uint64_t)v120, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  Path.boundingRect.getter();
  uint64_t v87 = v26;
  uint64_t v86 = v27;
  uint64_t v85 = v28;
  uint64_t v30 = v29;
  uint64_t isUniquelyReferenced_nonNull_native = outlined release of Path?((uint64_t)v118, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  if (*(void *)(v21 + 16) <= a4)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  uint64_t v84 = *(void *)(*(void *)(v108 + 8 * a4) + 16);
  if (!v84)
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x263F8EE78];
  }
  unint64_t v32 = 0;
  uint64_t v33 = *(void *)(MEMORY[0x263F63948] + 8);
  uint64_t v107 = *MEMORY[0x263F63948];
  uint64_t v106 = v33;
  uint64_t v101 = v102 + 32;
  uint64_t v82 = 16 * a2;
  int64_t v100 = (void *)MEMORY[0x263F8EE78];
  unint64_t v83 = a4;
  uint64_t v105 = v21;
  while (2)
  {
    uint64_t v34 = *(void *)(v108 + 8 * a4);
    if (v32 >= *(void *)(v34 + 16)) {
      goto LABEL_75;
    }
    uint64_t v99 = v19;
    uint64_t v113 = &v81;
    unint64_t v98 = v32 + 1;
    unint64_t v104 = v32;
    uint64_t v103 = 40 * v32;
    uint64_t v35 = v34 + 40 * v32;
    uint64_t v36 = *(void *)(v35 + 32);
    uint64_t v37 = *(void *)(v35 + 40);
    uint64_t v39 = *(void *)(v35 + 48);
    uint64_t v38 = *(void *)(v35 + 56);
    uint64_t v40 = *(unsigned __int8 *)(v35 + 64);
    uint64_t v117 = MEMORY[0x263F8EE78];
    uint64_t v116 = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
    uint64_t v79 = (uint64_t)&v116;
    CGFloat v80 = &v117;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = partial apply for closure #1 in Text.Effect.FlatPath.init(_:);
    *(void *)(v41 + 24) = &v77;
    uint64_t v42 = v41;
    switch(v40)
    {
      case 1:
        RBPathMakeEllipse();
        goto LABEL_21;
      case 2:
        swift_retain();
        RBPathMakeRoundedRect();
        goto LABEL_21;
      case 3:
      case 4:
        goto LABEL_85;
      case 5:
        if (!*(unsigned char *)(v36 + 16))
        {
          if (!*(void *)(v36 + 24))
          {
            __break(1u);
LABEL_85:
            LODWORD(v80) = 0;
            uint64_t v79 = 447;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
LABEL_86:
            LODWORD(v79) = 0;
            uint64_t v78 = 936;
            char v77 = 2;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x246126624);
          }
LABEL_15:
          swift_retain();
          goto LABEL_20;
        }
        if (*(unsigned char *)(v36 + 16) == 1) {
          goto LABEL_15;
        }
        uint64_t v43 = one-time initialization token for bufferCallbacks;
        swift_retain();
        if (v43 != -1) {
          swift_once();
        }
LABEL_20:
        RBPathRetain();
LABEL_21:
        uint64_t v114 = partial apply for specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:);
        uint64_t v115 = v42;
        swift_retain();
        RBPathApply();
        swift_release();
        RBPathRelease();
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        uint64_t v45 = outlined consume of Path.Storage(v36, v37, v39, v38, v40);
        if (isEscapingClosureAtFileLocation) {
          goto LABEL_76;
        }
        unint64_t v46 = *(void *)(v117 + 16);
        uint64_t v47 = a2 * v46;
        if ((unsigned __int128)(a2 * (__int128)(uint64_t)v46) >> 64 != (uint64_t)(a2 * v46) >> 63) {
          goto LABEL_77;
        }
        if (v47 < 0) {
          goto LABEL_86;
        }
        uint64_t v96 = v117;
        uint64_t v97 = v116;
        if (v47)
        {
          type metadata accessor for CGPoint(0);
          uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v48 + 16) = v47;
          bzero((void *)(v48 + 32), v82 * v46);
          if (a2) {
            goto LABEL_28;
          }
LABEL_56:
          uint64_t v64 = v95;
          swift_bridgeObjectRetain();
          uint64_t v65 = swift_bridgeObjectRetain();
          uint64_t v19 = v99;
          uint64_t v66 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7CGPointVG_7SwiftUI4TextVAIE6EffectO9StopIndexVs5NeverOTg503_s7e3UI4g5VAAE6h190O16PathInterpolatorV06SmoothE5GlyphV13subcomponents12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationSayAIGSaySayAA0E0VSgGG_S3iSo7d11VSayA_GAE20I65MarkerCollectionV0U0VAA0W0V8ResolvedVSo6CGSizeVtFZAE0zP0VA_XEfU0_AM0I16MarkerCollectionV7SegmentVAGTf1cn_nTf4ngx_nTm(v65, v64, a7);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100[2] + 1, 1, v100);
            int64_t v100 = (void *)isUniquelyReferenced_nonNull_native;
          }
          a4 = v83;
          unint64_t v68 = v100[2];
          unint64_t v67 = v100[3];
          if (v68 >= v67 >> 1)
          {
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v100);
            int64_t v100 = (void *)isUniquelyReferenced_nonNull_native;
          }
          char v69 = v100;
          v100[2] = v68 + 1;
          int64_t v70 = (float *)&v69[14 * v68];
          float v71 = v90;
          v70[8] = v89;
          v70[9] = v71;
          float v72 = v92;
          v70[10] = v91;
          v70[11] = v72;
          double v73 = v94;
          *((double *)v70 + 6) = v93;
          *((double *)v70 + 7) = v73;
          double v74 = v88;
          *((double *)v70 + 8) = a7;
          *((double *)v70 + 9) = v74;
          *((void *)v70 + 10) = v97;
          *((void *)v70 + 11) = v46;
          *((void *)v70 + 12) = v48;
          uint64_t v75 = v86;
          *((void *)v70 + 13) = v87;
          *((void *)v70 + 14) = v75;
          *((void *)v70 + 15) = v85;
          *((void *)v70 + 16) = v30;
          unint64_t v32 = v98;
          *((void *)v70 + 17) = v66;
          if (v32 == v84) {
            goto LABEL_68;
          }
          continue;
        }
        uint64_t v48 = MEMORY[0x263F8EE78];
        if (!a2) {
          goto LABEL_56;
        }
LABEL_28:
        unint64_t v49 = 0;
        while (2)
        {
          if (v49 == a2)
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }
          if (v49 >= *(void *)(v105 + 16)) {
            goto LABEL_70;
          }
          uint64_t v50 = *(void *)(v108 + 8 * v49);
          if (v104 >= *(void *)(v50 + 16)) {
            goto LABEL_71;
          }
          uint64_t v110 = &v81;
          unint64_t v109 = v49 + 1;
          uint64_t v51 = v50 + v103;
          uint64_t v52 = *(void *)(v51 + 32);
          uint64_t v113 = *(uint64_t **)(v51 + 40);
          uint64_t v112 = *(void *)(v51 + 48);
          uint64_t v111 = *(void *)(v51 + 56);
          uint64_t v53 = *(unsigned __int8 *)(v51 + 64);
          uint64_t v117 = MEMORY[0x263F8EE78];
          uint64_t v116 = MEMORY[0x263F8EE78];
          MEMORY[0x270FA5388](v45);
          uint64_t v79 = (uint64_t)&v116;
          CGFloat v80 = &v117;
          uint64_t v54 = swift_allocObject();
          *(void *)(v54 + 16) = closure #1 in Text.Effect.FlatPath.init(_:)partial apply;
          *(void *)(v54 + 24) = &v77;
          uint64_t v55 = v54;
          switch(v53)
          {
            case 1:
              RBPathMakeEllipse();
              goto LABEL_45;
            case 2:
              swift_retain();
              RBPathMakeRoundedRect();
              goto LABEL_45;
            case 3:
            case 4:
              goto LABEL_85;
            case 5:
              if (!*(unsigned char *)(v52 + 16))
              {
                if (!*(void *)(v52 + 24)) {
                  goto LABEL_83;
                }
LABEL_39:
                swift_retain();
                goto LABEL_44;
              }
              if (*(unsigned char *)(v52 + 16) == 1) {
                goto LABEL_39;
              }
              uint64_t v56 = one-time initialization token for bufferCallbacks;
              swift_retain();
              if (v56 != -1) {
                swift_once();
              }
LABEL_44:
              RBPathRetain();
LABEL_45:
              uint64_t v114 = (uint64_t (*)(uint64_t))closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)specialized partial apply;
              uint64_t v115 = v55;
              swift_retain();
              RBPathApply();
              swift_release();
              RBPathRelease();
              char v57 = swift_isEscapingClosureAtFileLocation();
              swift_release();
              outlined consume of Path.Storage(v52, (uint64_t)v113, v112, v111, v53);
              if (v57) {
                goto LABEL_72;
              }
              uint64_t v58 = v117;
              if (!v46)
              {
LABEL_29:
                swift_bridgeObjectRelease();
                uint64_t v45 = swift_bridgeObjectRelease();
                unint64_t v49 = v109;
                if (v109 == a2) {
                  goto LABEL_56;
                }
                continue;
              }
              if (v49 >= *(void *)(v102 + 16)) {
                goto LABEL_73;
              }
              if (v46 > *(void *)(v117 + 16)) {
                goto LABEL_74;
              }
              uint64_t v59 = 0;
              float64x2_t v60 = *(float64x2_t *)(v101 + 16 * v49);
              while (1)
              {
                uint64_t v61 = v59 * a2;
                if ((unsigned __int128)(v59 * (__int128)a2) >> 64 != (v59 * a2) >> 63) {
                  break;
                }
                BOOL v62 = __OFADD__(v49, v61);
                unint64_t v63 = v49 + v61;
                if (v62) {
                  goto LABEL_65;
                }
                if ((v63 & 0x8000000000000000) != 0) {
                  goto LABEL_66;
                }
                if (v63 >= *(void *)(v48 + 16)) {
                  goto LABEL_67;
                }
                *(float64x2_t *)(v48 + 32 + 16 * v63) = vaddq_f64(v60, *(float64x2_t *)(v58 + 16 * v59++ + 32));
                if (v46 == v59) {
                  goto LABEL_29;
                }
              }
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              swift_bridgeObjectRelease();
              return v100;
            case 6:
              goto LABEL_45;
            default:
              RBPathMakeRect();
              goto LABEL_45;
          }
        }
      case 6:
        goto LABEL_21;
      default:
        RBPathMakeRect();
        goto LABEL_21;
    }
  }
}

unint64_t specialized Text.Effect.PathInterpolator.SmoothPathGlyph.init(clusterPaths:keyCount:glyph:defaultIndex:position:relativePositions:stopSegment:foregroundColor:dilation:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, float a10@<S2>, float a11@<S3>, float a12@<S4>, float a13@<S5>, double a14@<D6>, double a15@<D7>)
{
  if (a2 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v28 = result;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI4TextVAGE6EffectO8FlatPathVs5NeverOTg503_s7d3UI4f5VAAE6g3O16i241InterpolatorV06SmoothE5GlyphV12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationAISaySayAA0E0VSgGG_S3iSo7CGPointVSayAYGAE20StopMarkerCollectionV0T0VAA0V0V8ResolvedVSo6CGSizeVtcfcAE04H10E0VSiXEfU_SaySayAG0I0VSgGGSiTf1cn_nTf4ngn_n(0, a2, result, a3);
  if ((a4 & 0x8000000000000000) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v30 = result;
  if (*(void *)(result + 16) <= a4)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v65 = result + 32;
  uint64_t v31 = *(void *)(*(void *)(result + 32 + 24 * a4 + 16) + 16);
  uint64_t result = a2 * v31;
  if ((unsigned __int128)(a2 * (__int128)v31) >> 64 != (a2 * v31) >> 63)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v61 = a6;
  unint64_t v63 = v28;
  unint64_t v59 = a4;
  unint64_t v60 = a3;
  unint64_t v66 = v30;
  uint64_t result = specialized Array.init(repeating:count:)(result, 0.0, 0.0);
  unint64_t v32 = (void *)result;
  if (a2)
  {
    unint64_t v33 = 0;
    while (v33 != a2)
    {
      if (v31)
      {
        if (v33 >= *(void *)(a5 + 16)) {
          goto LABEL_33;
        }
        if (v33 >= *(void *)(v66 + 16)) {
          goto LABEL_34;
        }
        unint64_t v34 = 0;
        uint64_t v35 = v65 + 24 * v33 + 16;
        while (1)
        {
          uint64_t v36 = v34 * a2;
          if ((unsigned __int128)((uint64_t)v34 * (__int128)a2) >> 64 != (uint64_t)(v34 * a2) >> 63) {
            break;
          }
          unint64_t v37 = v33 + v36;
          if (__OFADD__(v33, v36)) {
            goto LABEL_29;
          }
          if (v34 >= *(void *)(*(void *)v35 + 16)) {
            goto LABEL_30;
          }
          float64x2_t v67 = *(float64x2_t *)(*(void *)v35 + 16 * v34 + 32);
          float64x2_t v69 = *(float64x2_t *)(a5 + 32 + 16 * v33);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            if ((v37 & 0x8000000000000000) != 0) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
            unint64_t v32 = (void *)result;
            if ((v37 & 0x8000000000000000) != 0)
            {
LABEL_22:
              __break(1u);
              goto LABEL_23;
            }
          }
          if (v37 >= v32[2]) {
            goto LABEL_31;
          }
          ++v34;
          *(float64x2_t *)&v32[2 * v37 + 4] = vaddq_f64(v69, v67);
          if (v31 == v34) {
            goto LABEL_7;
          }
        }
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        break;
      }
LABEL_7:
      if (++v33 == a2) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v38 = swift_bridgeObjectRetain();
  uint64_t v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7CGPointVG_7SwiftUI4TextVAIE6EffectO9StopIndexVs5NeverOTg503_s7e3UI4g5VAAE6h190O16PathInterpolatorV06SmoothE5GlyphV13subcomponents12clusterPaths8keyCount5glyph12defaultIndex8position17relativePositions11stopSegment15foregroundColor8dilationSayAIGSaySayAA0E0VSgGG_S3iSo7d11VSayA_GAE20I65MarkerCollectionV0U0VAA0W0V8ResolvedVSo6CGSizeVtFZAE0zP0VA_XEfU0_AM0I16MarkerCollectionV7SegmentVAGTf1cn_nTf4ngx_nTm(v38, v61, a8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  if (!*(void *)(v63 + 16))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v40 = *(void *)(v63 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v60 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (*(void *)(v40 + 16) <= v60)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  double v68 = a8;
  double v70 = a9;
  float v41 = a13;
  double v62 = a14;
  double v64 = a15;
  uint64_t v42 = v40 + 40 * v60;
  uint64_t v43 = *(void *)(v42 + 32);
  uint64_t v44 = *(void *)(v42 + 40);
  uint64_t v45 = *(void *)(v42 + 48);
  uint64_t v46 = *(void *)(v42 + 56);
  int v47 = *(unsigned __int8 *)(v42 + 64);
  outlined copy of Path?(v43, v44, v45, v46, *(unsigned char *)(v42 + 64));
  uint64_t result = swift_bridgeObjectRelease();
  if (v47 != 255)
  {
    uint64_t v48 = (uint64_t *)(v65 + 24 * v59);
    Path.boundingRect.getter();
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    outlined consume of Path?(v43, v44, v45, v46, v47);
    uint64_t v57 = *v48;
    uint64_t v58 = v48[1];
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *(float *)a7 = a10;
    *(float *)(a7 + 4) = a11;
    *(float *)(a7 + 8) = a12;
    *(float *)(a7 + 12) = v41;
    *(double *)(a7 + 16) = v62;
    *(double *)(a7 + 24) = v64;
    *(double *)(a7 + 32) = v68;
    *(double *)(a7 + 40) = v70;
    *(void *)(a7 + 48) = v57;
    *(void *)(a7 + 56) = v58;
    *(void *)(a7 + 64) = v32;
    *(void *)(a7 + 72) = v50;
    *(void *)(a7 + 80) = v52;
    *(void *)(a7 + 88) = v54;
    *(void *)(a7 + 96) = v56;
    *(void *)(a7 + 104) = v39;
    return result;
  }
LABEL_42:
  __break(1u);
  return result;
}

double specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, __n128 *a5@<X8>, double a6@<D0>)
{
  *(void *)&double result = specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t))closure #1 in closure #2 in SmallTextEffect.configuration(_:), a5, a6).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t))closure #1 in closure #2 in ShakeHorizontalTextEffect.configuration(_:), a5, a6).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t))closure #1 in closure #3 in BigTextEffect.configuration(_:), a5, a6).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t))closure #1 in closure #2 in ShakeVerticalTextEffect.configuration(_:), a5, a6).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)(a1, a2, a3, a4, (void (*)(uint64_t *, uint64_t))closure #1 in closure #3 in BloomTextEffect.configuration(_:), a5, a6).n128_u64[0];
  return result;
}

__n128 specialized Text.Effect.PathInterpolator.init<A>(_:quantization:default:options:body:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t *, uint64_t)@<X4>, __n128 *a6@<X8>, double a7@<D0>)
{
  uint64_t v30 = MEMORY[0x263F8EE80];
  a5(&v30, a4);
  long long v12 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v12;
  __n128 v28 = *(__n128 *)(a1 + 16);
  void v31[2] = *(_OWORD *)(a1 + 32);
  unint64_t v13 = *(void *)(a1 + 48);
  unint64_t v32 = v13;
  unint64_t v14 = *(void *)a1;
  unint64_t v25 = *(void *)(a1 + 8);
  unint64_t v26 = *(void *)(a1 + 32);
  unint64_t v27 = *(void *)(a1 + 40);
  uint64_t v15 = v30;
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a1);
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized static Text.Effect.stopMarkers(_:)((uint64_t)v31);
  uint64_t v18 = v17;
  outlined release of Text.Effect.BaseFragment(a1);
  uint64_t v19 = Text.Effect.PathInterpolator.Map.computeFragment(quantization:stopMarkers:defaultKey:options:)(a2, v16, v18, a3 | 2u, v15, a7);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v29 = specialized _copyCollectionToContiguousArray<A>(_:)(v22);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v29);
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t)v29;
  if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #0 of Text.Effect.PathInterpolator.MapKeys.init(_:), (uint64_t)v29))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v23 = 0;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #1 of Text.Effect.PathInterpolator.MapKeys.init(_:), v23))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v23 = 1;
  }
  else if (specialized static Array<A>.== infix(_:_:)((uint64_t)&outlined read-only object #2 of Text.Effect.PathInterpolator.MapKeys.init(_:), v23))
  {
    swift_release();
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
    uint64_t v23 = 2;
  }
  else
  {
    outlined release of Text.Effect.BaseFragment(a1);
    swift_bridgeObjectRelease();
  }
  a6->n128_u64[0] = v14;
  a6->n128_u64[1] = v25;
  __n128 result = v28;
  a6[1] = v28;
  a6[2].n128_u64[0] = v26;
  a6[2].n128_u64[1] = v27;
  a6[3].n128_u64[0] = v13;
  a6[3].n128_f64[1] = a7;
  a6[4].n128_u64[0] = v19;
  a6[4].n128_u64[1] = v21;
  a6[5].n128_u64[0] = v23;
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySnySiGSay7SwiftUI4TextVAIE6EffectO9StopIndexVGG_So7CGPointVs5NeverOTg505_sSi7f3UI4h5VAAE6i2O9jk4VSo7l17VIgyyd_Si_AGtAIs5M11OIegnrzr_TRSiAoSIgyyd_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t, void, double))
{
  unint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  int64_t v8 = *(void *)(a3 + 16);
  if (v8 >= (uint64_t)v4) {
    uint64_t v9 = a2 - a1;
  }
  else {
    uint64_t v9 = *(void *)(a3 + 16);
  }
  uint64_t v38 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if (v9 < 0) {
    goto LABEL_43;
  }
  uint64_t v32 = a3;
  uint64_t v36 = a1;
  unint64_t v31 = v9;
  unint64_t v33 = v8;
  if (v9)
  {
    swift_bridgeObjectRetain();
    if (a2 < a1)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v9 >= v4) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = (double *)(a3 + 40);
    uint64_t v12 = v9;
    uint64_t v13 = a1;
    while (a2 != v13)
    {
      if (!v10) {
        goto LABEL_38;
      }
      double v14 = a4(v13, *((void *)v11 - 1), *v11);
      uint64_t v16 = v15;
      unint64_t v18 = *(void *)(v38 + 16);
      unint64_t v17 = *(void *)(v38 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      *(void *)(v38 + 16) = v18 + 1;
      uint64_t v19 = v38 + 16 * v18;
      *(double *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      --v10;
      v11 += 2;
      ++v13;
      if (!--v12) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = a1;
LABEL_19:
  if (v13 == a2)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return;
  }
  if (a2 >= v36)
  {
    uint64_t v20 = 0;
    if (v13 <= a2) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = v13;
    }
    uint64_t v35 = v21 - v13;
    unint64_t v22 = v33 - v31;
    if (v33 >= v31) {
      unint64_t v23 = v33 - v31;
    }
    else {
      unint64_t v23 = 0;
    }
    unint64_t v34 = v23;
    long long v24 = (double *)(v32 + 16 * v31 + 40);
    while (v13 >= v36)
    {
      if (v35 == v20) {
        goto LABEL_40;
      }
      if (v22 != v20)
      {
        if (v34 == v20) {
          goto LABEL_41;
        }
        double v25 = a4(v13 + v20, *((void *)v24 - 1), *v24);
        uint64_t v27 = v26;
        unint64_t v29 = *(void *)(v38 + 16);
        unint64_t v28 = *(void *)(v38 + 24);
        if (v29 >= v28 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        }
        *(void *)(v38 + 16) = v29 + 1;
        uint64_t v30 = v38 + 16 * v29;
        *(double *)(v30 + 32) = v25;
        *(void *)(v30 + 40) = v27;
        ++v20;
        v24 += 2;
        if (v13 - a2 + v20) {
          continue;
        }
      }
      goto LABEL_20;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_45:
  __break(1u);
}

uint64_t specialized Text.Effect.PathInterpolator.PathGlyph.resolve(cluster:state:mapKeys:in:)(double *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  Text.Effect.PathInterpolator.PathGlyph.path(state:mapKeys:)(a1, a2, (uint64_t)v89);
  uint64_t result = outlined init with take of Path?((uint64_t)v89, (uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for Path?, (uint64_t)&type metadata for Path);
  uint64_t v7 = v91;
  if (v91 != 255)
  {
    CGFloat v8 = *(double *)v90;
    CGFloat v9 = *(double *)&v90[1];
    CGFloat v10 = *(double *)&v90[2];
    CGFloat v11 = *(double *)&v90[3];
    uint64_t v12 = *a3;
    double v13 = a1[4];
    double v14 = a1[5];
    CGAffineTransformMakeTranslation(&t1, v13, v14);
    CGAffineTransformScale(&t2, &t1, a1[6], a1[7]);
    long long v75 = *(_OWORD *)&t2.c;
    long long v78 = *(_OWORD *)&t2.a;
    CGFloat tx = t2.tx;
    CGFloat ty = t2.ty;
    double v17 = a1[3];
    swift_retain();
    __double2 v18 = __sincos_stret(v17);
    t1.CGFloat a = v18.__cosval;
    t1.CGFloat b = v18.__sinval;
    t1.CGFloat c = -v18.__sinval;
    t1.CGFloat d = v18.__cosval;
    t1.CGFloat tx = 0.0;
    t1.CGFloat ty = 0.0;
    *(_OWORD *)&t2.CGFloat a = v78;
    *(_OWORD *)&t2.CGFloat c = v75;
    t2.CGFloat tx = tx;
    t2.CGFloat ty = ty;
    CGAffineTransformConcat(&v81, &t1, &t2);
    CGAffineTransform t1 = v81;
    CGAffineTransformTranslate(&t2, &t1, -v13, -v14);
    CGFloat v19 = a1[1];
    CGFloat v20 = a1[2];
    CGAffineTransform t1 = t2;
    CGAffineTransformTranslate(&t2, &t1, v19, v20);
    CGFloat a = t2.a;
    CGFloat b = t2.b;
    CGFloat c = t2.c;
    CGFloat d = t2.d;
    CGFloat v25 = t2.tx;
    CGFloat v26 = t2.ty;
    CGAffineTransform t1 = t2;
    if (!CGAffineTransformIsIdentity(&t1))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Text.Effect.DrawingContext.Storage();
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 24) = 0x3FF0000000000000;
        *(void *)(v27 + 32) = 0;
        *(void *)(v27 + 40) = 0;
        *(void *)(v27 + 48) = 0x3FF0000000000000;
        *(void *)(v27 + 56) = 0;
        *(void *)(v27 + 64) = 0;
        *(void *)(v27 + 80) = 0;
        *(void *)(v27 + 88) = 0;
        *(void *)(v27 + 72) = 0x3FF0000000000000;
        *(unsigned char *)(v27 + 96) = 1;
        *(_OWORD *)(v27 + 104) = 0u;
        *(_OWORD *)(v27 + 120) = 0u;
        *(_OWORD *)(v27 + 136) = 0u;
        __asm { FMOV            V1.2D, #1.0 }
        *(_OWORD *)(v27 + 152) = _Q1;
        *(void *)(v27 + 168) = 0x3FF0000000000000;
        *(unsigned char *)(v27 + 176) = 0;
        *(_OWORD *)(v27 + 184) = 0u;
        *(_OWORD *)(v27 + 200) = 0u;
        *(void *)(v27 + 216) = 0;
        double v72 = v11;
        *(void *)(v27 + 16) = *(void *)(v12 + 16);
        long long v33 = *(_OWORD *)(v12 + 40);
        long long v34 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v27 + 24) = *(_OWORD *)(v12 + 24);
        *(_OWORD *)(v27 + 40) = v33;
        *(_OWORD *)(v27 + 56) = v34;
        *(void *)(v27 + 72) = *(void *)(v12 + 72);
        uint64_t v36 = *(void *)(v12 + 184);
        uint64_t v35 = *(void *)(v12 + 192);
        double v79 = v8;
        uint64_t v37 = *(void *)(v12 + 200);
        uint64_t v38 = *(void *)(v12 + 208);
        uint64_t v76 = v7;
        double v39 = v9;
        uint64_t v40 = *(void *)(v12 + 216);
        *(void *)(v27 + 184) = v36;
        *(void *)(v27 + 192) = v35;
        *(void *)(v27 + 200) = v37;
        *(void *)(v27 + 208) = v38;
        *(void *)(v27 + 216) = v40;
        swift_retain();
        swift_retain();
        uint64_t v41 = v36;
        CGFloat v11 = v72;
        CGFloat v9 = v39;
        uint64_t v7 = v76;
        outlined copy of Text.Effect.StopCollector?(v41, v35, v37, v38);
        outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
        uint64_t v42 = *(void *)(v12 + 80);
        uint64_t v43 = *(void *)(v12 + 88);
        LOBYTE(v38) = *(unsigned char *)(v12 + 96);
        swift_release();
        *(void *)(v27 + 80) = v42;
        *(void *)(v27 + 88) = v43;
        *(unsigned char *)(v27 + 96) = v38;
        CGFloat v8 = v79;
        swift_release();
        uint64_t v12 = v27;
      }
      t1.CGFloat a = a;
      t1.CGFloat b = b;
      t1.CGFloat c = c;
      t1.CGFloat d = d;
      t1.CGFloat tx = v25;
      t1.CGFloat ty = v26;
      if (!CGAffineTransformIsIdentity(&t1))
      {
        long long v44 = *(_OWORD *)(v12 + 24);
        long long v45 = *(_OWORD *)(v12 + 40);
        t1.CGFloat a = a;
        t1.CGFloat b = b;
        t1.CGFloat c = c;
        t1.CGFloat d = d;
        t1.CGFloat tx = v25;
        t1.CGFloat ty = v26;
        *(_OWORD *)&t2.CGFloat a = v44;
        *(_OWORD *)&t2.CGFloat c = v45;
        *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v12 + 56);
        CGAffineTransformConcat(&v81, &t1, &t2);
        long long v46 = *(_OWORD *)&v81.c;
        long long v47 = *(_OWORD *)&v81.tx;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)&v81.a;
        *(_OWORD *)(v12 + 40) = v46;
        *(_OWORD *)(v12 + 56) = v47;
      }
    }
    CGFloat v48 = v3[4];
    CGFloat v49 = v3[5];
    t1.CGFloat a = 1.0;
    t1.CGFloat b = 0.0;
    t1.CGFloat c = 0.0;
    t1.CGFloat d = -1.0;
    t1.CGFloat tx = v48;
    t1.CGFloat ty = v49;
    if (!CGAffineTransformIsIdentity(&t1))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Text.Effect.DrawingContext.Storage();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 24) = 0x3FF0000000000000;
        *(void *)(v50 + 32) = 0;
        *(void *)(v50 + 40) = 0;
        *(void *)(v50 + 48) = 0x3FF0000000000000;
        *(void *)(v50 + 56) = 0;
        *(void *)(v50 + 64) = 0;
        *(void *)(v50 + 80) = 0;
        *(void *)(v50 + 88) = 0;
        *(void *)(v50 + 72) = 0x3FF0000000000000;
        *(unsigned char *)(v50 + 96) = 1;
        *(_OWORD *)(v50 + 104) = 0u;
        *(_OWORD *)(v50 + 120) = 0u;
        *(_OWORD *)(v50 + 136) = 0u;
        __asm { FMOV            V1.2D, #1.0 }
        *(_OWORD *)(v50 + 152) = _Q1;
        *(void *)(v50 + 168) = 0x3FF0000000000000;
        *(unsigned char *)(v50 + 176) = 0;
        *(_OWORD *)(v50 + 184) = 0u;
        *(_OWORD *)(v50 + 200) = 0u;
        *(void *)(v50 + 216) = 0;
        *(void *)(v50 + 16) = *(void *)(v12 + 16);
        long long v52 = *(_OWORD *)(v12 + 40);
        long long v53 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v50 + 24) = *(_OWORD *)(v12 + 24);
        *(_OWORD *)(v50 + 40) = v52;
        *(_OWORD *)(v50 + 56) = v53;
        *(void *)(v50 + 72) = *(void *)(v12 + 72);
        double v80 = v8;
        uint64_t v54 = *(void *)(v12 + 184);
        uint64_t v55 = *(void *)(v12 + 192);
        double v74 = v10;
        uint64_t v77 = v7;
        double v56 = v9;
        uint64_t v57 = *(void *)(v12 + 200);
        uint64_t v58 = *(void *)(v12 + 208);
        double v73 = v11;
        uint64_t v59 = *(void *)(v12 + 216);
        *(void *)(v50 + 184) = v54;
        *(void *)(v50 + 192) = v55;
        *(void *)(v50 + 200) = v57;
        *(void *)(v50 + 208) = v58;
        *(void *)(v50 + 216) = v59;
        swift_retain();
        swift_retain();
        uint64_t v60 = v57;
        CGFloat v9 = v56;
        uint64_t v61 = v58;
        CGFloat v10 = v74;
        uint64_t v7 = v77;
        CGFloat v11 = v73;
        outlined copy of Text.Effect.StopCollector?(v54, v55, v60, v61);
        outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
        uint64_t v62 = *(void *)(v12 + 80);
        uint64_t v63 = *(void *)(v12 + 88);
        LOBYTE(v55) = *(unsigned char *)(v12 + 96);
        swift_release();
        *(void *)(v50 + 80) = v62;
        *(void *)(v50 + 88) = v63;
        *(unsigned char *)(v50 + 96) = v55;
        CGFloat v8 = v80;
        swift_release();
        uint64_t v12 = v50;
      }
      t1.CGFloat a = 1.0;
      t1.CGFloat b = 0.0;
      t1.CGFloat c = 0.0;
      t1.CGFloat d = -1.0;
      t1.CGFloat tx = v48;
      t1.CGFloat ty = v49;
      if (!CGAffineTransformIsIdentity(&t1))
      {
        long long v64 = *(_OWORD *)(v12 + 24);
        long long v65 = *(_OWORD *)(v12 + 40);
        t1.CGFloat a = 1.0;
        t1.CGFloat b = 0.0;
        t1.CGFloat c = 0.0;
        t1.CGFloat d = -1.0;
        t1.CGFloat tx = v48;
        t1.CGFloat ty = v49;
        *(_OWORD *)&t2.CGFloat a = v64;
        *(_OWORD *)&t2.CGFloat c = v65;
        *(_OWORD *)&t2.CGFloat tx = *(_OWORD *)(v12 + 56);
        CGAffineTransformConcat(&v81, &t1, &t2);
        long long v66 = *(_OWORD *)&v81.c;
        long long v67 = *(_OWORD *)&v81.tx;
        *(_OWORD *)(v12 + 24) = *(_OWORD *)&v81.a;
        *(_OWORD *)(v12 + 40) = v66;
        *(_OWORD *)(v12 + 56) = v67;
      }
    }
    if (*(unsigned char *)(v12 + 96))
    {
      uint64_t v69 = *(unsigned int *)v3;
      unsigned int v68 = *((_DWORD *)v3 + 1);
      unsigned int v70 = *((_DWORD *)v3 + 2);
      unsigned int v71 = *((_DWORD *)v3 + 3);
    }
    else
    {
      unsigned int v70 = *(_DWORD *)(v12 + 88);
      unsigned int v71 = *(_DWORD *)(v12 + 92);
      uint64_t v69 = *(unsigned int *)(v12 + 80);
      unsigned int v68 = *(_DWORD *)(v12 + 84);
    }
    t1.CGFloat a = v8;
    t1.CGFloat b = v9;
    t1.CGFloat c = v10;
    t1.CGFloat d = v11;
    *(void *)&t1.CGFloat tx = v7 | (v69 << 32);
    LODWORD(t1.ty) = v68;
    HIDWORD(t1.ty) = v70;
    uint64_t v84 = v71;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    char v88 = 64;
    outlined copy of Path.Storage(*(uint64_t *)&v8, *(uint64_t *)&v9, *(uint64_t *)&v10, *(uint64_t *)&v11, v7);
    Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&t1);
    outlined release of Path?((uint64_t)v89, (void (*)(void, void, void, void, void))outlined consume of Path?);
    outlined release of Path?((uint64_t)v89, (void (*)(void, void, void, void, void))outlined consume of Path?);
    return swift_release();
  }
  return result;
}

uint64_t specialized Text.Effect.PathInterpolator.SmoothPathGlyph.resolve(cluster:state:mapKeys:in:)(uint64_t result, uint64_t a2, unsigned int **a3)
{
  unint64_t v4 = *a3;
  uint64_t v5 = *((void *)*a3 + 26);
  if (!v5) {
    return result;
  }
  uint64_t v6 = v3;
  uint64_t v8 = result;
  uint64_t v9 = *((void *)v4 + 27);
  uint64_t v10 = *((void *)v4 + 24);
  uint64_t v11 = *((void *)v4 + 23);
  outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v11, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v11, v10);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!*(void *)(v9 + 16)) {
    return result;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v12 & 1) == 0) {
    return result;
  }
  unint64_t v13 = *(void *)(*(void *)(v9 + 56) + 8 * result);
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v13 >= *(void *)(v5 + 16))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v14 = *((void *)v6 + 13);
  uint64_t v15 = *(void *)(v14 + 16);
  MEMORY[0x270FA5388](result);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySnySiGSay7SwiftUI4TextVAIE6EffectO9StopIndexVGG_So7CGPointVs5NeverOTg505_sSi7f3UI4h5VAAE6i2O9jk4VSo7l17VIgyyd_Si_AGtAIs5M11OIegnrzr_TRSiAoSIgyyd_Tf1cn_nTf4ng_n(0, v15, v14, (double (*)(uint64_t, void, double))partial apply for closure #1 in Text.Effect.PathInterpolator.SmoothPathGlyph.path(cluster:state:mapKeys:stopSegment:));
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  unint64_t v18 = *((void *)v6 + 7);
  uint64_t v19 = swift_bridgeObjectRetain();
  specialized Path.init(elements:points:)(v19, v18, v17, (uint64_t)v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Path.dilatedGlyphPath(with:)((uint64_t)v33, *((double *)v6 + 2), *((double *)v6 + 3));
  uint64_t v20 = v33[0];
  uint64_t v21 = v33[1];
  uint64_t v22 = v33[2];
  uint64_t v23 = v33[3];
  uint64_t v24 = v34;
  outlined release of Path?((uint64_t)v32, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  CGFloat v25 = *a3;
  if ((*a3)[24])
  {
    uint64_t v27 = *v6;
    unsigned int v26 = v6[1];
    uint64_t v28 = v6[2];
    unsigned int v29 = v6[3];
  }
  else
  {
    uint64_t v28 = v25[22];
    unsigned int v29 = v25[23];
    uint64_t v27 = v25[20];
    unsigned int v26 = v25[21];
  }
  v30[0] = v20;
  v30[1] = v21;
  void v30[2] = v22;
  v30[3] = v23;
  unsigned char v30[4] = v24 | (v27 << 32);
  v30[5] = v26 | (unint64_t)(v28 << 32);
  v30[6] = v29;
  memset(&v30[7], 0, 24);
  char v31 = 64;
  outlined init with take of Path.Storage((uint64_t)v33, (uint64_t)v35);
  outlined release of Path?((uint64_t)v35, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)v30);
  outlined release of Path?((uint64_t)v33, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  return outlined release of Path?((uint64_t)v33, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
}

uint64_t outlined retain of Text.Effect.PathInterpolator.SmoothPathGlyph(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Effect.PathInterpolator.SmoothPathGlyph(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Text.Effect.PathInterpolator.PathGlyph(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Effect.PathInterpolator.PathGlyph(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Path?(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

void partial apply for closure #1 in Text.Effect.PathInterpolator.SmoothPathGlyph.path(cluster:state:mapKeys:stopSegment:)(uint64_t a1, uint64_t a2, long double a3)
{
  closure #1 in Text.Effect.PathInterpolator.SmoothPathGlyph.path(cluster:state:mapKeys:stopSegment:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(double **)(v3 + 48));
}

ValueMetadata *type metadata accessor for Text.Effect.QuantizationContext()
{
  return &type metadata for Text.Effect.QuantizationContext;
}

uint64_t outlined init with take of Path?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _DynamicPropertyBuffer?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined copy of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef;
  if (!lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef)
  {
    type metadata accessor for CGColorRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  }
  return result;
}

uint64_t partial apply for closure #1 in Text.Effect.FlatPath.init(_:)(long long *a1)
{
  return closure #1 in Text.Effect.FlatPath.init(_:)(a1, *(uint64_t **)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t sub_246127A0C()
{
  return swift_deallocObject();
}

uint64_t sub_246127A1C()
{
  return swift_deallocObject();
}

uint64_t sub_246127A2C()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.Metrics()
{
  return &type metadata for Text.Effect.PathInterpolator.Metrics;
}

uint64_t destroy for Text.Effect.PathInterpolator.Cluster()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator.Cluster(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.PathInterpolator.Cluster(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for Text.Effect.PathInterpolator.Cluster(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.PathInterpolator.Cluster(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.PathInterpolator.Cluster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.Cluster()
{
  return &type metadata for Text.Effect.PathInterpolator.Cluster;
}

void *destroy for Text.Effect.PathInterpolator.Glyph(uint64_t a1)
{
  return outlined consume of Text.Effect.PathInterpolator.Glyph(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(unsigned char *)(a1 + 112));
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator.Glyph(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a2 + 88);
  uint64_t v16 = *(void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 104);
  char v18 = *(unsigned char *)(a2 + 112);
  outlined copy of Text.Effect.PathInterpolator.Glyph(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  *(unsigned char *)(a1 + 112) = v18;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.PathInterpolator.Glyph(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  char v31 = *(unsigned char *)(a2 + 112);
  outlined copy of Text.Effect.PathInterpolator.Glyph(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31);
  char v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 104);
  char v24 = *(unsigned char *)(a1 + 112);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(unsigned char *)(a1 + 112) = v31;
  outlined consume of Text.Effect.PathInterpolator.Glyph(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23, v24);
  return a1;
}

uint64_t assignWithTake for Text.Effect.PathInterpolator.Glyph(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 112);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = *(_OWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 104);
  char v16 = *(unsigned char *)(a1 + 112);
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = v3;
  outlined consume of Text.Effect.PathInterpolator.Glyph(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.PathInterpolator.Glyph(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 112);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.PathInterpolator.Glyph(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)unint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 112) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Effect.PathInterpolator.Glyph(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t destructiveInjectEnumTag for Text.Effect.PathInterpolator.Glyph(uint64_t result, char a2)
{
  *(unsigned char *)(result + 112) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.Glyph()
{
  return &type metadata for Text.Effect.PathInterpolator.Glyph;
}

uint64_t destroy for Text.Effect.PathInterpolator.PathGlyph()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator.PathGlyph(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.PathInterpolator.PathGlyph(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Text.Effect.PathInterpolator.PathGlyph(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.PathInterpolator.PathGlyph(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.PathInterpolator.PathGlyph(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.PathGlyph()
{
  return &type metadata for Text.Effect.PathInterpolator.PathGlyph;
}

uint64_t destroy for Text.Effect.PathInterpolator.SmoothPathGlyph()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator.SmoothPathGlyph(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.PathInterpolator.SmoothPathGlyph(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.PathInterpolator.SmoothPathGlyph(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.SmoothPathGlyph()
{
  return &type metadata for Text.Effect.PathInterpolator.SmoothPathGlyph;
}

unint64_t destroy for Text.Effect.PathInterpolator(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)(a1 + 80);
  if (result >= 3)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  unint64_t v7 = *(void *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7 >= 3) {
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 80) = v7;
  return a1;
}

void *assignWithCopy for Text.Effect.PathInterpolator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 10;
  unint64_t v5 = a2[10];
  if (a1[10] >= 3uLL)
  {
    if (v5 >= 3)
    {
      unint64_t *v4 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      _sypSgWOhTm_15((uint64_t)(a1 + 10), &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
      unint64_t *v4 = a2[10];
    }
  }
  else
  {
    unint64_t *v4 = v5;
    if (v5 >= 3) {
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for Text.Effect.PathInterpolator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = (unint64_t *)(a1 + 80);
  unint64_t v7 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >= 3uLL)
  {
    if (v7 >= 3)
    {
      *uint64_t v6 = v7;
      swift_bridgeObjectRelease();
      return a1;
    }
    _sypSgWOhTm_15(a1 + 80, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D538], MEMORY[0x263F8D488]);
  }
  *uint64_t v6 = v7;
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator()
{
  return &type metadata for Text.Effect.PathInterpolator;
}

uint64_t *initializeBufferWithCopyOfBuffer for Text.Effect.PathInterpolator.MapKeys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for Text.Effect.PathInterpolator.MapKeys(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t *assignWithCopy for Text.Effect.PathInterpolator.MapKeys(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for Text.Effect.PathInterpolator.MapKeys(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.PathInterpolator.MapKeys(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.PathInterpolator.MapKeys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.MapKeys()
{
  return &type metadata for Text.Effect.PathInterpolator.MapKeys;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.Fragment()
{
  return &type metadata for Text.Effect.PathInterpolator.Fragment;
}

uint64_t initializeWithCopy for Text.Effect.PathInterpolator.Interpolated(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.PathInterpolator.Interpolated(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

_OWORD *assignWithTake for Text.Effect.PathInterpolator.Interpolated(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  long long v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  a1[3] = a2[3];
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.PathInterpolator.Interpolated()
{
  return &type metadata for Text.Effect.PathInterpolator.Interpolated;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.PathInterpolator.Fragment> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.PathInterpolator.Fragment>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.PathInterpolator.Fragment>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Fragment, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment;
  if (!lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.PathInterpolator.Fragment>, MEMORY[0x263F8E738]);
}

void type metadata accessor for IndexingIterator<Text.Effect.PathInterpolator.Fragment>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.PathInterpolator.Fragment>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Text.Effect.ClusterIndex>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex, MEMORY[0x263F8D870]);
    lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Text.Effect.ClusterIndex> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.PathInterpolator.Fragment()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.PathInterpolator.Fragment> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.PathInterpolator.Fragment>(255, &lazy cache variable for type metadata for Slice<Text.Effect.PathInterpolator.Fragment>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.PathInterpolator.Fragment and conformance Text.Effect.PathInterpolator.Fragment, (uint64_t)&type metadata for Text.Effect.PathInterpolator.Fragment, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL FixedRoundedRect.isUniform.getter()
{
  return *(double *)(v0 + 32) == *(double *)(v0 + 40);
}

void FixedRoundedRect.clampedCornerRadius.getter()
{
  CGFloat v1 = *v0;
  CGFloat v2 = v0[1];
  CGFloat v3 = v0[2];
  CGFloat v4 = v0[3];
  v5.origin.CGFloat x = *v0;
  v5.origin.CGFloat y = v2;
  v5.size.CGFloat width = v3;
  v5.size.CGFloat height = v4;
  CGRectGetWidth(v5);
  v6.origin.CGFloat x = v1;
  v6.origin.CGFloat y = v2;
  v6.size.CGFloat width = v3;
  v6.size.CGFloat height = v4;
  CGRectGetHeight(v6);
}

void __swiftcall FixedRoundedRect.init(_:cornerSize:style:)(SwiftUI::FixedRoundedRect *__return_ptr retstr, __C::CGRect _, CGSize cornerSize, SwiftUI::RoundedCornerStyle style)
{
  SwiftUI::RoundedCornerStyle v4 = *(unsigned char *)style;
  retstr->CGRect rect = _;
  retstr->cornerSize.CGFloat width = cornerSize.width;
  retstr->cornerSize.CGFloat height = cornerSize.height;
  retstr->style = v4;
}

void FixedRoundedRect.clampedCornerSize.getter()
{
  CGFloat v1 = *v0;
  CGFloat v2 = v0[1];
  CGFloat v3 = v0[2];
  CGFloat v4 = v0[3];
  v5.origin.CGFloat x = *v0;
  v5.origin.CGFloat y = v2;
  v5.size.CGFloat width = v3;
  v5.size.CGFloat height = v4;
  CGRectGetWidth(v5);
  v6.origin.CGFloat x = v1;
  v6.origin.CGFloat y = v2;
  v6.size.CGFloat width = v3;
  v6.size.CGFloat height = v4;
  CGRectGetHeight(v6);
}

CGPathRef FixedRoundedRect.cgPath.getter()
{
  CGFloat v1 = *(double *)v0;
  CGFloat v2 = *(double *)(v0 + 8);
  CGFloat v3 = *(double *)(v0 + 16);
  CGFloat v4 = *(double *)(v0 + 24);
  double v5 = *(double *)(v0 + 32);
  double v6 = *(double *)(v0 + 40);
  int v7 = *(unsigned __int8 *)(v0 + 48);
  v18.origin.CGFloat x = *(CGFloat *)v0;
  v18.origin.CGFloat y = v2;
  v18.size.CGFloat width = v3;
  v18.size.CGFloat height = v4;
  double Width = CGRectGetWidth(v18);
  v19.origin.CGFloat x = v1;
  v19.origin.CGFloat y = v2;
  v19.size.CGFloat width = v3;
  v19.size.CGFloat height = v4;
  double Height = CGRectGetHeight(v19);
  BOOL v10 = v5 != 0.0 || v6 != 0.0;
  char v11 = v7 == 1 && v10;
  double v12 = fabs(Height) * 0.5;
  double v13 = fabs(Width);
  if (v12 >= v13 * 0.5) {
    double v12 = v13 * 0.5;
  }
  if (v12 >= v6) {
    double v14 = v6;
  }
  else {
    double v14 = v12;
  }
  if (v12 >= v5) {
    double v15 = v5;
  }
  else {
    double v15 = v12;
  }

  return _CGPathCreateRoundedRect(v11, v1, v2, v3, v4, v15, v14);
}

Swift::Bool __swiftcall FixedRoundedRect.contains(_:)(CGPoint a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v8 = v1[1];
  long long v9 = *v1;
  uint64_t v2 = *((void *)v1 + 4);
  uint64_t v3 = *((void *)v1 + 5);
  int v4 = *((unsigned __int8 *)v1 + 48);
  RBPathStorageInit();
  v10[0] = v9;
  v10[1] = v8;
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  if (v4) {
    uint64_t v5 = 9;
  }
  else {
    uint64_t v5 = 8;
  }
  MEMORY[0x24C526C30](v13, v5, v10, 0);
  if (one-time initialization token for temporaryPathCallbacks != -1) {
    swift_once();
  }
  char v6 = RBPathContainsPoint();
  MEMORY[0x24C526C60](v13);
  return v6;
}

uint64_t FixedRoundedRect.withTemporaryPath<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static RBPath.withTemporaryPath<A>(do:builder:)(a1, a2, a3);
}

void __swiftcall FixedRoundedRect.init(_:)(SwiftUI::FixedRoundedRect *__return_ptr retstr, __C::CGRect a2)
{
  retstr->CGRect rect = a2;
  retstr->cornerSize.CGFloat width = 0.0;
  retstr->cornerSize.CGFloat height = 0.0;
  retstr->style = SwiftUI_RoundedCornerStyle_circular;
}

char *FixedRoundedRect.init(_:cornerRadius:style:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  char v7 = *result;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(double *)(a2 + 24) = a6;
  *(double *)(a2 + 32) = a7;
  *(double *)(a2 + 40) = a7;
  *(unsigned char *)(a2 + 48) = v7;
  return result;
}

void __swiftcall FixedRoundedRect.applying(_:)(SwiftUI::FixedRoundedRect *__return_ptr retstr, CGAffineTransform *a2)
{
  CGFloat a = a2->a;
  CGFloat b = a2->b;
  CGFloat c = a2->c;
  CGFloat d = a2->d;
  CGFloat tx = a2->tx;
  CGFloat ty = a2->ty;
  CGRect v29 = *(CGRect *)v2;
  v3.i64[0] = *(void *)(v2 + 32);
  int8x16_t v26 = v3;
  v3.i64[0] = *(void *)(v2 + 40);
  int8x16_t v25 = v3;
  SwiftUI::RoundedCornerStyle v11 = *(unsigned char *)(v2 + 48);
  v27.CGFloat a = a2->a;
  v27.CGFloat b = b;
  v27.CGFloat c = c;
  v27.CGFloat d = d;
  v27.CGFloat tx = tx;
  v27.CGFloat ty = ty;
  CGRect v30 = CGRectApplyAffineTransform(v29, &v27);
  CGFloat x = v30.origin.x;
  CGFloat v13 = *(double *)v26.i64;
  CGFloat y = v30.origin.y;
  CGFloat width = v30.size.width;
  CGFloat height = v30.size.height;
  if ((~v26.i64[0] & 0x7FF0000000000000) == 0) {
    goto LABEL_4;
  }
  CGFloat v17 = *(double *)v25.i64;
  if ((~v25.i64[0] & 0x7FF0000000000000) != 0)
  {
    v27.CGFloat a = a;
    v27.CGFloat b = b;
    v27.CGFloat c = c;
    v27.CGFloat d = d;
    v27.CGFloat tx = tx;
    v27.CGFloat ty = ty;
    *(void *)&v28.CGFloat height = v25.i64[0];
    *(void *)&v28.CGFloat width = v26.i64[0];
    double v18 = x;
    double v19 = y;
    CGSize v22 = CGSizeApplyAffineTransform(v28, &v27);
    *(CGFloat *)v21.i64 = v22.height;
    *(CGFloat *)v20.i64 = v22.width;
    CGFloat y = v19;
    CGFloat x = v18;
    v23.f64[0] = NAN;
    v23.f64[1] = NAN;
    int8x16_t v24 = (int8x16_t)vnegq_f64(v23);
    *(void *)&CGFloat v13 = vbslq_s8(v24, v20, v26).u64[0];
    v25.i64[0] = vbslq_s8(v24, v21, v25).u64[0];
LABEL_4:
    CGFloat v17 = *(double *)v25.i64;
  }
  retstr->rect.origin.CGFloat x = x;
  retstr->rect.origin.CGFloat y = y;
  retstr->rect.size.CGFloat width = width;
  retstr->rect.size.CGFloat height = height;
  retstr->cornerSize.CGFloat width = v13;
  retstr->cornerSize.CGFloat height = v17;
  retstr->style = v11;
}

void RectangleCornerRadii.animatableData.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

BOOL FixedRoundedRect.isRounded.getter()
{
  return *(double *)(v0 + 40) != 0.0 || *(double *)(v0 + 32) != 0.0;
}

void FixedRoundedRect.insetBy(dx:dy:)(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  double v7 = *v3;
  uint64_t v8 = *((void *)v3 + 1);
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = *((void *)v3 + 3);
  double v12 = v3[4];
  double v11 = v3[5];
  char v13 = *((unsigned char *)v3 + 48);
  if (a2 == 0.0 && a3 == 0.0)
  {
    *(double *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(double *)(a1 + 32) = v12;
    *(double *)(a1 + 40) = v11;
  }
  else
  {
    CGRect v20 = CGRectInset(*(CGRect *)&v7, a2, a3);
    CGFloat x = v20.origin.x;
    CGFloat y = v20.origin.y;
    CGFloat width = v20.size.width;
    CGFloat height = v20.size.height;
    if (CGRectIsEmpty(v20))
    {
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(unsigned char *)(a1 + 48) = 2;
      return;
    }
    double v18 = v12 - a2;
    double v19 = 0.0;
    if (v12 - a2 < 0.0) {
      double v18 = 0.0;
    }
    *(CGFloat *)a1 = x;
    *(CGFloat *)(a1 + 8) = y;
    *(CGFloat *)(a1 + 16) = width;
    *(CGFloat *)(a1 + 24) = height;
    if (v11 - a3 >= 0.0) {
      double v19 = v11 - a3;
    }
    *(double *)(a1 + 32) = v18;
    *(double *)(a1 + 40) = v19;
  }
  *(unsigned char *)(a1 + 48) = v13;
}

Swift::Bool __swiftcall FixedRoundedRect.hasIntersection(_:)(__C::CGRect a1)
{
  CGRect v3 = CGRectIntersection(*v1, (CGRect)a1);
  return !CGRectIsEmpty(v3);
}

BOOL FixedRoundedRect.contains(path:offsetBy:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v8 = v3[2];
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v11 = v3[5];
  char v12 = *((unsigned char *)v3 + 48);
  outlined init with take of Path.Storage(a1, (uint64_t)v28);
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)&v29);
  SwiftUI::RoundedCornerStyle v13 = v33;
  if (v33 == SwiftUI_RoundedCornerStyle_unknownDefault)
  {
    double v14 = *(double *)(*(void *)&v29 + 16);
    double v15 = *(double *)(*(void *)&v29 + 24);
    CGFloat v17 = *(double *)(*(void *)&v29 + 32);
    CGFloat v18 = *(double *)(*(void *)&v29 + 40);
    CGSize v16 = *(CGSize *)(*(void *)&v29 + 48);
    SwiftUI::RoundedCornerStyle v13 = *(unsigned char *)(*(void *)&v29 + 64);
    goto LABEL_9;
  }
  if (v33 == SwiftUI_RoundedCornerStyle_continuous)
  {
    CGFloat v17 = v31;
    CGFloat v18 = v32;
    if (v31 == v32)
    {
      SwiftUI::RoundedCornerStyle v13 = SwiftUI_RoundedCornerStyle_circular;
      double v14 = v29;
      double v15 = v30;
      CGSize v16 = (CGSize)vdupq_lane_s64(COERCE__INT64(v31 * 0.5), 0);
      goto LABEL_9;
    }
LABEL_8:
    Path.boundingRect.getter();
    SwiftUI::RoundedCornerStyle v13 = SwiftUI_RoundedCornerStyle_circular;
    CGSize v16 = (CGSize)0;
    goto LABEL_9;
  }
  if (v33) {
    goto LABEL_8;
  }
  double v14 = v29;
  double v15 = v30;
  CGSize v16 = (CGSize)0;
  CGFloat v17 = v31;
  CGFloat v18 = v32;
LABEL_9:
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  char v27 = v12;
  v20.rect.origin.CGFloat x = v14 + a2;
  v20.rect.origin.CGFloat y = v15 + a3;
  v20.rect.size.CGFloat width = v17;
  v20.rect.size.CGFloat height = v18;
  v20.cornerdouble Size = v16;
  v20.style = v13;
  return FixedRoundedRect.contains(_:)(&v20);
}

Swift::Bool __swiftcall FixedRoundedRect.contains(rect:)(__C::CGRect rect)
{
  char v2 = *((unsigned char *)v1 + 48);
  long long v3 = v1[1];
  long long v6 = *v1;
  long long v7 = v3;
  long long v8 = v1[2];
  char v9 = v2;
  v5.CGRect rect = rect;
  memset(&v5.cornerSize, 0, 17);
  return FixedRoundedRect.contains(_:)(&v5);
}

void RoundedCornerStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int RoundedCornerStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double FixedRoundedRect.rect.getter()
{
  return *(double *)v0;
}

void FixedRoundedRect.rect.setter(double a1, double a2, double a3, double a4)
{
  double *v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*FixedRoundedRect.rect.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double FixedRoundedRect.cornerSize.getter()
{
  return *(double *)(v0 + 32);
}

void FixedRoundedRect.cornerSize.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*FixedRoundedRect.cornerSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void FixedRoundedRect.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

unsigned char *FixedRoundedRect.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 48) = *result;
  return result;
}

uint64_t (*FixedRoundedRect.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL FixedRoundedRect.needsContinuousCorners.getter()
{
  if (*(unsigned char *)(v0 + 48) != 1) {
    return 0;
  }
  if (*(double *)(v0 + 32) == 0.0) {
    return *(double *)(v0 + 40) != 0.0;
  }
  return 1;
}

void FixedRoundedRect.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  double v5 = *(double *)v3;
  double v6 = *(double *)(v3 + 8);
  double v7 = *(double *)(v3 + 16);
  double v8 = *(double *)(v3 + 24);
  double v9 = *(double *)(v3 + 32);
  double v10 = *(double *)(v3 + 40);
  char v11 = *(unsigned char *)(v3 + 48);
  v17.origin.CGFloat x = 0.0;
  v17.origin.CGFloat y = 0.0;
  v17.size.CGFloat width = 0.0;
  v17.size.CGFloat height = 0.0;
  v16.origin.CGFloat x = *(CGFloat *)v3;
  v16.origin.CGFloat y = v6;
  v16.size.CGFloat width = v7;
  v16.size.CGFloat height = v8;
  if (CGRectEqualToRect(v16, v17)
    || (ProtobufEncoder.encodeVarint(_:)(0xAuLL), specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8), !v2))
  {
    if (v9 != 0.0 || v10 != 0.0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      uint64_t v12 = *(void *)(a1 + 8);
      SwiftUI::RoundedCornerStyle v13 = *(void **)(a1 + 24);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        SwiftUI::RoundedCornerStyle v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1) {
        SwiftUI::RoundedCornerStyle v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
      }
      _OWORD v13[2] = v15 + 1;
      v13[v15 + 4] = v12;
      *(void *)(a1 + 24) = v13;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        return;
      }
      *(void *)(a1 + 8) = v12 + 1;
      CGSize.encode(to:)((double *)a1, v9, v10);
      ProtobufEncoder.endLengthDelimited()();
    }
    if (v11)
    {
      ProtobufEncoder.encodeVarint(_:)(0x18uLL);
      ProtobufEncoder.encodeVarint(_:)(1uLL);
    }
  }
}

unint64_t FixedRoundedRect.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v42 = *MEMORY[0x263EF8340];
  BOOL v38 = 0;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    BOOL v29 = 0;
    long long v9 = 0uLL;
    uint64_t v7 = 0;
    double v8 = 0.0;
    long long v10 = 0uLL;
LABEL_60:
    v3[3] = 0;
    *(_OWORD *)a2 = v9;
    *(_OWORD *)(a2 + 16) = v10;
    *(double *)(a2 + 32) = v8;
    *(void *)(a2 + 40) = v7;
    *(unsigned char *)(a2 + 48) = v29;
    return result;
  }
  uint64_t v7 = 0;
  double v8 = 0.0;
  long long v9 = 0uLL;
  long long v10 = 0uLL;
  while (1)
  {
    uint64_t result = v3[3];
    long long v34 = v10;
    long long v36 = v9;
    if (result)
    {
      unint64_t v13 = v3[4];
      if (v5 < v13) {
        goto LABEL_11;
      }
      if (v13 < v5) {
        goto LABEL_61;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    long long v10 = v34;
    long long v9 = v36;
    if (result <= 7) {
      goto LABEL_61;
    }
LABEL_11:
    unint64_t v14 = result >> 3;
    if (result >> 3 == 3)
    {
      if ((result & 7) != 0)
      {
        if ((result & 7) != 2) {
          goto LABEL_61;
        }
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_74;
        }
        unint64_t v21 = v3[1] + result;
        if (v6 < v21) {
          goto LABEL_61;
        }
        v3[3] = 24;
        v3[4] = v21;
      }
      uint64_t result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      BOOL v38 = result == 1;
LABEL_50:
      long long v10 = v34;
      long long v9 = v36;
      goto LABEL_4;
    }
    if (v14 == 2) {
      break;
    }
    if (v14 != 1)
    {
      switch(result & 7)
      {
        case 0uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (!v2) {
            goto LABEL_50;
          }
          return result;
        case 1uLL:
          unint64_t v28 = v3[1] + 8;
          if (v6 < v28) {
            goto LABEL_61;
          }
          goto LABEL_58;
        case 2uLL:
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          long long v10 = v34;
          long long v9 = v36;
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_75;
          }
          unint64_t v28 = v3[1] + result;
          if (v6 < v28) {
            goto LABEL_61;
          }
LABEL_58:
          v3[1] = v28;
          break;
        case 5uLL:
          unint64_t v28 = v3[1] + 4;
          if (v6 >= v28) {
            goto LABEL_58;
          }
          goto LABEL_61;
        default:
          goto LABEL_61;
      }
      goto LABEL_4;
    }
    if ((result & 7) != 2) {
      goto LABEL_61;
    }
    unint64_t v15 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    if (v17 >= v16 >> 1) {
      unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    }
    _OWORD v15[2] = v17 + 1;
    v15[v17 + 4] = v6;
    v3[5] = v15;
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      __break(1u);
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
      double v30 = (void *)result;
      uint64_t v31 = *(void *)(result + 16);
      if (v31) {
        goto LABEL_67;
      }
      __break(1u);
      double v30 = (void *)v3[5];
      if (v30[2])
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v31 = v30[2];
          if (v31)
          {
LABEL_67:
            uint64_t v32 = v31 - 1;
            uint64_t v33 = v30[v32 + 4];
            void v30[2] = v32;
            v3[5] = v30;
            v3[2] = v33;
            return result;
          }
LABEL_79:
          __break(1u);
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      double v30 = (void *)result;
      uint64_t v31 = *(void *)(result + 16);
      if (v31) {
        goto LABEL_67;
      }
      goto LABEL_79;
    }
    unint64_t v18 = v3[1] + result;
    if (v6 < v18) {
      goto LABEL_61;
    }
    v3[2] = v18;
    long long v40 = 0u;
    long long v41 = 0u;
    closure #1 in CGRect.init(from:)((unint64_t)&v40, v3, &v39);
    double v19 = (void *)v3[5];
    if (!v19[2]) {
      goto LABEL_70;
    }
    long long v35 = v41;
    long long v37 = v40;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      double v19 = (void *)result;
    }
    uint64_t v20 = v19[2];
    long long v10 = v35;
    long long v9 = v37;
    if (!v20) {
      goto LABEL_72;
    }
LABEL_3:
    uint64_t v11 = v20 - 1;
    uint64_t v12 = v19[v11 + 4];
    long long v19[2] = v11;
    v3[5] = v19;
    v3[2] = v12;
LABEL_4:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6)
    {
      BOOL v29 = v38;
      goto LABEL_60;
    }
  }
  if ((result & 7) != 2) {
    goto LABEL_61;
  }
  uint64_t v22 = (void *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
  }
  unint64_t v24 = v22[2];
  unint64_t v23 = v22[3];
  if (v24 >= v23 >> 1) {
    uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
  }
  v22[2] = v24 + 1;
  v22[v24 + 4] = v6;
  v3[5] = v22;
  uint64_t result = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_69;
  }
  unint64_t v25 = v3[1] + result;
  if (v6 >= v25)
  {
    v3[2] = v25;
    double v26 = specialized CGPoint.init(from:)(v3);
    double v19 = (void *)v3[5];
    if (!v19[2]) {
      goto LABEL_71;
    }
    double v8 = v26;
    uint64_t v7 = v27;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      double v19 = (void *)result;
    }
    uint64_t v20 = v19[2];
    long long v10 = v34;
    long long v9 = v36;
    if (!v20) {
      goto LABEL_73;
    }
    goto LABEL_3;
  }
LABEL_61:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance FixedRoundedRect(uint64_t a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance FixedRoundedRect@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FixedRoundedRect.init(from:)(a1, a2);
}

uint64_t RoundedCornerStyle.protobufValue.getter()
{
  return *v0;
}

SwiftUI::RoundedCornerStyle_optional __swiftcall RoundedCornerStyle.init(protobufValue:)(Swift::UInt protobufValue)
{
  char v2 = protobufValue != 0;
  if (protobufValue > 1) {
    char v2 = 2;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::RoundedCornerStyle_optional)protobufValue;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance RoundedCornerStyle@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result != 0;
  if (result > 1) {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

void RectangleCornerRadii.topLeft.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*RectangleCornerRadii.topLeft.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RectangleCornerRadii.topRight.getter(double a1, double a2)
{
  return a2;
}

void RectangleCornerRadii.topRight.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*RectangleCornerRadii.topRight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RectangleCornerRadii.bottomRight.getter(double a1, double a2, double a3)
{
  return a3;
}

void RectangleCornerRadii.bottomRight.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*RectangleCornerRadii.bottomRight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RectangleCornerRadii.bottomLeft.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

void RectangleCornerRadii.bottomLeft.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*RectangleCornerRadii.bottomLeft.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double RectangleCornerRadii.bottomLeading.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

double RectangleCornerRadii.bottomTrailing.getter(double a1, double a2, double a3)
{
  return a3;
}

double RectangleCornerRadii.topTrailing.getter(double a1, double a2)
{
  return a2;
}

uint64_t (*RectangleCornerRadii.animatableData.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = v1[1];
  *(_OWORD *)uint64_t v3 = *v1;
  *((_OWORD *)v3 + 1) = v4;
  return UnevenRoundedRectangle.animatableData.modify;
}

BOOL static RectangleCornerRadii.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL v8 = a1 == a5;
  if (a2 != a6) {
    BOOL v8 = 0;
  }
  if (a3 != a7) {
    BOOL v8 = 0;
  }
  return a4 == a8 && v8;
}

uint64_t specialized static FixedRoundedRect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 32);
  double v3 = *(double *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 48);
  double v5 = *(double *)(a2 + 32);
  double v6 = *(double *)(a2 + 40);
  int v7 = *(unsigned __int8 *)(a2 + 48);
  BOOL v8 = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  BOOL v9 = v2 == v5 && v8;
  if (v3 != v6) {
    BOOL v9 = 0;
  }
  return v9 & (v4 ^ v7 ^ 1u);
}

uint64_t partial apply for closure #1 in FixedRoundedRect.withTemporaryPath<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v3;
  unsigned int v6[2] = *(_OWORD *)(v2 + 32);
  if (*(unsigned char *)(v2 + 48)) {
    uint64_t v4 = 9;
  }
  else {
    uint64_t v4 = 8;
  }
  return MEMORY[0x24C526C30](a1, v4, v6, 0);
}

unint64_t lazy protocol witness table accessor for type RoundedCornerStyle and conformance RoundedCornerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedCornerStyle and conformance RoundedCornerStyle;
  if (!lazy protocol witness table cache variable for type RoundedCornerStyle and conformance RoundedCornerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCornerStyle and conformance RoundedCornerStyle);
  }
  return result;
}

double sub_24612A2EC@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_24612A2F8(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_24612A304@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 24);
  *a2 = result;
  return result;
}

double sub_24612A310(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 24) = *a1;
  return result;
}

double sub_24612A31C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 16);
  *a2 = result;
  return result;
}

double sub_24612A328(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 16) = *a1;
  return result;
}

double sub_24612A334@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_24612A340(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

__n128 sub_24612A34C@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_24612A358(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FixedRoundedRect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for FixedRoundedRect()
{
  return &type metadata for FixedRoundedRect;
}

ValueMetadata *type metadata accessor for StretchTextEffect()
{
  return &type metadata for StretchTextEffect;
}

uint64_t specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, double *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect, (uint64_t)&type metadata for SmallTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<BigTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type BigTextEffect and conformance BigTextEffect, (uint64_t)&type metadata for BigTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BigTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect, (uint64_t)&type metadata for BloomTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<BounceTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type BounceTextEffect and conformance BounceTextEffect, (uint64_t)&type metadata for BounceTextEffect, specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BounceTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect, (uint64_t)&type metadata for SquishTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect, (uint64_t)&type metadata for ExplodeTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect, (uint64_t)&type metadata for SomersaultTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect, (uint64_t)&type metadata for ShakeVerticalTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>);
}

{
  return specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, a5, a6, a7, a8, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect, (uint64_t)&type metadata for ShakeHorizontalTextEffect, (uint64_t (*)(uint64_t))specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>);
}

uint64_t specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, double (*a6)(uint64_t, double)@<X5>, void (*a7)(long long *__return_ptr, _OWORD *)@<X6>, unint64_t *a8@<X7>, double *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, void (*a13)(void), uint64_t a14, uint64_t (*a15)(uint64_t), uint64_t (*a16)(void))
{
  uint64_t v108 = a8;
  unint64_t v104 = a9;
  uint64_t v105 = a5(0);
  MEMORY[0x270FA5388](v105);
  double v26 = (uint64_t *)((char *)&v102 - v25);
  uint64_t v126 = MEMORY[0x263F8EE78];
  double v27 = 0.0;
  double v28 = a6(a4, 0.0);
  BOOL v29 = Text.Effect.ChunkingFunction.chunk(_:)(a4, *(void *)(a1 + 120), *(void *)(a1 + 128), *(unsigned char *)(a1 + 136));
  uint64_t v121 = a1;
  double v122 = a10;
  double v123 = a11;
  double v124 = a12;
  uint64_t v107 = (uint64_t *)a4;
  uint64_t v125 = a4;
  swift_bridgeObjectRetain();
  uint64_t v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI4TextVAFE6EffectO15ChunkCollectionV_AJ6TimingV0H033_EA19070B6A02390AF2C0CF68765CF6B2LLVs5NeverOTg5(a7, (uint64_t)v120, (uint64_t)v29);
  uint64_t v103 = v29;
  swift_bridgeObjectRelease();
  outlined release of Text.Effect.Timing.Configuration(a1);
  uint64_t v116 = v30;
  uint64_t v31 = *(void *)(v30 + 16);
  if (!v31) {
    goto LABEL_9;
  }
  if (v31 == 1)
  {
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v33 = (double *)(v116 + 88);
    uint64_t v34 = v31 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      double v35 = *(v33 - 4);
      double v36 = *v33;
      v33 += 8;
      double v27 = v27 + v35 + v36;
      v34 -= 2;
    }
    while (v34);
    if (v31 == v32) {
      goto LABEL_9;
    }
  }
  uint64_t v37 = v31 - v32;
  BOOL v38 = (double *)(v116 + 32 * v32 + 56);
  do
  {
    double v39 = *v38;
    v38 += 4;
    double v27 = v27 + v39;
    --v37;
  }
  while (v37);
LABEL_9:
  if (a3) {
    double v40 = v27;
  }
  else {
    double v40 = a2;
  }
  double v41 = 1.0;
  double v42 = 0.0;
  specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, a10, a11);
  double v114 = v43;
  unint64_t v109 = v26;
  double v106 = v40;
  if (v31)
  {
    double v102 = v28;
    unint64_t v44 = 0;
    double v112 = v27 / v40;
    uint64_t v115 = (void (*)(void))(v116 + 32);
    double v45 = -a10;
    if (a10 >= 0.0) {
      double v45 = a10;
    }
    long long v46 = (void *)MEMORY[0x263F8EE78];
    double v47 = 6.28318531 / sqrt(a11 * a11 + v45 * a10);
    double v48 = a11 * 0.5 * v47 / 3.14159265;
    double v110 = sqrt(vabdd_f64(1.0, v48 * v48));
    double v111 = v48;
    double v49 = v48 * 6.28318531;
    uint64_t v113 = v31;
    while (v44 < *(void *)(v116 + 16))
    {
      uint64_t v50 = (char *)v115 + 32 * v44;
      uint64_t v51 = *(void *)v50;
      uint64_t v52 = *((void *)v50 + 1);
      uint64_t v53 = *((void *)v50 + 2);
      double v54 = *((double *)v50 + 3);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v119 = v53;
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v51);
      uint64_t v55 = *(void *)(v52 + 16);
      if (v55)
      {
        double v117 = v54;
        double v56 = v112 * v54;
        double v57 = v112 * v54 / v114;
        double v118 = v42;
        double v58 = v112 * v42;
        double v59 = *(double *)&qword_2461CB510[v111 > v41] * v110;
        swift_bridgeObjectRetain();
        uint64_t v60 = (double *)(v52 + 40);
        do
        {
          double v62 = *(v60 - 1);
          double v61 = *v60;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46[2] + 1, 1, v46);
          }
          unint64_t v64 = v46[2];
          unint64_t v63 = v46[3];
          if (v64 >= v63 >> 1) {
            long long v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v64 + 1, 1, v46);
          }
          double v65 = v57 * v61 * v47;
          v46[2] = v64 + 1;
          long long v66 = (double *)&v46[5 * v64];
          v66[4] = v58 + v56 * v62;
          v66[5] = v56 * v61;
          v66[6] = v59 / v65;
          v66[7] = v49 / v65;
          v66[8] = 1.0;
          v60 += 2;
          --v55;
        }
        while (v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v31 = v113;
        double v41 = 1.0;
        double v42 = v118;
        double v54 = v117;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v44;
      swift_bridgeObjectRelease();
      double v42 = v42 + v54;
      if (v44 == v31)
      {
        swift_bridgeObjectRelease();
        double v28 = v102;
        double v26 = v109;
        goto LABEL_29;
      }
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    swift_release();
    goto LABEL_80;
  }
  swift_bridgeObjectRelease();
  long long v46 = (void *)MEMORY[0x263F8EE78];
LABEL_29:
  long long v67 = v107;
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>((uint64_t)v107, (uint64_t)v26, v108, a13);
  uint64_t v68 = *v67;
  Swift::UInt64 v69 = v67[1];
  uint64_t v70 = v67[2];
  swift_beginAccess();
  double v71 = v106;
  if (!*(void *)(*(void *)(v68 + 48) + 16)) {
    goto LABEL_82;
  }
  swift_retain();
  specialized __RawDictionaryStorage.find<A>(_:)(v69, v70);
  if ((v72 & 1) == 0)
  {
LABEL_81:
    swift_release();
LABEL_82:
    uint64_t result = swift_endAccess();
    __break(1u);
    return result;
  }
  uint64_t v115 = a13;
  uint64_t v116 = a14;
  swift_endAccess();
  uint64_t v73 = swift_release();
  uint64_t v74 = *(int *)(v105 + 36);
  *(uint64_t *)((char *)v26 + v74) = 0;
  if (a15(v73))
  {
    int64_t v75 = 0;
    uint64_t v76 = *v26;
    Swift::UInt64 v77 = v26[1];
    uint64_t v78 = v26[2];
    uint64_t v119 = *v26 + 48;
    *(void *)&double v118 = v46 + 4;
    *(void *)&double v117 = v46 + 10;
    double v79 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v76, v77, v78, v75, v127);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v76 + 48) + 16)) {
        break;
      }
      swift_retain();
      specialized __RawDictionaryStorage.find<A>(_:)(v77, v78);
      if ((v80 & 1) == 0) {
        goto LABEL_79;
      }
      swift_endAccess();
      uint64_t v81 = swift_release();
      if (v75 >= a15(v81)) {
        goto LABEL_69;
      }
      *(uint64_t *)((char *)v26 + v74) = ++v75;
      uint64_t v82 = *(void *)(*(void *)(v127[3] + 96) + 16);
      uint64_t v83 = v128 + v82;
      if (__OFADD__(v128, v82)) {
        goto LABEL_70;
      }
      if (v83 < (uint64_t)v128) {
        goto LABEL_71;
      }
      if (__OFSUB__(v83, v128)) {
        goto LABEL_72;
      }
      if (v83 == v128) {
        goto LABEL_73;
      }
      if ((v128 & 0x8000000000000000) != 0) {
        goto LABEL_74;
      }
      unint64_t v84 = v46[2];
      if (v128 >= v84) {
        goto LABEL_75;
      }
      uint64_t v85 = (double *)(*(void *)&v118 + 40 * v128);
      double v86 = *v85;
      double v87 = *v85 + v85[1];
      if (*v85 > v87) {
        goto LABEL_76;
      }
      unint64_t v88 = v128 + 1;
      if (__OFSUB__(v83, v128 + 1)) {
        goto LABEL_77;
      }
      if (v83 != v128 + 1)
      {
        uint64_t v89 = v82 - 1;
        float v90 = (double *)(*(void *)&v117 + 40 * v128);
        while ((uint64_t)v88 < v83)
        {
          if (v88 >= v84) {
            goto LABEL_65;
          }
          double v91 = *(v90 - 1);
          double v92 = v91 + *v90;
          if (v91 > v92) {
            goto LABEL_66;
          }
          if (v91 < v86) {
            double v86 = *(v90 - 1);
          }
          if (v87 <= v92) {
            double v87 = v91 + *v90;
          }
          if (v86 > v87) {
            goto LABEL_67;
          }
          v90 += 5;
          ++v88;
          if (!--v89) {
            goto LABEL_55;
          }
        }
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
LABEL_55:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        double v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79[2] + 1, 1, v79);
      }
      unint64_t v94 = v79[2];
      unint64_t v93 = v79[3];
      if (v94 >= v93 >> 1) {
        double v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v79);
      }
      v79[2] = v94 + 1;
      uint64_t v95 = (double *)&v79[2 * v94];
      v95[4] = v86;
      v95[5] = v87;
      uint64_t v96 = outlined release of Text.Effect.BaseFragment((uint64_t)v127);
      double v26 = v109;
      uint64_t v97 = a15(v96);
      if (__OFSUB__(v97, v75)) {
        goto LABEL_78;
      }
      if (v97 == v75) {
        goto LABEL_63;
      }
    }
LABEL_80:
    swift_endAccess();
    __break(1u);
    goto LABEL_81;
  }
  double v79 = (void *)MEMORY[0x263F8EE78];
LABEL_63:
  outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>((uint64_t)v26, a16);
  uint64_t result = outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>((uint64_t)v107, v108, v115);
  uint64_t v99 = v126;
  int64_t v100 = v104;
  *unint64_t v104 = v71;
  v100[1] = v28;
  *((void *)v100 + 2) = v99;
  *((void *)v100 + 3) = v79;
  uint64_t v101 = v103;
  *((void *)v100 + 4) = v46;
  *((void *)v100 + 5) = v101;
  return result;
}

uint64_t closure #1 in StretchTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v30, a2, a3, 1);
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  uint64_t v12 = swift_allocObject();
  long long v13 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v12 + 32) = v13;
  *(void *)(v12 + 48) = *(void *)(a4 + 32);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)a1;
  *(void *)(v12 + 72) = v8;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v10;
  *(void *)(v12 + 96) = v11;
  uint64_t v14 = swift_allocObject();
  long long v15 = v30[3];
  *(_OWORD *)(v14 + 48) = v30[2];
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + 80) = v30[4];
  uint64_t v16 = v31;
  long long v17 = v30[1];
  *(_OWORD *)(v14 + 16) = v30[0];
  *(_OWORD *)(v14 + 32) = v17;
  *(void *)(v14 + 96) = v16;
  *(void *)(v14 + 104) = partial apply for closure #1 in closure #1 in StretchTextEffect.configuration(_:);
  *(void *)(v14 + 112) = v12;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
  *(void *)(v18 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v19 = v18 + 32;
  *(void *)(v18 + 40) = v14;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>);
  initeCGFloat d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v18;
  int64_t v21 = *(void *)(v18 + 16);
  outlined retain of LinearGradient((uint64_t)&v32);
  outlined retain of LinearGradient((uint64_t)&v33);
  outlined retain of LinearGradient((uint64_t)&v34);
  outlined retain of LinearGradient((uint64_t)&v35);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 1, MEMORY[0x263F8EE78]);
  unint64_t v23 = v22;
  if (!*(void *)(v18 + 16))
  {
    if (!v21) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v24 = v22[2];
  if ((v22[3] >> 1) - v24 < v21)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v25 = (unint64_t)&v22[2 * v24 + 4];
  if (v19 < v25 + 16 * v21 && v25 < v19 + 16 * v21) {
    goto LABEL_13;
  }
  swift_arrayInitWithCopy();
  if (!v21)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v30);
    return (uint64_t)v23;
  }
  uint64_t v26 = v23[2];
  BOOL v27 = __OFADD__(v26, v21);
  uint64_t v28 = v26 + v21;
  if (!v27)
  {
    v23[2] = v28;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in StretchTextEffect.configuration(_:)(unint64_t a1, uint64_t *a2, double *a3, uint64_t a4)
{
  uint64_t v8 = a3;
  double v12 = *((double *)a2 + 4);
  double v11 = *((double *)a2 + 5);
  double v13 = *((double *)a2 + 8);
  double v14 = v11 - v12;
  if (v11 - v12 >= 0.0)
  {
    double v15 = v14 / v13;
    if (v14 / v13 < 0.0)
    {
      double v16 = a3[3];
      double v17 = 0.0;
      if (v16 <= 0.0) {
        goto LABEL_17;
      }
      goto LABEL_7;
    }
    goto LABEL_8;
  }
  double v17 = 0.0;
  double v15 = 0.0 / v13;
  if (0.0 / v13 >= 0.0)
  {
LABEL_8:
    double v17 = 1.0;
    if (v15 <= 1.0)
    {
      double v16 = a3[3];
      if (v15 < v16)
      {
        double v18 = v15 / v16;
LABEL_14:
        double v19 = 1.0;
        if (v18 == 1.0) {
          goto LABEL_20;
        }
        goto LABEL_15;
      }
      double v17 = v15;
    }
    else
    {
      double v16 = a3[3];
      if (v16 > 1.0)
      {
        double v19 = 1.0;
        double v18 = 1.0 / v16;
        if (1.0 / v16 == 1.0) {
          goto LABEL_20;
        }
LABEL_15:
        double v19 = 1.0 - exp2(v18 * -10.0);
        goto LABEL_20;
      }
    }
    goto LABEL_17;
  }
  double v16 = a3[3];
  if (v16 > 0.0)
  {
LABEL_7:
    double v18 = 0.0 / v16;
    goto LABEL_14;
  }
LABEL_17:
  double v20 = (v17 - v16) / a3[4];
  double v4 = 1.0;
  double v21 = 1.0;
  if (v20 != 1.0) {
    double v21 = 1.0 - exp2(v20 * -10.0);
  }
  double v19 = 1.0 - v21;
LABEL_20:
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v22 = *(void *)(a4 + 16);
  if (*(void *)(v22 + 16) <= a1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*(void *)(*(void *)(a4 + 32) + 16) > a1)
  {
    double v6 = *(double *)(v22 + 32 * a1 + 32);
    double v4 = *v8;
    double v5 = v8[1];
    double v58 = v8[2];
    a4 = *a2;
    uint64_t v8 = (double *)a2[1];
    char v23 = *((unsigned char *)a2 + 16);
    uint64_t v24 = a2[3];
    uint64_t v25 = a2[6];
    char v26 = *((unsigned char *)a2 + 56);
    char v27 = *((unsigned char *)a2 + 72);
    uint64_t v28 = a2[16];
    uint64_t v29 = a2[25];
    double v30 = *((double *)a2 + 26);
    double v31 = *((double *)a2 + 27);
    double v32 = *((double *)a2 + 28);
    double v33 = *((double *)a2 + 29);
    uint64_t v34 = a2[46];
    char v35 = *((unsigned char *)a2 + 376);
    v66[0] = *a2;
    v66[1] = v8;
    char v67 = v23;
    uint64_t v68 = v24;
    double v69 = v12;
    double v70 = v11;
    uint64_t v71 = v25;
    char v72 = v26;
    double v73 = v13;
    char v74 = v27;
    long long v36 = *((_OWORD *)a2 + 6);
    long long v75 = *((_OWORD *)a2 + 5);
    long long v76 = v36;
    long long v77 = *((_OWORD *)a2 + 7);
    long long v63 = *(_OWORD *)(a2 + 17);
    long long v79 = v63;
    long long v80 = *(_OWORD *)(a2 + 19);
    long long v81 = *(_OWORD *)(a2 + 21);
    long long v82 = *(_OWORD *)(a2 + 23);
    uint64_t v78 = v28;
    uint64_t v83 = v29;
    double v84 = v30;
    double v61 = v31;
    double v62 = v30;
    double v85 = v31;
    double v86 = v32;
    double v59 = v33;
    double v60 = v32;
    double v87 = v33;
    long long v56 = *((_OWORD *)a2 + 16);
    long long v57 = *((_OWORD *)a2 + 15);
    long long v88 = v57;
    long long v89 = v56;
    long long v37 = *((_OWORD *)a2 + 18);
    long long v90 = *((_OWORD *)a2 + 17);
    long long v91 = v37;
    long long v38 = *((_OWORD *)a2 + 20);
    long long v92 = *((_OWORD *)a2 + 19);
    long long v93 = v38;
    long long v39 = *((_OWORD *)a2 + 22);
    long long v94 = *((_OWORD *)a2 + 21);
    long long v95 = v39;
    uint64_t v96 = v34;
    char v97 = v35;
    unint64_t result = outlined retain of Text.Effect.TransformContext((uint64_t)v66);
    if (one-time initialization token for spring == -1) {
      goto LABEL_24;
    }
    goto LABEL_36;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  unint64_t result = swift_once();
LABEL_24:
  CGFloat v41 = 0.0;
  if (v14 < 0.0) {
    double v42 = 0.0;
  }
  else {
    double v42 = v14;
  }
  if (__OFSUB__(a4, a1))
  {
    __break(1u);
  }
  else
  {
    double v43 = fabs(v6 + -0.5);
    double v44 = 1.0 - (v43 + v43);
    double v45 = v19 * (v4 * v44);
    double v46 = v19 * (v5 * v44);
    double v47 = v45 + 1.0;
    double v48 = v46 + 1.0;
    double v49 = 1.0;
    double v50 = 0.0;
    CGFloat v51 = 0.0;
    double v52 = 0.0;
    double v53 = 0.0;
    if (a4 == a1)
    {
      v106[0] = &type metadata for Text.Effect.WidthMultiplierAttribute;
      v106[1] = v8;
      v106[2] = a1;
      v106[3] = 0;
      char v107 = 1;
      uint64_t v108 = 0;
      char v109 = 1;
      double v49 = specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v106, v19 * v58 + 1.0, *(double *)&static StretchTextEffect.spring, *((double *)&static StretchTextEffect.spring + 1), *(double *)&qword_268F73710, v42);
      double v50 = v61;
      CGFloat v41 = v62;
      double v52 = v59;
      CGFloat v51 = v60;
      double v53 = *(double *)&v57;
    }
    double v54 = v49;
    outlined release of Text.Effect.TransformContext((uint64_t)v66);
    v110.origin.CGFloat y = v50 - v52;
    v110.size.CGFloat height = v52 + v53;
    v110.origin.CGFloat x = v41;
    v110.size.CGFloat width = v51;
    CGFloat MidX = CGRectGetMidX(v110);
    memset(v99, 0, sizeof(v99));
    CGFloat v100 = MidX;
    double v101 = v50;
    double v102 = v48;
    double v103 = v47;
    uint64_t v104 = 0x3FF0000000000000;
    char v105 = 0;
    long long v64 = static StretchTextEffect.spring;
    uint64_t v65 = qword_268F73710;
    Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v99, *(double *)&a1, (double *)&v64, (uint64_t)v98);
    unint64_t result = Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v98, 0, 0, 0, 1);
    if (a4 == a1) {
      *((double *)a2 + 17) = v54 * *(double *)&v63;
    }
  }
  return result;
}

uint64_t protocol witness for TextEffect.configuration(_:) in conformance StretchTextEffect()
{
  return specialized StretchTextEffect.configuration(_:)();
}

uint64_t protocol witness for static TextEffect.name.getter in conformance StretchTextEffect()
{
  return 0x68637465727473;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StretchTextEffect(float64x2_t *a1, float64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0];
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance StretchTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v15 - v9;
  char v33 = 1;
  char v32 = 0;
  char v31 = 0;
  long long v17 = xmmword_246215DA0;
  char v18 = 1;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  char v21 = 2;
  long long v22 = xmmword_246215750;
  uint64_t v23 = 0;
  char v24 = 1;
  long long v25 = xmmword_246214540;
  char v26 = 0;
  uint64_t v27 = MEMORY[0x263F8EE78];
  char v28 = 0;
  long long v29 = xmmword_2461BD450;
  char v30 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static StretchTextEffect.spring;
  double v12 = *(double *)&qword_268F73710;
  outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(a1, (uint64_t)v10, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>, (double (*)(uint64_t, double))specialized Sequence.reduce<A>(_:_:), (void (*)(long long *__return_ptr, _OWORD *))partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:), &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect, (uint64_t)&type metadata for StretchTextEffect, specialized Text.Effect.DrawableContent.endIndex.getter, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for StretchTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect();
  unint64_t result = lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  unint64_t v11 = *a1;
  int64_t v12 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v13 = a1[3];
  outlined init with copy of Text.Effect.BaseContent(a3, (uint64_t)v10);
  outlined retain of Text.Effect.Timing.Configuration(a2);
  double v15 = specialized Text.Effect.Timing.Chunk.init(configuration:spring:chunk:content:)(a2, (uint64_t)v25, v11, v12, v14, v13, (uint64_t)v10);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  double v22 = v15;
  uint64_t result = outlined release of Text.Effect.Timing.Configuration(a2);
  *(void *)a4 = v17;
  *((void *)a4 + 1) = v19;
  *((void *)a4 + 2) = v21;
  a4[3] = v22;
  return result;
}

uint64_t specialized StretchTextEffect.configuration(_:)()
{
  uint64_t v1 = swift_allocObject();
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(void *)(v1 + 48) = *(void *)(v0 + 32);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in StretchTextEffect.configuration(_:);
  *(void *)(v3 + 24) = v1;
  swift_retain();
  double v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v6 = v4[2];
  unint64_t v5 = v4[3];
  if (v6 >= v5 >> 1) {
    double v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v4);
  }
  _OWORD v4[2] = v6 + 1;
  int v7 = &v4[2 * v6];
  void v7[4] = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  _OWORD v7[5] = v3;
  swift_release();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24612F030()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StretchTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in StretchTextEffect.configuration(_:)(a1, a2, a3, v3 + 16);
}

uint64_t sub_24612F048()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24612F080()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in StretchTextEffect.configuration(_:)(unint64_t a1, uint64_t *a2)
{
  return closure #1 in closure #1 in StretchTextEffect.configuration(_:)(a1, a2, (double *)(v2 + 16), v2 + 56);
}

uint64_t sub_24612F0DC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<StretchTextEffect>, (void (*)(void))lazy protocol witness table accessor for type StretchTextEffect and conformance StretchTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>);
    }
  }
}

uint64_t partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:)@<X0>(unint64_t *a1@<X0>, double *a2@<X8>)
{
  return partial apply for specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, a2);
}

{
  uint64_t v2;

  return specialized closure #2 in Text.Effect.Timing.init<A>(configuration:duration:spring:content:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 48), a2);
}

uint64_t outlined destroy of Text.Effect.DrawableContent<ExplodeTextEffect>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<SquishTextEffect> and conformance Text.Effect.DrawableContent<A>, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SquishTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SquishTextEffect and conformance SquishTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SquishTextEffect>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<StretchTextEffect>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(void))
{
  type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<SmallTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<SmallTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SmallTextEffect and conformance SmallTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SmallTextEffect>>);
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<BloomTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<BloomTextEffect>, (void (*)(void))lazy protocol witness table accessor for type BloomTextEffect and conformance BloomTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<BloomTextEffect>>);
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<SomersaultTextEffect> and conformance Text.Effect.DrawableContent<A>, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>, (void (*)(void))lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<SomersaultTextEffect>>);
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<ShakeVerticalTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeVerticalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeVerticalTextEffect and conformance ShakeVerticalTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ShakeVerticalTextEffect>>);
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<ShakeHorizontalTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ShakeHorizontalTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ShakeHorizontalTextEffect and conformance ShakeHorizontalTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ShakeHorizontalTextEffect>>);
    }
  }
}

void type metadata accessor for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>)
  {
    type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(255, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
    lazy protocol witness table accessor for type Text.Effect.DrawableContent<StretchTextEffect> and conformance Text.Effect.DrawableContent<A>(&lazy protocol witness table cache variable for type Text.Effect.DrawableContent<ExplodeTextEffect> and conformance Text.Effect.DrawableContent<A>, &lazy cache variable for type metadata for Text.Effect.DrawableContent<ExplodeTextEffect>, (void (*)(void))lazy protocol witness table accessor for type ExplodeTextEffect and conformance ExplodeTextEffect);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Text.Effect.DrawableContent<ExplodeTextEffect>>);
    }
  }
}

void type metadata accessor for Text.Effect.DrawableContent<StretchTextEffect>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for Text.Effect.DrawableContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of IndexingIterator<Text.Effect.DrawableContent<StretchTextEffect>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t Animation.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Animation.init<A>(_:)(a1, a2, a3, (void (*)(void))type metadata accessor for InternalAnimationBox, ColorBox.__allocating_init(_:));
}

{
  return Animation.init<A>(_:)(a1, a2, a3, (void (*)(void))type metadata accessor for AnimationBox, ColorBox.__allocating_init(_:));
}

uint64_t Animation.velocity<A>(value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  v9[0] = *(void *)a2;
  v9[1] = v5;
  char v10 = v6;
  char v11 = v7;
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a3 + 128))(a1, v9, a4, a5);
}

uint64_t Animation.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 136))(a1, a2, a3, a5, a6) & 1;
}

uint64_t Animation.function.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 96))();
}

uint64_t Animation.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t (*a5)(uint64_t))
{
  return a5(a1);
}

uint64_t Animation.as<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for AnimationBox();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v9 = *(void *)(a1 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v4 + *(void *)(*(void *)v4 + 176), a1);
    uint64_t v5 = v9;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 - 8);
    uint64_t v6 = 1;
  }
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);

  return v7(a2, v6, 1, a1);
}

uint64_t static Animation.Function.custom<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x270FA5388](a1);
  char v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v9);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, a2);
  *(void *)a4 = partial apply for closure #1 in static Animation.Function.custom<A>(_:);
  *(void *)(a4 + 8) = v12;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 40) = 6;
  return result;
}

uint64_t static Animation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a2) & 1;
}

uint64_t Animation.base.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t sub_24612FE2C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Animation.Function.custom<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = 0x3FF0000000000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, void, _UNKNOWN **))(v2 + 16))(&v5, &v4, a1, MEMORY[0x263F8D538], &protocol witness table for Double);
  return v5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Animation(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))(*a2) & 1;
}

void Animation.Function.bezierForm.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  __asm { FMOV            V1.2D, #1.0 }
  long long v8 = 0uLL;
  char v9 = 0;
  switch(*((unsigned char *)v1 + 40))
  {
    case 1:
      char v9 = 0;
      _Q1 = xmmword_246215E70;
      long long v8 = xmmword_246215E80;
      break;
    case 2:
      char v9 = 0;
      _Q1 = xmmword_246215E50;
      long long v8 = xmmword_246215E60;
      break;
    case 3:
      char v9 = 0;
      _Q1 = xmmword_246215E30;
      long long v8 = xmmword_246215E40;
      break;
    case 4:
      char v9 = 0;
      _Q1 = *(_OWORD *)(v1 + 3);
      long long v8 = *(_OWORD *)(v1 + 1);
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      uint64_t v2 = 0;
      char v9 = 1;
      _Q1 = 0uLL;
      break;
    default:
      break;
  }
  *(void *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = _Q1;
  *(unsigned char *)(a1 + 40) = v9;
}

uint64_t Animation.hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 112))();
}

Swift::Int Animation.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)a1 + 112))(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Animation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Animation()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Animation()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 112))(v3);
  return Hasher._finalize()();
}

uint64_t Animation.description.getter(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 88))(v2);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  return String.init<A>(describing:)();
}

uint64_t Animation.debugDescription.getter(uint64_t a1)
{
  strcpy((char *)v5, "AnyAnimator(");
  BYTE5(v5[1]) = 0;
  HIWORD(v5[1]) = -5120;
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 88))(v4);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v5[0];
}

uint64_t Animation.customMirror.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Mirror.DisplayStyle?(0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, MEMORY[0x263F8E818], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  long long v8 = (char *)v15 - v7;
  uint64_t v17 = a1;
  type metadata accessor for Mirror.DisplayStyle?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), MEMORY[0x263F8E0F8]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2461B9DC0;
  *(void *)(v9 + 32) = 1702060386;
  *(void *)(v9 + 40) = 0xE400000000000000;
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 88))(v15);
  uint64_t v10 = v16;
  unint64_t v11 = __swift_project_boxed_opaque_existential_1(v15, v16);
  *(void *)(v9 + 72) = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 48));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void type metadata accessor for Mirror.DisplayStyle?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Animation()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 88))(v2);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Animation()
{
  uint64_t v1 = *v0;
  strcpy((char *)v6, "AnyAnimator(");
  BYTE5(v6[1]) = 0;
  HIWORD(v6[1]) = -5120;
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 88))(v5);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  v2._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v6[0];
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Animation()
{
  return Animation.customMirror.getter(*v0);
}

void AnimationBoxBase.base.getter()
{
}

void AnimationBoxBase.function.getter()
{
}

void AnimationBoxBase.isEqual(to:)()
{
}

void AnimationBoxBase.hash(into:)()
{
}

void AnimationBoxBase.animate<A>(value:time:context:)()
{
}

void AnimationBoxBase.velocity<A>(value:time:context:)()
{
}

void AnimationBoxBase.shouldMerge<A>(previous:value:time:context:)()
{
}

void AnimationBoxBase.modifier<A>(_:)()
{
}

uint64_t AnimationBoxBase.deinit()
{
  return v0;
}

uint64_t AnimationBoxBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type Animation and conformance Animation()
{
  unint64_t result = lazy protocol witness table cache variable for type Animation and conformance Animation;
  if (!lazy protocol witness table cache variable for type Animation and conformance Animation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Animation and conformance Animation);
  }
  return result;
}

uint64_t destroy for Animation.Function(uint64_t a1)
{
  return outlined consume of Animation.Function(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t initializeWithCopy for Animation.Function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of Animation.Function(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for Animation.Function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of Animation.Function(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of Animation.Function(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for Animation.Function(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of Animation.Function(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Animation.Function(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Animation.Function(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 247;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Animation.Function(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Animation.Function()
{
  return &type metadata for Animation.Function;
}

uint64_t method lookup function for AnimationBoxBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnimationBoxBase);
}

uint64_t AnimationBox.velocity<A>(value:time:context:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v19 = a1;
  uint64_t v7 = *v5;
  uint64_t v8 = *(void *)(*v5 + 160);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  char v16 = *((unsigned char *)v13 + 16);
  char v17 = *((unsigned char *)v13 + 17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v19 - v11, (uint64_t)v5 + *(void *)(v7 + 176), v8, v10);
  v22[0] = v15;
  v22[1] = v14;
  char v23 = v16;
  char v24 = v17;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, double))(*(void *)(v7 + 168) + 24))(v19, v22, v20, v21, v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t AnimationBox.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v13 = *v6;
  uint64_t v14 = *(void *)(*v6 + 160);
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v20 - v17, (uint64_t)v6 + *(void *)(v13 + 176), v14, v16);
  LOBYTE(a5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v13 + 168) + 32))(a1, a2, a3, a4, a5, v14, a6);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return a5 & 1;
}

uint64_t AnimationBox.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  uint64_t v5 = *(void **)v3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v5[20];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v22 = v5[21];
  uint64_t v25 = v9;
  uint64_t v26 = v14;
  uint64_t v27 = v22;
  uint64_t v28 = v15;
  uint64_t v16 = type metadata accessor for CustomAnimationModifiedContent();
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v21 - v18;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v13, &v3[v5[22]], v9, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v24, a2);
  CustomAnimationModifiedContent.init(base:modifier:)((uint64_t)v13, (uint64_t)v8, v9, a2, (uint64_t)v19);
  swift_getWitnessTable();
  type metadata accessor for InternalAnimationBox();
  return ColorBox.__allocating_init(_:)((uint64_t)v19);
}

uint64_t AnimationBox.function.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 160);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v11 - v8, (uint64_t)v2 + *(void *)(v4 + 176), v5, v7);
  static Animation.Function.custom<A>(_:)((uint64_t)v9, v5, *(void *)(v4 + 168), a2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t AnimationBox.base.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  a1[3] = v3;
  a1[4] = *(void *)(v2 + 168);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 176);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v6(boxed_opaque_existential_1, v5, v3);
}

uint64_t AnimationBox.hash(into:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  double v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - v6, (uint64_t)v1 + *(void *)(v2 + 176), v3, v5);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t InternalAnimationBox.function.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 216);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  double v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - v6, (uint64_t)v1 + *(void *)(v2 + 176), v3, v5);
  (*(void (**)(uint64_t))(*(void *)(v2 + 224) + 16))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t CodableAnimation.encode(to:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(*(void *)a2 + 88))(v8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for EncodableAnimation);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v6, (uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    uint64_t v10 = &type metadata for DefaultAnimation;
    uint64_t v11 = &protocol witness table for DefaultAnimation;
    outlined destroy of EncodableAnimation?((uint64_t)v6);
  }
  uint64_t v3 = v10;
  uint64_t v4 = (uint64_t)v11;
  __swift_project_boxed_opaque_existential_1(v9, (uint64_t)v10);
  EncodableAnimation.encodeAnimation(to:)(a1, (uint64_t)v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t specialized CodableAnimation.init(from:)(void *a1)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (v4 >= v5)
  {
    a1[3] = 0;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return v1;
  }
  uint64_t v1 = 0;
  while (2)
  {
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1[4];
      if (v4 < v11) {
        goto LABEL_16;
      }
      if (v11 < v4) {
        goto LABEL_130;
      }
      a1[3] = 0;
    }
    unint64_t v10 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_131;
    }
    if (v10 < 8) {
      goto LABEL_130;
    }
LABEL_16:
    switch(v10 >> 3)
    {
      case 1uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_130;
        }
        uint64_t v12 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        }
        unint64_t v14 = v12[2];
        unint64_t v13 = v12[3];
        if (v14 >= v13 >> 1) {
          uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
        }
        void v12[2] = v14 + 1;
        v12[v14 + 4] = v5;
        a1[5] = v12;
        uint64_t v15 = a1;
        uint64_t v16 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_131;
        }
        if ((v16 & 0x8000000000000000) == 0)
        {
          unint64_t v17 = a1[1] + v16;
          if (v5 < v17) {
            goto LABEL_130;
          }
          a1[2] = v17;
          BezierAnimation.init(from:)((unint64_t)a1, (uint64_t)&v88);
          uint64_t v15 = (void *)a1[5];
          if (!v15[2]) {
            goto LABEL_154;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v18 = v15[2];
            if (!v18) {
              goto LABEL_159;
            }
          }
          else
          {
            uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
            uint64_t v18 = v15[2];
            if (!v18) {
              goto LABEL_159;
            }
          }
          uint64_t v19 = v18 - 1;
          uint64_t v20 = v15[v19 + 4];
          _OWORD v15[2] = v19;
          a1[5] = v15;
          a1[2] = v20;
          long long v84 = v89;
          long long v85 = v88;
          long long v83 = v90;
          uint64_t v21 = v91;
          type metadata accessor for InternalAnimationBox<DefaultAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>, (void (*)(void))lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation);
          uint64_t v9 = swift_allocObject();
          *(_OWORD *)(v9 + 16) = v85;
          *(_OWORD *)(v9 + 32) = v84;
          *(_OWORD *)(v9 + 48) = v83;
          *(void *)(v9 + 64) = v21;
LABEL_7:
          swift_release();
          goto LABEL_8;
        }
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        __break(1u);
        long long v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        uint64_t v80 = v79[2];
        if (v80) {
          goto LABEL_146;
        }
        __break(1u);
        long long v79 = (void *)a1[5];
        if (v79[2])
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v80 = v79[2];
            if (v80) {
              goto LABEL_146;
            }
LABEL_140:
            __break(1u);
            long long v79 = (void *)a1[5];
            if (v79[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v80 = v79[2];
                if (!v80) {
                  goto LABEL_143;
                }
LABEL_146:
                uint64_t v81 = v80 - 1;
                uint64_t v82 = v79[v81 + 4];
                v79[2] = v81;
                swift_release();
                a1[5] = v79;
                a1[2] = v82;
                return v1;
              }
            }
            else
            {
              __break(1u);
            }
            long long v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v79);
            uint64_t v80 = v79[2];
            if (v80) {
              goto LABEL_146;
            }
LABEL_143:
            __break(1u);
            long long v79 = (void *)a1[5];
            if (v79[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v80 = v79[2];
                if (v80) {
                  goto LABEL_146;
                }
LABEL_173:
                __break(1u);
                JUMPOUT(0x246132394);
              }
            }
            else
            {
              __break(1u);
            }
            long long v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v79);
            uint64_t v80 = v79[2];
            if (v80) {
              goto LABEL_146;
            }
            goto LABEL_173;
          }
        }
        else
        {
          __break(1u);
        }
        long long v79 = specialized _ArrayBuffer._consumeAndCreateNew()(v79);
        uint64_t v80 = v79[2];
        if (v80) {
          goto LABEL_146;
        }
        goto LABEL_140;
      case 2uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_130;
        }
        uint64_t v22 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
        }
        void v22[2] = v24 + 1;
        v22[v24 + 4] = v5;
        a1[5] = v22;
        uint64_t v15 = a1;
        uint64_t v25 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_131;
        }
        if (v25 < 0) {
          goto LABEL_148;
        }
        unint64_t v26 = a1[1] + v25;
        if (v5 < v26) {
          goto LABEL_130;
        }
        a1[2] = v26;
        SpringAnimation.init(from:)((unint64_t)a1, (double *)&v88);
        uint64_t v15 = (void *)a1[5];
        if (!v15[2]) {
          goto LABEL_155;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = v15[2];
          if (!v27) {
            goto LABEL_160;
          }
        }
        else
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          uint64_t v27 = v15[2];
          if (!v27) {
            goto LABEL_160;
          }
        }
        uint64_t v28 = v27 - 1;
        uint64_t v29 = v15[v28 + 4];
        _OWORD v15[2] = v28;
        a1[5] = v15;
        a1[2] = v29;
        long long v86 = v88;
        long long v30 = v89;
        type metadata accessor for InternalAnimationBox<DefaultAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<SpringAnimation>, (void (*)(void))lazy protocol witness table accessor for type SpringAnimation and conformance SpringAnimation);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = v86;
        *(_OWORD *)(v9 + 32) = v30;
        goto LABEL_7;
      case 3uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_130;
        }
        char v31 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        }
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        if (v33 >= v32 >> 1) {
          char v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
        }
        void v31[2] = v33 + 1;
        v31[v33 + 4] = v5;
        a1[5] = v31;
        uint64_t v15 = a1;
        uint64_t v34 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_131;
        }
        if (v34 < 0) {
          goto LABEL_149;
        }
        unint64_t v35 = a1[1] + v34;
        if (v5 < v35) {
          goto LABEL_130;
        }
        a1[2] = v35;
        FluidSpringAnimation.init(from:)((unint64_t)a1, (double *)&v88);
        uint64_t v15 = (void *)a1[5];
        if (!v15[2]) {
          goto LABEL_156;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v36 = v15[2];
          if (!v36) {
            goto LABEL_158;
          }
        }
        else
        {
          uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          uint64_t v36 = v15[2];
          if (!v36) {
            goto LABEL_158;
          }
        }
        uint64_t v37 = v36 - 1;
        uint64_t v38 = v15[v37 + 4];
        _OWORD v15[2] = v37;
        a1[5] = v15;
        a1[2] = v38;
        long long v87 = v88;
        uint64_t v39 = v89;
        type metadata accessor for InternalAnimationBox<DefaultAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (void (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation);
        uint64_t v9 = swift_allocObject();
        *(_OWORD *)(v9 + 16) = v87;
        *(void *)(v9 + 32) = v39;
        goto LABEL_7;
      case 4uLL:
        if (!v1) {
          goto LABEL_9;
        }
        unint64_t v40 = v10 & 7;
        if (v40 == 1)
        {
          swift_retain();
          double v42 = (double *)a1[1];
LABEL_108:
          if (v5 < (unint64_t)(v42 + 1)) {
            goto LABEL_135;
          }
          double v69 = *v42;
          a1[1] = v42 + 1;
          goto LABEL_112;
        }
        if (v40 != 5)
        {
          if (v40 != 2) {
            goto LABEL_130;
          }
          swift_retain();
          uint64_t v15 = a1;
          uint64_t v41 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_136;
          }
          if (v41 < 0) {
            goto LABEL_162;
          }
          double v42 = (double *)a1[1];
          if (v5 < (unint64_t)v42 + v41) {
            goto LABEL_135;
          }
          a1[3] = 33;
          a1[4] = (char *)v42 + v41;
          goto LABEL_108;
        }
        double v70 = (float *)a1[1];
        if (v5 < (unint64_t)(v70 + 1)) {
          goto LABEL_130;
        }
        float v71 = *v70;
        a1[1] = v70 + 1;
        double v69 = v71;
        swift_retain();
LABEL_112:
        *(double *)&long long v88 = v69;
        char v72 = *(uint64_t (**)(long long *, ValueMetadata *, unint64_t))(*(void *)v1 + 144);
        unint64_t v73 = lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation();
        char v74 = &type metadata for DelayAnimation;
        goto LABEL_119;
      case 5uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_130;
        }
        double v43 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
        }
        unint64_t v45 = v43[2];
        unint64_t v44 = v43[3];
        if (v45 >= v44 >> 1) {
          double v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v43);
        }
        v43[2] = v45 + 1;
        v43[v45 + 4] = v5;
        a1[5] = v43;
        uint64_t v15 = a1;
        uint64_t v46 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_131;
        }
        if (v46 < 0) {
          goto LABEL_150;
        }
        unint64_t v47 = a1[1] + v46;
        if (v5 < v47) {
          goto LABEL_130;
        }
        a1[2] = v47;
        uint64_t v48 = specialized static Animation.decodeRepeatMessage(from:)(a1);
        double v50 = (void *)a1[5];
        if (!v50[2]) {
          goto LABEL_157;
        }
        uint64_t v51 = v48;
        __int16 v52 = v49;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v53 = v50[2];
          if (!v53) {
            goto LABEL_129;
          }
        }
        else
        {
          double v50 = specialized _ArrayBuffer._consumeAndCreateNew()(v50);
          uint64_t v53 = v50[2];
          if (!v53)
          {
LABEL_129:
            __break(1u);
LABEL_130:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_131:
            swift_release();
            return v1;
          }
        }
        uint64_t v54 = v53 - 1;
        uint64_t v55 = v50[v54 + 4];
        v50[2] = v54;
        a1[5] = v50;
        a1[2] = v55;
        if (v52)
        {
          if (!v1) {
            goto LABEL_9;
          }
          *(void *)&long long v88 = 0;
          BYTE8(v88) = 1;
        }
        else
        {
          if (!v1) {
            goto LABEL_9;
          }
          *(void *)&long long v88 = v51;
          BYTE8(v88) = 0;
        }
        BYTE9(v88) = HIBYTE(v52) & 1;
        uint64_t v6 = *(uint64_t (**)(long long *, ValueMetadata *, unint64_t))(*(void *)v1 + 144);
        unint64_t v7 = lazy protocol witness table accessor for type RepeatAnimation and conformance RepeatAnimation();
        uint64_t v8 = v6(&v88, &type metadata for RepeatAnimation, v7);
LABEL_6:
        uint64_t v9 = v8;
        goto LABEL_7;
      case 6uLL:
        if (!v1) {
          goto LABEL_9;
        }
        unint64_t v56 = v10 & 7;
        if (v56 == 1)
        {
          swift_retain();
          double v58 = (double *)a1[1];
          goto LABEL_114;
        }
        if (v56 == 5)
        {
          long long v76 = (float *)a1[1];
          if (v5 < (unint64_t)(v76 + 1)) {
            goto LABEL_130;
          }
          float v77 = *v76;
          a1[1] = v76 + 1;
          double v75 = v77;
          swift_retain();
          goto LABEL_118;
        }
        if (v56 != 2) {
          goto LABEL_130;
        }
        swift_retain();
        uint64_t v15 = a1;
        uint64_t v57 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_136;
        }
        if (v57 < 0) {
          goto LABEL_163;
        }
        double v58 = (double *)a1[1];
        if (v5 >= (unint64_t)v58 + v57)
        {
          a1[3] = 49;
          a1[4] = (char *)v58 + v57;
LABEL_114:
          if (v5 < (unint64_t)(v58 + 1)) {
            goto LABEL_135;
          }
          double v75 = *v58;
          a1[1] = v58 + 1;
LABEL_118:
          *(double *)&long long v88 = v75;
          char v72 = *(uint64_t (**)(long long *, ValueMetadata *, unint64_t))(*(void *)v1 + 144);
          unint64_t v73 = lazy protocol witness table accessor for type SpeedAnimation and conformance SpeedAnimation();
          char v74 = &type metadata for SpeedAnimation;
LABEL_119:
          uint64_t v9 = v72(&v88, v74, v73);
          swift_release_n();
LABEL_8:
          uint64_t v1 = v9;
LABEL_9:
          unint64_t v4 = a1[1];
          unint64_t v5 = a1[2];
          if (v4 >= v5)
          {
            a1[3] = 0;
            if (v1) {
              return v1;
            }
            goto LABEL_4;
          }
          continue;
        }
LABEL_135:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_136:
        swift_release_n();
        return v1;
      case 7uLL:
        if ((v10 & 7) != 2) {
          goto LABEL_130;
        }
        double v59 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59[2] + 1, 1, v59);
        }
        unint64_t v61 = v59[2];
        unint64_t v60 = v59[3];
        if (v61 >= v60 >> 1) {
          double v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v59);
        }
        v59[2] = v61 + 1;
        v59[v61 + 4] = v5;
        a1[5] = v59;
        uint64_t v15 = a1;
        uint64_t v62 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_131;
        }
        if (v62 < 0) {
          goto LABEL_151;
        }
        unint64_t v63 = a1[1] + v62;
        if (v5 < v63) {
          goto LABEL_130;
        }
        a1[2] = v63;
        if (!v59[2]) {
          goto LABEL_152;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v64 = v59[2];
          if (!v64) {
            goto LABEL_153;
          }
        }
        else
        {
          double v59 = specialized _ArrayBuffer._consumeAndCreateNew()(v59);
          uint64_t v64 = v59[2];
          if (!v64) {
            goto LABEL_153;
          }
        }
        uint64_t v65 = v64 - 1;
        uint64_t v66 = v59[v65 + 4];
        v59[2] = v65;
        a1[5] = v59;
        a1[2] = v66;
        type metadata accessor for InternalAnimationBox<DefaultAnimation>(0, &lazy cache variable for type metadata for InternalAnimationBox<DefaultAnimation>, (void (*)(void))lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation);
        uint64_t v8 = swift_allocObject();
        goto LABEL_6;
      default:
        switch(v10 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_131;
            }
            goto LABEL_9;
          case 1uLL:
            unint64_t v67 = a1[1] + 8;
            goto LABEL_105;
          case 2uLL:
            uint64_t v15 = a1;
            uint64_t v68 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_131;
            }
            if (v68 < 0) {
              goto LABEL_161;
            }
            unint64_t v67 = a1[1] + v68;
LABEL_105:
            if (v5 < v67) {
              goto LABEL_130;
            }
            a1[1] = v67;
            break;
          case 5uLL:
            unint64_t v67 = a1[1] + 4;
            goto LABEL_105;
          default:
            goto LABEL_130;
        }
        goto LABEL_9;
    }
  }
}

void type metadata accessor for InternalAnimationBox<DefaultAnimation>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for InternalAnimationBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of EncodableAnimation?(uint64_t a1)
{
  type metadata accessor for EncodableAnimation?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for EncodableAnimation?()
{
  if (!lazy cache variable for type metadata for EncodableAnimation?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for EncodableAnimation);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EncodableAnimation?);
    }
  }
}

uint64_t ConcatenatedCollectionIndex.init(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t ConcatenatedCollectionIndex._position.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t static ConcatenatedCollectionIndex.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v35 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unint64_t v10 = (char *)&v35 - v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  uint64_t v43 = v6;
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v35 = AssociatedConformanceWitness;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v46 = v12;
  uint64_t v13 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15.n128_f64[0] = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  unint64_t v17 = (char *)&v35 - v16;
  uint64_t v19 = (char *)&v35 + *(int *)(v18 + 56) - v16;
  uint64_t v20 = *(void *)(v13 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16);
  v21((char *)&v35 - v16, v41, v13, v15);
  ((void (*)(char *, uint64_t, uint64_t))v21)(v19, v42, v13);
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  int v23 = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    if (v23 == 1)
    {
      uint64_t v24 = v40;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
      unint64_t v26 = v37;
      v25(v37, v17, AssociatedTypeWitness);
      uint64_t v27 = v38;
      v25(v38, v19, AssociatedTypeWitness);
      char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v24 + 8);
      v29(v27, AssociatedTypeWitness);
      v29(v26, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v13);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v17, AssociatedTypeWitness);
      char v28 = 0;
    }
  }
  else if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v19, v13);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v6);
    char v28 = 1;
  }
  else
  {
    uint64_t v30 = v39;
    char v31 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v31(v10, v17, v6);
    unint64_t v32 = v36;
    v31(v36, v19, v6);
    char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v32, v6);
    v33(v10, v6);
  }
  return v28 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ConcatenatedCollectionIndex<A, B>(uint64_t a1, uint64_t a2)
{
  return static ConcatenatedCollectionIndex.< infix(_:_:)(a1, a2);
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance ConcatenatedCollectionIndex<A, B>()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance ConcatenatedCollectionIndex<A, B>()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ConcatenatedCollectionIndex<A, B>()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t ConcatenatedCollection._base1.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ConcatenatedCollection._base2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t ConcatenatedCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v31 = (char *)&v28 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v28 = (char *)&v28 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = v3;
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  v35[0] = v6;
  v35[1] = AssociatedTypeWitness;
  v35[2] = AssociatedConformanceWitness;
  v35[3] = v9;
  uint64_t v10 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v28 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v28 - v12, v33, v10, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = v31;
    uint64_t v15 = v32;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v31, v13, AssociatedTypeWitness);
    unint64_t v17 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v19 = v18;
    uint64_t v20 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v34, v19, v20);
    v17(v35, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v16, AssociatedTypeWitness);
  }
  else
  {
    int v23 = v28;
    uint64_t v22 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v28, v13, v6);
    uint64_t v24 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v26 = v25;
    uint64_t v27 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v34, v26, v27);
    v24(v35, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v23, v6);
  }
}

uint64_t ConcatenatedCollection.index(after:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v39 = a1;
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[2];
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v41 = (char *)&v35 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v40 = (char *)&v35 - v19;
  uint64_t v44 = v12;
  uint64_t v45 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v42 = v4;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  uint64_t v46 = v13;
  uint64_t v47 = AssociatedTypeWitness;
  uint64_t v48 = AssociatedConformanceWitness;
  uint64_t v49 = v21;
  uint64_t v22 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v35 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v35 - v24, v39, v22, v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = v37;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v10, v25, AssociatedTypeWitness);
    char v28 = v36;
    dispatch thunk of Collection.index(after:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, AssociatedTypeWitness);
    uint64_t v29 = v43;
    uint64_t v30 = (uint64_t)v28;
    return ConcatenatedCollectionIndex.init(second:)(v30, v29);
  }
  uint64_t v39 = v5;
  uint64_t v31 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v40, v25, v13);
  dispatch thunk of Collection.index(after:)();
  dispatch thunk of Collection.endIndex.getter();
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v33(v15, v13);
  if (v32)
  {
    dispatch thunk of Collection.startIndex.getter();
    v33(v41, v13);
    v33(v40, v13);
    uint64_t v29 = v43;
    uint64_t v30 = (uint64_t)v10;
    return ConcatenatedCollectionIndex.init(second:)(v30, v29);
  }
  v33(v40, v13);
  return ConcatenatedCollectionIndex.init(first:)((uint64_t)v41, v43);
}

void (*protocol witness for Collection.subscript.read in conformance ConcatenatedCollection<A, B>(uint64_t **a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = (uint64_t)ConcatenatedCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void (*ConcatenatedCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  ConcatenatedCollection.subscript.getter(a2, a3, (uint64_t)v8);
  return ArraySlice.subscript.readspecialized ;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ConcatenatedCollection<A, B>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ConcatenatedCollectionIndex();
  uint64_t v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ConcatenatedCollection<A, B>()
{
  return MEMORY[0x270F9E150]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ConcatenatedCollection<A, B>()
{
  return MEMORY[0x270F9E148]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance ConcatenatedCollection<A, B>()
{
  return MEMORY[0x270F9E180]();
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ConcatenatedCollection<A, B>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 32);
  v10[0] = *(_OWORD *)(a2 + 16);
  v10[1] = v4;
  uint64_t v5 = type metadata accessor for ConcatenatedCollectionIndex();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v10 - v7;
  ConcatenatedCollection.index(after:)(a1, (void *)a2, (uint64_t)v10 - v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v8, v5);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ConcatenatedCollection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 16);
  v14[1] = v5;
  uint64_t v6 = type metadata accessor for ConcatenatedCollectionIndex();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v14 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v11 + 16))(a2, v2, a1, v8);
  ConcatenatedCollection.startIndex.getter((uint64_t)v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2 + *(int *)(v12 + 36), v10, v6);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ConcatenatedCollection<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ConcatenatedCollection<A, B>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

uint64_t ConcatenatedCollection<>.index(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v49 = a5;
  uint64_t v46 = a1;
  uint64_t v40 = *(void *)(a4 + 8);
  uint64_t v7 = *(void *)(v40 + 8);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (char *)&v39 - v12;
  uint64_t v44 = *(void *)(a3 + 8);
  uint64_t v13 = *(void *)(v44 + 8);
  uint64_t v41 = a2;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v47 = v13;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = v8;
  uint64_t v51 = v7;
  uint64_t v21 = swift_getAssociatedConformanceWitness();
  uint64_t v52 = v14;
  uint64_t v53 = AssociatedTypeWitness;
  uint64_t v54 = AssociatedConformanceWitness;
  uint64_t v55 = v21;
  uint64_t v22 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v39 - v24;
  (*(void (**)(char *, char *, uint64_t, double))(v26 + 16))((char *)&v39 - v24, v46, v22, v23);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v35 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v19, v25, v14);
    dispatch thunk of BidirectionalCollection.index(before:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v14);
    uint64_t v33 = v49;
    uint64_t v34 = (uint64_t)v16;
    return ConcatenatedCollectionIndex.init(first:)(v34, v33);
  }
  uint64_t v46 = v16;
  uint64_t v27 = v42;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v48, v25, AssociatedTypeWitness);
  char v28 = v45;
  dispatch thunk of Collection.startIndex.getter();
  char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v27 + 8);
  v30(v28, AssociatedTypeWitness);
  uint64_t v31 = v49;
  if (v29)
  {
    char v32 = v46;
    dispatch thunk of Collection.endIndex.getter();
    dispatch thunk of BidirectionalCollection.index(before:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v14);
    v30(v48, AssociatedTypeWitness);
    uint64_t v33 = v49;
    uint64_t v34 = (uint64_t)v19;
    return ConcatenatedCollectionIndex.init(first:)(v34, v33);
  }
  uint64_t v37 = (uint64_t)v45;
  uint64_t v38 = v48;
  dispatch thunk of BidirectionalCollection.index(before:)();
  v30(v38, AssociatedTypeWitness);
  return ConcatenatedCollectionIndex.init(second:)(v37, v31);
}

char *ConcatenatedCollection<>.index(_:offsetBy:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = result;
  if (a2)
  {
    if (a2 < 1)
    {
      BOOL v9 = __OFSUB__(0, a2);
      uint64_t v10 = -a2;
      if (v9)
      {
        __break(1u);
      }
      else
      {
        return (char *)ConcatenatedCollection<>._offsetBackward(_:by:)(result, v10, a3, (uint64_t)a4, a5, a6);
      }
    }
    else
    {
      return (char *)ConcatenatedCollection<>._offsetForward(_:by:)((uint64_t)result, a2, a3, a4, a5, a6);
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for ConcatenatedCollectionIndex();
    return (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a6, v6, v8);
  }
  return result;
}

uint64_t ConcatenatedCollection<>._offsetForward(_:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v50 = a1;
  uint64_t v48 = a6;
  uint64_t v44 = a5;
  uint64_t v8 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v46 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v45 = a4;
  uint64_t v15 = *(void *)(*((void *)a4 + 1) + 8);
  uint64_t v52 = a3;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v54 = v15;
  uint64_t v49 = v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v53 = v8;
  uint64_t v51 = v9;
  uint64_t v24 = swift_getAssociatedConformanceWitness();
  uint64_t v56 = v17;
  uint64_t v57 = AssociatedTypeWitness;
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v59 = v24;
  uint64_t v25 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  double v26 = MEMORY[0x270FA5388](v25);
  char v28 = (char *)&v42 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v42 - v27, v50, v25, v26);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = v43;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v14, v28, AssociatedTypeWitness);
    uint64_t v31 = v46;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, AssociatedTypeWitness);
    uint64_t v32 = v48;
    uint64_t v33 = (uint64_t)v31;
  }
  else
  {
    uint64_t v50 = AssociatedTypeWitness;
    uint64_t v42 = v14;
    uint64_t v34 = v47;
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v22, v28, v17);
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v35 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    uint64_t v37 = v34 + 8;
    uint64_t v36 = v38;
    v38(v19, v17);
    if (v35 > v55)
    {
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      v36(v22, v17);
      return ConcatenatedCollectionIndex.init(first:)((uint64_t)v19, v48);
    }
    uint64_t v45 = v22;
    uint64_t v47 = v37;
    uint64_t v40 = v46;
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (__OFSUB__(v55, v35))
    {
      __break(1u);
      return result;
    }
    uint64_t v41 = (uint64_t)v42;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v50);
    v36(v45, v17);
    uint64_t v32 = v48;
    uint64_t v33 = v41;
  }
  return ConcatenatedCollectionIndex.init(second:)(v33, v32);
}

uint64_t ConcatenatedCollection<>._offsetBackward(_:by:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v55 = a1;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v8 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v46 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v14 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v51 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v44 - v20;
  uint64_t v52 = v14;
  uint64_t v54 = v15;
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v56 = v8;
  uint64_t v24 = swift_getAssociatedConformanceWitness();
  uint64_t v58 = v16;
  uint64_t v59 = AssociatedTypeWitness;
  uint64_t v60 = AssociatedConformanceWitness;
  uint64_t v61 = v24;
  uint64_t v25 = type metadata accessor for _ConcatenatedCollectionIndexRepresentation();
  double v26 = MEMORY[0x270FA5388](v25);
  char v28 = (char *)&v44 - v27;
  (*(void (**)(char *, char *, uint64_t, double))(v29 + 16))((char *)&v44 - v27, v55, v25, v26);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v21, v28, v16);
    if (!__OFSUB__(0, v57))
    {
      uint64_t v41 = v17;
      uint64_t v42 = v51;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v16);
      uint64_t v39 = v50;
      uint64_t v40 = (uint64_t)v42;
      return ConcatenatedCollectionIndex.init(first:)(v40, v39);
    }
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v44 = v17;
  uint64_t v45 = v21;
  uint64_t v30 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v13, v28, v22);
  uint64_t v31 = (uint64_t)v46;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v55 = v13;
  uint64_t v32 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  uint64_t v34 = v30 + 8;
  uint64_t v33 = v35;
  uint64_t v47 = v22;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v35)(v31, v22);
  if (v32 < v57)
  {
    uint64_t v53 = v34;
    uint64_t result = dispatch thunk of Collection.endIndex.getter();
    if (!__OFSUB__(v57, v32))
    {
      if (!__OFSUB__(0, v57 - v32))
      {
        uint64_t v37 = (uint64_t)v45;
        uint64_t v38 = v51;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v16);
        v33(v55, v47);
        uint64_t v39 = v50;
        uint64_t v40 = v37;
        return ConcatenatedCollectionIndex.init(first:)(v40, v39);
      }
      goto LABEL_14;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFSUB__(0, v57))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v43 = v55;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  v33(v43, v47);
  return ConcatenatedCollectionIndex.init(second:)(v31, v50);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> ConcatenatedCollection<A, B>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ConcatenatedCollection<>.index(before:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> ConcatenatedCollection<A, B>(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 16);
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v7 = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v8 = *(void *)(*(void *)(v6 + 8) + 8);
  long long v14 = *(_OWORD *)(a2 + 16);
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v9 = type metadata accessor for ConcatenatedCollectionIndex();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v14 - v11;
  ConcatenatedCollection<>.index(before:)(a1, a2, v5, v6, (uint64_t)&v14 - v11);
  (*(void (**)(char *, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(a1, v12, v9);
}

char *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> ConcatenatedCollection<A, B>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ConcatenatedCollection<>.index(_:offsetBy:)(a1, a2, a3, *(char **)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> ConcatenatedCollection<A, B>()
{
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <> ConcatenatedCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x24C5225F0](a1, a2, a3, WitnessTable);
}

uint64_t Collection.partitionPoint(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v44 = (char *)&v36 - v12;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v38 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v36 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  uint64_t v51 = a5;
  uint64_t v48 = a4;
  uint64_t v49 = v5;
  uint64_t v47 = a3;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v18 >= 1)
  {
    uint64_t v20 = (void (**)(char *))(v11 + 16);
    uint64_t v21 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v41 = v20;
    uint64_t v42 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
    uint64_t v37 = (uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32);
    uint64_t v22 = AssociatedTypeWitness;
    while (1)
    {
      dispatch thunk of Collection.index(_:offsetBy:)();
      uint64_t v29 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v30 = v44;
      (*v41)(v44);
      v29(v50, 0);
      char v31 = v45(v30);
      if (v7) {
        break;
      }
      char v32 = v31;
      (*v21)(v30, v22);
      if (v32)
      {
        uint64_t result = (*v42)(v17, v43);
        uint64_t v18 = (unint64_t)v18 >> 1;
      }
      else
      {
        uint64_t v40 = 0;
        double v23 = v21;
        uint64_t v24 = v38;
        dispatch thunk of Collection.index(after:)();
        uint64_t v25 = v43;
        double v26 = *v42;
        (*v42)(v17, v43);
        uint64_t v27 = v51;
        v26(v51, v25);
        char v28 = v24;
        uint64_t v21 = v23;
        uint64_t v22 = AssociatedTypeWitness;
        uint64_t v7 = v40;
        uint64_t result = (*v37)((uint64_t)v27, v28, v25);
        v18 += ~((unint64_t)v18 >> 1);
      }
      if (v18 <= 0) {
        return result;
      }
    }
    (*v21)(v30, v22);
    uint64_t v33 = *v42;
    uint64_t v34 = v17;
    uint64_t v35 = v43;
    (*v42)(v34, v43);
    return v33(v51, v35);
  }
  return result;
}

uint64_t base witness table accessor for Collection in <> ConcatenatedCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> ConcatenatedCollection<A, B>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> ConcatenatedCollection<A, B>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

uint64_t base witness table accessor for BidirectionalCollection in <> ConcatenatedCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <> ConcatenatedCollection<A, B>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <> ConcatenatedCollection<A, B>()
{
  return associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <A> Binding<A>();
}

void *initializeBufferWithCopyOfBuffer for _ConcatenatedCollectionIndexRepresentation(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for _ConcatenatedCollectionIndexRepresentation(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t initializeWithCopy for _ConcatenatedCollectionIndexRepresentation(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithCopy for _ConcatenatedCollectionIndexRepresentation(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t initializeWithTake for _ConcatenatedCollectionIndexRepresentation(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for _ConcatenatedCollectionIndexRepresentation(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConcatenatedCollectionIndexRepresentation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for _ConcatenatedCollectionIndexRepresentation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x246135E24);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for _ConcatenatedCollectionIndexRepresentation(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void *initializeBufferWithCopyOfBuffer for ConcatenatedCollectionIndex(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v10 <= 7 && v9 + 1 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for ConcatenatedCollectionIndex(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v4) {
    unint64_t v6 = v4;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_12;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_12:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1) {
    uint64_t v12 = *(void *)(v5 - 8);
  }
  else {
    uint64_t v12 = v3;
  }
  if (v7 == 1) {
    uint64_t v13 = v5;
  }
  else {
    uint64_t v13 = AssociatedTypeWitness;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);

  return v14(a1, v13);
}

uint64_t initializeWithCopy for ConcatenatedCollectionIndex(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *assignWithCopy for ConcatenatedCollectionIndex(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t initializeWithTake for ConcatenatedCollectionIndex(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = v7;
  }
  else
  {
    uint64_t v8 = v5;
    uint64_t v16 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v9) = v15;
  return a1;
}

unsigned __int8 *assignWithTake for ConcatenatedCollectionIndex(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v7 - 8);
    }
    else {
      uint64_t v16 = v5;
    }
    if (v11 == 1) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v5;
    }
    if (v18 == 1) {
      uint64_t v25 = v8;
    }
    else {
      uint64_t v25 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcatenatedCollectionIndex(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void storeEnumTagSinglePayload for ConcatenatedCollectionIndex(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x246136FA0);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTagSinglePayload for ConcatenatedCollection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for ConcatenatedCollection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24613748CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          BOOL v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t specialized EnvironmentValues.subscript.setter(_OWORD *a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *v4;
  int v9 = a4 & 0xFFFFFF;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v4, a1, a2, a3, v9);
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.tintColor.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.tint.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t EnvironmentValues.tint.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void TintPlacement.hash(into:)()
{
}

uint64_t static TintPlacement.== infix(_:_:)()
{
  return 1;
}

Swift::Int TintPlacement.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t View.tint<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v21 = a6;
  uint64_t v20 = a5;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v19 - v12;
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unsigned int v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  uint64_t v17 = v20;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v13, v10);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.tint<A>(_:for:), (uint64_t)v16, a2);
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.placementTint.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_bridgeObjectRetain();
    swift_release_n();
    return v5;
  }
}

uint64_t EnvironmentValues.placementTint.setter(uint64_t a1)
{
  specialized EnvironmentValues.placementTint.setter(a1);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.tint<A>(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v24 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a2, v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v11, a5);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, a5);
  uint64_t v21 = AnyShapeStyle.init<A>(_:)((uint64_t)v15, a5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, v23, isUniquelyReferenced_nonNull_native);
  *a1 = v25;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, a5);
}

uint64_t View.tint(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

void (*EnvironmentValues.tint.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.tint.modify;
}

void EnvironmentValues.tint.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = *v4;
  if (a2)
  {
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v6 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(v4, v3);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v2[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v7);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  swift_release();

  free(v2);
}

void (*EnvironmentValues.placementTint.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
    swift_bridgeObjectRetain();
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.placementTint.modify;
}

void EnvironmentValues.placementTint.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[4];
  uint64_t v5 = **a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v7 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = *(void *)v3[4];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t (*EnvironmentValues.tintColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = EnvironmentValues.tintColor.getter();
  return EnvironmentValues.tintColor.modify;
}

uint64_t EnvironmentValues.tintColor.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = (uint64_t *)a1[3];
  uint64_t v5 = *a1;
  uint64_t v6 = *v4;
  swift_retain_n();
  swift_retain();
  if (a2)
  {
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v7 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5);
    swift_release();
    swift_release();
    if (v4[1])
    {
      uint64_t v8 = *(void *)a1[3];
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v8);
      swift_release();
      swift_release();
    }
    swift_release();
  }

  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PlacementTintKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static PlacementTintKey.defaultValue;

  return swift_bridgeObjectRetain();
}

unsigned char *static TintShapeStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t EnvironmentValues.mapKitTint.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t EnvironmentValues.mapKitTint.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void (*EnvironmentValues.mapKitTint.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)(v3 + 1));
  }
  swift_release_n();
  v3[5] = 0;
  *uint64_t v3 = v5;
  return EnvironmentValues.tint.modify;
}

uint64_t (*EnvironmentValues.mapKitTintColor.modify(uint64_t *a1))()
{
  a1[3] = v1;
  *a1 = EnvironmentValues.tintColor.getter();
  return EnvironmentValues.mapKitTintColor.modify;
}

uint64_t EnvironmentValues._tintColor.getter()
{
  return EnvironmentValues.tintColor.getter();
}

uint64_t EnvironmentValues.mapKitTintColor.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t (*EnvironmentValues._tintColor.modify(uint64_t *a1))()
{
  a1[3] = v1;
  *a1 = EnvironmentValues.tintColor.getter();
  return EnvironmentValues.mapKitTintColor.modify;
}

uint64_t specialized EnvironmentValues.subscript.setter(void *a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  outlined retain of ResolvedTextSuffix(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of ResolvedTextSuffix);
  specialized closure #1 in PropertyList.subscript.setter(v1, (uint64_t)a1);
  swift_release();
  outlined retain of ResolvedTextSuffix(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of ResolvedTextSuffix);
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_246138A34@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.tint : EnvironmentValues, serialized(a1, a2);
}

uint64_t sub_246138A54@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.placementTint : EnvironmentValues, serialized(a1, a2);
}

uint64_t sub_246138A70()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.placementTint.setter(v0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_246138AB4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.tint<A>(_:for:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return closure #1 in View.tint<A>(_:for:)(a1, v7, v5, v3, v4);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v9 = a2 >> 40;
  uint64_t v10 = *v4;
  swift_retain_n();
  outlined copy of ContentTransition.Storage(a1, a2, v9);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v4, a1, a2 & 0xFF01FFFFFFFFFFFFLL, a3, a4);
  swift_release();
  outlined consume of ContentTransition.Storage(a1, a2, v9);
  swift_release();
  if (v4[1])
  {
    uint64_t v11 = *v4;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v10, v11);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.placementTint.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_246138FE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24613900C()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));

  return swift_release();
}

uint64_t sub_246139078@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.tint : EnvironmentValues, serialized(a1, a2);
}

uint64_t sub_246139098@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.placementTint : EnvironmentValues, serialized(a1, a2);
}

uint64_t sub_2461390B4()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues._set<A>(_:for:)(v0);

  return swift_bridgeObjectRelease();
}

uint64_t sub_246139100@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.mapKitTint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24613913C()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));

  return swift_release();
}

uint64_t sub_2461391B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_246139240()
{
  return swift_getWitnessTable();
}

uint64_t sub_246139308()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for Any?(255, a3);
    unint64_t v4 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for TintPlacement.Guts(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246139480);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TintPlacement.Guts()
{
  return &type metadata for TintPlacement.Guts;
}

unint64_t lazy protocol witness table accessor for type TintPlacement.Guts and conformance TintPlacement.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type TintPlacement.Guts and conformance TintPlacement.Guts;
  if (!lazy protocol witness table cache variable for type TintPlacement.Guts and conformance TintPlacement.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TintPlacement.Guts and conformance TintPlacement.Guts);
  }
  return result;
}

ValueMetadata *type metadata accessor for TintKey()
{
  return &type metadata for TintKey;
}

ValueMetadata *type metadata accessor for PlacementTintKey()
{
  return &type metadata for PlacementTintKey;
}

__n128 AccessibilityActivationPointStorage.activate.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AccessibilityActivationPointStorage.activate.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*AccessibilityActivationPointStorage.activate.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityActivationPointStorage.drag.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityActivationPointStorage.drag.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AccessibilityActivationPointStorage.drag.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityActivationPointStorage.drop.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityActivationPointStorage.drop.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*AccessibilityActivationPointStorage.drop.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void AccessibilityActivationPointStorage.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 32) = v1;
}

uint64_t *AccessibilityActivationPointStorage.init(kind:point:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  unint64_t v6 = result[2];
  uint64_t v7 = result[3];
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  char v10 = *((unsigned char *)a2 + 16);
  if (v6 >> 62)
  {
    if (v6 >> 62 != 1)
    {
      uint64_t v14 = MEMORY[0x263F8EE78];
      uint64_t v15 = MEMORY[0x263F8EE78];
      goto LABEL_21;
    }
    char v18 = v6 & 1;
    outlined copy of Text.Storage(*result, v5, v6 & 1);
    uint64_t v11 = one-time initialization token for isDebuggerAttached;
    swift_bridgeObjectRetain();
    if (v11 != -1) {
      swift_once();
    }
    if (isDebuggerAttached)
    {
      uint64_t v19 = 0;
      if (Text.isStyled(options:)((SwiftUI::Text::ResolveOptions)&v19))
      {
        static os_log_type_t.fault.getter();
        if (one-time initialization token for runtimeIssuesLog != -1) {
          swift_once();
        }
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_2461B9DC0;
        *(void *)(v12 + 56) = MEMORY[0x263F8D310];
        *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v12 + 32) = 0xD000000000000011;
        *(void *)(v12 + 40) = 0x8000000246226E20;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<AccessibilityActivationPoint>();
    uint64_t v13 = swift_allocObject();
    uint64_t v14 = MEMORY[0x263F8EE78];
    uint64_t v15 = v13;
  }
  else
  {
    char v18 = v6 & 1;
    outlined copy of Text.Storage(*result, v5, v6 & 1);
    uint64_t v16 = one-time initialization token for isDebuggerAttached;
    swift_bridgeObjectRetain();
    if (v16 != -1) {
      swift_once();
    }
    if (isDebuggerAttached)
    {
      uint64_t v19 = 0;
      if (Text.isStyled(options:)((SwiftUI::Text::ResolveOptions)&v19))
      {
        static os_log_type_t.fault.getter();
        if (one-time initialization token for runtimeIssuesLog != -1) {
          swift_once();
        }
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
        *(void *)(v17 + 56) = MEMORY[0x263F8D310];
        *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v17 + 32) = 0xD000000000000011;
        *(void *)(v17 + 40) = 0x8000000246226E20;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<AccessibilityActivationPoint>();
    uint64_t v13 = swift_allocObject();
    uint64_t v15 = MEMORY[0x263F8EE78];
    uint64_t v14 = v13;
  }
  *(_OWORD *)(v13 + 16) = xmmword_2461B9DC0;
  *(void *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v8;
  *(unsigned char *)(v13 + 48) = v10;
  *(void *)(v13 + 56) = v4;
  *(void *)(v13 + 64) = v5;
  *(unsigned char *)(v13 + 72) = v18;
  *(void *)(v13 + 80) = v7;
  uint64_t result = (uint64_t *)outlined consume of Text.Suffix.Storage(v4, v5, v6);
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  char v10 = -1;
LABEL_21:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v14;
  *(void *)(a3 + 32) = v15;
  return result;
}

void static AccessibilityActivationKind.RawValue.drag.getter(uint64_t *a1@<X8>)
{
}

void static AccessibilityActivationKind.RawValue.drop.getter(uint64_t *a1@<X8>)
{
}

void static AccessibilityActivationKind.RawValue.drag.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = AXSwiftUIInteractionLocationDescriptorDefaultName();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a2 = v5;
  a2[1] = v7;
  uint64_t v8 = MEMORY[0x263F8EE78];
  a2[2] = a1;
  a2[3] = v8;
}

BOOL AccessibilityActivationPointStorage.merge(with:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(unsigned __int8 *)(v1 + 16) == 255)
  {
    char v5 = *(unsigned char *)(a1 + 16);
    *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
    *(unsigned char *)(v1 + 16) = v5;
    BOOL v4 = 1;
  }
  else if (*(void *)(v3 + 16))
  {
    BOOL v4 = 1;
  }
  else
  {
    BOOL v4 = *(void *)(*(void *)(a1 + 32) + 16) == 0;
  }
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v7);
  return v4;
}

__n128 AccessibilityActivationPoint.location.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AccessibilityActivationPoint.location.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  v1[1].n128_u8[0] = v2;
  return result;
}

uint64_t (*AccessibilityActivationPoint.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityActivationPoint.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of Text.Storage(v1, *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityActivationPoint.description.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  outlined consume of Text.Storage(*(void *)(v4 + 24), *(void *)(v4 + 32), *(unsigned char *)(v4 + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(unsigned char *)(v4 + 40) = a3 & 1;
  *(void *)(v4 + 48) = a4;
  return result;
}

uint64_t (*AccessibilityActivationPoint.description.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static AccessibilityActivationKind.defaultDescriptor.getter()
{
  id v0 = AXSwiftUIInteractionLocationDescriptorDefaultName();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t AccessibilityActivationKind.rawValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text.Suffix.Storage(v2, v3, v4);
}

__n128 AccessibilityActivationKind.rawValue.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of Text.Suffix.Storage(*v1, v1[1], v1[2]);
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*AccessibilityActivationKind.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityActivationKind.init(rawValue:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

double static AccessibilityActivationKind.default.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 16) = xmmword_24619B530;
  return result;
}

uint64_t AccessibilityActivationPoint.Location.encode(to:)(uint64_t result)
{
  uint64_t v2 = result;
  double v3 = *(double *)v1;
  double v4 = *(double *)(v1 + 8);
  if (!*(unsigned char *)(v1 + 16))
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void **)(v2 + 24);
    double result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
LABEL_10:
      unint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      if (v10 >= v9 >> 1)
      {
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v6);
        uint64_t v6 = (void *)result;
      }
      long long v6[2] = v10 + 1;
      v6[v10 + 4] = v5;
      *(void *)(v2 + 24) = v6;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        return result;
      }
      *(void *)(v2 + 8) = v5 + 1;
      CGPoint.encode(to:)((double *)v2, v3, v4);
      return ProtobufEncoder.endLengthDelimited()();
    }
LABEL_17:
    double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    uint64_t v6 = (void *)result;
    goto LABEL_10;
  }
  if (*(unsigned char *)(v1 + 16) != 1) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void **)(v2 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  long long v6[2] = v8 + 1;
  v6[v8 + 4] = v5;
  *(void *)(v2 + 24) = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  *(void *)(v2 + 8) = v5 + 1;
  UnitPoint.encode(to:)((double *)v2, v3, v4);
  return ProtobufEncoder.endLengthDelimited()();
}

unint64_t AccessibilityActivationPoint.Location.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  double v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  LOBYTE(v7) = 2;
  double v8 = 0.0;
  uint64_t v9 = 0;
  while (1)
  {
    if (v5 >= v6) {
      goto LABEL_51;
    }
    double result = v3[3];
    if (result)
    {
      unint64_t v11 = v3[4];
      if (v5 < v11) {
        goto LABEL_12;
      }
      if (v11 < v5) {
        goto LABEL_52;
      }
      v3[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_52;
    }
LABEL_12:
    if (result >> 3 == 2) {
      break;
    }
    if (result >> 3 == 1)
    {
      if ((result & 7) != 2) {
        goto LABEL_52;
      }
      uint64_t v12 = (void *)v3[5];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      void v12[2] = v14 + 1;
      v12[v14 + 4] = v6;
      v3[5] = v12;
      double result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        __break(1u);
        double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        char v32 = (void *)result;
        uint64_t v33 = *(void *)(result + 16);
        if (v33) {
          goto LABEL_57;
        }
        __break(1u);
        char v32 = (void *)v3[5];
        if (v32[2])
        {
          double result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v33 = v32[2];
            if (v33)
            {
LABEL_57:
              uint64_t v34 = v33 - 1;
              uint64_t v35 = v32[v34 + 4];
              void v32[2] = v34;
              v3[5] = v32;
              v3[2] = v35;
              return result;
            }
LABEL_67:
            __break(1u);
            JUMPOUT(0x24613A328);
          }
        }
        else
        {
          __break(1u);
        }
        double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
        char v32 = (void *)result;
        uint64_t v33 = *(void *)(result + 16);
        if (v33) {
          goto LABEL_57;
        }
        goto LABEL_67;
      }
      unint64_t v15 = v3[1] + result;
      if (v6 < v15) {
        goto LABEL_52;
      }
      v3[2] = v15;
      double v16 = specialized CGPoint.init(from:)(v3);
      char v18 = (void *)v3[5];
      if (!v18[2]) {
        goto LABEL_60;
      }
      double v8 = v16;
      uint64_t v9 = v17;
      double result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v19 = v18[2];
        if (!v19) {
          goto LABEL_62;
        }
      }
      else
      {
        double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        char v18 = (void *)result;
        uint64_t v19 = *(void *)(result + 16);
        if (!v19) {
          goto LABEL_62;
        }
      }
      LOBYTE(v7) = 0;
      uint64_t v20 = v19 - 1;
      uint64_t v21 = v18[v20 + 4];
      void v18[2] = v20;
      v3[5] = v18;
      v3[2] = v21;
    }
    else
    {
      switch(result & 7)
      {
        case 0uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          break;
        case 1uLL:
          unint64_t v10 = v3[1] + 8;
          if (v6 >= v10) {
            goto LABEL_3;
          }
          goto LABEL_52;
        case 2uLL:
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_63;
          }
          unint64_t v10 = v3[1] + result;
          if (v6 < v10) {
            goto LABEL_52;
          }
LABEL_3:
          v3[1] = v10;
          break;
        case 5uLL:
          unint64_t v10 = v3[1] + 4;
          if (v6 < v10) {
            goto LABEL_52;
          }
          goto LABEL_3;
        default:
          goto LABEL_52;
      }
    }
LABEL_4:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
  }
  if ((result & 7) != 2) {
    goto LABEL_52;
  }
  unint64_t v22 = (void *)v3[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
  }
  unint64_t v24 = v22[2];
  unint64_t v23 = v22[3];
  unint64_t v7 = v24 + 1;
  if (v24 >= v23 >> 1) {
    unint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
  }
  void v22[2] = v7;
  v22[v24 + 4] = v6;
  v3[5] = v22;
  double result = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return result;
  }
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_59;
  }
  unint64_t v25 = v3[1] + result;
  if (v6 < v25)
  {
LABEL_52:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  v3[2] = v25;
  double v26 = specialized UnitPoint.init(from:)(v3);
  char v28 = (void *)v3[5];
  if (!v28[2]) {
    goto LABEL_61;
  }
  double v8 = v26;
  uint64_t v9 = v27;
  double result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v29 = v28[2];
    if (!v29) {
      goto LABEL_50;
    }
    goto LABEL_37;
  }
  double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v28);
  char v28 = (void *)result;
  uint64_t v29 = *(void *)(result + 16);
  if (v29)
  {
LABEL_37:
    uint64_t v30 = v29 - 1;
    uint64_t v31 = v28[v30 + 4];
    v28[2] = v30;
    v3[5] = v28;
    v3[2] = v31;
    LOBYTE(v7) = 1;
    goto LABEL_4;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  v3[3] = 0;
  *(double *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityActivationPoint.Location(uint64_t a1)
{
  return AccessibilityActivationPoint.Location.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityActivationPoint.Location@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityActivationPoint.Location.init(from:)(a1, a2);
}

BOOL specialized static AccessibilityActivationPoint.Location.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a2;
  double v3 = *(double *)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a2 + 16)) {
      return 0;
    }
    return *(double *)(a1 + 8) == v3 && *(double *)a1 == v2;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    if (v4 != 1) {
      return 0;
    }
    return *(double *)(a1 + 8) == v3 && *(double *)a1 == v2;
  }
  return v4 == 2 && (*(void *)&v3 | *(void *)&v2) == 0;
}

uint64_t specialized static AccessibilityActivationPointStorage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  if (v4 != 255)
  {
    if (v7 == 255) {
      return 0;
    }
    double v11 = *(double *)a1;
    double v12 = *(double *)(a1 + 8);
    double v14 = *(double *)a2;
    double v13 = *(double *)(a2 + 8);
    if (v4)
    {
      if (v4 != 1)
      {
        if (v7 != 2 || *(void *)&v13 | *(void *)&v14) {
          return 0;
        }
        goto LABEL_3;
      }
      if (v7 != 1) {
        return 0;
      }
    }
    else if (v7)
    {
      return 0;
    }
    if (v11 != v14 || v12 != v13) {
      return 0;
    }
    goto LABEL_3;
  }
  if (v7 != 255) {
    return 0;
  }
LABEL_3:
  if ((specialized static Array<A>.== infix(_:_:)(v5, v8) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v6, v9);
}

BOOL specialized static AccessibilityActivationPoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)a2;
  double v7 = *(double *)(a2 + 8);
  int v8 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 48);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a2 + 16)) {
      return 0;
    }
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    if (v8 != 1) {
      return 0;
    }
LABEL_6:
    if (*(double *)a1 != v6 || *(double *)(a1 + 8) != v7) {
      return 0;
    }
LABEL_13:
    if (v4)
    {
      if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
        return 0;
      }
      double v14 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
      outlined copy of Text.Storage(v2, v3, 1);
      outlined copy of Text.Storage(v10, v9, 1);
      LOBYTE(v14) = v14(v10);
      outlined consume of Text.Storage(v10, v9, 1);
      outlined consume of Text.Storage(v2, v3, 1);
      if ((v14 & 1) == 0) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 40) & 1) != 0 {
           || (v2 != v10 || v3 != v9) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    }
    {
      return 0;
    }
    return (specialized static Array<A>.== infix(_:_:)(v5, v11) & 1) != 0;
  }
  BOOL result = 0;
  if (v8 == 2 && !(*(void *)&v7 | *(void *)&v6)) {
    goto LABEL_13;
  }
  return result;
}

BOOL specialized static AccessibilityActivationKind.RawValue.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  if (v5 >> 62)
  {
    if (v5 >> 62 != 1)
    {
      if (v9 >> 62 == 2 && v9 == 0x8000000000000000 && (v6 | v7 | v8) == 0)
      {
        outlined consume of Text.Suffix.Storage(*a1, v3, v5);
        outlined consume of Text.Suffix.Storage(0, 0, 0x8000000000000000);
        return 1;
      }
      goto LABEL_20;
    }
    if (v9 >> 62 != 1)
    {
LABEL_20:
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
LABEL_21:
      outlined consume of Text.Suffix.Storage(v2, v3, v5);
      outlined consume of Text.Suffix.Storage(v7, v6, v9);
      return 0;
    }
    if ((v5 & 1) == 0)
    {
      if ((v9 & 1) == 0)
      {
        if (v2 != v7) {
          goto LABEL_28;
        }
        goto LABEL_25;
      }
      goto LABEL_20;
    }
LABEL_10:
    if (v9)
    {
      uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
      outlined copy of Text.Suffix.Storage(*a2, a2[1], v9);
      outlined copy of Text.Suffix.Storage(v2, v3, v5);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v7, v6, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v2, v3, 1);
      if (v10(v7)) {
        goto LABEL_29;
      }
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (v9 >> 62) {
    goto LABEL_20;
  }
  if (v5) {
    goto LABEL_10;
  }
  if (v9) {
    goto LABEL_20;
  }
  if (v2 != v7) {
    goto LABEL_28;
  }
LABEL_25:
  if (v3 == v6)
  {
    outlined copy of Text.Suffix.Storage(*a1, v3, v9);
    outlined copy of Text.Suffix.Storage(v2, v3, v5);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v2, v3, 0);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v2, v3, 0);
    goto LABEL_29;
  }
LABEL_28:
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text.Suffix.Storage(v7, v6, v9);
  outlined copy of Text.Suffix.Storage(v2, v3, v5);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v7, v6, 0);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v2, v3, 0);
  if ((v14 & 1) == 0)
  {
LABEL_31:
    outlined consume of Text.Storage(v7, v6, v9 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v2, v3, v5 & 1);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_29:
  char v15 = specialized static Array<A>.== infix(_:_:)(v4, v8);
  outlined consume of Text.Storage(v7, v6, v9 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v2, v3, v5 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Suffix.Storage(v2, v3, v5);
  outlined consume of Text.Suffix.Storage(v7, v6, v9);
  return (v15 & 1) != 0;
}

uint64_t assignWithCopy for AccessibilityActivationPointStorage(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityActivationPointStorage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityActivationPointStorage()
{
  return &type metadata for AccessibilityActivationPointStorage;
}

uint64_t destroy for AccessibilityActivationPoint(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityActivationPoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of Text.Storage(v4, v5, v6);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityActivationPoint(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 4);
  char v7 = *((unsigned char *)a2 + 40);
  outlined copy of Text.Storage(v5, v6, v7);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityActivationPoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityActivationPoint()
{
  return &type metadata for AccessibilityActivationPoint;
}

ValueMetadata *type metadata accessor for AccessibilityActivationPoint.Location()
{
  return &type metadata for AccessibilityActivationPoint.Location;
}

ValueMetadata *type metadata accessor for AccessibilityActivationKind()
{
  return &type metadata for AccessibilityActivationKind;
}

ValueMetadata *type metadata accessor for AccessibilityActivationKind.RawValue()
{
  return &type metadata for AccessibilityActivationKind.RawValue;
}

uint64_t static ReuseTrace.traceReuseInternalFailure()()
{
  return static ReuseTrace.traceReuseInternalFailure()();
}

{
  uint64_t result;

  BOOL result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static ReuseTrace.traceReuseViewInputsDifferentFailure()()
{
  return static ReuseTrace.traceReuseInternalFailure()();
}

uint64_t static ReuseTrace.traceReuseUnaryElementExpectedFailure(_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static ReuseTrace.traceReuseIncompatibleListsFailure(_:_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static ReuseTrace.traceReuseBodyMismatchedFailure()()
{
  return static ReuseTrace.traceReuseInternalFailure()();
}

uint64_t static ReuseTrace.traceReuseInvalidSubgraphFailure(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t static ReuseTrace.register(graph:)(void *a1)
{
  type metadata accessor for ReuseTrace.Recorder();
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)(v2 + 16) = a1;
  swift_beginAccess();
  static ReuseTrace.recorder = (_UNKNOWN *)v2;
  id v3 = a1;
  return swift_release();
}

uint64_t type metadata accessor for ReuseTrace.Recorder()
{
  return self;
}

BOOL static ReuseTrace.isEnabled.getter()
{
  return static ReuseTrace.recorder != 0;
}

uint64_t static ReuseTrace.recorder.getter()
{
  return swift_retain();
}

uint64_t static ReuseTrace.recorder.setter(void *a1)
{
  static ReuseTrace.recorder = a1;
  return swift_release();
}

uint64_t (*static ReuseTrace.recorder.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static ReuseTrace.traceReuseFailure(_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static ReuseTrace.traceReuseSkippedNotIdle(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t static ReuseTrace.traceReuseItemUnplaced(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t static ReuseTrace.traceCacheItemRecycled(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t static ReuseTrace.traceReuseCacheItemFailure(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t static ReuseTrace.traceMismatchedReuseIDFailure(_:_:)()
{
  return static ReuseTrace.traceReuseCacheItemAdded(_:_:)();
}

uint64_t static ReuseTrace.traceReuseTypeComparisonFailure(_:_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static ReuseTrace.traceNeverMadeReusableFailure(_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t ReuseTrace.Recorder.deinit()
{
  return v0;
}

uint64_t ReuseTrace.Recorder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ReuseTraceInternal.CacheItemAllData.subgraph.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReuseTraceInternal.TypeComparisonFailure.candidateType.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReuseTraceInternal.IncompatibleListsFailure.candidateList.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ReuseTraceInternal.BodyFailure.candidateBody.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for ReuseTrace()
{
  return &type metadata for ReuseTrace;
}

uint64_t method lookup function for ReuseTrace.Recorder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ReuseTrace.Recorder);
}

ValueMetadata *type metadata accessor for ReuseTraceInternal()
{
  return &type metadata for ReuseTraceInternal;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.CacheItemSubgraphData()
{
  return &type metadata for ReuseTraceInternal.CacheItemSubgraphData;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.CacheItemAllData()
{
  return &type metadata for ReuseTraceInternal.CacheItemAllData;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.IdentifierData()
{
  return &type metadata for ReuseTraceInternal.IdentifierData;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.TypeComparisonFailure()
{
  return &type metadata for ReuseTraceInternal.TypeComparisonFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.UnaryElementFailure()
{
  return &type metadata for ReuseTraceInternal.UnaryElementFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.PreventingTypeFailure()
{
  return &type metadata for ReuseTraceInternal.PreventingTypeFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.InvalidSubgraphFailure()
{
  return &type metadata for ReuseTraceInternal.InvalidSubgraphFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.IncompatibleListsFailure()
{
  return &type metadata for ReuseTraceInternal.IncompatibleListsFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.BodyFailure()
{
  return &type metadata for ReuseTraceInternal.BodyFailure;
}

ValueMetadata *type metadata accessor for ReuseTraceInternal.NeverMadeReusableFailure()
{
  return &type metadata for ReuseTraceInternal.NeverMadeReusableFailure;
}

uint64_t FormatStyle.timeZone(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16);
  v11((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2, v9);
  type metadata accessor for TimeZoneDependentFormatStyle();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v16, (uint64_t)v19);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    char v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    *((void *)&v17 + 1) = v12;
    uint64_t v18 = v13;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    v14(a1, v12, v13);
    swift_dynamicCast();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    outlined destroy of TimeZoneDependentFormatStyle?((uint64_t)&v16);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a3, v4, a2);
  }
}

unint64_t type metadata accessor for TimeZoneDependentFormatStyle()
{
  unint64_t result = lazy cache variable for type metadata for TimeZoneDependentFormatStyle;
  if (!lazy cache variable for type metadata for TimeZoneDependentFormatStyle)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TimeZoneDependentFormatStyle);
  }
  return result;
}

uint64_t outlined destroy of TimeZoneDependentFormatStyle?(uint64_t a1)
{
  type metadata accessor for TimeZoneDependentFormatStyle?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for TimeZoneDependentFormatStyle?()
{
  if (!lazy cache variable for type metadata for TimeZoneDependentFormatStyle?)
  {
    type metadata accessor for TimeZoneDependentFormatStyle();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeZoneDependentFormatStyle?);
    }
  }
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F07230], a3);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.VerbatimFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F07388], a3);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.ISO8601FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle(a1, a2, MEMORY[0x263F072D8], a3);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))(a4, v4, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle.Attributed(a1, a2, MEMORY[0x263F07010], a3);
}

uint64_t WhitespaceRemovingFormatStyle<>.withTimeZone(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)(v13 - 8) + 16))(a4, v4, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v8, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a4, v12, v8);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance <> WhitespaceRemovingFormatStyle<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return WhitespaceRemovingFormatStyle<>.withTimeZone(_:)(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle.Attributed(a1, a2, MEMORY[0x263F07340], a3);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance Date.FormatStyle.Attributed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))(a4, v4, a2, v11);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  return a3(v13, KeyPath);
}

uint64_t protocol witness for TimeZoneDependentFormatStyle.withTimeZone(_:) in conformance SystemFormatStyle.DateReference@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with copy of SystemFormatStyle.DateReference(v3, a3);
  uint64_t v7 = a3 + *(int *)(a2 + 44);
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24);

  return v9(v7, a1, v8);
}

uint64_t _s10Foundation4DateV11FormatStyleVAeadAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of SystemFormatStyle.DateReference(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.DateReference();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Transaction.tracksVelocity.getter()
{
  uint64_t v0 = swift_retain();
  char v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

uint64_t key path getter for Transaction.tracksVelocity : Transaction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  char v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t result = swift_release();
  *a1 = v3 & 1;
  return result;
}

uint64_t key path setter for Transaction.tracksVelocity : Transaction(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t Transaction.tracksVelocity.setter(char a1)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  return swift_release();
}

void (*Transaction.tracksVelocity.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.tracksVelocity.modify;
}

void Transaction.tracksVelocity.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();

  free(v1);
}

uint64_t one-time initialization function for velocityTracking()
{
  type metadata accessor for AnimationBox<VelocityTrackingAnimation>();
  uint64_t result = swift_allocObject();
  static Animation.velocityTracking = result;
  return result;
}

void type metadata accessor for AnimationBox<VelocityTrackingAnimation>()
{
  if (!lazy cache variable for type metadata for AnimationBox<VelocityTrackingAnimation>)
  {
    lazy protocol witness table accessor for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation();
    unint64_t v0 = type metadata accessor for AnimationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimationBox<VelocityTrackingAnimation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation;
  if (!lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation;
  if (!lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation;
  if (!lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation);
  }
  return result;
}

ValueMetadata *type metadata accessor for TracksVelocityKey()
{
  return &type metadata for TracksVelocityKey;
}

void *type metadata accessor for VelocityTrackingAnimation()
{
  return &unk_26FA6D690;
}

uint64_t VelocityTrackingAnimation.animate<A>(value:time:context:)@<X0>(void (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v43 = a5;
  uint64_t v44 = a1;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v38 = (char *)&v38 - v17;
  uint64_t v18 = type metadata accessor for VelocityState();
  uint64_t v42 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = *(void *)(a2 + 8);
  char v22 = *(unsigned char *)(a2 + 16);
  char v23 = *(unsigned char *)(a2 + 17);
  double v45 = *(double *)a2;
  uint64_t v46 = v21;
  char v47 = v22;
  char v48 = v23;
  type metadata accessor for AnimationContext();
  AnimationContext.velocityState.getter();
  uint64_t v24 = type metadata accessor for VelocitySampler();
  if (VelocitySampler.isEmpty.getter(v24))
  {
    double v45 = a6;
    VelocitySampler.addSample(_:time:)(v44, &v45, v24);
    specialized AnimationContext.velocityState.setter((uint64_t)v20);
  }
  unint64_t v25 = &v20[*(int *)(type metadata accessor for VelocitySampler() + 44)];
  if (v25[8]) {
    double v26 = 2.0;
  }
  else {
    double v26 = *(double *)v25 + 2.0;
  }
  uint64_t v27 = *(void *)(a2 + 8);
  char v28 = *(unsigned char *)(a2 + 16);
  char v29 = *(unsigned char *)(a2 + 17);
  double v45 = *(double *)a2;
  uint64_t v46 = v27;
  char v47 = v28;
  char v48 = v29;
  uint64_t v30 = v44;
  VelocityTrackingAnimation.velocity<A>(value:time:context:)((uint64_t *)&v45, a3, a4, (uint64_t)v12, a6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
    uint64_t v31 = v43;
    if (v26 <= a6)
    {
      uint64_t v32 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v31, v32, 1, a3);
    }
LABEL_11:
    (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v13 + 16))(v31, v30, a3);
    uint64_t v32 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v31, v32, 1, a3);
  }
  uint64_t v33 = v38;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v38, v12, a3);
  uint64_t v34 = v39;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v13 + 8);
  v36(v34, a3);
  v36(v33, a3);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v18);
  uint64_t v32 = 1;
  if (v35)
  {
    uint64_t v31 = v43;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v31, v32, 1, a3);
  }
  uint64_t v31 = v43;
  if (v26 > a6) {
    goto LABEL_11;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v31, v32, 1, a3);
}

uint64_t AnimationContext.velocityState.getter()
{
  uint64_t v0 = type metadata accessor for VelocityState();
  uint64_t v1 = type metadata accessor for AnimationState();
  uint64_t WitnessTable = swift_getWitnessTable();
  return AnimationState.subscript.getter(v0, v1, v0, WitnessTable);
}

uint64_t VelocityTrackingAnimation.velocity<A>(value:time:context:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v30 = a4;
  uint64_t v9 = type metadata accessor for _Velocity();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v28 = a3;
  uint64_t v29 = (uint64_t)&v28 - v10;
  uint64_t v11 = type metadata accessor for VelocityState();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  char v17 = *((unsigned char *)a1 + 16);
  char v18 = *((unsigned char *)a1 + 17);
  uint64_t v31 = *a1;
  uint64_t v32 = v15;
  char v33 = v17;
  char v34 = v18;
  type metadata accessor for AnimationContext();
  AnimationContext.velocityState.getter();
  uint64_t v19 = &v14[*(int *)(type metadata accessor for VelocitySampler() + 44)];
  if (v19[8]) {
    double v20 = 0.0;
  }
  else {
    double v20 = *(double *)v19;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  double v21 = pow(0.998, (a5 - v20) * 1000.0);
  uint64_t v31 = v16;
  uint64_t v32 = v15;
  char v33 = v17;
  char v34 = v18;
  AnimationContext.velocityState.getter();
  uint64_t v22 = v28;
  uint64_t v23 = type metadata accessor for VelocitySampler();
  uint64_t v24 = v29;
  VelocitySampler.velocity.getter(v23, v29);
  (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v14, v23);
  uint64_t v25 = v30;
  VectorArithmetic.scaled(by:)(a2, v22, v30, v21);
  uint64_t v26 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, a2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v25, 0, 1, a2);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance VelocityTrackingAnimation(double a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  return specialized VelocityTrackingAnimation.shouldMerge<A>(previous:value:time:context:)(a3, a4, a1);
}

unint64_t instantiation function for generic protocol witness table for VelocityTrackingAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type VelocityTrackingAnimation and conformance VelocityTrackingAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static AnimationStateKey.defaultValue.getter in conformance VelocityState<A>(uint64_t a1)
{
  return static VelocityState.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t specialized AnimationContext.velocityState.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VelocityState();
  uint64_t v3 = type metadata accessor for AnimationState();
  swift_getWitnessTable();

  return specialized AnimationState.subscript.setter(a1, v2, v3, v2);
}

uint64_t specialized VelocityTrackingAnimation.shouldMerge<A>(previous:value:time:context:)(void (*a1)(char *, uint64_t), uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for VelocityState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v15 - v8;
  double v18 = a3;
  uint64_t v10 = *(void *)(a2 + 8);
  char v11 = *(unsigned char *)(a2 + 16);
  char v12 = *(unsigned char *)(a2 + 17);
  v15[0] = *(void *)a2;
  v15[1] = v10;
  char v16 = v11;
  char v17 = v12;
  type metadata accessor for AnimationContext();
  AnimationContext.velocityState.getter();
  uint64_t v13 = type metadata accessor for VelocitySampler();
  VelocitySampler.addSample(_:time:)(a1, &v18, v13);
  specialized AnimationContext.velocityState.setter((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return 1;
}

uint64_t type metadata accessor for VelocityState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for VelocityState()
{
  uint64_t result = type metadata accessor for VelocitySampler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VelocityState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = 8;
  if (!v5) {
    uint64_t v7 = 9;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v7;
    uint64_t v9 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
    unint64_t v10 = ((v8 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v11 = a2 - v6;
    uint64_t v12 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = v11 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v10);
        if (!v16) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v16) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24613D1A0);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v10);
        if (!v16) {
          break;
        }
LABEL_22:
        int v17 = v16 - 1;
        if (v12)
        {
          int v17 = 0;
          LODWORD(v12) = *a1;
        }
        return v6 + (v12 | v17) + 1;
      default:
        break;
    }
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for VelocityState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  unint64_t v11 = (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v12 = v11 + 8;
  size_t v13 = v11 + 9;
  if (v8) {
    size_t v13 = v12;
  }
  int v9 = *(_DWORD *)(v7 + 80);
  size_t v14 = ((v13
        + ((v13
          + (v9 & 0xF8 | 7)
          + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 < a3)
  {
    unsigned int v15 = a3 - v10;
    if (((v13
         + ((v13 + (v9 & 0xF8 | 7) + ((v13 + (v9 & 0xF8 | 7)) & ~(v9 & 0xF8 | 7))) & ~(v9 & 0xF8 | 7))
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v16 = v15 + 1;
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v6 = v17;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (v14) {
      int v18 = 1;
    }
    else {
      int v18 = a2 - v10;
    }
    if (v14)
    {
      int v19 = ~v10 + a2;
      bzero(a1, v14);
      *(_DWORD *)a1 = v19;
    }
    switch(v6)
    {
      case 1:
        a1[v14] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v18;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v14] = v18;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x24613D3D0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v8 >= 2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              double v21 = *(void (**)(void))(v7 + 56);
              v21();
            }
          }
          else if (v12)
          {
            int v20 = a2 - v8;
            bzero(a1, v12);
            *(_DWORD *)a1 = v20;
          }
        }
      }
      return;
  }
}

uint64_t key path getter for AttributeScopes.accessibility : AttributeScopes@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.accessibility.getter();
  uint64_t result = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  *a1 = result;
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>, MEMORY[0x263F06670]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>, MEMORY[0x263F06670]);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.FoundationAttributes.LanguageIdentifierAttribute()
{
}

void key path getter for AttributeScopes.FoundationAttributes.languageIdentifier : AttributeScopes.FoundationAttributes()
{
}

uint64_t specialized Collection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  type metadata accessor for (lower: Date, upper: Date)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), MEMORY[0x263F067E8]);
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for AttributedString.Index();
  uint64_t v40 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  size_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v39 = v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v42 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v33 - v17;
  uint64_t v19 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v20 = v2;
  uint64_t v37 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  uint64_t v38 = v19;
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
  uint64_t v21 = a1;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v23 = &v10[*(int *)(v5 + 48)];
    uint64_t v24 = v40;
    uint64_t v36 = v18;
    char v33 = v13;
    uint64_t v34 = v5;
    uint64_t v25 = v5;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
    v26(v10, v21, v11);
    uint64_t v35 = v20;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v27(v23, v33, v11);
    uint64_t v28 = &v7[*(int *)(v25 + 48)];
    v26(v7, (uint64_t)v10, v11);
    v26(v28, (uint64_t)v23, v11);
    uint64_t v29 = (uint64_t)v42;
    v27(v42, v7, v11);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v24 + 8);
    v30(v28, v11);
    uint64_t v31 = &v7[*(int *)(v34 + 48)];
    v27(v7, v10, v11);
    v27(v31, v23, v11);
    v27((char *)(v29 + *(int *)(v39 + 36)), v31, v11);
    v30(v7, v11);
    uint64_t v32 = (uint64_t)v36;
    outlined init with take of Range<AttributedString.Index>(v29, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    dispatch thunk of Collection.subscript.getter();
    return _sSny10Foundation4DateVGWOhTm_2(v32, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static SystemFormatStyle.lessThanOneMinuteString(_:locale:width:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v52 = a2;
  v44[1] = a1;
  uint64_t v57 = a4;
  uint64_t v5 = type metadata accessor for Locale.Language();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v54 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringResource.BundleDescription();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v53 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Locale();
  uint64_t v45 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  char v47 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v46 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AttributedString.InterpolationOptions();
  v44[0] = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v16 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v49 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)v44 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)v44 - v24, a3, v18, v23);
  static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth, MEMORY[0x263F07EF0]);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v19 + 8);
  v27(v21, v18);
  if (v26)
  {
    v27(v25, v18);
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v28._countAndFlagsBits = 60;
    v28._object = (void *)0xE100000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v58 = MEMORY[0x263F8EE78];
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x263F06730]);
    type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], MEMORY[0x263F06730], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
    (*(void (**)(char *, uint64_t))(v44[0] + 8))(v14, v12);
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
    String.LocalizationValue.init(stringInterpolation:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v47, v52, v48);
    if (one-time initialization token for systemFormatStyle == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27(v21, v18);
  v27(v25, v18);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._countAndFlagsBits = 60;
  v31._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = (void (**)(char *, uint64_t))(v44[0] + 8);
  char v33 = (void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  if (v30)
  {
    uint64_t v58 = MEMORY[0x263F8EE78];
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x263F06730]);
    type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], MEMORY[0x263F06730], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
    (*v32)(v14, v12);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v34);
    String.LocalizationValue.init(stringInterpolation:)();
    (*v33)(v47, v52, v48);
    if (one-time initialization token for systemFormatStyle == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v58 = MEMORY[0x263F8EE78];
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.InterpolationOptions and conformance AttributedString.InterpolationOptions, MEMORY[0x263F06730]);
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], MEMORY[0x263F06730], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)();
  (*v32)(v14, v12);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v35);
  String.LocalizationValue.init(stringInterpolation:)();
  (*v33)(v47, v52, v48);
  if (one-time initialization token for systemFormatStyle != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  id v36 = objc_msgSend((id)static NSBundle.systemFormatStyle, sel_bundleURL);
  uint64_t v37 = v53;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, void, uint64_t))(v50 + 104))(v37, *MEMORY[0x263F06D20], v51);
  LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)();
  swift_getKeyPath();
  type metadata accessor for AttributeScopes.AccessibilityAttributes();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributeScopes.AccessibilityAttributes and conformance AttributeScopes.AccessibilityAttributes, MEMORY[0x263EFAB78]);
  AttributedString.init<A>(localized:including:)();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  uint64_t v39 = v54;
  Locale.language.getter();
  uint64_t v40 = Locale.Language.maximalIdentifier.getter();
  uint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v56);
  uint64_t v58 = v40;
  uint64_t v59 = v42;
  return AttributedString.subscript.setter();
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
}

uint64_t specialized AttributeContainer.addFontModifier<A>(_:)(char a1)
{
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.StylisticAlternativeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.StylisticAlternativeModifier and conformance Font.StylisticAlternativeModifier, (uint64_t)&type metadata for Font.StylisticAlternativeModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyDynamicFontModifier);
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v2 = v6;
  if (!v6) {
    uint64_t v2 = MEMORY[0x263F8EE78];
  }
  uint64_t v7 = v2;
  uint64_t v3 = swift_retain();
  MEMORY[0x24C522D60](v3);
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  AttributeContainer.subscript.setter();
  return swift_release();
}

uint64_t specialized AttributeContainer.addFontModifier<A>(_:)()
{
  _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedDigitModifier>, (uint64_t)&type metadata for Font.MonospacedDigitModifier, (uint64_t)&protocol witness table for Font.MonospacedDigitModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
  swift_allocObject();
  swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontModifiersAttribute and conformance AttributeScopes.SwiftUIAttributes.FontModifiersAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v0 = v4;
  if (!v4) {
    uint64_t v0 = MEMORY[0x263F8EE78];
  }
  uint64_t v5 = v0;
  uint64_t v1 = swift_retain();
  MEMORY[0x24C522D60](v1);
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  swift_getKeyPath();
  AttributeContainer.subscript.setter();
  return swift_release();
}

uint64_t SystemFormatStyle.Timer.init(countingDownIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return SystemFormatStyle.Timer.init(countingDownIn:showsHours:maxFieldCount:maxPrecision:)(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t SystemFormatStyle.Timer.init(countingUpIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return SystemFormatStyle.Timer.init(countingDownIn:showsHours:maxFieldCount:maxPrecision:)(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t SystemFormatStyle.Timer.init(countingDownIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, unsigned char *a7@<X8>)
{
  type metadata accessor for Range<Date>();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSny10Foundation4DateVGWOcTm_0(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  SystemFormatStyle.Timer.init(countingMode:interval:showsHours:maxFieldCount:maxPrecision:)(a6, (uint64_t)v16, a2, a3, a4, a5, a7);
  return _sSny10Foundation4DateVGWOhTm_2(a1, (uint64_t (*)(void))type metadata accessor for Range<Date>);
}

uint64_t SystemFormatStyle.Timer.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _sSny10Foundation4DateVGWOcTm_0(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SystemFormatStyle.Timer() + 48);
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);

  return v7(v5, a1, v6);
}

uint64_t SystemFormatStyle.Timer.interfaceIdiom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  _sSny10Foundation4DateVGWOcTm_0(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
  char v5 = (*(uint64_t (**)(void))(v4 + 8))();
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  *(unsigned char *)(a2 + *(int *)(result + 52)) = (v5 & 1) == 0;
  return result;
}

uint64_t static FormatStyle<>.timer(countingDownIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return static FormatStyle<>.timer(countingDownIn:showsHours:maxFieldCount:maxPrecision:)(a1, a2, a3, a4, a5, 1, a6);
}

uint64_t static FormatStyle<>.timer(countingUpIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  return static FormatStyle<>.timer(countingDownIn:showsHours:maxFieldCount:maxPrecision:)(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t static FormatStyle<>.timer(countingDownIn:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, unsigned char *a7@<X8>)
{
  type metadata accessor for Range<Date>();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v21 - v18;
  _sSny10Foundation4DateVGWOcTm_0(a1, (uint64_t)&v21 - v18, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  SystemFormatStyle.Timer.init(countingMode:interval:showsHours:maxFieldCount:maxPrecision:)(a6, (uint64_t)v16, a2, a3, a4, a5, a7);
  return _sSny10Foundation4DateVGWOhTm_2((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Range<Date>);
}

uint64_t SystemFormatStyle.Timer.CountingMode.encode(to:)(void *a1, unsigned __int8 a2)
{
  int v22 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.Timer.CountingMode.TimerCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys, (uint64_t)&unk_26FA58628, MEMORY[0x263F8E0C0]);
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - v5;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys, (uint64_t)&unk_26FA58748, v3);
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v17 - v8;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.Timer.CountingMode.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys, (uint64_t)&unk_26FA586B8, v3);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v17 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v22 == 2)
  {
    char v23 = 0;
    lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  }
  else
  {
    char v24 = 1;
    lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.Timer.CountingMode.CodingKeys()
{
  if (*v0) {
    return 0x72656D6974;
  }
  else {
    return 0x63746177706F7473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.Timer.CountingMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemFormatStyle.Timer.CountingMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.Timer.CountingMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.Timer.CountingMode.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys()
{
  return 0x6F6473746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6F6473746E756F63 && a2 == 0xEA00000000006E77)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.Timer.CountingMode@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized SystemFormatStyle.Timer.CountingMode.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.Timer.CountingMode(void *a1)
{
  return SystemFormatStyle.Timer.CountingMode.encode(to:)(a1, *v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemFormatStyle.Timer.CountingMode()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SystemFormatStyle.Timer.CountingMode()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt8 v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.Timer.CountingMode()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t property wrapper backing initializer of SystemFormatStyle.Timer.textAlignment@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void CodableAttributeEffect.init(_:)(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t SystemFormatStyle.Timer.init(countingMode:interval:showsHours:maxFieldCount:maxPrecision:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v14 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  *(void *)&a7[v14[11]] = 0;
  uint64_t v15 = static Locale.autoupdatingCurrent.getter();
  a7[v14[13]] = 1;
  a7[v14[14]] = 0;
  MEMORY[0x24C520B20](v15);
  a7[v14[16]] = 3;
  *(void *)&a7[v14[17]] = 0;
  *(void *)&a7[v14[18]] = 0;
  *(void *)&a7[v14[19]] = 0;
  uint64_t v16 = 195;
  uint64_t v17 = 0x28093E61EE400000;
  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    uint64_t v17 = a5;
    uint64_t v16 = a6;
  }
  *a7 = a1;
  uint64_t v18 = &a7[v14[5]];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v18, a2, v19);
  type metadata accessor for Range<Date>();
  Date.timeIntervalSince(_:)();
  uint64_t v20 = static Duration.seconds(_:)();
  uint64_t v22 = v21;
  uint64_t result = _sSny10Foundation4DateVGWOhTm_2(a2, (uint64_t (*)(void))type metadata accessor for Range<Date>);
  char v24 = (uint64_t *)&a7[v14[6]];
  uint64_t *v24 = v20;
  v24[1] = v22;
  a7[v14[7]] = a3;
  *(void *)&a7[v14[8]] = a4;
  uint64_t v25 = (uint64_t *)&a7[v14[9]];
  *uint64_t v25 = v17;
  v25[1] = v16;
  char v26 = (uint64_t *)&a7[v14[10]];
  *char v26 = v17;
  v26[1] = v16;
  return result;
}

uint64_t _sSny10Foundation4DateVGWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for SystemFormatStyle.Timer()
{
  uint64_t result = type metadata singleton initialization cache for SystemFormatStyle.Timer;
  if (!type metadata singleton initialization cache for SystemFormatStyle.Timer) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t SystemFormatStyle.Timer.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x676E69746E756F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7461447472617473;
      break;
    case 2:
      unint64_t result = 0x6C61767265746E69;
      break;
    case 3:
      unint64_t result = 0x756F4873776F6873;
      break;
    case 4:
      unint64_t result = 0x646C65694678616DLL;
      break;
    case 5:
      unint64_t result = 0x696365725078616DLL;
      break;
    case 6:
      unint64_t result = 0x6F69736963657270;
      break;
    case 7:
      unint64_t result = 0x69726156657A6973;
      break;
    case 8:
      unint64_t result = 0x656C61636F6CLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0x506F4E6563726F66;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0x67696C4174786574;
      break;
    case 13:
      unint64_t result = 0xD000000000000010;
      break;
    case 14:
      unint64_t result = 0x64657473756A6461;
      break;
    case 15:
      unint64_t result = 0x7263737265707573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SystemFormatStyle.Timer.CodingKeys()
{
  return SystemFormatStyle.Timer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SystemFormatStyle.Timer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SystemFormatStyle.Timer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SystemFormatStyle.Timer.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SystemFormatStyle.Timer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SystemFormatStyle.Timer.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SystemFormatStyle.Timer.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v91 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v86 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v90 = (char *)&v86 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v86 - v9;
  uint64_t v11 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v11);
  uint64_t v88 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v89 = (uint64_t)&v86 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v86 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v86 - v19;
  long long v87 = (void (**)(char *, char *, uint64_t))&v2[*(int *)(v21 + 40)];
  static Duration.seconds(_:)();
  char v22 = static Duration.< infix(_:_:)();
  long long v92 = v2;
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v2, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v22) {
    char v23 = static Duration.< infix(_:_:)();
  }
  else {
    char v23 = 0;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v24(v10, v93, v3);
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v92, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v23)
  {
    uint64_t v25 = (int *)v11;
    lazy protocol witness table accessor for type Date and conformance Date();
    char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v27 = v90;
    v24(v90, (uint64_t)v10, v3);
    uint64_t v28 = v89;
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v17, v89, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v26)
    {
      _sSny10Foundation4DateVGWOhTm_2(v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      Swift::String v29 = *(void (**)(char *, uint64_t))(v4 + 8);
      v29(v27, v3);
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      v29(v10, v3);
      char v30 = (int *)v11;
LABEL_21:
      uint64_t v55 = v92;
      uint64_t v56 = v88;
      _sSny10Foundation4DateVGWOcTm_0((uint64_t)v92, v88, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      uint64_t v57 = static Duration.seconds(_:)();
      uint64_t v59 = v58;
      uint64_t v60 = (uint64_t *)&v55[v30[9]];
      uint64_t v61 = *v60;
      uint64_t v62 = v60[1];
      char v63 = static Duration.< infix(_:_:)();
      if (v63) {
        uint64_t v64 = v57;
      }
      else {
        uint64_t v64 = v61;
      }
      if (v63) {
        uint64_t v65 = v59;
      }
      else {
        uint64_t v65 = v62;
      }
      uint64_t v66 = (uint64_t *)(v56 + v30[10]);
      *uint64_t v66 = v64;
      v66[1] = v65;
      if (*v55)
      {
        double v69 = (uint64_t *)&v55[v30[6]];
        uint64_t v70 = *v69;
        uint64_t v71 = v69[1];
        Date.timeIntervalSince(_:)();
        uint64_t v72 = static Duration.seconds(_:)();
        uint64_t v67 = MEMORY[0x24C524FC0](v70, v71, v72, v73);
      }
      else
      {
        Date.timeIntervalSince(_:)();
        uint64_t v67 = static Duration.seconds(_:)();
      }
      uint64_t v74 = v67;
      uint64_t v75 = v68;
      uint64_t v76 = static Duration.zero.getter();
      uint64_t v78 = v77;
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v74 = v76;
        uint64_t v75 = v78;
      }
      long long v79 = (uint64_t *)&v55[v30[6]];
      uint64_t v80 = *v79;
      uint64_t v81 = v79[1];
      char v82 = static Duration.< infix(_:_:)();
      BOOL v83 = (v82 & 1) == 0;
      if (v82) {
        uint64_t v84 = v80;
      }
      else {
        uint64_t v84 = v74;
      }
      if (v83) {
        uint64_t v85 = v75;
      }
      else {
        uint64_t v85 = v81;
      }
      SystemFormatStyle.Timer.format(_:originalPrecision:)(v84, v85, (uint64_t)*v87, v87[1], 0, v91);
      return _sSny10Foundation4DateVGWOhTm_2(v56, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
    Duration.components.getter();
    uint64_t v52 = v86;
    static Date.+ infix(_:_:)();
    char v53 = static Date.< infix(_:_:)();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v4 + 8);
    v54(v52, v3);
    _sSny10Foundation4DateVGWOhTm_2(v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v54(v27, v3);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v54(v10, v3);
    char v30 = v25;
    if ((v53 & 1) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
    char v30 = (int *)v11;
  }
  Swift::String v31 = v92;
  if (*v92)
  {
    Swift::String v34 = (uint64_t *)&v92[v30[6]];
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    Date.timeIntervalSince(_:)();
    uint64_t v37 = static Duration.seconds(_:)();
    uint64_t v32 = MEMORY[0x24C524FC0](v35, v36, v37, v38);
  }
  else
  {
    Date.timeIntervalSince(_:)();
    uint64_t v32 = static Duration.seconds(_:)();
  }
  uint64_t v39 = v32;
  uint64_t v40 = v33;
  uint64_t v41 = static Duration.zero.getter();
  uint64_t v43 = v42;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v39 = v41;
    uint64_t v40 = v43;
  }
  uint64_t v44 = (uint64_t *)&v31[v30[6]];
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  char v47 = static Duration.< infix(_:_:)();
  BOOL v48 = (v47 & 1) == 0;
  if (v47) {
    uint64_t v49 = v45;
  }
  else {
    uint64_t v49 = v39;
  }
  if (v48) {
    uint64_t v50 = v40;
  }
  else {
    uint64_t v50 = v46;
  }
  return SystemFormatStyle.Timer.format(_:originalPrecision:)(v49, v50, 0, 0, 1, v91);
}

uint64_t SystemFormatStyle.Timer.updateFrequency(_:)@<X0>(uint64_t a1@<X8>)
{
  _sSny10Foundation4DateVGWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v3 = static Duration.seconds(_:)();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v6 + 36));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t result = static Duration.< infix(_:_:)();
  if (result) {
    uint64_t v11 = v3;
  }
  else {
    uint64_t v11 = v8;
  }
  if (result) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v9;
  }
  uint64_t v13 = (uint64_t *)(a1 + *(int *)(v6 + 40));
  *uint64_t v13 = v11;
  v13[1] = v12;
  return result;
}

uint64_t SystemFormatStyle.Timer.format(_:originalPrecision:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  int v175 = a5;
  uint64_t v181 = a4;
  uint64_t v182 = a3;
  uint64_t v178 = a1;
  uint64_t v179 = a2;
  uint64_t v183 = a6;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v164 = (uint64_t)&v146 - v10;
  type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)();
  uint64_t v162 = v11;
  uint64_t v161 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v157 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
  uint64_t v177 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v166 = *(void *)(v17 - 8);
  uint64_t v167 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v165 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = type metadata accessor for AttributeContainer();
  uint64_t v171 = *(void *)(v168 - 8);
  MEMORY[0x270FA5388](v168);
  uint64_t v160 = (char *)&v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  int64_t v163 = (char *)&v146 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v153 = (char *)&v146 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v154 = (char *)&v146 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v150 = (char *)&v146 - v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v152 = (char *)&v146 - v29;
  uint64_t v30 = type metadata accessor for AttributedString();
  uint64_t v169 = *(void *)(v30 - 8);
  uint64_t v170 = v30;
  MEMORY[0x270FA5388](v30);
  uint64_t v180 = (uint64_t)&v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v158 = (uint64_t)&v146 - v33;
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool), v8);
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v36 = (char *)&v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v155 = (uint64_t)&v146 - v38;
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool)();
  uint64_t v149 = v39;
  MEMORY[0x270FA5388](v39);
  uint64_t v148 = (char *)&v146 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v172 = *(void *)(v41 - 8);
  uint64_t v173 = v41;
  MEMORY[0x270FA5388](v41);
  unint64_t v156 = (char *)&v146 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v43);
  uint64_t v159 = (char *)&v146 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  uint64_t v151 = (char *)&v146 - v46;
  MEMORY[0x270FA5388](v47);
  uint64_t v49 = (char *)&v146 - v48;
  MEMORY[0x270FA5388](v50);
  uint64_t v52 = (char *)&v146 - v51;
  MEMORY[0x270FA5388](v53);
  uint64_t v55 = (char *)&v146 - v54;
  MEMORY[0x270FA5388](v56);
  uint64_t v58 = (char *)&v146 - v57;
  uint64_t v59 = v7;
  _sSny10Foundation4DateVGWOcTm_0(v7, (uint64_t)&v146 - v57, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v175)
  {
    uint64_t v60 = (uint64_t *)&v58[*(int *)(v43 + 40)];
    uint64_t v61 = *v60;
    uint64_t v181 = (void (*)(char *, char *, uint64_t))v60[1];
    uint64_t v182 = v61;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v58, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v62 = v7;
  int v63 = *(unsigned __int8 *)(v7 + *(int *)(v43 + 52));
  _sSny10Foundation4DateVGWOcTm_0(v59, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  CFIndex v174 = (int *)v43;
  id v176 = v16;
  if (v63 != 1)
  {
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v66 = v183;
    goto LABEL_17;
  }
  static Duration.seconds(_:)();
  char v64 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v55, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if ((v64 & 1) == 0)
  {
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v66 = v183;
    uint64_t v62 = v59;
    goto LABEL_16;
  }
  char v65 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v52, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v66 = v183;
  uint64_t v62 = v59;
  uint64_t v16 = v176;
  if ((v65 & 1) == 0) {
    goto LABEL_17;
  }
  SystemFormatStyle.Timer.dropSubsecondsOnRedaction.getter();
  _sSny10Foundation4DateVGWOcTm_0(v59, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v67 = static Duration.seconds(_:)();
  uint64_t v69 = v68;
  uint64_t v70 = v174;
  uint64_t v71 = (uint64_t *)(v62 + v174[9]);
  uint64_t v72 = v62;
  uint64_t v73 = *v71;
  uint64_t v74 = v71[1];
  char v75 = static Duration.< infix(_:_:)();
  if (v75) {
    uint64_t v76 = v67;
  }
  else {
    uint64_t v76 = v73;
  }
  if (v75) {
    uint64_t v77 = v69;
  }
  else {
    uint64_t v77 = v74;
  }
  uint64_t v78 = &v49[v70[10]];
  *(void *)uint64_t v78 = v76;
  *((void *)v78 + 1) = v77;
  uint64_t v79 = v155;
  SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(v178, v179, v182, (uint64_t)v181, 0, v155);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v80 = v177;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v79, 1, v177) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?(v79, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
    uint64_t v66 = v183;
    uint64_t v62 = v72;
LABEL_16:
    uint64_t v16 = v176;
LABEL_17:
    uint64_t v82 = v178;
    uint64_t v81 = v179;
    SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(v178, v179, v182, (uint64_t)v181, 0, (uint64_t)v36);
    uint64_t v83 = v177;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v36, 1, v177) == 1)
    {
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v36, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
      uint64_t v84 = v164;
      SystemFormatStyle.Timer.unitsStyle(for:)(v82, v81, v164);
      uint64_t v85 = v162;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v84, 1, v162) == 1)
      {
        outlined destroy of Range<AttributedString.Index>?(v84, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?));
        return SystemFormatStyle.Timer.staticString.getter(v66);
      }
      else
      {
        uint64_t v96 = *(int *)(v85 + 48);
        uint64_t v97 = (uint64_t)v157;
        unint64_t v98 = &v157[v96];
        uint64_t v99 = v84 + v96;
        uint64_t v100 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 32))(v97, v84, v100);
        char v101 = *(unsigned char *)(v99 + 32);
        long long v102 = *(_OWORD *)(v99 + 16);
        *(_OWORD *)unint64_t v98 = *(_OWORD *)v99;
        *((_OWORD *)v98 + 1) = v102;
        v98[32] = v101;
        Duration.UnitsFormatStyle.Attributed.format(_:)();
        return _sSny10Foundation4DateVGWOhTm_2(v97, (uint64_t (*)(void))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?));
      }
    }
    else
    {
      uint64_t v87 = *(int *)(v83 + 48);
      uint64_t v88 = &v16[v87];
      uint64_t v89 = *(int *)(v83 + 64);
      long long v90 = &v36[v87];
      (*(void (**)(char *, char *, uint64_t))(v172 + 32))(v16, v36, v173);
      char v91 = v90[32];
      long long v92 = *((_OWORD *)v90 + 1);
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v90;
      *((_OWORD *)v88 + 1) = v92;
      v88[32] = v91;
      v16[v89] = v36[v89];
      Duration.TimeFormatStyle.Attributed.format(_:)();
      if (*(void *)(v62 + v174[17]))
      {
        swift_bridgeObjectRetain_n();
        uint64_t v93 = v160;
        AttributeContainer.init(_:)();
        uint64_t v94 = v168;
        uint64_t v95 = v171;
      }
      else
      {
        uint64_t v94 = v168;
        uint64_t v95 = v171;
        uint64_t v93 = v160;
        if (one-time initialization token for attributes != -1) {
          swift_once();
        }
        uint64_t v103 = __swift_project_value_buffer(v94, (uint64_t)static MonospacedDigitEffect.attributes);
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v93, v103, v94);
      }
      uint64_t v104 = v163;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v163, v93, v94);
      char v105 = v165;
      uint64_t v106 = v166;
      uint64_t v107 = v167;
      (*(void (**)(char *, void, uint64_t))(v166 + 104))(v165, *MEMORY[0x263F06728], v167);
      AttributedString.mergeAttributes(_:mergePolicy:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v104, v94);
      swift_bridgeObjectRelease();
      uint64_t v108 = (uint64_t)v176;
      int v109 = v176[v89];
      CGRect v110 = v159;
      _sSny10Foundation4DateVGWOcTm_0(v62, (uint64_t)v159, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v109 == 1)
      {
        uint64_t v111 = v183;
        if (*v110 == 2)
        {
          double v112 = v174;
          uint64_t v113 = *(void *)&v110[v174[11]];
          _sSny10Foundation4DateVGWOhTm_2((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
          if (v113 >= 1)
          {
            uint64_t v114 = *(void *)(v62 + v112[19]);
            uint64_t v115 = v62 + v112[12];
            swift_bridgeObjectRetain();
            specialized CodableAttributeEffect.callAsFunction(_:locale:)(v180, v115, v114);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          _sSny10Foundation4DateVGWOhTm_2((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        }
      }
      else
      {
        _sSny10Foundation4DateVGWOhTm_2((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        uint64_t v111 = v183;
      }
      _sSny10Foundation4DateVGWOhTm_2(v108, (uint64_t (*)(void))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 32))(v111, v180, v170);
    }
  }
  char v116 = *(unsigned char *)(v79 + *(int *)(v80 + 64));
  uint64_t v117 = v149;
  uint64_t v118 = *(int *)(v149 + 64);
  uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 32);
  uint64_t v120 = v148;
  uint64_t v121 = v79;
  uint64_t v122 = v173;
  v119(v148, v121, v173);
  v120[v118] = v116;
  LODWORD(v182) = v120[*(int *)(v117 + 64)];
  double v123 = v120;
  double v124 = v174;
  v119(v156, (uint64_t)v123, v122);
  Duration.TimeFormatStyle.Attributed.format(_:)();
  uint64_t v125 = *(void *)(v72 + v124[17]);
  uint64_t v147 = v72;
  if (v125)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v126 = v150;
    AttributeContainer.init(_:)();
    uint64_t v127 = v168;
    uint64_t v128 = v171;
  }
  else
  {
    uint64_t v127 = v168;
    uint64_t v128 = v171;
    uint64_t v126 = v150;
    if (one-time initialization token for attributes != -1) {
      swift_once();
    }
    uint64_t v129 = __swift_project_value_buffer(v127, (uint64_t)static MonospacedDigitEffect.attributes);
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v126, v129, v127);
  }
  uint64_t v130 = v152;
  uint64_t v181 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
  v181(v152, v126, v127);
  CGFloat v132 = v165;
  uint64_t v131 = v166;
  uint64_t v133 = v167;
  (*(void (**)(char *, void, uint64_t))(v166 + 104))(v165, *MEMORY[0x263F06728], v167);
  AttributedString.mergeAttributes(_:mergePolicy:)();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
  CFIndex v134 = *(void (**)(char *, uint64_t))(v128 + 8);
  v134(v130, v127);
  swift_bridgeObjectRelease();
  uint64_t v135 = v147;
  uint64_t v136 = v147 + v124[12];
  if (*(void *)(v147 + v124[18]))
  {
    swift_bridgeObjectRetain_n();
    CGFloat v137 = v153;
    AttributeContainer.init(_:)();
  }
  else
  {
    CGFloat v137 = v153;
    if (one-time initialization token for attributes != -1) {
      swift_once();
    }
    uint64_t v138 = __swift_project_value_buffer(v127, (uint64_t)static AdjustedColonEffect.attributes);
    (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v137, v138, v127);
  }
  uint64_t v139 = (uint64_t)v154;
  v181(v154, v137, v127);
  specialized static AdjustedColonEffect.apply(attributes:to:locale:)(v139, v158);
  v134((char *)v139, v127);
  swift_bridgeObjectRelease();
  float64x2_t v140 = v151;
  _sSny10Foundation4DateVGWOcTm_0(v135, (uint64_t)v151, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v182)
  {
    uint64_t v141 = v183;
    if (*v140 == 2)
    {
      uint64_t v142 = *(void *)&v140[v124[11]];
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v142 >= 1)
      {
        uint64_t v143 = *(void *)(v135 + v124[19]);
        swift_bridgeObjectRetain();
        specialized CodableAttributeEffect.callAsFunction(_:locale:)(v158, v136, v143);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
  }
  else
  {
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v140, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v141 = v183;
  }
  static Duration.seconds(_:)();
  if (static Duration.< infix(_:_:)())
  {
    static Duration.seconds(_:)();
    if (static Duration.< infix(_:_:)()) {
      char v144 = 2;
    }
    else {
      char v144 = 1;
    }
  }
  else
  {
    char v144 = 0;
  }
  char v184 = v144;
  uint64_t v145 = v158;
  AttributedString.redact(for:locale:)(&v184, v136);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v156, v173);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 32))(v141, v145, v170);
}

uint64_t SystemFormatStyle.Timer.dropSubsecondsOnRedaction.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Locale.Language();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v39 = (char *)&v34 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v34 - v17, v1 + *(int *)(v4 + 60), v11, v16);
  MEMORY[0x24C520B00](v19);
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  uint64_t v22 = v21(v14, v11);
  if ((v20 & 1) != 0
    || (MEMORY[0x24C520B30](v22),
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v21(v14, v11),
        (v23 & 1) != 0))
  {
    v21(v18, v11);
    return 0;
  }
  static FormatStyleCapitalizationContext.middleOfSentence.getter();
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v21(v14, v11);
  v21(v18, v11);
  if (v26) {
    return 0;
  }
  int v27 = *(unsigned __int8 *)(v1 + *(int *)(v4 + 64));
  if (v27 == 3)
  {
    _sSny10Foundation4DateVGWOcTm_0(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v28 = (uint64_t)v39;
  }
  else
  {
    _sSny10Foundation4DateVGWOcTm_0(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v28 = (uint64_t)v39;
    if (!v27)
    {
      uint64_t v33 = v35;
      Locale.language.getter();
      uint64_t v24 = Locale.Language.characterDirection.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v37);
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      _sSny10Foundation4DateVGWOcTm_0(v1, v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v24 == 1)
      {
        _sSny10Foundation4DateVGWOhTm_2(v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        return v24;
      }
      goto LABEL_11;
    }
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOcTm_0(v1, v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
LABEL_11:
  int v29 = *(unsigned __int8 *)(v28 + *(int *)(v4 + 64));
  if (v29 == 3)
  {
    uint64_t v30 = v38;
    _sSny10Foundation4DateVGWOcTm_0(v28, v38, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    uint64_t v30 = v38;
    _sSny10Foundation4DateVGWOcTm_0(v28, v38, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v29 == 2)
    {
      uint64_t v31 = v35;
      Locale.language.getter();
      uint64_t v32 = Locale.Language.characterDirection.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
      uint64_t v24 = v32 == 2;
      _sSny10Foundation4DateVGWOhTm_2(v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      _sSny10Foundation4DateVGWOhTm_2(v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      return v24;
    }
  }
  _sSny10Foundation4DateVGWOhTm_2(v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOhTm_2(v28, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  return 0;
}

void SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v125) = a5;
  uint64_t v126 = a4;
  uint64_t v127 = a3;
  uint64_t v128 = a1;
  uint64_t v129 = a2;
  uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Grouping();
  uint64_t v122 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v121 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v123 = (uint64_t)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Duration.TimeFormatStyle.Pattern();
  MEMORY[0x270FA5388](v12 - 8);
  double v112 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v117 = (uint64_t)&v103 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v113 = (char *)&v103 - v17;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v115 = *(void *)(v18 - 8);
  uint64_t v116 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v114 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Duration.TimeFormatStyle();
  uint64_t v119 = *(void *)(v20 - 8);
  uint64_t v120 = v20;
  MEMORY[0x270FA5388](v20);
  uint64_t v118 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v103 - v23;
  MEMORY[0x270FA5388](v25);
  double v124 = (char *)&v103 - v26;
  uint64_t v130 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  uint64_t v111 = (char *)&v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v31 = (char *)&v103 - v30;
  MEMORY[0x270FA5388](v32);
  uint64_t v131 = (char *)&v103 - v33;
  uint64_t v34 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)&v103 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v40 = (char *)&v103 - v39;
  uint64_t v41 = *(void *)&v6[*(int *)(v38 + 44)];
  uint64_t v42 = *(void *)&v6[*(int *)(v38 + 32)];
  if (v41 > 2)
  {
    BOOL v43 = __OFADD__(v42, 2);
    uint64_t v44 = v42 + 2;
    if (v43)
    {
      __break(1u);
    }
    else
    {
      BOOL v43 = __OFSUB__(v44, v41);
      uint64_t v42 = v44 - v41;
      if (!v43)
      {
        if (v42 < 1) {
          goto LABEL_10;
        }
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_52;
  }
LABEL_5:
  if (v42 >= 2)
  {
    uint64_t v106 = *(int *)(v38 + 44);
    uint64_t v105 = v8;
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v6, (uint64_t)&v103 - v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v125)
    {
      uint64_t v45 = (uint64_t *)&v40[*(int *)(v34 + 40)];
      uint64_t v46 = *v45;
      uint64_t v126 = v45[1];
      uint64_t v127 = v46;
    }
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v135[0] = 0;
    v135[1] = 0;
    char v136 = 1;
    char v134 = 2;
    char v47 = *v6;
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v6, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v48 = (unsigned int *)MEMORY[0x263F8E200];
    uint64_t v125 = v34;
    uint64_t v107 = a6;
    uint64_t v104 = v24;
    if (v47)
    {
      char v51 = specialized getter of actuallyDashesOutFields #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(&v134, (uint64_t)v36, v127, v126, (uint64_t)v135);
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if ((v51 & 1) == 0)
      {
        uint64_t v54 = *v48;
        uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 104);
        uint64_t v53 = v130;
        v52(v131, v54, v130);
LABEL_16:
        uint64_t v55 = SystemFormatStyle.Timer.increment(showingHours:showingMinutes:constrainToPrecision:)(0, 1, 1);
        uint64_t v57 = v56;
        unsigned int v108 = v54;
        uint64_t v58 = v54;
        uint64_t v59 = v52;
        v52(v31, v58, v53);
        char v60 = static FloatingPointRoundingRule.== infix(_:_:)();
        uint64_t v61 = *(void (**)(char *, uint64_t))(v27 + 8);
        uint64_t v110 = v27 + 8;
        int v109 = v61;
        v61(v31, v53);
        if (v60)
        {
          MEMORY[0x24C524FC0](0x28093E61EE400000, 195, v55, v57);
          char v62 = static Duration.< infix(_:_:)() ^ 1;
        }
        else
        {
          char v62 = static Duration.< infix(_:_:)();
        }
        int v63 = v55;
        uint64_t v64 = v125;
        char v65 = v131;
        uint64_t v66 = v59;
        if (v6[*(int *)(v125 + 28)] != 1 || (v62 & 1) != 0)
        {
          char v68 = static Duration.< infix(_:_:)();
          char v133 = 2;
          char v132 = 2;
          uint64_t v67 = v108;
          if ((v68 & 1) == 0)
          {
            uint64_t v81 = *(void *)&v6[v106];
            uint64_t v82 = *(void *)&v6[*(int *)(v64 + 32)];
            uint64_t v71 = v124;
            if (v81 >= 3)
            {
              BOOL v43 = __OFADD__(v82, 2);
              uint64_t v83 = v82 + 2;
              if (v43)
              {
LABEL_54:
                __break(1u);
                goto LABEL_55;
              }
              BOOL v43 = __OFSUB__(v83, v81);
              uint64_t v82 = v83 - v81;
              if (v43)
              {
LABEL_55:
                __break(1u);
                goto LABEL_56;
              }
              if (v82 < 1) {
                goto LABEL_40;
              }
            }
            if (v82 >= 3)
            {
              uint64_t v87 = v114;
              uint64_t v73 = SystemFormatStyle.Timer.smallestUnit.getter();
              (*(void (**)(char *, uint64_t))(v115 + 8))(v87, v116);
            }
            else
            {
LABEL_40:
              uint64_t v73 = 0;
            }
            static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)();
            goto LABEL_47;
          }
        }
        else
        {
          char v133 = 2;
          char v132 = 2;
          uint64_t v67 = v108;
        }
        if ((specialized getter of shouldShowHoursMinutesSeconds #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(&v133, (uint64_t)v6) & 1) == 0)
        {
          if ((specialized getter of shouldShowHoursMinutes #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(&v132, (uint64_t)v6, v62 & 1, v127, v126) & 1) == 0)
          {
            v109(v65, v130);
            type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v107, 1, 1, v84);
            return;
          }
          uint64_t v74 = v130;
          if ((v62 & 1) != 0 || (static Duration.< infix(_:_:)() & 1) == 0)
          {
            long long v86 = v111;
            v66(v111, *MEMORY[0x263F8E1F8], v74);
            uint64_t v129 = 1;
            static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)();
            static Locale.autoupdatingCurrent.getter();
            uint64_t v71 = v124;
            Duration.TimeFormatStyle.init(pattern:locale:)();
            v109(v86, v74);
            LODWORD(v128) = 0;
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v123 = 0;
            uint64_t v117 = 0;
          }
          else
          {
            char v75 = v66;
            uint64_t v76 = v111;
            v75(v111, v67, v74);
            static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)();
            static Locale.autoupdatingCurrent.getter();
            uint64_t v71 = v124;
            Duration.TimeFormatStyle.init(pattern:locale:)();
            uint64_t v77 = MEMORY[0x24C524FC0](0x28093E61EE400000, 195, v63, v57);
            uint64_t v79 = v78;
            char v80 = static Duration.< infix(_:_:)();
            v109(v76, v74);
            if (v80)
            {
LABEL_56:
              __break(1u);
              return;
            }
            LODWORD(v128) = 0;
            uint64_t v129 = 0;
            uint64_t v123 = 0x28093E61EE400000;
            uint64_t v117 = 195;
            uint64_t v126 = v79;
            uint64_t v127 = v77;
          }
LABEL_48:
          type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
          uint64_t v89 = v88;
          uint64_t v90 = v107;
          uint64_t v91 = v107 + *(int *)(v88 + 48);
          uint64_t v92 = *(int *)(v88 + 64);
          uint64_t v93 = v118;
          uint64_t v94 = Duration.TimeFormatStyle.locale(_:)();
          uint64_t v95 = v121;
          MEMORY[0x24C520AC0](v94);
          uint64_t v96 = v104;
          Duration.TimeFormatStyle.grouping(_:)();
          (*(void (**)(char *, uint64_t))(v122 + 8))(v95, v105);
          uint64_t v97 = *(void (**)(char *, uint64_t))(v119 + 8);
          unint64_t v98 = v93;
          uint64_t v99 = v71;
          uint64_t v100 = v120;
          v97(v98, v120);
          Duration.TimeFormatStyle.attributed.getter();
          v97(v96, v100);
          v97(v99, v100);
          v109(v131, v130);
          uint64_t v101 = v126;
          *(void *)uint64_t v91 = v127;
          *(void *)(v91 + 8) = v101;
          uint64_t v102 = v117;
          *(void *)(v91 + 16) = v123;
          *(void *)(v91 + 24) = v102;
          *(unsigned char *)(v91 + 32) = v129;
          *(unsigned char *)(v90 + v92) = v128;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v90, 0, 1, v89);
          return;
        }
        uint64_t v69 = *(void *)&v6[v106];
        uint64_t v70 = *(void *)&v6[*(int *)(v64 + 32)];
        uint64_t v71 = v124;
        if (v69 < 3)
        {
LABEL_28:
          if (v70 > 3)
          {
            uint64_t v85 = v114;
            uint64_t v73 = SystemFormatStyle.Timer.smallestUnit.getter();
            (*(void (**)(char *, uint64_t))(v115 + 8))(v85, v116);
            goto LABEL_43;
          }
LABEL_29:
          uint64_t v73 = 0;
LABEL_43:
          static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)();
LABEL_47:
          static Locale.autoupdatingCurrent.getter();
          Duration.TimeFormatStyle.init(pattern:locale:)();
          uint64_t v126 = 0;
          uint64_t v127 = 0;
          uint64_t v123 = 0;
          uint64_t v117 = 0;
          LODWORD(v128) = v73 > 0;
          uint64_t v129 = 1;
          goto LABEL_48;
        }
        BOOL v43 = __OFADD__(v70, 2);
        uint64_t v72 = v70 + 2;
        if (!v43)
        {
          BOOL v43 = __OFSUB__(v72, v69);
          uint64_t v70 = v72 - v69;
          if (!v43)
          {
            if (v70 < 1) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
          goto LABEL_53;
        }
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
    }
    else
    {
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
    uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 104);
    uint64_t v53 = v130;
    v52(v131, *MEMORY[0x263F8E1F8], v130);
    uint64_t v54 = *v48;
    goto LABEL_16;
  }
LABEL_10:
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
  uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);

  v50(a6, 1, 1, v49);
}

uint64_t specialized CodableAttributeEffect.callAsFunction(_:locale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for AttributeContainer.Builder<AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, MEMORY[0x263F068A8]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for AttributeContainer();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v24 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v24 - v18;
  if (a3)
  {
    swift_bridgeObjectRetain();
    AttributeContainer.init(_:)();
  }
  else
  {
    uint64_t v24 = a2;
    if (one-time initialization token for attributes != -1) {
      swift_once();
    }
    uint64_t v20 = __swift_project_value_buffer(v10, (uint64_t)static MonospacedDigitEffect.attributes);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v20, v10);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x270FA5388](KeyPath);
    *(&v24 - 2) = v22;
    swift_getKeyPath();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute();
    AttributeContainer.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    AttributeContainer.Builder.callAsFunction(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v16, v10);
  specialized static SuperscriptEffect.apply(attributes:to:locale:)((uint64_t)v19, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v19, v10);
}

uint64_t CodableAttributeEffect.callAsFunction(_:locale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for AttributeContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v16 - v13;
  if (*v3)
  {
    swift_bridgeObjectRetain();
    AttributeContainer.init(_:)();
  }
  else
  {
    (*(void (**)(double))(*(void *)(a3 + 24) + 8))(v12);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 + 24) + 16))(v14, a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t SystemFormatStyle.Timer.unitsStyle(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v121 = a3;
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x270FA5388](v6 - 8);
  v112[1] = (uint64_t)v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v116 = (char *)v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v120 = (char *)v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v115 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  uint64_t v113 = (char *)v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v114 = (char *)v112 - v14;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v129 = *(void *)(v15 - 8);
  uint64_t v130 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v128 = (char *)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v137 = *(void *)(v127 - 8);
  MEMORY[0x270FA5388](v127);
  uint64_t v119 = (char *)v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v126 = (char *)v112 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v118 = (char *)v112 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v131 = (char *)v112 - v23;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v112 - v25;
  uint64_t v27 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v27);
  v112[0] = (uint64_t)v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v122 = (uint64_t)v112 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)v112 - v32;
  MEMORY[0x270FA5388](v34);
  uint64_t v36 = (char *)v112 - v35;
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)v112 - v38;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)v112 - v41;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)v112 - v44;
  uint64_t v136 = v46;
  uint64_t v123 = a1;
  uint64_t v133 = a2;
  LOBYTE(a2) = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v132 = v26;
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
  static Duration.seconds(_:)();
  char v47 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v45, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if ((v47 & 1) == 0)
  {
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v26 = v132;
LABEL_7:
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    goto LABEL_8;
  }
  char v48 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v26 = v132;
  if ((v48 & 1) == 0)
  {
LABEL_8:
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v50 = v133;
    goto LABEL_9;
  }
  char v49 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v50 = v133;
  if (v49)
  {
    type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v121, 1, 1, v51);
  }
LABEL_9:
  SystemFormatStyle.Timer.smallestUnit.getter();
  uint64_t v53 = swift_allocObject();
  *(unsigned char *)(v53 + 16) = 2;
  uint64_t v54 = swift_allocObject();
  uint64_t v125 = v54;
  *(void *)(v54 + 16) = 0;
  *(void *)(v54 + 24) = 0;
  *(unsigned char *)(v54 + 32) = 1;
  v141[0] = 0;
  v141[1] = 0;
  char v142 = 1;
  char v140 = 2;
  uint64_t v55 = v131;
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  char v56 = static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
  uint64_t v57 = v127;
  char v134 = *(void (**)(char *, uint64_t))(v137 + 8);
  uint64_t v135 = v137 + 8;
  v134(v55, v127);
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v124 = v53;
  if (v56)
  {
    uint64_t v58 = v123;
    char v59 = getter of isJustShowingSeconds #1 in SystemFormatStyle.Timer.unitsStyle(for:)(v53, (uint64_t)v36);
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v36, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v59)
    {
      char v60 = 1;
    }
    else
    {
      specialized getter of isShowingMinutesAndSecondsOrMore #1 in SystemFormatStyle.Timer.unitsStyle(for:)(&v140, (uint64_t)v33, (uint64_t)v141, v58, v50, v125, v53);
      char v60 = v61;
    }
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    char v60 = 0;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v139 = 2;
  char v138 = 2;
  char v62 = *v3;
  int v63 = v118;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v118, v26, v57);
  if (v62)
  {
    char v68 = v131;
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
    char v69 = static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
    uint64_t v70 = v134;
    v134(v68, v57);
    v70(v63, v57);
    uint64_t v64 = v122;
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, v122, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v66 = (uint64_t)v128;
    uint64_t v67 = v123;
    if (v69)
    {
      uint64_t v71 = v133;
      uint64_t v72 = v124;
      uint64_t v73 = v125;
      specialized getter of isJustNotShowingHour #1 in SystemFormatStyle.Timer.unitsStyle(for:)(&v139, v64, v123, v133, v125, v124);
      char v75 = v74;
      uint64_t v76 = v64;
      uint64_t v77 = v112[0];
      _sSny10Foundation4DateVGWOcTm_0(v76, v112[0], (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v75)
      {
        int v65 = 1;
      }
      else
      {
        specialized getter of isJustNotShowingMinute #1 in SystemFormatStyle.Timer.unitsStyle(for:)(&v138, v77, v67, v71, v73, v72);
        int v65 = v78;
      }
      _sSny10Foundation4DateVGWOhTm_2(v77, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      uint64_t v64 = v122;
    }
    else
    {
      int v65 = 0;
    }
  }
  else
  {
    v134(v63, v57);
    uint64_t v64 = v122;
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, v122, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    int v65 = 0;
    uint64_t v66 = (uint64_t)v128;
    uint64_t v67 = v123;
  }
  _sSny10Foundation4DateVGWOhTm_2(v64, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (*v3 & (v60 | v65)) {
    uint64_t v79 = (unsigned int *)MEMORY[0x263F8E200];
  }
  else {
    uint64_t v79 = (unsigned int *)MEMORY[0x263F8E1F8];
  }
  (*(void (**)(uint64_t, void, uint64_t))(v129 + 104))(v66, *v79, v130);
  if (v60)
  {
    char v80 = v119;
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
    uint64_t v81 = v133;
  }
  else
  {
    uint64_t v82 = v131;
    static Duration.UnitsFormatStyle.Unit.hours.getter();
    char v83 = static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
    v134(v82, v57);
    uint64_t v81 = v133;
    char v80 = v119;
    if (v83) {
      static Duration.UnitsFormatStyle.Unit.hours.getter();
    }
    else {
      static Duration.UnitsFormatStyle.Unit.minutes.getter();
    }
  }
  uint64_t v84 = (uint64_t)v126;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v126, v80, v57);
  unint64_t v85 = SystemFormatStyle.Timer.unitsToShow(greaterOrEqualTo:duration:rounding:)(v84, v67, v81, v66);
  uint64_t v86 = specialized Set.init<A>(_:)(v85);
  swift_bridgeObjectRelease();
  uint64_t v137 = v86;
  if ((v65 & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v87 = 0x40AAD21B3B700000;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v88 = 3;
  }
  else
  {
    uint64_t v87 = 0x28093E61EE400000;
    uint64_t v88 = 195;
  }
  uint64_t v89 = getter of subHourRoundingIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(v125, (uint64_t)v3, v124);
  uint64_t v91 = MEMORY[0x24C524FC0](v87, v88, v89, v90);
  uint64_t v93 = v92;
  if (static Duration.< infix(_:_:)())
  {
    __break(1u);
LABEL_37:
    uint64_t v91 = 0;
    uint64_t v93 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
  }
  uint64_t v94 = v136;
  uint64_t v95 = *(void *)&v3[*(int *)(v136 + 44)];
  uint64_t v133 = v87;
  uint64_t v131 = (char *)v88;
  uint64_t v122 = v93;
  uint64_t v123 = v91;
  if (v95 == 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
    goto LABEL_45;
  }
  if (!v95)
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
LABEL_45:
    LODWORD(v120) = v65 ^ 1;
    type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)();
    uint64_t v100 = v99;
    uint64_t v101 = v121;
    uint64_t v102 = v121 + *(int *)(v99 + 48);
    static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
    uint64_t v103 = v128;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
    uint64_t v104 = v113;
    Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
    uint64_t v105 = v114;
    Duration.UnitsFormatStyle.locale(_:)();
    uint64_t v106 = *(void (**)(char *, uint64_t))(v115 + 8);
    uint64_t v107 = v117;
    v106(v104, v117);
    Duration.UnitsFormatStyle.attributed.getter();
    v106(v105, v107);
    uint64_t v108 = v127;
    int v109 = v134;
    v134(v126, v127);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v103, v130);
    v109(v132, v108);
    uint64_t v110 = v122;
    *(void *)uint64_t v102 = v123;
    *(void *)(v102 + 8) = v110;
    uint64_t v111 = v131;
    *(void *)(v102 + 16) = v133;
    *(void *)(v102 + 24) = v111;
    *(unsigned char *)(v102 + 32) = v120 & 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v101, 0, 1, v100);
    swift_release();
    return swift_release();
  }
  uint64_t result = static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  if (v95 <= 2) {
    goto LABEL_45;
  }
  uint64_t v96 = *(void *)&v3[*(int *)(v94 + 32)];
  BOOL v97 = __OFADD__(v96, 2);
  uint64_t v98 = v96 + 2;
  if (v97)
  {
    __break(1u);
  }
  else if (!__OFSUB__(v98, v95))
  {
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.Timer.staticString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v74 = *(void *)(v2 - 8);
  uint64_t v75 = v2;
  MEMORY[0x270FA5388](v2);
  char v69 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth();
  uint64_t v57 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v56 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v70 = type metadata accessor for Duration.UnitsFormatStyle();
  uint64_t v67 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  int v65 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v71 = *(void *)(v10 - 8);
  uint64_t v72 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v64 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v66 = (char *)&v55 - v13;
  uint64_t v60 = type metadata accessor for AttributedString();
  uint64_t v76 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v77 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int v63 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v55 - v19;
  SystemFormatStyle.Timer.smallestUnit.getter();
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, MEMORY[0x263F07EC8], MEMORY[0x263F8E0F8]);
  uint64_t v21 = v1;
  unint64_t v22 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_2461B9DC0;
  uint64_t v24 = *(void (**)(unint64_t, char *, uint64_t))(v16 + 16);
  char v68 = v20;
  v24(v23 + v22, v20, v15);
  uint64_t v62 = specialized Set.init(_nonEmptyArrayLiteral:)(v23);
  swift_setDeallocating();
  uint64_t v73 = v15;
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v25 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v26 = v25[11];
  uint64_t v27 = *(void *)(v21 + v26);
  uint64_t v58 = v6;
  uint64_t v59 = v26;
  if (v27 == 1)
  {
    static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
    goto LABEL_8;
  }
  if (!v27)
  {
    static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
    goto LABEL_8;
  }
  uint64_t result = static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
  if (v27 > 2)
  {
    uint64_t v29 = *(void *)(v21 + v25[8]);
    BOOL v30 = __OFADD__(v29, 2);
    uint64_t v31 = v29 + 2;
    if (v30)
    {
      __break(1u);
    }
    else if (!__OFSUB__(v31, v27))
    {
      goto LABEL_8;
    }
    __break(1u);
    return result;
  }
LABEL_8:
  static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)();
  uint64_t v33 = v74;
  uint64_t v32 = v75;
  uint64_t v34 = v69;
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v69, *MEMORY[0x263F8E200], v75);
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  uint64_t v35 = v65;
  Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)();
  uint64_t v36 = v64;
  Duration.UnitsFormatStyle.attributed.getter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v70);
  uint64_t v37 = v21 + v25[12];
  uint64_t v38 = v66;
  Duration.UnitsFormatStyle.Attributed.locale(_:)();
  uint64_t v39 = v21;
  uint64_t v40 = v72;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v71 + 8);
  v41(v36, v72);
  static Duration.< infix(_:_:)();
  uint64_t v42 = v77;
  Duration.UnitsFormatStyle.Attributed.format(_:)();
  v41(v38, v40);
  uint64_t v43 = v63;
  static Duration.UnitsFormatStyle.Unit.minutes.getter();
  uint64_t v44 = v68;
  char v45 = static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
  uint64_t v46 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v47 = v73;
  v46(v43, v73);
  if (v45)
  {
    uint64_t v48 = *(void *)(v39 + v59);
    if (v48 == 1)
    {
      uint64_t v51 = (uint64_t)v56;
      static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter();
      uint64_t v52 = v61;
      uint64_t v50 = v57;
      uint64_t v49 = v58;
    }
    else
    {
      uint64_t v50 = v57;
      uint64_t v49 = v58;
      uint64_t v51 = (uint64_t)v56;
      if (v48) {
        static Duration.UnitsFormatStyle.UnitWidth.narrow.getter();
      }
      else {
        static Duration.UnitsFormatStyle.UnitWidth.wide.getter();
      }
      uint64_t v52 = v61;
    }
    uint64_t v53 = v60;
    uint64_t v54 = v77;
    static SystemFormatStyle.lessThanOneMinuteString(_:locale:width:)(v77, v37, v51, v52);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v51, v49);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v54, v53);
    return ((uint64_t (*)(char *, uint64_t))v46)(v44, v47);
  }
  else
  {
    v46(v44, v47);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v61, v42, v60);
  }
}

void SystemFormatStyle.Timer.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt8 v2 = v1 & 1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  uint64_t v3 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  Duration.hash(into:)();
  Hasher._combine(_:)(v0[v3[7]]);
  Hasher._combine(_:)(*(void *)&v0[v3[8]]);
  Duration.hash(into:)();
  Duration.hash(into:)();
  Hasher._combine(_:)(*(void *)&v0[v3[11]]);
  type metadata accessor for Locale();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(v0[v3[13]]);
  Hasher._combine(_:)(v0[v3[14]]);
  type metadata accessor for FormatStyleCapitalizationContext();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
  dispatch thunk of Hashable.hash(into:)();
  Swift::UInt v4 = v0[v3[16]];
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  if (*(void *)&v0[v3[17]])
  {
    Hasher._combine(_:)(1u);
    CodableNSAttributes.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)&v0[v3[18]])
  {
    Hasher._combine(_:)(1u);
    CodableNSAttributes.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (*(void *)&v0[v3[19]])
  {
    Hasher._combine(_:)(1u);
    CodableNSAttributes.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

BOOL static CodableAttributeEffect.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a1)
  {
    if (!v2) {
      return 1;
    }
    goto LABEL_8;
  }
  uint64_t v6 = *a1;
  if (!v2)
  {
    swift_bridgeObjectRetain();
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = v2;
  swift_bridgeObjectRetain_n();
  char v3 = static CodableNSAttributes.== infix(_:_:)(&v6, &v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v3 & 1) != 0;
}

uint64_t SystemFormatStyle.Timer.encode(to:)(void *a1)
{
  char v3 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys, (uint64_t)&unk_26FA58598, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = *v3;
  char v13 = 0;
  lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for SystemFormatStyle.Timer();
    LOBYTE(v12) = 1;
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)&v3[v10[6]];
    char v13 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)&v3[v10[9]];
    char v13 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)&v3[v10[10]];
    char v13 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)&v3[v10[11]];
    char v13 = 7;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 8;
    type metadata accessor for Locale();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 11;
    type metadata accessor for FormatStyleCapitalizationContext();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = v3[v10[16]];
    char v13 = 12;
    _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for ProxyCodable<TextAlignment?>, (uint64_t (*)(uint64_t))type metadata accessor for TextAlignment?, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAlignment? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProxyCodable);
    lazy protocol witness table accessor for type ProxyCodable<TextAlignment?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<TextAlignment?> and conformance ProxyCodable<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)&v3[v10[17]];
    char v13 = 13;
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, &lazy cache variable for type metadata for CodableAttributeEffect<MonospacedDigitEffect>, (uint64_t)&unk_26FA645D8, (uint64_t)&protocol witness table for MonospacedDigitEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    lazy protocol witness table accessor for type CodableAttributeEffect<MonospacedDigitEffect> and conformance CodableAttributeEffect<A>(&lazy protocol witness table cache variable for type CodableAttributeEffect<MonospacedDigitEffect> and conformance CodableAttributeEffect<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)&v3[v10[18]];
    char v13 = 14;
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, &lazy cache variable for type metadata for CodableAttributeEffect<AdjustedColonEffect>, (uint64_t)&unk_26FA5D718, (uint64_t)&protocol witness table for AdjustedColonEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    lazy protocol witness table accessor for type CodableAttributeEffect<AdjustedColonEffect> and conformance CodableAttributeEffect<A>(&lazy protocol witness table cache variable for type CodableAttributeEffect<AdjustedColonEffect> and conformance CodableAttributeEffect<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)&v3[v10[19]];
    char v13 = 15;
    type metadata accessor for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>> and conformance CodableAttributeEffect<A>, (void (*)(uint64_t))type metadata accessor for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int SystemFormatStyle.Timer.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.Timer.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v59 = *(void *)(v3 - 8);
  uint64_t v60 = v3;
  MEMORY[0x270FA5388](v3);
  char v45 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v49 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Date();
  uint64_t v46 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  uint64_t v48 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.Timer.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys, (uint64_t)&unk_26FA58598, MEMORY[0x263F8E040]);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v41 - v10;
  long long v12 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(v15 + 44);
  *(void *)&v14[v16] = 0;
  uint64_t v61 = &v14[*(int *)(v15 + 48)];
  uint64_t v17 = static Locale.autoupdatingCurrent.getter();
  uint64_t v18 = v12[13];
  v14[v18] = 1;
  uint64_t v19 = v12[14];
  v14[v19] = 0;
  uint64_t v58 = &v14[v12[15]];
  MEMORY[0x24C520B20](v17);
  uint64_t v20 = v12[16];
  v14[v20] = 3;
  uint64_t v57 = v12[17];
  *(void *)&v14[v57] = 0;
  uint64_t v56 = v12[18];
  *(void *)&v14[v56] = 0;
  uint64_t v53 = v12[19];
  uint64_t v54 = a1;
  uint64_t v64 = v14;
  *(void *)&v14[v53] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys();
  uint64_t v52 = v11;
  uint64_t v21 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v22 = v48;
    uint64_t v55 = v18;
    uint64_t v42 = v19;
    uint64_t v43 = v12;
    uint64_t v23 = v49;
    uint64_t v41 = v20;
    uint64_t v24 = v51;
    char v66 = 0;
    lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v64;
    *uint64_t v64 = v65;
    LOBYTE(v65) = 1;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    uint64_t v26 = v22;
    uint64_t v27 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v26;
    uint64_t v29 = v43;
    (*(void (**)(unsigned char *, char *, uint64_t))(v46 + 32))(&v25[v43[5]], v28, v27);
    char v66 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v25[v29[6]] = v65;
    LOBYTE(v65) = 3;
    v25[v29[7]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v65) = 4;
    *(void *)&v25[v29[8]] = KeyedDecodingContainer.decode(_:forKey:)();
    char v66 = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v25[v29[9]] = v65;
    char v66 = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v25[v29[10]] = v65;
    char v66 = 7;
    lazy protocol witness table accessor for type TextSizeVariant and conformance TextSizeVariant();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v25[v16] = v65;
    LOBYTE(v65) = 8;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    uint64_t v30 = v63;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v62 + 40))(v61, v23, v30);
    LOBYTE(v65) = 9;
    v64[v55] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v65) = 10;
    v64[v42] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v65) = 11;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext, MEMORY[0x263F06E00]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v58, v45, v60);
    _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for ProxyCodable<TextAlignment?>, (uint64_t (*)(uint64_t))type metadata accessor for TextAlignment?, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAlignment? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProxyCodable);
    char v66 = 12;
    lazy protocol witness table accessor for type ProxyCodable<TextAlignment?> and conformance ProxyCodable<A>(&lazy protocol witness table cache variable for type ProxyCodable<TextAlignment?> and conformance ProxyCodable<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v64[v41] = v65;
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, &lazy cache variable for type metadata for CodableAttributeEffect<MonospacedDigitEffect>, (uint64_t)&unk_26FA645D8, (uint64_t)&protocol witness table for MonospacedDigitEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    char v66 = 13;
    lazy protocol witness table accessor for type CodableAttributeEffect<MonospacedDigitEffect> and conformance CodableAttributeEffect<A>(&lazy protocol witness table cache variable for type CodableAttributeEffect<MonospacedDigitEffect> and conformance CodableAttributeEffect<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v32 = v64;
    uint64_t v31 = v65;
    uint64_t v33 = v57;
    swift_bridgeObjectRelease();
    *(void *)&v32[v33] = v31;
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, &lazy cache variable for type metadata for CodableAttributeEffect<AdjustedColonEffect>, (uint64_t)&unk_26FA5D718, (uint64_t)&protocol witness table for AdjustedColonEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    char v66 = 14;
    lazy protocol witness table accessor for type CodableAttributeEffect<AdjustedColonEffect> and conformance CodableAttributeEffect<A>(&lazy protocol witness table cache variable for type CodableAttributeEffect<AdjustedColonEffect> and conformance CodableAttributeEffect<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v35 = v64;
    uint64_t v34 = v65;
    uint64_t v36 = v56;
    swift_bridgeObjectRelease();
    *(void *)&v35[v36] = v34;
    type metadata accessor for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>();
    char v66 = 15;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>> and conformance CodableAttributeEffect<A>, (void (*)(uint64_t))type metadata accessor for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v52, v50);
    uint64_t v38 = (uint64_t)v64;
    uint64_t v37 = v65;
    uint64_t v39 = v53;
    swift_bridgeObjectRelease();
    *(void *)(v38 + v39) = v37;
    _sSny10Foundation4DateVGWOcTm_0(v38, v44, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    return _sSny10Foundation4DateVGWOhTm_2(v38, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.Timer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _sSny10Foundation4DateVGWOcTm_0(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v7 = a3 + *(int *)(a2 + 48);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24);

  return v9(v7, a1, v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.Timer@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SystemFormatStyle.Timer.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SystemFormatStyle.Timer(void *a1)
{
  return SystemFormatStyle.Timer.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SystemFormatStyle.Timer()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SystemFormatStyle.Timer()
{
  return Hasher._finalize()();
}

uint64_t SystemFormatStyle.Timer.discreteInput(before:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v87 = a1;
  uint64_t v3 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v3);
  uint64_t v86 = (uint64_t)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v79 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v85 = (uint64_t)&v79 - v9;
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v79 - v11;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v79 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v88 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v79 - v20;
  unint64_t v22 = &v1[*(int *)(v3 + 20)];
  if ((static Date.> infix(_:_:)() & 1) == 0)
  {
    uint64_t v32 = v87;
    uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
    return v33(v32, 1, 1, v16);
  }
  uint64_t v81 = v7;
  uint64_t v84 = (uint64_t *)&v1[*(int *)(v3 + 24)];
  Duration.components.getter();
  char v83 = v22;
  static Date.+ infix(_:_:)();
  char v23 = static Date.< infix(_:_:)();
  uint64_t v24 = v16;
  char v25 = v23;
  uint64_t v26 = *(void (**)(char *))(v88 + 8);
  uint64_t v82 = v24;
  v26(v21);
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if ((v25 & 1) == 0)
  {
    char v80 = v26;
    static Duration.seconds(_:)();
    char v27 = static Duration.< infix(_:_:)();
    _sSny10Foundation4DateVGWOcTm_0((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v27)
    {
      char v28 = static Duration.< infix(_:_:)();
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v28)
      {
        Duration.components.getter();
        static Date.+ infix(_:_:)();
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v29 = v82;
        uint64_t v30 = (void (*)(char *, uint64_t))v80;
        uint64_t v31 = v87;
        Date.init(timeIntervalSinceReferenceDate:)();
        v30(v18, v29);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v31, 0, 1, v29);
      }
      goto LABEL_11;
    }
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
LABEL_11:
  char v35 = *v1;
  if (*v1)
  {
    uint64_t v40 = v84;
    uint64_t v41 = *v84;
    uint64_t v42 = v84[1];
    Date.timeIntervalSince(_:)();
    uint64_t v43 = static Duration.seconds(_:)();
    uint64_t v36 = MEMORY[0x24C524FC0](v41, v42, v43, v44);
    uint64_t v38 = v45;
    uint64_t v39 = v81;
  }
  else
  {
    Date.timeIntervalSince(_:)();
    uint64_t v36 = static Duration.seconds(_:)();
    uint64_t v38 = v37;
    uint64_t v39 = v81;
    uint64_t v40 = v84;
  }
  uint64_t v46 = static Duration.zero.getter();
  uint64_t v48 = v47;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v36 = v46;
    uint64_t v38 = v48;
  }
  uint64_t v49 = *v40;
  uint64_t v50 = v40[1];
  char v51 = static Duration.< infix(_:_:)();
  BOOL v52 = (v51 & 1) == 0;
  if (v51) {
    uint64_t v53 = v49;
  }
  else {
    uint64_t v53 = v36;
  }
  if (v52) {
    uint64_t v54 = v38;
  }
  else {
    uint64_t v54 = v50;
  }
  if (v35) {
    uint64_t v55 = SystemFormatStyle.Timer.discreteInput(after:)(v53, v54);
  }
  else {
    uint64_t v55 = SystemFormatStyle.Timer.discreteInput(before:)(v53, v54);
  }
  uint64_t v58 = v55;
  uint64_t v59 = v56;
  char v60 = v57;
  static Duration.seconds(_:)();
  char v61 = static Duration.< infix(_:_:)();
  if ((v60 & 1) == 0)
  {
    uint64_t v62 = v85;
    _sSny10Foundation4DateVGWOcTm_0(v2, v85, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v61)
    {
      char v63 = static Duration.< infix(_:_:)();
      _sSny10Foundation4DateVGWOhTm_2(v62, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      _sSny10Foundation4DateVGWOcTm_0(v2, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v63)
      {
        _sSny10Foundation4DateVGWOhTm_2((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        uint64_t v64 = v82;
LABEL_40:
        uint64_t v68 = static Duration.zero.getter();
        uint64_t v70 = v69;
        uint64_t v71 = *v84;
        uint64_t v72 = v84[1];
        if (static Duration.< infix(_:_:)())
        {
          uint64_t v73 = v59;
        }
        else
        {
          uint64_t v58 = v71;
          uint64_t v73 = v72;
        }
        char v74 = static Duration.< infix(_:_:)();
        BOOL v75 = (v74 & 1) == 0;
        if (v74) {
          uint64_t v76 = v68;
        }
        else {
          uint64_t v76 = v58;
        }
        if (v75) {
          uint64_t v77 = v73;
        }
        else {
          uint64_t v77 = v70;
        }
        uint64_t v78 = v87;
        SystemFormatStyle.Timer.nextInputRoundingLower(for:)(v76, v77, v87);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v78, 0, 1, v64);
      }
    }
    else
    {
      _sSny10Foundation4DateVGWOhTm_2(v62, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      _sSny10Foundation4DateVGWOcTm_0(v2, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
    uint64_t v64 = v82;
    if ((*v39 & 1) == 0) {
      static Duration.zero.getter();
    }
    char v67 = static Duration.< infix(_:_:)();
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v67) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v87, 1, 1, v64);
    }
    goto LABEL_40;
  }
  uint64_t v65 = v86;
  _sSny10Foundation4DateVGWOcTm_0(v2, v86, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v61)
  {
    char v66 = static Duration.< infix(_:_:)();
    _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v66)
    {
      Date.timeIntervalSinceReferenceDate.getter();
      uint64_t v29 = v82;
      uint64_t v31 = v87;
      Date.init(timeIntervalSinceReferenceDate:)();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v31, 0, 1, v29);
    }
  }
  else
  {
    _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v87, 1, 1, v82);
}

uint64_t SystemFormatStyle.Timer.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v55 - v7;
  _sypXmT_s13DecodingErrorO7ContextVtMaTm_0(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, ClosedRange<Duration>?), MEMORY[0x263F07EA0], (void (*)(uint64_t))type metadata accessor for ClosedRange<Duration>?);
  *(void *)&long long v62 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v58 = (char *)&v55 - v10;
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v59 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool), v5);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v55 - v14;
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool)();
  uint64_t v17 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  char v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = a1;
  SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(a1, a2, 0, 0, 1, (uint64_t)v15);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
  uint64_t v25 = v24;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v15, 1, v24) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v15, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
    SystemFormatStyle.Timer.unitsStyle(for:)(v64, a2, (uint64_t)v8);
    type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)();
    uint64_t v27 = v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v8, 1, v26) == 1)
    {
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v8, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?));
      uint64_t v28 = *(void *)(v2 + *(int *)(type metadata accessor for SystemFormatStyle.Timer() + 40));
      if ((static Duration.< infix(_:_:)() & 1) == 0) {
        return 1000000000000000000;
      }
      return v28;
    }
    uint64_t v40 = &v8[*(int *)(v27 + 48)];
    long long v57 = *(_OWORD *)v40;
    uint64_t v41 = *((void *)v40 + 3);
    uint64_t v56 = *((void *)v40 + 2);
    char v42 = v40[32];
    uint64_t v44 = v61;
    uint64_t v43 = v62;
    uint64_t v45 = v58;
    uint64_t v46 = &v58[*(int *)(v62 + 48)];
    uint64_t v63 = a2;
    uint64_t v47 = v60;
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    v48(v58, v8, v61);
    *(_OWORD *)uint64_t v46 = v57;
    *((void *)v46 + 2) = v56;
    *((void *)v46 + 3) = v41;
    v46[32] = v42;
    uint64_t v49 = &v45[*(int *)(v43 + 48)];
    *(void *)&long long v57 = *((void *)v49 + 2);
    *(void *)&long long v62 = *((void *)v49 + 3);
    int v37 = v49[32];
    uint64_t v50 = v59;
    v48(v59, v45, v44);
    uint64_t v28 = Duration.UnitsFormatStyle.Attributed.discreteInput(after:)();
    char v52 = v51;
    uint64_t v53 = v44;
    uint64_t v36 = v57;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v53);
    if (v52)
    {
LABEL_9:
      if (v37) {
        return 0;
      }
      else {
        return v36;
      }
    }
  }
  else
  {
    uint64_t v29 = &v15[*(int *)(v25 + 48)];
    long long v62 = *(_OWORD *)v29;
    uint64_t v30 = *((void *)v29 + 2);
    uint64_t v60 = *((void *)v29 + 3);
    uint64_t v61 = v30;
    char v31 = v29[32];
    uint64_t v32 = &v19[*(int *)(v17 + 48)];
    uint64_t v63 = a2;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v33(v19, v15, v20);
    *(_OWORD *)uint64_t v32 = v62;
    uint64_t v34 = v60;
    *((void *)v32 + 2) = v61;
    *((void *)v32 + 3) = v34;
    v32[32] = v31;
    char v35 = &v19[*(int *)(v17 + 48)];
    uint64_t v36 = *((void *)v35 + 2);
    *(void *)&long long v62 = *((void *)v35 + 3);
    int v37 = v35[32];
    v33(v23, v19, v20);
    uint64_t v28 = Duration.TimeFormatStyle.Attributed.discreteInput(after:)();
    char v39 = v38;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    if (v39) {
      goto LABEL_9;
    }
  }
  if (v37 & 1) == 0 && (static Duration.< infix(_:_:)()) {
    return v36;
  }
  return v28;
}

uint64_t SystemFormatStyle.Timer.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?), MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v53 - v6;
  _sypXmT_s13DecodingErrorO7ContextVtMaTm_0(0, &lazy cache variable for type metadata for (Duration.UnitsFormatStyle.Attributed, ClosedRange<Duration>?), MEMORY[0x263F07EA0], (void (*)(uint64_t))type metadata accessor for ClosedRange<Duration>?);
  uint64_t v58 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v56 = (char *)&v53 - v9;
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.Attributed();
  uint64_t v59 = *(void *)(v10 - 8);
  *(void *)&long long v60 = v10;
  MEMORY[0x270FA5388](v10);
  long long v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool), v4);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v53 - v13;
  type metadata accessor for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool)();
  uint64_t v16 = v15;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Duration.TimeFormatStyle.Attributed();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = a1;
  SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(a1, a2, 0, 0, 1, (uint64_t)v14);
  type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)();
  uint64_t v24 = v23;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v14, 1, v23) == 1)
  {
    outlined destroy of Range<AttributedString.Index>?((uint64_t)v14, &lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
    SystemFormatStyle.Timer.unitsStyle(for:)(v62, a2, (uint64_t)v7);
    type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)();
    uint64_t v26 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v7, 1, v25) == 1)
    {
      outlined destroy of Range<AttributedString.Index>?((uint64_t)v7, &lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)?, (uint64_t (*)(uint64_t))type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?));
      return 0;
    }
    char v39 = &v7[*(int *)(v26 + 48)];
    long long v55 = *(_OWORD *)v39;
    uint64_t v40 = *((void *)v39 + 3);
    uint64_t v54 = *((void *)v39 + 2);
    char v41 = v39[32];
    uint64_t v42 = v58;
    uint64_t v43 = v59;
    uint64_t v44 = v56;
    uint64_t v45 = &v56[*(int *)(v58 + 48)];
    uint64_t v61 = a2;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v47 = v60;
    v46(v56, v7, v60);
    *(_OWORD *)uint64_t v45 = v55;
    *((void *)v45 + 2) = v54;
    *((void *)v45 + 3) = v40;
    v45[32] = v41;
    uint64_t v48 = &v44[*(int *)(v42 + 48)];
    uint64_t v34 = *(void *)v48;
    uint64_t v58 = *((void *)v48 + 1);
    int v35 = v48[32];
    uint64_t v49 = v57;
    v46(v57, v44, v47);
    uint64_t v36 = Duration.UnitsFormatStyle.Attributed.discreteInput(before:)();
    char v51 = v50;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v47);
    if (v51)
    {
LABEL_8:
      if (!v35) {
        return v34;
      }
      return 0;
    }
  }
  else
  {
    uint64_t v27 = &v14[*(int *)(v24 + 48)];
    long long v60 = *(_OWORD *)v27;
    uint64_t v28 = *((void *)v27 + 2);
    uint64_t v58 = *((void *)v27 + 3);
    uint64_t v59 = v28;
    char v29 = v27[32];
    uint64_t v30 = &v18[*(int *)(v16 + 48)];
    uint64_t v61 = a2;
    char v31 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v31(v18, v14, v19);
    *(_OWORD *)uint64_t v30 = v60;
    uint64_t v32 = v58;
    *((void *)v30 + 2) = v59;
    *((void *)v30 + 3) = v32;
    v30[32] = v29;
    uint64_t v33 = &v18[*(int *)(v16 + 48)];
    uint64_t v34 = *(void *)v33;
    uint64_t v58 = *((void *)v33 + 1);
    int v35 = v33[32];
    v31(v22, v18, v19);
    uint64_t v36 = Duration.TimeFormatStyle.Attributed.discreteInput(before:)();
    char v38 = v37;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    if (v38) {
      goto LABEL_8;
    }
  }
  if ((v35 & 1) == 0 && (static Duration.< infix(_:_:)() & 1) == 0) {
    return v34;
  }
  return v36;
}

uint64_t SystemFormatStyle.Timer.nextInputRoundingLower(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v8);
  long long v55 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v60 = (char *)&v53 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v56 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v62 = (char *)&v53 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v53 - v20;
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v64 = (char *)&v53 - v24;
  char v25 = *v3;
  uint64_t v57 = v8;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  if (v25) {
    MEMORY[0x24C524FC0](*(void *)&v3[*(int *)(v8 + 24)], *(void *)&v3[*(int *)(v8 + 24) + 8], a1, a2, v23);
  }
  Duration.components.getter();
  uint64_t v26 = v64;
  Date.addingTimeInterval(_:)();
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v27(v21, v26, v15);
  uint64_t v61 = a3;
  if (v25)
  {
    uint64_t v54 = v15;
    if (*v14)
    {
      char v29 = (uint64_t *)&v14[*(int *)(v57 + 24)];
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      Date.timeIntervalSince(_:)();
      uint64_t v32 = static Duration.seconds(_:)();
      MEMORY[0x24C524FC0](v30, v31, v32, v33);
    }
    else
    {
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
    }
    static Duration.zero.getter();
    static Duration.< infix(_:_:)();
    static Duration.< infix(_:_:)();
    char v28 = static Duration.< infix(_:_:)();
    uint64_t v15 = v54;
  }
  else
  {
    char v28 = 0;
  }
  uint64_t v34 = *(void (**)(char *, uint64_t))(v63 + 8);
  v34(v21, v15);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v35 = (uint64_t)v4;
  uint64_t v36 = v60;
  _sSny10Foundation4DateVGWOcTm_0(v35, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v37 = v62;
  v27(v62, v64, v15);
  if (v28)
  {
    v34(v37, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    char v38 = v64;
LABEL_11:
    Date.timeIntervalSinceReferenceDate.getter();
    Date.init(timeIntervalSinceReferenceDate:)();
    return ((uint64_t (*)(char *, uint64_t))v34)(v38, v15);
  }
  uint64_t v53 = v34;
  char v40 = *v36;
  char v41 = v55;
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v36, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v42 = v56;
  v27(v56, v37, v15);
  if (v40)
  {
    uint64_t v45 = v53;
    v53(v42, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v45(v37, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v46 = v61;
    char v38 = v64;
  }
  else
  {
    uint64_t v54 = v15;
    uint64_t v43 = v56;
    if (*v41)
    {
      uint64_t v47 = (uint64_t *)&v41[*(int *)(v57 + 24)];
      uint64_t v48 = *v47;
      uint64_t v49 = v47[1];
      uint64_t v44 = (uint64_t)v41;
      Date.timeIntervalSince(_:)();
      uint64_t v50 = static Duration.seconds(_:)();
      MEMORY[0x24C524FC0](v48, v49, v50, v51);
    }
    else
    {
      uint64_t v44 = (uint64_t)v41;
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
    }
    char v38 = v64;
    static Duration.zero.getter();
    static Duration.< infix(_:_:)();
    static Duration.< infix(_:_:)();
    char v52 = static Duration.< infix(_:_:)();
    uint64_t v34 = v53;
    uint64_t v15 = v54;
    v53(v43, v54);
    _sSny10Foundation4DateVGWOhTm_2(v44, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v34(v62, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v46 = v61;
    if (v52) {
      goto LABEL_11;
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v46, v38, v15);
}

uint64_t SystemFormatStyle.Timer.discreteInput(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v91 = a2;
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v5);
  uint64_t v87 = (uint64_t)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v88 = (char *)&v80 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v86 = (uint64_t)&v80 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v89 = (uint64_t)&v80 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v80 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v84 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v80 - v20;
  uint64_t v22 = *(int *)(v5 + 24);
  uint64_t v23 = v5;
  uint64_t v24 = v3 + *(int *)(v5 + 20);
  char v25 = (uint64_t *)(v3 + v22);
  Duration.components.getter();
  static Date.+ infix(_:_:)();
  char v26 = static Date.< infix(_:_:)();
  uint64_t v90 = v17;
  char v83 = *(void (**)(char *, uint64_t))(v17 + 8);
  v83(v21, v16);
  if ((v26 & 1) == 0)
  {
    uint64_t v34 = 1;
LABEL_35:
    uint64_t v33 = v90;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v91, v34, 1, v16);
  }
  lazy protocol witness table accessor for type Date and conformance Date();
  uint64_t v80 = a1;
  uint64_t v81 = v24;
  uint64_t v82 = v16;
  char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
  char v28 = (char *)v3;
  _sSny10Foundation4DateVGWOcTm_0(v3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v29 = v25;
  uint64_t v85 = v23;
  if ((v27 & 1) == 0) {
    goto LABEL_8;
  }
  static Duration.seconds(_:)();
  char v30 = static Duration.< infix(_:_:)();
  uint64_t v31 = v89;
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v15, v89, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if ((v30 & 1) == 0)
  {
    _sSny10Foundation4DateVGWOhTm_2(v31, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
LABEL_8:
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    goto LABEL_9;
  }
  char v32 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOhTm_2(v31, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v32)
  {
    uint64_t v33 = v90;
    uint64_t v16 = v82;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v91, v81, v82);
    uint64_t v34 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v91, v34, 1, v16);
  }
LABEL_9:
  uint64_t v35 = (uint64_t)v28;
  char v36 = *v28;
  if (*v28)
  {
    char v40 = v29;
    uint64_t v41 = *v29;
    uint64_t v42 = v29[1];
    Date.timeIntervalSince(_:)();
    uint64_t v43 = static Duration.seconds(_:)();
    uint64_t v37 = MEMORY[0x24C524FC0](v41, v42, v43, v44);
    uint64_t v39 = v45;
  }
  else
  {
    Date.timeIntervalSince(_:)();
    uint64_t v37 = static Duration.seconds(_:)();
    uint64_t v39 = v38;
    char v40 = v29;
  }
  uint64_t v46 = static Duration.zero.getter();
  uint64_t v48 = v47;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v37 = v46;
    uint64_t v39 = v48;
  }
  uint64_t v49 = *v40;
  uint64_t v50 = v40[1];
  char v51 = static Duration.< infix(_:_:)();
  BOOL v52 = (v51 & 1) == 0;
  if (v51) {
    uint64_t v53 = v49;
  }
  else {
    uint64_t v53 = v37;
  }
  if (v52) {
    uint64_t v54 = v39;
  }
  else {
    uint64_t v54 = v50;
  }
  if (v36) {
    uint64_t v55 = SystemFormatStyle.Timer.discreteInput(before:)(v53, v54);
  }
  else {
    uint64_t v55 = SystemFormatStyle.Timer.discreteInput(after:)(v53, v54);
  }
  uint64_t v58 = v55;
  uint64_t v89 = v56;
  char v59 = v57;
  static Duration.seconds(_:)();
  char v60 = static Duration.< infix(_:_:)();
  if (v59)
  {
    uint64_t v65 = v87;
    _sSny10Foundation4DateVGWOcTm_0(v35, v87, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v60)
    {
      char v66 = static Duration.< infix(_:_:)();
      _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v66)
      {
        Duration.components.getter();
        char v67 = v84;
        static Date.+ infix(_:_:)();
        Date.timeIntervalSinceReferenceDate.getter();
        uint64_t v16 = v82;
        Date.init(timeIntervalSinceReferenceDate:)();
        v83(v67, v16);
        uint64_t v34 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
    uint64_t v34 = 1;
    uint64_t v16 = v82;
    goto LABEL_35;
  }
  uint64_t v61 = v86;
  _sSny10Foundation4DateVGWOcTm_0(v35, v86, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if ((v60 & 1) == 0)
  {
    _sSny10Foundation4DateVGWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v63 = v88;
    _sSny10Foundation4DateVGWOcTm_0(v35, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v33 = v90;
LABEL_31:
    uint64_t v64 = v89;
    if (*v63) {
      static Duration.zero.getter();
    }
    char v69 = static Duration.< infix(_:_:)();
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v69)
    {
      uint64_t v34 = 1;
      uint64_t v16 = v82;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v91, v34, 1, v16);
    }
    goto LABEL_40;
  }
  char v62 = static Duration.< infix(_:_:)();
  _sSny10Foundation4DateVGWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v63 = v88;
  _sSny10Foundation4DateVGWOcTm_0(v35, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v33 = v90;
  if ((v62 & 1) == 0) {
    goto LABEL_31;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v64 = v89;
LABEL_40:
  uint64_t v70 = static Duration.zero.getter();
  uint64_t v72 = v71;
  uint64_t v73 = *v40;
  uint64_t v74 = v40[1];
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v73 = v58;
    uint64_t v75 = v64;
  }
  else
  {
    uint64_t v75 = v74;
  }
  char v76 = static Duration.< infix(_:_:)();
  BOOL v77 = (v76 & 1) == 0;
  if (v76) {
    uint64_t v78 = v70;
  }
  else {
    uint64_t v78 = v73;
  }
  if (v77) {
    uint64_t v79 = v75;
  }
  else {
    uint64_t v79 = v72;
  }
  SystemFormatStyle.Timer.nextInputRoundingHigher(for:)(v78, v79, v91);
  uint64_t v34 = 0;
  uint64_t v16 = v82;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v91, v34, 1, v16);
}

uint64_t SystemFormatStyle.Timer.nextInputRoundingHigher(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v8);
  uint64_t v55 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v60 = (char *)&v53 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v53 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v56 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  char v62 = (char *)&v53 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v53 - v20;
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v64 = (char *)&v53 - v24;
  char v25 = *v3;
  uint64_t v57 = v8;
  uint64_t v58 = a1;
  uint64_t v59 = a2;
  if (v25) {
    MEMORY[0x24C524FC0](*(void *)&v3[*(int *)(v8 + 24)], *(void *)&v3[*(int *)(v8 + 24) + 8], a1, a2, v23);
  }
  Duration.components.getter();
  char v26 = v64;
  Date.addingTimeInterval(_:)();
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v3, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  char v27 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v27(v21, v26, v15);
  uint64_t v61 = a3;
  if (v25)
  {
    uint64_t v54 = v15;
    if (*v14)
    {
      char v29 = (uint64_t *)&v14[*(int *)(v57 + 24)];
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      Date.timeIntervalSince(_:)();
      uint64_t v32 = static Duration.seconds(_:)();
      MEMORY[0x24C524FC0](v30, v31, v32, v33);
    }
    else
    {
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
    }
    static Duration.zero.getter();
    static Duration.< infix(_:_:)();
    static Duration.< infix(_:_:)();
    char v28 = static Duration.< infix(_:_:)();
    uint64_t v15 = v54;
  }
  else
  {
    char v28 = 0;
  }
  uint64_t v34 = *(void (**)(char *, uint64_t))(v63 + 8);
  v34(v21, v15);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v35 = (uint64_t)v4;
  char v36 = v60;
  _sSny10Foundation4DateVGWOcTm_0(v35, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v37 = v62;
  v27(v62, v64, v15);
  if (v28)
  {
    v34(v37, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v38 = v64;
LABEL_11:
    Date.timeIntervalSinceReferenceDate.getter();
    Date.init(timeIntervalSinceReferenceDate:)();
    return ((uint64_t (*)(char *, uint64_t))v34)(v38, v15);
  }
  uint64_t v53 = v34;
  char v40 = *v36;
  uint64_t v41 = v55;
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v36, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v42 = v56;
  v27(v56, v37, v15);
  if (v40)
  {
    uint64_t v45 = v53;
    v53(v42, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v45(v37, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v46 = v61;
    uint64_t v38 = v64;
  }
  else
  {
    uint64_t v54 = v15;
    uint64_t v43 = v56;
    if (*v41)
    {
      uint64_t v47 = (uint64_t *)&v41[*(int *)(v57 + 24)];
      uint64_t v48 = *v47;
      uint64_t v49 = v47[1];
      uint64_t v44 = (uint64_t)v41;
      Date.timeIntervalSince(_:)();
      uint64_t v50 = static Duration.seconds(_:)();
      MEMORY[0x24C524FC0](v48, v49, v50, v51);
    }
    else
    {
      uint64_t v44 = (uint64_t)v41;
      Date.timeIntervalSince(_:)();
      static Duration.seconds(_:)();
    }
    uint64_t v38 = v64;
    static Duration.zero.getter();
    static Duration.< infix(_:_:)();
    static Duration.< infix(_:_:)();
    char v52 = static Duration.< infix(_:_:)();
    uint64_t v34 = v53;
    uint64_t v15 = v54;
    v53(v43, v54);
    _sSny10Foundation4DateVGWOhTm_2(v44, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    v34(v62, v15);
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v46 = v61;
    if (v52) {
      goto LABEL_11;
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v46, v38, v15);
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance SystemFormatStyle.Timer()
{
  return MEMORY[0x270EEF1F8]();
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance SystemFormatStyle.Timer()
{
  return MEMORY[0x270EEF1F0]();
}

int *specialized getter of naturalRoundingIncrementIfRoundingTowardZero #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) != 1) {
    return *(int **)a1;
  }
  char v2 = static Duration.< infix(_:_:)();
  uint64_t v3 = SystemFormatStyle.Timer.increment(showingHours:showingMinutes:constrainToPrecision:)((v2 & 1) == 0, 1, 0);
  uint64_t v5 = v4;
  swift_beginAccess();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  return v3;
}

int *SystemFormatStyle.Timer.increment(showingHours:showingMinutes:constrainToPrecision:)(char a1, char a2, char a3)
{
  uint64_t result = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v8 = *(void *)(v3 + result[11]);
  uint64_t v9 = *(void *)(v3 + result[8]);
  if (v8 < 3) {
    goto LABEL_29;
  }
  BOOL v10 = __OFADD__(v9, 2);
  uint64_t v11 = v9 + 2;
  if (v10)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  BOOL v10 = __OFSUB__(v11, v8);
  uint64_t v9 = v11 - v8;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (v9 > 0)
  {
LABEL_29:
    if (a1)
    {
      BOOL v10 = __OFSUB__(v9--, 1);
      if (v10) {
        goto LABEL_26;
      }
    }
    if ((a2 & 1) != 0 || (BOOL v10 = __OFADD__(v9, 1), ++v9, !v10))
    {
LABEL_9:
      if ((unint64_t)v9 >= 3) {
        uint64_t v12 = (uint64_t *)(v3 + result[9]);
      }
      else {
        uint64_t v12 = (uint64_t *)((char *)&unk_2462176D8 + 8 * v9);
      }
      uint64_t v13 = *v12;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  if (a1) {
    uint64_t v13 = 0x28093E61EE400000;
  }
  else {
    uint64_t v13 = 0x40AAD21B3B700000;
  }
  if ((a2 & 1) == 0)
  {
    BOOL v15 = (a1 & 1) == 0;
    BOOL v10 = __OFADD__(v15, 1);
    uint64_t v9 = v15 + 1;
    if (!v10) {
      goto LABEL_9;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_13:
  if (a3)
  {
    uint64_t v14 = *(void *)(v3 + result[10]);
    if (static Duration.< infix(_:_:)()) {
      return (int *)v14;
    }
  }
  return (int *)v13;
}

uint64_t specialized getter of actuallyDashesOutFields #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *a1;
  if (v12 == 2)
  {
    char v13 = *(unsigned char *)(a2 + *(int *)(v9 + 52));
    _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    if (v13)
    {
      specialized getter of naturalRoundingIncrementIfRoundingTowardZero #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(a5);
      char v14 = static Duration.< infix(_:_:)();
    }
    else
    {
      char v14 = 0;
    }
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    swift_beginAccess();
    *a1 = v14 & 1;
  }
  else
  {
    char v14 = v12 & 1;
  }
  return v14 & 1;
}

uint64_t specialized getter of shouldShowHoursMinutesSeconds #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = *a1;
  if (v7 != 2) {
    return v7 & 1;
  }
  if (*(unsigned char *)(a2 + v4[7]) != 1)
  {
    _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    goto LABEL_13;
  }
  char v8 = static Duration.< infix(_:_:)();
  uint64_t result = _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v8)
  {
LABEL_13:
    BOOL v15 = 0;
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)&v6[v4[11]];
  uint64_t v11 = *(void *)&v6[v4[8]];
  if (v10 < 3)
  {
LABEL_10:
    BOOL v15 = v11 > 2;
LABEL_14:
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    swift_beginAccess();
    *a1 = v15;
    return v15;
  }
  BOOL v12 = __OFADD__(v11, 2);
  uint64_t v13 = v11 + 2;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    BOOL v12 = __OFSUB__(v13, v10);
    uint64_t v14 = v13 - v10;
    if (!v12)
    {
      if (v14 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v14;
      }
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized getter of shouldShowHoursMinutes #1 in SystemFormatStyle.Timer.timeStyle(for:originalPrecision:)(unsigned char *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - v16;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v28 - v19;
  int v21 = *a1;
  if (v21 == 2)
  {
    uint64_t v28 = a5;
    int v22 = *(unsigned __int8 *)(a2 + v9[7]);
    _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)&v28 - v19, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    char v23 = 0;
    if (v22 == 1 && (a3 & 1) == 0)
    {
      uint64_t v24 = *(void *)&v20[v9[11]];
      _sSny10Foundation4DateVGWOcTm_0((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v24 > 1)
      {
        char v23 = 1;
      }
      else
      {
        int v25 = v17[v9[13]];
        _sSny10Foundation4DateVGWOcTm_0((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        if (v25 == 1)
        {
          static Duration.seconds(_:)();
          char v26 = static Duration.< infix(_:_:)();
          _sSny10Foundation4DateVGWOcTm_0((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
          if (v26) {
            char v23 = static Duration.< infix(_:_:)();
          }
          else {
            char v23 = 0;
          }
          _sSny10Foundation4DateVGWOhTm_2((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        }
        else
        {
          char v23 = 0;
        }
        _sSny10Foundation4DateVGWOhTm_2((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      }
      _sSny10Foundation4DateVGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    }
    _sSny10Foundation4DateVGWOhTm_2((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    swift_beginAccess();
    *a1 = v23 & 1;
  }
  else
  {
    char v23 = v21 & 1;
  }
  return v23 & 1;
}

uint64_t SystemFormatStyle.Timer.smallestUnit.getter()
{
  uint64_t v1 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
    return 2;
  }
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
    return 1;
  }
  if (static Duration.< infix(_:_:)())
  {
    if (static Duration.< infix(_:_:)())
    {
      if (static Duration.< infix(_:_:)())
      {
        _sSny10Foundation4DateVGWOcTm_0(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        unint64_t v6 = 0;
        unint64_t v7 = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        unint64_t v6 = 0xD000000000000027;
        unint64_t v7 = 0x8000000246227090;
        v5._countAndFlagsBits = Duration.description.getter();
        String.append(_:)(v5);
        swift_bridgeObjectRelease();
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      static Duration.UnitsFormatStyle.Unit.hours.getter();
    }
    else
    {
      static Duration.UnitsFormatStyle.Unit.minutes.getter();
    }
  }
  else
  {
    static Duration.UnitsFormatStyle.Unit.seconds.getter();
  }
  return 0;
}

uint64_t getter of isJustShowingSeconds #1 in SystemFormatStyle.Timer.unitsStyle(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 2)
  {
    char v10 = v2 & 1;
    return v10 & 1;
  }
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = *(void *)(a2 + *(int *)(result + 44));
  uint64_t v7 = *(void *)(a2 + *(int *)(result + 32));
  if (v6 < 3)
  {
LABEL_6:
    if (v7 != 1)
    {
      char v10 = 0;
      goto LABEL_10;
    }
LABEL_7:
    char v10 = static Duration.< infix(_:_:)();
LABEL_10:
    swift_beginAccess();
    *uint64_t v3 = v10 & 1;
    return v10 & 1;
  }
  BOOL v8 = __OFADD__(v7, 2);
  uint64_t v9 = v7 + 2;
  if (v8)
  {
    __break(1u);
  }
  else
  {
    BOOL v8 = __OFSUB__(v9, v6);
    uint64_t v7 = v9 - v6;
    if (!v8)
    {
      if (v7 < 1) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

int *getter of subHourRoundingIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int **)(a1 + 16);
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    char v5 = getter of isJustShowingSeconds #1 in SystemFormatStyle.Timer.unitsStyle(for:)(a3, a2);
    uint64_t v3 = SystemFormatStyle.Timer.increment(showingHours:showingMinutes:constrainToPrecision:)(0, (v5 & 1) == 0, 1);
    uint64_t v7 = v6;
    swift_beginAccess();
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = 0;
  }
  return v3;
}

int *specialized getter of effectiveIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 16) != 1) {
    return *(int **)a1;
  }
  char v14 = *(unsigned char *)(a2 + *(int *)(v11 + 28));
  _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v14)
  {
    uint64_t v15 = getter of subHourRoundingIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(a5, (uint64_t)v13, a6);
    MEMORY[0x24C524FC0](0x28093E61EE400000, 195, v15, v16);
    char v17 = static Duration.< infix(_:_:)() ^ 1;
  }
  else
  {
    char v17 = 0;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v18 = SystemFormatStyle.Timer.increment(showingHours:showingMinutes:constrainToPrecision:)(v17 & 1, 1, 1);
  uint64_t v20 = v19;
  swift_beginAccess();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 16) = 0;
  return v18;
}

void specialized getter of isShowingMinutesAndSecondsOrMore #1 in SystemFormatStyle.Timer.unitsStyle(for:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 != 2) {
    return;
  }
  uint64_t v18 = *(void *)(a2 + *(int *)(v15 + 44));
  uint64_t v19 = *(void *)(a2 + *(int *)(v15 + 32));
  if (v18 > 2)
  {
    uint64_t v20 = v19 + 2;
    if (__OFADD__(v19, 2))
    {
      __break(1u);
    }
    else
    {
      BOOL v21 = __OFSUB__(v20, v18);
      uint64_t v22 = v20 - v18;
      if (!v21)
      {
        if (v22 <= 1) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v22;
        }
        goto LABEL_8;
      }
    }
    __break(1u);
    return;
  }
LABEL_8:
  _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v19 >= 2)
  {
    specialized getter of effectiveIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(a3, (uint64_t)v17, a4, a5, a6, a7);
    char v23 = static Duration.< infix(_:_:)() ^ 1;
  }
  else
  {
    char v23 = 0;
  }
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  swift_beginAccess();
  *a1 = v23 & 1;
}

void specialized getter of isJustNotShowingHour #1 in SystemFormatStyle.Timer.unitsStyle(for:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 2)
  {
    uint64_t v14 = *(void *)(a2 + *(int *)(v11 + 44));
    uint64_t v15 = *(void *)(a2 + *(int *)(v11 + 32));
    if (v14 <= 2)
    {
LABEL_6:
      if (v15 >= 2)
      {
        char v18 = static Duration.< infix(_:_:)();
        _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        if (v18)
        {
          uint64_t v19 = getter of subHourRoundingIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(a5, (uint64_t)v13, a6);
          MEMORY[0x24C524FC0](0x28093E61EE400000, 195, v19, v20);
          char v21 = static Duration.< infix(_:_:)();
LABEL_12:
          _sSny10Foundation4DateVGWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
          swift_beginAccess();
          *a1 = v21 & 1;
          return;
        }
LABEL_11:
        char v21 = 0;
        goto LABEL_12;
      }
LABEL_7:
      _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      goto LABEL_11;
    }
    BOOL v16 = __OFADD__(v15, 2);
    uint64_t v17 = v15 + 2;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      BOOL v16 = __OFSUB__(v17, v14);
      uint64_t v15 = v17 - v14;
      if (!v16)
      {
        if (v15 < 1) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    __break(1u);
  }
}

void specialized getter of isJustNotShowingMinute #1 in SystemFormatStyle.Timer.unitsStyle(for:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 2)
  {
    uint64_t v14 = *(void *)(a2 + *(int *)(v11 + 44));
    uint64_t v15 = *(void *)(a2 + *(int *)(v11 + 32));
    if (v14 <= 2)
    {
LABEL_6:
      if (v15 != 1)
      {
        _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        goto LABEL_11;
      }
LABEL_7:
      char v18 = static Duration.< infix(_:_:)();
      _sSny10Foundation4DateVGWOcTm_0(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
      if (v18)
      {
        uint64_t v19 = getter of subHourRoundingIncrement #1 in SystemFormatStyle.Timer.unitsStyle(for:)(a5, (uint64_t)v13, a6);
        MEMORY[0x24C524FC0](0x40AAD21B3B700000, 3, v19, v20);
        char v21 = static Duration.< infix(_:_:)();
LABEL_12:
        _sSny10Foundation4DateVGWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
        swift_beginAccess();
        *a1 = v21 & 1;
        return;
      }
LABEL_11:
      char v21 = 0;
      goto LABEL_12;
    }
    BOOL v16 = __OFADD__(v15, 2);
    uint64_t v17 = v15 + 2;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      BOOL v16 = __OFSUB__(v17, v14);
      uint64_t v15 = v17 - v14;
      if (!v16)
      {
        if (v15 <= 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    __break(1u);
  }
}

unint64_t SystemFormatStyle.Timer.unitsToShow(greaterOrEqualTo:duration:rounding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v53 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v53);
  uint64_t v61 = (uint64_t)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v47 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v47 - v13;
  uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v48 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v59 = (char *)v47 - v19;
  MEMORY[0x270FA5388](v20);
  char v52 = (char *)v47 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v47 - v23;
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, MEMORY[0x263F07EC8], MEMORY[0x263F8E0F8]);
  unint64_t v25 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v50 = *(void *)(v16 + 72);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_2461B9DC0;
  uint64_t v60 = v26;
  unint64_t v49 = v25;
  uint64_t v58 = *(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 16);
  v58(v26 + v25, a1, v15);
  static Duration.UnitsFormatStyle.Unit.seconds.getter();
  uint64_t v64 = a1;
  LOBYTE(a1) = static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
  uint64_t v51 = v16;
  uint64_t v65 = *(void (**)(char *, uint64_t))(v16 + 8);
  v65(v24, v15);
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v56(v14, v66, v6);
  if (a1)
  {
    v47[1] = v16 + 16;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v11, *MEMORY[0x263F8E200], v6);
    char v27 = static FloatingPointRoundingRule.== infix(_:_:)();
    _OWORD v47[2] = v7;
    uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v11, v6);
    uint64_t v57 = v28;
    if (v27)
    {
      char v29 = static Duration.< infix(_:_:)();
      uint64_t v30 = v6;
      v28(v14, v6);
      if ((v29 & 1) == 0)
      {
LABEL_4:
        uint64_t v6 = v30;
        unint64_t v31 = v60;
        goto LABEL_10;
      }
    }
    else
    {
      char v32 = static Duration.< infix(_:_:)();
      uint64_t v30 = v6;
      v28(v14, v6);
      if (v32) {
        goto LABEL_4;
      }
    }
    static Duration.UnitsFormatStyle.Unit.minutes.getter();
    uint64_t v33 = v60;
    unint64_t v35 = *(void *)(v60 + 16);
    unint64_t v34 = *(void *)(v60 + 24);
    if (v35 >= v34 >> 1) {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v60);
    }
    uint64_t v6 = v30;
    unint64_t v31 = v33;
    *(void *)(v33 + 16) = v35 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v33 + v49 + v35 * v50, v52, v15);
  }
  else
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v7 + 8);
    v57(v14, v6);
    unint64_t v31 = v60;
  }
LABEL_10:
  v67[0] = 2;
  static Duration.UnitsFormatStyle.Unit.hours.getter();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  uint64_t v36 = v64;
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v65(v24, v15);
  uint64_t v38 = v61;
  _sSny10Foundation4DateVGWOcTm_0(v62, v61, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  if (v37)
  {
    _sSny10Foundation4DateVGWOhTm_2(v38, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v39 = (uint64_t)v63;
    v56(v63, v66, v6);
    uint64_t v40 = (uint64_t)v59;
    v58((unint64_t)v59, v36, v15);
LABEL_17:
    v65((char *)v40, v15);
    v57((char *)v39, v6);
    return v31;
  }
  int v41 = *(unsigned __int8 *)(v38 + *(int *)(v53 + 28));
  _sSny10Foundation4DateVGWOhTm_2(v38, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v39 = (uint64_t)v63;
  v56(v63, v66, v6);
  uint64_t v40 = (uint64_t)v59;
  v58((unint64_t)v59, v36, v15);
  if (v41 != 1) {
    goto LABEL_17;
  }
  char v42 = specialized getter of durationAllowsShowingHour #1 in SystemFormatStyle.Timer.unitsToShow(greaterOrEqualTo:duration:rounding:)(v67, v39, v54, v55, v40);
  v65((char *)v40, v15);
  v57((char *)v39, v6);
  if (v42)
  {
    uint64_t v43 = v48;
    static Duration.UnitsFormatStyle.Unit.hours.getter();
    unint64_t v45 = *(void *)(v31 + 16);
    unint64_t v44 = *(void *)(v31 + 24);
    if (v45 >= v44 >> 1) {
      unint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v31);
    }
    *(void *)(v31 + 16) = v45 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v31 + v49 + v45 * v50, v43, v15);
  }
  return v31;
}

uint64_t specialized getter of durationAllowsShowingHour #1 in SystemFormatStyle.Timer.unitsToShow(greaterOrEqualTo:duration:rounding:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v20[2] = a4;
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *a1;
  if (v16 == 2)
  {
    v20[1] = a5;
    (*(void (**)(char *, void, uint64_t, double))(v12 + 104))(v15, *MEMORY[0x263F8E200], v11, v13);
    char v17 = static FloatingPointRoundingRule.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    if (v17)
    {
      static Duration.UnitsFormatStyle.Unit.seconds.getter();
      static Duration.UnitsFormatStyle.Unit.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      char v18 = static Duration.< infix(_:_:)();
    }
    else
    {
      char v18 = static Duration.< infix(_:_:)() ^ 1;
    }
    swift_beginAccess();
    *a1 = v18 & 1;
  }
  else
  {
    char v18 = v16 & 1;
  }
  return v18 & 1;
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance SystemFormatStyle.Timer@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _sSny10Foundation4DateVGWOcTm_0(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v5 = static Duration.seconds(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t result = static Duration.< infix(_:_:)();
  if (result) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v9;
  }
  if (result) {
    uint64_t v13 = v7;
  }
  else {
    uint64_t v13 = v10;
  }
  uint64_t v14 = (uint64_t *)(a2 + *(int *)(a1 + 40));
  *uint64_t v14 = v12;
  v14[1] = v13;
  return result;
}

void SystemFormatStyle.Timer.contentTransition<A>(for:)(uint64_t a1@<X8>)
{
  int v3 = *v1;
  if (v3 == 2)
  {
    uint64_t v4 = 0x302000000;
    uint64_t v5 = 0x8000000001;
  }
  else
  {
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    unsigned int v6 = static Semantics.v6;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504) {
      unsigned __int8 v7 = dyld_program_minos_at_least();
    }
    else {
      unsigned __int8 v7 = dword_26B0F4500 >= v6;
    }
    uint64_t v5 = (v3 ^ v7) & 1 | 0x1202024000000000;
    uint64_t v4 = 0x302132033;
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 12) = BYTE4(v4);
  *(_WORD *)(a1 + 13) = 0;
}

uint64_t static SystemFormatStyle.Timer.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v85 = a4;
  uint64_t v86 = a1;
  uint64_t v8 = type metadata accessor for DateInterval();
  MEMORY[0x270FA5388](v8 - 8);
  char v83 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for Date();
  uint64_t v84 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v82 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v73 = (char *)&v71 - v12;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage?();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v80 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v15);
  char v76 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  uint64_t v79 = v17;
  uint64_t v78 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v74 = (uint64_t)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v75 = (uint64_t)&v71 - v20;
  uint64_t v21 = type metadata accessor for Locale();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  char v27 = (char *)&v71 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v71 - v29;
  unint64_t v31 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v34 = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  if ((int)a2 > 1)
  {
    uint64_t v89 = a3;
    uint64_t v90 = v31;
    uint64_t v91 = v85;
    uint64_t v92 = v34;
    uint64_t v93 = &protocol witness table for AttributedString;
    uint64_t v57 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v57;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(boxed_opaque_existential_1, v86, v57);
  }
  uint64_t v72 = a5;
  uint64_t v71 = a3;
  uint64_t v89 = a3;
  uint64_t v90 = v31;
  uint64_t v91 = v85;
  uint64_t v92 = v34;
  uint64_t v93 = &protocol witness table for AttributedString;
  uint64_t v35 = type metadata accessor for TimeDataFormatting.Resolvable();
  _sSny10Foundation4DateVGWOcTm_0(v86 + *(int *)(v35 + 60), (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  long long v88 = 0uLL;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v36 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  char v37 = static CoreGlue2.shared;
  v36(&v88);

  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v38(v30, &v33[v31[12]], v21);
  v38(v27, v30, v21);
  uint64_t v39 = v88;
  v38(v24, v27, v21);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v88, (uint64_t)v24);
  swift_release();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v22 + 8);
  v40(v24, v21);
  if (*((void *)&v88 + 1))
  {
    uint64_t v41 = v88;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v39, v41);
    swift_release();
    swift_release();
  }
  swift_release();
  v40(v27, v21);
  v40(v30, v21);
  if (v33[v31[7]]) {
    uint64_t v42 = 32;
  }
  else {
    uint64_t v42 = 0;
  }
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    v42 |= 0x40uLL;
  }
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    v42 |= 0x80uLL;
  }
  static Duration.seconds(_:)();
  if ((static Duration.< infix(_:_:)() & 1) == 0) {
    v42 |= 0x8000uLL;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v86, v71);
  uint64_t v43 = (uint64_t)v80;
  uint64_t v44 = v79;
  char v45 = swift_dynamicCast();
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
  if (v45)
  {
    v46(v43, 0, 1, v44);
    uint64_t v47 = v75;
    outlined init with take of TimeDataSource<Date><A>.DateStorage(v43, v75);
    uint64_t v48 = v74;
    outlined init with copy of TimeDataSource<Date><A>.DateStorage(v47, v74);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v48, 1, v49);
    uint64_t v51 = v72;
    char v52 = v82;
    uint64_t v53 = (uint64_t)v83;
    uint64_t v54 = v81;
    if (v50 == 1)
    {
      outlined destroy of TimeDataSource<Date><A>.DateStorage(v47);
      outlined destroy of TimeDataSource<Date><A>.DateStorage(v48);
      uint64_t v55 = 0;
      int v56 = 1;
    }
    else
    {
      uint64_t v60 = v84;
      uint64_t v61 = v48;
      uint64_t v62 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v73, v61, v81);
      if (*v33)
      {
        Duration.components.getter();
        static Date.+ infix(_:_:)();
        Date.timeIntervalSince(_:)();
        uint64_t v64 = v65;
        uint64_t v66 = *(void (**)(char *, uint64_t))(v60 + 8);
        v66(v52, v54);
        v66(v73, v54);
      }
      else
      {
        Date.timeIntervalSince(_:)();
        uint64_t v64 = v63;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v54);
      }
      outlined destroy of TimeDataSource<Date><A>.DateStorage(v75);
      int v56 = 0;
      uint64_t v55 = v64;
    }
  }
  else
  {
    int v56 = 1;
    v46(v43, 1, 1, v44);
    _sSny10Foundation4DateVGWOhTm_2(v43, (uint64_t (*)(void))type metadata accessor for TimeDataSource<Date><A>.DateStorage?);
    uint64_t v55 = 0;
    uint64_t v51 = v72;
    char v52 = v82;
    uint64_t v53 = (uint64_t)v83;
    uint64_t v54 = v81;
  }
  (*(void (**)(char *, unsigned char *, uint64_t))(v84 + 16))(v52, &v33[v31[5]], v54);
  Duration.components.getter();
  DateInterval.init(start:duration:)();
  int v67 = *v33;
  if (v67 != 2)
  {
    int v68 = v67 & 1;
    if (v42 != 224) {
      goto LABEL_26;
    }
LABEL_28:
    uint64_t v42 = 0;
    int v69 = 1;
    goto LABEL_29;
  }
  int v68 = 0;
  if (v42 == 224) {
    goto LABEL_28;
  }
LABEL_26:
  int v69 = 0;
LABEL_29:
  long long v87 = v88;
  v51[3] = type metadata accessor for ResolvableTimer();
  v51[4] = (uint64_t)&protocol witness table for ResolvableTimer;
  uint64_t v70 = __swift_allocate_boxed_opaque_existential_1(v51);
  ResolvableTimer.init(interval:pause:countdown:units:in:)(v53, v55, v56, v68, v42, v69, (uint64_t *)&v87, (uint64_t)v70);
  return _sSny10Foundation4DateVGWOhTm_2((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t protocol witness for InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:) in conformance SystemFormatStyle.Timer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 8);
  _sSny10Foundation4DateVGWOcTm_0(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>, (uint64_t)&type metadata for ComplicationInterfaceIdiom, (uint64_t)&protocol witness table for ComplicationInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
  uint64_t result = (*(uint64_t (**)(void))(v6 + 8))();
  *(unsigned char *)(a3 + *(int *)(a2 + 52)) = (result & 1) == 0;
  return result;
}

uint64_t SystemFormatStyle.Timer.precisionTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v94 = a1;
  type metadata accessor for (lower: Date, upper: Date)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date), MEMORY[0x263F07490]);
  uint64_t v96 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v91 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v90 = (char *)&v85 - v6;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v92 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v85 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v89 = (uint64_t)&v85 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v95 = (void (*)(char *, uint64_t, uint64_t))((char *)&v85 - v20);
  int v21 = *v1;
  uint64_t v93 = v9;
  if (v21 == 2)
  {
    uint64_t v22 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t v24 = MEMORY[0x24C524FC0](0x40AAD21B3B700000, 3, v22, v23);
    uint64_t v26 = v25;
    uint64_t v27 = v2 + *(int *)(type metadata accessor for SystemFormatStyle.Timer() + 20);
    uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v95(v16, v27, v10);
    SystemFormatStyle.Timer.nextInputRoundingLower(for:)(v24, v26, (uint64_t)v13);
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v29 = v96;
      uint64_t v30 = *(int *)(v96 + 48);
      uint64_t v89 = v2;
      unint64_t v31 = v90;
      uint64_t v32 = &v90[v30];
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v33(v90, v16, v10);
      uint64_t v34 = v11;
      uint64_t v35 = v32;
      v33(v32, v13, v10);
      uint64_t v36 = *(int *)(v29 + 48);
      char v37 = (void (*)(char *, char *, uint64_t))v95;
      uint64_t v38 = v91;
      uint64_t v39 = &v91[v36];
      v95(v91, (uint64_t)v31, v10);
      v37(v39, v35, v10);
      uint64_t v40 = (uint64_t)v93;
      v33(v93, v38, v10);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v34 + 8);
      v41(v39, v10);
      uint64_t v42 = &v38[*(int *)(v96 + 48)];
      v33(v38, v31, v10);
      v33(v42, v35, v10);
      v33((char *)(v40 + *(int *)(v92 + 36)), v42, v10);
      v41(v38, v10);
      uint64_t v43 = v94;
      outlined init with take of Range<AttributedString.Index>(v40, v94, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      type metadata accessor for TimeDataFormatting.FormatTransition<Date>();
      return SystemFormatStyle.Timer.nextInputRoundingHigher(for:)(0x40AAD21B3B700000, 3, v43 + *(int *)(v44 + 60));
    }
    __break(1u);
  }
  else
  {
    long long v88 = v16;
    uint64_t v86 = v11;
    uint64_t v45 = static Duration.zero.getter();
    uint64_t v47 = v46;
    uint64_t v87 = type metadata accessor for SystemFormatStyle.Timer();
    uint64_t v48 = (uint64_t *)(v2 + *(int *)(v87 + 24));
    uint64_t v49 = *v48;
    uint64_t v50 = v48[1];
    if (v21)
    {
      uint64_t v53 = 3;
      uint64_t v51 = 0x40AAD21B3B700000;
    }
    else
    {
      uint64_t v51 = MEMORY[0x24C524FC0](*v48, v48[1], 0x40AAD21B3B700000, 3);
      uint64_t v53 = v52;
    }
    uint64_t v54 = 0x32CA1B67940C0000;
    if ((static Duration.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v51 = v49;
      uint64_t v53 = v50;
    }
    char v55 = static Duration.< infix(_:_:)();
    BOOL v56 = (v55 & 1) == 0;
    if (v55) {
      uint64_t v57 = v45;
    }
    else {
      uint64_t v57 = v51;
    }
    if (v56) {
      uint64_t v58 = v53;
    }
    else {
      uint64_t v58 = v47;
    }
    SystemFormatStyle.Timer.nextInputRoundingHigher(for:)(v57, v58, (uint64_t)v95);
    uint64_t v59 = static Duration.zero.getter();
    uint64_t v61 = v60;
    if (v21)
    {
      uint64_t v63 = 3;
    }
    else
    {
      uint64_t v54 = MEMORY[0x24C524FC0](v49, v50, 0x32CA1B67940C0000, 3);
      uint64_t v63 = v62;
    }
    char v64 = static Duration.< infix(_:_:)();
    if (v64) {
      uint64_t v65 = v54;
    }
    else {
      uint64_t v65 = v49;
    }
    if ((v64 & 1) == 0) {
      uint64_t v63 = v50;
    }
    char v66 = static Duration.< infix(_:_:)();
    BOOL v67 = (v66 & 1) == 0;
    if (v66) {
      uint64_t v68 = v59;
    }
    else {
      uint64_t v68 = v65;
    }
    if (v67) {
      uint64_t v69 = v63;
    }
    else {
      uint64_t v69 = v61;
    }
    uint64_t v70 = v89;
    SystemFormatStyle.Timer.nextInputRoundingHigher(for:)(v68, v69, v89);
    Duration.components.getter();
    uint64_t v71 = v88;
    static Date.+ infix(_:_:)();
    lazy protocol witness table accessor for type Date and conformance Date();
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if (result)
    {
      uint64_t v72 = v96;
      uint64_t v73 = v90;
      uint64_t v74 = &v90[*(int *)(v96 + 48)];
      uint64_t v75 = v86;
      char v76 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 32);
      v76(v90, v70, v10);
      uint64_t v87 = (uint64_t)v74;
      v76(v74, (uint64_t)v71, v10);
      uint64_t v77 = v91;
      uint64_t v78 = &v91[*(int *)(v72 + 48)];
      uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
      v79(v91, v73, v10);
      v79(v78, v74, v10);
      uint64_t v80 = (uint64_t)v93;
      v76(v93, (uint64_t)v77, v10);
      uint64_t v81 = *(void (**)(char *, uint64_t))(v75 + 8);
      v81(v78, v10);
      uint64_t v82 = &v77[*(int *)(v96 + 48)];
      v76(v77, (uint64_t)v73, v10);
      v76(v82, v87, v10);
      v76((char *)(v80 + *(int *)(v92 + 36)), (uint64_t)v82, v10);
      v81(v77, v10);
      uint64_t v83 = v94;
      outlined init with take of Range<AttributedString.Index>(v80, v94, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      type metadata accessor for TimeDataFormatting.FormatTransition<Date>();
      return ((uint64_t (*)(uint64_t, void, uint64_t))v76)(v83 + *(int *)(v84 + 60), v95, v10);
    }
  }
  __break(1u);
  return result;
}

uint64_t SystemFormatStyle.Timer.textAlignment(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _sSny10Foundation4DateVGWOcTm_0(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  *(unsigned char *)(a2 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t protocol witness for TextAlignmentDependentFormatStyle.textAlignment(_:) in conformance SystemFormatStyle.Timer@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = _sSny10Foundation4DateVGWOcTm_0(v3, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  *(unsigned char *)(a3 + *(int *)(a2 + 64)) = a1;
  return result;
}

uint64_t SystemFormatStyle.Timer.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v3 + *(int *)(v6 + 60);
  MEMORY[0x24C520B20](v11);
  LOBYTE(v14) = MEMORY[0x24C520B10](v14, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0) {
    return _sSny10Foundation4DateVGWOcTm_0(v3, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  _sSny10Foundation4DateVGWOcTm_0(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 24))(&v8[*(int *)(v6 + 60)], a1, v9);
  return outlined init with take of Range<AttributedString.Index>((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance SystemFormatStyle.Timer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v8 = a2 - 8;
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v5 + *(int *)(v8 + 68);
  MEMORY[0x24C520B20](v13);
  LOBYTE(v16) = MEMORY[0x24C520B10](v16, v15);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0) {
    return _sSny10Foundation4DateVGWOcTm_0(v5, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  _sSny10Foundation4DateVGWOcTm_0(v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 24))(&v10[*(int *)(a2 + 60)], a1, v11);
  return outlined init with take of Range<AttributedString.Index>((uint64_t)v10, a3, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t SystemFormatStyle.Timer.makePlatformAttributes(resolver:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for AttributeContainer.Builder<AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, MEMORY[0x263F068A8]);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)v32 - v5;
  uint64_t v6 = type metadata accessor for AttributeContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v34 = (char *)v32 - v11;
  uint64_t v12 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v13 = v12[18];
  uint64_t v14 = one-time initialization token for attributes;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v6, (uint64_t)static AdjustedColonEffect.attributes);
  uint64_t v16 = PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)(v15, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + v13) = v16;
  uint64_t v17 = a1;
  uint64_t v18 = v12[17];
  uint64_t v19 = one-time initialization token for attributes;
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = __swift_project_value_buffer(v6, (uint64_t)static MonospacedDigitEffect.attributes);
  v32[1] = v17;
  uint64_t v21 = PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)(v20, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + v18) = v21;
  uint64_t v22 = v12[19];
  uint64_t v23 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x270FA5388](KeyPath);
  v32[-2] = v25;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute();
  swift_bridgeObjectRetain();
  uint64_t v26 = v33;
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  v27(v9, v6);
  uint64_t v28 = (uint64_t)v34;
  uint64_t v29 = v36;
  AttributeContainer.Builder.callAsFunction(_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v29);
  uint64_t v30 = PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)(v28, 0);
  v27((char *)v28, v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v22) = v30;
  return result;
}

uint64_t CodableAttributeEffect.makePlatformAttributes(resolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AttributeContainer();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(*(void *)(a2 + 24) + 8))(v7);
  uint64_t v10 = PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)((uint64_t)v9, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v10;
  return result;
}

uint64_t CodableAttributeEffect.wrappedValue.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for CodableAttributeEffect.wrappedValue : <A>CodableAttributeEffect<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return CodableAttributeEffect.wrappedValue.setter(&v2);
}

uint64_t CodableAttributeEffect.wrappedValue.setter(void *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*CodableAttributeEffect.wrappedValue.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return CodableAttributeEffect.wrappedValue.modify;
}

uint64_t CodableAttributeEffect.wrappedValue.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
  }
  return result;
}

void CodableAttributeEffect.hash(into:)()
{
  if (*v0)
  {
    Hasher._combine(_:)(1u);
    CodableNSAttributes.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t CodableAttributeEffect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7475626972747461 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableAttributeEffect<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CodableAttributeEffect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableAttributeEffect<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableAttributeEffect<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t CodableAttributeEffect.encode(to:)(void *a1)
{
  type metadata accessor for CodableAttributeEffect.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v13 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  _OWORD v13[3] = v7;
  lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v11);
}

Swift::Int CodableAttributeEffect.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t CodableAttributeEffect.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = a2;
  type metadata accessor for CodableAttributeEffect.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v11;
    lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *uint64_t v8 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAttributeEffect<A>@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return CodableAttributeEffect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAttributeEffect<A>(void *a1)
{
  return CodableAttributeEffect.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodableAttributeEffect<A>()
{
  return Hasher._finalize()();
}

uint64_t one-time initialization function for attributes()
{
  uint64_t v0 = type metadata accessor for AttributeContainer();
  __swift_allocate_value_buffer(v0, static MonospacedDigitEffect.attributes);
  __swift_project_value_buffer(v0, (uint64_t)static MonospacedDigitEffect.attributes);
  AttributeContainer.init()();
  return specialized AttributeContainer.addFontModifier<A>(_:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for AttributeContainer();
  __swift_allocate_value_buffer(v0, static AdjustedColonEffect.attributes);
  __swift_project_value_buffer(v0, (uint64_t)static AdjustedColonEffect.attributes);
  AttributeContainer.init()();
  return specialized AttributeContainer.addFontModifier<A>(_:)(2);
}

uint64_t protocol witness for static AttributeEffect.attributes.getter in conformance MonospacedDigitEffect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static AttributeEffect.attributes.getter in conformance MonospacedDigitEffect(&one-time initialization token for attributes, (uint64_t)static MonospacedDigitEffect.attributes, a1);
}

uint64_t protocol witness for static AttributeEffect.apply(attributes:to:locale:) in conformance MonospacedDigitEffect()
{
  uint64_t v0 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v1 = *(void *)(v0 - 8);
  double v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v1 + 104))(v4, *MEMORY[0x263F06728], v0, v2);
  AttributedString.mergeAttributes(_:mergePolicy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t protocol witness for static AttributeEffect.attributes.getter in conformance AdjustedColonEffect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static AttributeEffect.attributes.getter in conformance MonospacedDigitEffect(&one-time initialization token for attributes, (uint64_t)static AdjustedColonEffect.attributes, a1);
}

uint64_t protocol witness for static AttributeEffect.attributes.getter in conformance MonospacedDigitEffect@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for AttributeContainer();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t specialized static SuperscriptEffect.apply(attributes:to:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v78 = a1;
  uint64_t v79 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  char v76 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (lower: Date, upper: Date)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), MEMORY[0x263F067E8]);
  uint64_t v95 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v94 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v93 = (char *)&v73 - v6;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v96 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
  uint64_t v98 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v101 = (uint64_t)&v73 - v11;
  type metadata accessor for Slice<AttributedString.CharacterView>(0);
  uint64_t v97 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v92 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v80 = (uint64_t)&v73 - v15;
  _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
  uint64_t v75 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v81 = (uint64_t)&v73 - v17;
  uint64_t v18 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v99 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v86 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v73 - v21;
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v100 = (char *)&v73 - v24;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v91 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v90 = (uint64_t)&v73 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v73 - v32;
  uint64_t result = Locale.decimalSeparator.getter();
  if (v35)
  {
    uint64_t v36 = result;
    uint64_t v37 = v35;
    AttributedString.characters.getter();
    v102[0] = v36;
    v102[1] = v37;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v38 = (uint64_t)v100;
    BidirectionalCollection<>.firstRange<A>(of:)();
    uint64_t v99 = *(void *)(v99 + 8);
    ((void (*)(char *, uint64_t))v99)(v22, v18);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v38, 1, v26) == 1)
    {
      return outlined destroy of Range<AttributedString.Index>?(v38, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>);
    }
    else
    {
      outlined init with take of Range<AttributedString.Index>(v38, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      uint64_t v39 = &v33[*(int *)(v26 + 36)];
      uint64_t v89 = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result)
      {
        uint64_t v88 = v26;
        uint64_t v74 = v33;
        uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
        uint64_t v40 = v8 + 16;
        uint64_t v42 = v81;
        v41(v81, v39, v7);
        uint64_t v43 = v86;
        AttributedString.characters.getter();
        uint64_t v44 = v80;
        uint64_t v45 = v42;
        uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v41;
        specialized Collection.subscript.getter(v45, v80);
        uint64_t v86 = (char *)v18;
        ((void (*)(char *, uint64_t))v99)(v43, v18);
        uint64_t v47 = v101;
        _sSny10Foundation4DateVGWOcTm_0(v44, v101, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
        uint64_t v99 = v47 + *((int *)v98 + 9);
        ((void (*)(void))v41)();
        uint64_t v48 = v47 + *(int *)(v97 + 36);
        uint64_t v100 = (char *)(v40 - 8);
        uint64_t v83 = (void (**)(char *, char *, uint64_t))(v40 + 16);
        uint64_t v87 = v40;
        uint64_t v85 = v41;
        uint64_t v84 = v48;
        while (1)
        {
          uint64_t v49 = v96;
          v46(v96, v99, v7);
          char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v51 = *(void (**)(char *, uint64_t))v100;
          (*(void (**)(char *, uint64_t))v100)(v49, v7);
          if (v50) {
            break;
          }
          uint64_t v52 = v95;
          uint64_t v53 = v93;
          uint64_t v54 = &v93[*(int *)(v95 + 48)];
          v46(v93, v101, v7);
          uint64_t v98 = v54;
          v46(v54, v48, v7);
          char v55 = v94;
          BOOL v56 = &v94[*(int *)(v52 + 48)];
          v46(v94, (uint64_t)v53, v7);
          v46(v56, (uint64_t)v54, v7);
          uint64_t v57 = *v83;
          uint64_t v58 = v91;
          (*v83)(v91, v55, v7);
          v51(v56, v7);
          uint64_t v59 = &v55[*(int *)(v52 + 48)];
          v57(v55, v53, v7);
          v57(v59, v98, v7);
          v57(&v58[*(int *)(v88 + 36)], v59, v7);
          v51(v55, v7);
          uint64_t v60 = (uint64_t)v58;
          uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v85;
          uint64_t v61 = v90;
          outlined init with take of Range<AttributedString.Index>(v60, v90, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          uint64_t v62 = v101;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
          _sSny10Foundation4DateVGWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          uint64_t v63 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          swift_bridgeObjectRetain();
          v63(v102, 0);
          uint64_t v64 = v62;
          uint64_t v65 = v92;
          _sSny10Foundation4DateVGWOcTm_0(v64, v92, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
          uint64_t v48 = v84;
          dispatch thunk of Collection.formIndex(after:)();
          _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
          LOBYTE(v59) = Character.isNumber.getter();
          swift_bridgeObjectRelease();
          if ((v59 & 1) == 0)
          {
            outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v101, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
            _sSny10Foundation4DateVGWOhTm_2(v80, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
            outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v81, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
            uint64_t v66 = (uint64_t)v74;
            return _sSny10Foundation4DateVGWOhTm_2(v66, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          }
        }
        outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v101, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
        _sSny10Foundation4DateVGWOhTm_2(v80, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
        uint64_t v67 = v77;
        uint64_t v68 = v76;
        uint64_t v69 = v79;
        (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, *MEMORY[0x263F06728], v79);
        lazy protocol witness table accessor for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>();
        uint64_t v70 = v81;
        uint64_t v71 = (void (*)(void *, void))AttributedString.subscript.modify();
        AttributedSubstring.mergeAttributes(_:mergePolicy:)();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
        v71(v102, 0);
        _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        uint64_t v72 = (uint64_t)v74;
        AttributedString.removeSubrange<A>(_:)();
        outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v70, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
        uint64_t v66 = v72;
        return _sSny10Foundation4DateVGWOhTm_2(v66, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t static SuperscriptEffect.apply(attributes:to:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v78 = a1;
  uint64_t v79 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v77 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  char v76 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (lower: Date, upper: Date)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), MEMORY[0x263F067E8]);
  uint64_t v95 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v94 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v93 = (char *)&v73 - v6;
  uint64_t v7 = type metadata accessor for AttributedString.Index();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v96 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
  uint64_t v98 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v101 = (uint64_t)&v73 - v11;
  type metadata accessor for Slice<AttributedString.CharacterView>(0);
  uint64_t v97 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v92 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v80 = (uint64_t)&v73 - v15;
  _sSny10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
  uint64_t v75 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v81 = (uint64_t)&v73 - v17;
  uint64_t v18 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v99 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v86 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v73 - v21;
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v100 = (char *)&v73 - v24;
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v91 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  uint64_t v90 = (uint64_t)&v73 - v30;
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v73 - v32;
  uint64_t result = Locale.decimalSeparator.getter();
  if (v35)
  {
    uint64_t v36 = result;
    uint64_t v37 = v35;
    AttributedString.characters.getter();
    v102[0] = v36;
    v102[1] = v37;
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v38 = (uint64_t)v100;
    BidirectionalCollection<>.firstRange<A>(of:)();
    uint64_t v99 = *(void *)(v99 + 8);
    ((void (*)(char *, uint64_t))v99)(v22, v18);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v38, 1, v26) == 1)
    {
      return outlined destroy of Range<AttributedString.Index>?(v38, &lazy cache variable for type metadata for Range<AttributedString.Index>?, (uint64_t (*)(uint64_t))type metadata accessor for Range<AttributedString.Index>);
    }
    else
    {
      outlined init with take of Range<AttributedString.Index>(v38, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      uint64_t v39 = &v33[*(int *)(v26 + 36)];
      uint64_t v89 = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result)
      {
        uint64_t v88 = v26;
        uint64_t v74 = v33;
        uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
        uint64_t v40 = v8 + 16;
        uint64_t v42 = v81;
        v41(v81, v39, v7);
        uint64_t v43 = v86;
        AttributedString.characters.getter();
        uint64_t v44 = v80;
        uint64_t v45 = v42;
        uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v41;
        specialized Collection.subscript.getter(v45, v80);
        uint64_t v86 = (char *)v18;
        ((void (*)(char *, uint64_t))v99)(v43, v18);
        uint64_t v47 = v101;
        _sSny10Foundation4DateVGWOcTm_0(v44, v101, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
        uint64_t v99 = v47 + *((int *)v98 + 9);
        ((void (*)(void))v41)();
        uint64_t v48 = v47 + *(int *)(v97 + 36);
        uint64_t v100 = (char *)(v40 - 8);
        uint64_t v83 = (void (**)(char *, char *, uint64_t))(v40 + 16);
        uint64_t v87 = v40;
        uint64_t v85 = v41;
        uint64_t v84 = v48;
        while (1)
        {
          uint64_t v49 = v96;
          v46(v96, v99, v7);
          char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v51 = *(void (**)(char *, uint64_t))v100;
          (*(void (**)(char *, uint64_t))v100)(v49, v7);
          if (v50) {
            break;
          }
          uint64_t v52 = v95;
          uint64_t v53 = v93;
          uint64_t v54 = &v93[*(int *)(v95 + 48)];
          v46(v93, v101, v7);
          uint64_t v98 = v54;
          v46(v54, v48, v7);
          char v55 = v94;
          BOOL v56 = &v94[*(int *)(v52 + 48)];
          v46(v94, (uint64_t)v53, v7);
          v46(v56, (uint64_t)v54, v7);
          uint64_t v57 = *v83;
          uint64_t v58 = v91;
          (*v83)(v91, v55, v7);
          v51(v56, v7);
          uint64_t v59 = &v55[*(int *)(v52 + 48)];
          v57(v55, v53, v7);
          v57(v59, v98, v7);
          v57(&v58[*(int *)(v88 + 36)], v59, v7);
          v51(v55, v7);
          uint64_t v60 = (uint64_t)v58;
          uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v85;
          uint64_t v61 = v90;
          outlined init with take of Range<AttributedString.Index>(v60, v90, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          uint64_t v62 = v101;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
          _sSny10Foundation4DateVGWOhTm_2(v61, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          uint64_t v63 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          swift_bridgeObjectRetain();
          v63(v102, 0);
          uint64_t v64 = v62;
          uint64_t v65 = v92;
          _sSny10Foundation4DateVGWOcTm_0(v64, v92, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
          uint64_t v48 = v84;
          dispatch thunk of Collection.formIndex(after:)();
          _sSny10Foundation4DateVGWOhTm_2(v65, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
          LOBYTE(v59) = Character.isNumber.getter();
          swift_bridgeObjectRelease();
          if ((v59 & 1) == 0)
          {
            outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v101, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
            _sSny10Foundation4DateVGWOhTm_2(v80, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
            outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v81, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
            uint64_t v66 = (uint64_t)v74;
            return _sSny10Foundation4DateVGWOhTm_2(v66, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
          }
        }
        outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v101, &lazy cache variable for type metadata for IndexingIterator<Slice<AttributedString.CharacterView>>, (uint64_t (*)(uint64_t))type metadata accessor for Slice<AttributedString.CharacterView>, lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>, MEMORY[0x263F8DE58]);
        _sSny10Foundation4DateVGWOhTm_2(v80, (uint64_t (*)(void))type metadata accessor for Slice<AttributedString.CharacterView>);
        uint64_t v67 = v77;
        uint64_t v68 = v76;
        uint64_t v69 = v79;
        (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, *MEMORY[0x263F06728], v79);
        lazy protocol witness table accessor for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>();
        uint64_t v70 = v81;
        uint64_t v71 = (void (*)(void *, void))AttributedString.subscript.modify();
        AttributedSubstring.mergeAttributes(_:mergePolicy:)();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v69);
        v71(v102, 0);
        _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
        uint64_t v72 = (uint64_t)v74;
        AttributedString.removeSubrange<A>(_:)();
        outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(v70, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
        uint64_t v66 = v72;
        return _sSny10Foundation4DateVGWOhTm_2(v66, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t static SuperscriptEffect.attributes.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for AttributeContainer.Builder<AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.SuperscriptAttribute, MEMORY[0x263F068A8]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = type metadata accessor for AttributeContainer();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 8))(a1, a2, v11);
  v15[0] = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  AttributeContainer.Builder.callAsFunction(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t protocol witness for static AttributeEffect.attributes.getter in conformance SuperscriptEffect<A>(uint64_t a1)
{
  return static SuperscriptEffect.attributes.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for static AttributeEffect.apply(attributes:to:locale:) in conformance SuperscriptEffect<A>(uint64_t a1, uint64_t a2)
{
  return static SuperscriptEffect.apply(attributes:to:locale:)(a1, a2);
}

BOOL specialized static SystemFormatStyle.Timer.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    BOOL v7 = (v4 & 1) == 0;
    if (v5 == 2 || ((v7 ^ v5) & 1) == 0) {
      return result;
    }
  }
  uint64_t v8 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  if ((static Date.== infix(_:_:)() & 1) == 0
    || (static Duration.== infix(_:_:)() & 1) == 0
    || a1[v8[7]] != a2[v8[7]]
    || *(void *)&a1[v8[8]] != *(void *)&a2[v8[8]]
    || (static Duration.== infix(_:_:)() & 1) == 0
    || (static Duration.== infix(_:_:)() & 1) == 0
    || *(void *)&a1[v8[11]] != *(void *)&a2[v8[11]]
    || (MEMORY[0x24C5218A0](&a1[v8[12]], &a2[v8[12]]) & 1) == 0
    || a1[v8[13]] != a2[v8[13]]
    || a1[v8[14]] != a2[v8[14]]
    || (MEMORY[0x24C520B10](&a1[v8[15]], &a2[v8[15]]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v9 = v8[16];
  int v10 = a1[v9];
  int v11 = a2[v9];
  if (v10 == 3)
  {
    if (v11 != 3) {
      return 0;
    }
LABEL_22:
    uint64_t v12 = v8[17];
    uint64_t v13 = *(void *)&a2[v12];
    if (*(void *)&a1[v12])
    {
      uint64_t v23 = *(void *)&a1[v12];
      if (!v13)
      {
        swift_bridgeObjectRetain_n();
LABEL_45:
        swift_bridgeObjectRelease_n();
        return 0;
      }
      uint64_t v22 = v13;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v14 = specialized static CodableNSAttributes.== infix(_:_:)(&v23, &v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v13) {
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v8[18];
    uint64_t v16 = *(void *)&a2[v15];
    if (*(void *)&a1[v15])
    {
      uint64_t v23 = *(void *)&a1[v15];
      if (!v16)
      {
LABEL_44:
        swift_bridgeObjectRetain_n();
        goto LABEL_45;
      }
      uint64_t v22 = v16;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v17 = specialized static CodableNSAttributes.== infix(_:_:)(&v23, &v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v16) {
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v8[19];
    uint64_t v19 = *(void *)&a1[v18];
    uint64_t v20 = *(void *)&a2[v18];
    if (!v19)
    {
      if (!v20)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      goto LABEL_45;
    }
    uint64_t v23 = v19;
    if (v20)
    {
      uint64_t v22 = v20;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v21 = specialized static CodableNSAttributes.== infix(_:_:)(&v23, &v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return (v21 & 1) != 0;
    }
    goto LABEL_44;
  }
  BOOL result = 0;
  if (v11 != 3 && v10 == v11) {
    goto LABEL_22;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CodingKeys and conformance SystemFormatStyle.Timer.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode and conformance SystemFormatStyle.Timer.CountingMode);
  }
  return result;
}

void _sSny10Foundation4DateVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TextAlignment?()
{
  if (!lazy cache variable for type metadata for TextAlignment?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextAlignment?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TextAlignment? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAlignment? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TextAlignment? and conformance <A> A?)
  {
    type metadata accessor for TextAlignment?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAlignment? and conformance <A> A?);
  }
  return result;
}

uint64_t type metadata accessor for CodableAttributeEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type CodableAttributeEffect<AdjustedColonEffect> and conformance CodableAttributeEffect<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(255, &lazy cache variable for type metadata for CodableAttributeEffect<AdjustedColonEffect>, (uint64_t)&unk_26FA5D718, (uint64_t)&protocol witness table for AdjustedColonEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>()
{
  if (!lazy cache variable for type metadata for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>)
  {
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(255, &lazy cache variable for type metadata for SuperscriptEffect<MonospacedDigitEffect>, (uint64_t)&unk_26FA645D8, (uint64_t)&protocol witness table for MonospacedDigitEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SuperscriptEffect);
    unint64_t v0 = type metadata accessor for CodableAttributeEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAttributeEffect<SuperscriptEffect<MonospacedDigitEffect>>);
    }
  }
}

uint64_t type metadata accessor for SuperscriptEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type ProxyCodable<TextAlignment?> and conformance ProxyCodable<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSny10Foundation4DateVGMaTm_0(255, &lazy cache variable for type metadata for ProxyCodable<TextAlignment?>, (uint64_t (*)(uint64_t))type metadata accessor for TextAlignment?, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAlignment? and conformance <A> A?, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ProxyCodable);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CodableAttributeEffect<MonospacedDigitEffect> and conformance CodableAttributeEffect<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(255, &lazy cache variable for type metadata for CodableAttributeEffect<MonospacedDigitEffect>, (uint64_t)&unk_26FA645D8, (uint64_t)&protocol witness table for MonospacedDigitEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CodableAttributeEffect);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TimeDataSource<Date><A>.DateStorage?()
{
  if (!lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage?)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage?);
    }
  }
}

uint64_t outlined init with take of Range<AttributedString.Index>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for TimeDataFormatting.FormatTransition<Date>()
{
  if (!lazy cache variable for type metadata for TimeDataFormatting.FormatTransition<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date();
    unint64_t v0 = (void (*)(uint64_t))MEMORY[0x263F07490];
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, v0);
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, v0);
    unint64_t v1 = type metadata accessor for TimeDataFormatting.FormatTransition();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for TimeDataFormatting.FormatTransition<Date>);
    }
  }
}

void sub_24614E890()
{
}

uint64_t sub_24614E8B8()
{
  return 8;
}

uint64_t sub_24614E8C4()
{
  return swift_release();
}

uint64_t sub_24614E8CC(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_24614E8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_24614E918(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.SuperscriptAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void *sub_24614E940(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for CodableAttributeEffect.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Decodable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Encodable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Hashable in SystemFormatStyle.Timer()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t base witness table accessor for Equatable in CodableAttributeEffect<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_24614EC74@<X0>(void *a1@<X8>)
{
  return CodableAttributeEffect.wrappedValue.getter(a1);
}

uint64_t sub_24614ECAC()
{
  return 16;
}

__n128 sub_24614ECB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for SystemFormatStyle.Timer(unsigned char *a1, void *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    void *v4 = *a2;
    int v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    *(_OWORD *)((char *)v4 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
    *((unsigned char *)v4 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *(_OWORD *)((char *)v4 + v12) = *(_OWORD *)((char *)a2 + v12);
    uint64_t v13 = a3[11];
    *(_OWORD *)((char *)v4 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[12];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[14];
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *((unsigned char *)v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[15];
    uint64_t v20 = (char *)v4 + v19;
    char v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = a3[17];
    *((unsigned char *)v4 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    *(void *)((char *)v4 + v23) = *(void *)((char *)a2 + v23);
    uint64_t v24 = a3[19];
    *(void *)((char *)v4 + a3[18]) = *(void *)((char *)a2 + a3[18]);
    *(void *)((char *)v4 + v24) = *(void *)((char *)a2 + v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SystemFormatStyle.Timer(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[15];
  uint64_t v9 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for SystemFormatStyle.Timer(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[12];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[15];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  uint64_t v23 = a3[19];
  *(void *)&a1[a3[18]] = *(void *)&a2[a3[18]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for SystemFormatStyle.Timer(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  a1[a3[7]] = a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v13 = a3[9];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  uint64_t v16 = a3[10];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  uint64_t v19 = a3[12];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  a1[a3[13]] = a2[a3[13]];
  a1[a3[14]] = a2[a3[14]];
  uint64_t v23 = a3[15];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 24))(v24, v25, v26);
  a1[a3[16]] = a2[a3[16]];
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[18]] = *(void *)&a2[a3[18]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[19]] = *(void *)&a2[a3[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for SystemFormatStyle.Timer(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[12];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[15];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  uint64_t v22 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  uint64_t v23 = a3[19];
  *(void *)&a1[a3[18]] = *(void *)&a2[a3[18]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  return a1;
}

unsigned char *assignWithTake for SystemFormatStyle.Timer(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[12];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  uint64_t v17 = a3[14];
  a1[a3[13]] = a2[a3[13]];
  a1[v17] = a2[v17];
  uint64_t v18 = a3[15];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  uint64_t v22 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  *(void *)&a1[v22] = *(void *)&a2[v22];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[18]] = *(void *)&a2[a3[18]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[19]] = *(void *)&a2[a3[19]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.Timer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24614F6E4);
}

uint64_t sub_24614F6E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[12];
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for FormatStyleCapitalizationContext();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[15];
    goto LABEL_7;
  }
  unint64_t v14 = *(void *)(a1 + a3[17]);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.Timer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24614F860);
}

uint64_t sub_24614F860(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for Locale();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[12];
    }
    else
    {
      uint64_t result = type metadata accessor for FormatStyleCapitalizationContext();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[17]) = a2;
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[15];
    }
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v14(a1 + v11, a2, a2, v9);
}

uint64_t type metadata completion function for SystemFormatStyle.Timer()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for FormatStyleCapitalizationContext();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t dispatch thunk of static AttributeEffect.attributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static AttributeEffect.apply(attributes:to:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

void *initializeBufferWithCopyOfBuffer for CodableAttributeEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CodableAttributeEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CodableAttributeEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for AdjustedColonEffect()
{
  return &unk_26FA5D718;
}

void *type metadata accessor for MonospacedDigitEffect()
{
  return &unk_26FA645D8;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.Timer.CountingMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24614FCB4);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SystemFormatStyle.Timer.CountingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x24614FD9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemFormatStyle.Timer.CountingMode()
{
  return &type metadata for SystemFormatStyle.Timer.CountingMode;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.Timer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemFormatStyle.Timer.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *uint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24614FF30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemFormatStyle.Timer.CodingKeys()
{
  return &unk_26FA58598;
}

uint64_t base witness table accessor for Equatable in CodableAttributeEffect<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in CodableAttributeEffect<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in CodableAttributeEffect<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized static AdjustedColonEffect.apply(attributes:to:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v88 = type metadata accessor for AttributedString.AttributeMergePolicy();
  uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v87 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (lower: Date, upper: Date)(0, (unint64_t *)&lazy cache variable for type metadata for (lower: AttributedString.Index, upper: AttributedString.Index), MEMORY[0x263F067E8]);
  uint64_t v86 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v85 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v84 = (char *)&v74 - v7;
  type metadata accessor for ClosedRange<AttributedString.Index>(0);
  uint64_t v83 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v82 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v81 = (uint64_t)&v74 - v11;
  type metadata accessor for [AttributedString.InterpolationOptions](0, &lazy cache variable for type metadata for AttributedString.Index?, MEMORY[0x263F067E8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v106 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for AttributedString.Index();
  uint64_t v100 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v102 = (char *)&v74 - v18;
  type metadata accessor for DefaultIndices<AttributedString.CharacterView>(0);
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v95 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v74 - v27;
  type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>(0);
  uint64_t v99 = (void (*)(char *, uint64_t))(v29 - 8);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v98 = (char *)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v31);
  uint64_t v33 = (char *)&v74 - v32;
  uint64_t v103 = a2;
  AttributedString.characters.getter();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v22, v28, v23);
  uint64_t v105 = &v22[*(int *)(v20 + 44)];
  uint64_t v34 = lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v97 = v34;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v96 = v24 + 8;
  uint64_t v94 = v35;
  v35(v28, v23);
  uint64_t v36 = (uint64_t)v98;
  _sSny10Foundation4DateVGWOcTm_0((uint64_t)v22, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v37 = v100;
  uint64_t v38 = v102;
  uint64_t v39 = v105;
  uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  uint64_t v105 = (char *)(v100 + 16);
  v104(v102, v39, v14);
  _sSny10Foundation4DateVGWOhTm_2((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
  uint64_t v40 = v99;
  uint64_t v41 = v36 + *((int *)v99 + 11);
  uint64_t v42 = v36;
  uint64_t v43 = v37;
  uint64_t v101 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v102 = (char *)(v37 + 32);
  v101(v41, v38, v14);
  outlined init with take of Range<AttributedString.Index>(v42, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>);
  uint64_t v44 = &v33[*((int *)v40 + 11)];
  uint64_t v45 = *(int *)(v20 + 48);
  uint64_t v98 = v33;
  uint64_t v46 = &v33[v45];
  uint64_t v92 = _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  uint64_t v93 = v46;
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v91 = (unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    uint64_t v100 = v43 + 8;
    unsigned int v76 = *MEMORY[0x263F06728];
    uint64_t v75 = (void (**)(char *, void, uint64_t))((char *)v90 + 104);
    uint64_t v74 = (void (**)(char *, uint64_t))((char *)v90 + 8);
    uint64_t v80 = v16;
    uint64_t v79 = v23;
    uint64_t v78 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56);
    uint64_t v77 = v44;
    while (1)
    {
      uint64_t v48 = v106;
      v104(v106, v44, v14);
      dispatch thunk of Collection.formIndex(after:)();
      uint64_t v49 = *v47;
      (*v47)(v48, 0, 1, v14);
      if ((*v91)(v48, 1, v14) == 1) {
        return _sSny10Foundation4DateVGWOhTm_2((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>);
      }
      uint64_t v90 = v49;
      v101((uint64_t)v16, v106, v14);
      char v50 = v95;
      AttributedString.characters.getter();
      uint64_t v51 = AttributedString.CharacterView.subscript.getter();
      uint64_t v53 = v52;
      v94(v50, v23);
      if (v51 == 58 && v53 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))v100)(v16, v14);
          goto LABEL_5;
        }
      }
      lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v56 = v86;
      uint64_t v57 = v84;
      uint64_t v58 = &v84[*(int *)(v86 + 48)];
      uint64_t v59 = v104;
      v104(v84, v16, v14);
      v59(v58, v16, v14);
      uint64_t v60 = v85;
      uint64_t v61 = &v85[*(int *)(v56 + 48)];
      v59(v85, v57, v14);
      v59(v61, v58, v14);
      uint64_t v62 = v82;
      uint64_t v63 = (void (*)(char *, char *, uint64_t))v101;
      v101((uint64_t)v82, v60, v14);
      uint64_t v99 = *(void (**)(char *, uint64_t))v100;
      v99(v61, v14);
      uint64_t v64 = &v60[*(int *)(v56 + 48)];
      uint64_t v65 = v57;
      uint64_t v44 = v77;
      v63(v60, v65, v14);
      v63(v64, v58, v14);
      v63(&v62[*(int *)(v83 + 36)], v64, v14);
      uint64_t v66 = v99;
      v99(v60, v14);
      uint64_t v67 = (uint64_t)v62;
      uint64_t v68 = v81;
      outlined init with take of Range<AttributedString.Index>(v67, v81, (uint64_t (*)(void))type metadata accessor for ClosedRange<AttributedString.Index>);
      _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type ClosedRange<AttributedString.Index> and conformance ClosedRange<A>, type metadata accessor for ClosedRange<AttributedString.Index>);
      uint64_t v69 = (void (*)(char *, void))AttributedString.subscript.modify();
      uint64_t v70 = v87;
      uint64_t v71 = v88;
      (*v75)(v87, v76, v88);
      AttributedSubstring.mergeAttributes(_:mergePolicy:)();
      uint64_t v72 = v70;
      uint64_t v47 = v78;
      uint64_t v73 = v71;
      uint64_t v23 = v79;
      (*v74)(v72, v73);
      v69(v107, 0);
      uint64_t v16 = v80;
      _sSny10Foundation4DateVGWOhTm_2(v68, (uint64_t (*)(void))type metadata accessor for ClosedRange<AttributedString.Index>);
      v66(v16, v14);
LABEL_5:
      if (dispatch thunk of static Equatable.== infix(_:_:)())
      {
        v90(v106, 1, 1, v14);
        return _sSny10Foundation4DateVGWOhTm_2((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>);
      }
    }
  }
  (*v47)(v106, 1, 1, v14);
  return _sSny10Foundation4DateVGWOhTm_2((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>);
}

uint64_t specialized SystemFormatStyle.Timer.CountingMode.init(from:)(void *a1)
{
  int v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.Timer.CountingMode.TimerCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys, (uint64_t)&unk_26FA58628, MEMORY[0x263F8E040]);
  uint64_t v34 = v3;
  uint64_t v30 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v33 = (char *)&v28 - v4;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys, (uint64_t)&unk_26FA58748, v2);
  uint64_t v6 = v5;
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v28 - v7;
  type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<SystemFormatStyle.Timer.CountingMode.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys, (uint64_t)&unk_26FA586B8, v2);
  uint64_t v10 = v9;
  uint64_t v31 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys();
  uint64_t v14 = (uint64_t)v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v29 = v6;
  uint64_t v16 = v32;
  uint64_t v15 = v33;
  uint64_t v17 = v34;
  uint64_t v35 = a1;
  uint64_t v18 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v18 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    _sypXmT_s13DecodingErrorO7ContextVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (@thick Any.Type, DecodingError.Context), (void (*)(uint64_t))type metadata accessor for @thick Any.Type, MEMORY[0x263F8DCC8]);
    *uint64_t v25 = &type metadata for SystemFormatStyle.Timer.CountingMode;
    uint64_t v13 = (uint64_t)v12;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x263F8DCB0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
    a1 = v35;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v13;
  }
  if (*(unsigned char *)(v18 + 32))
  {
    char v37 = 1;
    lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys();
    uint64_t v19 = v15;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v17;
    char v21 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v31;
    char v27 = v21;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v20);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
    uint64_t v13 = v27 & 1;
  }
  else
  {
    char v36 = 0;
    lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v10);
    uint64_t v13 = 2;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return v13;
}

uint64_t specialized SystemFormatStyle.Timer.CountingMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x63746177706F7473 && a2 == 0xE900000000000068;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656D6974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized SystemFormatStyle.Timer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E69746E756F63 && a2 == 0xEC00000065646F4DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F4873776F6873 && a2 == 0xEA00000000007372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646C65694678616DLL && a2 == 0xED0000746E756F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696365725078616DLL && a2 == 0xEC0000006E6F6973 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x69726156657A6973 && a2 == 0xEB00000000746E61 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000246226FD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x506F4E6563726F66 && a2 == 0xEE00676E69646461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024621A8D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x67696C4174786574 && a2 == 0xED0000746E656D6ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000246226FF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x64657473756A6461 && a2 == 0xED00006E6F6C6F43 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x7263737265707573 && a2 == 0xEB00000000747069)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 15;
    }
    else {
      return 16;
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.TimerCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.TimerCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys and conformance SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys;
  if (!lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemFormatStyle.Timer.CountingMode.CodingKeys and conformance SystemFormatStyle.Timer.CountingMode.CodingKeys);
  }
  return result;
}

void type metadata accessor for (lower: Date, upper: Date)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for [AttributedString.InterpolationOptions](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for IndexingIterator<DefaultIndices<AttributedString.CharacterView>>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.CharacterView> and conformance DefaultIndices<A>()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type DefaultIndices<AttributedString.CharacterView> and conformance DefaultIndices<A>, type metadata accessor for DefaultIndices<AttributedString.CharacterView>);
}

void type metadata accessor for Slice<AttributedString.CharacterView>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type Slice<AttributedString.CharacterView> and conformance Slice<A>()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type Slice<AttributedString.CharacterView> and conformance Slice<A>, type metadata accessor for Slice<AttributedString.CharacterView>);
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>)
  {
    _sSny10Foundation4DateVGMaTm_0(255, &lazy cache variable for type metadata for PartialRangeFrom<AttributedString.Index>, MEMORY[0x263F067E8], lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F8DE70]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<AttributedString.Index> and conformance PartialRangeFrom<A>);
  }
  return result;
}

uint64_t outlined destroy of IndexingIterator<Slice<AttributedString.CharacterView>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  _sSny10Foundation4DateVGMaTm_0(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for KeyPath();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_246151D48()
{
  return 8;
}

void type metadata accessor for KeyedEncodingContainer<SystemFormatStyle.Timer.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?)()
{
  if (!lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?))
  {
    type metadata accessor for Duration.UnitsFormatStyle.Attributed();
    type metadata accessor for ClosedRange<Duration>?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: Duration.UnitsFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?));
    }
  }
}

void type metadata accessor for ClosedRange<Duration>?()
{
  if (!lazy cache variable for type metadata for ClosedRange<Duration>?)
  {
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(255, &lazy cache variable for type metadata for ClosedRange<Duration>, MEMORY[0x263F8ED48], MEMORY[0x263F8ED58], MEMORY[0x263F8D1A0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Duration>?);
    }
  }
}

void _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA012ComplicationcD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _sypXmT_s13DecodingErrorO7ContextVtMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool)()
{
  if (!lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for ClosedRange<Duration>?();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (style: Duration.TimeFormatStyle.Attributed, applicableRange: ClosedRange<Duration>?, showsSubseconds: Bool));
    }
  }
}

void type metadata accessor for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool)()
{
  if (!lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool))
  {
    type metadata accessor for Duration.TimeFormatStyle.Attributed();
    type metadata accessor for ClosedRange<Duration>?();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Duration.TimeFormatStyle.Attributed, ClosedRange<Duration>?, Bool));
    }
  }
}

uint64_t outlined destroy of Range<AttributedString.Index>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for [AttributedString.InterpolationOptions](0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_2461520EC()
{
  return swift_deallocObject();
}

uint64_t sub_2461520FC()
{
  return swift_deallocObject();
}

uint64_t _sSny10Foundation4DateVGWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [AttributedString.InterpolationOptions] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A])
  {
    type metadata accessor for [AttributedString.InterpolationOptions](255, &lazy cache variable for type metadata for [AttributedString.InterpolationOptions], MEMORY[0x263F06730], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AttributedString.InterpolationOptions] and conformance [A]);
  }
  return result;
}

uint64_t sub_2461521F4@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.accessibility.getter();
  uint64_t result = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  *a1 = result;
  return result;
}

void sub_246152224()
{
}

uint64_t sub_246152240()
{
  return MEMORY[0x263F06520];
}

void sub_24615224C()
{
}

uint64_t sub_24615226C()
{
  return 8;
}

uint64_t sub_246152278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>, MEMORY[0x263F06670]) & 1;
}

uint64_t sub_2461522B8(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LanguageIdentifierAttribute>, MEMORY[0x263F06670]);
}

unsigned char *storeEnumTagSinglePayload for SystemFormatStyle.Timer.CountingMode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2461523ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SystemFormatStyle.Timer.CountingMode.CodingKeys()
{
  return &unk_26FA586B8;
}

void *type metadata accessor for SystemFormatStyle.Timer.CountingMode.StopwatchCodingKeys()
{
  return &unk_26FA58748;
}

unsigned char *storeEnumTagSinglePayload for CodableAttributeEffect.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246152490);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SystemFormatStyle.Timer.CountingMode.TimerCodingKeys()
{
  return &unk_26FA58628;
}

uint64_t static FormatStyle<>.stopwatch(startingAt:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Date();
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))(v15, a1, v13);
  return SystemFormatStyle.Stopwatch.init(startingAt:showsHours:maxFieldCount:maxPrecision:)((uint64_t)v15, a2, a3, a4, a5, a6);
}

uint64_t SystemFormatStyle.Stopwatch.init(startingAt:showsHours:maxFieldCount:maxPrecision:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v58 = a3;
  uint64_t v59 = a6;
  int v64 = a2;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v67 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v53 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (void (*)(char *, uint64_t))((char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Range<Date>();
  uint64_t v61 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v60 = (uint64_t)&v53 - v21;
  uint64_t v22 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.distantFuture.getter();
  _s10Foundation4DateVACSLAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  uint64_t v68 = a1;
  uint64_t v57 = v16;
  uint64_t v25 = v13;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v65 = v19;
    char v27 = (int *)v22;
    uint64_t v28 = v67;
    uint64_t v29 = &v12[*(int *)(v67 + 48)];
    uint64_t v30 = v14;
    uint64_t v31 = v14;
    uint64_t v32 = v12;
    uint64_t v55 = v30;
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    uint64_t v53 = v12;
    v66(v12, v68, v25);
    uint64_t v56 = v31 + 16;
    uint64_t v33 = *(void (**)(char *, void (*)(void, void), uint64_t))(v30 + 32);
    char v54 = v29;
    v33(v29, (void (*)(void, void))v57, v25);
    uint64_t v34 = &v9[*(int *)(v28 + 48)];
    uint64_t v35 = v32;
    char v36 = (void (*)(char *, char *, uint64_t))v66;
    v66(v9, (uint64_t)v35, v25);
    v36(v34, v29, v25);
    v33(v65, (void (*)(void, void))v9, v25);
    uint64_t v57 = *(void (**)(char *, uint64_t))(v55 + 8);
    v57(v34, v25);
    char v37 = &v9[*(int *)(v67 + 48)];
    uint64_t v38 = v25;
    v33(v9, (void (*)(void, void))v53, v25);
    v33(v37, (void (*)(void, void))v54, v25);
    uint64_t v39 = (uint64_t)v65;
    v33(&v65[*(int *)(v61 + 36)], (void (*)(void, void))v37, v38);
    uint64_t v40 = v9;
    uint64_t v41 = (void (*)(uint64_t, uint64_t))v57;
    v57(v40, v38);
    uint64_t v42 = v39;
    uint64_t v43 = v60;
    _sSny10Foundation4DateVGWObTm_0(v42, v60, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    *(void *)&v24[v27[11]] = 0;
    uint64_t v44 = static Locale.autoupdatingCurrent.getter();
    v24[v27[13]] = 1;
    v24[v27[14]] = 0;
    MEMORY[0x24C520B20](v44);
    v24[v27[16]] = 3;
    *(void *)&v24[v27[17]] = 0;
    *(void *)&v24[v27[18]] = 0;
    *(void *)&v24[v27[19]] = 0;
    uint64_t v45 = v62;
    uint64_t v46 = v63;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v45 = 0x28093E61EE400000;
      uint64_t v46 = 195;
    }
    unsigned char *v24 = 2;
    v66(&v24[v27[5]], v43, v38);
    Date.timeIntervalSince(_:)();
    uint64_t v47 = static Duration.seconds(_:)();
    uint64_t v49 = v48;
    _sSny10Foundation4DateVGWOhTm_3(v43, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    char v50 = (uint64_t *)&v24[v27[6]];
    uint64_t *v50 = v47;
    v50[1] = v49;
    v24[v27[7]] = v64 & 1;
    *(void *)&v24[v27[8]] = v58;
    uint64_t v51 = (uint64_t *)&v24[v27[9]];
    uint64_t *v51 = v45;
    v51[1] = v46;
    uint64_t v52 = (uint64_t *)&v24[v27[10]];
    *uint64_t v52 = v45;
    v52[1] = v46;
    v41(v68, v38);
    return _sSny10Foundation4DateVGWObTm_0((uint64_t)v24, v59, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SystemFormatStyle.Stopwatch.locale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v9 = &v8[*(int *)(v6 + 56)];
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v9, a1, v10);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  return _sSny10Foundation4DateVGWObTm_0((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t type metadata accessor for SystemFormatStyle.Stopwatch()
{
  uint64_t result = type metadata singleton initialization cache for SystemFormatStyle.Stopwatch;
  if (!type metadata singleton initialization cache for SystemFormatStyle.Stopwatch) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int SystemFormatStyle.Stopwatch.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance SystemFormatStyle.Stopwatch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v9 = &v8[*(int *)(v6 + 56)];
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v9, a1, v10);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  return _sSny10Foundation4DateVGWObTm_0((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SystemFormatStyle.Stopwatch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  SystemFormatStyle.Timer.init(from:)(v10, (uint64_t)v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    return _sSny10Foundation4DateVGWObTm_0((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  return result;
}

uint64_t SystemFormatStyle.Stopwatch.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  SystemFormatStyle.Timer.init(from:)(v10, (uint64_t)v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v2) {
    return _sSny10Foundation4DateVGWObTm_0((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  return result;
}

uint64_t SystemFormatStyle.Stopwatch.encode(to:)(void *a1)
{
  return SystemFormatStyle.Timer.encode(to:)(a1);
}

uint64_t static SystemFormatStyle.Stopwatch.representation<A>(of:for:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v48 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v47 = (char *)&v46 - v12;
  uint64_t v13 = type metadata accessor for DateInterval();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v51 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v53 = (char *)&v46 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v46 - v22;
  uint64_t v24 = type metadata accessor for SystemFormatStyle.Stopwatch();
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a2) = *a2;
  uint64_t v27 = _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
  if ((int)a2 > 1)
  {
    uint64_t v56 = a3;
    uint64_t v57 = v24;
    uint64_t v58 = a4;
    uint64_t v59 = v27;
    uint64_t v60 = &protocol witness table for AttributedString;
    uint64_t v44 = type metadata accessor for TimeDataFormatting.Resolvable();
    a5[3] = v44;
    a5[4] = (uint64_t)&protocol witness table for TimeDataFormatting.Resolvable<A, B>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(boxed_opaque_existential_1, v52, v44);
  }
  else
  {
    uint64_t v46 = a5;
    uint64_t v56 = a3;
    uint64_t v57 = v24;
    uint64_t v58 = a4;
    uint64_t v59 = v27;
    uint64_t v60 = &protocol witness table for AttributedString;
    uint64_t v28 = type metadata accessor for TimeDataFormatting.Resolvable();
    outlined init with copy of SystemFormatStyle.Stopwatch(v52 + *(int *)(v28 + 60), (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
    long long v55 = 0uLL;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v29 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v30 = static CoreGlue2.shared;
    v29(&v55);

    uint64_t v31 = (int *)type metadata accessor for SystemFormatStyle.Timer();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v32(v23, &v26[v31[12]], v15);
    uint64_t v33 = v53;
    v32(v53, v23, v15);
    uint64_t v34 = v55;
    v32(v18, v33, v15);
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v55, (uint64_t)v18);
    swift_release();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v16 + 8);
    v35(v18, v15);
    if (*((void *)&v55 + 1))
    {
      uint64_t v36 = v55;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v34, v36);
      swift_release();
      swift_release();
    }
    swift_release();
    v35(v53, v15);
    v35(v23, v15);
    if (v26[v31[7]]) {
      uint64_t v37 = 32;
    }
    else {
      uint64_t v37 = 0;
    }
    if ((static Duration.< infix(_:_:)() & 1) == 0) {
      v37 |= 0x40uLL;
    }
    if ((static Duration.< infix(_:_:)() & 1) == 0) {
      v37 |= 0x80uLL;
    }
    static Duration.seconds(_:)();
    if (static Duration.< infix(_:_:)()) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = v37 | 0x8000;
    }
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, &v26[v31[5]], v50);
    static Date.distantFuture.getter();
    uint64_t v39 = (uint64_t)v51;
    DateInterval.init(start:end:)();
    long long v54 = v55;
    uint64_t v40 = type metadata accessor for ResolvableTimer();
    uint64_t v41 = v46;
    v46[3] = v40;
    v41[4] = (uint64_t)&protocol witness table for ResolvableTimer;
    uint64_t v42 = __swift_allocate_boxed_opaque_existential_1(v41);
    ResolvableTimer.init(interval:pause:countdown:units:in:)(v39, 0, 1, 0, v38, 0, (uint64_t *)&v54, (uint64_t)v42);
    return _sSny10Foundation4DateVGWOhTm_3((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  }
}

uint64_t SystemFormatStyle.Stopwatch.updateFrequency(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v8 = static Duration.seconds(_:)();
  uint64_t v10 = v9;
  uint64_t v11 = (uint64_t *)(v2 + *(int *)(v5 + 44));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = static Duration.< infix(_:_:)();
  if (v14) {
    uint64_t v15 = v8;
  }
  else {
    uint64_t v15 = v12;
  }
  if (v14) {
    uint64_t v16 = v10;
  }
  else {
    uint64_t v16 = v13;
  }
  uint64_t v17 = &v7[*(int *)(v5 + 48)];
  *(void *)uint64_t v17 = v15;
  *((void *)v17 + 1) = v16;
  return outlined assign with take of SystemFormatStyle.Timer((uint64_t)v7, a1);
}

uint64_t protocol witness for UpdateFrequencyDependentFormatStyle.updateFrequency(_:) in conformance SystemFormatStyle.Stopwatch@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v8 = static Duration.seconds(_:)();
  uint64_t v10 = v9;
  uint64_t v11 = (uint64_t *)(v2 + *(int *)(v5 + 44));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  char v14 = static Duration.< infix(_:_:)();
  if (v14) {
    uint64_t v15 = v8;
  }
  else {
    uint64_t v15 = v12;
  }
  if (v14) {
    uint64_t v16 = v10;
  }
  else {
    uint64_t v16 = v13;
  }
  uint64_t v17 = &v7[*(int *)(v5 + 48)];
  *(void *)uint64_t v17 = v15;
  *((void *)v17 + 1) = v16;
  return outlined assign with take of SystemFormatStyle.Timer((uint64_t)v7, a1);
}

uint64_t SystemFormatStyle.Stopwatch.interfaceIdiom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 8);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>();
  v8[*(int *)(v6 + 60)] = ((*(uint64_t (**)(void))(v9 + 8))() & 1) == 0;
  return _sSny10Foundation4DateVGWObTm_0((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t protocol witness for InterfaceIdiomDependentFormatStyle.interfaceIdiom(_:) in conformance SystemFormatStyle.Stopwatch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v6 = v5 - 8;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 8);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>();
  v8[*(int *)(v6 + 60)] = ((*(uint64_t (**)(void))(v9 + 8))() & 1) == 0;
  return _sSny10Foundation4DateVGWObTm_0((uint64_t)v8, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

uint64_t SystemFormatStyle.Stopwatch.textAlignment(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  *(unsigned char *)(a2 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t protocol witness for TextAlignmentDependentFormatStyle.textAlignment(_:) in conformance SystemFormatStyle.Stopwatch@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  _sSny10Foundation4DateVGWOhTm_3(a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  outlined init with copy of SystemFormatStyle.Stopwatch(v2, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  *(unsigned char *)(a2 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t SystemFormatStyle.Stopwatch.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = outlined init with copy of SystemFormatStyle.Stopwatch(v3, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  uint64_t v17 = v3 + *(int *)(v10 + 60);
  MEMORY[0x24C520B20](v16);
  LOBYTE(v17) = MEMORY[0x24C520B10](v17, v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v17)
  {
    outlined init with copy of SystemFormatStyle.Stopwatch(v3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 24))(&v12[*(int *)(v10 + 60)], a1, v6);
    _sSny10Foundation4DateVGWObTm_0((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    outlined init with copy of SystemFormatStyle.Stopwatch(v3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  return outlined assign with take of SystemFormatStyle.Timer((uint64_t)v15, a2);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance SystemFormatStyle.Stopwatch@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v16 = outlined init with copy of SystemFormatStyle.Stopwatch(v3, a2, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Stopwatch);
  uint64_t v17 = v3 + *(int *)(v10 + 60);
  MEMORY[0x24C520B20](v16);
  LOBYTE(v17) = MEMORY[0x24C520B10](v17, v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v17)
  {
    outlined init with copy of SystemFormatStyle.Stopwatch(v3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 24))(&v12[*(int *)(v10 + 60)], a1, v6);
    _sSny10Foundation4DateVGWObTm_0((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  else
  {
    outlined init with copy of SystemFormatStyle.Stopwatch(v3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  }
  return outlined assign with take of SystemFormatStyle.Timer((uint64_t)v15, a2);
}

uint64_t _sSny10Foundation4DateVGWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for InterfaceIdiomBox<ComplicationInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<ComplicationInterfaceIdiom>);
    }
  }
}

uint64_t base witness table accessor for Decodable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
}

uint64_t base witness table accessor for Encodable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
}

uint64_t base witness table accessor for Hashable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
}

uint64_t base witness table accessor for Equatable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
}

uint64_t base witness table accessor for FormatStyle in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type SystemFormatStyle.Stopwatch and conformance SystemFormatStyle.Stopwatch, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Stopwatch);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Comparable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Decodable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Encodable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

uint64_t associated type witness table accessor for FormatStyle.FormatInput : Hashable in SystemFormatStyle.Stopwatch()
{
  return _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
}

void *initializeBufferWithCopyOfBuffer for SystemFormatStyle.Stopwatch(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
    *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
    uint64_t v11 = v6[12];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    *((unsigned char *)a1 + v6[13]) = *((unsigned char *)a2 + v6[13]);
    *((unsigned char *)a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
    uint64_t v15 = v6[15];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    *((unsigned char *)a1 + v6[16]) = *((unsigned char *)a2 + v6[16]);
    *(void *)((char *)a1 + v6[17]) = *(void *)((char *)a2 + v6[17]);
    *(void *)((char *)a1 + v6[18]) = *(void *)((char *)a2 + v6[18]);
    *(void *)((char *)a1 + v6[19]) = *(void *)((char *)a2 + v6[19]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SystemFormatStyle.Stopwatch(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v3 = a1 + v2[5];
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + v2[12];
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + v2[15];
  uint64_t v8 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for SystemFormatStyle.Stopwatch(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  *(_OWORD *)&a1[v4[6]] = *(_OWORD *)&a2[v4[6]];
  a1[v4[7]] = a2[v4[7]];
  *(void *)&a1[v4[8]] = *(void *)&a2[v4[8]];
  *(_OWORD *)&a1[v4[9]] = *(_OWORD *)&a2[v4[9]];
  *(_OWORD *)&a1[v4[10]] = *(_OWORD *)&a2[v4[10]];
  *(void *)&a1[v4[11]] = *(void *)&a2[v4[11]];
  uint64_t v9 = v4[12];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  a1[v4[13]] = a2[v4[13]];
  a1[v4[14]] = a2[v4[14]];
  uint64_t v13 = v4[15];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  a1[v4[16]] = a2[v4[16]];
  *(void *)&a1[v4[17]] = *(void *)&a2[v4[17]];
  *(void *)&a1[v4[18]] = *(void *)&a2[v4[18]];
  *(void *)&a1[v4[19]] = *(void *)&a2[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for SystemFormatStyle.Stopwatch(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = v4[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  a1[v4[7]] = a2[v4[7]];
  *(void *)&a1[v4[8]] = *(void *)&a2[v4[8]];
  uint64_t v12 = v4[9];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  uint64_t v15 = v4[10];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  *(void *)&a1[v4[11]] = *(void *)&a2[v4[11]];
  uint64_t v18 = v4[12];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  a1[v4[13]] = a2[v4[13]];
  a1[v4[14]] = a2[v4[14]];
  uint64_t v22 = v4[15];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  a1[v4[16]] = a2[v4[16]];
  *(void *)&a1[v4[17]] = *(void *)&a2[v4[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v4[18]] = *(void *)&a2[v4[18]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v4[19]] = *(void *)&a2[v4[19]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for SystemFormatStyle.Stopwatch(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  *(_OWORD *)&a1[v4[6]] = *(_OWORD *)&a2[v4[6]];
  a1[v4[7]] = a2[v4[7]];
  *(void *)&a1[v4[8]] = *(void *)&a2[v4[8]];
  *(_OWORD *)&a1[v4[9]] = *(_OWORD *)&a2[v4[9]];
  *(_OWORD *)&a1[v4[10]] = *(_OWORD *)&a2[v4[10]];
  *(void *)&a1[v4[11]] = *(void *)&a2[v4[11]];
  uint64_t v9 = v4[12];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  a1[v4[13]] = a2[v4[13]];
  a1[v4[14]] = a2[v4[14]];
  uint64_t v13 = v4[15];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  a1[v4[16]] = a2[v4[16]];
  *(void *)&a1[v4[17]] = *(void *)&a2[v4[17]];
  *(void *)&a1[v4[18]] = *(void *)&a2[v4[18]];
  *(void *)&a1[v4[19]] = *(void *)&a2[v4[19]];
  return a1;
}

unsigned char *assignWithTake for SystemFormatStyle.Stopwatch(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = (int *)type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = v4[5];
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  *(_OWORD *)&a1[v4[6]] = *(_OWORD *)&a2[v4[6]];
  a1[v4[7]] = a2[v4[7]];
  *(void *)&a1[v4[8]] = *(void *)&a2[v4[8]];
  *(_OWORD *)&a1[v4[9]] = *(_OWORD *)&a2[v4[9]];
  *(_OWORD *)&a1[v4[10]] = *(_OWORD *)&a2[v4[10]];
  *(void *)&a1[v4[11]] = *(void *)&a2[v4[11]];
  uint64_t v9 = v4[12];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  a1[v4[13]] = a2[v4[13]];
  a1[v4[14]] = a2[v4[14]];
  uint64_t v13 = v4[15];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for FormatStyleCapitalizationContext();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  a1[v4[16]] = a2[v4[16]];
  *(void *)&a1[v4[17]] = *(void *)&a2[v4[17]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v4[18]] = *(void *)&a2[v4[18]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v4[19]] = *(void *)&a2[v4[19]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246155260);
}

uint64_t sub_246155260(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SystemFormatStyle.Stopwatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2461552E0);
}

uint64_t sub_2461552E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemFormatStyle.Timer();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for SystemFormatStyle.Stopwatch()
{
  uint64_t result = type metadata accessor for SystemFormatStyle.Timer();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 Subview.init(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v3;
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

uint64_t Subview.ID.base.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

Swift::Int Subview.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t Subview.base.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _VariadicView_Children.Element(v1, a1);
}

uint64_t Subview.base.setter(uint64_t a1)
{
  return outlined assign with take of _VariadicView_Children.Element(a1, v1);
}

uint64_t outlined assign with take of _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*Subview.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Subview.containerValues.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t Subview.isSelected<A>(selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v14 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(void *)(v2 + 88);
  ViewTraitCollection.tag<A>(for:)(a2, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v12 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v7, a2);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
  }
  return v12 & 1;
}

uint64_t Subview.tagValue<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ViewTraitCollection.tagValue<A>(for:)(a1, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance MergeTraits@<X0>(void *a1@<X8>)
{
  return MergeTraits.value.getter(*v1, a1);
}

uint64_t protocol witness for HasCustomIDRepresentation.toCustomIDRepresentation.getter in conformance Subview.ID@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t sub_246155734()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for Subview.ID()
{
  return &type metadata for Subview.ID;
}

void *type metadata accessor for MergeTraits()
{
  return &unk_26FA95538;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI25AccessibilityValueStorageV_s5NeverOAD07CodableefG0VTg503_s7c4UI37ie10Attachmentg78V_08platformF02in5idiomAcA0dE0V_AA0d16PlatformPropertyF0VAA17EnvironmentValuesv28AnyInterfaceIdiomVtcfcAA0cd5fu6VAA0dqU7VXEfU1_AD0wX0VAD0yZ5IdiomVTf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(a1, (uint64_t)v16, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
  if (*((void *)&v17 + 1))
  {
    v15[0] = v16[0];
    v15[1] = v16[1];
    void v15[2] = v17;
    outlined init with copy of AccessibilityValueStorage((uint64_t)v15, (uint64_t)v14);
    v13[0] = a2;
    v13[1] = a3;
    *(void *)&long long v12 = a4;
    *((void *)&v12 + 1) = a5;
    swift_retain();
    swift_retain();
    CodableAccessibilityValueStorage.init(_:in:idiom:)((uint64_t)v14, v13, &v12, (uint64_t)a6);
    outlined destroy of AccessibilityValueStorage((uint64_t)v15);
    swift_release();
  }
  else
  {
    *a6 = 0u;
    a6[1] = 0u;
    a6[2] = 0u;
    a6[3] = xmmword_24619B520;
    swift_release();
  }
  return swift_release();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityTextVG_AF0G0Vs5NeverOTg503_s7d4UI23f93AttachmentV_10applicatorAcA07CodablecD7StorageV_xmtcAA0C26PlatformPropertyApplicatorRzlufcAA4G60VAA0cK0Vcfu_33_5d95fbd837e4ae09470dbb519e8f1045AkITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v4 = v15;
  type metadata accessor for AccessibilityTextStorage();
  uint64_t v5 = (char *)(a1 + 49);
  do
  {
    uint64_t v6 = *(void **)(v5 - 17);
    uint64_t v7 = *(void *)(v5 - 9);
    char v8 = *(v5 - 1);
    char v9 = *v5;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v6;
    *(void *)(v10 + 24) = v7;
    *(unsigned char *)(v10 + 32) = v8;
    *(unsigned char *)(v10 + 33) = v9;
    outlined copy of AccessibilityText.Storage(v6, v7, v8);
    unint64_t v12 = *(void *)(v15 + 16);
    unint64_t v11 = *(void *)(v15 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    v5 += 24;
    *(void *)(v15 + 16) = v12 + 1;
    uint64_t v13 = v15 + 32 * v12;
    *(void *)(v13 + 32) = v10;
    *(void *)(v13 + 40) = 0;
    *(unsigned char *)(v13 + 48) = 1;
    *(void *)(v13 + 56) = v2;
    --v1;
  }
  while (v1);
  return v4;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  if (v1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; ; i += 120)
    {
      uint64_t v5 = a1 + i;
      __int16 v6 = *(_WORD *)(a1 + i + 48);
      if ((_BYTE)v6 == 0xFF) {
        goto LABEL_6;
      }
      __int16 v7 = *(_WORD *)(v5 + 72);
      if (v7 == 255) {
        goto LABEL_6;
      }
      uint64_t v63 = v1;
      uint64_t v39 = v2;
      char v9 = *(void **)(v5 + 32);
      uint64_t v8 = *(void *)(v5 + 40);
      uint64_t v10 = *(void **)(v5 + 56);
      uint64_t v11 = *(void *)(v5 + 64);
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v12 = swift_allocObject();
      uint64_t v36 = v8;
      uint64_t v37 = v9;
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = v8;
      uint64_t v13 = v12;
      *(unsigned char *)(v12 + 32) = v6 & 1;
      *(unsigned char *)(v12 + 33) = HIBYTE(v6) & 1;
      uint64_t v14 = swift_allocObject();
      uint64_t v38 = v10;
      *(void *)(v14 + 16) = v10;
      *(void *)(v14 + 24) = v11;
      char v15 = v7;
      *(unsigned char *)(v14 + 32) = v7 & 1;
      *(unsigned char *)(v14 + 33) = HIBYTE(v7) & 1;
      if (*(unsigned char *)(a1 + i + 80) == 1) {
        break;
      }
      outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(a1 + i + 88, (uint64_t)&v48, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
      if (v51 == 255)
      {
        outlined copy of AccessibilityText?(v37, v36, v6);
        outlined copy of AccessibilityText?(v38, v11, v7);
        outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v48, &lazy cache variable for type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?, (uint64_t)&type metadata for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content);
      }
      else
      {
        outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(&v48, v52);
        if ((*(unsigned char *)(a1 + i + 144) & 1) == 0)
        {
          uint64_t v35 = *(void *)(a1 + i + 136);
          outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v52, &v48);
          uint64_t v16 = MEMORY[0x263F8EE78];
          uint64_t v17 = v36;
          if (v51)
          {
            long long v53 = v48;
            long long v54 = v49;
            *(void *)&long long v55 = v50;
            char v18 = 1;
            uint64_t v19 = (long long *)((char *)&v55 + 8);
          }
          else
          {
            uint64_t v33 = *((void *)&v48 + 1);
            uint64_t v34 = v48;
            char v31 = BYTE1(v49);
            char v32 = v49;
            uint64_t v20 = swift_allocObject();
            char v18 = 0;
            *(void *)(v20 + 16) = v34;
            *(void *)(v20 + 24) = v33;
            *(unsigned char *)(v20 + 32) = v32;
            *(unsigned char *)(v20 + 33) = v31;
            long long v53 = (unint64_t)v20;
            LOBYTE(v54) = 1;
            uint64_t v19 = &v55;
            *((void *)&v54 + 1) = v16;
          }
          *(void *)uint64_t v19 = v35;
          char v56 = v18;
          goto LABEL_18;
        }
        outlined copy of AccessibilityText?(v37, v36, v6);
        outlined copy of AccessibilityText?(v38, v11, v7);
        outlined destroy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content((uint64_t)v52);
      }
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      char v56 = -1;
      outlined consume of AccessibilityCustomContentKey.Identifier(v13, 0, 0x8000000000000001);
      outlined consume of Text.Storage(v14, 0, 1);
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v53, &lazy cache variable for type metadata for AccessibilityCustomContentEntry.Value?, (uint64_t)&type metadata for AccessibilityCustomContentEntry.Value);
LABEL_5:
      uint64_t v1 = v63;
LABEL_6:
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    long long v54 = 0u;
    long long v55 = 0u;
    long long v53 = 0u;
    char v56 = 2;
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t v17 = v36;
LABEL_18:
    outlined init with take of AccessibilityCustomContentEntry.Value((uint64_t)&v53, (uint64_t)&v40);
    outlined init with take of AccessibilityCustomContentEntry.Value((uint64_t)&v40, (uint64_t)v61);
    *(_OWORD *)&v57[8] = xmmword_2461D3F10;
    *(void *)uint64_t v57 = v13;
    *(void *)&v57[24] = v16;
    uint64_t v58 = v14;
    uint64_t v59 = 0;
    LOBYTE(v60) = 1;
    *((void *)&v60 + 1) = v16;
    long long v44 = v61[0];
    long long v45 = v61[1];
    long long v46 = v61[2];
    char v47 = v62;
    long long v40 = *(_OWORD *)v57;
    long long v41 = *(_OWORD *)&v57[16];
    long long v42 = (unint64_t)v14;
    long long v43 = v60;
    outlined copy of AccessibilityText?(v37, v17, v6);
    outlined copy of AccessibilityText?(v38, v11, v15);
    uint64_t v2 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
    }
    unint64_t v22 = v2[2];
    unint64_t v21 = v2[3];
    if (v22 >= v21 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v2);
    }
    v2[2] = v22 + 1;
    uint64_t v23 = &v2[15 * v22];
    long long v24 = v40;
    long long v25 = v41;
    long long v26 = v43;
    *((_OWORD *)v23 + 4) = v42;
    *((_OWORD *)v23 + 5) = v26;
    *((_OWORD *)v23 + 2) = v24;
    *((_OWORD *)v23 + 3) = v25;
    long long v27 = v44;
    long long v28 = v45;
    long long v29 = v46;
    *((unsigned char *)v23 + 144) = v47;
    *((_OWORD *)v23 + 7) = v28;
    *((_OWORD *)v23 + 8) = v29;
    *((_OWORD *)v23 + 6) = v27;
    goto LABEL_5;
  }
  return v2;
}

unint64_t specialized AccessibilityNullableOptionSet.init(from:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  long long v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      __n128 result = v3[3];
      if (result)
      {
        unint64_t v9 = v3[4];
        if (v5 < v9) {
          goto LABEL_13;
        }
        if (v9 < v5) {
          goto LABEL_39;
        }
        v3[3] = 0;
      }
      __n128 result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_39;
      }
LABEL_13:
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_39;
          }
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_42;
          }
          unint64_t v11 = v3[1] + result;
          if (v6 < v11)
          {
LABEL_39:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v11;
        }
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        unint64_t v8 = result;
      }
      else if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_39;
          }
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
            JUMPOUT(0x246156048);
          }
          unint64_t v10 = v3[1] + result;
          if (v6 < v10) {
            goto LABEL_39;
          }
          v3[3] = 16;
          v3[4] = v10;
        }
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        unint64_t v7 = result;
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              break;
            }
            return result;
          case 1uLL:
            unint64_t v12 = v3[1] + 8;
            goto LABEL_37;
          case 2uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_43;
            }
            unint64_t v12 = v3[1] + result;
LABEL_37:
            if (v6 < v12) {
              goto LABEL_39;
            }
            v3[1] = v12;
            break;
          case 5uLL:
            unint64_t v12 = v3[1] + 4;
            goto LABEL_37;
          default:
            goto LABEL_39;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

unint64_t specialized AccessibilityNullableOptionSet.init(from:)@<X0>(unint64_t result@<X0>, _DWORD *a2@<X8>)
{
  long long v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    int v7 = 0;
    int v8 = 0;
    while (1)
    {
      __n128 result = v3[3];
      if (result)
      {
        unint64_t v10 = v3[4];
        if (v5 < v10) {
          goto LABEL_14;
        }
        if (v10 < v5) {
          goto LABEL_42;
        }
        v3[3] = 0;
      }
      __n128 result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7) {
        goto LABEL_42;
      }
LABEL_14:
      if (result >> 3 == 1)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_42;
          }
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_46;
          }
          unint64_t v12 = v3[1] + result;
          if (v6 < v12)
          {
LABEL_42:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = 8;
          v3[4] = v12;
        }
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        int v8 = result;
        if (HIDWORD(result)) {
          goto LABEL_44;
        }
      }
      else if (result >> 3 == 2)
      {
        if ((result & 7) != 0)
        {
          if ((result & 7) != 2) {
            goto LABEL_42;
          }
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          unint64_t v11 = v3[1] + result;
          if (v6 < v11) {
            goto LABEL_42;
          }
          v3[3] = 16;
          v3[4] = v11;
        }
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        int v7 = result;
        if (HIDWORD(result))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          JUMPOUT(0x2461562A8);
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            break;
          case 1uLL:
            unint64_t v9 = v3[1] + 8;
            if (v6 >= v9) {
              goto LABEL_6;
            }
            goto LABEL_42;
          case 2uLL:
            __n128 result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_47;
            }
            unint64_t v9 = v3[1] + result;
            if (v6 < v9) {
              goto LABEL_42;
            }
LABEL_6:
            v3[1] = v9;
            break;
          case 5uLL:
            unint64_t v9 = v3[1] + 4;
            if (v6 < v9) {
              goto LABEL_42;
            }
            goto LABEL_6;
          default:
            goto LABEL_42;
        }
      }
      unint64_t v5 = v3[1];
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_4;
      }
    }
  }
  int v7 = 0;
  int v8 = 0;
LABEL_4:
  v3[3] = 0;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized ProtobufEncoder.codableField<A>(_:_:)(a1, a2, specialized ProtobufEncoder.binaryPlistData<A>(for:));
}

{
  return specialized ProtobufEncoder.codableField<A>(_:_:)(a1, a2, specialized ProtobufEncoder.binaryPlistData<A>(for:));
}

{
  return specialized ProtobufEncoder.codableField<A>(_:_:)(a1, a2, specialized ProtobufEncoder.binaryPlistData<A>(for:));
}

{
  return specialized ProtobufEncoder.codableField<A>(_:_:)(a1, a2, specialized ProtobufEncoder.binaryPlistData<A>(for:));
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v7 = v3[1];
  long long v16 = *v3;
  long long v17 = v7;
  uint64_t v18 = *((void *)v3 + 4);
  uint64_t result = a3(a2);
  if (!v4)
  {
    unint64_t v10 = v9;
    uint64_t v11 = result;
    switch(v9 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v11, v11 >> 32);
        outlined consume of Data._Representation(v11, v10);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(result + 16);
        uint64_t v14 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v15, 0, 14);
        unint64_t v12 = v15;
        goto LABEL_6;
      default:
        v15[0] = result;
        LOWORD(v15[1]) = v9;
        BYTE2(v15[1]) = BYTE2(v9);
        BYTE3(v15[1]) = BYTE3(v9);
        BYTE4(v15[1]) = BYTE4(v9);
        BYTE5(v15[1]) = BYTE5(v9);
        unint64_t v12 = (char *)v15 + BYTE6(v9);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v15, v12);
        break;
    }
    return outlined consume of Data._Representation(v11, v10);
  }
  return result;
}

{
  long long *v3;
  uint64_t v4;
  long long v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;
  uint64_t v14;
  void v15[2];
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v19 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v7 = v3[1];
  long long v16 = *v3;
  long long v17 = v7;
  uint64_t v18 = *((void *)v3 + 4);
  uint64_t result = a3(a2);
  if (!v4)
  {
    unint64_t v10 = v9;
    uint64_t v11 = result;
    switch(v9 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v11, v11 >> 32);
        outlined consume of Data._Representation(v11, v10);
        break;
      case 2uLL:
        uint64_t v13 = *(void *)(result + 16);
        uint64_t v14 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v13, v14);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v15, 0, 14);
        unint64_t v12 = v15;
        goto LABEL_6;
      default:
        v15[0] = result;
        LOWORD(v15[1]) = v9;
        BYTE2(v15[1]) = BYTE2(v9);
        BYTE3(v15[1]) = BYTE3(v9);
        BYTE4(v15[1]) = BYTE4(v9);
        BYTE5(v15[1]) = BYTE5(v9);
        unint64_t v12 = (char *)v15 + BYTE6(v9);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v15, v12);
        break;
    }
    return outlined consume of Data._Representation(v11, v10);
  }
  return result;
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, const void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v5 = v2[1];
  long long v14 = *v2;
  long long v15 = v5;
  uint64_t v16 = *((void *)v2 + 4);
  uint64_t result = specialized ProtobufEncoder.binaryPlistData<A>(for:)(a2);
  if (!v3)
  {
    unint64_t v8 = v7;
    uint64_t v9 = result;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v9, v9 >> 32);
        outlined consume of Data._Representation(v9, v8);
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(result + 16);
        uint64_t v12 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v13, 0, 14);
        unint64_t v10 = v13;
        goto LABEL_6;
      default:
        v13[0] = result;
        LOWORD(v13[1]) = v7;
        BYTE2(v13[1]) = BYTE2(v7);
        BYTE3(v13[1]) = BYTE3(v7);
        BYTE4(v13[1]) = BYTE4(v7);
        BYTE5(v13[1]) = BYTE5(v7);
        unint64_t v10 = (char *)v13 + BYTE6(v7);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v13, v10);
        break;
    }
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, unint64_t *a5, void (*a6)(void))
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v13 = v6[1];
  long long v22 = *v6;
  long long v23 = v13;
  uint64_t v24 = *((void *)v6 + 4);
  uint64_t result = specialized ProtobufEncoder.binaryPlistData<A>(for:)(a2, a3, a4, a5, a6);
  if (!v7)
  {
    unint64_t v16 = v15;
    uint64_t v17 = result;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v17, v17 >> 32);
        outlined consume of Data._Representation(v17, v16);
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(result + 16);
        uint64_t v20 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v19, v20);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v21, 0, 14);
        uint64_t v18 = v21;
        goto LABEL_6;
      default:
        v21[0] = result;
        LOWORD(v21[1]) = v15;
        BYTE2(v21[1]) = BYTE2(v15);
        BYTE3(v21[1]) = BYTE3(v15);
        BYTE4(v21[1]) = BYTE4(v15);
        BYTE5(v21[1]) = BYTE5(v15);
        uint64_t v18 = (char *)v21 + BYTE6(v15);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v21, v18);
        break;
    }
    return outlined consume of Data._Representation(v17, v16);
  }
  return result;
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v5 = v2[1];
  long long v14 = *v2;
  long long v15 = v5;
  uint64_t v16 = *((void *)v2 + 4);
  uint64_t result = specialized ProtobufEncoder.binaryPlistData<A>(for:)(a2);
  if (!v3)
  {
    unint64_t v8 = v7;
    uint64_t v9 = result;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v9, v9 >> 32);
        outlined consume of Data._Representation(v9, v8);
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(result + 16);
        uint64_t v12 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v11, v12);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v13, 0, 14);
        unint64_t v10 = v13;
        goto LABEL_6;
      default:
        v13[0] = result;
        LOWORD(v13[1]) = v7;
        BYTE2(v13[1]) = BYTE2(v7);
        BYTE3(v13[1]) = BYTE3(v7);
        BYTE4(v13[1]) = BYTE4(v7);
        BYTE5(v13[1]) = BYTE5(v7);
        unint64_t v10 = (char *)v13 + BYTE6(v7);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v13, v10);
        break;
    }
    return outlined consume of Data._Representation(v9, v8);
  }
  return result;
}

uint64_t specialized ProtobufEncoder.codableField<A>(_:_:)(uint64_t a1, char a2, unint64_t *a3, uint64_t a4, unint64_t *a5, void (*a6)(void))
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v12 = a2 & 1;
  ProtobufEncoder.encodeVarint(_:)((8 * a1) | 2);
  long long v13 = v6[1];
  long long v22 = *v6;
  long long v23 = v13;
  uint64_t v24 = *((void *)v6 + 4);
  uint64_t result = specialized ProtobufEncoder.binaryPlistData<A>(for:)(v12, a3, a4, a5, a6);
  if (!v7)
  {
    unint64_t v16 = v15;
    uint64_t v17 = result;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (result >> 32 < (int)result) {
          __break(1u);
        }
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)v17, v17 >> 32);
        outlined consume of Data._Representation(v17, v16);
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(result + 16);
        uint64_t v20 = *(void *)(result + 24);
        swift_retain();
        swift_retain();
        specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v19, v20);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v21, 0, 14);
        uint64_t v18 = v21;
        goto LABEL_6;
      default:
        v21[0] = result;
        LOWORD(v21[1]) = v15;
        BYTE2(v21[1]) = BYTE2(v15);
        BYTE3(v21[1]) = BYTE3(v15);
        BYTE4(v21[1]) = BYTE4(v15);
        BYTE5(v21[1]) = BYTE5(v15);
        uint64_t v18 = (char *)v21 + BYTE6(v15);
LABEL_6:
        ProtobufEncoder.encodeData(_:)(v21, v18);
        break;
    }
    return outlined consume of Data._Representation(v17, v16);
  }
  return result;
}

uint64_t specialized ProtobufEncoder.binaryPlistData<A>(for:)(uint64_t a1)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value>, type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8E0F8]);
  uint64_t v2 = *(void *)(type metadata accessor for ResolvableTextSegmentAttribute.Value(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461B9DC0;
  outlined init with copy of AccessibilityNodeAttachment.Storage(a1, v4 + v3, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  type metadata accessor for [ResolvableTextSegmentAttribute.Value](0);
  lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value] and conformance <A> [A], type metadata accessor for [ResolvableTextSegmentAttribute.Value], (void (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value);
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableAttributeConfiguration>, type metadata accessor for ResolvableAttributeConfiguration, MEMORY[0x263F8E0F8]);
  uint64_t v2 = *(void *)(type metadata accessor for ResolvableAttributeConfiguration(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461B9DC0;
  outlined init with copy of AccessibilityNodeAttachment.Storage(a1, v4 + v3, type metadata accessor for ResolvableAttributeConfiguration);
  type metadata accessor for [ResolvableAttributeConfiguration](0);
  lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableAttributeConfiguration] and conformance <A> [A], type metadata accessor for [ResolvableAttributeConfiguration], (void (*)(void))lazy protocol witness table accessor for type ResolvableAttributeConfiguration and conformance ResolvableAttributeConfiguration);
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<LinkDestination.Configuration>, type metadata accessor for LinkDestination.Configuration, MEMORY[0x263F8E0F8]);
  uint64_t v2 = *(void *)(type metadata accessor for LinkDestination.Configuration(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_2461B9DC0;
  outlined init with copy of AccessibilityNodeAttachment.Storage(a1, v4 + v3, type metadata accessor for LinkDestination.Configuration);
  type metadata accessor for [LinkDestination.Configuration](0);
  lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [LinkDestination.Configuration] and conformance <A> [A], type metadata accessor for [LinkDestination.Configuration], (void (*)(void))lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration);
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAXChartDescriptor>, (uint64_t)&type metadata for CodableAXChartDescriptor, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  *(void *)(v2 + 32) = a1;
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAXChartDescriptor], (uint64_t)&type metadata for CodableAXChartDescriptor, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [CodableAXChartDescriptor] and conformance <A> [A]();
  swift_retain();
  unint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JSONCodable<[String : CGFloat]>>, (uint64_t (*)(uint64_t))type metadata accessor for JSONCodable<[String : CGFloat]>, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  *(void *)(v2 + 32) = a1;
  type metadata accessor for [JSONCodable<[String : CGFloat]>](0);
  lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [JSONCodable<[String : CGFloat]>] and conformance <A> [A], type metadata accessor for [JSONCodable<[String : CGFloat]>], (void (*)(void))lazy protocol witness table accessor for type JSONCodable<[String : CGFloat]> and conformance JSONCodable<A>);
  swift_bridgeObjectRetain();
  unint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

{
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for [JSONCodable<Swift.AnyObject>](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JSONCodable<Swift.AnyObject>>, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  *(void *)(v2 + 32) = a1;
  type metadata accessor for [JSONCodable<Swift.AnyObject>](0, &lazy cache variable for type metadata for [JSONCodable<Swift.AnyObject>], MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [JSONCodable<Swift.AnyObject>] and conformance <A> [A]();
  swift_unknownObjectRetain();
  unint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized ProtobufEncoder.binaryPlistData<A>(for:)(const void *a1)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityDataSeriesConfiguration>, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  memcpy((void *)(v2 + 32), a1, 0x108uLL);
  outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)a1);
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A]();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized ProtobufEncoder.binaryPlistData<A>(for:)(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(void))
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for CodableAccessibilityValueStorage?(0, a2, a3, MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  *(void *)(v10 + 32) = a1;
  type metadata accessor for CodableAccessibilityValueStorage?(0, a4, a3, MEMORY[0x263F8D488]);
  a5();
  swift_bridgeObjectRetain();
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized ProtobufEncoder.binaryPlistData<A>(for:)(uint64_t *a1)
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityValueStorage>, (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8E0F8]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
  outlined init with copy of CodableAccessibilityValueStorage(a1, v2 + 32);
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAccessibilityValueStorage], (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [CodableAccessibilityValueStorage] and conformance <A> [A]();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized ProtobufEncoder.binaryPlistData<A>(for:)(char a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(void))
{
  char v9 = a1 & 1;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  swift_bridgeObjectRetain();
  dispatch thunk of PropertyListEncoder.userInfo.setter();
  type metadata accessor for CodableAccessibilityValueStorage?(0, a2, a3, MEMORY[0x263F8E0F8]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  *(unsigned char *)(v10 + 32) = v9;
  type metadata accessor for CodableAccessibilityValueStorage?(0, a4, a3, MEMORY[0x263F8D488]);
  a5();
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v11;
}

BOOL static AccessibilityNodeAttachment.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AccessibilityNodeAttachment.Kind.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityNodeAttachment.Kind.CodingKeys()
{
  if (*v0) {
    return 0x6C6F686563616C70;
  }
  else {
    return 0x647261646E617473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityNodeAttachment.Kind.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AccessibilityNodeAttachment.Kind.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNodeAttachment.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNodeAttachment.Kind.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t AccessibilityNodeAttachment.Kind.encode(to:)(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys, (uint64_t)&unk_26FA6ED68, MEMORY[0x263F8E0C0]);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  long long v23 = (char *)&v19 - v5;
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.StandardCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys, (uint64_t)&unk_26FA6ED48, v3);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v20 = (char *)&v19 - v7;
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys, (uint64_t)&unk_26FA6ECB8, v3);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v19 - v11;
  char v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v14 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v13)
  {
    char v27 = 1;
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys();
    unint64_t v15 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v24;
    uint64_t v16 = v25;
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys();
    unint64_t v15 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v21;
    uint64_t v16 = v22;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  return (*v14)(v12, v9);
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys);
  }
  return result;
}

Swift::Int AccessibilityNodeAttachment.Kind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityNodeAttachment.Kind.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys, (uint64_t)&unk_26FA6ED68, MEMORY[0x263F8E040]);
  uint64_t v30 = v4;
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v32 = (char *)&v28 - v5;
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityNodeAttachment.Kind.StandardCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys, (uint64_t)&unk_26FA6ED48, v3);
  uint64_t v7 = v6;
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - v8;
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityNodeAttachment.Kind.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys, (uint64_t)&unk_26FA6ECB8, v3);
  uint64_t v11 = v10;
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.CodingKeys and conformance AccessibilityNodeAttachment.Kind.CodingKeys();
  long long v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v28 = v7;
  unint64_t v15 = v32;
  uint64_t v16 = v33;
  uint64_t v17 = v34;
  uint64_t v35 = a1;
  uint64_t v18 = v13;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v11;
    uint64_t v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v24 = &type metadata for AccessibilityNodeAttachment.Kind;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v22);
    a1 = v35;
LABEL_6:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  int v36 = *(unsigned __int8 *)(v19 + 32);
  if (v36)
  {
    char v38 = 1;
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys and conformance AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v31;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
  }
  else
  {
    char v37 = 0;
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind.StandardCodingKeys and conformance AccessibilityNodeAttachment.Kind.StandardCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  }
  *uint64_t v17 = v36;
  uint64_t v25 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNodeAttachment.Kind@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AccessibilityNodeAttachment.Kind.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNodeAttachment.Kind(void *a1)
{
  return AccessibilityNodeAttachment.Kind.encode(to:)(a1);
}

uint64_t AccessibilityNodeAttachment.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AccessibilityNodeAttachment.Storage(v1, a1, type metadata accessor for AccessibilityNodeAttachment.Storage);
}

uint64_t type metadata accessor for AccessibilityNodeAttachment.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityNodeAttachment.Storage);
}

uint64_t AccessibilityNodeAttachment.storage.setter(uint64_t a1)
{
  return outlined assign with take of AccessibilityNodeAttachment.Storage(a1, v1, type metadata accessor for AccessibilityNodeAttachment.Storage);
}

uint64_t (*AccessibilityNodeAttachment.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityNodeAttachment.createsNode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AccessibilityNodeAttachment(0) + 20));
}

uint64_t type metadata accessor for AccessibilityNodeAttachment(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityNodeAttachment);
}

uint64_t AccessibilityNodeAttachment.createsNode.setter(char a1)
{
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*AccessibilityNodeAttachment.createsNode.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityNodeAttachment.kind.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t AccessibilityNodeAttachment.kind.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment(0);
  *(unsigned char *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*AccessibilityNodeAttachment.kind.modify())(void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityNodeAttachment.makeAttachment<A>(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CodableAccessibilityAttachmentStorage(0);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)v19 - v12;
  uint64_t v14 = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (uint64_t *)((char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AccessibilityNodeAttachment.Storage(v4, (uint64_t)v16, type metadata accessor for AccessibilityNodeAttachment.Storage);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v16, (uint64_t)v13, type metadata accessor for CodableAccessibilityAttachmentStorage);
    outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v13, (uint64_t)v10, type metadata accessor for CodableAccessibilityAttachmentStorage);
    uint64_t v16 = v19;
    AccessibilityAttachment.init<A>(_:applicator:)((uint64_t)v10, a1, a2, v19);
    uint64_t result = outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v13, type metadata accessor for CodableAccessibilityAttachmentStorage);
  }
  uint64_t v18 = v16[1];
  *a3 = *v16;
  a3[1] = v18;
  return result;
}

uint64_t type metadata accessor for CodableAccessibilityAttachmentStorage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for CodableAccessibilityAttachmentStorage);
}

uint64_t AccessibilityAttachment.init<A>(_:applicator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v104 = a3;
  double v112 = a4;
  uint64_t v113 = a1;
  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v111 = (uint64_t)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v110 = (uint64_t)&v99 - v7;
  type metadata accessor for Locale?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v106 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v105 = (char *)&v99 - v11;
  uint64_t v12 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  MEMORY[0x270FA5388](v107);
  uint64_t v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v24 = Dictionary.init(minimumCapacity:)();
  unint64_t v108 = v23;
  uint64_t v109 = v24;
  uint64_t v118 = Dictionary.init(minimumCapacity:)();
  outlined init with copy of AccessibilityNodeAttachment.Storage(v113, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t)v14, type metadata accessor for CodableAccessibilityAttachmentStorage.V3);
    outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v14, (uint64_t)v22, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v14[*(int *)(v12 + 24)], (uint64_t)&v119, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
    uint64_t v25 = (int *)v12;
    if (v122 == 1)
    {
      outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v119, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
      memset(v115, 0, 48);
    }
    else
    {
      CodableAccessibilityValueStorage.accessibilityValue.getter((uint64_t)v115);
      outlined destroy of CodableAccessibilityValueStorage((uint64_t)&v119);
    }
    uint64_t v29 = v103;
    uint64_t v28 = v104;
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)v115, (uint64_t)&v119, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v119);
    outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)v115, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    uint64_t v30 = v25;
    if (*(void *)&v14[v25[7]])
    {
      uint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityTextVG_AF0G0Vs5NeverOTg503_s7d4UI23f93AttachmentV_10applicatorAcA07CodablecD7StorageV_xmtcAA0C26PlatformPropertyApplicatorRzlufcAA4G60VAA0cK0Vcfu_33_5d95fbd837e4ae09470dbb519e8f1045AkITf3nnnpk_nTf1cn_n(v31);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = MEMORY[0x263F8EE78];
    }
    uint64_t v33 = (uint64_t)v105;
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AccessibilityPropertiesEntry);
    *(void *)&long long v121 = &protocol witness table for AccessibilityPropertiesEntry<A>;
    *((void *)&v120 + 1) = v34;
    *(void *)&long long v119 = v32;
    specialized Dictionary.subscript.setter((uint64_t)&v119, (uint64_t)&type metadata for AccessibilityProperties.InputLabelsKey);
    uint64_t v35 = &v14[v30[8]];
    uint64_t v36 = v35[16];
    if (v36 == 255)
    {
      uint64_t v36 = 0;
      uint64_t v38 = 0;
      long long v37 = 0uLL;
    }
    else
    {
      long long v37 = *(_OWORD *)v35;
      uint64_t v38 = MEMORY[0x263F8EE78];
    }
    long long v123 = v37;
    uint64_t v124 = v36;
    uint64_t v125 = v38;
    uint64_t v126 = v38;
    specialized AccessibilityProperties.subscript.setter((uint64_t)&v123);
    if (*(void *)&v14[v30[9]])
    {
      uint64_t v39 = swift_bridgeObjectRetain();
      long long v40 = specialized Sequence.compactMap<A>(_:)(v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v40 = (void *)MEMORY[0x263F8EE78];
    }
    specialized AccessibilityProperties.subscript.setter((uint64_t)v40);
    specialized AccessibilityProperties.subscript.setter(v14[v30[10]]);
    specialized AccessibilityProperties.subscript.setter(v14[v30[11]]);
    uint64_t v41 = swift_retain();
    specialized AccessibilityProperties.subscript.setter(v41);
    if (*(void *)&v14[v30[13] + 8])
    {
      swift_bridgeObjectRetain_n();
      Locale.init(identifier:)();
      uint64_t v42 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v33, 0, 1, v42);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v33, 1, 1, v43);
    }
    uint64_t v44 = v106;
    outlined init with copy of AccessibilityNodeAttachment.Storage(v33, v106, (uint64_t (*)(void))type metadata accessor for Locale?);
    specialized AccessibilityProperties.subscript.setter(v44);
    outlined destroy of CodableAccessibilityAttachmentStorage(v33, (uint64_t (*)(void))type metadata accessor for Locale?);
    specialized AccessibilityProperties.subscript.setter(v14[v30[14]]);
    long long v45 = &v14[v30[5]];
    char v46 = v45[48];
    long long v47 = *((_OWORD *)v45 + 1);
    long long v119 = *(_OWORD *)v45;
    long long v120 = v47;
    long long v121 = *((_OWORD *)v45 + 2);
    LOBYTE(v122) = v46;
    (*(void (**)(long long *, uint64_t *, uint64_t, uint64_t))(v28 + 8))(&v119, &v118, v29, v28);
    char v26 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3;
    uint64_t v27 = (uint64_t)v14;
  }
  else
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t)v17, type metadata accessor for CodableAccessibilityAttachmentStorage.V2);
    outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v17, (uint64_t)v22, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    closure #1 in AccessibilityAttachment.init<A>(_:applicator:)((uint64_t)v17, &v119);
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?((uint64_t)&v119, (uint64_t)v115, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v115);
    outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v119, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    char v26 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2;
    uint64_t v27 = (uint64_t)v17;
  }
  outlined destroy of CodableAccessibilityAttachmentStorage(v27, v26);
  if (v22[34] == 255)
  {
    uint64_t v48 = 0;
    char v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v105 = 0;
    uint64_t v52 = 0;
  }
  else
  {
    long long v54 = (void *)*((void *)v22 + 2);
    uint64_t v53 = *((void *)v22 + 3);
    int v55 = *((unsigned __int16 *)v22 + 16) | (v22[34] << 16);
    if (((v22[34] << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = v54;
      *(void *)(v50 + 24) = v53;
      *(unsigned char *)(v50 + 32) = v55 & 1;
      *(unsigned char *)(v50 + 33) = BYTE1(v55) & 1;
      outlined copy of AccessibilityText.Storage(v54, v53, v55 & 1);
      uint64_t v51 = 0;
      uint64_t v52 = MEMORY[0x263F8EE78];
      unsigned int v59 = 1;
    }
    else
    {
      swift_retain();
      uint64_t v50 = ResolvedStyledText.accessibilityText.getter();
      uint64_t v51 = v56;
      uint64_t v52 = v57;
      unsigned int v59 = v58 & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v54, v53, v55);
    }
    uint64_t v105 = (char *)v59;
    type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_2461B9DC0;
    *(void *)(v48 + 32) = v50;
    *(void *)(v48 + 40) = v51;
    *(unsigned char *)(v48 + 48) = v59;
    *(void *)(v48 + 56) = v52;
    if ((~v55 & 0x10100) != 0) {
      char v49 = 2;
    }
    else {
      char v49 = 3;
    }
    outlined copy of Text.Storage(v50, v51, v59);
    swift_bridgeObjectRetain();
  }
  specialized AccessibilityProperties.subscript.setter(v48, v49);
  unsigned __int8 v60 = v22[58];
  uint64_t v106 = v52;
  if (v60 == 255)
  {
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v101 = 0;
    uint64_t v102 = 0;
    uint64_t v61 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v63 = (void *)*((void *)v22 + 5);
    uint64_t v62 = *((void *)v22 + 6);
    unsigned int v64 = *((unsigned __int16 *)v22 + 28) | (v60 << 16);
    if (((v60 << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = v63;
      *(void *)(v75 + 24) = v62;
      char v76 = v64 & 1;
      *(unsigned char *)(v75 + 32) = v64 & 1;
      int v77 = (v64 >> 8) & 1;
      uint64_t v74 = v75;
      *(unsigned char *)(v75 + 33) = v77;
      outlined copy of AccessibilityText.Storage(v63, v62, v76);
      uint64_t v72 = 0;
      uint64_t v67 = MEMORY[0x263F8EE78];
      unsigned int v69 = 1;
    }
    else
    {
      swift_retain();
      uint64_t v65 = ResolvedStyledText.accessibilityText.getter();
      uint64_t v67 = v66;
      unsigned int v69 = v68 & 1;
      uint64_t v70 = v63;
      uint64_t v72 = v71;
      int v73 = v64;
      uint64_t v74 = v65;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v70, v62, v73);
    }
    uint64_t v101 = v69;
    type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_2461B9DC0;
    *(void *)(v61 + 32) = v74;
    *(void *)(v61 + 40) = v72;
    *(unsigned char *)(v61 + 48) = v69;
    *(void *)(v61 + 56) = v67;
    uint64_t v103 = v72;
    uint64_t v104 = v74;
    outlined copy of Text.Storage(v74, v72, v69);
    uint64_t v102 = v67;
    swift_bridgeObjectRetain();
  }
  specialized AccessibilityProperties.subscript.setter(v61);
  uint64_t v78 = *((void *)v22 + 1);
  if (v78) {
    uint64_t v79 = *(void *)v22;
  }
  else {
    uint64_t v79 = 0;
  }
  swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v79, v78, 0);
  specialized AccessibilityProperties.subscript.setter(*(void *)(v22 + 84));
  specialized AccessibilityProperties.subscript.setter(*((void *)v22 + 12), *((void *)v22 + 13));
  specialized AccessibilityProperties.subscript.setter(*((void *)v22 + 14), v22[120]);
  specialized AccessibilityProperties.subscript.setter(*((void *)v22 + 16), v22[136]);
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  unsigned __int8 v84 = v22[82];
  if (v84 != 255)
  {
    uint64_t v100 = v51;
    uint64_t v85 = v50;
    uint64_t v86 = (void *)*((void *)v22 + 8);
    uint64_t v87 = *((void *)v22 + 9);
    int v88 = *((unsigned __int16 *)v22 + 40) | (v84 << 16);
    if (((v84 << 16) & 0x10000) != 0)
    {
      type metadata accessor for AccessibilityTextStorage();
      uint64_t v80 = swift_allocObject();
      *(void *)(v80 + 16) = v86;
      *(void *)(v80 + 24) = v87;
      *(unsigned char *)(v80 + 32) = v88 & 1;
      *(unsigned char *)(v80 + 33) = BYTE1(v88) & 1;
      outlined copy of AccessibilityText.Storage(v86, v87, v88 & 1);
      uint64_t v81 = 0;
      uint64_t v83 = MEMORY[0x263F8EE78];
      uint64_t v82 = 1;
    }
    else
    {
      swift_retain();
      uint64_t v80 = ResolvedStyledText.accessibilityText.getter();
      uint64_t v81 = v89;
      uint64_t v83 = v90;
      uint64_t v82 = v91 & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v86, v87, v88);
    }
    uint64_t v50 = v85;
    uint64_t v51 = v100;
  }
  specialized AccessibilityProperties.subscript.setter(v80, v81, v82, v83);
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)(v22 + 144), (uint64_t)v116, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v116, (uint64_t)v117, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
  if (_s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOg((uint64_t)v117) == 1)
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)&v119);
  }
  else
  {
    outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v116, (uint64_t)v114, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
    memcpy(v115, v114, 0x108uLL);
    CodableAccessibilityDataSeriesConfiguration.configuration.getter(&v119);
    _ViewInputs.base.modify(&v119);
  }
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)&v119, (uint64_t)v115, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  uint64_t v92 = v102;
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v115, (uint64_t)&v119, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  specialized AccessibilityProperties.subscript.setter((uint64_t)&v119);
  uint64_t v93 = v110;
  outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)&v22[*(int *)(v107 + 52)], v110, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  uint64_t v94 = v111;
  outlined init with copy of AccessibilityNodeAttachment.Storage(v93, v111, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  specialized AccessibilityProperties.subscript.setter(v94);
  outlined destroy of CodableAccessibilityAttachmentStorage(v93, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  uint64_t v95 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v95);
  uint64_t v96 = v118;
  swift_bridgeObjectRetain();
  Dictionary.init(minimumCapacity:)();
  swift_bridgeObjectRelease();
  outlined consume of Text?(v104, v103, v101, v92);
  outlined consume of Text?(v50, v51, (char)v105, v106);
  outlined destroy of CodableAccessibilityAttachmentStorage(v113, type metadata accessor for CodableAccessibilityAttachmentStorage);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v22, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
  uint64_t v98 = v112;
  *double v112 = v96;
  v98[1] = 0;
  return result;
}

uint64_t type metadata accessor for CodableAccessibilityAttachmentStorage.V3(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for CodableAccessibilityAttachmentStorage.V3);
}

uint64_t type metadata accessor for CodableAccessibilityAttachmentStorage.V2(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for CodableAccessibilityAttachmentStorage.V2);
}

void type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>()
{
  if (!lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>)
  {
    type metadata accessor for CodableAccessibilityAttachmentStorage.V2(255);
    type metadata accessor for CodableAccessibilityAttachmentStorage.V3(255);
    unint64_t v0 = type metadata accessor for CodableAccessibilityVersionStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
    }
  }
}

uint64_t type metadata accessor for CodableAccessibilityVersionStorage()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for CodableAccessibilityAttachmentStorage.VBase);
}

uint64_t outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for CodableAccessibilityValueStorage?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of AccessibilityCustomContentEntry.Value?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for CodableAccessibilityValueStorage?(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with take of CodableAccessibilityValueStorage?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for CodableAccessibilityValueStorage?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t AccessibilityNodeAttachment.init(_:platformStorage:in:idiom:createsNode:kind:encode:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X3>, char a5@<W4>, char *a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  char v16 = *a6;
  if (a7)
  {
    char v17 = *(unsigned char *)(a2 + 48);
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = *(void *)a2;
    v26[0] = v11;
    v26[1] = v10;
    v23[0] = v19;
    v23[1] = v12;
    v23[2] = v18;
    v23[3] = v13;
    long long v24 = *(_OWORD *)(a2 + 32);
    char v25 = v17;
    v22[0] = v15;
    v22[1] = v14;
    *(_OWORD *)uint64_t v21 = *a4;
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)(v26, v23, v22, v21, (uint64_t)a8);
    type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *a8 = v11;
    a8[1] = v10;
    type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment(0);
  *((unsigned char *)a8 + *(int *)(result + 20)) = a5 & 1;
  *((unsigned char *)a8 + *(int *)(result + 24)) = v16;
  return result;
}

uint64_t CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v132 = a5;
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v110 = *(void *)(v9 - 8);
  uint64_t v111 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
  MEMORY[0x270FA5388](v112);
  uint64_t v113 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  MEMORY[0x270FA5388](v128);
  uint64_t v130 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)&v101 - v15;
  uint64_t v18 = *a1;
  char v17 = (void *)a1[1];
  uint64_t v19 = *a2;
  uint64_t v129 = a2[1];
  uint64_t v108 = a2[2];
  uint64_t v109 = v19;
  uint64_t v131 = a2[3];
  uint64_t v20 = a2[4];
  uint64_t v106 = a2[5];
  uint64_t v107 = v20;
  int v105 = *((unsigned __int8 *)a2 + 48);
  uint64_t v22 = *a3;
  uint64_t v21 = a3[1];
  uint64_t v23 = *a4;
  uint64_t v24 = a4[1];

  uint64_t v25 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v25, (uint64_t)&v142);
  swift_bridgeObjectRelease();
  if (v143 && (int v26 = v144, swift_bridgeObjectRelease(), v26 == 1)
    || (uint64_t v27 = swift_bridgeObjectRetain(),
        specialized AccessibilityProperties.subscript.getter(v27, (uint64_t)&v142),
        swift_bridgeObjectRelease(),
        (uint64_t v28 = v143) == 0))
  {
    uint64_t v116 = 0;
    uint64_t v117 = 0;
  }
  else
  {
    if (v144 >= 2u)
    {
      swift_bridgeObjectRelease();
      uint64_t v116 = 0;
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v116 = v142;
    }
    uint64_t v117 = v28;
  }
  uint64_t v29 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v29, (uint64_t)&v142);
  swift_bridgeObjectRelease();
  uint64_t v30 = v142;
  uint64_t v142 = v22;
  uint64_t v143 = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v18, (uint64_t)&v140);
  swift_bridgeObjectRelease();
  uint64_t v102 = v11;
  if (v140)
  {
    int v31 = v141;
    swift_bridgeObjectRelease();
    char v32 = v31 == 3;
  }
  else
  {
    char v32 = 0;
  }
  uint64_t v140 = v23;
  uint64_t v141 = v24;
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v30, &v142, v32, &v140, (uint64_t)v149);
  uint64_t v125 = v149[1];
  uint64_t v126 = v149[0];
  LODWORD(v127) = v150 | (v151 << 16);
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = specialized AccessibilityProperties.subscript.getter(v33);
  swift_bridgeObjectRelease();
  uint64_t v142 = v22;
  uint64_t v143 = v21;
  uint64_t v140 = v23;
  uint64_t v141 = v24;
  swift_retain();
  swift_retain();
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v34, &v142, 0, &v140, (uint64_t)v146);
  uint64_t v122 = v146[1];
  uint64_t v123 = v146[0];
  LODWORD(v124) = v147 | (v148 << 16);
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v121 = specialized AccessibilityProperties.subscript.getter(v35);
  uint64_t v37 = v36;
  char v39 = v38;
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  uint64_t v103 = v24;
  uint64_t v104 = v23;
  if (!v41) {
    goto LABEL_14;
  }
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
  uint64_t v42 = swift_allocObject();
  char v43 = v39;
  uint64_t v44 = v42;
  *(_OWORD *)(v42 + 16) = xmmword_2461B9DC0;
  *(void *)(v42 + 32) = v121;
  *(void *)(v42 + 40) = v37;
  *(unsigned char *)(v42 + 48) = v43 & 1;
  *(void *)(v42 + 56) = v41;
  uint64_t v140 = v22;
  uint64_t v141 = v21;
  *(void *)&v137[0] = v23;
  *((void *)&v137[0] + 1) = v24;
  swift_retain();
  swift_retain();
  CodableAccessibilityVersionStorage<>.init(texts:in:optional:idiom:)(v44, &v140, 0, (uint64_t *)v137, (uint64_t)&v142);
  if (v145 != 255)
  {
    int v45 = v144 | (v145 << 16);
    uint64_t v114 = v142;
    uint64_t v115 = v143;
  }
  else
  {
LABEL_14:
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    int v45 = 16711680;
  }
  uint64_t v46 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v46, &v139);
  swift_bridgeObjectRelease();
  uint64_t v47 = v139;
  uint64_t v48 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v48, v138);
  swift_bridgeObjectRelease();
  uint64_t v120 = v138[1];
  uint64_t v121 = v138[0];
  uint64_t v49 = swift_bridgeObjectRetain();
  uint64_t v119 = specialized AccessibilityProperties.subscript.getter(v49);
  int v118 = v50;
  uint64_t v51 = swift_bridgeObjectRetain();
  uint64_t v52 = specialized AccessibilityProperties.subscript.getter(v51);
  char v54 = v53;
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.getter(v18, (uint64_t)v137);
  swift_bridgeObjectRelease();
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v137, (uint64_t)&v140, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)&v140, (uint64_t)&v142, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOg((uint64_t)&v142) == 1)
  {
    _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v135);
    int v55 = v135;
  }
  else
  {
    outlined init with take of CodableAccessibilityValueStorage?((uint64_t)&v140, (uint64_t)v135, &lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for AccessibilityDataSeriesConfiguration);
    memcpy(v134, v135, sizeof(v134));
    v133[0] = v22;
    v133[1] = v21;
    swift_retain();
    swift_retain();
    CodableAccessibilityDataSeriesConfiguration.init(_:in:)(v134, v133, v136);
    _ViewInputs.base.modify(v136);
    int v55 = v136;
  }
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v55, (uint64_t)v134, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
  uint64_t v56 = v128;
  uint64_t v57 = (uint64_t)&v16[*(int *)(v128 + 52)];
  uint64_t v58 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v58, v57);
  uint64_t v59 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v59, v137);
  swift_bridgeObjectRelease_n();
  uint64_t v60 = *(void *)&v137[0];
  uint64_t v61 = v117;
  *(void *)char v16 = v116;
  *((void *)v16 + 1) = v61;
  uint64_t v62 = v125;
  *((void *)v16 + 2) = v126;
  *((void *)v16 + 3) = v62;
  __int16 v63 = v127;
  v16[34] = BYTE2(v127);
  *((_WORD *)v16 + 16) = v63;
  uint64_t v64 = v122;
  *((void *)v16 + 5) = v123;
  *((void *)v16 + 6) = v64;
  __int16 v65 = v124;
  v16[58] = BYTE2(v124);
  *((_WORD *)v16 + 28) = v65;
  uint64_t v66 = v115;
  *((void *)v16 + 8) = v114;
  *((void *)v16 + 9) = v66;
  v16[82] = BYTE2(v45);
  *((_WORD *)v16 + 40) = v45;
  *(void *)(v16 + 84) = v47;
  uint64_t v67 = v120;
  *((void *)v16 + 12) = v121;
  *((void *)v16 + 13) = v67;
  *((void *)v16 + 14) = v119;
  v16[120] = v118 & 1;
  *((void *)v16 + 16) = v52;
  v16[136] = v54 & 1;
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v134, (uint64_t)(v16 + 144), &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
  *(void *)&v16[*(int *)(v56 + 56)] = v60;
  if (one-time initialization token for current != -1) {
    swift_once();
  }
  if (static CodableAccessibilityVersion.current)
  {
    outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v16, v130, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    uint64_t v68 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v68, v135);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI25AccessibilityValueStorageV_s5NeverOAD07CodableefG0VTg503_s7c4UI37ie10Attachmentg78V_08platformF02in5idiomAcA0dE0V_AA0d16PlatformPropertyF0VAA17EnvironmentValuesv28AnyInterfaceIdiomVtcfcAA0cd5fu6VAA0dqU7VXEfU1_AD0wX0VAD0yZ5IdiomVTf1ncn_n((uint64_t)v135, v22, v21, v104, v103, v137);
    outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)v135, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    uint64_t v69 = swift_bridgeObjectRetain();
    uint64_t v70 = specialized AccessibilityProperties.subscript.getter(v69);
    swift_bridgeObjectRelease();
    if (v70)
    {
      swift_retain();
      swift_retain();
      uint64_t v128 = specialized Sequence.compactMap<A>(_:)(v70, v22, v21);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v128 = 0;
    }
    uint64_t v73 = (uint64_t)v102;
    swift_bridgeObjectRetain_n();
    specialized AccessibilityProperties.subscript.getter(v18, (int8x16_t *)v135);
    swift_bridgeObjectRelease();
    if (*(void *)&v135[24])
    {
      uint64_t v125 = *(void *)v135;
      uint64_t v126 = *(void *)&v135[8];
      uint64_t v127 = *(void *)&v135[16];
      outlined consume of AccessibilityActivationPointStorage?(*(uint64_t *)v135, *(uint64_t *)&v135[8], *(uint64_t *)&v135[16], *(uint64_t *)&v135[24]);
    }
    else
    {
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = 255;
    }
    uint64_t v74 = swift_bridgeObjectRetain();
    uint64_t v75 = specialized AccessibilityProperties.subscript.getter(v74);
    swift_bridgeObjectRelease_n();
    uint64_t v76 = *(void *)(v75 + 16);
    swift_bridgeObjectRelease();
    if (v76)
    {
      uint64_t v77 = swift_bridgeObjectRetain();
      uint64_t v78 = specialized AccessibilityProperties.subscript.getter(v77);
      swift_bridgeObjectRelease();
      swift_retain();
      swift_retain();
      uint64_t v124 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI31AccessibilityCustomContentEntryVG_AF07CodablefgH4ListV0jI033_AB2166DCFF9943AF0BA6B5EE55765400LLVs5NeverOTg503_s7d4UI37jfghk17V_2inACSayAA0deF5i38VG_AA17EnvironmentValuesVtcfcAC0cI033_lmnopQ10LLVAFXEfU_AF17EnvironmentValuesVTf1cn_nTf4ng_n(v78, v22, v21);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v124 = 0;
    }
    uint64_t v79 = swift_bridgeObjectRetain();
    char v80 = specialized AccessibilityProperties.subscript.getter(v79);
    uint64_t v81 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v81, v135);
    swift_bridgeObjectRelease_n();
    char v82 = v135[0];
    uint64_t v83 = swift_bridgeObjectRetain();
    uint64_t v84 = specialized AccessibilityProperties.subscript.getter(v83);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain_n();
    if (v21)
    {
      uint64_t v85 = swift_retain();
      specialized PropertyList.Tracker.value<A>(_:for:)(v85, v73);
      swift_release_n();
    }
    else
    {
      swift_retain();
      specialized closure #1 in PropertyList.subscript.getter(v22, v73);
      swift_release_n();
      swift_release();
    }
    swift_release_n();
    uint64_t v86 = Locale.bcp47LanguageCode.getter();
    uint64_t v88 = v87;
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v73, v111);
    uint64_t v89 = v113;
    outlined init with take of CodableAccessibilityAttachmentStorage(v130, v113, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    uint64_t v90 = (int *)v112;
    uint64_t v91 = v89 + *(int *)(v112 + 20);
    uint64_t v92 = v129;
    *(void *)uint64_t v91 = v109;
    *(void *)(v91 + 8) = v92;
    uint64_t v93 = v131;
    *(void *)(v91 + 16) = v108;
    *(void *)(v91 + 24) = v93;
    uint64_t v94 = v106;
    *(void *)(v91 + 32) = v107;
    *(void *)(v91 + 40) = v94;
    *(unsigned char *)(v91 + 48) = v105;
    outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v137, v89 + v90[6], &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
    *(void *)(v89 + v90[7]) = v128;
    uint64_t v95 = v89 + v90[8];
    uint64_t v96 = v126;
    *(void *)uint64_t v95 = v125;
    *(void *)(v95 + 8) = v96;
    *(unsigned char *)(v95 + 16) = v127;
    *(void *)(v89 + v90[9]) = v124;
    *(unsigned char *)(v89 + v90[10]) = v80;
    *(unsigned char *)(v89 + v90[11]) = v82;
    *(void *)(v89 + v90[12]) = v84;
    uint64_t v97 = (uint64_t *)(v89 + v90[13]);
    *uint64_t v97 = v86;
    v97[1] = v88;
    uint64_t v98 = v90[14];
    *(unsigned char *)(v89 + v98) = 2;
    uint64_t v99 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v99, (char *)v137);
    swift_bridgeObjectRelease_n();
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v16, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    *(unsigned char *)(v89 + v98) = v137[0];
    outlined init with take of CodableAccessibilityAttachmentStorage(v89, v132, type metadata accessor for CodableAccessibilityAttachmentStorage.V3);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v71 = closure #2 in CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)(v18, v22, v21);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v72 = v132;
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v16, v132, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
    *(void *)(v72 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0) + 20)) = v71;
  }
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  return swift_storeEnumTagMultiPayload();
}

uint64_t AccessibilityNodeAttachment.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CodableAccessibilityAttachmentStorage(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityNodeAttachment.Storage(v3, (uint64_t)v7, type metadata accessor for AccessibilityNodeAttachment.Storage);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v7, type metadata accessor for AccessibilityNodeAttachment.Storage);
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v7, (uint64_t)v10, type metadata accessor for CodableAccessibilityAttachmentStorage);
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    uint64_t v12 = a1[1];
    uint64_t v13 = (void *)a1[3];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
      uint64_t v13 = (void *)result;
    }
    unint64_t v15 = v13[2];
    unint64_t v14 = v13[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
      uint64_t v13 = (void *)result;
    }
    void v13[2] = v15 + 1;
    v13[v15 + 4] = v12;
    a1[3] = v13;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      a1[1] = v12 + 1;
      specialized CodableAccessibilityVersionStorage.encode(to:)(a1);
      if (!v2)
      {
        ProtobufEncoder.endLengthDelimited()();
        uint64_t v16 = type metadata accessor for AccessibilityNodeAttachment(0);
        if (*(unsigned char *)(v3 + *(int *)(v16 + 20)))
        {
          ProtobufEncoder.encodeVarint(_:)(0x10uLL);
          ProtobufEncoder.encodeVarint(_:)(1uLL);
        }
        uint64_t v17 = a1[2];
        long long v19 = *(_OWORD *)a1;
        uint64_t v20 = v17;
        long long v21 = *(_OWORD *)(a1 + 3);
        ProtobufEncoder.archiveOptions.getter(v22);
        Swift::UInt v18 = *(unsigned __int8 *)(v3 + *(int *)(v16 + 24));
        if (v22[1] >= 2)
        {
          ProtobufEncoder.encodeVarint(_:)(0x20uLL);
          ProtobufEncoder.encodeVarint(_:)(v18);
        }
        else
        {
          specialized ProtobufEncoder.codableField<A>(_:_:)(3, v18, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeAttachment.Kind>, (uint64_t)&type metadata for AccessibilityNodeAttachment.Kind, &lazy cache variable for type metadata for [AccessibilityNodeAttachment.Kind], (void (*)(void))lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind] and conformance <A> [A]);
        }
      }
      return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v10, type metadata accessor for CodableAccessibilityAttachmentStorage);
    }
  }
  return result;
}

uint64_t AccessibilityNodeAttachment.init(from:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v76 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CodableAccessibilityAttachmentStorage(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v75 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v67 - v11;
  type metadata accessor for CodableAccessibilityAttachmentStorage?(0);
  MEMORY[0x270FA5388](v13 - 8);
  char v80 = (uint64_t *)((char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v15);
  uint64_t v77 = (uint64_t)&v67 - v16;
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v67 - v19;
  uint64_t v78 = v8;
  uint64_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
  long long v21 = (void *)(v8 + 56);
  uint64_t v73 = v22;
  uint64_t v74 = v21;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v22)((char *)&v67 - v19, 1, 1, v7, v18);
  id v23 = a1[1];
  unint64_t v24 = (unint64_t)a1[2];
  if ((unint64_t)v23 >= v24)
  {
    BOOL v79 = 0;
    char v26 = 0;
    goto LABEL_4;
  }
  uint64_t v68 = a2;
  uint64_t v69 = v12;
  BOOL v79 = 0;
  char v25 = 2;
  uint64_t v72 = v7;
  uint64_t v70 = v20;
  while (2)
  {
    unint64_t v30 = (unint64_t)a1[3];
    if (!v30) {
      goto LABEL_16;
    }
    id v31 = a1[4];
    if (v23 >= v31)
    {
      if (v31 < v23) {
        goto LABEL_6;
      }
      a1[3] = 0;
LABEL_16:
      unint64_t v30 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
      }
      if (v30 <= 7) {
        goto LABEL_6;
      }
    }
    switch(v30 >> 3)
    {
      case 1uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_6;
        }
        long long v21 = a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v33 = v21[2];
        unint64_t v32 = v21[3];
        if (v33 >= v32 >> 1) {
          long long v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v21);
        }
        void v21[2] = v33 + 1;
        v21[v33 + 4] = v24;
        a1[5] = v21;
        uint64_t v34 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        if (v34 < 0)
        {
          __break(1u);
          goto LABEL_79;
        }
        unint64_t v35 = (unint64_t)a1[1] + v34;
        if (v24 < v35) {
          goto LABEL_6;
        }
        a1[2] = (id)v35;
        uint64_t v36 = v76;
        specialized CodableAccessibilityVersionStorage.init(from:)(a1, v76);
        uint64_t v37 = v36;
        uint64_t v38 = v75;
        outlined init with take of CodableAccessibilityAttachmentStorage(v37, v75, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
        outlined init with take of CodableAccessibilityAttachmentStorage(v38, (uint64_t)v80, type metadata accessor for CodableAccessibilityAttachmentStorage);
        long long v21 = a1[5];
        if (!v21[2]) {
          goto LABEL_80;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
        }
        uint64_t v7 = v72;
        uint64_t v39 = v21[2];
        if (v39)
        {
          uint64_t v40 = v39 - 1;
          uint64_t v41 = (void *)v21[v40 + 4];
          void v21[2] = v40;
          a1[5] = v21;
          a1[2] = v41;
          outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
          long long v21 = v80;
          v73(v80, 0, 1, v7);
          outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v21, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
          goto LABEL_11;
        }
        goto LABEL_81;
      case 2uLL:
        if ((v30 & 7) == 0) {
          goto LABEL_41;
        }
        if ((v30 & 7) != 2) {
          goto LABEL_6;
        }
        uint64_t v42 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        if (v42 < 0) {
          goto LABEL_84;
        }
        unint64_t v43 = (unint64_t)a1[1] + v42;
        if (v24 < v43) {
          goto LABEL_6;
        }
        a1[3] = (id)16;
        a1[4] = (id)v43;
LABEL_41:
        uint64_t v44 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        BOOL v79 = v44 != 0;
        goto LABEL_11;
      case 3uLL:
        if ((v30 & 7) != 2) {
          goto LABEL_6;
        }
        unint64_t v45 = (unint64_t)a1[2];
        long long v21 = a1[6];
        id v71 = *a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v46 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_75;
        }
        uint64_t v47 = v46;
        if (v46 < 0)
        {
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          __break(1u);
          __int16 v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
          uint64_t v66 = v65[2];
          if (!v66)
          {
            __break(1u);
            JUMPOUT(0x24615B958);
          }
          uint64_t v63 = v66 - 1;
          uint64_t v64 = (void *)v65[v63 + 4];
          v65[2] = v63;
          a1[5] = v65;
          a1[2] = v64;
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        uint64_t v48 = a1[1];
        if (v45 < (unint64_t)&v48[v46])
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_75:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        a1[1] = &v48[v46];
        if (v46)
        {
          uint64_t v20 = (char *)(v48 - (unsigned char *)objc_msgSend(objc_retainAutorelease(v71), sel_bytes));
          uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v51 = v50;
          if (__OFADD__(v20, v47)) {
            goto LABEL_82;
          }
          if ((uint64_t)&v20[v47] < (uint64_t)v20) {
            goto LABEL_83;
          }
          uint64_t v52 = v49;
          uint64_t v53 = Data._Representation.subscript.getter();
          uint64_t v54 = v52;
          unint64_t v56 = v55;
          outlined consume of Data._Representation(v54, v51);
        }
        else
        {
          uint64_t v53 = 0;
          unint64_t v56 = 0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for [AccessibilityNodeAttachment.Kind?]();
        lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A], (void (*)(uint64_t))type metadata accessor for [AccessibilityNodeAttachment.Kind?], (void (*)(void))lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind? and conformance <A> A?);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        if (!*(void *)(v81 + 16))
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v53, v56);
          uint64_t v20 = v70;
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        char v61 = *(unsigned char *)(v81 + 32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        char v25 = v61;
        outlined consume of Data._Representation(v53, v56);
        uint64_t v12 = v69;
        uint64_t v20 = v70;
        uint64_t v7 = v72;
LABEL_11:
        id v23 = a1[1];
        unint64_t v24 = (unint64_t)a1[2];
        if ((unint64_t)v23 < v24) {
          continue;
        }
        char v26 = v25 & 1;
        a2 = v68;
LABEL_4:
        a1[3] = 0;
        uint64_t v27 = v77;
        outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v20, v77, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v27, 1, v7) == 1)
        {
          outlined destroy of CodableAccessibilityAttachmentStorage(v27, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
LABEL_6:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        outlined init with take of CodableAccessibilityAttachmentStorage(v27, (uint64_t)v12, type metadata accessor for CodableAccessibilityAttachmentStorage);
        outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v12, a2, type metadata accessor for CodableAccessibilityAttachmentStorage);
        type metadata accessor for AccessibilityNodeAttachment.Storage(0);
        swift_storeEnumTagMultiPayload();
        uint64_t result = type metadata accessor for AccessibilityNodeAttachment(0);
        *(unsigned char *)(a2 + *(int *)(result + 20)) = v79;
        *(unsigned char *)(a2 + *(int *)(result + 24)) = v26;
        return result;
      case 4uLL:
        if ((v30 & 7) == 0) {
          goto LABEL_57;
        }
        if ((v30 & 7) != 2) {
          goto LABEL_6;
        }
        uint64_t v57 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        if (v57 < 0) {
          goto LABEL_85;
        }
        unint64_t v58 = (unint64_t)a1[1] + v57;
        if (v24 < v58) {
          goto LABEL_6;
        }
        a1[3] = (id)32;
        a1[4] = (id)v58;
LABEL_57:
        uint64_t v59 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
        }
        if (v59 == 1) {
          char v60 = 1;
        }
        else {
          char v60 = 2;
        }
        if (v59) {
          char v25 = v60;
        }
        else {
          char v25 = 0;
        }
        goto LABEL_11;
      default:
        switch(v30 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
            }
            goto LABEL_11;
          case 1uLL:
            unint64_t v29 = (unint64_t)a1[1] + 8;
            if (v24 < v29) {
              goto LABEL_6;
            }
            goto LABEL_10;
          case 2uLL:
            uint64_t v62 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage?);
            }
            if (v62 < 0) {
              goto LABEL_86;
            }
            unint64_t v29 = (unint64_t)a1[1] + v62;
            if (v24 < v29) {
              goto LABEL_6;
            }
LABEL_10:
            a1[1] = (id)v29;
            break;
          case 5uLL:
            unint64_t v29 = (unint64_t)a1[1] + 4;
            if (v24 < v29) {
              goto LABEL_6;
            }
            goto LABEL_10;
          default:
            goto LABEL_6;
        }
        goto LABEL_11;
    }
  }
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AccessibilityNodeAttachment(void *a1)
{
  return AccessibilityNodeAttachment.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance AccessibilityNodeAttachment@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityNodeAttachment.init(from:)(a1, a2);
}

uint64_t AccessibilityNodeAttachment.Kind.protobufValue.getter()
{
  return *v0;
}

SwiftUI::AccessibilityNodeAttachment::Kind_optional __swiftcall AccessibilityNodeAttachment.Kind.init(protobufValue:)(Swift::UInt protobufValue)
{
  if (protobufValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!protobufValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::AccessibilityNodeAttachment::Kind_optional)protobufValue;
}

uint64_t one-time initialization function for current()
{
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v0 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v0;
  }
  static CodableAccessibilityVersion.current = result;
  return result;
}

uint64_t specialized CodableAccessibilityVersionStorage.encode(to:)(void *a1)
{
  uint64_t v4 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityNodeAttachment.Storage(v1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v12, (uint64_t)v6, type metadata accessor for CodableAccessibilityAttachmentStorage.V3);
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    uint64_t v13 = a1[1];
    uint64_t v14 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    uint64_t v9 = (char *)(v16 + 1);
    if (v16 >= v15 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    void v14[2] = v9;
    v14[v16 + 4] = v13;
    a1[3] = v14;
    if (!__OFADD__(v13, 1))
    {
      a1[1] = v13 + 1;
      CodableAccessibilityAttachmentStorage.V3.encode(to:)(a1);
      if (!v2) {
        ProtobufEncoder.endLengthDelimited()();
      }
      uint64_t v17 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3;
      uint64_t v18 = (uint64_t)v6;
      return outlined destroy of CodableAccessibilityAttachmentStorage(v18, v17);
    }
    __break(1u);
  }
  else
  {
    outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v12, (uint64_t)v9, type metadata accessor for CodableAccessibilityAttachmentStorage.V2);
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v13 = a1[1];
    uint64_t v14 = (void *)a1[3];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_11;
    }
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  uint64_t v14 = (void *)result;
LABEL_11:
  unint64_t v21 = v14[2];
  unint64_t v20 = v14[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v14);
    uint64_t v14 = (void *)result;
  }
  void v14[2] = v21 + 1;
  v14[v21 + 4] = v13;
  a1[3] = v14;
  if (!__OFADD__(v13, 1))
  {
    a1[1] = v13 + 1;
    CodableAccessibilityAttachmentStorage.V2.encode(to:)(a1);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    uint64_t v17 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2;
    uint64_t v18 = (uint64_t)v9;
    return outlined destroy of CodableAccessibilityAttachmentStorage(v18, v17);
  }
  __break(1u);
  return result;
}

uint64_t CodableAccessibilityVersionStorage.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *, double))(v17 + 16))(v16, v18, a2, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v16, v3);
    ProtobufEncoder.messageField<A>(_:_:)(3, (uint64_t)v6, v3, a2[7]);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v16, v8);
    ProtobufEncoder.messageField<A>(_:_:)(2, (uint64_t)v12, v8, a2[5]);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t specialized CodableAccessibilityVersionStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v55 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v49 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v52 = (uint64_t)&v49 - v11;
  MEMORY[0x270FA5388](v12);
  double v14 = (char *)&v49 - v13;
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  uint64_t v16 = v15;
  uint64_t v51 = *(void *)(v15 - 8);
  uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  v54(v14, 1, 1, v15);
  unint64_t v17 = a1[1];
  unint64_t v18 = a1[2];
  if (v17 < v18)
  {
    uint64_t v53 = v14;
    do
    {
      unint64_t v19 = a1[3];
      if (v19)
      {
        unint64_t v20 = a1[4];
        if (v17 < v20) {
          goto LABEL_11;
        }
        if (v20 < v17) {
          goto LABEL_54;
        }
        a1[3] = 0;
      }
      unint64_t v19 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
      }
      if (v19 <= 7) {
        goto LABEL_54;
      }
LABEL_11:
      if (v19 >> 3 == 2)
      {
        if ((v19 & 7) != 2) {
          goto LABEL_54;
        }
        unint64_t v32 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
        }
        unint64_t v34 = v32[2];
        unint64_t v33 = v32[3];
        uint64_t v3 = (void *)(v34 + 1);
        if (v34 >= v33 >> 1) {
          unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v32);
        }
        void v32[2] = v3;
        v32[v34 + 4] = v18;
        a1[5] = v32;
        uint64_t v35 = ProtobufDecoder.decodeVarint()();
        if (v2)
        {
LABEL_57:
          double v14 = v53;
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
        }
        double v14 = v53;
        if (v35 < 0) {
          goto LABEL_63;
        }
        unint64_t v36 = a1[1] + v35;
        if (v18 < v36) {
          goto LABEL_54;
        }
        a1[2] = v36;
        CodableAccessibilityAttachmentStorage.V2.init(from:)(a1, (uint64_t)v9);
        uint64_t v37 = (void *)a1[5];
        if (!v37[2]) {
          goto LABEL_65;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v38 = v37[2];
          if (!v38) {
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
          uint64_t v38 = v37[2];
          if (!v38)
          {
LABEL_51:
            __break(1u);
            break;
          }
        }
        uint64_t v39 = v38 - 1;
        uint64_t v40 = v37[v39 + 4];
        void v37[2] = v39;
        a1[5] = v37;
        a1[2] = v40;
        outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
        swift_storeEnumTagMultiPayload();
        v54(v9, 0, 1, v16);
        uint64_t v31 = (uint64_t)v9;
      }
      else
      {
        if (v19 >> 3 != 3)
        {
          switch(v19 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v2) {
                return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
              }
              goto LABEL_4;
            case 1uLL:
              unint64_t v41 = a1[1] + 8;
              if (v18 < v41) {
                goto LABEL_54;
              }
              goto LABEL_47;
            case 2uLL:
              uint64_t v42 = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
              }
              if (v42 < 0) {
                goto LABEL_67;
              }
              unint64_t v41 = a1[1] + v42;
              if (v18 < v41) {
                goto LABEL_54;
              }
LABEL_47:
              a1[1] = v41;
              break;
            case 5uLL:
              unint64_t v41 = a1[1] + 4;
              if (v18 >= v41) {
                goto LABEL_47;
              }
              goto LABEL_54;
            default:
              goto LABEL_54;
          }
          goto LABEL_4;
        }
        if ((v19 & 7) != 2) {
          goto LABEL_54;
        }
        unint64_t v21 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        uint64_t v3 = (void *)(v23 + 1);
        if (v23 >= v22 >> 1) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
        }
        void v21[2] = v3;
        v21[v23 + 4] = v18;
        a1[5] = v21;
        uint64_t v24 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_57;
        }
        double v14 = v53;
        if (v24 < 0)
        {
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
          __break(1u);
          unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v46 = v45[2];
          if (!v46)
          {
            __break(1u);
            unint64_t v45 = (void *)a1[5];
            if (v45[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v46 = v45[2];
                if (v46) {
                  goto LABEL_61;
                }
LABEL_71:
                __break(1u);
                JUMPOUT(0x24615C754);
              }
            }
            else
            {
              __break(1u);
            }
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
            uint64_t v46 = v45[2];
            if (!v46) {
              goto LABEL_71;
            }
          }
LABEL_61:
          uint64_t v47 = v46 - 1;
          uint64_t v48 = v45[v47 + 4];
          _OWORD v45[2] = v47;
          a1[5] = v45;
          a1[2] = v48;
          return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
        }
        unint64_t v25 = a1[1] + v24;
        if (v18 < v25) {
          goto LABEL_54;
        }
        a1[2] = v25;
        CodableAccessibilityAttachmentStorage.V3.init(from:)((unint64_t)a1, v55);
        char v26 = (void *)a1[5];
        if (!v26[2]) {
          goto LABEL_64;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_66;
          }
        }
        else
        {
          char v26 = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          uint64_t v27 = v26[2];
          if (!v27) {
            goto LABEL_66;
          }
        }
        uint64_t v28 = v27 - 1;
        uint64_t v29 = v26[v28 + 4];
        uint64_t v26[2] = v28;
        a1[5] = v26;
        a1[2] = v29;
        outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
        uint64_t v30 = v55;
        swift_storeEnumTagMultiPayload();
        v54((char *)v30, 0, 1, v16);
        uint64_t v31 = v30;
      }
      outlined init with take of CodableAccessibilityAttachmentStorage(v31, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
LABEL_4:
      unint64_t v17 = a1[1];
      unint64_t v18 = a1[2];
    }
    while (v17 < v18);
  }
  a1[3] = 0;
  uint64_t v43 = v52;
  outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v14, v52, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v43, 1, v16) == 1)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(v43, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
LABEL_54:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
  }
  outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?);
  return outlined init with take of CodableAccessibilityAttachmentStorage(v43, v50, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
}

void specialized CodableAccessibilityVersionStorage.init(from:)(void *a1@<X0>, id **a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 < v6)
  {
    uint64_t v37 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    int v9 = 16711680;
    while (1)
    {
      unint64_t v11 = a1[3];
      if (!v11) {
        goto LABEL_12;
      }
      unint64_t v12 = a1[4];
      if (v5 >= v12) {
        break;
      }
LABEL_14:
      if (v11 >> 3 == 2)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_53;
        }
        unint64_t v20 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v3 = v20[2];
        unint64_t v21 = v20[3];
        if (v3 >= v21 >> 1) {
          unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v3 + 1, 1, v20);
        }
        _OWORD v20[2] = v3 + 1;
        v20[v3 + 4] = v6;
        a1[5] = v20;
        uint64_t v22 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        if (v22 < 0) {
          goto LABEL_62;
        }
        unint64_t v23 = a1[1] + v22;
        if (v6 < v23) {
          goto LABEL_53;
        }
        a1[2] = v23;
        unint64_t v24 = specialized CodableResolvedStyledText.init(from:)((unint64_t)a1);
        unint64_t v25 = (void *)a1[5];
        if (!v25[2]) {
          goto LABEL_64;
        }
        char v26 = (id *)v24;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v27 = v25[2];
          if (!v27) {
            goto LABEL_52;
          }
        }
        else
        {
          unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew()(v25);
          uint64_t v27 = v25[2];
          if (!v27)
          {
LABEL_52:
            __break(1u);
LABEL_53:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_54:
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, (uint64_t)v8, v9);
            return;
          }
        }
        uint64_t v28 = v27 - 1;
        unint64_t v3 = v25[v28 + 4];
        void v25[2] = v28;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, (uint64_t)v8, v9);
        int v9 = 0;
        a1[5] = v25;
        a1[2] = v3;
        uint64_t v7 = v26;
        LOBYTE(v35[0]) = 0;
      }
      else if (v11 >> 3 == 3)
      {
        if ((v11 & 7) != 2) {
          goto LABEL_53;
        }
        uint64_t v13 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v3 = v13[2];
        unint64_t v14 = v13[3];
        if (v3 >= v14 >> 1) {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v3 + 1, 1, v13);
        }
        void v13[2] = v3 + 1;
        v13[v3 + 4] = v6;
        a1[5] = v13;
        uint64_t v15 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_54;
        }
        if (v15 < 0)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
          __break(1u);
          uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
          uint64_t v32 = v31[2];
          if (!v32)
          {
            __break(1u);
            uint64_t v31 = (void *)a1[5];
            if (v31[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v32 = v31[2];
                if (v32) {
                  goto LABEL_60;
                }
LABEL_70:
                __break(1u);
                JUMPOUT(0x24615CC6CLL);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew()(v31);
            uint64_t v32 = v31[2];
            if (!v32) {
              goto LABEL_70;
            }
          }
LABEL_60:
          uint64_t v33 = v32 - 1;
          uint64_t v34 = v31[v33 + 4];
          void v31[2] = v33;
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, (uint64_t)v8, v9);
          a1[5] = v31;
          a1[2] = v34;
          return;
        }
        unint64_t v16 = a1[1] + v15;
        if (v6 < v16) {
          goto LABEL_53;
        }
        a1[2] = v16;
        AccessibilityText.init(from:)((uint64_t)a1, v35);
        unint64_t v17 = (void *)a1[5];
        if (!v17[2]) {
          goto LABEL_63;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v18 = v17[2];
          if (!v18) {
            goto LABEL_65;
          }
        }
        else
        {
          unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
          uint64_t v18 = v17[2];
          if (!v18) {
            goto LABEL_65;
          }
        }
        uint64_t v19 = v18 - 1;
        unint64_t v3 = v17[v19 + 4];
        long long v17[2] = v19;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v7, (uint64_t)v8, v9);
        a1[5] = v17;
        a1[2] = v3;
        uint64_t v7 = v35[0];
        uint64_t v8 = v35[1];
        int v9 = v36 | 0x10000;
      }
      else
      {
        switch(v11 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_54;
            }
            break;
          case 1uLL:
            unint64_t v10 = a1[1] + 8;
            if (v6 >= v10) {
              goto LABEL_6;
            }
            goto LABEL_53;
          case 2uLL:
            uint64_t v29 = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_54;
            }
            if (v29 < 0) {
              goto LABEL_66;
            }
            unint64_t v10 = a1[1] + v29;
            if (v6 < v10) {
              goto LABEL_53;
            }
LABEL_6:
            a1[1] = v10;
            break;
          case 5uLL:
            unint64_t v10 = a1[1] + 4;
            if (v6 < v10) {
              goto LABEL_53;
            }
            goto LABEL_6;
          default:
            goto LABEL_53;
        }
      }
      unint64_t v5 = a1[1];
      unint64_t v6 = a1[2];
      if (v5 >= v6)
      {
        a1[3] = 0;
        if (BYTE2(v9) == 255) {
          goto LABEL_4;
        }
        uint64_t v30 = v37;
        *uint64_t v37 = v7;
        v30[1] = v8;
        *((_WORD *)v30 + 8) = v9;
        *((unsigned char *)v30 + 18) = BYTE2(v9) & 1;
        return;
      }
    }
    if (v12 < v5) {
      goto LABEL_53;
    }
    a1[3] = 0;
LABEL_12:
    unint64_t v11 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_54;
    }
    if (v11 < 8) {
      goto LABEL_53;
    }
    goto LABEL_14;
  }
  a1[3] = 0;
LABEL_4:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
}

uint64_t CodableAccessibilityVersionStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a8;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  v49[0] = a2;
  v49[1] = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a6;
  _OWORD v49[2] = a4;
  void v49[3] = a5;
  v49[4] = a6;
  v49[5] = a7;
  uint64_t v10 = type metadata accessor for CodableAccessibilityVersionStorage();
  uint64_t v50 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v50 - 8);
  MEMORY[0x270FA5388](v50);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v39 - v15;
  MEMORY[0x270FA5388](v17);
  unint64_t v41 = (char *)&v39 - v18;
  v20.n128_f64[0] = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v40 + 56);
  v48((char *)&v39 - v21, 1, 1, v10, v20);
  unint64_t v23 = a1[1];
  unint64_t v24 = a1[2];
  uint64_t v42 = v11;
  if (v23 >= v24)
  {
LABEL_26:
    a1[3] = 0;
    uint64_t v33 = v41;
    uint64_t v32 = v42;
    uint64_t v34 = v50;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v41, v22, v50);
    uint64_t v35 = v40;
    int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v10);
    uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
    if (v36 == 1)
    {
      v37(v33, v34);
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return ((uint64_t (*)(char *, uint64_t))v37)(v22, v34);
    }
    else
    {
      v37(v22, v34);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v39, v33, v10);
    }
  }
  uint64_t v47 = (uint64_t (**)(char *, uint64_t))(v11 + 8);
  unint64_t v25 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  while (1)
  {
    unint64_t v27 = a1[3];
    if (v27)
    {
      unint64_t v28 = a1[4];
      if (v23 < v28) {
        goto LABEL_12;
      }
      if (v28 < v23) {
        break;
      }
      a1[3] = 0;
    }
    unint64_t v27 = ProtobufDecoder.decodeVarint()();
    if (v8) {
      return (*v47)(v22, v50);
    }
    if (v27 < 8) {
      break;
    }
LABEL_12:
    if (v27 >> 3 == 3)
    {
      v49[0] = v27;
      ProtobufDecoder.messageField<A>(_:)(v49, v44, v46);
      if (v8) {
        return (*v47)(v22, v50);
      }
      uint64_t v29 = v50;
      (*v47)(v22, v50);
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, void, uint64_t, uint64_t))v48)(v13, 0, 1, v10);
      (*v25)(v22, v13, v29);
    }
    else if (v27 >> 3 == 2)
    {
      v49[0] = v27;
      ProtobufDecoder.messageField<A>(_:)(v49, v43, v45);
      if (v8) {
        return (*v47)(v22, v50);
      }
      uint64_t v26 = v50;
      (*v47)(v22, v50);
      swift_storeEnumTagMultiPayload();
      ((void (*)(char *, void, uint64_t, uint64_t))v48)(v16, 0, 1, v10);
      (*v25)(v22, v16, v26);
    }
    else
    {
      switch(v27 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v8) {
            return (*v47)(v22, v50);
          }
          goto LABEL_5;
        case 1uLL:
          unint64_t v30 = a1[1] + 8;
          break;
        case 2uLL:
          uint64_t v31 = ProtobufDecoder.decodeVarint()();
          if (v8) {
            return (*v47)(v22, v50);
          }
          if (v31 < 0)
          {
            __break(1u);
            JUMPOUT(0x24615D16CLL);
          }
          unint64_t v30 = a1[1] + v31;
          break;
        case 5uLL:
          unint64_t v30 = a1[1] + 4;
          break;
        default:
          goto LABEL_29;
      }
      if (v24 < v30) {
        break;
      }
      a1[1] = v30;
    }
LABEL_5:
    unint64_t v23 = a1[1];
    unint64_t v24 = a1[2];
    if (v23 >= v24) {
      goto LABEL_26;
    }
  }
LABEL_29:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return (*v47)(v22, v50);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityVersionStorage<A, B>(uint64_t a1, void *a2)
{
  return CodableAccessibilityVersionStorage.encode(to:)(a1, a2);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityVersionStorage<A, B>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CodableAccessibilityVersionStorage.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableAccessibilityVersionStorage<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return CodableByProtobuf.init(from:)(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableAccessibilityVersionStorage<A, B>(void *a1)
{
  return CodableByProtobuf.encode(to:)(a1);
}

uint64_t AccessibilityPlatformPropertyStorage.explicitRole.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityPlatformPropertyStorage.explicitRole.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*AccessibilityPlatformPropertyStorage.explicitRole.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AccessibilityPlatformPropertyStorage.explicitSubrole.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityPlatformPropertyStorage.explicitSubrole.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AccessibilityPlatformPropertyStorage.explicitSubrole.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityPlatformPropertyStorage.explicitTraits.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = v1[3].n128_u8[0];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 AccessibilityPlatformPropertyStorage.explicitTraits.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  v1[2] = *a1;
  v1[3].n128_u8[0] = v2;
  return result;
}

uint64_t (*AccessibilityPlatformPropertyStorage.explicitTraits.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 AccessibilityPlatformPropertyStorage.init(explicitRole:explicitSubrole:explicitTraits:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, __n128 *a6@<X8>)
{
  unsigned __int8 v6 = a5[1].n128_u8[0];
  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  __n128 result = *a5;
  a6[2] = *a5;
  a6[3].n128_u8[0] = v6;
  return result;
}

void *closure #2 in CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v5, &v18);
  swift_bridgeObjectRelease();
  if (*(void *)&v20[8])
  {
    v25[1] = v19;
    void v25[2] = *(_OWORD *)v20;
    v25[0] = v18;
    uint64_t v6 = *(void *)&v20[8];
    *(void *)&long long v18 = a2;
    *((void *)&v18 + 1) = a3;
    long long v24 = 0uLL;
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = (void *)static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)(v7, &v18, 0, 1, 0, 0, &v24, 8236, 0xE200000000000000);
    swift_bridgeObjectRelease();
    if (v8)
    {
      *(void *)&long long v24 = a2;
      *((void *)&v24 + 1) = a3;
      uint64_t v9 = *(void *)(v6 + 16);
      if (v9)
      {
        id v10 = v8;
        swift_bridgeObjectRetain_n();
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = *(void *)(v6 + 32 + 32 * v11 + 24);
          uint64_t v13 = *(void *)(v12 + 16);
          if (v13) {
            break;
          }
LABEL_6:
          if (++v11 == v9)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_15;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v14 = (unsigned char *)(v12 + 40);
        while (1)
        {
          if ((*v14 & 0xE0) == 0xC0)
          {
            type metadata accessor for CollapsibleTextModifier();
            if (swift_dynamicCastClass()) {
              break;
            }
          }
          v14 += 16;
          if (!--v13)
          {
            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        char v15 = 1;
      }
      else
      {
        id v10 = v8;
LABEL_15:
        char v15 = 0;
      }
      unsigned __int8 v23 = 2;
      __int16 v22 = 512;
      __int16 v21 = 0;
      *(void *)__n128 v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)&v20[8] = xmmword_24619B530;
      uint64_t v17 = MEMORY[0x263F8EE78];
      uint64_t v8 = (void *)specialized static ResolvedStyledText.styledText(storage:stylePadding:environment:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:writingMode:sizeFitting:)(v8, (unint64_t *)&v24, (char *)&v22, v15, &v21, &v18, &v17, MEMORY[0x263F8EE78], 0.0, 0.0, 0.0, 0.0, MEMORY[0x263F8EE78], &v23, 0);
    }
    outlined destroy of AccessibilityValueStorage((uint64_t)v25);
  }
  else
  {
    outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v18, &lazy cache variable for type metadata for AccessibilityValueStorage?, (uint64_t)&type metadata for AccessibilityValueStorage);
    return 0;
  }
  return v8;
}

uint64_t CodableAccessibilityAttachmentStorage.encode(to:)(void *a1)
{
  return specialized CodableAccessibilityVersionStorage.encode(to:)(a1);
}

uint64_t CodableAccessibilityAttachmentStorage.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = specialized CodableAccessibilityVersionStorage.init(from:)(a1, (uint64_t)v7);
  if (!v2) {
    return outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityAttachmentStorage(void *a1)
{
  return specialized CodableAccessibilityVersionStorage.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityAttachmentStorage@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = specialized CodableAccessibilityVersionStorage.init(from:)(a1, (uint64_t)v7);
  if (!v2) {
    return outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
  }
  return result;
}

void CodableAccessibilityAttachmentStorage.VBase.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v40 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v39 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v3 + 8);
  if (!v9
    || !*(void *)v3 && v9 == 0xE000000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (ProtobufEncoder.stringFieldAlways(_:_:)(1), !v2))
  {
    if (*(unsigned __int8 *)(v3 + 34) != 255)
    {
      id v10 = *(void **)(v3 + 16);
      uint64_t v11 = *(void *)(v3 + 24);
      unsigned int v12 = *(unsigned __int16 *)(v3 + 32) | (*(unsigned __int8 *)(v3 + 34) << 16);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, *(_WORD *)(v3 + 32), BYTE2(v12) & 1);
      ProtobufEncoder.encodeVarint(_:)(0x12uLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v10, v11, (unsigned __int16)v12 | ((HIWORD(v12) & 1) << 16));
      uint64_t v13 = v10;
      uint64_t v14 = v11;
      int v15 = v12;
      if (v2)
      {
LABEL_11:
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v13, v14, v15);
        return;
      }
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v10, v11, v12);
    }
    if (*(unsigned __int8 *)(v3 + 58) != 255)
    {
      unint64_t v16 = *(void **)(v3 + 40);
      uint64_t v17 = *(void *)(v3 + 48);
      unsigned int v18 = *(unsigned __int16 *)(v3 + 56) | (*(unsigned __int8 *)(v3 + 58) << 16);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, *(_WORD *)(v3 + 56), BYTE2(v18) & 1);
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v16, v17, (unsigned __int16)v18 | ((HIWORD(v18) & 1) << 16));
      uint64_t v13 = v16;
      uint64_t v14 = v17;
      int v15 = v18;
      if (v2) {
        goto LABEL_11;
      }
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v16, v17, v18);
    }
    if (*(unsigned __int8 *)(v3 + 82) == 255
      || (unsigned int v19 = *(unsigned __int16 *)(v3 + 80) | (*(unsigned __int8 *)(v3 + 82) << 16),
          __int16 v21 = *(void **)(v3 + 64),
          uint64_t v20 = *(void *)(v3 + 72),
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v21, v20, *(_WORD *)(v3 + 80), BYTE2(v19) & 1), ProtobufEncoder.encodeVarint(_:)(0x22uLL), specialized ProtobufEncoder.encodeMessage<A>(_:)(v21, v20, (unsigned __int16)v19 | ((HIWORD(v19) & 1) << 16)), outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(v21, v20, v19), !v2))
    {
      unint64_t v22 = *(void *)(v3 + 84);
      ProtobufEncoder.encodeVarint(_:)(0x2AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v22);
      if (!v2)
      {
        Swift::UInt v23 = *(void *)(v3 + 96);
        Swift::UInt v24 = *(void *)(v3 + 104);
        ProtobufEncoder.encodeVarint(_:)(0x32uLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v23, v24);
        if (*(unsigned char *)(v3 + 120))
        {
LABEL_23:
          if (*(unsigned char *)(v3 + 136))
          {
LABEL_28:
            outlined init with take of CodableAccessibilityValueStorage?(v3 + 144, (uint64_t)v43, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
            outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
            if (_s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOg((uint64_t)v44) != 1)
            {
              memcpy(v45, v44, 0x108uLL);
              outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v43, (uint64_t)v42, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
              outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)v42);
              specialized ProtobufEncoder.codableField<A>(_:_:)(9, v45);
              outlined release of CodableAccessibilityDataSeriesConfiguration?((uint64_t)v43);
            }
            uint64_t v33 = (uint64_t)v41;
            uint64_t v34 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
            outlined init with copy of AccessibilityNodeAttachment.Storage(v3 + *(int *)(v34 + 52), v33, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v33, 1, v7) == 1)
            {
              outlined destroy of CodableAccessibilityAttachmentStorage(v33, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
            }
            else
            {
              uint64_t v35 = v33;
              uint64_t v36 = v39;
              outlined init with take of CodableAccessibilityAttachmentStorage(v35, v39, type metadata accessor for LinkDestination.Configuration);
              specialized ProtobufEncoder.codableField<A>(_:_:)(10, v36, specialized ProtobufEncoder.binaryPlistData<A>(for:));
              outlined destroy of CodableAccessibilityAttachmentStorage(v36, type metadata accessor for LinkDestination.Configuration);
            }
            uint64_t v37 = *(void *)(v3 + *(int *)(v34 + 56));
            if (v37) {
              specialized ProtobufEncoder.codableField<A>(_:_:)(11, v37, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomAttributes>, (uint64_t)&type metadata for AccessibilityCustomAttributes, &lazy cache variable for type metadata for [AccessibilityCustomAttributes], (void (*)(void))lazy protocol witness table accessor for type [AccessibilityCustomAttributes] and conformance <A> [A]);
            }
            return;
          }
          uint64_t v29 = *(void *)(v3 + 128);
          ProtobufEncoder.encodeVarint(_:)(0x41uLL);
          uint64_t v30 = a1[1];
          int64_t v31 = v30 + 8;
          if (__OFADD__(v30, 8))
          {
            __break(1u);
          }
          else if (a1[2] >= v31)
          {
            a1[1] = v31;
            uint64_t v32 = (void *)(*a1 + v30);
LABEL_27:
            *uint64_t v32 = v29;
            goto LABEL_28;
          }
          uint64_t v32 = (void *)ProtobufEncoder.growBufferSlow(to:)(v31);
          goto LABEL_27;
        }
        uint64_t v25 = *(void *)(v3 + 112);
        ProtobufEncoder.encodeVarint(_:)(0x39uLL);
        uint64_t v26 = a1[1];
        int64_t v27 = v26 + 8;
        if (__OFADD__(v26, 8))
        {
          __break(1u);
        }
        else if (a1[2] >= v27)
        {
          a1[1] = v27;
          unint64_t v28 = (void *)(*a1 + v26);
LABEL_22:
          *unint64_t v28 = v25;
          goto LABEL_23;
        }
        unint64_t v28 = (void *)ProtobufEncoder.growBufferSlow(to:)(v27);
        goto LABEL_22;
      }
    }
  }
}

void CodableAccessibilityAttachmentStorage.VBase.init(from:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v140 = (uint64_t)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v139 = (uint64_t)&v126 - v9;
  uint64_t v10 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v142 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  long long v143 = 0u;
  *(unsigned char *)(a2 + 34) = -1;
  *(_WORD *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 58) = -1;
  *(_WORD *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 82) = -1;
  *(_WORD *)(a2 + 80) = 0;
  *(void *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 120) = 1;
  *(unsigned char *)(a2 + 136) = 1;
  *(void *)(a2 + 128) = 0;
  _s7SwiftUI43CodableAccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v152);
  uint64_t v153 = a2 + 144;
  outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v152, a2 + 144, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
  uint64_t v12 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v13 = a2 + *(int *)(v12 + 52);
  uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
  uint64_t v146 = v13;
  uint64_t v141 = v16;
  v16(v13, 1, 1, v14);
  uint64_t v145 = *(int *)(v12 + 56);
  *(void *)(a2 + v145) = 0;
  unint64_t v17 = *(void *)(a1 + 8);
  unint64_t v18 = *(void *)(a1 + 16);
  if (v17 >= v18)
  {
    *(void *)(a1 + 24) = 0;
LABEL_4:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v135 = v15;
  uint64_t v136 = 0;
  uint64_t v133 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  uint64_t v134 = v15 + 56;
  int v137 = 1;
  int v138 = 1;
  uint64_t v144 = v14;
  while (2)
  {
    unint64_t v28 = *(void *)(a1 + 24);
    if (v28)
    {
      unint64_t v29 = *(void *)(a1 + 32);
      if (v17 < v29) {
        goto LABEL_20;
      }
      if (v29 < v17) {
        goto LABEL_4;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v28 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_5;
    }
    if (v28 <= 7) {
      goto LABEL_4;
    }
LABEL_20:
    switch(v28 >> 3)
    {
      case 1uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        uint64_t v30 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_5;
        }
        unsigned int v19 = (void *)v30;
        if (v30 < 0)
        {
          __break(1u);
          goto LABEL_179;
        }
        uint64_t v31 = *(void *)(a1 + 8);
        if (v18 < v31 + v30) {
          goto LABEL_4;
        }
        *(void *)(a1 + 8) = v31 + v30;
        if (v30)
        {
          uint64_t v32 = v31 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v34;
          if (__OFADD__(v32, v19)) {
            goto LABEL_193;
          }
          if ((uint64_t)v19 + v32 < v32) {
            goto LABEL_199;
          }
          uint64_t v35 = v33;
          uint64_t v36 = Data._Representation.subscript.getter();
          unint64_t v38 = v37;
          outlined consume of Data._Representation(v35, v15);
        }
        else
        {
          uint64_t v36 = 0;
          unint64_t v38 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v104 = String.init(data:encoding:)();
        if (v105)
        {
          uint64_t v106 = v104;
          uint64_t v15 = v105;
          outlined consume of Data._Representation(v36, v38);
          swift_bridgeObjectRelease();
          *(void *)a2 = v106;
          *(void *)(a2 + 8) = v15;
          goto LABEL_13;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v36, v38);
        goto LABEL_5;
      case 2uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_5;
        }
        specialized CodableAccessibilityVersionStorage.init(from:)((void *)a1, (id **)&v149);
        uint64_t v3 = 0;
        unsigned int v19 = *(void **)(a1 + 40);
        if (!v19[2]) {
          goto LABEL_184;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_185;
          }
        }
        else
        {
          unsigned int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v20 = v19[2];
          if (!v20) {
            goto LABEL_185;
          }
        }
        uint64_t v21 = v20 - 1;
        uint64_t v22 = v19[v21 + 4];
        uint64_t v19[2] = v21;
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 16) = v22;
        uint64_t v24 = *((void *)&v149 + 1);
        uint64_t v23 = v149;
        __int16 v25 = v150;
        if (v151) {
          uint64_t v15 = 0x10000;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v27 = a2 + 32;
        int v26 = *(unsigned __int16 *)(a2 + 32);
        goto LABEL_11;
      case 3uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_5;
        }
        specialized CodableAccessibilityVersionStorage.init(from:)((void *)a1, (id **)&v149);
        uint64_t v3 = 0;
        unsigned int v19 = *(void **)(a1 + 40);
        if (!v19[2]) {
          goto LABEL_186;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v39 = v19[2];
          if (!v39) {
            goto LABEL_188;
          }
        }
        else
        {
          unsigned int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v39 = v19[2];
          if (!v39) {
            goto LABEL_188;
          }
        }
        uint64_t v40 = v39 - 1;
        uint64_t v41 = v19[v40 + 4];
        uint64_t v19[2] = v40;
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 16) = v41;
        uint64_t v24 = *((void *)&v149 + 1);
        uint64_t v23 = v149;
        __int16 v25 = v150;
        if (v151) {
          uint64_t v15 = 0x10000;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v27 = a2 + 56;
        int v26 = *(unsigned __int16 *)(a2 + 56);
        goto LABEL_11;
      case 4uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_5;
        }
        specialized CodableAccessibilityVersionStorage.init(from:)((void *)a1, (id **)&v149);
        uint64_t v3 = 0;
        unsigned int v19 = *(void **)(a1 + 40);
        if (!v19[2]) {
          goto LABEL_187;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v42 = v19[2];
          if (!v42) {
            goto LABEL_189;
          }
        }
        else
        {
          unsigned int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          uint64_t v42 = v19[2];
          if (!v42) {
            goto LABEL_189;
          }
        }
        uint64_t v43 = v42 - 1;
        uint64_t v44 = v19[v43 + 4];
        uint64_t v19[2] = v43;
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 16) = v44;
        uint64_t v24 = *((void *)&v149 + 1);
        uint64_t v23 = v149;
        __int16 v25 = v150;
        if (v151) {
          uint64_t v15 = 0x10000;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v27 = a2 + 80;
        int v26 = *(unsigned __int16 *)(a2 + 80);
LABEL_11:
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(*(void **)(v27 - 16), *(void *)(v27 - 8), v26 | (*(unsigned __int8 *)(v27 + 2) << 16));
        *(void *)(v27 - 16) = v23;
        *(void *)(v27 - 8) = v24;
        *(unsigned char *)(v27 + 2) = BYTE2(v15);
        *(_WORD *)uint64_t v27 = v25;
        goto LABEL_12;
      case 5uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        uint64_t v45 = *(void **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45);
        }
        uint64_t v15 = v45[2];
        unint64_t v46 = v45[3];
        if (v15 >= v46 >> 1) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v15 + 1, 1, v45);
        }
        _OWORD v45[2] = v15 + 1;
        v45[v15 + 4] = v18;
        *(void *)(a1 + 40) = v45;
        unsigned int v19 = (void *)a1;
        uint64_t v47 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_5;
        }
        if ((v47 & 0x8000000000000000) == 0)
        {
          unint64_t v48 = *(void *)(a1 + 8) + v47;
          if (v18 < v48) {
            goto LABEL_4;
          }
          *(void *)(a1 + 16) = v48;
          specialized AccessibilityNullableOptionSet.init(from:)(a1, &v149);
          unsigned int v19 = *(void **)(a1 + 40);
          if (!v19[2]) {
            goto LABEL_190;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v49 = v19[2];
            if (!v49) {
              goto LABEL_192;
            }
          }
          else
          {
            unsigned int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            uint64_t v49 = v19[2];
            if (!v49) {
              goto LABEL_192;
            }
          }
          int v137 = 0;
          uint64_t v50 = v49 - 1;
          uint64_t v51 = v19[v50 + 4];
          uint64_t v19[2] = v50;
          *(void *)(a1 + 40) = v19;
          *(void *)(a1 + 16) = v51;
          uint64_t v136 = v149;
LABEL_13:
          unint64_t v17 = *(void *)(a1 + 8);
          unint64_t v18 = *(void *)(a1 + 16);
          if (v17 >= v18) {
            goto LABEL_157;
          }
          continue;
        }
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
        __break(1u);
        uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        uint64_t v123 = v122[2];
        if (v123) {
          goto LABEL_173;
        }
        __break(1u);
        uint64_t v122 = *(void **)(a1 + 40);
        if (v122[2])
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v123 = v122[2];
            if (!v123) {
              goto LABEL_163;
            }
LABEL_173:
            uint64_t v124 = v123 - 1;
            uint64_t v125 = v122[v124 + 4];
            v122[2] = v124;
            *(void *)(a1 + 40) = v122;
            *(void *)(a1 + 16) = v125;
            goto LABEL_5;
          }
        }
        else
        {
          __break(1u);
        }
        uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v122);
        uint64_t v123 = v122[2];
        if (v123) {
          goto LABEL_173;
        }
LABEL_163:
        __break(1u);
        uint64_t v122 = *(void **)(a1 + 40);
        if (!v122[2])
        {
          __break(1u);
LABEL_209:
          uint64_t v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v122);
          uint64_t v123 = v122[2];
          if (v123) {
            goto LABEL_173;
          }
          goto LABEL_166;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_209;
        }
        uint64_t v123 = v122[2];
        if (v123) {
          goto LABEL_173;
        }
LABEL_166:
        __break(1u);
LABEL_167:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_168:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_5:
        swift_bridgeObjectRelease();
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(*(void **)(a2 + 16), *(void *)(a2 + 24), *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16));
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(*(void **)(a2 + 40), *(void *)(a2 + 48), *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16));
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(*(void **)(a2 + 64), *(void *)(a2 + 72), *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16));
        outlined init with take of CodableAccessibilityValueStorage?(v153, (uint64_t)&v149, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
        outlined release of CodableAccessibilityDataSeriesConfiguration?((uint64_t)&v149);
        outlined destroy of CodableAccessibilityAttachmentStorage(v146, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
        swift_bridgeObjectRelease();
        return;
      case 6uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        uint64_t v52 = *(void **)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
        }
        uint64_t v15 = v52[2];
        unint64_t v53 = v52[3];
        if (v15 >= v53 >> 1) {
          uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v15 + 1, 1, v52);
        }
        v52[2] = v15 + 1;
        v52[v15 + 4] = v18;
        *(void *)(a1 + 40) = v52;
        unsigned int v19 = (void *)a1;
        uint64_t v54 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_5;
        }
        if (v54 < 0) {
          goto LABEL_180;
        }
        unint64_t v55 = *(void *)(a1 + 8) + v54;
        if (v18 < v55) {
          goto LABEL_4;
        }
        *(void *)(a1 + 16) = v55;
        specialized AccessibilityNullableOptionSet.init(from:)(a1, (unint64_t *)&v149);
        unsigned int v19 = *(void **)(a1 + 40);
        if (!v19[2]) {
          goto LABEL_191;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v56 = v19[2];
          if (!v56) {
            goto LABEL_156;
          }
          goto LABEL_79;
        }
        unsigned int v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        uint64_t v56 = v19[2];
        if (v56)
        {
LABEL_79:
          int v138 = 0;
          uint64_t v57 = v56 - 1;
          uint64_t v58 = v19[v57 + 4];
          uint64_t v19[2] = v57;
          *(void *)(a1 + 40) = v19;
          *(void *)(a1 + 16) = v58;
          long long v143 = v149;
          goto LABEL_13;
        }
LABEL_156:
        __break(1u);
LABEL_157:
        *(void *)(a1 + 24) = 0;
        if (((v137 | v138) & 1) == 0)
        {
          *(void *)(a2 + 84) = v136;
          *(_OWORD *)(a2 + 96) = v143;
          return;
        }
        goto LABEL_4;
      case 7uLL:
        unint64_t v59 = v28 & 7;
        if (v59 == 5)
        {
          uint64_t v116 = *(float **)(a1 + 8);
          if (v18 < (unint64_t)(v116 + 1)) {
            goto LABEL_4;
          }
          float v117 = *v116;
          *(void *)(a1 + 8) = v116 + 1;
          double v118 = v117;
        }
        else
        {
          if (v59 == 2)
          {
            unsigned int v19 = (void *)a1;
            uint64_t v119 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_5;
            }
            if (v119 < 0) {
              goto LABEL_202;
            }
            char v60 = *(double **)(a1 + 8);
            if (v18 < (unint64_t)v60 + v119) {
              goto LABEL_4;
            }
            *(void *)(a1 + 24) = 57;
            *(void *)(a1 + 32) = (char *)v60 + v119;
          }
          else
          {
            if (v59 != 1) {
              goto LABEL_4;
            }
            char v60 = *(double **)(a1 + 8);
          }
          if (v18 < (unint64_t)(v60 + 1)) {
            goto LABEL_4;
          }
          double v118 = *v60;
          *(void *)(a1 + 8) = v60 + 1;
        }
        *(double *)(a2 + 112) = v118;
        *(unsigned char *)(a2 + 120) = 0;
        goto LABEL_13;
      case 8uLL:
        if ((v28 & 7) == 2)
        {
          unsigned int v19 = (void *)a1;
          uint64_t v101 = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_5;
          }
          if (v101 < 0) {
            goto LABEL_201;
          }
          char v61 = *(uint64_t **)(a1 + 8);
          if (v18 < (unint64_t)v61 + v101) {
            goto LABEL_4;
          }
          *(void *)(a1 + 24) = 65;
          *(void *)(a1 + 32) = (char *)v61 + v101;
        }
        else
        {
          if ((v28 & 7) != 1) {
            goto LABEL_4;
          }
          char v61 = *(uint64_t **)(a1 + 8);
        }
        uint64_t v102 = v61 + 1;
        if (v18 < (unint64_t)(v61 + 1)) {
          goto LABEL_4;
        }
        uint64_t v103 = *v61;
        *(void *)(a1 + 8) = v102;
        *(void *)(a2 + 128) = v103;
        *(unsigned char *)(a2 + 136) = 0;
        goto LABEL_13;
      case 9uLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        unint64_t v62 = *(void *)(a1 + 16);
        uint64_t v64 = *(void **)(a1 + 40);
        uint64_t v63 = *(void *)(a1 + 48);
        uint64_t v15 = (uint64_t)*(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v65 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_168;
        }
        unsigned int v19 = (void *)v65;
        uint64_t v132 = v63;
        if (v65 < 0) {
          goto LABEL_181;
        }
        uint64_t v66 = *(void *)(a1 + 8);
        if (v62 < v66 + v65) {
          goto LABEL_167;
        }
        *(void *)(a1 + 8) = v66 + v65;
        id v130 = v64;
        id v131 = (id)v15;
        if (v65)
        {
          uint64_t v15 = v66 - (void)objc_msgSend(objc_retainAutorelease((id)v15), sel_bytes);
          uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v69 = v68;
          if (__OFADD__(v15, v19)) {
            goto LABEL_194;
          }
          if ((uint64_t)v19 + v15 < v15) {
            goto LABEL_195;
          }
          uint64_t v70 = v67;
          uint64_t v71 = Data._Representation.subscript.getter();
          unint64_t v73 = v72;
          outlined consume of Data._Representation(v70, v69);
          unint64_t v74 = v71;
        }
        else
        {
          unint64_t v74 = 0;
          unint64_t v73 = 0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A]();
        unint64_t v128 = v74;
        unint64_t v129 = v73;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v15 = (uint64_t)v131;
        if (!*(void *)(v149 + 16))
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v128, v129);
          goto LABEL_5;
        }
        memcpy(v147, (const void *)(v149 + 32), sizeof(v147));
        outlined retain of CodableAccessibilityDataSeriesConfiguration((uint64_t)v147);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v128, v129);
        memcpy(v148, v147, sizeof(v148));
        _ViewInputs.base.modify(v148, v107);
        uint64_t v108 = v153;
        outlined init with take of CodableAccessibilityValueStorage?(v153, (uint64_t)&v149, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
        outlined release of CodableAccessibilityDataSeriesConfiguration?((uint64_t)&v149);
        outlined init with take of CodableAccessibilityValueStorage?((uint64_t)v148, v108, &lazy cache variable for type metadata for CodableAccessibilityDataSeriesConfiguration?, (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration);
        goto LABEL_12;
      case 0xAuLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        unint64_t v75 = *(void *)(a1 + 16);
        uint64_t v76 = *(void **)(a1 + 40);
        uint64_t v15 = *(void *)(a1 + 48);
        id v77 = *(id *)a1;
        id v131 = v76;
        swift_bridgeObjectRetain();
        uint64_t v132 = v15;
        swift_bridgeObjectRetain();
        uint64_t v78 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_170;
        }
        unsigned int v19 = (void *)v78;
        if (v78 < 0) {
          goto LABEL_182;
        }
        uint64_t v79 = *(void *)(a1 + 8);
        if (v75 < v79 + v78)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_170:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_5;
        }
        *(void *)(a1 + 8) = v79 + v78;
        id v130 = v77;
        if (v78)
        {
          uint64_t v15 = v79 - (void)objc_msgSend(objc_retainAutorelease(v77), sel_bytes);
          uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v82 = v81;
          if (__OFADD__(v15, v19)) {
            goto LABEL_196;
          }
          if ((uint64_t)v19 + v15 < v15) {
            goto LABEL_197;
          }
          uint64_t v83 = v80;
          uint64_t v84 = Data._Representation.subscript.getter();
          unint64_t v86 = v85;
          outlined consume of Data._Representation(v83, v82);
          uint64_t v14 = v144;
        }
        else
        {
          uint64_t v84 = 0;
          unint64_t v86 = 0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for [LinkDestination.Configuration](0);
        lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [LinkDestination.Configuration] and conformance <A> [A], type metadata accessor for [LinkDestination.Configuration], (void (*)(void))lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration);
        unint64_t v129 = v84;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v127 = a2;
        unint64_t v128 = v86;
        if (*(void *)(v149 + 16))
        {
          uint64_t v15 = v140;
          outlined init with copy of AccessibilityNodeAttachment.Storage(v149 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80)), v140, type metadata accessor for LinkDestination.Configuration);
          uint64_t v109 = 0;
        }
        else
        {
          uint64_t v109 = 1;
          uint64_t v15 = v140;
        }
        uint64_t v112 = v14;
        uint64_t v113 = v14;
        uint64_t v114 = v141;
        v141(v15, v109, 1, v112);
        swift_bridgeObjectRelease();
        if ((*v133)(v15, 1, v113) == 1)
        {
          outlined destroy of CodableAccessibilityAttachmentStorage(v15, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v129, v128);
          a2 = v127;
          goto LABEL_5;
        }
        swift_release();
        uint64_t v115 = v139;
        outlined init with take of CodableAccessibilityAttachmentStorage(v15, v139, type metadata accessor for LinkDestination.Configuration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of Data._Representation(v129, v128);
        v114(v115, 0, 1, v113);
        outlined assign with take of AccessibilityNodeAttachment.Storage(v115, v146, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
        uint64_t v14 = v113;
        a2 = v127;
        goto LABEL_13;
      case 0xBuLL:
        if ((v28 & 7) != 2) {
          goto LABEL_4;
        }
        unint64_t v87 = *(void *)(a1 + 16);
        uint64_t v89 = *(void **)(a1 + 40);
        uint64_t v88 = *(void *)(a1 + 48);
        id v131 = *(id *)a1;
        swift_bridgeObjectRetain();
        uint64_t v132 = v88;
        swift_bridgeObjectRetain();
        uint64_t v90 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_172;
        }
        unsigned int v19 = (void *)v90;
        if (v90 < 0) {
          goto LABEL_183;
        }
        uint64_t v91 = *(void *)(a1 + 8);
        if (v87 < v91 + v90)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_172:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_5;
        }
        *(void *)(a1 + 8) = v91 + v90;
        if (v90)
        {
          id v130 = v89;
          uint64_t v15 = v91 - (void)objc_msgSend(objc_retainAutorelease(v131), sel_bytes);
          uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v94 = v93;
          if (__OFADD__(v15, v19)) {
            goto LABEL_198;
          }
          if ((uint64_t)v19 + v15 < v15) {
            goto LABEL_200;
          }
          uint64_t v95 = v92;
          uint64_t v96 = (void *)Data._Representation.subscript.getter();
          unint64_t v98 = v97;
          unint64_t v99 = v94;
          unint64_t v100 = v98;
          outlined consume of Data._Representation(v95, v99);
        }
        else
        {
          uint64_t v96 = 0;
          unint64_t v100 = 0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [AccessibilityCustomAttributes], (uint64_t)&type metadata for AccessibilityCustomAttributes, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [AccessibilityCustomAttributes] and conformance <A> [A]();
        id v130 = v96;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        if (!*(void *)(v149 + 16))
        {
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation((uint64_t)v130, v100);
          goto LABEL_5;
        }
        uint64_t v15 = v100;
        uint64_t v110 = *(void *)(v149 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation((uint64_t)v130, v15);
        uint64_t v111 = v145;
        swift_bridgeObjectRelease();
        *(void *)(a2 + v111) = v110;
LABEL_12:
        uint64_t v14 = v144;
        goto LABEL_13;
      default:
        switch(v28 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_5;
            }
            goto LABEL_13;
          case 1uLL:
            unint64_t v120 = *(void *)(a1 + 8) + 8;
            if (v18 < v120) {
              goto LABEL_4;
            }
            goto LABEL_148;
          case 2uLL:
            unsigned int v19 = (void *)a1;
            uint64_t v121 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_5;
            }
            if (v121 < 0) {
              goto LABEL_203;
            }
            unint64_t v120 = *(void *)(a1 + 8) + v121;
            if (v18 < v120) {
              goto LABEL_4;
            }
LABEL_148:
            *(void *)(a1 + 8) = v120;
            break;
          case 5uLL:
            unint64_t v120 = *(void *)(a1 + 8) + 4;
            if (v18 < v120) {
              goto LABEL_4;
            }
            goto LABEL_148;
          default:
            goto LABEL_4;
        }
        goto LABEL_13;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityAttachmentStorage.VBase(void *a1)
{
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityAttachmentStorage.VBase(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void CodableAccessibilityAttachmentStorage.V2.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v5 = a1[1];
  uint64_t v6 = (void *)a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  long long v6[2] = v8 + 1;
  v6[v8 + 4] = v5;
  a1[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_17:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    goto LABEL_9;
  }
  a1[1] = v5 + 1;
  CodableAccessibilityAttachmentStorage.VBase.encode(to:)(a1);
  if (v2) {
    return;
  }
  ProtobufEncoder.endLengthDelimited()();
  uint64_t v3 = *(void *)(v3 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0) + 20));
  if (!v3) {
    return;
  }
  swift_retain();
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v5 = a1[1];
  uint64_t v6 = (void *)a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  unint64_t v10 = v6[2];
  unint64_t v9 = v6[3];
  if (v10 >= v9 >> 1) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v6);
  }
  long long v6[2] = v10 + 1;
  v6[v10 + 4] = v5;
  a1[3] = v6;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    a1[1] = v5 + 1;
    CodableResolvedStyledText.encode(to:)(a1, v3);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    swift_release();
  }
}

uint64_t CodableAccessibilityAttachmentStorage.V2.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v47 = (uint64_t)&v44 - v14;
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v44 - v16;
  uint64_t v50 = (void *)*(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0) + 20);
  *(void *)((char *)v50 + a2) = 0;
  uint64_t v48 = v8;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v49(v17, 1, 1, v7);
  unint64_t v18 = a1[1];
  unint64_t v19 = a1[2];
  if (v18 < v19)
  {
    uint64_t v45 = v12;
    uint64_t v46 = a2;
    do
    {
      unint64_t v21 = a1[3];
      if (v21)
      {
        unint64_t v22 = a1[4];
        if (v18 < v22) {
          goto LABEL_12;
        }
        if (v22 < v18) {
          goto LABEL_47;
        }
        a1[3] = 0;
      }
      unint64_t v21 = ProtobufDecoder.decodeVarint()();
      if (v4) {
        goto LABEL_48;
      }
      if (v21 <= 7) {
        goto LABEL_47;
      }
LABEL_12:
      if (v21 >> 3 == 2)
      {
        if ((v21 & 7) != 2) {
          goto LABEL_47;
        }
        uint64_t v26 = v7;
        uint64_t v7 = (uint64_t)v17;
        unint64_t v17 = (char *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v17 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v28 = *((void *)v17 + 2);
        unint64_t v27 = *((void *)v17 + 3);
        uint64_t v3 = (void *)(v28 + 1);
        if (v28 >= v27 >> 1) {
          unint64_t v17 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v3;
        *(void *)&v17[8 * v28 + 32] = v19;
        a1[5] = v17;
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v4)
        {
          unint64_t v17 = (char *)v7;
          goto LABEL_48;
        }
        a2 = v46;
        if (v29 < 0)
        {
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          __break(1u);
          uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v43 = v42[2];
          if (v43)
          {
            uint64_t v40 = v43 - 1;
            uint64_t v41 = v42[v40 + 4];
            v42[2] = v40;
            a1[5] = v42;
            a1[2] = v41;
          }
          else
          {
            __break(1u);
LABEL_51:
            unint64_t v17 = (char *)v7;
LABEL_47:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
          }
LABEL_48:
          outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
          return swift_release();
        }
        unint64_t v30 = a1[1] + v29;
        if (v19 < v30) {
          goto LABEL_51;
        }
        a1[2] = v30;
        unint64_t v31 = specialized CodableResolvedStyledText.init(from:)((unint64_t)a1);
        uint64_t v3 = (void *)a1[5];
        if (!v3[2]) {
          goto LABEL_56;
        }
        unint64_t v17 = (char *)v31;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v32 = v3[2];
          if (!v32) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v32 = v3[2];
          if (!v32)
          {
LABEL_44:
            __break(1u);
            break;
          }
        }
        uint64_t v33 = v32 - 1;
        uint64_t v34 = v3[v33 + 4];
        v3[2] = v33;
        a1[5] = v3;
        a1[2] = v34;
        uint64_t v3 = v50;
        swift_release();
        *(void *)((char *)v3 + a2) = v17;
        unint64_t v17 = (char *)v7;
        uint64_t v7 = v26;
        uint64_t v12 = v45;
      }
      else if (v21 >> 3 == 1)
      {
        if ((v21 & 7) != 2) {
          goto LABEL_47;
        }
        ProtobufDecoder.beginMessage()();
        if (v4) {
          goto LABEL_48;
        }
        CodableAccessibilityAttachmentStorage.VBase.init(from:)((unint64_t)a1, (uint64_t)v12);
        uint64_t v4 = 0;
        uint64_t v3 = (void *)a1[5];
        if (!v3[2]) {
          goto LABEL_54;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v23 = v3[2];
          if (!v23) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
          uint64_t v23 = v3[2];
          if (!v23) {
            goto LABEL_55;
          }
        }
        uint64_t v24 = v23 - 1;
        uint64_t v25 = v3[v24 + 4];
        v3[2] = v24;
        a1[5] = v3;
        a1[2] = v25;
        outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
        v49(v12, 0, 1, v7);
        outlined init with take of CodableAccessibilityAttachmentStorage((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
      }
      else
      {
        switch(v21 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v4) {
              goto LABEL_48;
            }
            break;
          case 1uLL:
            unint64_t v20 = a1[1] + 8;
            if (v19 < v20) {
              goto LABEL_47;
            }
            goto LABEL_4;
          case 2uLL:
            uint64_t v35 = ProtobufDecoder.decodeVarint()();
            if (v4) {
              goto LABEL_48;
            }
            if (v35 < 0) {
              goto LABEL_57;
            }
            unint64_t v20 = a1[1] + v35;
            if (v19 < v20) {
              goto LABEL_47;
            }
LABEL_4:
            a1[1] = v20;
            break;
          case 5uLL:
            unint64_t v20 = a1[1] + 4;
            if (v19 < v20) {
              goto LABEL_47;
            }
            goto LABEL_4;
          default:
            goto LABEL_47;
        }
      }
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2];
    }
    while (v18 < v19);
  }
  a1[3] = 0;
  uint64_t v36 = v47;
  outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v17, v47, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v36, 1, v7) == 1)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(v36, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
    goto LABEL_47;
  }
  outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
  uint64_t v38 = v36;
  uint64_t v39 = v44;
  outlined init with take of CodableAccessibilityAttachmentStorage(v38, v44, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
  return outlined init with take of CodableAccessibilityAttachmentStorage(v39, a2, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityAttachmentStorage.V2(void *a1)
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityAttachmentStorage.V2@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityAttachmentStorage.V2.init(from:)(a1, a2);
}

void CodableAccessibilityAttachmentStorage.V3.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  uint64_t v6 = (unsigned __int8 *)a1[1];
  uint64_t v7 = (void *)a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_85;
  }
  while (1)
  {
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    if (v9 >= v8 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
    }
    unsigned int v7[2] = v9 + 1;
    v7[v9 + 4] = v6;
    a1[3] = v7;
    if (__OFADD__(v6, 1)) {
      break;
    }
    a1[1] = v6 + 1;
    CodableAccessibilityAttachmentStorage.VBase.encode(to:)(a1);
    if (v3) {
      return;
    }
    ProtobufEncoder.endLengthDelimited()();
    uint64_t v10 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
    outlined init with copy of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content?(v4 + v10[6], (uint64_t)v52, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
    if ((void)v53 == 1)
    {
      outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)v52, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
    }
    else
    {
      long long v54 = v52[0];
      *(_OWORD *)unint64_t v55 = v52[1];
      *(_OWORD *)&v55[16] = v52[2];
      long long v56 = v53;
      specialized ProtobufEncoder.codableField<A>(_:_:)(2, (uint64_t *)&v54);
      outlined destroy of CodableAccessibilityValueStorage((uint64_t)&v54);
    }
    uint64_t v11 = *(void *)(v4 + v10[7]);
    if (!v11 || (uint64_t v12 = *(void *)(v11 + 16)) == 0)
    {
LABEL_53:
      if (*(unsigned __int8 *)(v4 + v10[8] + 16) != 255) {
        specialized ProtobufEncoder.messageField<A>(_:_:)(4);
      }
      uint64_t v35 = *(void *)(v4 + v10[9]);
      if (v35) {
        specialized ProtobufEncoder.codableField<A>(_:_:)(5, v35, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityCustomContentList>, (uint64_t)&type metadata for CodableAccessibilityCustomContentList, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList], (void (*)(void))lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList] and conformance <A> [A]);
      }
      Swift::UInt v36 = *(unsigned __int8 *)(v4 + v10[11]);
      if (v36 != 8)
      {
        ProtobufEncoder.encodeVarint(_:)(0x30uLL);
        ProtobufEncoder.encodeVarint(_:)(v36);
      }
      uint64_t v37 = v4 + v10[5];
      uint64_t v38 = *(void *)(v37 + 8);
      if (v38
        && (*(void *)v37 || v38 != 0xE000000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        ProtobufEncoder.stringFieldAlways(_:_:)(7);
      }
      uint64_t v39 = *(void *)(v37 + 24);
      if (v39
        && (*(void *)(v37 + 16) || v39 != 0xE000000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        ProtobufEncoder.stringFieldAlways(_:_:)(8);
      }
      uint64_t v40 = *(void *)(v4 + v10[12]);
      if (v40)
      {
        swift_retain();
        specialized ProtobufEncoder.codableField<A>(_:_:)(9, v40, specialized ProtobufEncoder.binaryPlistData<A>(for:));
        swift_release();
      }
      uint64_t v41 = (void *)(v4 + v10[13]);
      uint64_t v42 = v41[1];
      if (v42 && (*v41 || v42 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        ProtobufEncoder.stringFieldAlways(_:_:)(10);
      }
      if ((*(unsigned char *)(v37 + 48) & 1) == 0)
      {
        uint64_t v44 = *(void *)(v37 + 32);
        uint64_t v43 = *(void *)(v37 + 40);
        ProtobufEncoder.encodeVarint(_:)(0x5AuLL);
        specialized ProtobufEncoder.encodeMessage<A>(_:)(v44, v43);
      }
      Swift::UInt v45 = *(unsigned __int8 *)(v4 + v10[10]);
      if (v45 != 7)
      {
        ProtobufEncoder.encodeVarint(_:)(0x60uLL);
        ProtobufEncoder.encodeVarint(_:)(v45);
      }
      uint64_t v46 = *(unsigned __int8 *)(v4 + v10[14]);
      if (v46 != 2)
      {
        Swift::UInt v47 = v46 & 1;
        uint64_t v48 = a1[2];
        long long v54 = *(_OWORD *)a1;
        *(void *)unint64_t v55 = v48;
        *(_OWORD *)&v55[8] = *(_OWORD *)(a1 + 3);
        ProtobufEncoder.archiveOptions.getter(v52);
        if (SBYTE1(v52[0]) >= 2)
        {
          ProtobufEncoder.encodeVarint(_:)(0x70uLL);
          ProtobufEncoder.encodeVarint(_:)(v47);
        }
        else
        {
          specialized ProtobufEncoder.codableField<A>(_:_:)(13, v47, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityChildBehaviorKind>, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, &lazy cache variable for type metadata for [AccessibilityChildBehaviorKind], (void (*)(void))lazy protocol witness table accessor for type [AccessibilityChildBehaviorKind] and conformance <A> [A]);
        }
      }
      return;
    }
    uint64_t v49 = v10;
    uint64_t v50 = v4;
    uint64_t v6 = (unsigned __int8 *)(swift_bridgeObjectRetain() + 49);
    while (1)
    {
      uint64_t v13 = *(void **)(v6 - 17);
      uint64_t v4 = *(void *)(v6 - 9);
      char v14 = *(v6 - 1);
      int64_t v15 = a1[1];
      int64_t v16 = a1[2];
      uint64_t v51 = v12;
      int v57 = *v6;
      if (v15 >= v16)
      {
        int64_t v31 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_88;
        }
        if (v16 < v31)
        {
          outlined copy of AccessibilityText.Storage(v13, v4, v14);
          uint64_t v32 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v31);
        }
        else
        {
          a1[1] = v31;
          uint64_t v32 = (unsigned char *)(*a1 + v15);
          outlined copy of AccessibilityText.Storage(v13, v4, v14);
        }
        unint64_t v17 = v13;
        *uint64_t v32 = 26;
      }
      else
      {
        *(unsigned char *)(*a1 + v15) = 26;
        a1[1] = v15 + 1;
        unint64_t v17 = v13;
        outlined copy of AccessibilityText.Storage(v13, v4, v14);
      }
      uint64_t v3 = a1[1];
      uint64_t v7 = (void *)a1[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v19 = v7[2];
      unint64_t v18 = v7[3];
      if (v19 >= v18 >> 1) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v7);
      }
      unsigned int v7[2] = v19 + 1;
      v7[v19 + 4] = v3;
      a1[3] = v7;
      if (__OFADD__(v3, 1)) {
        break;
      }
      a1[1] = v3 + 1;
      if (v14)
      {
        outlined copy of AccessibilityText.Storage(v17, v4, 1);
        ProtobufEncoder.encodeVarint(_:)(0x12uLL);
        *(void *)&long long v54 = v17;
        uint64_t v20 = a1[1];
        unint64_t v21 = (void *)a1[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        if (v23 >= v22 >> 1) {
          unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
        }
        void v21[2] = v23 + 1;
        v21[v23 + 4] = v20;
        a1[3] = v21;
        if (__OFADD__(v20, 1)) {
          goto LABEL_87;
        }
        a1[1] = v20 + 1;
        CodableAttributedString.encode(to:)((uint64_t)a1);
        ProtobufEncoder.endLengthDelimited()();
        outlined consume of AccessibilityText.Storage(v17, v4, 1);
        char v24 = v14;
      }
      else
      {
        char v24 = v14;
        if ((v17 || v4 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRetain();
          ProtobufEncoder.stringFieldAlways(_:_:)(1);
          outlined consume of AccessibilityText.Storage(v17, v4, 0);
        }
      }
      if (v57)
      {
        int64_t v25 = a1[1];
        int64_t v26 = a1[2];
        if (v25 >= v26)
        {
          int64_t v33 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_90;
          }
          if (v26 < v33)
          {
            uint64_t v34 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v33);
          }
          else
          {
            a1[1] = v33;
            uint64_t v34 = (unsigned char *)(*a1 + v25);
          }
          *uint64_t v34 = 24;
          int64_t v27 = a1[1];
        }
        else
        {
          *(unsigned char *)(*a1 + v25) = 24;
          int64_t v27 = v25 + 1;
          a1[1] = v27;
        }
        int64_t v28 = a1[2];
        if (v27 < v28)
        {
          *(unsigned char *)(*a1 + v27) = 1;
          a1[1] = v27 + 1;
        }
        else
        {
          int64_t v29 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            goto LABEL_89;
          }
          if (v28 < v29)
          {
            unint64_t v30 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v29);
          }
          else
          {
            a1[1] = v29;
            unint64_t v30 = (unsigned char *)(*a1 + v27);
          }
          *unint64_t v30 = 1;
        }
      }
      v6 += 24;
      ProtobufEncoder.endLengthDelimited()();
      outlined consume of AccessibilityText.Storage(v17, v4, v24);
      --v12;
      if (v51 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v49;
        uint64_t v4 = v50;
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_85:
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
}

uint64_t CodableAccessibilityAttachmentStorage.V3.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v203 = (uint64_t)&v192 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?(0);
  MEMORY[0x270FA5388](v12 - 8);
  char v14 = (char *)&v192 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v209 = (unint64_t)&v192 - v16;
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v192 - v18;
  uint64_t v20 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
  unint64_t v21 = (_OWORD *)(a2 + v20[6]);
  *unint64_t v21 = 0u;
  v21[1] = 0u;
  void v21[2] = 0u;
  uint64_t v21[3] = xmmword_24619B520;
  uint64_t v217 = v21;
  long long v196 = xmmword_24619B520;
  uint64_t v220 = v20[7];
  *(void *)(a2 + v220) = 0;
  uint64_t v22 = a2 + v20[8];
  *(void *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = 0;
  char v197 = (_OWORD *)v22;
  *(unsigned char *)(v22 + 16) = -1;
  uint64_t v216 = v20[9];
  *(void *)(a2 + v216) = 0;
  uint64_t v201 = v20[10];
  *(unsigned char *)(a2 + v201) = 7;
  uint64_t v200 = v20[11];
  *(unsigned char *)(a2 + v200) = 8;
  uint64_t v215 = v20[12];
  *(void *)(a2 + v215) = 0;
  unint64_t v23 = (uint64_t *)(a2 + v20[13]);
  *unint64_t v23 = 0;
  v23[1] = 0;
  double v218 = v23;
  uint64_t v202 = v20;
  uint64_t v204 = v20[14];
  *(unsigned char *)(a2 + v204) = 2;
  uint64_t v210 = v10;
  char v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56);
  uint64_t v213 = v9;
  uint64_t v199 = v10 + 56;
  uint64_t v198 = v24;
  v24(v19, 1, 1, v9);
  char v227 = 1;
  unint64_t v25 = *(void *)(a1 + 8);
  unint64_t v26 = *(void *)(a1 + 16);
  if (v25 >= v26)
  {
    long long v206 = 0uLL;
    unint64_t v27 = 0;
    uint64_t v208 = 0;
    uint64_t v28 = 0;
    uint64_t v207 = 0;
LABEL_4:
    *(void *)(a1 + 24) = 0;
    unint64_t v29 = v209;
    outlined init with copy of AccessibilityNodeAttachment.Storage((uint64_t)v19, v209, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v210 + 48))(v29, 1, v213) == 1)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(v29, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      uint64_t v30 = (uint64_t)v19;
      goto LABEL_212;
    }
    goto LABEL_196;
  }
  uint64_t v194 = v14;
  uint64_t v195 = v8;
  long long v206 = 0uLL;
  unint64_t v27 = 0;
  uint64_t v208 = 0;
  uint64_t v28 = 0;
  uint64_t v207 = 0;
  unint64_t v212 = a1 + 40;
  uint64_t v219 = a2;
  uint64_t v214 = v19;
  while (2)
  {
    unint64_t v31 = *(void *)(a1 + 24);
    if (v31)
    {
      unint64_t v32 = *(void *)(a1 + 32);
      if (v25 < v32) {
        goto LABEL_14;
      }
      if (v32 < v25) {
        goto LABEL_202;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v31 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_211;
    }
    if (v31 < 8)
    {
LABEL_202:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      goto LABEL_211;
    }
LABEL_14:
    switch(v31 >> 3)
    {
      case 1uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_211;
        }
        CodableAccessibilityAttachmentStorage.VBase.init(from:)(a1, (uint64_t)v194);
        uint64_t v3 = 0;
        unint64_t v33 = v212;
        if (!*(void *)(*(void *)v212 + 16)) {
          goto LABEL_224;
        }
        uint64_t v34 = specialized Array._customRemoveLast()();
        if (!v34) {
          uint64_t v34 = specialized Array.remove(at:)(*(void *)(*(void *)v33 + 16) - 1);
        }
        *(void *)(a1 + 16) = v34;
        outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
        uint64_t v35 = (uint64_t)v194;
        v198(v194, 0, 1, v213);
        outlined init with take of CodableAccessibilityAttachmentStorage(v35, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
        goto LABEL_7;
      case 2uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        unint64_t v36 = *(void *)(a1 + 16);
        uint64_t v37 = *(void *)(a1 + 40);
        id v193 = *(id *)a1;
        uint64_t v192 = v37;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v38 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_211;
        }
        uint64_t v39 = v38;
        uint64_t v205 = v28;
        if (v38 < 0)
        {
          __break(1u);
LABEL_215:
          __break(1u);
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
LABEL_234:
          __break(1u);
LABEL_235:
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
          __break(1u);
          JUMPOUT(0x2461620D0);
        }
        uint64_t v40 = *(void *)(a1 + 8);
        if (v36 < v40 + v38)
        {
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_211;
        }
        *(void *)(a1 + 8) = v40 + v38;
        if (v38)
        {
          unint64_t v41 = v27;
          uint64_t v42 = v40 - (void)objc_msgSend(objc_retainAutorelease(v193), sel_bytes);
          uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;
          if (__OFADD__(v42, v39)) {
            goto LABEL_230;
          }
          if (v42 + v39 < v42) {
            goto LABEL_237;
          }
          uint64_t v46 = v43;
          uint64_t v47 = Data._Representation.subscript.getter();
          unint64_t v211 = v48;
          outlined consume of Data._Representation(v46, v45);
          unint64_t v27 = v41;
          unint64_t v19 = v214;
        }
        else
        {
          uint64_t v47 = 0;
          unint64_t v211 = 0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAccessibilityValueStorage], (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [CodableAccessibilityValueStorage] and conformance <A> [A]();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        if (*(void *)(v221 + 16))
        {
          outlined init with copy of CodableAccessibilityValueStorage((uint64_t *)(v221 + 32), (uint64_t)&v221);
        }
        else
        {
          long long v221 = 0u;
          long long v222 = 0u;
          long long v223 = 0u;
          long long v224 = v196;
        }
        swift_bridgeObjectRelease();
        if ((void)v224 == 1)
        {
          outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)&v221, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v47, v211);
          goto LABEL_211;
        }
        swift_release();
        long long v225 = v221;
        v226[0] = v222;
        v226[1] = v223;
        v226[2] = v224;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        outlined consume of Data._Representation(v47, v211);
        outlined assign with take of CodableAccessibilityValueStorage?((uint64_t)&v225, (uint64_t)v217);
        a2 = v219;
        goto LABEL_181;
      case 3uLL:
        unint64_t v211 = v27;
        if (!*(void *)(a2 + v220)) {
          *(void *)(a2 + v220) = MEMORY[0x263F8EE78];
        }
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v49 = *(void **)v212;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
        }
        unint64_t v51 = v49[2];
        unint64_t v50 = v49[3];
        if (v51 >= v50 >> 1) {
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v51 + 1, 1, v49);
        }
        _OWORD v49[2] = v51 + 1;
        v49[v51 + 4] = v26;
        *(void *)(a1 + 40) = v49;
        uint64_t v52 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        if (v52 < 0) {
          goto LABEL_215;
        }
        unint64_t v53 = *(void *)(a1 + 8) + v52;
        if (v26 < v53) {
          goto LABEL_202;
        }
        *(void *)(a1 + 16) = v53;
        AccessibilityText.init(from:)(a1, (id **)&v225);
        unint64_t v27 = v211;
        long long v54 = *(void **)v212;
        if (!*(void *)(*(void *)v212 + 16)) {
          goto LABEL_226;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v55 = v54[2];
          if (!v55) {
            goto LABEL_228;
          }
        }
        else
        {
          long long v54 = specialized _ArrayBuffer._consumeAndCreateNew()(v54);
          uint64_t v55 = v54[2];
          if (!v55) {
            goto LABEL_228;
          }
        }
        uint64_t v56 = v55 - 1;
        uint64_t v57 = v54[v56 + 4];
        v54[2] = v56;
        *(void *)(a1 + 40) = v54;
        *(void *)(a1 + 16) = v57;
        long long v58 = v225;
        int v59 = LOBYTE(v226[0]);
        int v60 = BYTE1(v226[0]);
        char v61 = *(void **)(v219 + v220);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        LODWORD(v205) = v59;
        LODWORD(v193) = v60;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          char v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        }
        unint64_t v64 = v61[2];
        unint64_t v63 = v61[3];
        if (v64 >= v63 >> 1) {
          char v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v64 + 1, 1, v61);
        }
        _OWORD v61[2] = v64 + 1;
        uint64_t v65 = &v61[3 * v64];
        *((_OWORD *)v65 + 2) = v58;
        *((unsigned char *)v65 + 48) = v205;
        *((unsigned char *)v65 + 49) = (_BYTE)v193;
        a2 = v219;
        *(void *)(v219 + v220) = v61;
        unint64_t v19 = v214;
        goto LABEL_7;
      case 4uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v66 = *(void **)v212;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66[2] + 1, 1, v66);
        }
        unint64_t v68 = v66[2];
        unint64_t v67 = v66[3];
        if (v68 >= v67 >> 1) {
          uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), v68 + 1, 1, v66);
        }
        void v66[2] = v68 + 1;
        v66[v68 + 4] = v26;
        *(void *)(a1 + 40) = v66;
        uint64_t v69 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_205;
        }
        if (v69 < 0) {
          goto LABEL_216;
        }
        unint64_t v70 = *(void *)(a1 + 8) + v69;
        if (v26 < v70) {
          goto LABEL_204;
        }
        *(void *)(a1 + 16) = v70;
        AccessibilityActivationPoint.Location.init(from:)(a1, (uint64_t)&v225);
        uint64_t v71 = *(void **)v212;
        unint64_t v19 = v214;
        if (!*(void *)(*(void *)v212 + 16)) {
          goto LABEL_225;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v72 = v71[2];
          if (!v72) {
            goto LABEL_229;
          }
        }
        else
        {
          uint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          uint64_t v72 = v71[2];
          if (!v72) {
            goto LABEL_229;
          }
        }
        uint64_t v73 = v72 - 1;
        uint64_t v74 = v71[v73 + 4];
        v71[2] = v73;
        *(void *)(a1 + 40) = v71;
        *(void *)(a1 + 16) = v74;
        LOBYTE(v73) = v226[0];
        unint64_t v75 = v197;
        *char v197 = v225;
        *((unsigned char *)v75 + 16) = v73;
        goto LABEL_7;
      case 5uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v205 = v28;
        unint64_t v76 = *(void *)(a1 + 16);
        id v77 = *(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v78 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_199;
        }
        uint64_t v79 = v78;
        if (v78 < 0) {
          goto LABEL_217;
        }
        uint64_t v80 = *(void *)(a1 + 8);
        if (v76 < v80 + v78) {
          goto LABEL_198;
        }
        unint64_t v211 = v27;
        *(void *)(a1 + 8) = v80 + v78;
        if (v78)
        {
          id v81 = v77;
          uint64_t v82 = v80 - (void)objc_msgSend(objc_retainAutorelease(v77), sel_bytes);
          uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v85 = v84;
          if (__OFADD__(v82, v79)) {
            goto LABEL_231;
          }
          if (v82 + v79 < v82) {
            goto LABEL_238;
          }
          uint64_t v86 = v83;
          uint64_t v87 = Data._Representation.subscript.getter();
          id v193 = v88;
          uint64_t v89 = v86;
          uint64_t v90 = v87;
          outlined consume of Data._Representation(v89, v85);
          id v77 = v81;
        }
        else
        {
          uint64_t v90 = 0;
          id v193 = (id)0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList], (uint64_t)&type metadata for CodableAccessibilityCustomContentList, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList] and conformance <A> [A]();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v169 = v90;
        if (!*(void *)(v225 + 16)) {
          goto LABEL_200;
        }
        uint64_t v170 = *(void *)(v225 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v90, (unint64_t)v193);
        uint64_t v171 = v219;
        uint64_t v172 = v216;
        swift_bridgeObjectRelease();
        goto LABEL_170;
      case 6uLL:
        if ((v31 & 7) == 0) {
          goto LABEL_76;
        }
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v91 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        if (v91 < 0) {
          goto LABEL_244;
        }
        unint64_t v92 = *(void *)(a1 + 8) + v91;
        if (v26 < v92) {
          goto LABEL_202;
        }
        *(void *)(a1 + 24) = 48;
        *(void *)(a1 + 32) = v92;
LABEL_76:
        unint64_t v93 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        char v94 = 8;
        if (v93 < 8) {
          char v94 = v93;
        }
        uint64_t v95 = (char *)v226;
        goto LABEL_6;
      case 7uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v96 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        uint64_t v97 = v96;
        if (v96 < 0) {
          goto LABEL_218;
        }
        uint64_t v98 = *(void *)(a1 + 8);
        if (v26 < v98 + v96) {
          goto LABEL_202;
        }
        *(void *)(a1 + 8) = v98 + v96;
        if (v96)
        {
          unint64_t v99 = v27;
          uint64_t v100 = v98 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v103 = v102;
          if (__OFADD__(v100, v97)) {
            goto LABEL_232;
          }
          if (v100 + v97 < v100) {
            goto LABEL_239;
          }
          uint64_t v104 = v101;
          uint64_t v105 = Data._Representation.subscript.getter();
          unint64_t v107 = v106;
          outlined consume of Data._Representation(v104, v103);
          unint64_t v27 = v99;
          unint64_t v19 = v214;
        }
        else
        {
          uint64_t v105 = 0;
          unint64_t v107 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v173 = String.init(data:encoding:)();
        if (!v174) {
          goto LABEL_210;
        }
        uint64_t v175 = v174;
        uint64_t v207 = v173;
        outlined consume of Data._Representation(v105, v107);
        swift_bridgeObjectRelease();
        uint64_t v28 = v175;
        a2 = v219;
        goto LABEL_7;
      case 8uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v108 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        uint64_t v109 = v108;
        if (v108 < 0) {
          goto LABEL_219;
        }
        uint64_t v110 = *(void *)(a1 + 8);
        if (v26 < v110 + v108) {
          goto LABEL_202;
        }
        *(void *)(a1 + 8) = v110 + v108;
        if (v108)
        {
          uint64_t v111 = v110 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v112 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v114 = v113;
          if (__OFADD__(v111, v109)) {
            goto LABEL_233;
          }
          if (v111 + v109 < v111) {
            goto LABEL_240;
          }
          uint64_t v115 = v112;
          uint64_t v105 = Data._Representation.subscript.getter();
          unint64_t v107 = v116;
          outlined consume of Data._Representation(v115, v114);
          unint64_t v19 = v214;
        }
        else
        {
          uint64_t v105 = 0;
          unint64_t v107 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v176 = String.init(data:encoding:)();
        if (!v177) {
          goto LABEL_210;
        }
        unint64_t v178 = v177;
        uint64_t v208 = v176;
        outlined consume of Data._Representation(v105, v107);
        swift_bridgeObjectRelease();
        unint64_t v27 = v178;
        a2 = v219;
        goto LABEL_7;
      case 9uLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v205 = v28;
        unint64_t v117 = *(void *)(a1 + 16);
        id v77 = *(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v118 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_199;
        }
        uint64_t v119 = v118;
        if (v118 < 0) {
          goto LABEL_220;
        }
        uint64_t v120 = *(void *)(a1 + 8);
        if (v117 < v120 + v118) {
          goto LABEL_198;
        }
        unint64_t v211 = v27;
        *(void *)(a1 + 8) = v120 + v118;
        if (v118)
        {
          id v121 = v77;
          uint64_t v122 = v120 - (void)objc_msgSend(objc_retainAutorelease(v77), sel_bytes);
          uint64_t v123 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v125 = v124;
          if (__OFADD__(v122, v119)) {
            goto LABEL_234;
          }
          if (v122 + v119 < v122) {
            goto LABEL_241;
          }
          uint64_t v126 = v123;
          uint64_t v127 = Data._Representation.subscript.getter();
          id v193 = v128;
          uint64_t v129 = v126;
          uint64_t v130 = v127;
          outlined consume of Data._Representation(v129, v125);
          id v77 = v121;
        }
        else
        {
          uint64_t v130 = 0;
          id v193 = (id)0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for [CodableAXChartDescriptor], (uint64_t)&type metadata for CodableAXChartDescriptor, MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [CodableAXChartDescriptor] and conformance <A> [A]();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v169 = v130;
        if (!*(void *)(v225 + 16)) {
          goto LABEL_200;
        }
        uint64_t v170 = *(void *)(v225 + 32);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v130, (unint64_t)v193);
        uint64_t v171 = v219;
        uint64_t v172 = v215;
        swift_release();
LABEL_170:
        *(void *)(v171 + v172) = v170;
        a2 = v171;
        goto LABEL_177;
      case 0xAuLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v131 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        uint64_t v132 = v131;
        if (v131 < 0) {
          goto LABEL_221;
        }
        uint64_t v133 = *(void *)(a1 + 8);
        if (v26 < v133 + v131) {
          goto LABEL_202;
        }
        unint64_t v211 = v27;
        *(void *)(a1 + 8) = v133 + v131;
        if (v131)
        {
          uint64_t v134 = v133 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v135 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v137 = v136;
          if (__OFADD__(v134, v132)) {
            goto LABEL_235;
          }
          if (v134 + v132 < v134) {
            goto LABEL_242;
          }
          uint64_t v138 = v135;
          uint64_t v105 = Data._Representation.subscript.getter();
          unint64_t v107 = v139;
          outlined consume of Data._Representation(v138, v137);
        }
        else
        {
          uint64_t v105 = 0;
          unint64_t v107 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v179 = String.init(data:encoding:)();
        if (!v180)
        {
LABEL_210:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          outlined consume of Data._Representation(v105, v107);
          goto LABEL_211;
        }
        uint64_t v181 = v179;
        uint64_t v182 = v180;
        outlined consume of Data._Representation(v105, v107);
        uint64_t v183 = v218;
        swift_bridgeObjectRelease();
        *uint64_t v183 = v181;
        v183[1] = v182;
        unint64_t v27 = v211;
        a2 = v219;
        goto LABEL_7;
      case 0xBuLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v140 = *(void **)v212;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v140[2] + 1, 1, v140);
        }
        unint64_t v29 = v140[2];
        unint64_t v141 = v140[3];
        if (v29 >= v141 >> 1) {
          uint64_t v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v141 > 1), v29 + 1, 1, v140);
        }
        v140[2] = v29 + 1;
        v140[v29 + 4] = v26;
        *(void *)(a1 + 40) = v140;
        uint64_t v142 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_205;
        }
        if (v142 < 0) {
          goto LABEL_222;
        }
        unint64_t v143 = *(void *)(a1 + 8) + v142;
        if (v26 >= v143)
        {
          *(void *)(a1 + 16) = v143;
          CodableAccessibilityUIKitTraits.init(from:)(a1, &v225);
          uint64_t v144 = *(void **)v212;
          unint64_t v19 = v214;
          if (!*(void *)(*(void *)v212 + 16)) {
            goto LABEL_227;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v145 = v144[2];
            if (!v145) {
              goto LABEL_195;
            }
            goto LABEL_123;
          }
          uint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew()(v144);
          uint64_t v145 = v144[2];
          if (!v145)
          {
LABEL_195:
            __break(1u);
LABEL_196:
            outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
            uint64_t v186 = v29;
            uint64_t v187 = v203;
            outlined init with take of CodableAccessibilityAttachmentStorage(v186, v203, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
            uint64_t result = outlined init with take of CodableAccessibilityAttachmentStorage(v187, a2, type metadata accessor for CodableAccessibilityAttachmentStorage.VBase);
            char v189 = v227;
            uint64_t v190 = a2 + v202[5];
            *(void *)uint64_t v190 = v207;
            *(void *)(v190 + 8) = v28;
            *(void *)(v190 + 16) = v208;
            *(void *)(v190 + 24) = v27;
            uint64_t v191 = *((void *)&v206 + 1);
            *(void *)(v190 + 32) = v206;
            *(void *)(v190 + 40) = v191;
            *(unsigned char *)(v190 + 48) = v189;
            return result;
          }
LABEL_123:
          uint64_t v146 = v145 - 1;
          uint64_t v147 = v144[v146 + 4];
          v144[2] = v146;
          *(void *)(a1 + 40) = v144;
          *(void *)(a1 + 16) = v147;
          long long v206 = v225;
          char v227 = 0;
LABEL_7:
          unint64_t v25 = *(void *)(a1 + 8);
          unint64_t v26 = *(void *)(a1 + 16);
          if (v25 >= v26) {
            goto LABEL_4;
          }
          continue;
        }
LABEL_204:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
LABEL_205:
        unint64_t v19 = v214;
LABEL_211:
        uint64_t v30 = (uint64_t)v19;
LABEL_212:
        outlined destroy of CodableAccessibilityAttachmentStorage(v30, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)v217, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease();
      case 0xCuLL:
        if ((v31 & 7) == 0) {
          goto LABEL_130;
        }
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v148 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        if (v148 < 0) {
          goto LABEL_245;
        }
        unint64_t v149 = *(void *)(a1 + 8) + v148;
        if (v26 < v149) {
          goto LABEL_202;
        }
        *(void *)(a1 + 24) = 96;
        *(void *)(a1 + 32) = v149;
LABEL_130:
        unint64_t v150 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        char v94 = 7;
        if (v150 < 7) {
          char v94 = v150;
        }
        uint64_t v95 = (char *)v226 + 8;
LABEL_6:
        *(unsigned char *)(a2 + *((void *)v95 - 32)) = v94;
        goto LABEL_7;
      case 0xDuLL:
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v205 = v28;
        unint64_t v151 = *(void *)(a1 + 16);
        id v77 = *(id *)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v152 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_199;
        }
        uint64_t v153 = v152;
        if (v152 < 0) {
          goto LABEL_223;
        }
        uint64_t v154 = *(void *)(a1 + 8);
        if (v151 < v154 + v152)
        {
LABEL_198:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
LABEL_199:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_201;
        }
        unint64_t v211 = v27;
        *(void *)(a1 + 8) = v154 + v152;
        if (v152)
        {
          id v155 = v77;
          uint64_t v156 = v154 - (void)objc_msgSend(objc_retainAutorelease(v77), sel_bytes);
          uint64_t v157 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v159 = v158;
          if (__OFADD__(v156, v153)) {
            goto LABEL_236;
          }
          if (v156 + v153 < v156) {
            goto LABEL_243;
          }
          uint64_t v160 = v157;
          uint64_t v161 = Data._Representation.subscript.getter();
          id v193 = v162;
          uint64_t v163 = v160;
          uint64_t v164 = v161;
          outlined consume of Data._Representation(v163, v159);
          id v77 = v155;
        }
        else
        {
          uint64_t v164 = 0;
          id v193 = (id)0xC000000000000000;
        }
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        swift_bridgeObjectRetain();
        dispatch thunk of PropertyListDecoder.userInfo.setter();
        type metadata accessor for [AccessibilityChildBehaviorKind?]();
        lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityChildBehaviorKind?] and conformance <A> [A], (void (*)(uint64_t))type metadata accessor for [AccessibilityChildBehaviorKind?], (void (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehaviorKind? and conformance <A> A?);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v169 = v164;
        if (!*(void *)(v225 + 16))
        {
LABEL_200:
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_release();
          outlined consume of Data._Representation(v169, (unint64_t)v193);
LABEL_201:
          unint64_t v19 = v214;
          goto LABEL_211;
        }
        LODWORD(v192) = *(unsigned __int8 *)(v225 + 32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v164, (unint64_t)v193);
        a2 = v219;
        *(unsigned char *)(v219 + v204) = v192;
LABEL_177:
        unint64_t v27 = v211;
        unint64_t v19 = v214;
LABEL_181:
        uint64_t v28 = v205;
        goto LABEL_7;
      case 0xEuLL:
        if ((v31 & 7) == 0) {
          goto LABEL_148;
        }
        if ((v31 & 7) != 2) {
          goto LABEL_202;
        }
        uint64_t v165 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        if (v165 < 0) {
          goto LABEL_246;
        }
        unint64_t v166 = *(void *)(a1 + 8) + v165;
        if (v26 < v166) {
          goto LABEL_202;
        }
        *(void *)(a1 + 24) = 112;
        *(void *)(a1 + 32) = v166;
LABEL_148:
        uint64_t v167 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_211;
        }
        if (v167 == 1) {
          char v168 = 1;
        }
        else {
          char v168 = 2;
        }
        if (!v167) {
          char v168 = 0;
        }
        *(unsigned char *)(a2 + v204) = v168;
        goto LABEL_7;
      default:
        switch(v31 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_211;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v184 = *(void *)(a1 + 8) + 8;
            if (v26 < v184) {
              goto LABEL_202;
            }
            goto LABEL_189;
          case 2uLL:
            uint64_t v185 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_211;
            }
            if (v185 < 0) {
              goto LABEL_247;
            }
            unint64_t v184 = *(void *)(a1 + 8) + v185;
            if (v26 < v184) {
              goto LABEL_202;
            }
LABEL_189:
            *(void *)(a1 + 8) = v184;
            break;
          case 5uLL:
            unint64_t v184 = *(void *)(a1 + 8) + 4;
            if (v26 >= v184) {
              goto LABEL_189;
            }
            goto LABEL_202;
          default:
            goto LABEL_202;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityAttachmentStorage.V3(void *a1)
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityAttachmentStorage.V3@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CodableAccessibilityAttachmentStorage.V3.init(from:)(a1, a2);
}

double closure #1 in AccessibilityAttachment.init<A>(_:applicator:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0) + 20)))
  {
    uint64_t v3 = ResolvedStyledText.accessibilityText.getter();
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    char v9 = v8 & 1;
    *(void *)&long long v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    outlined copy of Text.Storage(v3, v4, v8 & 1);
    swift_bridgeObjectRetain();
    outlined assign with copy of AnyAccessibilityValue?((uint64_t)v16, (uint64_t)&v13);
    type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, (uint64_t)&type metadata for Text, MEMORY[0x263F8E0F8]);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
    *(void *)(v10 + 32) = v3;
    *(void *)(v10 + 40) = v5;
    *(unsigned char *)(v10 + 48) = v9;
    *(void *)(v10 + 56) = v7;
    outlined destroy of AccessibilityCustomContentEntry.Value?((uint64_t)v16, &lazy cache variable for type metadata for AnyAccessibilityValue?, (uint64_t)&type metadata for AnyAccessibilityValue);
    *((void *)&v15 + 1) = v10;
    long long v11 = v14;
    *a2 = v13;
    a2[1] = v11;
    a2[2] = v15;
    outlined consume of Text.Storage(v3, v5, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t CodableAccessibilityUIKitTraits.removed.getter()
{
  return *(void *)v0;
}

uint64_t CodableAccessibilityUIKitTraits.removed.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*CodableAccessibilityUIKitTraits.removed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAccessibilityUIKitTraits.added.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CodableAccessibilityUIKitTraits.added.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*CodableAccessibilityUIKitTraits.added.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CodableAccessibilityUIKitTraits.init(removed:added:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void *CodableAccessibilityUIKitTraits.encode(to:)(void *result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  if (!*v2)
  {
LABEL_5:
    if (!v4) {
      return result;
    }
LABEL_6:
    ProtobufEncoder.encodeVarint(_:)(0x11uLL);
    uint64_t v7 = v3[1];
    double result = (void *)(v7 + 8);
    if (__OFADD__(v7, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= (uint64_t)result)
    {
      v3[1] = result;
      *(void *)(*v3 + v7) = v4;
      return result;
    }
    double result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    *double result = v4;
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(9uLL);
  uint64_t v6 = v3[1];
  double result = (void *)(v6 + 8);
  if (__OFADD__(v6, 8))
  {
    __break(1u);
  }
  else if (v3[2] >= (uint64_t)result)
  {
    v3[1] = result;
    *(void *)(*v3 + v6) = v5;
    goto LABEL_5;
  }
  double result = (void *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  *double result = v5;
  if (v4) {
    goto LABEL_6;
  }
  return result;
}

unint64_t CodableAccessibilityUIKitTraits.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 < v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      double result = v3[3];
      if (result)
      {
        unint64_t v9 = v3[4];
        if (v5 < v9) {
          goto LABEL_9;
        }
        if (v9 < v5) {
          goto LABEL_43;
        }
        v3[3] = 0;
      }
      double result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (result <= 7)
      {
LABEL_43:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
LABEL_9:
      if (result >> 3 == 2)
      {
        if ((result & 7) == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_46;
          }
          long long v11 = (uint64_t *)v3[1];
          if (v6 < (unint64_t)v11 + result) {
            goto LABEL_43;
          }
          v3[3] = 17;
          v3[4] = (char *)v11 + result;
        }
        else
        {
          if ((result & 7) != 1) {
            goto LABEL_43;
          }
          long long v11 = (uint64_t *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v11 + 1);
        if (v6 < (unint64_t)(v11 + 1)) {
          goto LABEL_43;
        }
        uint64_t v7 = *v11;
      }
      else
      {
        if (result >> 3 != 1)
        {
          switch(result & 7)
          {
            case 0uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              unint64_t v5 = v3[1];
              goto LABEL_39;
            case 1uLL:
              unint64_t v5 = v3[1] + 8;
              goto LABEL_37;
            case 2uLL:
              double result = ProtobufDecoder.decodeVarint()();
              if (v2) {
                return result;
              }
              if ((result & 0x8000000000000000) != 0) {
                goto LABEL_47;
              }
              unint64_t v5 = v3[1] + result;
LABEL_37:
              if (v6 >= v5) {
                goto LABEL_38;
              }
              goto LABEL_43;
            case 5uLL:
              unint64_t v5 = v3[1] + 4;
              goto LABEL_37;
            default:
              goto LABEL_43;
          }
        }
        if ((result & 7) == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
            JUMPOUT(0x2461625F0);
          }
          uint64_t v10 = (uint64_t *)v3[1];
          if (v6 < (unint64_t)v10 + result) {
            goto LABEL_43;
          }
          v3[3] = 9;
          v3[4] = (char *)v10 + result;
        }
        else
        {
          if ((result & 7) != 1) {
            goto LABEL_43;
          }
          uint64_t v10 = (uint64_t *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v10 + 1);
        if (v6 < (unint64_t)(v10 + 1)) {
          goto LABEL_43;
        }
        uint64_t v8 = *v10;
      }
LABEL_38:
      v3[1] = v5;
LABEL_39:
      unint64_t v6 = v3[2];
      if (v5 >= v6) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
LABEL_42:
  v3[3] = 0;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

void *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CodableAccessibilityUIKitTraits(void *result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  if (*v2)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v6 = v3[1];
    int64_t v7 = v6 + 8;
    if (__OFADD__(v6, 8))
    {
      __break(1u);
    }
    else if (v3[2] >= v7)
    {
      v3[1] = v7;
      double result = (void *)(*v3 + v6);
LABEL_5:
      *double result = v5;
      goto LABEL_6;
    }
    double result = (void *)ProtobufEncoder.growBufferSlow(to:)(v7);
    goto LABEL_5;
  }
LABEL_6:
  if (!v4) {
    return result;
  }
  ProtobufEncoder.encodeVarint(_:)(0x11uLL);
  uint64_t v8 = v3[1];
  int64_t v9 = v8 + 8;
  if (__OFADD__(v8, 8))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v3[2] < v9)
  {
LABEL_15:
    double result = (void *)ProtobufEncoder.growBufferSlow(to:)(v9);
    goto LABEL_10;
  }
  v3[1] = v9;
  double result = (void *)(*v3 + v8);
LABEL_10:
  *double result = v4;
  return result;
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance CodableAccessibilityUIKitTraits@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  return CodableAccessibilityUIKitTraits.init(from:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI31AccessibilityCustomContentEntryVG_AF07CodablefgH4ListV0jI033_AB2166DCFF9943AF0BA6B5EE55765400LLVs5NeverOTg503_s7d4UI37jfghk17V_2inACSayAA0deF5i38VG_AA17EnvironmentValuesVtcfcAC0cI033_lmnopQ10LLVAFXEfU_AF17EnvironmentValuesVTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v48 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v6 = a1 + 32;
    do
    {
      int64_t v49 = v3;
      uint64_t v28 = v6;
      outlined init with copy of AccessibilityCustomContentEntry(v6, (uint64_t)&v41);
      uint64_t v7 = *((void *)&v41 + 1);
      uint64_t v8 = v41;
      uint64_t v9 = v42;
      long long v10 = v43;
      char v11 = v44;
      long long v34 = v41;
      long long v35 = v42;
      long long v36 = v43;
      LOBYTE(v37) = v44;
      *((void *)&v37 + 1) = v45;
      uint64_t v39 = a2;
      uint64_t v40 = a3;
      swift_retain_n();
      swift_retain_n();
      outlined copy of AccessibilityCustomContentKey.Identifier(v8, v7, v9);
      outlined copy of Text.Storage(v10, *((uint64_t *)&v10 + 1), v11);
      swift_bridgeObjectRetain();
      CodableAccessibilityCustomContentList.CodableEntry.CodableKey.init(_:in:)((uint64_t)&v34, &v39, (uint64_t)v29);
      uint64_t v12 = v29[0];
      uint64_t v13 = v29[1];
      __int16 v14 = v30;
      uint64_t v26 = v32;
      uint64_t v27 = v31;
      __int16 v15 = v33;
      outlined init with copy of AccessibilityCustomContentEntry.Value(v46, (uint64_t)v29);
      uint64_t v39 = a2;
      uint64_t v40 = a3;
      CodableAccessibilityCustomContentList.CodableEntry.CodableValue.init(_:in:)(v29, &v39, (uint64_t)&v34);
      outlined destroy of AccessibilityCustomContentEntry((uint64_t)&v41);
      *(_OWORD *)&v47[38] = v36;
      *(_OWORD *)&v47[54] = v37;
      v47[70] = v38;
      *(_OWORD *)&v47[6] = v34;
      *(_OWORD *)&v47[22] = v35;
      uint64_t v4 = v48;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v48;
      }
      unint64_t v17 = *(void *)(v4 + 16);
      unint64_t v16 = *(void *)(v4 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v4 = v48;
      }
      *(void *)(v4 + 16) = v17 + 1;
      uint64_t v18 = v4 + 120 * v17;
      *(void *)(v18 + 32) = v12;
      *(void *)(v18 + 40) = v13;
      *(_WORD *)(v18 + 48) = v14;
      __int16 v19 = WORD2(v41);
      *(_DWORD *)(v18 + 50) = v41;
      *(_WORD *)(v18 + 54) = v19;
      *(void *)(v18 + 56) = v27;
      *(void *)(v18 + 64) = v26;
      *(_WORD *)(v18 + 72) = v15;
      *(_OWORD *)(v18 + 74) = *(_OWORD *)v47;
      long long v20 = *(_OWORD *)&v47[16];
      long long v21 = *(_OWORD *)&v47[32];
      long long v22 = *(_OWORD *)&v47[48];
      *(void *)(v18 + 137) = *(void *)&v47[63];
      *(_OWORD *)(v18 + 122) = v22;
      *(_OWORD *)(v18 + 106) = v21;
      *(_OWORD *)(v18 + 90) = v20;
      uint64_t v6 = v28 + 120;
      int64_t v3 = v49 - 1;
    }
    while (v49 != 1);
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Error and conformance AccessibilityNodeAttachment.Error);
  }
  return result;
}

void type metadata accessor for CodableAccessibilityAttachmentStorage?(uint64_t a1)
{
}

void type metadata accessor for [AccessibilityNodeAttachment.Kind?]()
{
  if (!lazy cache variable for type metadata for [AccessibilityNodeAttachment.Kind?])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityNodeAttachment.Kind?, (uint64_t)&type metadata for AccessibilityNodeAttachment.Kind, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNodeAttachment.Kind?]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind? and conformance <A> A?)
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityNodeAttachment.Kind?, (uint64_t)&type metadata for AccessibilityNodeAttachment.Kind, MEMORY[0x263F8D8F0]);
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind);
  }
  return result;
}

uint64_t outlined retain of CodableAccessibilityDataSeriesConfiguration(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v15 = *(void *)(a1 + 160);
  unint64_t v16 = *(void **)(a1 + 152);
  uint64_t v13 = *(void **)(a1 + 176);
  uint64_t v14 = *(void *)(a1 + 168);
  uint64_t v11 = *(void *)(a1 + 192);
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v10 = *(void *)(a1 + 200);
  outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(*(id *)a1, *(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16));
  outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v9, v8, v7, v2, v3, v4, v5);
  outlined copy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(v16, v15, v14, v13, v12, v11, v10);
  return a1;
}

uint64_t outlined release of CodableAccessibilityDataSeriesConfiguration?(uint64_t a1)
{
  outlined consume of CodableAccessibilityDataSeriesConfiguration?(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 64), *(void *)(a1 + 72), *(_OWORD *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void **)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void **)(a1 + 176),
    *(void *)(a1 + 184),
    *(_OWORD *)(a1 + 192),
    *(void *)(a1 + 200));
  return a1;
}

void *outlined consume of CodableAccessibilityDataSeriesConfiguration?(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, void *a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,void *a23,uint64_t a24,int a25,uint64_t a26)
{
  if (a12 != 1)
  {
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>?(result, a2, a3);
    outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(a6, a7, a8, a9, a10, a11, a12);
    return outlined consume of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration?(a20, a21, a22, a23, a24, a25, a26);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityCustomAttributes] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [AccessibilityCustomAttributes], (uint64_t)&type metadata for AccessibilityCustomAttributes, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [AccessibilityCustomAttributes], (uint64_t)&type metadata for AccessibilityCustomAttributes, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AccessibilityCustomAttributes and conformance AccessibilityCustomAttributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityCustomAttributes] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for [LinkDestination.Configuration](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration()
{
  return lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration(&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, (void (*)(uint64_t))type metadata accessor for LinkDestination.Configuration);
}

{
  return lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration(&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, (void (*)(uint64_t))type metadata accessor for LinkDestination.Configuration);
}

uint64_t outlined assign with take of AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityDataSeriesConfiguration], (uint64_t)&type metadata for CodableAccessibilityDataSeriesConfiguration, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityDataSeriesConfiguration] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityDataSeriesConfiguration and conformance CodableAccessibilityDataSeriesConfiguration);
  }
  return result;
}

void type metadata accessor for CodableAccessibilityAttachmentStorage.VBase?(uint64_t a1)
{
}

void type metadata accessor for [AccessibilityChildBehaviorKind?]()
{
  if (!lazy cache variable for type metadata for [AccessibilityChildBehaviorKind?])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityChildBehaviorKind?]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehaviorKind? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind? and conformance <A> A?)
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityChildBehaviorKind?, (uint64_t)&type metadata for AccessibilityChildBehaviorKind, MEMORY[0x263F8D8F0]);
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehaviorKind? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CodableAXChartDescriptor] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAXChartDescriptor], (uint64_t)&type metadata for CodableAXChartDescriptor, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAXChartDescriptor], (uint64_t)&type metadata for CodableAXChartDescriptor, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAXChartDescriptor] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor;
  if (!lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAXChartDescriptor and conformance CodableAXChartDescriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CodableAccessibilityCustomContentList] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList], (uint64_t)&type metadata for CodableAccessibilityCustomContentList, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityCustomContentList], (uint64_t)&type metadata for CodableAccessibilityCustomContentList, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityCustomContentList] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityCustomContentList and conformance CodableAccessibilityCustomContentList);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CodableAccessibilityValueStorage] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityValueStorage], (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [CodableAccessibilityValueStorage], (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CodableAccessibilityValueStorage] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage;
  if (!lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableAccessibilityValueStorage and conformance CodableAccessibilityValueStorage);
  }
  return result;
}

uint64_t outlined assign with take of CodableAccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CodableAccessibilityValueStorage?(0, &lazy cache variable for type metadata for CodableAccessibilityValueStorage?, (uint64_t)&type metadata for CodableAccessibilityValueStorage, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityNodeAttachment(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for AccessibilityNodeAttachment.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = (void *)a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v7;
      swift_bridgeObjectRetain();
      id v8 = v7;
    }
    else
    {
      uint64_t v142 = (unsigned char *)(a1 + 314);
      uint64_t v10 = a2 + 39;
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      uint64_t v12 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = (_OWORD *)(a1 + 16);
      uint64_t v14 = a2 + 2;
      int v15 = *((unsigned __int16 *)a2 + 16) | (*((unsigned __int8 *)a2 + 34) << 16);
      swift_bridgeObjectRetain();
      if (EnumCaseMultiPayload == 1)
      {
        if (BYTE2(v15) == 255)
        {
          *uint64_t v13 = *v14;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
        }
        else
        {
          unint64_t v16 = (void *)a2[2];
          uint64_t v17 = a2[3];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, v15, BYTE2(v15) & 1);
          *(void *)(a1 + 16) = v16;
          *(void *)(a1 + 24) = v17;
          *(_WORD *)(a1 + 32) = v15;
          *(unsigned char *)(a1 + 34) = BYTE2(v15) & 1;
        }
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
        }
        else
        {
          int v20 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
          long long v21 = (void *)a2[5];
          uint64_t v22 = a2[6];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v21, v22, *((_WORD *)a2 + 28), BYTE2(v20) & 1);
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v22;
          *(_WORD *)(a1 + 56) = v20;
          *(unsigned char *)(a1 + 58) = BYTE2(v20) & 1;
        }
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
        }
        else
        {
          int v26 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
          uint64_t v27 = (void *)a2[8];
          uint64_t v28 = a2[9];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v27, v28, *((_WORD *)a2 + 40), BYTE2(v26) & 1);
          *(void *)(a1 + 64) = v27;
          *(void *)(a1 + 72) = v28;
          *(_WORD *)(a1 + 80) = v26;
          *(unsigned char *)(a1 + 82) = BYTE2(v26) & 1;
        }
        *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(void *)(a1 + 112) = a2[14];
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = a2[16];
        *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
        unint64_t v29 = (_OWORD *)(a1 + 144);
        __int16 v30 = a2 + 18;
        uint64_t v31 = a2[29];
        if (v31 == 1)
        {
          memcpy(v29, v30, 0x108uLL);
        }
        else
        {
          if (*((unsigned __int8 *)a2 + 162) == 255)
          {
            *unint64_t v29 = *v30;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
          }
          else
          {
            int v38 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
            uint64_t v39 = (void *)a2[18];
            uint64_t v40 = a2[19];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *((_WORD *)a2 + 80), BYTE2(v38) & 1);
            *(void *)(a1 + 144) = v39;
            *(void *)(a1 + 152) = v40;
            *(_WORD *)(a1 + 160) = v38;
            *(unsigned char *)(a1 + 162) = BYTE2(v38) & 1;
            uint64_t v31 = a2[29];
          }
          *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
          *(void *)(a1 + 168) = a2[21];
          *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
          *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
          long long v41 = (_OWORD *)(a1 + 184);
          long long v42 = a2 + 23;
          if (v31)
          {
            if (*((unsigned __int8 *)a2 + 202) == 255)
            {
              *long long v41 = *v42;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
            }
            else
            {
              int v54 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
              uint64_t v55 = (void *)a2[23];
              uint64_t v56 = a2[24];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *((_WORD *)a2 + 100), BYTE2(v54) & 1);
              *(void *)(a1 + 184) = v55;
              *(void *)(a1 + 192) = v56;
              *(_WORD *)(a1 + 200) = v54;
              *(unsigned char *)(a1 + 202) = BYTE2(v54) & 1;
            }
            if (*((unsigned __int8 *)a2 + 226) == 255)
            {
              *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
            }
            else
            {
              int v60 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
              char v61 = (void *)a2[26];
              uint64_t v62 = a2[27];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v61, v62, *((_WORD *)a2 + 112), BYTE2(v60) & 1);
              *(void *)(a1 + 208) = v61;
              *(void *)(a1 + 216) = v62;
              *(_WORD *)(a1 + 224) = v60;
              *(unsigned char *)(a1 + 226) = BYTE2(v60) & 1;
            }
            uint64_t v63 = a2[30];
            *(void *)(a1 + 232) = a2[29];
            *(void *)(a1 + 240) = v63;
            *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
            *(void *)(a1 + 256) = a2[32];
            *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
            uint64_t v64 = a2[35];
            *(void *)(a1 + 272) = a2[34];
            *(void *)(a1 + 280) = v64;
            *(void *)(a1 + 288) = a2[36];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v48 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
            *(_OWORD *)(a1 + 264) = v48;
            *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
            long long v49 = *(_OWORD *)(a2 + 25);
            *long long v41 = *v42;
            *(_OWORD *)(a1 + 200) = v49;
            long long v50 = *(_OWORD *)(a2 + 29);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
            *(_OWORD *)(a1 + 232) = v50;
          }
          uint64_t v65 = (_OWORD *)(a1 + 296);
          uint64_t v66 = a2 + 37;
          if (a2[43])
          {
            if (*((unsigned __int8 *)a2 + 314) == 255)
            {
              _OWORD *v65 = *v66;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
            }
            else
            {
              int v80 = (unsigned __int16)*v10 | (*((unsigned __int8 *)a2 + 314) << 16);
              id v81 = (void *)a2[37];
              uint64_t v82 = a2[38];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v81, v82, *v10, BYTE2(v80) & 1);
              *(void *)(a1 + 296) = v81;
              *(void *)(a1 + 304) = v82;
              *(_WORD *)(a1 + 312) = v80;
              unsigned char *v142 = BYTE2(v80) & 1;
            }
            if (*((unsigned __int8 *)a2 + 338) == 255)
            {
              *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
            }
            else
            {
              int v86 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
              uint64_t v87 = (void *)a2[40];
              uint64_t v88 = a2[41];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v87, v88, *((_WORD *)a2 + 168), BYTE2(v86) & 1);
              *(void *)(a1 + 320) = v87;
              *(void *)(a1 + 328) = v88;
              *(_WORD *)(a1 + 336) = v86;
              *(unsigned char *)(a1 + 338) = BYTE2(v86) & 1;
            }
            uint64_t v89 = a2[44];
            *(void *)(a1 + 344) = a2[43];
            *(void *)(a1 + 352) = v89;
            *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
            *(void *)(a1 + 368) = a2[46];
            *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
            uint64_t v90 = a2[49];
            *(void *)(a1 + 384) = a2[48];
            *(void *)(a1 + 392) = v90;
            *(void *)(a1 + 400) = a2[50];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v67 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v67;
            *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
            long long v68 = *(_OWORD *)(a2 + 39);
            _OWORD *v65 = *v66;
            *(_OWORD *)(a1 + 312) = v68;
            long long v69 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v69;
          }
        }
        uint64_t v91 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v92 = *(int *)(v91 + 52);
        unint64_t v93 = (void *)(a1 + v92);
        char v94 = (char *)a2 + v92;
        uint64_t v95 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          uint64_t v98 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v98 - 8) + 16))(v93, v94, v98);
          *((unsigned char *)v93 + *(int *)(v95 + 20)) = v94[*(int *)(v95 + 20)];
          (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
        }
        *(void *)(a1 + *(int *)(v91 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v91 + 56));
        unint64_t v99 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v100 = v99[5];
        uint64_t v101 = a1 + v100;
        uint64_t v102 = (uint64_t)a2 + v100;
        uint64_t v103 = *(void *)(v102 + 8);
        *(void *)uint64_t v101 = *(void *)v102;
        *(void *)(v101 + 8) = v103;
        uint64_t v104 = *(void *)(v102 + 24);
        *(void *)(v101 + 16) = *(void *)(v102 + 16);
        *(void *)(v101 + 24) = v104;
        *(unsigned char *)(v101 + 48) = *(unsigned char *)(v102 + 48);
        *(_OWORD *)(v101 + 32) = *(_OWORD *)(v102 + 32);
        uint64_t v105 = v99[6];
        uint64_t v106 = a1 + v105;
        unint64_t v107 = (uint64_t *)((char *)a2 + v105);
        uint64_t v108 = *(uint64_t *)((char *)a2 + v105 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v108 == 1)
        {
          long long v109 = *((_OWORD *)v107 + 1);
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
          *(_OWORD *)(v106 + 16) = v109;
          long long v110 = *((_OWORD *)v107 + 3);
          *(_OWORD *)(v106 + 32) = *((_OWORD *)v107 + 2);
          *(_OWORD *)(v106 + 48) = v110;
        }
        else
        {
          __int16 v111 = *((_WORD *)v107 + 8);
          if (*((unsigned char *)v107 + 16) == 0xFF)
          {
            *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
            *(_WORD *)(v106 + 16) = *((_WORD *)v107 + 8);
          }
          else
          {
            char v112 = v111 & 1;
            uint64_t v113 = *v107;
            uint64_t v114 = v107[1];
            outlined copy of AccessibilityText.Storage((void *)*v107, v114, v111 & 1);
            *(void *)uint64_t v106 = v113;
            *(void *)(v106 + 8) = v114;
            *(unsigned char *)(v106 + 16) = v112;
            *(unsigned char *)(v106 + 17) = *((unsigned char *)v107 + 17);
            uint64_t v108 = v107[6];
          }
          uint64_t v115 = (_OWORD *)(v106 + 24);
          unint64_t v116 = v107 + 3;
          if (v108)
          {
            uint64_t v117 = v107[7];
            *(void *)(v106 + 48) = v108;
            *(void *)(v106 + 56) = v117;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v108 - 8))(v115, v116, v108);
          }
          else
          {
            long long v118 = *(_OWORD *)(v107 + 5);
            _OWORD *v115 = *v116;
            *(_OWORD *)(v106 + 40) = v118;
            *(void *)(v106 + 56) = v107[7];
          }
        }
        *(void *)(a1 + v99[7]) = *(uint64_t *)((char *)a2 + v99[7]);
        uint64_t v119 = v99[8];
        uint64_t v120 = a1 + v119;
        uint64_t v121 = (uint64_t)a2 + v119;
        *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
        *(unsigned char *)(v120 + 16) = *(unsigned char *)(v121 + 16);
        *(void *)(a1 + v99[9]) = *(uint64_t *)((char *)a2 + v99[9]);
        *(unsigned char *)(a1 + v99[10]) = *((unsigned char *)a2 + v99[10]);
        *(unsigned char *)(a1 + v99[11]) = *((unsigned char *)a2 + v99[11]);
        *(void *)(a1 + v99[12]) = *(uint64_t *)((char *)a2 + v99[12]);
        uint64_t v122 = v99[13];
        uint64_t v123 = (void *)(a1 + v122);
        unint64_t v124 = (uint64_t *)((char *)a2 + v122);
        uint64_t v125 = v124[1];
        *uint64_t v123 = *v124;
        v123[1] = v125;
        *(unsigned char *)(a1 + v99[14]) = *((unsigned char *)a2 + v99[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if (BYTE2(v15) == 255)
        {
          *uint64_t v13 = *v14;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
        }
        else
        {
          uint64_t v18 = (void *)a2[2];
          uint64_t v19 = a2[3];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, v15, BYTE2(v15) & 1);
          *(void *)(a1 + 16) = v18;
          *(void *)(a1 + 24) = v19;
          *(_WORD *)(a1 + 32) = v15;
          *(unsigned char *)(a1 + 34) = BYTE2(v15) & 1;
        }
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
        }
        else
        {
          int v23 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
          char v24 = (void *)a2[5];
          uint64_t v25 = a2[6];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *((_WORD *)a2 + 28), BYTE2(v23) & 1);
          *(void *)(a1 + 40) = v24;
          *(void *)(a1 + 48) = v25;
          *(_WORD *)(a1 + 56) = v23;
          *(unsigned char *)(a1 + 58) = BYTE2(v23) & 1;
        }
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
        }
        else
        {
          int v32 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
          __int16 v33 = (void *)a2[8];
          uint64_t v34 = a2[9];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v33, v34, *((_WORD *)a2 + 40), BYTE2(v32) & 1);
          *(void *)(a1 + 64) = v33;
          *(void *)(a1 + 72) = v34;
          *(_WORD *)(a1 + 80) = v32;
          *(unsigned char *)(a1 + 82) = BYTE2(v32) & 1;
        }
        *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(void *)(a1 + 112) = a2[14];
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = a2[16];
        *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
        long long v35 = (_OWORD *)(a1 + 144);
        long long v36 = a2 + 18;
        uint64_t v37 = a2[29];
        if (v37 == 1)
        {
          memcpy(v35, v36, 0x108uLL);
        }
        else
        {
          if (*((unsigned __int8 *)a2 + 162) == 255)
          {
            *long long v35 = *v36;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
          }
          else
          {
            int v43 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
            char v44 = (void *)a2[18];
            uint64_t v45 = a2[19];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *((_WORD *)a2 + 80), BYTE2(v43) & 1);
            *(void *)(a1 + 144) = v44;
            *(void *)(a1 + 152) = v45;
            *(_WORD *)(a1 + 160) = v43;
            *(unsigned char *)(a1 + 162) = BYTE2(v43) & 1;
            uint64_t v37 = a2[29];
          }
          *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
          *(void *)(a1 + 168) = a2[21];
          *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
          *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
          uint64_t v46 = (_OWORD *)(a1 + 184);
          uint64_t v47 = a2 + 23;
          if (v37)
          {
            if (*((unsigned __int8 *)a2 + 202) == 255)
            {
              *uint64_t v46 = *v47;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
            }
            else
            {
              int v57 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
              long long v58 = (void *)a2[23];
              uint64_t v59 = a2[24];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v58, v59, *((_WORD *)a2 + 100), BYTE2(v57) & 1);
              *(void *)(a1 + 184) = v58;
              *(void *)(a1 + 192) = v59;
              *(_WORD *)(a1 + 200) = v57;
              *(unsigned char *)(a1 + 202) = BYTE2(v57) & 1;
            }
            if (*((unsigned __int8 *)a2 + 226) == 255)
            {
              *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
            }
            else
            {
              int v70 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
              uint64_t v71 = (void *)a2[26];
              uint64_t v72 = a2[27];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v71, v72, *((_WORD *)a2 + 112), BYTE2(v70) & 1);
              *(void *)(a1 + 208) = v71;
              *(void *)(a1 + 216) = v72;
              *(_WORD *)(a1 + 224) = v70;
              *(unsigned char *)(a1 + 226) = BYTE2(v70) & 1;
            }
            uint64_t v73 = a2[30];
            *(void *)(a1 + 232) = a2[29];
            *(void *)(a1 + 240) = v73;
            *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
            *(void *)(a1 + 256) = a2[32];
            *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
            uint64_t v74 = a2[35];
            *(void *)(a1 + 272) = a2[34];
            *(void *)(a1 + 280) = v74;
            *(void *)(a1 + 288) = a2[36];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v51 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
            *(_OWORD *)(a1 + 264) = v51;
            *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
            long long v52 = *(_OWORD *)(a2 + 25);
            *uint64_t v46 = *v47;
            *(_OWORD *)(a1 + 200) = v52;
            long long v53 = *(_OWORD *)(a2 + 29);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
            *(_OWORD *)(a1 + 232) = v53;
          }
          unint64_t v75 = (_OWORD *)(a1 + 296);
          unint64_t v76 = a2 + 37;
          if (a2[43])
          {
            if (*((unsigned __int8 *)a2 + 314) == 255)
            {
              *unint64_t v75 = *v76;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
            }
            else
            {
              int v83 = (unsigned __int16)*v10 | (*((unsigned __int8 *)a2 + 314) << 16);
              unint64_t v84 = (void *)a2[37];
              uint64_t v85 = a2[38];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v84, v85, *v10, BYTE2(v83) & 1);
              *(void *)(a1 + 296) = v84;
              *(void *)(a1 + 304) = v85;
              *(_WORD *)(a1 + 312) = v83;
              unsigned char *v142 = BYTE2(v83) & 1;
            }
            if (*((unsigned __int8 *)a2 + 338) == 255)
            {
              *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
            }
            else
            {
              int v126 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
              uint64_t v127 = (void *)a2[40];
              uint64_t v128 = a2[41];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v127, v128, *((_WORD *)a2 + 168), BYTE2(v126) & 1);
              *(void *)(a1 + 320) = v127;
              *(void *)(a1 + 328) = v128;
              *(_WORD *)(a1 + 336) = v126;
              *(unsigned char *)(a1 + 338) = BYTE2(v126) & 1;
            }
            uint64_t v129 = a2[44];
            *(void *)(a1 + 344) = a2[43];
            *(void *)(a1 + 352) = v129;
            *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
            *(void *)(a1 + 368) = a2[46];
            *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
            uint64_t v130 = a2[49];
            *(void *)(a1 + 384) = a2[48];
            *(void *)(a1 + 392) = v130;
            *(void *)(a1 + 400) = a2[50];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v77 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v77;
            *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
            long long v78 = *(_OWORD *)(a2 + 39);
            *unint64_t v75 = *v76;
            *(_OWORD *)(a1 + 312) = v78;
            long long v79 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v79;
          }
        }
        uint64_t v131 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v132 = *(int *)(v131 + 52);
        uint64_t v133 = (void *)(a1 + v132);
        uint64_t v134 = (char *)a2 + v132;
        uint64_t v135 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v136 = *(void *)(v135 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
        }
        else
        {
          uint64_t v138 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v133, v134, v138);
          *((unsigned char *)v133 + *(int *)(v135 + 20)) = v134[*(int *)(v135 + 20)];
          (*(void (**)(void *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
        }
        *(void *)(a1 + *(int *)(v131 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v131 + 56));
        uint64_t v139 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)(a1 + *(int *)(v139 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v139 + 20));
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v140 = *(int *)(a3 + 24);
    *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *(unsigned char *)(a1 + v140) = *((unsigned char *)a2 + v140);
  }
  return a1;
}

void destroy for AccessibilityNodeAttachment(uint64_t a1)
{
  type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void **)(a1 + 8);
  }
  else
  {
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    int v4 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
    if (EnumCaseMultiPayload == 1)
    {
      if (*(unsigned __int8 *)(a1 + 34) != 255) {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 58) != 255)
      {
        int v5 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v5, BYTE2(v5) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 82) != 255)
      {
        int v6 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v6, BYTE2(v6) & 1);
      }
      uint64_t v7 = *(void *)(a1 + 232);
      if (v7 != 1)
      {
        if (*(unsigned __int8 *)(a1 + 162) != 255)
        {
          int v8 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v8, BYTE2(v8) & 1);
          uint64_t v7 = *(void *)(a1 + 232);
        }
        if (v7)
        {
          if (*(unsigned __int8 *)(a1 + 202) != 255)
          {
            int v9 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v9, BYTE2(v9) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 226) != 255)
          {
            int v10 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v10, BYTE2(v10) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(a1 + 344))
        {
          if (*(unsigned __int8 *)(a1 + 314) != 255)
          {
            int v11 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v11, BYTE2(v11) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 338) != 255)
          {
            int v12 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v12, BYTE2(v12) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v13 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
      uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
      {
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = a1 + *(int *)(v16 + 24);
      uint64_t v18 = *(void *)(v17 + 48);
      if (v18 != 1)
      {
        if (*(unsigned char *)(v17 + 16) != 0xFF)
        {
          outlined consume of AccessibilityText.Storage(*(void **)v17, *(void *)(v17 + 8), *(_WORD *)(v17 + 16) & 1);
          uint64_t v18 = *(void *)(v17 + 48);
        }
        if (v18) {
          __swift_destroy_boxed_opaque_existential_1(v17 + 24);
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 34) != 255) {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 58) != 255)
      {
        int v19 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v19, BYTE2(v19) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 82) != 255)
      {
        int v20 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v20, BYTE2(v20) & 1);
      }
      uint64_t v21 = *(void *)(a1 + 232);
      if (v21 != 1)
      {
        if (*(unsigned __int8 *)(a1 + 162) != 255)
        {
          int v22 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v22, BYTE2(v22) & 1);
          uint64_t v21 = *(void *)(a1 + 232);
        }
        if (v21)
        {
          if (*(unsigned __int8 *)(a1 + 202) != 255)
          {
            int v23 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v23, BYTE2(v23) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 226) != 255)
          {
            int v24 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v24, BYTE2(v24) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(a1 + 344))
        {
          if (*(unsigned __int8 *)(a1 + 314) != 255)
          {
            int v25 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v25, BYTE2(v25) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 338) != 255)
          {
            int v26 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v26, BYTE2(v26) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v27 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
      uint64_t v28 = type metadata accessor for LinkDestination.Configuration(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
      {
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v27, v29);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      swift_release();
    }
  }
}

uint64_t initializeWithCopy for AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v140 = (unsigned char *)(a1 + 314);
    uint64_t v141 = a3;
    int v8 = (_WORD *)(a2 + 312);
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v10;
    int v11 = (_OWORD *)(a1 + 16);
    int v12 = (_OWORD *)(a2 + 16);
    int v13 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      if (BYTE2(v13) == 255)
      {
        *int v11 = *v12;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      }
      else
      {
        uint64_t v14 = *(void **)(a2 + 16);
        uint64_t v15 = *(void *)(a2 + 24);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v14, v15, v13, BYTE2(v13) & 1);
        *(void *)(a1 + 16) = v14;
        *(void *)(a1 + 24) = v15;
        *(_WORD *)(a1 + 32) = v13;
        *(unsigned char *)(a1 + 34) = BYTE2(v13) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 58) == 255)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      }
      else
      {
        int v18 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
        int v19 = *(void **)(a2 + 40);
        uint64_t v20 = *(void *)(a2 + 48);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v20, *(_WORD *)(a2 + 56), BYTE2(v18) & 1);
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 48) = v20;
        *(_WORD *)(a1 + 56) = v18;
        *(unsigned char *)(a1 + 58) = BYTE2(v18) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 82) == 255)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      }
      else
      {
        int v24 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
        int v25 = *(void **)(a2 + 64);
        uint64_t v26 = *(void *)(a2 + 72);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v25, v26, *(_WORD *)(a2 + 80), BYTE2(v24) & 1);
        *(void *)(a1 + 64) = v25;
        *(void *)(a1 + 72) = v26;
        *(_WORD *)(a1 + 80) = v24;
        *(unsigned char *)(a1 + 82) = BYTE2(v24) & 1;
      }
      *(void *)(a1 + 84) = *(void *)(a2 + 84);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      uint64_t v27 = (_OWORD *)(a1 + 144);
      uint64_t v28 = (_OWORD *)(a2 + 144);
      uint64_t v29 = *(void *)(a2 + 232);
      if (v29 == 1)
      {
        memcpy(v27, v28, 0x108uLL);
      }
      else
      {
        if (*(unsigned __int8 *)(a2 + 162) == 255)
        {
          *uint64_t v27 = *v28;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        }
        else
        {
          int v36 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
          uint64_t v37 = *(void **)(a2 + 144);
          uint64_t v38 = *(void *)(a2 + 152);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *(_WORD *)(a2 + 160), BYTE2(v36) & 1);
          *(void *)(a1 + 144) = v37;
          *(void *)(a1 + 152) = v38;
          *(_WORD *)(a1 + 160) = v36;
          *(unsigned char *)(a1 + 162) = BYTE2(v36) & 1;
          uint64_t v29 = *(void *)(a2 + 232);
        }
        *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
        *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
        uint64_t v39 = (_OWORD *)(a1 + 184);
        uint64_t v40 = (_OWORD *)(a2 + 184);
        if (v29)
        {
          if (*(unsigned __int8 *)(a2 + 202) == 255)
          {
            _OWORD *v39 = *v40;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          }
          else
          {
            int v52 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
            long long v53 = *(void **)(a2 + 184);
            uint64_t v54 = *(void *)(a2 + 192);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v53, v54, *(_WORD *)(a2 + 200), BYTE2(v52) & 1);
            *(void *)(a1 + 184) = v53;
            *(void *)(a1 + 192) = v54;
            *(_WORD *)(a1 + 200) = v52;
            *(unsigned char *)(a1 + 202) = BYTE2(v52) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 226) == 255)
          {
            *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          }
          else
          {
            int v58 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
            uint64_t v59 = *(void **)(a2 + 208);
            uint64_t v60 = *(void *)(a2 + 216);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v59, v60, *(_WORD *)(a2 + 224), BYTE2(v58) & 1);
            *(void *)(a1 + 208) = v59;
            *(void *)(a1 + 216) = v60;
            *(_WORD *)(a1 + 224) = v58;
            *(unsigned char *)(a1 + 226) = BYTE2(v58) & 1;
          }
          uint64_t v61 = *(void *)(a2 + 240);
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          *(void *)(a1 + 240) = v61;
          *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          uint64_t v62 = *(void *)(a2 + 280);
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(void *)(a1 + 280) = v62;
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v46 = *(_OWORD *)(a2 + 264);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
          *(_OWORD *)(a1 + 264) = v46;
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
          long long v47 = *(_OWORD *)(a2 + 200);
          _OWORD *v39 = *v40;
          *(_OWORD *)(a1 + 200) = v47;
          long long v48 = *(_OWORD *)(a2 + 232);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 232) = v48;
        }
        uint64_t v63 = (_OWORD *)(a1 + 296);
        uint64_t v64 = (_OWORD *)(a2 + 296);
        if (*(void *)(a2 + 344))
        {
          if (*(unsigned __int8 *)(a2 + 314) == 255)
          {
            *uint64_t v63 = *v64;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
          }
          else
          {
            int v78 = (unsigned __int16)*v8 | (*(unsigned __int8 *)(a2 + 314) << 16);
            long long v79 = *(void **)(a2 + 296);
            uint64_t v80 = *(void *)(a2 + 304);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v79, v80, *v8, BYTE2(v78) & 1);
            *(void *)(a1 + 296) = v79;
            *(void *)(a1 + 304) = v80;
            *(_WORD *)(a1 + 312) = v78;
            *uint64_t v140 = BYTE2(v78) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 338) == 255)
          {
            *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          }
          else
          {
            int v84 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
            uint64_t v85 = *(void **)(a2 + 320);
            uint64_t v86 = *(void *)(a2 + 328);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v85, v86, *(_WORD *)(a2 + 336), BYTE2(v84) & 1);
            *(void *)(a1 + 320) = v85;
            *(void *)(a1 + 328) = v86;
            *(_WORD *)(a1 + 336) = v84;
            *(unsigned char *)(a1 + 338) = BYTE2(v84) & 1;
          }
          uint64_t v87 = *(void *)(a2 + 352);
          *(void *)(a1 + 344) = *(void *)(a2 + 344);
          *(void *)(a1 + 352) = v87;
          *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
          *(void *)(a1 + 368) = *(void *)(a2 + 368);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
          uint64_t v88 = *(void *)(a2 + 392);
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(void *)(a1 + 392) = v88;
          *(void *)(a1 + 400) = *(void *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v65 = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(a1 + 376) = v65;
          *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
          long long v66 = *(_OWORD *)(a2 + 312);
          *uint64_t v63 = *v64;
          *(_OWORD *)(a1 + 312) = v66;
          long long v67 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 344) = v67;
        }
      }
      uint64_t v89 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v90 = *(int *)(v89 + 52);
      uint64_t v91 = (void *)(a1 + v90);
      uint64_t v92 = (const void *)(a2 + v90);
      uint64_t v93 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v94 = *(void *)(v93 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        uint64_t v96 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v96 - 8) + 16))(v91, v92, v96);
        *((unsigned char *)v91 + *(int *)(v93 + 20)) = *((unsigned char *)v92 + *(int *)(v93 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
      }
      *(void *)(a1 + *(int *)(v89 + 56)) = *(void *)(a2 + *(int *)(v89 + 56));
      uint64_t v97 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v98 = v97[5];
      uint64_t v99 = a1 + v98;
      uint64_t v100 = a2 + v98;
      uint64_t v101 = *(void *)(v100 + 8);
      *(void *)uint64_t v99 = *(void *)v100;
      *(void *)(v99 + 8) = v101;
      uint64_t v102 = *(void *)(v100 + 24);
      *(void *)(v99 + 16) = *(void *)(v100 + 16);
      *(void *)(v99 + 24) = v102;
      *(unsigned char *)(v99 + 48) = *(unsigned char *)(v100 + 48);
      *(_OWORD *)(v99 + 32) = *(_OWORD *)(v100 + 32);
      uint64_t v103 = v97[6];
      uint64_t v104 = a1 + v103;
      uint64_t v105 = (uint64_t *)(a2 + v103);
      uint64_t v106 = *(void *)(a2 + v103 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v106 == 1)
      {
        long long v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
        *(_OWORD *)(v104 + 16) = v107;
        long long v108 = *((_OWORD *)v105 + 3);
        *(_OWORD *)(v104 + 32) = *((_OWORD *)v105 + 2);
        *(_OWORD *)(v104 + 48) = v108;
        a3 = v141;
      }
      else
      {
        __int16 v109 = *((_WORD *)v105 + 8);
        if (*((unsigned char *)v105 + 16) == 0xFF)
        {
          *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
          *(_WORD *)(v104 + 16) = *((_WORD *)v105 + 8);
        }
        else
        {
          char v110 = v109 & 1;
          uint64_t v111 = *v105;
          uint64_t v112 = v105[1];
          outlined copy of AccessibilityText.Storage((void *)*v105, v112, v109 & 1);
          *(void *)uint64_t v104 = v111;
          *(void *)(v104 + 8) = v112;
          *(unsigned char *)(v104 + 16) = v110;
          *(unsigned char *)(v104 + 17) = *((unsigned char *)v105 + 17);
          uint64_t v106 = v105[6];
        }
        a3 = v141;
        uint64_t v113 = (_OWORD *)(v104 + 24);
        uint64_t v114 = v105 + 3;
        if (v106)
        {
          uint64_t v115 = v105[7];
          *(void *)(v104 + 48) = v106;
          *(void *)(v104 + 56) = v115;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v106 - 8))(v113, v114, v106);
        }
        else
        {
          long long v116 = *(_OWORD *)(v105 + 5);
          *uint64_t v113 = *v114;
          *(_OWORD *)(v104 + 40) = v116;
          *(void *)(v104 + 56) = v105[7];
        }
      }
      *(void *)(a1 + v97[7]) = *(void *)(a2 + v97[7]);
      uint64_t v117 = v97[8];
      uint64_t v118 = a1 + v117;
      uint64_t v119 = a2 + v117;
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
      *(void *)(a1 + v97[9]) = *(void *)(a2 + v97[9]);
      *(unsigned char *)(a1 + v97[10]) = *(unsigned char *)(a2 + v97[10]);
      *(unsigned char *)(a1 + v97[11]) = *(unsigned char *)(a2 + v97[11]);
      *(void *)(a1 + v97[12]) = *(void *)(a2 + v97[12]);
      uint64_t v120 = v97[13];
      uint64_t v121 = (void *)(a1 + v120);
      uint64_t v122 = (void *)(a2 + v120);
      uint64_t v123 = v122[1];
      *uint64_t v121 = *v122;
      v121[1] = v123;
      *(unsigned char *)(a1 + v97[14]) = *(unsigned char *)(a2 + v97[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
LABEL_85:
      swift_storeEnumTagMultiPayload();
      goto LABEL_86;
    }
    if (BYTE2(v13) == 255)
    {
      *int v11 = *v12;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    }
    else
    {
      uint64_t v16 = *(void **)(a2 + 16);
      uint64_t v17 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, v13, BYTE2(v13) & 1);
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = v17;
      *(_WORD *)(a1 + 32) = v13;
      *(unsigned char *)(a1 + 34) = BYTE2(v13) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 58) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    }
    else
    {
      int v21 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
      int v22 = *(void **)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
      *(void *)(a1 + 40) = v22;
      *(void *)(a1 + 48) = v23;
      *(_WORD *)(a1 + 56) = v21;
      *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    }
    else
    {
      int v30 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
      uint64_t v31 = *(void **)(a2 + 64);
      uint64_t v32 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v31, v32, *(_WORD *)(a2 + 80), BYTE2(v30) & 1);
      *(void *)(a1 + 64) = v31;
      *(void *)(a1 + 72) = v32;
      *(_WORD *)(a1 + 80) = v30;
      *(unsigned char *)(a1 + 82) = BYTE2(v30) & 1;
    }
    *(void *)(a1 + 84) = *(void *)(a2 + 84);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    __int16 v33 = (_OWORD *)(a1 + 144);
    uint64_t v34 = (_OWORD *)(a2 + 144);
    uint64_t v35 = *(void *)(a2 + 232);
    if (v35 == 1)
    {
      memcpy(v33, v34, 0x108uLL);
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        _OWORD *v33 = *v34;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      }
      else
      {
        int v41 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        long long v42 = *(void **)(a2 + 144);
        uint64_t v43 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v42, v43, *(_WORD *)(a2 + 160), BYTE2(v41) & 1);
        *(void *)(a1 + 144) = v42;
        *(void *)(a1 + 152) = v43;
        *(_WORD *)(a1 + 160) = v41;
        *(unsigned char *)(a1 + 162) = BYTE2(v41) & 1;
        uint64_t v35 = *(void *)(a2 + 232);
      }
      *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
      char v44 = (_OWORD *)(a1 + 184);
      uint64_t v45 = (_OWORD *)(a2 + 184);
      if (v35)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          *char v44 = *v45;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
        }
        else
        {
          int v55 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          uint64_t v56 = *(void **)(a2 + 184);
          uint64_t v57 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v56, v57, *(_WORD *)(a2 + 200), BYTE2(v55) & 1);
          *(void *)(a1 + 184) = v56;
          *(void *)(a1 + 192) = v57;
          *(_WORD *)(a1 + 200) = v55;
          *(unsigned char *)(a1 + 202) = BYTE2(v55) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        }
        else
        {
          int v68 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          long long v69 = *(void **)(a2 + 208);
          uint64_t v70 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v69, v70, *(_WORD *)(a2 + 224), BYTE2(v68) & 1);
          *(void *)(a1 + 208) = v69;
          *(void *)(a1 + 216) = v70;
          *(_WORD *)(a1 + 224) = v68;
          *(unsigned char *)(a1 + 226) = BYTE2(v68) & 1;
        }
        uint64_t v71 = *(void *)(a2 + 240);
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        *(void *)(a1 + 240) = v71;
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        uint64_t v72 = *(void *)(a2 + 280);
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = v72;
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v49 = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = v49;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
        long long v50 = *(_OWORD *)(a2 + 200);
        *char v44 = *v45;
        *(_OWORD *)(a1 + 200) = v50;
        long long v51 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 232) = v51;
      }
      uint64_t v73 = (_OWORD *)(a1 + 296);
      uint64_t v74 = (_OWORD *)(a2 + 296);
      if (*(void *)(a2 + 344))
      {
        if (*(unsigned __int8 *)(a2 + 314) == 255)
        {
          *uint64_t v73 = *v74;
          *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        }
        else
        {
          int v81 = (unsigned __int16)*v8 | (*(unsigned __int8 *)(a2 + 314) << 16);
          uint64_t v82 = *(void **)(a2 + 296);
          uint64_t v83 = *(void *)(a2 + 304);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v82, v83, *v8, BYTE2(v81) & 1);
          *(void *)(a1 + 296) = v82;
          *(void *)(a1 + 304) = v83;
          *(_WORD *)(a1 + 312) = v81;
          *uint64_t v140 = BYTE2(v81) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 338) == 255)
        {
          *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        }
        else
        {
          int v124 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
          uint64_t v125 = *(void **)(a2 + 320);
          uint64_t v126 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v125, v126, *(_WORD *)(a2 + 336), BYTE2(v124) & 1);
          *(void *)(a1 + 320) = v125;
          *(void *)(a1 + 328) = v126;
          *(_WORD *)(a1 + 336) = v124;
          *(unsigned char *)(a1 + 338) = BYTE2(v124) & 1;
        }
        a3 = v141;
        uint64_t v127 = *(void *)(a2 + 352);
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        *(void *)(a1 + 352) = v127;
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 368) = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        uint64_t v128 = *(void *)(a2 + 392);
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = v128;
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_81;
      }
      long long v75 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v75;
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      long long v76 = *(_OWORD *)(a2 + 312);
      *uint64_t v73 = *v74;
      *(_OWORD *)(a1 + 312) = v76;
      long long v77 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v77;
    }
    a3 = v141;
LABEL_81:
    uint64_t v129 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v130 = *(int *)(v129 + 52);
    uint64_t v131 = (void *)(a1 + v130);
    uint64_t v132 = (const void *)(a2 + v130);
    uint64_t v133 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v134 = *(void *)(v133 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
    }
    else
    {
      uint64_t v136 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v136 - 8) + 16))(v131, v132, v136);
      *((unsigned char *)v131 + *(int *)(v133 + 20)) = *((unsigned char *)v132 + *(int *)(v133 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
    }
    *(void *)(a1 + *(int *)(v129 + 56)) = *(void *)(a2 + *(int *)(v129 + 56));
    uint64_t v137 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
    *(void *)(a1 + *(int *)(v137 + 20)) = *(void *)(a2 + *(int *)(v137 + 20));
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_85;
  }
  int v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain();
  id v7 = v6;
LABEL_86:
  swift_storeEnumTagMultiPayload();
  uint64_t v138 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v138) = *(unsigned char *)(a2 + v138);
  return a1;
}

uint64_t assignWithCopy for AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1, type metadata accessor for AccessibilityNodeAttachment.Storage);
    type metadata accessor for AccessibilityNodeAttachment.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      int v6 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRetain();
      id v7 = v6;
    }
    else
    {
      int v8 = (_WORD *)(a2 + 312);
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v10 = (_OWORD *)(a1 + 16);
      int v11 = (long long *)(a2 + 16);
      int v12 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
      swift_bridgeObjectRetain();
      if (EnumCaseMultiPayload == 1)
      {
        if (BYTE2(v12) == 255)
        {
          long long v13 = *v11;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
          *uint64_t v10 = v13;
        }
        else
        {
          uint64_t v15 = *(void **)(a2 + 16);
          uint64_t v16 = *(void *)(a2 + 24);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v12, BYTE2(v12) & 1);
          *(void *)(a1 + 16) = v15;
          *(void *)(a1 + 24) = v16;
          *(_WORD *)(a1 + 32) = v12;
          *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 58) == 255)
        {
          long long v17 = *(_OWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
          *(_OWORD *)(a1 + 40) = v17;
        }
        else
        {
          int v21 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
          int v22 = *(void **)(a2 + 40);
          uint64_t v23 = *(void *)(a2 + 48);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
          *(void *)(a1 + 40) = v22;
          *(void *)(a1 + 48) = v23;
          *(_WORD *)(a1 + 56) = v21;
          *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 82) == 255)
        {
          long long v24 = *(_OWORD *)(a2 + 64);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
          *(_OWORD *)(a1 + 64) = v24;
        }
        else
        {
          int v29 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
          int v30 = *(void **)(a2 + 64);
          uint64_t v31 = *(void *)(a2 + 72);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v30, v31, *(_WORD *)(a2 + 80), BYTE2(v29) & 1);
          *(void *)(a1 + 64) = v30;
          *(void *)(a1 + 72) = v31;
          *(_WORD *)(a1 + 80) = v29;
          *(unsigned char *)(a1 + 82) = BYTE2(v29) & 1;
        }
        *(void *)(a1 + 84) = *(void *)(a2 + 84);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        uint64_t v32 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v32;
        uint64_t v33 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v33;
        uint64_t v34 = (_OWORD *)(a1 + 144);
        uint64_t v35 = (long long *)(a2 + 144);
        if (*(void *)(a2 + 232) == 1)
        {
          memcpy(v34, v35, 0x108uLL);
        }
        else
        {
          if (*(unsigned __int8 *)(a2 + 162) == 255)
          {
            long long v43 = *v35;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
            *uint64_t v34 = v43;
          }
          else
          {
            int v45 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
            long long v46 = *(void **)(a2 + 144);
            uint64_t v47 = *(void *)(a2 + 152);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, *(_WORD *)(a2 + 160), BYTE2(v45) & 1);
            *(void *)(a1 + 144) = v46;
            *(void *)(a1 + 152) = v47;
            *(_WORD *)(a1 + 160) = v45;
            *(unsigned char *)(a1 + 162) = BYTE2(v45) & 1;
          }
          *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
          *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
          uint64_t v48 = *(void *)(a2 + 168);
          *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
          *(void *)(a1 + 168) = v48;
          *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
          *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
          long long v49 = (_OWORD *)(a1 + 184);
          long long v50 = (long long *)(a2 + 184);
          if (*(void *)(a2 + 232))
          {
            if (*(unsigned __int8 *)(a2 + 202) == 255)
            {
              long long v51 = *v50;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
              *long long v49 = v51;
            }
            else
            {
              int v69 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
              uint64_t v70 = *(void **)(a2 + 184);
              uint64_t v71 = *(void *)(a2 + 192);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v70, v71, *(_WORD *)(a2 + 200), BYTE2(v69) & 1);
              *(void *)(a1 + 184) = v70;
              *(void *)(a1 + 192) = v71;
              *(_WORD *)(a1 + 200) = v69;
              *(unsigned char *)(a1 + 202) = BYTE2(v69) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 226) == 255)
            {
              long long v72 = *(_OWORD *)(a2 + 208);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
              *(_OWORD *)(a1 + 208) = v72;
            }
            else
            {
              int v77 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
              int v78 = *(void **)(a2 + 208);
              uint64_t v79 = *(void *)(a2 + 216);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v78, v79, *(_WORD *)(a2 + 224), BYTE2(v77) & 1);
              *(void *)(a1 + 208) = v78;
              *(void *)(a1 + 216) = v79;
              *(_WORD *)(a1 + 224) = v77;
              *(unsigned char *)(a1 + 226) = BYTE2(v77) & 1;
            }
            *(void *)(a1 + 232) = *(void *)(a2 + 232);
            uint64_t v80 = *(void *)(a2 + 240);
            *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
            *(void *)(a1 + 240) = v80;
            uint64_t v81 = *(void *)(a2 + 256);
            *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
            *(void *)(a1 + 256) = v81;
            *(void *)(a1 + 272) = *(void *)(a2 + 272);
            *(void *)(a1 + 280) = *(void *)(a2 + 280);
            *(void *)(a1 + 288) = *(void *)(a2 + 288);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v59 = *v50;
            long long v60 = *(_OWORD *)(a2 + 216);
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
            *(_OWORD *)(a1 + 216) = v60;
            *long long v49 = v59;
            long long v61 = *(_OWORD *)(a2 + 232);
            long long v62 = *(_OWORD *)(a2 + 248);
            long long v63 = *(_OWORD *)(a2 + 280);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
            *(_OWORD *)(a1 + 280) = v63;
            *(_OWORD *)(a1 + 232) = v61;
            *(_OWORD *)(a1 + 248) = v62;
          }
          uint64_t v82 = (_OWORD *)(a1 + 296);
          uint64_t v83 = (long long *)(a2 + 296);
          if (*(void *)(a2 + 344))
          {
            if (*(unsigned __int8 *)(a2 + 314) == 255)
            {
              long long v84 = *v83;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
              _OWORD *v82 = v84;
            }
            else
            {
              int v103 = (unsigned __int16)*v8 | (*(unsigned __int8 *)(a2 + 314) << 16);
              uint64_t v104 = *(void **)(a2 + 296);
              uint64_t v105 = *(void *)(a2 + 304);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v104, v105, *v8, BYTE2(v103) & 1);
              *(void *)(a1 + 296) = v104;
              *(void *)(a1 + 304) = v105;
              *(_WORD *)(a1 + 312) = v103;
              *(unsigned char *)(a1 + 314) = BYTE2(v103) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 338) == 255)
            {
              long long v106 = *(_OWORD *)(a2 + 320);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
              *(_OWORD *)(a1 + 320) = v106;
            }
            else
            {
              int v111 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
              uint64_t v112 = *(void **)(a2 + 320);
              uint64_t v113 = *(void *)(a2 + 328);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v112, v113, *(_WORD *)(a2 + 336), BYTE2(v111) & 1);
              *(void *)(a1 + 320) = v112;
              *(void *)(a1 + 328) = v113;
              *(_WORD *)(a1 + 336) = v111;
              *(unsigned char *)(a1 + 338) = BYTE2(v111) & 1;
            }
            *(void *)(a1 + 344) = *(void *)(a2 + 344);
            uint64_t v114 = *(void *)(a2 + 352);
            *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
            *(void *)(a1 + 352) = v114;
            uint64_t v115 = *(void *)(a2 + 368);
            *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
            *(void *)(a1 + 368) = v115;
            *(void *)(a1 + 384) = *(void *)(a2 + 384);
            *(void *)(a1 + 392) = *(void *)(a2 + 392);
            *(void *)(a1 + 400) = *(void *)(a2 + 400);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v85 = *v83;
            long long v86 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v86;
            _OWORD *v82 = v85;
            long long v87 = *(_OWORD *)(a2 + 344);
            long long v88 = *(_OWORD *)(a2 + 360);
            long long v89 = *(_OWORD *)(a2 + 392);
            *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
            *(_OWORD *)(a1 + 392) = v89;
            *(_OWORD *)(a1 + 344) = v87;
            *(_OWORD *)(a1 + 360) = v88;
          }
        }
        uint64_t v116 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v117 = *(int *)(v116 + 52);
        uint64_t v118 = (void *)(a1 + v117);
        uint64_t v119 = (const void *)(a2 + v117);
        uint64_t v120 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v121 = *(void *)(v120 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          uint64_t v123 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v123 - 8) + 16))(v118, v119, v123);
          *((unsigned char *)v118 + *(int *)(v120 + 20)) = *((unsigned char *)v119 + *(int *)(v120 + 20));
          (*(void (**)(void *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
        }
        *(void *)(a1 + *(int *)(v116 + 56)) = *(void *)(a2 + *(int *)(v116 + 56));
        int v124 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v125 = v124[5];
        uint64_t v126 = a1 + v125;
        uint64_t v127 = a2 + v125;
        *(void *)uint64_t v126 = *(void *)v127;
        *(void *)(v126 + 8) = *(void *)(v127 + 8);
        *(void *)(v126 + 16) = *(void *)(v127 + 16);
        *(void *)(v126 + 24) = *(void *)(v127 + 24);
        long long v128 = *(_OWORD *)(v127 + 32);
        *(unsigned char *)(v126 + 48) = *(unsigned char *)(v127 + 48);
        *(_OWORD *)(v126 + 32) = v128;
        uint64_t v129 = v124[6];
        uint64_t v130 = a1 + v129;
        uint64_t v131 = (long long *)(a2 + v129);
        uint64_t v132 = *(void *)(a2 + v129 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v132 == 1)
        {
          long long v133 = *v131;
          long long v134 = v131[1];
          long long v135 = v131[3];
          *(_OWORD *)(v130 + 32) = v131[2];
          *(_OWORD *)(v130 + 48) = v135;
          *(_OWORD *)uint64_t v130 = v133;
          *(_OWORD *)(v130 + 16) = v134;
        }
        else
        {
          __int16 v136 = *((_WORD *)v131 + 8);
          if (*((unsigned char *)v131 + 16) == 0xFF)
          {
            long long v137 = *v131;
            *(_WORD *)(v130 + 16) = *((_WORD *)v131 + 8);
            *(_OWORD *)uint64_t v130 = v137;
          }
          else
          {
            char v138 = v136 & 1;
            uint64_t v139 = *(void *)v131;
            uint64_t v140 = *((void *)v131 + 1);
            outlined copy of AccessibilityText.Storage(*(void **)v131, v140, v136 & 1);
            *(void *)uint64_t v130 = v139;
            *(void *)(v130 + 8) = v140;
            *(unsigned char *)(v130 + 16) = v138;
            *(unsigned char *)(v130 + 17) = *((unsigned char *)v131 + 17);
          }
          uint64_t v141 = (_OWORD *)(v130 + 24);
          uint64_t v142 = (long long *)((char *)v131 + 24);
          uint64_t v143 = *((void *)v131 + 6);
          if (v143)
          {
            *(void *)(v130 + 48) = v143;
            *(void *)(v130 + 56) = *((void *)v131 + 7);
            (**(void (***)(_OWORD *, long long *))(v143 - 8))(v141, v142);
          }
          else
          {
            long long v144 = *v142;
            long long v145 = *(long long *)((char *)v131 + 40);
            *(void *)(v130 + 56) = *((void *)v131 + 7);
            *uint64_t v141 = v144;
            *(_OWORD *)(v130 + 40) = v145;
          }
        }
        *(void *)(a1 + v124[7]) = *(void *)(a2 + v124[7]);
        uint64_t v146 = v124[8];
        uint64_t v147 = a1 + v146;
        uint64_t v148 = (long long *)(a2 + v146);
        long long v149 = *v148;
        *(unsigned char *)(v147 + 16) = *((unsigned char *)v148 + 16);
        *(_OWORD *)uint64_t v147 = v149;
        *(void *)(a1 + v124[9]) = *(void *)(a2 + v124[9]);
        *(unsigned char *)(a1 + v124[10]) = *(unsigned char *)(a2 + v124[10]);
        *(unsigned char *)(a1 + v124[11]) = *(unsigned char *)(a2 + v124[11]);
        *(void *)(a1 + v124[12]) = *(void *)(a2 + v124[12]);
        uint64_t v150 = v124[13];
        unint64_t v151 = (void *)(a1 + v150);
        uint64_t v152 = (void *)(a2 + v150);
        void *v151 = *v152;
        v151[1] = v152[1];
        *(unsigned char *)(a1 + v124[14]) = *(unsigned char *)(a2 + v124[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if (BYTE2(v12) == 255)
        {
          long long v14 = *v11;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
          *uint64_t v10 = v14;
        }
        else
        {
          int v18 = *(void **)(a2 + 16);
          uint64_t v19 = *(void *)(a2 + 24);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, v12, BYTE2(v12) & 1);
          *(void *)(a1 + 16) = v18;
          *(void *)(a1 + 24) = v19;
          *(_WORD *)(a1 + 32) = v12;
          *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 58) == 255)
        {
          long long v20 = *(_OWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
          *(_OWORD *)(a1 + 40) = v20;
        }
        else
        {
          int v25 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
          uint64_t v26 = *(void **)(a2 + 40);
          uint64_t v27 = *(void *)(a2 + 48);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v26, v27, *(_WORD *)(a2 + 56), BYTE2(v25) & 1);
          *(void *)(a1 + 40) = v26;
          *(void *)(a1 + 48) = v27;
          *(_WORD *)(a1 + 56) = v25;
          *(unsigned char *)(a1 + 58) = BYTE2(v25) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 82) == 255)
        {
          long long v28 = *(_OWORD *)(a2 + 64);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
          *(_OWORD *)(a1 + 64) = v28;
        }
        else
        {
          int v36 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
          uint64_t v37 = *(void **)(a2 + 64);
          uint64_t v38 = *(void *)(a2 + 72);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *(_WORD *)(a2 + 80), BYTE2(v36) & 1);
          *(void *)(a1 + 64) = v37;
          *(void *)(a1 + 72) = v38;
          *(_WORD *)(a1 + 80) = v36;
          *(unsigned char *)(a1 + 82) = BYTE2(v36) & 1;
        }
        *(void *)(a1 + 84) = *(void *)(a2 + 84);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        uint64_t v39 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v39;
        uint64_t v40 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v40;
        int v41 = (_OWORD *)(a1 + 144);
        long long v42 = (long long *)(a2 + 144);
        if (*(void *)(a2 + 232) == 1)
        {
          memcpy(v41, v42, 0x108uLL);
        }
        else
        {
          if (*(unsigned __int8 *)(a2 + 162) == 255)
          {
            long long v44 = *v42;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
            *int v41 = v44;
          }
          else
          {
            int v52 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
            long long v53 = *(void **)(a2 + 144);
            uint64_t v54 = *(void *)(a2 + 152);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v53, v54, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
            *(void *)(a1 + 144) = v53;
            *(void *)(a1 + 152) = v54;
            *(_WORD *)(a1 + 160) = v52;
            *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
          }
          *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
          *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
          uint64_t v55 = *(void *)(a2 + 168);
          *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
          *(void *)(a1 + 168) = v55;
          *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
          *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
          uint64_t v56 = (_OWORD *)(a1 + 184);
          uint64_t v57 = (long long *)(a2 + 184);
          if (*(void *)(a2 + 232))
          {
            if (*(unsigned __int8 *)(a2 + 202) == 255)
            {
              long long v58 = *v57;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
              *uint64_t v56 = v58;
            }
            else
            {
              int v73 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
              uint64_t v74 = *(void **)(a2 + 184);
              uint64_t v75 = *(void *)(a2 + 192);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v74, v75, *(_WORD *)(a2 + 200), BYTE2(v73) & 1);
              *(void *)(a1 + 184) = v74;
              *(void *)(a1 + 192) = v75;
              *(_WORD *)(a1 + 200) = v73;
              *(unsigned char *)(a1 + 202) = BYTE2(v73) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 226) == 255)
            {
              long long v76 = *(_OWORD *)(a2 + 208);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
              *(_OWORD *)(a1 + 208) = v76;
            }
            else
            {
              int v90 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
              uint64_t v91 = *(void **)(a2 + 208);
              uint64_t v92 = *(void *)(a2 + 216);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v91, v92, *(_WORD *)(a2 + 224), BYTE2(v90) & 1);
              *(void *)(a1 + 208) = v91;
              *(void *)(a1 + 216) = v92;
              *(_WORD *)(a1 + 224) = v90;
              *(unsigned char *)(a1 + 226) = BYTE2(v90) & 1;
            }
            *(void *)(a1 + 232) = *(void *)(a2 + 232);
            uint64_t v93 = *(void *)(a2 + 240);
            *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
            *(void *)(a1 + 240) = v93;
            uint64_t v94 = *(void *)(a2 + 256);
            *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
            *(void *)(a1 + 256) = v94;
            *(void *)(a1 + 272) = *(void *)(a2 + 272);
            *(void *)(a1 + 280) = *(void *)(a2 + 280);
            *(void *)(a1 + 288) = *(void *)(a2 + 288);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v64 = *v57;
            long long v65 = *(_OWORD *)(a2 + 216);
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
            *(_OWORD *)(a1 + 216) = v65;
            *uint64_t v56 = v64;
            long long v66 = *(_OWORD *)(a2 + 232);
            long long v67 = *(_OWORD *)(a2 + 248);
            long long v68 = *(_OWORD *)(a2 + 280);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
            *(_OWORD *)(a1 + 280) = v68;
            *(_OWORD *)(a1 + 232) = v66;
            *(_OWORD *)(a1 + 248) = v67;
          }
          uint64_t v95 = (_OWORD *)(a1 + 296);
          uint64_t v96 = (long long *)(a2 + 296);
          if (*(void *)(a2 + 344))
          {
            if (*(unsigned __int8 *)(a2 + 314) == 255)
            {
              long long v97 = *v96;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
              *uint64_t v95 = v97;
            }
            else
            {
              int v107 = (unsigned __int16)*v8 | (*(unsigned __int8 *)(a2 + 314) << 16);
              long long v108 = *(void **)(a2 + 296);
              uint64_t v109 = *(void *)(a2 + 304);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v108, v109, *v8, BYTE2(v107) & 1);
              *(void *)(a1 + 296) = v108;
              *(void *)(a1 + 304) = v109;
              *(_WORD *)(a1 + 312) = v107;
              *(unsigned char *)(a1 + 314) = BYTE2(v107) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 338) == 255)
            {
              long long v110 = *(_OWORD *)(a2 + 320);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
              *(_OWORD *)(a1 + 320) = v110;
            }
            else
            {
              int v153 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
              uint64_t v154 = *(void **)(a2 + 320);
              uint64_t v155 = *(void *)(a2 + 328);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v154, v155, *(_WORD *)(a2 + 336), BYTE2(v153) & 1);
              *(void *)(a1 + 320) = v154;
              *(void *)(a1 + 328) = v155;
              *(_WORD *)(a1 + 336) = v153;
              *(unsigned char *)(a1 + 338) = BYTE2(v153) & 1;
            }
            *(void *)(a1 + 344) = *(void *)(a2 + 344);
            uint64_t v156 = *(void *)(a2 + 352);
            *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
            *(void *)(a1 + 352) = v156;
            uint64_t v157 = *(void *)(a2 + 368);
            *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
            *(void *)(a1 + 368) = v157;
            *(void *)(a1 + 384) = *(void *)(a2 + 384);
            *(void *)(a1 + 392) = *(void *)(a2 + 392);
            *(void *)(a1 + 400) = *(void *)(a2 + 400);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v98 = *v96;
            long long v99 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v99;
            *uint64_t v95 = v98;
            long long v100 = *(_OWORD *)(a2 + 344);
            long long v101 = *(_OWORD *)(a2 + 360);
            long long v102 = *(_OWORD *)(a2 + 392);
            *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
            *(_OWORD *)(a1 + 392) = v102;
            *(_OWORD *)(a1 + 344) = v100;
            *(_OWORD *)(a1 + 360) = v101;
          }
        }
        uint64_t v158 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v159 = *(int *)(v158 + 52);
        uint64_t v160 = (void *)(a1 + v159);
        uint64_t v161 = (const void *)(a2 + v159);
        uint64_t v162 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v163 = *(void *)(v162 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v163 + 48))(v161, 1, v162))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v160, v161, *(void *)(*(void *)(v164 - 8) + 64));
        }
        else
        {
          uint64_t v165 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v165 - 8) + 16))(v160, v161, v165);
          *((unsigned char *)v160 + *(int *)(v162 + 20)) = *((unsigned char *)v161 + *(int *)(v162 + 20));
          (*(void (**)(void *, void, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
        }
        *(void *)(a1 + *(int *)(v158 + 56)) = *(void *)(a2 + *(int *)(v158 + 56));
        uint64_t v166 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)(a1 + *(int *)(v166 + 20)) = *(void *)(a2 + *(int *)(v166 + 20));
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for AccessibilityNodeAttachment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    long long v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    *(_DWORD *)((char *)a1 + 31) = *(_DWORD *)((char *)a2 + 31);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_DWORD *)((char *)a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    a1[4] = a2[4];
    *(_DWORD *)((char *)a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    *(void *)((char *)a1 + 84) = *(void *)((char *)a2 + 84);
    long long v9 = a2[6];
    *((unsigned char *)a1 + 120) = *((unsigned char *)a2 + 120);
    *((void *)a1 + 14) = *((void *)a2 + 14);
    *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
    *((void *)a1 + 16) = *((void *)a2 + 16);
    a1[6] = v9;
    memcpy(a1 + 9, a2 + 9, 0x108uLL);
    uint64_t v10 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v11 = *(int *)(v10 + 52);
    int v12 = (char *)a1 + v11;
    long long v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v15 = *(void *)(v14 - 8);
    int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    if (EnumCaseMultiPayload == 1)
    {
      if (v16)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v12, v13, v19);
        v12[*(int *)(v14 + 20)] = v13[*(int *)(v14 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(void *)((char *)a1 + *(int *)(v10 + 56)) = *(void *)((char *)a2 + *(int *)(v10 + 56));
      long long v20 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v21 = v20[5];
      int v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      long long v24 = *((_OWORD *)v23 + 1);
      *(_OWORD *)int v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v24;
      *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
      v22[48] = v23[48];
      uint64_t v25 = v20[6];
      uint64_t v26 = (_OWORD *)((char *)a1 + v25);
      uint64_t v27 = (_OWORD *)((char *)a2 + v25);
      long long v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      long long v29 = v27[3];
      uint64_t v26[2] = v27[2];
      v26[3] = v29;
      *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
      uint64_t v30 = v20[8];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
      *((unsigned char *)a1 + v20[10]) = *((unsigned char *)a2 + v20[10]);
      *((unsigned char *)a1 + v20[11]) = *((unsigned char *)a2 + v20[11]);
      *(void *)((char *)a1 + v20[12]) = *(void *)((char *)a2 + v20[12]);
      *(_OWORD *)((char *)a1 + v20[13]) = *(_OWORD *)((char *)a2 + v20[13]);
      *((unsigned char *)a1 + v20[14]) = *((unsigned char *)a2 + v20[14]);
    }
    else
    {
      if (v16)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        uint64_t v33 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v12, v13, v33);
        v12[*(int *)(v14 + 20)] = v13[*(int *)(v14 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      *(void *)((char *)a1 + *(int *)(v10 + 56)) = *(void *)((char *)a2 + *(int *)(v10 + 56));
      uint64_t v34 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)((char *)a1 + *(int *)(v34 + 20)) = *(void *)((char *)a2 + *(int *)(v34 + 20));
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v35 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  return a1;
}

_OWORD *assignWithTake for AccessibilityNodeAttachment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)a1, type metadata accessor for AccessibilityNodeAttachment.Storage);
    uint64_t v6 = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      long long v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      *(_DWORD *)((char *)a1 + 31) = *(_DWORD *)((char *)a2 + 31);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_DWORD *)((char *)a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      a1[4] = a2[4];
      *(_DWORD *)((char *)a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      *(void *)((char *)a1 + 84) = *(void *)((char *)a2 + 84);
      long long v9 = a2[6];
      *((unsigned char *)a1 + 120) = *((unsigned char *)a2 + 120);
      *((void *)a1 + 14) = *((void *)a2 + 14);
      *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
      *((void *)a1 + 16) = *((void *)a2 + 16);
      a1[6] = v9;
      memcpy(a1 + 9, a2 + 9, 0x108uLL);
      uint64_t v10 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v11 = *(int *)(v10 + 52);
      int v12 = (char *)a1 + v11;
      long long v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v15 = *(void *)(v14 - 8);
      int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
      if (EnumCaseMultiPayload == 1)
      {
        if (v16)
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          uint64_t v19 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v12, v13, v19);
          v12[*(int *)(v14 + 20)] = v13[*(int *)(v14 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        *(void *)((char *)a1 + *(int *)(v10 + 56)) = *(void *)((char *)a2 + *(int *)(v10 + 56));
        long long v20 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v21 = v20[5];
        int v22 = (char *)a1 + v21;
        uint64_t v23 = (char *)a2 + v21;
        long long v24 = *((_OWORD *)v23 + 1);
        *(_OWORD *)int v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v24;
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        v22[48] = v23[48];
        uint64_t v25 = v20[6];
        uint64_t v26 = (_OWORD *)((char *)a1 + v25);
        uint64_t v27 = (_OWORD *)((char *)a2 + v25);
        long long v28 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v28;
        long long v29 = v27[3];
        uint64_t v26[2] = v27[2];
        v26[3] = v29;
        *(void *)((char *)a1 + v20[7]) = *(void *)((char *)a2 + v20[7]);
        uint64_t v30 = v20[8];
        uint64_t v31 = (char *)a1 + v30;
        uint64_t v32 = (char *)a2 + v30;
        *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
        v31[16] = v32[16];
        *(void *)((char *)a1 + v20[9]) = *(void *)((char *)a2 + v20[9]);
        *((unsigned char *)a1 + v20[10]) = *((unsigned char *)a2 + v20[10]);
        *((unsigned char *)a1 + v20[11]) = *((unsigned char *)a2 + v20[11]);
        *(void *)((char *)a1 + v20[12]) = *(void *)((char *)a2 + v20[12]);
        *(_OWORD *)((char *)a1 + v20[13]) = *(_OWORD *)((char *)a2 + v20[13]);
        *((unsigned char *)a1 + v20[14]) = *((unsigned char *)a2 + v20[14]);
      }
      else
      {
        if (v16)
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          uint64_t v33 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v12, v13, v33);
          v12[*(int *)(v14 + 20)] = v13[*(int *)(v14 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
        }
        *(void *)((char *)a1 + *(int *)(v10 + 56)) = *(void *)((char *)a2 + *(int *)(v10 + 56));
        uint64_t v34 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)((char *)a1 + *(int *)(v34 + 20)) = *(void *)((char *)a2 + *(int *)(v34 + 20));
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v35 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  *((unsigned char *)a1 + v35) = *((unsigned char *)a2 + v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246167140);
}

uint64_t sub_246167140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246167224);
}

uint64_t sub_246167224(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment.Storage(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityNodeAttachment()
{
  uint64_t result = type metadata accessor for AccessibilityNodeAttachment.Storage(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = (void *)a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRetain();
      id v7 = v6;
    }
    else
    {
      uint64_t v9 = (unsigned char *)(a1 + 314);
      unsigned int v10 = a2 + 39;
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      uint64_t v12 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v12;
      long long v13 = (_OWORD *)(a1 + 16);
      uint64_t v14 = a2 + 2;
      int v15 = *((unsigned __int16 *)a2 + 16) | (*((unsigned __int8 *)a2 + 34) << 16);
      swift_bridgeObjectRetain();
      if (EnumCaseMultiPayload == 1)
      {
        if (BYTE2(v15) == 255)
        {
          *long long v13 = *v14;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
        }
        else
        {
          int v16 = (void *)a2[2];
          uint64_t v17 = a2[3];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, v15, BYTE2(v15) & 1);
          *(void *)(a1 + 16) = v16;
          *(void *)(a1 + 24) = v17;
          *(_WORD *)(a1 + 32) = v15;
          *(unsigned char *)(a1 + 34) = BYTE2(v15) & 1;
        }
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
        }
        else
        {
          int v20 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
          uint64_t v21 = (void *)a2[5];
          uint64_t v22 = a2[6];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v21, v22, *((_WORD *)a2 + 28), BYTE2(v20) & 1);
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v22;
          *(_WORD *)(a1 + 56) = v20;
          *(unsigned char *)(a1 + 58) = BYTE2(v20) & 1;
        }
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
        }
        else
        {
          int v26 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
          uint64_t v27 = (void *)a2[8];
          uint64_t v28 = a2[9];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v27, v28, *((_WORD *)a2 + 40), BYTE2(v26) & 1);
          *(void *)(a1 + 64) = v27;
          *(void *)(a1 + 72) = v28;
          *(_WORD *)(a1 + 80) = v26;
          *(unsigned char *)(a1 + 82) = BYTE2(v26) & 1;
        }
        *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(void *)(a1 + 112) = a2[14];
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = a2[16];
        *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
        long long v29 = (_OWORD *)(a1 + 144);
        uint64_t v30 = a2 + 18;
        uint64_t v31 = a2[29];
        if (v31 == 1)
        {
          memcpy(v29, v30, 0x108uLL);
        }
        else
        {
          if (*((unsigned __int8 *)a2 + 162) == 255)
          {
            *long long v29 = *v30;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
          }
          else
          {
            int v38 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
            uint64_t v39 = (void *)a2[18];
            uint64_t v40 = a2[19];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *((_WORD *)a2 + 80), BYTE2(v38) & 1);
            *(void *)(a1 + 144) = v39;
            *(void *)(a1 + 152) = v40;
            *(_WORD *)(a1 + 160) = v38;
            *(unsigned char *)(a1 + 162) = BYTE2(v38) & 1;
            uint64_t v31 = a2[29];
          }
          *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
          *(void *)(a1 + 168) = a2[21];
          *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
          *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
          int v41 = (_OWORD *)(a1 + 184);
          long long v42 = a2 + 23;
          if (v31)
          {
            if (*((unsigned __int8 *)a2 + 202) == 255)
            {
              *int v41 = *v42;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
            }
            else
            {
              int v54 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
              uint64_t v55 = (void *)a2[23];
              uint64_t v56 = a2[24];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *((_WORD *)a2 + 100), BYTE2(v54) & 1);
              *(void *)(a1 + 184) = v55;
              *(void *)(a1 + 192) = v56;
              *(_WORD *)(a1 + 200) = v54;
              *(unsigned char *)(a1 + 202) = BYTE2(v54) & 1;
            }
            if (*((unsigned __int8 *)a2 + 226) == 255)
            {
              *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
            }
            else
            {
              int v60 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
              long long v61 = (void *)a2[26];
              uint64_t v62 = a2[27];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v61, v62, *((_WORD *)a2 + 112), BYTE2(v60) & 1);
              *(void *)(a1 + 208) = v61;
              *(void *)(a1 + 216) = v62;
              *(_WORD *)(a1 + 224) = v60;
              *(unsigned char *)(a1 + 226) = BYTE2(v60) & 1;
            }
            uint64_t v63 = a2[30];
            *(void *)(a1 + 232) = a2[29];
            *(void *)(a1 + 240) = v63;
            *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
            *(void *)(a1 + 256) = a2[32];
            *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
            uint64_t v64 = a2[35];
            *(void *)(a1 + 272) = a2[34];
            *(void *)(a1 + 280) = v64;
            *(void *)(a1 + 288) = a2[36];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v48 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
            *(_OWORD *)(a1 + 264) = v48;
            *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
            long long v49 = *(_OWORD *)(a2 + 25);
            *int v41 = *v42;
            *(_OWORD *)(a1 + 200) = v49;
            long long v50 = *(_OWORD *)(a2 + 29);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
            *(_OWORD *)(a1 + 232) = v50;
          }
          long long v65 = (_OWORD *)(a1 + 296);
          long long v66 = a2 + 37;
          if (a2[43])
          {
            if (*((unsigned __int8 *)a2 + 314) == 255)
            {
              _OWORD *v65 = *v66;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
            }
            else
            {
              int v80 = (unsigned __int16)*v10 | (*((unsigned __int8 *)a2 + 314) << 16);
              uint64_t v81 = (void *)a2[37];
              uint64_t v82 = a2[38];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v81, v82, *v10, BYTE2(v80) & 1);
              *(void *)(a1 + 296) = v81;
              *(void *)(a1 + 304) = v82;
              *(_WORD *)(a1 + 312) = v80;
              *uint64_t v9 = BYTE2(v80) & 1;
            }
            if (*((unsigned __int8 *)a2 + 338) == 255)
            {
              *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
            }
            else
            {
              int v86 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
              long long v87 = (void *)a2[40];
              uint64_t v88 = a2[41];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v87, v88, *((_WORD *)a2 + 168), BYTE2(v86) & 1);
              *(void *)(a1 + 320) = v87;
              *(void *)(a1 + 328) = v88;
              *(_WORD *)(a1 + 336) = v86;
              *(unsigned char *)(a1 + 338) = BYTE2(v86) & 1;
            }
            uint64_t v89 = a2[44];
            *(void *)(a1 + 344) = a2[43];
            *(void *)(a1 + 352) = v89;
            *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
            *(void *)(a1 + 368) = a2[46];
            *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
            uint64_t v90 = a2[49];
            *(void *)(a1 + 384) = a2[48];
            *(void *)(a1 + 392) = v90;
            *(void *)(a1 + 400) = a2[50];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v67 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v67;
            *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
            long long v68 = *(_OWORD *)(a2 + 39);
            _OWORD *v65 = *v66;
            *(_OWORD *)(a1 + 312) = v68;
            long long v69 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v69;
          }
        }
        uint64_t v91 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v92 = *(int *)(v91 + 52);
        uint64_t v93 = (void *)(a1 + v92);
        uint64_t v94 = (char *)a2 + v92;
        uint64_t v95 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v96 = *(void *)(v95 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
        }
        else
        {
          uint64_t v98 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v98 - 8) + 16))(v93, v94, v98);
          *((unsigned char *)v93 + *(int *)(v95 + 20)) = v94[*(int *)(v95 + 20)];
          (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
        }
        *(void *)(a1 + *(int *)(v91 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v91 + 56));
        long long v99 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v100 = v99[5];
        uint64_t v101 = a1 + v100;
        uint64_t v102 = (uint64_t)a2 + v100;
        uint64_t v103 = *(void *)(v102 + 8);
        *(void *)uint64_t v101 = *(void *)v102;
        *(void *)(v101 + 8) = v103;
        uint64_t v104 = *(void *)(v102 + 24);
        *(void *)(v101 + 16) = *(void *)(v102 + 16);
        *(void *)(v101 + 24) = v104;
        *(unsigned char *)(v101 + 48) = *(unsigned char *)(v102 + 48);
        *(_OWORD *)(v101 + 32) = *(_OWORD *)(v102 + 32);
        uint64_t v105 = v99[6];
        uint64_t v106 = a1 + v105;
        int v107 = (uint64_t *)((char *)a2 + v105);
        uint64_t v108 = *(uint64_t *)((char *)a2 + v105 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v108 == 1)
        {
          long long v109 = *((_OWORD *)v107 + 1);
          *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
          *(_OWORD *)(v106 + 16) = v109;
          long long v110 = *((_OWORD *)v107 + 3);
          *(_OWORD *)(v106 + 32) = *((_OWORD *)v107 + 2);
          *(_OWORD *)(v106 + 48) = v110;
        }
        else
        {
          __int16 v111 = *((_WORD *)v107 + 8);
          if (*((unsigned char *)v107 + 16) == 0xFF)
          {
            *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
            *(_WORD *)(v106 + 16) = *((_WORD *)v107 + 8);
          }
          else
          {
            char v112 = v111 & 1;
            uint64_t v113 = *v107;
            uint64_t v114 = v107[1];
            outlined copy of AccessibilityText.Storage((void *)*v107, v114, v111 & 1);
            *(void *)uint64_t v106 = v113;
            *(void *)(v106 + 8) = v114;
            *(unsigned char *)(v106 + 16) = v112;
            *(unsigned char *)(v106 + 17) = *((unsigned char *)v107 + 17);
            uint64_t v108 = v107[6];
          }
          uint64_t v115 = (_OWORD *)(v106 + 24);
          uint64_t v116 = v107 + 3;
          if (v108)
          {
            uint64_t v117 = v107[7];
            *(void *)(v106 + 48) = v108;
            *(void *)(v106 + 56) = v117;
            (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v108 - 8))(v115, v116, v108);
          }
          else
          {
            long long v118 = *(_OWORD *)(v107 + 5);
            _OWORD *v115 = *v116;
            *(_OWORD *)(v106 + 40) = v118;
            *(void *)(v106 + 56) = v107[7];
          }
        }
        *(void *)(a1 + v99[7]) = *(uint64_t *)((char *)a2 + v99[7]);
        uint64_t v119 = v99[8];
        uint64_t v120 = a1 + v119;
        uint64_t v121 = (uint64_t)a2 + v119;
        *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
        *(unsigned char *)(v120 + 16) = *(unsigned char *)(v121 + 16);
        *(void *)(a1 + v99[9]) = *(uint64_t *)((char *)a2 + v99[9]);
        *(unsigned char *)(a1 + v99[10]) = *((unsigned char *)a2 + v99[10]);
        *(unsigned char *)(a1 + v99[11]) = *((unsigned char *)a2 + v99[11]);
        *(void *)(a1 + v99[12]) = *(uint64_t *)((char *)a2 + v99[12]);
        uint64_t v122 = v99[13];
        uint64_t v123 = (void *)(a1 + v122);
        int v124 = (uint64_t *)((char *)a2 + v122);
        uint64_t v125 = v124[1];
        *uint64_t v123 = *v124;
        v123[1] = v125;
        *(unsigned char *)(a1 + v99[14]) = *((unsigned char *)a2 + v99[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if (BYTE2(v15) == 255)
        {
          *long long v13 = *v14;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
        }
        else
        {
          uint64_t v18 = (void *)a2[2];
          uint64_t v19 = a2[3];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, v15, BYTE2(v15) & 1);
          *(void *)(a1 + 16) = v18;
          *(void *)(a1 + 24) = v19;
          *(_WORD *)(a1 + 32) = v15;
          *(unsigned char *)(a1 + 34) = BYTE2(v15) & 1;
        }
        if (*((unsigned __int8 *)a2 + 58) == 255)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
        }
        else
        {
          int v23 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
          long long v24 = (void *)a2[5];
          uint64_t v25 = a2[6];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *((_WORD *)a2 + 28), BYTE2(v23) & 1);
          *(void *)(a1 + 40) = v24;
          *(void *)(a1 + 48) = v25;
          *(_WORD *)(a1 + 56) = v23;
          *(unsigned char *)(a1 + 58) = BYTE2(v23) & 1;
        }
        if (*((unsigned __int8 *)a2 + 82) == 255)
        {
          *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
        }
        else
        {
          int v32 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
          uint64_t v33 = (void *)a2[8];
          uint64_t v34 = a2[9];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v33, v34, *((_WORD *)a2 + 40), BYTE2(v32) & 1);
          *(void *)(a1 + 64) = v33;
          *(void *)(a1 + 72) = v34;
          *(_WORD *)(a1 + 80) = v32;
          *(unsigned char *)(a1 + 82) = BYTE2(v32) & 1;
        }
        *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
        *(void *)(a1 + 112) = a2[14];
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = a2[16];
        *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
        uint64_t v35 = (_OWORD *)(a1 + 144);
        int v36 = a2 + 18;
        uint64_t v37 = a2[29];
        if (v37 == 1)
        {
          memcpy(v35, v36, 0x108uLL);
        }
        else
        {
          if (*((unsigned __int8 *)a2 + 162) == 255)
          {
            *uint64_t v35 = *v36;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
          }
          else
          {
            int v43 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
            long long v44 = (void *)a2[18];
            uint64_t v45 = a2[19];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *((_WORD *)a2 + 80), BYTE2(v43) & 1);
            *(void *)(a1 + 144) = v44;
            *(void *)(a1 + 152) = v45;
            *(_WORD *)(a1 + 160) = v43;
            *(unsigned char *)(a1 + 162) = BYTE2(v43) & 1;
            uint64_t v37 = a2[29];
          }
          *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
          *(void *)(a1 + 168) = a2[21];
          *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
          *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
          long long v46 = (_OWORD *)(a1 + 184);
          uint64_t v47 = a2 + 23;
          if (v37)
          {
            if (*((unsigned __int8 *)a2 + 202) == 255)
            {
              *long long v46 = *v47;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
            }
            else
            {
              int v57 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
              long long v58 = (void *)a2[23];
              uint64_t v59 = a2[24];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v58, v59, *((_WORD *)a2 + 100), BYTE2(v57) & 1);
              *(void *)(a1 + 184) = v58;
              *(void *)(a1 + 192) = v59;
              *(_WORD *)(a1 + 200) = v57;
              *(unsigned char *)(a1 + 202) = BYTE2(v57) & 1;
            }
            if (*((unsigned __int8 *)a2 + 226) == 255)
            {
              *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
            }
            else
            {
              int v70 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
              uint64_t v71 = (void *)a2[26];
              uint64_t v72 = a2[27];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v71, v72, *((_WORD *)a2 + 112), BYTE2(v70) & 1);
              *(void *)(a1 + 208) = v71;
              *(void *)(a1 + 216) = v72;
              *(_WORD *)(a1 + 224) = v70;
              *(unsigned char *)(a1 + 226) = BYTE2(v70) & 1;
            }
            uint64_t v73 = a2[30];
            *(void *)(a1 + 232) = a2[29];
            *(void *)(a1 + 240) = v73;
            *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
            *(void *)(a1 + 256) = a2[32];
            *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
            uint64_t v74 = a2[35];
            *(void *)(a1 + 272) = a2[34];
            *(void *)(a1 + 280) = v74;
            *(void *)(a1 + 288) = a2[36];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v51 = *(_OWORD *)(a2 + 33);
            *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
            *(_OWORD *)(a1 + 264) = v51;
            *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
            long long v52 = *(_OWORD *)(a2 + 25);
            *long long v46 = *v47;
            *(_OWORD *)(a1 + 200) = v52;
            long long v53 = *(_OWORD *)(a2 + 29);
            *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
            *(_OWORD *)(a1 + 232) = v53;
          }
          uint64_t v75 = (_OWORD *)(a1 + 296);
          long long v76 = a2 + 37;
          if (a2[43])
          {
            if (*((unsigned __int8 *)a2 + 314) == 255)
            {
              *uint64_t v75 = *v76;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
            }
            else
            {
              int v83 = (unsigned __int16)*v10 | (*((unsigned __int8 *)a2 + 314) << 16);
              long long v84 = (void *)a2[37];
              uint64_t v85 = a2[38];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v84, v85, *v10, BYTE2(v83) & 1);
              *(void *)(a1 + 296) = v84;
              *(void *)(a1 + 304) = v85;
              *(_WORD *)(a1 + 312) = v83;
              *uint64_t v9 = BYTE2(v83) & 1;
            }
            if (*((unsigned __int8 *)a2 + 338) == 255)
            {
              *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
            }
            else
            {
              int v126 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
              uint64_t v127 = (void *)a2[40];
              uint64_t v128 = a2[41];
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v127, v128, *((_WORD *)a2 + 168), BYTE2(v126) & 1);
              *(void *)(a1 + 320) = v127;
              *(void *)(a1 + 328) = v128;
              *(_WORD *)(a1 + 336) = v126;
              *(unsigned char *)(a1 + 338) = BYTE2(v126) & 1;
            }
            uint64_t v129 = a2[44];
            *(void *)(a1 + 344) = a2[43];
            *(void *)(a1 + 352) = v129;
            *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
            *(void *)(a1 + 368) = a2[46];
            *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
            uint64_t v130 = a2[49];
            *(void *)(a1 + 384) = a2[48];
            *(void *)(a1 + 392) = v130;
            *(void *)(a1 + 400) = a2[50];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v77 = *(_OWORD *)(a2 + 47);
            *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
            *(_OWORD *)(a1 + 376) = v77;
            *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
            long long v78 = *(_OWORD *)(a2 + 39);
            *uint64_t v75 = *v76;
            *(_OWORD *)(a1 + 312) = v78;
            long long v79 = *(_OWORD *)(a2 + 43);
            *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
            *(_OWORD *)(a1 + 344) = v79;
          }
        }
        uint64_t v131 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v132 = *(int *)(v131 + 52);
        long long v133 = (void *)(a1 + v132);
        long long v134 = (char *)a2 + v132;
        uint64_t v135 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v136 = *(void *)(v135 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v133, v134, *(void *)(*(void *)(v137 - 8) + 64));
        }
        else
        {
          uint64_t v138 = type metadata accessor for URL();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v138 - 8) + 16))(v133, v134, v138);
          *((unsigned char *)v133 + *(int *)(v135 + 20)) = v134[*(int *)(v135 + 20)];
          (*(void (**)(void *, void, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
        }
        *(void *)(a1 + *(int *)(v131 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v131 + 56));
        uint64_t v139 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)(a1 + *(int *)(v139 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v139 + 20));
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for AccessibilityNodeAttachment.Storage(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void **)(a1 + 8);
  }
  else
  {
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    swift_bridgeObjectRelease();
    int v4 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
    if (EnumCaseMultiPayload == 1)
    {
      if (*(unsigned __int8 *)(a1 + 34) != 255) {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 58) != 255)
      {
        int v5 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v5, BYTE2(v5) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 82) != 255)
      {
        int v6 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v6, BYTE2(v6) & 1);
      }
      uint64_t v7 = *(void *)(a1 + 232);
      if (v7 != 1)
      {
        if (*(unsigned __int8 *)(a1 + 162) != 255)
        {
          int v8 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v8, BYTE2(v8) & 1);
          uint64_t v7 = *(void *)(a1 + 232);
        }
        if (v7)
        {
          if (*(unsigned __int8 *)(a1 + 202) != 255)
          {
            int v9 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v9, BYTE2(v9) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 226) != 255)
          {
            int v10 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v10, BYTE2(v10) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(a1 + 344))
        {
          if (*(unsigned __int8 *)(a1 + 314) != 255)
          {
            int v11 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v11, BYTE2(v11) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 338) != 255)
          {
            int v12 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v12, BYTE2(v12) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v13 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
      uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
      {
        uint64_t v15 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = a1 + *(int *)(v16 + 24);
      uint64_t v18 = *(void *)(v17 + 48);
      if (v18 != 1)
      {
        if (*(unsigned char *)(v17 + 16) != 0xFF)
        {
          outlined consume of AccessibilityText.Storage(*(void **)v17, *(void *)(v17 + 8), *(_WORD *)(v17 + 16) & 1);
          uint64_t v18 = *(void *)(v17 + 48);
        }
        if (v18) {
          __swift_destroy_boxed_opaque_existential_1(v17 + 24);
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 34) != 255) {
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 58) != 255)
      {
        int v19 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v19, BYTE2(v19) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 82) != 255)
      {
        int v20 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v20, BYTE2(v20) & 1);
      }
      uint64_t v21 = *(void *)(a1 + 232);
      if (v21 != 1)
      {
        if (*(unsigned __int8 *)(a1 + 162) != 255)
        {
          int v22 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v22, BYTE2(v22) & 1);
          uint64_t v21 = *(void *)(a1 + 232);
        }
        if (v21)
        {
          if (*(unsigned __int8 *)(a1 + 202) != 255)
          {
            int v23 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v23, BYTE2(v23) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 226) != 255)
          {
            int v24 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v24, BYTE2(v24) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (*(void *)(a1 + 344))
        {
          if (*(unsigned __int8 *)(a1 + 314) != 255)
          {
            int v25 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v25, BYTE2(v25) & 1);
          }
          if (*(unsigned __int8 *)(a1 + 338) != 255)
          {
            int v26 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
            outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v26, BYTE2(v26) & 1);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      uint64_t v27 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
      uint64_t v28 = type metadata accessor for LinkDestination.Configuration(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v27, 1, v28))
      {
        uint64_t v29 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v27, v29);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      swift_release();
    }
  }
}

uint64_t initializeWithCopy for AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v4 = *(void **)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
    id v5 = v4;
  }
  else
  {
    int v6 = (unsigned char *)(a1 + 314);
    uint64_t v7 = (_WORD *)(a2 + 312);
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v9;
    int v10 = (_OWORD *)(a1 + 16);
    int v11 = (_OWORD *)(a2 + 16);
    int v12 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      if (BYTE2(v12) == 255)
      {
        *int v10 = *v11;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      }
      else
      {
        uint64_t v13 = *(void **)(a2 + 16);
        uint64_t v14 = *(void *)(a2 + 24);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, v12, BYTE2(v12) & 1);
        *(void *)(a1 + 16) = v13;
        *(void *)(a1 + 24) = v14;
        *(_WORD *)(a1 + 32) = v12;
        *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 58) == 255)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      }
      else
      {
        int v17 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
        uint64_t v18 = *(void **)(a2 + 40);
        uint64_t v19 = *(void *)(a2 + 48);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, *(_WORD *)(a2 + 56), BYTE2(v17) & 1);
        *(void *)(a1 + 40) = v18;
        *(void *)(a1 + 48) = v19;
        *(_WORD *)(a1 + 56) = v17;
        *(unsigned char *)(a1 + 58) = BYTE2(v17) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 82) == 255)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      }
      else
      {
        int v23 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
        int v24 = *(void **)(a2 + 64);
        uint64_t v25 = *(void *)(a2 + 72);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *(_WORD *)(a2 + 80), BYTE2(v23) & 1);
        *(void *)(a1 + 64) = v24;
        *(void *)(a1 + 72) = v25;
        *(_WORD *)(a1 + 80) = v23;
        *(unsigned char *)(a1 + 82) = BYTE2(v23) & 1;
      }
      *(void *)(a1 + 84) = *(void *)(a2 + 84);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      int v26 = (_OWORD *)(a1 + 144);
      uint64_t v27 = (_OWORD *)(a2 + 144);
      uint64_t v28 = *(void *)(a2 + 232);
      if (v28 == 1)
      {
        memcpy(v26, v27, 0x108uLL);
      }
      else
      {
        if (*(unsigned __int8 *)(a2 + 162) == 255)
        {
          *int v26 = *v27;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        }
        else
        {
          int v35 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
          int v36 = *(void **)(a2 + 144);
          uint64_t v37 = *(void *)(a2 + 152);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v36, v37, *(_WORD *)(a2 + 160), BYTE2(v35) & 1);
          *(void *)(a1 + 144) = v36;
          *(void *)(a1 + 152) = v37;
          *(_WORD *)(a1 + 160) = v35;
          *(unsigned char *)(a1 + 162) = BYTE2(v35) & 1;
          uint64_t v28 = *(void *)(a2 + 232);
        }
        *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
        *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
        int v38 = (_OWORD *)(a1 + 184);
        uint64_t v39 = (_OWORD *)(a2 + 184);
        if (v28)
        {
          if (*(unsigned __int8 *)(a2 + 202) == 255)
          {
            *int v38 = *v39;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          }
          else
          {
            int v51 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
            long long v52 = *(void **)(a2 + 184);
            uint64_t v53 = *(void *)(a2 + 192);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v52, v53, *(_WORD *)(a2 + 200), BYTE2(v51) & 1);
            *(void *)(a1 + 184) = v52;
            *(void *)(a1 + 192) = v53;
            *(_WORD *)(a1 + 200) = v51;
            *(unsigned char *)(a1 + 202) = BYTE2(v51) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 226) == 255)
          {
            *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          }
          else
          {
            int v57 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
            long long v58 = *(void **)(a2 + 208);
            uint64_t v59 = *(void *)(a2 + 216);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v58, v59, *(_WORD *)(a2 + 224), BYTE2(v57) & 1);
            *(void *)(a1 + 208) = v58;
            *(void *)(a1 + 216) = v59;
            *(_WORD *)(a1 + 224) = v57;
            *(unsigned char *)(a1 + 226) = BYTE2(v57) & 1;
          }
          uint64_t v60 = *(void *)(a2 + 240);
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          *(void *)(a1 + 240) = v60;
          *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          uint64_t v61 = *(void *)(a2 + 280);
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(void *)(a1 + 280) = v61;
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v45 = *(_OWORD *)(a2 + 264);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
          *(_OWORD *)(a1 + 264) = v45;
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
          long long v46 = *(_OWORD *)(a2 + 200);
          *int v38 = *v39;
          *(_OWORD *)(a1 + 200) = v46;
          long long v47 = *(_OWORD *)(a2 + 232);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 232) = v47;
        }
        uint64_t v62 = (_OWORD *)(a1 + 296);
        uint64_t v63 = (_OWORD *)(a2 + 296);
        if (*(void *)(a2 + 344))
        {
          if (*(unsigned __int8 *)(a2 + 314) == 255)
          {
            _OWORD *v62 = *v63;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
          }
          else
          {
            int v77 = (unsigned __int16)*v7 | (*(unsigned __int8 *)(a2 + 314) << 16);
            long long v78 = *(void **)(a2 + 296);
            uint64_t v79 = *(void *)(a2 + 304);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v78, v79, *v7, BYTE2(v77) & 1);
            *(void *)(a1 + 296) = v78;
            *(void *)(a1 + 304) = v79;
            *(_WORD *)(a1 + 312) = v77;
            *int v6 = BYTE2(v77) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 338) == 255)
          {
            *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          }
          else
          {
            int v83 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
            long long v84 = *(void **)(a2 + 320);
            uint64_t v85 = *(void *)(a2 + 328);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v84, v85, *(_WORD *)(a2 + 336), BYTE2(v83) & 1);
            *(void *)(a1 + 320) = v84;
            *(void *)(a1 + 328) = v85;
            *(_WORD *)(a1 + 336) = v83;
            *(unsigned char *)(a1 + 338) = BYTE2(v83) & 1;
          }
          uint64_t v86 = *(void *)(a2 + 352);
          *(void *)(a1 + 344) = *(void *)(a2 + 344);
          *(void *)(a1 + 352) = v86;
          *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
          *(void *)(a1 + 368) = *(void *)(a2 + 368);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
          uint64_t v87 = *(void *)(a2 + 392);
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(void *)(a1 + 392) = v87;
          *(void *)(a1 + 400) = *(void *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v64 = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(a1 + 376) = v64;
          *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
          long long v65 = *(_OWORD *)(a2 + 312);
          _OWORD *v62 = *v63;
          *(_OWORD *)(a1 + 312) = v65;
          long long v66 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 344) = v66;
        }
      }
      uint64_t v88 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v89 = *(int *)(v88 + 52);
      uint64_t v90 = (void *)(a1 + v89);
      uint64_t v91 = (const void *)(a2 + v89);
      uint64_t v92 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
      }
      else
      {
        uint64_t v95 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v95 - 8) + 16))(v90, v91, v95);
        *((unsigned char *)v90 + *(int *)(v92 + 20)) = *((unsigned char *)v91 + *(int *)(v92 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
      }
      *(void *)(a1 + *(int *)(v88 + 56)) = *(void *)(a2 + *(int *)(v88 + 56));
      uint64_t v96 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v97 = v96[5];
      uint64_t v98 = a1 + v97;
      uint64_t v99 = a2 + v97;
      uint64_t v100 = *(void *)(v99 + 8);
      *(void *)uint64_t v98 = *(void *)v99;
      *(void *)(v98 + 8) = v100;
      uint64_t v101 = *(void *)(v99 + 24);
      *(void *)(v98 + 16) = *(void *)(v99 + 16);
      *(void *)(v98 + 24) = v101;
      *(unsigned char *)(v98 + 48) = *(unsigned char *)(v99 + 48);
      *(_OWORD *)(v98 + 32) = *(_OWORD *)(v99 + 32);
      uint64_t v102 = v96[6];
      uint64_t v103 = a1 + v102;
      uint64_t v104 = (uint64_t *)(a2 + v102);
      uint64_t v105 = *(void *)(a2 + v102 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v105 == 1)
      {
        long long v106 = *((_OWORD *)v104 + 1);
        *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
        *(_OWORD *)(v103 + 16) = v106;
        long long v107 = *((_OWORD *)v104 + 3);
        *(_OWORD *)(v103 + 32) = *((_OWORD *)v104 + 2);
        *(_OWORD *)(v103 + 48) = v107;
      }
      else
      {
        __int16 v108 = *((_WORD *)v104 + 8);
        if (*((unsigned char *)v104 + 16) == 0xFF)
        {
          *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
          *(_WORD *)(v103 + 16) = *((_WORD *)v104 + 8);
        }
        else
        {
          char v109 = v108 & 1;
          uint64_t v110 = *v104;
          uint64_t v111 = v104[1];
          outlined copy of AccessibilityText.Storage((void *)*v104, v111, v108 & 1);
          *(void *)uint64_t v103 = v110;
          *(void *)(v103 + 8) = v111;
          *(unsigned char *)(v103 + 16) = v109;
          *(unsigned char *)(v103 + 17) = *((unsigned char *)v104 + 17);
          uint64_t v105 = v104[6];
        }
        char v112 = (_OWORD *)(v103 + 24);
        uint64_t v113 = v104 + 3;
        if (v105)
        {
          uint64_t v114 = v104[7];
          *(void *)(v103 + 48) = v105;
          *(void *)(v103 + 56) = v114;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v105 - 8))(v112, v113, v105);
        }
        else
        {
          long long v115 = *(_OWORD *)(v104 + 5);
          *char v112 = *v113;
          *(_OWORD *)(v103 + 40) = v115;
          *(void *)(v103 + 56) = v104[7];
        }
      }
      *(void *)(a1 + v96[7]) = *(void *)(a2 + v96[7]);
      uint64_t v116 = v96[8];
      uint64_t v117 = a1 + v116;
      uint64_t v118 = a2 + v116;
      *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
      *(unsigned char *)(v117 + 16) = *(unsigned char *)(v118 + 16);
      *(void *)(a1 + v96[9]) = *(void *)(a2 + v96[9]);
      *(unsigned char *)(a1 + v96[10]) = *(unsigned char *)(a2 + v96[10]);
      *(unsigned char *)(a1 + v96[11]) = *(unsigned char *)(a2 + v96[11]);
      *(void *)(a1 + v96[12]) = *(void *)(a2 + v96[12]);
      uint64_t v119 = v96[13];
      uint64_t v120 = (void *)(a1 + v119);
      uint64_t v121 = (void *)(a2 + v119);
      uint64_t v122 = v121[1];
      *uint64_t v120 = *v121;
      v120[1] = v122;
      *(unsigned char *)(a1 + v96[14]) = *(unsigned char *)(a2 + v96[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (BYTE2(v12) == 255)
      {
        *int v10 = *v11;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      }
      else
      {
        uint64_t v15 = *(void **)(a2 + 16);
        uint64_t v16 = *(void *)(a2 + 24);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v12, BYTE2(v12) & 1);
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
        *(_WORD *)(a1 + 32) = v12;
        *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 58) == 255)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      }
      else
      {
        int v20 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
        uint64_t v21 = *(void **)(a2 + 40);
        uint64_t v22 = *(void *)(a2 + 48);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v21, v22, *(_WORD *)(a2 + 56), BYTE2(v20) & 1);
        *(void *)(a1 + 40) = v21;
        *(void *)(a1 + 48) = v22;
        *(_WORD *)(a1 + 56) = v20;
        *(unsigned char *)(a1 + 58) = BYTE2(v20) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 82) == 255)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      }
      else
      {
        int v29 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
        uint64_t v30 = *(void **)(a2 + 64);
        uint64_t v31 = *(void *)(a2 + 72);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v30, v31, *(_WORD *)(a2 + 80), BYTE2(v29) & 1);
        *(void *)(a1 + 64) = v30;
        *(void *)(a1 + 72) = v31;
        *(_WORD *)(a1 + 80) = v29;
        *(unsigned char *)(a1 + 82) = BYTE2(v29) & 1;
      }
      *(void *)(a1 + 84) = *(void *)(a2 + 84);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      int v32 = (_OWORD *)(a1 + 144);
      uint64_t v33 = (_OWORD *)(a2 + 144);
      uint64_t v34 = *(void *)(a2 + 232);
      if (v34 == 1)
      {
        memcpy(v32, v33, 0x108uLL);
      }
      else
      {
        if (*(unsigned __int8 *)(a2 + 162) == 255)
        {
          *int v32 = *v33;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        }
        else
        {
          int v40 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
          int v41 = *(void **)(a2 + 144);
          uint64_t v42 = *(void *)(a2 + 152);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v41, v42, *(_WORD *)(a2 + 160), BYTE2(v40) & 1);
          *(void *)(a1 + 144) = v41;
          *(void *)(a1 + 152) = v42;
          *(_WORD *)(a1 + 160) = v40;
          *(unsigned char *)(a1 + 162) = BYTE2(v40) & 1;
          uint64_t v34 = *(void *)(a2 + 232);
        }
        *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
        *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
        int v43 = (_OWORD *)(a1 + 184);
        long long v44 = (_OWORD *)(a2 + 184);
        if (v34)
        {
          if (*(unsigned __int8 *)(a2 + 202) == 255)
          {
            _OWORD *v43 = *v44;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          }
          else
          {
            int v54 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
            uint64_t v55 = *(void **)(a2 + 184);
            uint64_t v56 = *(void *)(a2 + 192);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *(_WORD *)(a2 + 200), BYTE2(v54) & 1);
            *(void *)(a1 + 184) = v55;
            *(void *)(a1 + 192) = v56;
            *(_WORD *)(a1 + 200) = v54;
            *(unsigned char *)(a1 + 202) = BYTE2(v54) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 226) == 255)
          {
            *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          }
          else
          {
            int v67 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
            long long v68 = *(void **)(a2 + 208);
            uint64_t v69 = *(void *)(a2 + 216);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v68, v69, *(_WORD *)(a2 + 224), BYTE2(v67) & 1);
            *(void *)(a1 + 208) = v68;
            *(void *)(a1 + 216) = v69;
            *(_WORD *)(a1 + 224) = v67;
            *(unsigned char *)(a1 + 226) = BYTE2(v67) & 1;
          }
          uint64_t v70 = *(void *)(a2 + 240);
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          *(void *)(a1 + 240) = v70;
          *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          uint64_t v71 = *(void *)(a2 + 280);
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(void *)(a1 + 280) = v71;
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v48 = *(_OWORD *)(a2 + 264);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
          *(_OWORD *)(a1 + 264) = v48;
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
          long long v49 = *(_OWORD *)(a2 + 200);
          _OWORD *v43 = *v44;
          *(_OWORD *)(a1 + 200) = v49;
          long long v50 = *(_OWORD *)(a2 + 232);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 232) = v50;
        }
        uint64_t v72 = (_OWORD *)(a1 + 296);
        uint64_t v73 = (_OWORD *)(a2 + 296);
        if (*(void *)(a2 + 344))
        {
          if (*(unsigned __int8 *)(a2 + 314) == 255)
          {
            *uint64_t v72 = *v73;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
          }
          else
          {
            int v80 = (unsigned __int16)*v7 | (*(unsigned __int8 *)(a2 + 314) << 16);
            uint64_t v81 = *(void **)(a2 + 296);
            uint64_t v82 = *(void *)(a2 + 304);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v81, v82, *v7, BYTE2(v80) & 1);
            *(void *)(a1 + 296) = v81;
            *(void *)(a1 + 304) = v82;
            *(_WORD *)(a1 + 312) = v80;
            *int v6 = BYTE2(v80) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 338) == 255)
          {
            *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          }
          else
          {
            int v123 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
            int v124 = *(void **)(a2 + 320);
            uint64_t v125 = *(void *)(a2 + 328);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v124, v125, *(_WORD *)(a2 + 336), BYTE2(v123) & 1);
            *(void *)(a1 + 320) = v124;
            *(void *)(a1 + 328) = v125;
            *(_WORD *)(a1 + 336) = v123;
            *(unsigned char *)(a1 + 338) = BYTE2(v123) & 1;
          }
          uint64_t v126 = *(void *)(a2 + 352);
          *(void *)(a1 + 344) = *(void *)(a2 + 344);
          *(void *)(a1 + 352) = v126;
          *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
          *(void *)(a1 + 368) = *(void *)(a2 + 368);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
          uint64_t v127 = *(void *)(a2 + 392);
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(void *)(a1 + 392) = v127;
          *(void *)(a1 + 400) = *(void *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v74 = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
          *(_OWORD *)(a1 + 376) = v74;
          *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
          long long v75 = *(_OWORD *)(a2 + 312);
          *uint64_t v72 = *v73;
          *(_OWORD *)(a1 + 312) = v75;
          long long v76 = *(_OWORD *)(a2 + 344);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 344) = v76;
        }
      }
      uint64_t v128 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v129 = *(int *)(v128 + 52);
      uint64_t v130 = (void *)(a1 + v129);
      uint64_t v131 = (const void *)(a2 + v129);
      uint64_t v132 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v133 = *(void *)(v132 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v133 + 48))(v131, 1, v132))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v130, v131, *(void *)(*(void *)(v134 - 8) + 64));
      }
      else
      {
        uint64_t v135 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v135 - 8) + 16))(v130, v131, v135);
        *((unsigned char *)v130 + *(int *)(v132 + 20)) = *((unsigned char *)v131 + *(int *)(v132 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v133 + 56))(v130, 0, 1, v132);
      }
      *(void *)(a1 + *(int *)(v128 + 56)) = *(void *)(a2 + *(int *)(v128 + 56));
      uint64_t v136 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)(a1 + *(int *)(v136 + 20)) = *(void *)(a2 + *(int *)(v136 + 20));
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1, type metadata accessor for AccessibilityNodeAttachment.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      int v4 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRetain();
      id v5 = v4;
    }
    else
    {
      int v6 = (unsigned char *)(a1 + 314);
      uint64_t v7 = (_WORD *)(a2 + 312);
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v9 = (_OWORD *)(a1 + 16);
      int v10 = (long long *)(a2 + 16);
      int v11 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
      swift_bridgeObjectRetain();
      if (EnumCaseMultiPayload == 1)
      {
        if (BYTE2(v11) == 255)
        {
          long long v12 = *v10;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
          *uint64_t v9 = v12;
        }
        else
        {
          uint64_t v14 = *(void **)(a2 + 16);
          uint64_t v15 = *(void *)(a2 + 24);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v14, v15, v11, BYTE2(v11) & 1);
          *(void *)(a1 + 16) = v14;
          *(void *)(a1 + 24) = v15;
          *(_WORD *)(a1 + 32) = v11;
          *(unsigned char *)(a1 + 34) = BYTE2(v11) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 58) == 255)
        {
          long long v16 = *(_OWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
          *(_OWORD *)(a1 + 40) = v16;
        }
        else
        {
          int v20 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
          uint64_t v21 = *(void **)(a2 + 40);
          uint64_t v22 = *(void *)(a2 + 48);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v21, v22, *(_WORD *)(a2 + 56), BYTE2(v20) & 1);
          *(void *)(a1 + 40) = v21;
          *(void *)(a1 + 48) = v22;
          *(_WORD *)(a1 + 56) = v20;
          *(unsigned char *)(a1 + 58) = BYTE2(v20) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 82) == 255)
        {
          long long v23 = *(_OWORD *)(a2 + 64);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
          *(_OWORD *)(a1 + 64) = v23;
        }
        else
        {
          int v28 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
          int v29 = *(void **)(a2 + 64);
          uint64_t v30 = *(void *)(a2 + 72);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v29, v30, *(_WORD *)(a2 + 80), BYTE2(v28) & 1);
          *(void *)(a1 + 64) = v29;
          *(void *)(a1 + 72) = v30;
          *(_WORD *)(a1 + 80) = v28;
          *(unsigned char *)(a1 + 82) = BYTE2(v28) & 1;
        }
        *(void *)(a1 + 84) = *(void *)(a2 + 84);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        uint64_t v31 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v31;
        uint64_t v32 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v32;
        uint64_t v33 = (_OWORD *)(a1 + 144);
        uint64_t v34 = (long long *)(a2 + 144);
        if (*(void *)(a2 + 232) == 1)
        {
          memcpy(v33, v34, 0x108uLL);
        }
        else
        {
          if (*(unsigned __int8 *)(a2 + 162) == 255)
          {
            long long v42 = *v34;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
            _OWORD *v33 = v42;
          }
          else
          {
            int v44 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
            long long v45 = *(void **)(a2 + 144);
            uint64_t v46 = *(void *)(a2 + 152);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v45, v46, *(_WORD *)(a2 + 160), BYTE2(v44) & 1);
            *(void *)(a1 + 144) = v45;
            *(void *)(a1 + 152) = v46;
            *(_WORD *)(a1 + 160) = v44;
            *(unsigned char *)(a1 + 162) = BYTE2(v44) & 1;
          }
          *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
          *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
          uint64_t v47 = *(void *)(a2 + 168);
          *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
          *(void *)(a1 + 168) = v47;
          *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
          *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
          long long v48 = (_OWORD *)(a1 + 184);
          long long v49 = (long long *)(a2 + 184);
          if (*(void *)(a2 + 232))
          {
            if (*(unsigned __int8 *)(a2 + 202) == 255)
            {
              long long v50 = *v49;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
              _OWORD *v48 = v50;
            }
            else
            {
              int v68 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
              uint64_t v69 = *(void **)(a2 + 184);
              uint64_t v70 = *(void *)(a2 + 192);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v69, v70, *(_WORD *)(a2 + 200), BYTE2(v68) & 1);
              *(void *)(a1 + 184) = v69;
              *(void *)(a1 + 192) = v70;
              *(_WORD *)(a1 + 200) = v68;
              *(unsigned char *)(a1 + 202) = BYTE2(v68) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 226) == 255)
            {
              long long v71 = *(_OWORD *)(a2 + 208);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
              *(_OWORD *)(a1 + 208) = v71;
            }
            else
            {
              int v76 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
              int v77 = *(void **)(a2 + 208);
              uint64_t v78 = *(void *)(a2 + 216);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v77, v78, *(_WORD *)(a2 + 224), BYTE2(v76) & 1);
              *(void *)(a1 + 208) = v77;
              *(void *)(a1 + 216) = v78;
              *(_WORD *)(a1 + 224) = v76;
              *(unsigned char *)(a1 + 226) = BYTE2(v76) & 1;
            }
            *(void *)(a1 + 232) = *(void *)(a2 + 232);
            uint64_t v79 = *(void *)(a2 + 240);
            *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
            *(void *)(a1 + 240) = v79;
            uint64_t v80 = *(void *)(a2 + 256);
            *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
            *(void *)(a1 + 256) = v80;
            *(void *)(a1 + 272) = *(void *)(a2 + 272);
            *(void *)(a1 + 280) = *(void *)(a2 + 280);
            *(void *)(a1 + 288) = *(void *)(a2 + 288);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v58 = *v49;
            long long v59 = *(_OWORD *)(a2 + 216);
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
            *(_OWORD *)(a1 + 216) = v59;
            _OWORD *v48 = v58;
            long long v60 = *(_OWORD *)(a2 + 232);
            long long v61 = *(_OWORD *)(a2 + 248);
            long long v62 = *(_OWORD *)(a2 + 280);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
            *(_OWORD *)(a1 + 280) = v62;
            *(_OWORD *)(a1 + 232) = v60;
            *(_OWORD *)(a1 + 248) = v61;
          }
          uint64_t v81 = (_OWORD *)(a1 + 296);
          uint64_t v82 = (long long *)(a2 + 296);
          if (*(void *)(a2 + 344))
          {
            if (*(unsigned __int8 *)(a2 + 314) == 255)
            {
              long long v83 = *v82;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
              *uint64_t v81 = v83;
            }
            else
            {
              int v102 = (unsigned __int16)*v7 | (*(unsigned __int8 *)(a2 + 314) << 16);
              uint64_t v103 = *(void **)(a2 + 296);
              uint64_t v104 = *(void *)(a2 + 304);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v103, v104, *v7, BYTE2(v102) & 1);
              *(void *)(a1 + 296) = v103;
              *(void *)(a1 + 304) = v104;
              *(_WORD *)(a1 + 312) = v102;
              *int v6 = BYTE2(v102) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 338) == 255)
            {
              long long v105 = *(_OWORD *)(a2 + 320);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
              *(_OWORD *)(a1 + 320) = v105;
            }
            else
            {
              int v110 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
              uint64_t v111 = *(void **)(a2 + 320);
              uint64_t v112 = *(void *)(a2 + 328);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v111, v112, *(_WORD *)(a2 + 336), BYTE2(v110) & 1);
              *(void *)(a1 + 320) = v111;
              *(void *)(a1 + 328) = v112;
              *(_WORD *)(a1 + 336) = v110;
              *(unsigned char *)(a1 + 338) = BYTE2(v110) & 1;
            }
            *(void *)(a1 + 344) = *(void *)(a2 + 344);
            uint64_t v113 = *(void *)(a2 + 352);
            *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
            *(void *)(a1 + 352) = v113;
            uint64_t v114 = *(void *)(a2 + 368);
            *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
            *(void *)(a1 + 368) = v114;
            *(void *)(a1 + 384) = *(void *)(a2 + 384);
            *(void *)(a1 + 392) = *(void *)(a2 + 392);
            *(void *)(a1 + 400) = *(void *)(a2 + 400);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v84 = *v82;
            long long v85 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v85;
            *uint64_t v81 = v84;
            long long v86 = *(_OWORD *)(a2 + 344);
            long long v87 = *(_OWORD *)(a2 + 360);
            long long v88 = *(_OWORD *)(a2 + 392);
            *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
            *(_OWORD *)(a1 + 392) = v88;
            *(_OWORD *)(a1 + 344) = v86;
            *(_OWORD *)(a1 + 360) = v87;
          }
        }
        uint64_t v115 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v116 = *(int *)(v115 + 52);
        uint64_t v117 = (void *)(a1 + v116);
        uint64_t v118 = (const void *)(a2 + v116);
        uint64_t v119 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v120 = *(void *)(v119 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v120 + 48))(v118, 1, v119))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v117, v118, *(void *)(*(void *)(v121 - 8) + 64));
        }
        else
        {
          uint64_t v122 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v122 - 8) + 16))(v117, v118, v122);
          *((unsigned char *)v117 + *(int *)(v119 + 20)) = *((unsigned char *)v118 + *(int *)(v119 + 20));
          (*(void (**)(void *, void, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
        }
        *(void *)(a1 + *(int *)(v115 + 56)) = *(void *)(a2 + *(int *)(v115 + 56));
        int v123 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v124 = v123[5];
        uint64_t v125 = a1 + v124;
        uint64_t v126 = a2 + v124;
        *(void *)uint64_t v125 = *(void *)v126;
        *(void *)(v125 + 8) = *(void *)(v126 + 8);
        *(void *)(v125 + 16) = *(void *)(v126 + 16);
        *(void *)(v125 + 24) = *(void *)(v126 + 24);
        long long v127 = *(_OWORD *)(v126 + 32);
        *(unsigned char *)(v125 + 48) = *(unsigned char *)(v126 + 48);
        *(_OWORD *)(v125 + 32) = v127;
        uint64_t v128 = v123[6];
        uint64_t v129 = a1 + v128;
        uint64_t v130 = (long long *)(a2 + v128);
        uint64_t v131 = *(void *)(a2 + v128 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v131 == 1)
        {
          long long v132 = *v130;
          long long v133 = v130[1];
          long long v134 = v130[3];
          *(_OWORD *)(v129 + 32) = v130[2];
          *(_OWORD *)(v129 + 48) = v134;
          *(_OWORD *)uint64_t v129 = v132;
          *(_OWORD *)(v129 + 16) = v133;
        }
        else
        {
          __int16 v135 = *((_WORD *)v130 + 8);
          if (*((unsigned char *)v130 + 16) == 0xFF)
          {
            long long v136 = *v130;
            *(_WORD *)(v129 + 16) = *((_WORD *)v130 + 8);
            *(_OWORD *)uint64_t v129 = v136;
          }
          else
          {
            char v137 = v135 & 1;
            uint64_t v138 = *(void *)v130;
            uint64_t v139 = *((void *)v130 + 1);
            outlined copy of AccessibilityText.Storage(*(void **)v130, v139, v135 & 1);
            *(void *)uint64_t v129 = v138;
            *(void *)(v129 + 8) = v139;
            *(unsigned char *)(v129 + 16) = v137;
            *(unsigned char *)(v129 + 17) = *((unsigned char *)v130 + 17);
          }
          uint64_t v140 = (_OWORD *)(v129 + 24);
          uint64_t v141 = (long long *)((char *)v130 + 24);
          uint64_t v142 = *((void *)v130 + 6);
          if (v142)
          {
            *(void *)(v129 + 48) = v142;
            *(void *)(v129 + 56) = *((void *)v130 + 7);
            (**(void (***)(_OWORD *, long long *))(v142 - 8))(v140, v141);
          }
          else
          {
            long long v143 = *v141;
            long long v144 = *(long long *)((char *)v130 + 40);
            *(void *)(v129 + 56) = *((void *)v130 + 7);
            *uint64_t v140 = v143;
            *(_OWORD *)(v129 + 40) = v144;
          }
        }
        *(void *)(a1 + v123[7]) = *(void *)(a2 + v123[7]);
        uint64_t v145 = v123[8];
        uint64_t v146 = a1 + v145;
        uint64_t v147 = (long long *)(a2 + v145);
        long long v148 = *v147;
        *(unsigned char *)(v146 + 16) = *((unsigned char *)v147 + 16);
        *(_OWORD *)uint64_t v146 = v148;
        *(void *)(a1 + v123[9]) = *(void *)(a2 + v123[9]);
        *(unsigned char *)(a1 + v123[10]) = *(unsigned char *)(a2 + v123[10]);
        *(unsigned char *)(a1 + v123[11]) = *(unsigned char *)(a2 + v123[11]);
        *(void *)(a1 + v123[12]) = *(void *)(a2 + v123[12]);
        uint64_t v149 = v123[13];
        uint64_t v150 = (void *)(a1 + v149);
        unint64_t v151 = (void *)(a2 + v149);
        void *v150 = *v151;
        v150[1] = v151[1];
        *(unsigned char *)(a1 + v123[14]) = *(unsigned char *)(a2 + v123[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        if (BYTE2(v11) == 255)
        {
          long long v13 = *v10;
          *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
          *uint64_t v9 = v13;
        }
        else
        {
          int v17 = *(void **)(a2 + 16);
          uint64_t v18 = *(void *)(a2 + 24);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v17, v18, v11, BYTE2(v11) & 1);
          *(void *)(a1 + 16) = v17;
          *(void *)(a1 + 24) = v18;
          *(_WORD *)(a1 + 32) = v11;
          *(unsigned char *)(a1 + 34) = BYTE2(v11) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 58) == 255)
        {
          long long v19 = *(_OWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
          *(_OWORD *)(a1 + 40) = v19;
        }
        else
        {
          int v24 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
          uint64_t v25 = *(void **)(a2 + 40);
          uint64_t v26 = *(void *)(a2 + 48);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v25, v26, *(_WORD *)(a2 + 56), BYTE2(v24) & 1);
          *(void *)(a1 + 40) = v25;
          *(void *)(a1 + 48) = v26;
          *(_WORD *)(a1 + 56) = v24;
          *(unsigned char *)(a1 + 58) = BYTE2(v24) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 82) == 255)
        {
          long long v27 = *(_OWORD *)(a2 + 64);
          *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
          *(_OWORD *)(a1 + 64) = v27;
        }
        else
        {
          int v35 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
          int v36 = *(void **)(a2 + 64);
          uint64_t v37 = *(void *)(a2 + 72);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v36, v37, *(_WORD *)(a2 + 80), BYTE2(v35) & 1);
          *(void *)(a1 + 64) = v36;
          *(void *)(a1 + 72) = v37;
          *(_WORD *)(a1 + 80) = v35;
          *(unsigned char *)(a1 + 82) = BYTE2(v35) & 1;
        }
        *(void *)(a1 + 84) = *(void *)(a2 + 84);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        uint64_t v38 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v38;
        uint64_t v39 = *(void *)(a2 + 128);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
        *(void *)(a1 + 128) = v39;
        int v40 = (_OWORD *)(a1 + 144);
        int v41 = (long long *)(a2 + 144);
        if (*(void *)(a2 + 232) == 1)
        {
          memcpy(v40, v41, 0x108uLL);
        }
        else
        {
          if (*(unsigned __int8 *)(a2 + 162) == 255)
          {
            long long v43 = *v41;
            *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
            _OWORD *v40 = v43;
          }
          else
          {
            int v51 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
            long long v52 = *(void **)(a2 + 144);
            uint64_t v53 = *(void *)(a2 + 152);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v52, v53, *(_WORD *)(a2 + 160), BYTE2(v51) & 1);
            *(void *)(a1 + 144) = v52;
            *(void *)(a1 + 152) = v53;
            *(_WORD *)(a1 + 160) = v51;
            *(unsigned char *)(a1 + 162) = BYTE2(v51) & 1;
          }
          *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
          *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
          uint64_t v54 = *(void *)(a2 + 168);
          *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
          *(void *)(a1 + 168) = v54;
          *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
          *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
          uint64_t v55 = (_OWORD *)(a1 + 184);
          uint64_t v56 = (long long *)(a2 + 184);
          if (*(void *)(a2 + 232))
          {
            if (*(unsigned __int8 *)(a2 + 202) == 255)
            {
              long long v57 = *v56;
              *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
              *uint64_t v55 = v57;
            }
            else
            {
              int v72 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
              uint64_t v73 = *(void **)(a2 + 184);
              uint64_t v74 = *(void *)(a2 + 192);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v73, v74, *(_WORD *)(a2 + 200), BYTE2(v72) & 1);
              *(void *)(a1 + 184) = v73;
              *(void *)(a1 + 192) = v74;
              *(_WORD *)(a1 + 200) = v72;
              *(unsigned char *)(a1 + 202) = BYTE2(v72) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 226) == 255)
            {
              long long v75 = *(_OWORD *)(a2 + 208);
              *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
              *(_OWORD *)(a1 + 208) = v75;
            }
            else
            {
              int v89 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
              uint64_t v90 = *(void **)(a2 + 208);
              uint64_t v91 = *(void *)(a2 + 216);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v90, v91, *(_WORD *)(a2 + 224), BYTE2(v89) & 1);
              *(void *)(a1 + 208) = v90;
              *(void *)(a1 + 216) = v91;
              *(_WORD *)(a1 + 224) = v89;
              *(unsigned char *)(a1 + 226) = BYTE2(v89) & 1;
            }
            *(void *)(a1 + 232) = *(void *)(a2 + 232);
            uint64_t v92 = *(void *)(a2 + 240);
            *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
            *(void *)(a1 + 240) = v92;
            uint64_t v93 = *(void *)(a2 + 256);
            *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
            *(void *)(a1 + 256) = v93;
            *(void *)(a1 + 272) = *(void *)(a2 + 272);
            *(void *)(a1 + 280) = *(void *)(a2 + 280);
            *(void *)(a1 + 288) = *(void *)(a2 + 288);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v63 = *v56;
            long long v64 = *(_OWORD *)(a2 + 216);
            *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
            *(_OWORD *)(a1 + 216) = v64;
            *uint64_t v55 = v63;
            long long v65 = *(_OWORD *)(a2 + 232);
            long long v66 = *(_OWORD *)(a2 + 248);
            long long v67 = *(_OWORD *)(a2 + 280);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
            *(_OWORD *)(a1 + 280) = v67;
            *(_OWORD *)(a1 + 232) = v65;
            *(_OWORD *)(a1 + 248) = v66;
          }
          uint64_t v94 = (_OWORD *)(a1 + 296);
          uint64_t v95 = (long long *)(a2 + 296);
          if (*(void *)(a2 + 344))
          {
            if (*(unsigned __int8 *)(a2 + 314) == 255)
            {
              long long v96 = *v95;
              *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
              _OWORD *v94 = v96;
            }
            else
            {
              int v106 = (unsigned __int16)*v7 | (*(unsigned __int8 *)(a2 + 314) << 16);
              long long v107 = *(void **)(a2 + 296);
              uint64_t v108 = *(void *)(a2 + 304);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v107, v108, *v7, BYTE2(v106) & 1);
              *(void *)(a1 + 296) = v107;
              *(void *)(a1 + 304) = v108;
              *(_WORD *)(a1 + 312) = v106;
              *int v6 = BYTE2(v106) & 1;
            }
            if (*(unsigned __int8 *)(a2 + 338) == 255)
            {
              long long v109 = *(_OWORD *)(a2 + 320);
              *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
              *(_OWORD *)(a1 + 320) = v109;
            }
            else
            {
              int v152 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
              int v153 = *(void **)(a2 + 320);
              uint64_t v154 = *(void *)(a2 + 328);
              outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v153, v154, *(_WORD *)(a2 + 336), BYTE2(v152) & 1);
              *(void *)(a1 + 320) = v153;
              *(void *)(a1 + 328) = v154;
              *(_WORD *)(a1 + 336) = v152;
              *(unsigned char *)(a1 + 338) = BYTE2(v152) & 1;
            }
            *(void *)(a1 + 344) = *(void *)(a2 + 344);
            uint64_t v155 = *(void *)(a2 + 352);
            *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
            *(void *)(a1 + 352) = v155;
            uint64_t v156 = *(void *)(a2 + 368);
            *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
            *(void *)(a1 + 368) = v156;
            *(void *)(a1 + 384) = *(void *)(a2 + 384);
            *(void *)(a1 + 392) = *(void *)(a2 + 392);
            *(void *)(a1 + 400) = *(void *)(a2 + 400);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v97 = *v95;
            long long v98 = *(_OWORD *)(a2 + 328);
            *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
            *(_OWORD *)(a1 + 328) = v98;
            _OWORD *v94 = v97;
            long long v99 = *(_OWORD *)(a2 + 344);
            long long v100 = *(_OWORD *)(a2 + 360);
            long long v101 = *(_OWORD *)(a2 + 392);
            *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
            *(_OWORD *)(a1 + 392) = v101;
            *(_OWORD *)(a1 + 344) = v99;
            *(_OWORD *)(a1 + 360) = v100;
          }
        }
        uint64_t v157 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
        uint64_t v158 = *(int *)(v157 + 52);
        uint64_t v159 = (void *)(a1 + v158);
        uint64_t v160 = (const void *)(a2 + v158);
        uint64_t v161 = type metadata accessor for LinkDestination.Configuration(0);
        uint64_t v162 = *(void *)(v161 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v162 + 48))(v160, 1, v161))
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v159, v160, *(void *)(*(void *)(v163 - 8) + 64));
        }
        else
        {
          uint64_t v164 = type metadata accessor for URL();
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v164 - 8) + 16))(v159, v160, v164);
          *((unsigned char *)v159 + *(int *)(v161 + 20)) = *((unsigned char *)v160 + *(int *)(v161 + 20));
          (*(void (**)(void *, void, uint64_t, uint64_t))(v162 + 56))(v159, 0, 1, v161);
        }
        *(void *)(a1 + *(int *)(v157 + 56)) = *(void *)(a2 + *(int *)(v157 + 56));
        uint64_t v165 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)(a1 + *(int *)(v165 + 20)) = *(void *)(a2 + *(int *)(v165 + 20));
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for AccessibilityNodeAttachment.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *(_DWORD *)((char *)a1 + 31) = *(_DWORD *)((char *)a2 + 31);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_DWORD *)((char *)a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    a1[4] = a2[4];
    *(_DWORD *)((char *)a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    *(void *)((char *)a1 + 84) = *(void *)((char *)a2 + 84);
    long long v8 = a2[6];
    *((unsigned char *)a1 + 120) = *((unsigned char *)a2 + 120);
    *((void *)a1 + 14) = *((void *)a2 + 14);
    *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
    *((void *)a1 + 16) = *((void *)a2 + 16);
    a1[6] = v8;
    memcpy(a1 + 9, a2 + 9, 0x108uLL);
    uint64_t v9 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v10 = *(int *)(v9 + 52);
    int v11 = (char *)a1 + v10;
    long long v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v14 = *(void *)(v13 - 8);
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
    if (EnumCaseMultiPayload == 1)
    {
      if (v15)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v18 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
        v11[*(int *)(v13 + 20)] = v12[*(int *)(v13 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(void *)((char *)a1 + *(int *)(v9 + 56)) = *(void *)((char *)a2 + *(int *)(v9 + 56));
      long long v19 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      long long v23 = *((_OWORD *)v22 + 1);
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
      *((_OWORD *)v21 + 1) = v23;
      *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
      v21[48] = v22[48];
      uint64_t v24 = v19[6];
      uint64_t v25 = (_OWORD *)((char *)a1 + v24);
      uint64_t v26 = (_OWORD *)((char *)a2 + v24);
      long long v27 = v26[1];
      *uint64_t v25 = *v26;
      v25[1] = v27;
      long long v28 = v26[3];
      void v25[2] = v26[2];
      v25[3] = v28;
      *(void *)((char *)a1 + v19[7]) = *(void *)((char *)a2 + v19[7]);
      uint64_t v29 = v19[8];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      *(void *)((char *)a1 + v19[9]) = *(void *)((char *)a2 + v19[9]);
      *((unsigned char *)a1 + v19[10]) = *((unsigned char *)a2 + v19[10]);
      *((unsigned char *)a1 + v19[11]) = *((unsigned char *)a2 + v19[11]);
      *(void *)((char *)a1 + v19[12]) = *(void *)((char *)a2 + v19[12]);
      *(_OWORD *)((char *)a1 + v19[13]) = *(_OWORD *)((char *)a2 + v19[13]);
      *((unsigned char *)a1 + v19[14]) = *((unsigned char *)a2 + v19[14]);
    }
    else
    {
      if (v15)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v32 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v11, v12, v32);
        v11[*(int *)(v13 + 20)] = v12[*(int *)(v13 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(void *)((char *)a1 + *(int *)(v9 + 56)) = *(void *)((char *)a2 + *(int *)(v9 + 56));
      uint64_t v33 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)((char *)a1 + *(int *)(v33 + 20)) = *(void *)((char *)a2 + *(int *)(v33 + 20));
    }
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for AccessibilityNodeAttachment.Storage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)a1, type metadata accessor for AccessibilityNodeAttachment.Storage);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
      EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      *(_DWORD *)((char *)a1 + 31) = *(_DWORD *)((char *)a2 + 31);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_DWORD *)((char *)a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      a1[4] = a2[4];
      *(_DWORD *)((char *)a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      *(void *)((char *)a1 + 84) = *(void *)((char *)a2 + 84);
      long long v8 = a2[6];
      *((unsigned char *)a1 + 120) = *((unsigned char *)a2 + 120);
      *((void *)a1 + 14) = *((void *)a2 + 14);
      *((unsigned char *)a1 + 136) = *((unsigned char *)a2 + 136);
      *((void *)a1 + 16) = *((void *)a2 + 16);
      a1[6] = v8;
      memcpy(a1 + 9, a2 + 9, 0x108uLL);
      uint64_t v9 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v10 = *(int *)(v9 + 52);
      int v11 = (char *)a1 + v10;
      long long v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v14 = *(void *)(v13 - 8);
      int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
      if (EnumCaseMultiPayload == 1)
      {
        if (v15)
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          uint64_t v18 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v11, v12, v18);
          v11[*(int *)(v13 + 20)] = v12[*(int *)(v13 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        }
        *(void *)((char *)a1 + *(int *)(v9 + 56)) = *(void *)((char *)a2 + *(int *)(v9 + 56));
        long long v19 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        long long v23 = *((_OWORD *)v22 + 1);
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v23;
        *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
        v21[48] = v22[48];
        uint64_t v24 = v19[6];
        uint64_t v25 = (_OWORD *)((char *)a1 + v24);
        uint64_t v26 = (_OWORD *)((char *)a2 + v24);
        long long v27 = v26[1];
        *uint64_t v25 = *v26;
        v25[1] = v27;
        long long v28 = v26[3];
        void v25[2] = v26[2];
        v25[3] = v28;
        *(void *)((char *)a1 + v19[7]) = *(void *)((char *)a2 + v19[7]);
        uint64_t v29 = v19[8];
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        v30[16] = v31[16];
        *(void *)((char *)a1 + v19[9]) = *(void *)((char *)a2 + v19[9]);
        *((unsigned char *)a1 + v19[10]) = *((unsigned char *)a2 + v19[10]);
        *((unsigned char *)a1 + v19[11]) = *((unsigned char *)a2 + v19[11]);
        *(void *)((char *)a1 + v19[12]) = *(void *)((char *)a2 + v19[12]);
        *(_OWORD *)((char *)a1 + v19[13]) = *(_OWORD *)((char *)a2 + v19[13]);
        *((unsigned char *)a1 + v19[14]) = *((unsigned char *)a2 + v19[14]);
      }
      else
      {
        if (v15)
        {
          type metadata accessor for LinkDestination.Configuration?(0);
          memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          uint64_t v32 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v11, v12, v32);
          v11[*(int *)(v13 + 20)] = v12[*(int *)(v13 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
        }
        *(void *)((char *)a1 + *(int *)(v9 + 56)) = *(void *)((char *)a2 + *(int *)(v9 + 56));
        uint64_t v33 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
        *(void *)((char *)a1 + *(int *)(v33 + 20)) = *(void *)((char *)a2 + *(int *)(v33 + 20));
      }
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for AccessibilityNodeAttachment.Storage()
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

ValueMetadata *type metadata accessor for AccessibilityNodeAttachment.Kind()
{
  return &type metadata for AccessibilityNodeAttachment.Kind;
}

uint64_t initializeWithCopy for AccessibilityPlatformPropertyStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityPlatformPropertyStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithTake for AccessibilityPlatformPropertyStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPlatformPropertyStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlatformPropertyStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityPlatformPropertyStorage()
{
  return &type metadata for AccessibilityPlatformPropertyStorage;
}

uint64_t dispatch thunk of static AccessibilityPlatformPropertyApplicator.apply(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *(void *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v6 = (unsigned char *)(a1 + 314);
    long long v7 = a2 + 39;
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    uint64_t v9 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v9;
    uint64_t v10 = (_OWORD *)(a1 + 16);
    int v11 = a2 + 2;
    int v12 = *((unsigned __int16 *)a2 + 16) | (*((unsigned __int8 *)a2 + 34) << 16);
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      if (BYTE2(v12) == 255)
      {
        *uint64_t v10 = *v11;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
      }
      else
      {
        uint64_t v14 = (void *)a2[2];
        uint64_t v15 = a2[3];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v14, v15, v12, BYTE2(v12) & 1);
        *(void *)(a1 + 16) = v14;
        *(void *)(a1 + 24) = v15;
        *(_WORD *)(a1 + 32) = v12;
        *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
      }
      if (*((unsigned __int8 *)a2 + 58) == 255)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      }
      else
      {
        int v18 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
        long long v19 = (void *)a2[5];
        uint64_t v20 = a2[6];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v20, *((_WORD *)a2 + 28), BYTE2(v18) & 1);
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 48) = v20;
        *(_WORD *)(a1 + 56) = v18;
        *(unsigned char *)(a1 + 58) = BYTE2(v18) & 1;
      }
      if (*((unsigned __int8 *)a2 + 82) == 255)
      {
        *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      }
      else
      {
        int v24 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
        uint64_t v25 = (void *)a2[8];
        uint64_t v26 = a2[9];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v25, v26, *((_WORD *)a2 + 40), BYTE2(v24) & 1);
        *(void *)(a1 + 64) = v25;
        *(void *)(a1 + 72) = v26;
        *(_WORD *)(a1 + 80) = v24;
        *(unsigned char *)(a1 + 82) = BYTE2(v24) & 1;
      }
      *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(void *)(a1 + 112) = a2[14];
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(void *)(a1 + 128) = a2[16];
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      long long v27 = (_OWORD *)(a1 + 144);
      long long v28 = a2 + 18;
      uint64_t v29 = a2[29];
      if (v29 == 1)
      {
        memcpy(v27, v28, 0x108uLL);
      }
      else
      {
        if (*((unsigned __int8 *)a2 + 162) == 255)
        {
          *long long v27 = *v28;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
        }
        else
        {
          int v36 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
          uint64_t v37 = (void *)a2[18];
          uint64_t v38 = a2[19];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *((_WORD *)a2 + 80), BYTE2(v36) & 1);
          *(void *)(a1 + 144) = v37;
          *(void *)(a1 + 152) = v38;
          *(_WORD *)(a1 + 160) = v36;
          *(unsigned char *)(a1 + 162) = BYTE2(v36) & 1;
          uint64_t v29 = a2[29];
        }
        *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
        *(void *)(a1 + 168) = a2[21];
        *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
        *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
        uint64_t v39 = (_OWORD *)(a1 + 184);
        int v40 = a2 + 23;
        if (v29)
        {
          if (*((unsigned __int8 *)a2 + 202) == 255)
          {
            _OWORD *v39 = *v40;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
          }
          else
          {
            int v52 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
            uint64_t v53 = (void *)a2[23];
            uint64_t v54 = a2[24];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v53, v54, *((_WORD *)a2 + 100), BYTE2(v52) & 1);
            *(void *)(a1 + 184) = v53;
            *(void *)(a1 + 192) = v54;
            *(_WORD *)(a1 + 200) = v52;
            *(unsigned char *)(a1 + 202) = BYTE2(v52) & 1;
          }
          if (*((unsigned __int8 *)a2 + 226) == 255)
          {
            *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
          }
          else
          {
            int v58 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
            long long v59 = (void *)a2[26];
            uint64_t v60 = a2[27];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v59, v60, *((_WORD *)a2 + 112), BYTE2(v58) & 1);
            *(void *)(a1 + 208) = v59;
            *(void *)(a1 + 216) = v60;
            *(_WORD *)(a1 + 224) = v58;
            *(unsigned char *)(a1 + 226) = BYTE2(v58) & 1;
          }
          uint64_t v61 = a2[30];
          *(void *)(a1 + 232) = a2[29];
          *(void *)(a1 + 240) = v61;
          *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
          *(void *)(a1 + 256) = a2[32];
          *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
          uint64_t v62 = a2[35];
          *(void *)(a1 + 272) = a2[34];
          *(void *)(a1 + 280) = v62;
          *(void *)(a1 + 288) = a2[36];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v46 = *(_OWORD *)(a2 + 33);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
          *(_OWORD *)(a1 + 264) = v46;
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
          long long v47 = *(_OWORD *)(a2 + 25);
          _OWORD *v39 = *v40;
          *(_OWORD *)(a1 + 200) = v47;
          long long v48 = *(_OWORD *)(a2 + 29);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
          *(_OWORD *)(a1 + 232) = v48;
        }
        long long v63 = (_OWORD *)(a1 + 296);
        long long v64 = a2 + 37;
        if (a2[43])
        {
          if (*((unsigned __int8 *)a2 + 314) == 255)
          {
            *long long v63 = *v64;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
          }
          else
          {
            int v78 = (unsigned __int16)*v7 | (*((unsigned __int8 *)a2 + 314) << 16);
            uint64_t v79 = (void *)a2[37];
            uint64_t v80 = a2[38];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v79, v80, *v7, BYTE2(v78) & 1);
            *(void *)(a1 + 296) = v79;
            *(void *)(a1 + 304) = v80;
            *(_WORD *)(a1 + 312) = v78;
            *int v6 = BYTE2(v78) & 1;
          }
          if (*((unsigned __int8 *)a2 + 338) == 255)
          {
            *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
          }
          else
          {
            int v84 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
            long long v85 = (void *)a2[40];
            uint64_t v86 = a2[41];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v85, v86, *((_WORD *)a2 + 168), BYTE2(v84) & 1);
            *(void *)(a1 + 320) = v85;
            *(void *)(a1 + 328) = v86;
            *(_WORD *)(a1 + 336) = v84;
            *(unsigned char *)(a1 + 338) = BYTE2(v84) & 1;
          }
          uint64_t v87 = a2[44];
          *(void *)(a1 + 344) = a2[43];
          *(void *)(a1 + 352) = v87;
          *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
          *(void *)(a1 + 368) = a2[46];
          *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
          uint64_t v88 = a2[49];
          *(void *)(a1 + 384) = a2[48];
          *(void *)(a1 + 392) = v88;
          *(void *)(a1 + 400) = a2[50];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v65 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v65;
          *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
          long long v66 = *(_OWORD *)(a2 + 39);
          *long long v63 = *v64;
          *(_OWORD *)(a1 + 312) = v66;
          long long v67 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v67;
        }
      }
      uint64_t v89 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v90 = *(int *)(v89 + 52);
      uint64_t v91 = (void *)(a1 + v90);
      uint64_t v92 = (char *)a2 + v90;
      uint64_t v93 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v94 = *(void *)(v93 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        uint64_t v96 = type metadata accessor for URL();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v96 - 8) + 16))(v91, v92, v96);
        *((unsigned char *)v91 + *(int *)(v93 + 20)) = v92[*(int *)(v93 + 20)];
        (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
      }
      *(void *)(a1 + *(int *)(v89 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v89 + 56));
      long long v97 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v98 = v97[5];
      uint64_t v99 = a1 + v98;
      uint64_t v100 = (uint64_t)a2 + v98;
      uint64_t v101 = *(void *)(v100 + 8);
      *(void *)uint64_t v99 = *(void *)v100;
      *(void *)(v99 + 8) = v101;
      uint64_t v102 = *(void *)(v100 + 24);
      *(void *)(v99 + 16) = *(void *)(v100 + 16);
      *(void *)(v99 + 24) = v102;
      *(unsigned char *)(v99 + 48) = *(unsigned char *)(v100 + 48);
      *(_OWORD *)(v99 + 32) = *(_OWORD *)(v100 + 32);
      uint64_t v103 = v97[6];
      uint64_t v104 = a1 + v103;
      long long v105 = (uint64_t *)((char *)a2 + v103);
      uint64_t v106 = *(uint64_t *)((char *)a2 + v103 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v106 == 1)
      {
        long long v107 = *((_OWORD *)v105 + 1);
        *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
        *(_OWORD *)(v104 + 16) = v107;
        long long v108 = *((_OWORD *)v105 + 3);
        *(_OWORD *)(v104 + 32) = *((_OWORD *)v105 + 2);
        *(_OWORD *)(v104 + 48) = v108;
      }
      else
      {
        __int16 v109 = *((_WORD *)v105 + 8);
        if (*((unsigned char *)v105 + 16) == 0xFF)
        {
          *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
          *(_WORD *)(v104 + 16) = *((_WORD *)v105 + 8);
        }
        else
        {
          char v110 = v109 & 1;
          uint64_t v111 = *v105;
          uint64_t v112 = v105[1];
          outlined copy of AccessibilityText.Storage((void *)*v105, v112, v109 & 1);
          *(void *)uint64_t v104 = v111;
          *(void *)(v104 + 8) = v112;
          *(unsigned char *)(v104 + 16) = v110;
          *(unsigned char *)(v104 + 17) = *((unsigned char *)v105 + 17);
          uint64_t v106 = v105[6];
        }
        uint64_t v113 = (_OWORD *)(v104 + 24);
        uint64_t v114 = v105 + 3;
        if (v106)
        {
          uint64_t v115 = v105[7];
          *(void *)(v104 + 48) = v106;
          *(void *)(v104 + 56) = v115;
          (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v106 - 8))(v113, v114, v106);
        }
        else
        {
          long long v116 = *(_OWORD *)(v105 + 5);
          *uint64_t v113 = *v114;
          *(_OWORD *)(v104 + 40) = v116;
          *(void *)(v104 + 56) = v105[7];
        }
      }
      *(void *)(a1 + v97[7]) = *(uint64_t *)((char *)a2 + v97[7]);
      uint64_t v117 = v97[8];
      uint64_t v118 = a1 + v117;
      uint64_t v119 = (uint64_t)a2 + v117;
      *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
      *(unsigned char *)(v118 + 16) = *(unsigned char *)(v119 + 16);
      *(void *)(a1 + v97[9]) = *(uint64_t *)((char *)a2 + v97[9]);
      *(unsigned char *)(a1 + v97[10]) = *((unsigned char *)a2 + v97[10]);
      *(unsigned char *)(a1 + v97[11]) = *((unsigned char *)a2 + v97[11]);
      *(void *)(a1 + v97[12]) = *(uint64_t *)((char *)a2 + v97[12]);
      uint64_t v120 = v97[13];
      uint64_t v121 = (void *)(a1 + v120);
      uint64_t v122 = (uint64_t *)((char *)a2 + v120);
      uint64_t v123 = v122[1];
      *uint64_t v121 = *v122;
      v121[1] = v123;
      *(unsigned char *)(a1 + v97[14]) = *((unsigned char *)a2 + v97[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (BYTE2(v12) == 255)
      {
        *uint64_t v10 = *v11;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
      }
      else
      {
        uint64_t v16 = (void *)a2[2];
        uint64_t v17 = a2[3];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, v12, BYTE2(v12) & 1);
        *(void *)(a1 + 16) = v16;
        *(void *)(a1 + 24) = v17;
        *(_WORD *)(a1 + 32) = v12;
        *(unsigned char *)(a1 + 34) = BYTE2(v12) & 1;
      }
      if (*((unsigned __int8 *)a2 + 58) == 255)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
      }
      else
      {
        int v21 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
        uint64_t v22 = (void *)a2[5];
        uint64_t v23 = a2[6];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *((_WORD *)a2 + 28), BYTE2(v21) & 1);
        *(void *)(a1 + 40) = v22;
        *(void *)(a1 + 48) = v23;
        *(_WORD *)(a1 + 56) = v21;
        *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
      }
      if (*((unsigned __int8 *)a2 + 82) == 255)
      {
        *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
      }
      else
      {
        int v30 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
        uint64_t v31 = (void *)a2[8];
        uint64_t v32 = a2[9];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v31, v32, *((_WORD *)a2 + 40), BYTE2(v30) & 1);
        *(void *)(a1 + 64) = v31;
        *(void *)(a1 + 72) = v32;
        *(_WORD *)(a1 + 80) = v30;
        *(unsigned char *)(a1 + 82) = BYTE2(v30) & 1;
      }
      *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(void *)(a1 + 112) = a2[14];
      *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
      *(void *)(a1 + 128) = a2[16];
      *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
      uint64_t v33 = (_OWORD *)(a1 + 144);
      uint64_t v34 = a2 + 18;
      uint64_t v35 = a2[29];
      if (v35 == 1)
      {
        memcpy(v33, v34, 0x108uLL);
      }
      else
      {
        if (*((unsigned __int8 *)a2 + 162) == 255)
        {
          _OWORD *v33 = *v34;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
        }
        else
        {
          int v41 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
          long long v42 = (void *)a2[18];
          uint64_t v43 = a2[19];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v42, v43, *((_WORD *)a2 + 80), BYTE2(v41) & 1);
          *(void *)(a1 + 144) = v42;
          *(void *)(a1 + 152) = v43;
          *(_WORD *)(a1 + 160) = v41;
          *(unsigned char *)(a1 + 162) = BYTE2(v41) & 1;
          uint64_t v35 = a2[29];
        }
        *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
        *(void *)(a1 + 168) = a2[21];
        *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
        *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
        int v44 = (_OWORD *)(a1 + 184);
        long long v45 = a2 + 23;
        if (v35)
        {
          if (*((unsigned __int8 *)a2 + 202) == 255)
          {
            *int v44 = *v45;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
          }
          else
          {
            int v55 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
            uint64_t v56 = (void *)a2[23];
            uint64_t v57 = a2[24];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v56, v57, *((_WORD *)a2 + 100), BYTE2(v55) & 1);
            *(void *)(a1 + 184) = v56;
            *(void *)(a1 + 192) = v57;
            *(_WORD *)(a1 + 200) = v55;
            *(unsigned char *)(a1 + 202) = BYTE2(v55) & 1;
          }
          if (*((unsigned __int8 *)a2 + 226) == 255)
          {
            *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
          }
          else
          {
            int v68 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
            uint64_t v69 = (void *)a2[26];
            uint64_t v70 = a2[27];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v69, v70, *((_WORD *)a2 + 112), BYTE2(v68) & 1);
            *(void *)(a1 + 208) = v69;
            *(void *)(a1 + 216) = v70;
            *(_WORD *)(a1 + 224) = v68;
            *(unsigned char *)(a1 + 226) = BYTE2(v68) & 1;
          }
          uint64_t v71 = a2[30];
          *(void *)(a1 + 232) = a2[29];
          *(void *)(a1 + 240) = v71;
          *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
          *(void *)(a1 + 256) = a2[32];
          *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
          uint64_t v72 = a2[35];
          *(void *)(a1 + 272) = a2[34];
          *(void *)(a1 + 280) = v72;
          *(void *)(a1 + 288) = a2[36];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v49 = *(_OWORD *)(a2 + 33);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
          *(_OWORD *)(a1 + 264) = v49;
          *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
          long long v50 = *(_OWORD *)(a2 + 25);
          *int v44 = *v45;
          *(_OWORD *)(a1 + 200) = v50;
          long long v51 = *(_OWORD *)(a2 + 29);
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
          *(_OWORD *)(a1 + 232) = v51;
        }
        uint64_t v73 = (_OWORD *)(a1 + 296);
        uint64_t v74 = a2 + 37;
        if (a2[43])
        {
          if (*((unsigned __int8 *)a2 + 314) == 255)
          {
            *uint64_t v73 = *v74;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
          }
          else
          {
            int v81 = (unsigned __int16)*v7 | (*((unsigned __int8 *)a2 + 314) << 16);
            uint64_t v82 = (void *)a2[37];
            uint64_t v83 = a2[38];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v82, v83, *v7, BYTE2(v81) & 1);
            *(void *)(a1 + 296) = v82;
            *(void *)(a1 + 304) = v83;
            *(_WORD *)(a1 + 312) = v81;
            *int v6 = BYTE2(v81) & 1;
          }
          if (*((unsigned __int8 *)a2 + 338) == 255)
          {
            *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
          }
          else
          {
            int v124 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
            uint64_t v125 = (void *)a2[40];
            uint64_t v126 = a2[41];
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v125, v126, *((_WORD *)a2 + 168), BYTE2(v124) & 1);
            *(void *)(a1 + 320) = v125;
            *(void *)(a1 + 328) = v126;
            *(_WORD *)(a1 + 336) = v124;
            *(unsigned char *)(a1 + 338) = BYTE2(v124) & 1;
          }
          uint64_t v127 = a2[44];
          *(void *)(a1 + 344) = a2[43];
          *(void *)(a1 + 352) = v127;
          *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
          *(void *)(a1 + 368) = a2[46];
          *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
          uint64_t v128 = a2[49];
          *(void *)(a1 + 384) = a2[48];
          *(void *)(a1 + 392) = v128;
          *(void *)(a1 + 400) = a2[50];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v75 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v75;
          *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
          long long v76 = *(_OWORD *)(a2 + 39);
          *uint64_t v73 = *v74;
          *(_OWORD *)(a1 + 312) = v76;
          long long v77 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v77;
        }
      }
      uint64_t v129 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v130 = *(int *)(v129 + 52);
      uint64_t v131 = (void *)(a1 + v130);
      long long v132 = (char *)a2 + v130;
      uint64_t v133 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v134 = *(void *)(v133 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48))(v132, 1, v133))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v131, v132, *(void *)(*(void *)(v135 - 8) + 64));
      }
      else
      {
        uint64_t v136 = type metadata accessor for URL();
        (*(void (**)(void *, char *, uint64_t))(*(void *)(v136 - 8) + 16))(v131, v132, v136);
        *((unsigned char *)v131 + *(int *)(v133 + 20)) = v132[*(int *)(v133 + 20)];
        (*(void (**)(void *, void, uint64_t, uint64_t))(v134 + 56))(v131, 0, 1, v133);
      }
      *(void *)(a1 + *(int *)(v129 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v129 + 56));
      uint64_t v137 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)(a1 + *(int *)(v137 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v137 + 20));
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CodableAccessibilityAttachmentStorage(uint64_t a1)
{
  uint64_t v2 = (unsigned __int16 *)(a1 + 312);
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  int v4 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
  if (EnumCaseMultiPayload == 1)
  {
    if (*(unsigned __int8 *)(a1 + 34) != 255) {
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 58) != 255)
    {
      int v5 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v5, BYTE2(v5) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 82) != 255)
    {
      int v6 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v6, BYTE2(v6) & 1);
    }
    uint64_t v7 = *(void *)(a1 + 232);
    if (v7 != 1)
    {
      if (*(unsigned __int8 *)(a1 + 162) != 255)
      {
        int v8 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v8, BYTE2(v8) & 1);
        uint64_t v7 = *(void *)(a1 + 232);
      }
      if (v7)
      {
        if (*(unsigned __int8 *)(a1 + 202) != 255)
        {
          int v9 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v9, BYTE2(v9) & 1);
        }
        if (*(unsigned __int8 *)(a1 + 226) != 255)
        {
          int v10 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v10, BYTE2(v10) & 1);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 344))
      {
        if (*((unsigned __int8 *)v2 + 2) != 255)
        {
          int v11 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v11, BYTE2(v11) & 1);
        }
        if (*((unsigned __int8 *)v2 + 26) != 255)
        {
          int v12 = v2[12] | (*((unsigned __int8 *)v2 + 26) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v12, BYTE2(v12) & 1);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v13 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
    uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
    {
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = a1 + *(int *)(v16 + 24);
    uint64_t v18 = *(void *)(v17 + 48);
    if (v18 != 1)
    {
      if (*(unsigned char *)(v17 + 16) != 0xFF)
      {
        outlined consume of AccessibilityText.Storage(*(void **)v17, *(void *)(v17 + 8), *(_WORD *)(v17 + 16) & 1);
        uint64_t v18 = *(void *)(v17 + 48);
      }
      if (v18) {
        __swift_destroy_boxed_opaque_existential_1(v17 + 24);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 34) != 255) {
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 58) != 255)
    {
      int v20 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v20, BYTE2(v20) & 1);
    }
    if (*(unsigned __int8 *)(a1 + 82) != 255)
    {
      int v21 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v21, BYTE2(v21) & 1);
    }
    uint64_t v22 = *(void *)(a1 + 232);
    if (v22 != 1)
    {
      if (*(unsigned __int8 *)(a1 + 162) != 255)
      {
        int v23 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v23, BYTE2(v23) & 1);
        uint64_t v22 = *(void *)(a1 + 232);
      }
      if (v22)
      {
        if (*(unsigned __int8 *)(a1 + 202) != 255)
        {
          int v24 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v24, BYTE2(v24) & 1);
        }
        if (*(unsigned __int8 *)(a1 + 226) != 255)
        {
          int v25 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v25, BYTE2(v25) & 1);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 344))
      {
        if (*((unsigned __int8 *)v2 + 2) != 255)
        {
          int v26 = *v2 | (*((unsigned __int8 *)v2 + 2) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v26, BYTE2(v26) & 1);
        }
        if (*((unsigned __int8 *)v2 + 26) != 255)
        {
          int v27 = v2[12] | (*((unsigned __int8 *)v2 + 26) << 16);
          outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v27, BYTE2(v27) & 1);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v28 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
    uint64_t v29 = type metadata accessor for LinkDestination.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29))
    {
      uint64_t v30 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v28, v30);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
    return swift_release();
  }
}

uint64_t initializeWithCopy for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned char *)(a1 + 314);
  int v5 = (unsigned __int16 *)(a2 + 312);
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  int v8 = (_OWORD *)(a1 + 16);
  int v9 = (_OWORD *)(a2 + 16);
  int v10 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  swift_bridgeObjectRetain();
  if (EnumCaseMultiPayload == 1)
  {
    if (BYTE2(v10) == 255)
    {
      *int v8 = *v9;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    }
    else
    {
      int v11 = *(void **)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, v10, BYTE2(v10) & 1);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 32) = v10;
      *(unsigned char *)(a1 + 34) = BYTE2(v10) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 58) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    }
    else
    {
      int v15 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
      uint64_t v16 = *(void **)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, *(_WORD *)(a2 + 56), BYTE2(v15) & 1);
      *(void *)(a1 + 40) = v16;
      *(void *)(a1 + 48) = v17;
      *(_WORD *)(a1 + 56) = v15;
      *(unsigned char *)(a1 + 58) = BYTE2(v15) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    }
    else
    {
      int v21 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
      uint64_t v22 = *(void **)(a2 + 64);
      uint64_t v23 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 80), BYTE2(v21) & 1);
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v23;
      *(_WORD *)(a1 + 80) = v21;
      *(unsigned char *)(a1 + 82) = BYTE2(v21) & 1;
    }
    *(void *)(a1 + 84) = *(void *)(a2 + 84);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    int v24 = (_OWORD *)(a1 + 144);
    int v25 = (_OWORD *)(a2 + 144);
    uint64_t v26 = *(void *)(a2 + 232);
    if (v26 == 1)
    {
      memcpy(v24, v25, 0x108uLL);
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        _OWORD *v24 = *v25;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      }
      else
      {
        int v33 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        uint64_t v34 = *(void **)(a2 + 144);
        uint64_t v35 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, *(_WORD *)(a2 + 160), BYTE2(v33) & 1);
        *(void *)(a1 + 144) = v34;
        *(void *)(a1 + 152) = v35;
        *(_WORD *)(a1 + 160) = v33;
        *(unsigned char *)(a1 + 162) = BYTE2(v33) & 1;
        uint64_t v26 = *(void *)(a2 + 232);
      }
      *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
      int v36 = (_OWORD *)(a1 + 184);
      uint64_t v37 = (_OWORD *)(a2 + 184);
      if (v26)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          *int v36 = *v37;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
        }
        else
        {
          int v49 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          long long v50 = *(void **)(a2 + 184);
          uint64_t v51 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v50, v51, *(_WORD *)(a2 + 200), BYTE2(v49) & 1);
          *(void *)(a1 + 184) = v50;
          *(void *)(a1 + 192) = v51;
          *(_WORD *)(a1 + 200) = v49;
          *(unsigned char *)(a1 + 202) = BYTE2(v49) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        }
        else
        {
          int v55 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          uint64_t v56 = *(void **)(a2 + 208);
          uint64_t v57 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v56, v57, *(_WORD *)(a2 + 224), BYTE2(v55) & 1);
          *(void *)(a1 + 208) = v56;
          *(void *)(a1 + 216) = v57;
          *(_WORD *)(a1 + 224) = v55;
          *(unsigned char *)(a1 + 226) = BYTE2(v55) & 1;
        }
        uint64_t v58 = *(void *)(a2 + 240);
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        *(void *)(a1 + 240) = v58;
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        uint64_t v59 = *(void *)(a2 + 280);
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = v59;
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v43 = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = v43;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
        long long v44 = *(_OWORD *)(a2 + 200);
        *int v36 = *v37;
        *(_OWORD *)(a1 + 200) = v44;
        long long v45 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 232) = v45;
      }
      uint64_t v60 = (_OWORD *)(a1 + 296);
      uint64_t v61 = (_OWORD *)(a2 + 296);
      if (*(void *)(a2 + 344))
      {
        if (*((unsigned __int8 *)v5 + 2) == 255)
        {
          *uint64_t v60 = *v61;
          *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        }
        else
        {
          int v75 = *v5 | (*((unsigned __int8 *)v5 + 2) << 16);
          long long v76 = *(void **)(a2 + 296);
          uint64_t v77 = *(void *)(a2 + 304);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v76, v77, *v5, BYTE2(v75) & 1);
          *(void *)(a1 + 296) = v76;
          *(void *)(a1 + 304) = v77;
          *(_WORD *)(a1 + 312) = v75;
          unsigned char *v4 = BYTE2(v75) & 1;
        }
        if (*((unsigned __int8 *)v5 + 26) == 255)
        {
          *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        }
        else
        {
          int v81 = v5[12] | (*((unsigned __int8 *)v5 + 26) << 16);
          uint64_t v82 = *(void **)(a2 + 320);
          uint64_t v83 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v82, v83, v5[12], BYTE2(v81) & 1);
          *(void *)(a1 + 320) = v82;
          *(void *)(a1 + 328) = v83;
          *(_WORD *)(a1 + 336) = v81;
          unsigned char v4[24] = BYTE2(v81) & 1;
        }
        uint64_t v84 = *(void *)(a2 + 352);
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        *(void *)(a1 + 352) = v84;
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 368) = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        uint64_t v85 = *(void *)(a2 + 392);
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = v85;
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v62 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(a1 + 376) = v62;
        *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
        long long v63 = *(_OWORD *)(a2 + 312);
        *uint64_t v60 = *v61;
        *(_OWORD *)(a1 + 312) = v63;
        long long v64 = *(_OWORD *)(a2 + 344);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 344) = v64;
      }
    }
    uint64_t v86 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v87 = *(int *)(v86 + 52);
    uint64_t v88 = (void *)(a1 + v87);
    uint64_t v89 = (const void *)(a2 + v87);
    uint64_t v90 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v91 = *(void *)(v90 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64));
    }
    else
    {
      uint64_t v93 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v93 - 8) + 16))(v88, v89, v93);
      *((unsigned char *)v88 + *(int *)(v90 + 20)) = *((unsigned char *)v89 + *(int *)(v90 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    *(void *)(a1 + *(int *)(v86 + 56)) = *(void *)(a2 + *(int *)(v86 + 56));
    uint64_t v94 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
    uint64_t v95 = v94[5];
    uint64_t v96 = a1 + v95;
    uint64_t v97 = a2 + v95;
    uint64_t v98 = *(void *)(v97 + 8);
    *(void *)uint64_t v96 = *(void *)v97;
    *(void *)(v96 + 8) = v98;
    uint64_t v99 = *(void *)(v97 + 24);
    *(void *)(v96 + 16) = *(void *)(v97 + 16);
    *(void *)(v96 + 24) = v99;
    *(unsigned char *)(v96 + 48) = *(unsigned char *)(v97 + 48);
    *(_OWORD *)(v96 + 32) = *(_OWORD *)(v97 + 32);
    uint64_t v100 = v94[6];
    uint64_t v101 = a1 + v100;
    uint64_t v102 = (uint64_t *)(a2 + v100);
    uint64_t v103 = *(void *)(a2 + v100 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v103 == 1)
    {
      long long v104 = *((_OWORD *)v102 + 1);
      *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
      *(_OWORD *)(v101 + 16) = v104;
      long long v105 = *((_OWORD *)v102 + 3);
      *(_OWORD *)(v101 + 32) = *((_OWORD *)v102 + 2);
      *(_OWORD *)(v101 + 48) = v105;
    }
    else
    {
      __int16 v106 = *((_WORD *)v102 + 8);
      if (*((unsigned char *)v102 + 16) == 0xFF)
      {
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
        *(_WORD *)(v101 + 16) = *((_WORD *)v102 + 8);
      }
      else
      {
        char v107 = v106 & 1;
        uint64_t v108 = *v102;
        uint64_t v109 = v102[1];
        outlined copy of AccessibilityText.Storage((void *)*v102, v109, v106 & 1);
        *(void *)uint64_t v101 = v108;
        *(void *)(v101 + 8) = v109;
        *(unsigned char *)(v101 + 16) = v107;
        *(unsigned char *)(v101 + 17) = *((unsigned char *)v102 + 17);
        uint64_t v103 = v102[6];
      }
      char v110 = (_OWORD *)(v101 + 24);
      uint64_t v111 = v102 + 3;
      if (v103)
      {
        uint64_t v112 = v102[7];
        *(void *)(v101 + 48) = v103;
        *(void *)(v101 + 56) = v112;
        (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v103 - 8))(v110, v111, v103);
      }
      else
      {
        long long v113 = *(_OWORD *)(v102 + 5);
        _OWORD *v110 = *v111;
        *(_OWORD *)(v101 + 40) = v113;
        *(void *)(v101 + 56) = v102[7];
      }
    }
    *(void *)(a1 + v94[7]) = *(void *)(a2 + v94[7]);
    uint64_t v114 = v94[8];
    uint64_t v115 = a1 + v114;
    uint64_t v116 = a2 + v114;
    *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
    *(unsigned char *)(v115 + 16) = *(unsigned char *)(v116 + 16);
    *(void *)(a1 + v94[9]) = *(void *)(a2 + v94[9]);
    *(unsigned char *)(a1 + v94[10]) = *(unsigned char *)(a2 + v94[10]);
    *(unsigned char *)(a1 + v94[11]) = *(unsigned char *)(a2 + v94[11]);
    *(void *)(a1 + v94[12]) = *(void *)(a2 + v94[12]);
    uint64_t v117 = v94[13];
    uint64_t v118 = (void *)(a1 + v117);
    uint64_t v119 = (void *)(a2 + v117);
    uint64_t v120 = v119[1];
    void *v118 = *v119;
    v118[1] = v120;
    *(unsigned char *)(a1 + v94[14]) = *(unsigned char *)(a2 + v94[14]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    if (BYTE2(v10) == 255)
    {
      *int v8 = *v9;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    }
    else
    {
      uint64_t v13 = *(void **)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, v10, BYTE2(v10) & 1);
      *(void *)(a1 + 16) = v13;
      *(void *)(a1 + 24) = v14;
      *(_WORD *)(a1 + 32) = v10;
      *(unsigned char *)(a1 + 34) = BYTE2(v10) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 58) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    }
    else
    {
      int v18 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
      long long v19 = *(void **)(a2 + 40);
      uint64_t v20 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v20, *(_WORD *)(a2 + 56), BYTE2(v18) & 1);
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = v20;
      *(_WORD *)(a1 + 56) = v18;
      *(unsigned char *)(a1 + 58) = BYTE2(v18) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    }
    else
    {
      int v27 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
      uint64_t v28 = *(void **)(a2 + 64);
      uint64_t v29 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, *(_WORD *)(a2 + 80), BYTE2(v27) & 1);
      *(void *)(a1 + 64) = v28;
      *(void *)(a1 + 72) = v29;
      *(_WORD *)(a1 + 80) = v27;
      *(unsigned char *)(a1 + 82) = BYTE2(v27) & 1;
    }
    *(void *)(a1 + 84) = *(void *)(a2 + 84);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    uint64_t v30 = (_OWORD *)(a1 + 144);
    uint64_t v31 = (_OWORD *)(a2 + 144);
    uint64_t v32 = *(void *)(a2 + 232);
    if (v32 == 1)
    {
      memcpy(v30, v31, 0x108uLL);
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        *uint64_t v30 = *v31;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      }
      else
      {
        int v38 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        uint64_t v39 = *(void **)(a2 + 144);
        uint64_t v40 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *(_WORD *)(a2 + 160), BYTE2(v38) & 1);
        *(void *)(a1 + 144) = v39;
        *(void *)(a1 + 152) = v40;
        *(_WORD *)(a1 + 160) = v38;
        *(unsigned char *)(a1 + 162) = BYTE2(v38) & 1;
        uint64_t v32 = *(void *)(a2 + 232);
      }
      *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
      int v41 = (_OWORD *)(a1 + 184);
      long long v42 = (_OWORD *)(a2 + 184);
      if (v32)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          *int v41 = *v42;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
        }
        else
        {
          int v52 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          uint64_t v53 = *(void **)(a2 + 184);
          uint64_t v54 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v53, v54, *(_WORD *)(a2 + 200), BYTE2(v52) & 1);
          *(void *)(a1 + 184) = v53;
          *(void *)(a1 + 192) = v54;
          *(_WORD *)(a1 + 200) = v52;
          *(unsigned char *)(a1 + 202) = BYTE2(v52) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        }
        else
        {
          int v65 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          long long v66 = *(void **)(a2 + 208);
          uint64_t v67 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v66, v67, *(_WORD *)(a2 + 224), BYTE2(v65) & 1);
          *(void *)(a1 + 208) = v66;
          *(void *)(a1 + 216) = v67;
          *(_WORD *)(a1 + 224) = v65;
          *(unsigned char *)(a1 + 226) = BYTE2(v65) & 1;
        }
        uint64_t v68 = *(void *)(a2 + 240);
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        *(void *)(a1 + 240) = v68;
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        uint64_t v69 = *(void *)(a2 + 280);
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = v69;
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v46 = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
        *(_OWORD *)(a1 + 264) = v46;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
        long long v47 = *(_OWORD *)(a2 + 200);
        *int v41 = *v42;
        *(_OWORD *)(a1 + 200) = v47;
        long long v48 = *(_OWORD *)(a2 + 232);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 232) = v48;
      }
      uint64_t v70 = (_OWORD *)(a1 + 296);
      uint64_t v71 = (_OWORD *)(a2 + 296);
      if (*(void *)(a2 + 344))
      {
        if (*((unsigned __int8 *)v5 + 2) == 255)
        {
          *uint64_t v70 = *v71;
          *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        }
        else
        {
          int v78 = *v5 | (*((unsigned __int8 *)v5 + 2) << 16);
          uint64_t v79 = *(void **)(a2 + 296);
          uint64_t v80 = *(void *)(a2 + 304);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v79, v80, *v5, BYTE2(v78) & 1);
          *(void *)(a1 + 296) = v79;
          *(void *)(a1 + 304) = v80;
          *(_WORD *)(a1 + 312) = v78;
          unsigned char *v4 = BYTE2(v78) & 1;
        }
        if (*((unsigned __int8 *)v5 + 26) == 255)
        {
          *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        }
        else
        {
          int v121 = v5[12] | (*((unsigned __int8 *)v5 + 26) << 16);
          uint64_t v122 = *(void **)(a2 + 320);
          uint64_t v123 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v122, v123, v5[12], BYTE2(v121) & 1);
          *(void *)(a1 + 320) = v122;
          *(void *)(a1 + 328) = v123;
          *(_WORD *)(a1 + 336) = v121;
          unsigned char v4[24] = BYTE2(v121) & 1;
        }
        uint64_t v124 = *(void *)(a2 + 352);
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        *(void *)(a1 + 352) = v124;
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 368) = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        uint64_t v125 = *(void *)(a2 + 392);
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = v125;
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v72 = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
        *(_OWORD *)(a1 + 376) = v72;
        *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
        long long v73 = *(_OWORD *)(a2 + 312);
        *uint64_t v70 = *v71;
        *(_OWORD *)(a1 + 312) = v73;
        long long v74 = *(_OWORD *)(a2 + 344);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 344) = v74;
      }
    }
    uint64_t v126 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v127 = *(int *)(v126 + 52);
    uint64_t v128 = (void *)(a1 + v127);
    uint64_t v129 = (const void *)(a2 + v127);
    uint64_t v130 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v131 = *(void *)(v130 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v128, v129, *(void *)(*(void *)(v132 - 8) + 64));
    }
    else
    {
      uint64_t v133 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v133 - 8) + 16))(v128, v129, v133);
      *((unsigned char *)v128 + *(int *)(v130 + 20)) = *((unsigned char *)v129 + *(int *)(v130 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
    }
    *(void *)(a1 + *(int *)(v126 + 56)) = *(void *)(a2 + *(int *)(v126 + 56));
    uint64_t v134 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
    *(void *)(a1 + *(int *)(v134 + 20)) = *(void *)(a2 + *(int *)(v134 + 20));
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = (unsigned char *)(a1 + 314);
    int v5 = (unsigned __int16 *)(a2 + 312);
    outlined destroy of CodableAccessibilityAttachmentStorage(a1, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v7 = (_OWORD *)(a1 + 16);
    int v8 = (long long *)(a2 + 16);
    int v9 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
    swift_bridgeObjectRetain();
    if (EnumCaseMultiPayload == 1)
    {
      if (BYTE2(v9) == 255)
      {
        long long v10 = *v8;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
        *uint64_t v7 = v10;
      }
      else
      {
        uint64_t v12 = *(void **)(a2 + 16);
        uint64_t v13 = *(void *)(a2 + 24);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v12, v13, v9, BYTE2(v9) & 1);
        *(void *)(a1 + 16) = v12;
        *(void *)(a1 + 24) = v13;
        *(_WORD *)(a1 + 32) = v9;
        *(unsigned char *)(a1 + 34) = BYTE2(v9) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 58) == 255)
      {
        long long v14 = *(_OWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
        *(_OWORD *)(a1 + 40) = v14;
      }
      else
      {
        int v18 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
        long long v19 = *(void **)(a2 + 40);
        uint64_t v20 = *(void *)(a2 + 48);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v19, v20, *(_WORD *)(a2 + 56), BYTE2(v18) & 1);
        *(void *)(a1 + 40) = v19;
        *(void *)(a1 + 48) = v20;
        *(_WORD *)(a1 + 56) = v18;
        *(unsigned char *)(a1 + 58) = BYTE2(v18) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 82) == 255)
      {
        long long v21 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
        *(_OWORD *)(a1 + 64) = v21;
      }
      else
      {
        int v26 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
        int v27 = *(void **)(a2 + 64);
        uint64_t v28 = *(void *)(a2 + 72);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v27, v28, *(_WORD *)(a2 + 80), BYTE2(v26) & 1);
        *(void *)(a1 + 64) = v27;
        *(void *)(a1 + 72) = v28;
        *(_WORD *)(a1 + 80) = v26;
        *(unsigned char *)(a1 + 82) = BYTE2(v26) & 1;
      }
      *(void *)(a1 + 84) = *(void *)(a2 + 84);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      uint64_t v29 = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v29;
      uint64_t v30 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 128) = v30;
      uint64_t v31 = (_OWORD *)(a1 + 144);
      uint64_t v32 = (long long *)(a2 + 144);
      if (*(void *)(a2 + 232) == 1)
      {
        memcpy(v31, v32, 0x108uLL);
      }
      else
      {
        if (*(unsigned __int8 *)(a2 + 162) == 255)
        {
          long long v40 = *v32;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
          *uint64_t v31 = v40;
        }
        else
        {
          int v42 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
          long long v43 = *(void **)(a2 + 144);
          uint64_t v44 = *(void *)(a2 + 152);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v43, v44, *(_WORD *)(a2 + 160), BYTE2(v42) & 1);
          *(void *)(a1 + 144) = v43;
          *(void *)(a1 + 152) = v44;
          *(_WORD *)(a1 + 160) = v42;
          *(unsigned char *)(a1 + 162) = BYTE2(v42) & 1;
        }
        *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
        *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
        uint64_t v45 = *(void *)(a2 + 168);
        *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
        *(void *)(a1 + 168) = v45;
        *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
        *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
        long long v46 = (_OWORD *)(a1 + 184);
        long long v47 = (long long *)(a2 + 184);
        if (*(void *)(a2 + 232))
        {
          if (*(unsigned __int8 *)(a2 + 202) == 255)
          {
            long long v48 = *v47;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
            *long long v46 = v48;
          }
          else
          {
            int v66 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
            uint64_t v67 = *(void **)(a2 + 184);
            uint64_t v68 = *(void *)(a2 + 192);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v67, v68, *(_WORD *)(a2 + 200), BYTE2(v66) & 1);
            *(void *)(a1 + 184) = v67;
            *(void *)(a1 + 192) = v68;
            *(_WORD *)(a1 + 200) = v66;
            *(unsigned char *)(a1 + 202) = BYTE2(v66) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 226) == 255)
          {
            long long v69 = *(_OWORD *)(a2 + 208);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
            *(_OWORD *)(a1 + 208) = v69;
          }
          else
          {
            int v74 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
            int v75 = *(void **)(a2 + 208);
            uint64_t v76 = *(void *)(a2 + 216);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v75, v76, *(_WORD *)(a2 + 224), BYTE2(v74) & 1);
            *(void *)(a1 + 208) = v75;
            *(void *)(a1 + 216) = v76;
            *(_WORD *)(a1 + 224) = v74;
            *(unsigned char *)(a1 + 226) = BYTE2(v74) & 1;
          }
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          uint64_t v77 = *(void *)(a2 + 240);
          *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
          *(void *)(a1 + 240) = v77;
          uint64_t v78 = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          *(void *)(a1 + 256) = v78;
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(void *)(a1 + 280) = *(void *)(a2 + 280);
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v56 = *v47;
          long long v57 = *(_OWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
          *(_OWORD *)(a1 + 216) = v57;
          *long long v46 = v56;
          long long v58 = *(_OWORD *)(a2 + 232);
          long long v59 = *(_OWORD *)(a2 + 248);
          long long v60 = *(_OWORD *)(a2 + 280);
          *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
          *(_OWORD *)(a1 + 280) = v60;
          *(_OWORD *)(a1 + 232) = v58;
          *(_OWORD *)(a1 + 248) = v59;
        }
        uint64_t v79 = (_OWORD *)(a1 + 296);
        uint64_t v80 = (long long *)(a2 + 296);
        if (*(void *)(a2 + 344))
        {
          if (*((unsigned __int8 *)v5 + 2) == 255)
          {
            long long v81 = *v80;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
            *uint64_t v79 = v81;
          }
          else
          {
            int v100 = *v5 | (*((unsigned __int8 *)v5 + 2) << 16);
            uint64_t v101 = *(void **)(a2 + 296);
            uint64_t v102 = *(void *)(a2 + 304);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v101, v102, *v5, BYTE2(v100) & 1);
            *(void *)(a1 + 296) = v101;
            *(void *)(a1 + 304) = v102;
            *(_WORD *)(a1 + 312) = v100;
            unsigned char *v4 = BYTE2(v100) & 1;
          }
          if (*((unsigned __int8 *)v5 + 26) == 255)
          {
            long long v103 = *(_OWORD *)(a2 + 320);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
            *(_OWORD *)(a1 + 320) = v103;
          }
          else
          {
            int v108 = v5[12] | (*((unsigned __int8 *)v5 + 26) << 16);
            uint64_t v109 = *(void **)(a2 + 320);
            uint64_t v110 = *(void *)(a2 + 328);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v109, v110, v5[12], BYTE2(v108) & 1);
            *(void *)(a1 + 320) = v109;
            *(void *)(a1 + 328) = v110;
            *(_WORD *)(a1 + 336) = v108;
            *(unsigned char *)(a1 + 338) = BYTE2(v108) & 1;
          }
          *(void *)(a1 + 344) = *(void *)(a2 + 344);
          uint64_t v111 = *(void *)(a2 + 352);
          *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
          *(void *)(a1 + 352) = v111;
          uint64_t v112 = *(void *)(a2 + 368);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
          *(void *)(a1 + 368) = v112;
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(void *)(a1 + 392) = *(void *)(a2 + 392);
          *(void *)(a1 + 400) = *(void *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v82 = *v80;
          long long v83 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v83;
          *uint64_t v79 = v82;
          long long v84 = *(_OWORD *)(a2 + 344);
          long long v85 = *(_OWORD *)(a2 + 360);
          long long v86 = *(_OWORD *)(a2 + 392);
          *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 392) = v86;
          *(_OWORD *)(a1 + 344) = v84;
          *(_OWORD *)(a1 + 360) = v85;
        }
      }
      uint64_t v113 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v114 = *(int *)(v113 + 52);
      uint64_t v115 = (void *)(a1 + v114);
      uint64_t v116 = (const void *)(a2 + v114);
      uint64_t v117 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v118 = *(void *)(v117 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64));
      }
      else
      {
        uint64_t v120 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v120 - 8) + 16))(v115, v116, v120);
        *((unsigned char *)v115 + *(int *)(v117 + 20)) = *((unsigned char *)v116 + *(int *)(v117 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
      }
      *(void *)(a1 + *(int *)(v113 + 56)) = *(void *)(a2 + *(int *)(v113 + 56));
      int v121 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v122 = v121[5];
      uint64_t v123 = a1 + v122;
      uint64_t v124 = a2 + v122;
      *(void *)uint64_t v123 = *(void *)v124;
      *(void *)(v123 + 8) = *(void *)(v124 + 8);
      *(void *)(v123 + 16) = *(void *)(v124 + 16);
      *(void *)(v123 + 24) = *(void *)(v124 + 24);
      long long v125 = *(_OWORD *)(v124 + 32);
      *(unsigned char *)(v123 + 48) = *(unsigned char *)(v124 + 48);
      *(_OWORD *)(v123 + 32) = v125;
      uint64_t v126 = v121[6];
      uint64_t v127 = a1 + v126;
      uint64_t v128 = (long long *)(a2 + v126);
      uint64_t v129 = *(void *)(a2 + v126 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v129 == 1)
      {
        long long v130 = *v128;
        long long v131 = v128[1];
        long long v132 = v128[3];
        *(_OWORD *)(v127 + 32) = v128[2];
        *(_OWORD *)(v127 + 48) = v132;
        *(_OWORD *)uint64_t v127 = v130;
        *(_OWORD *)(v127 + 16) = v131;
      }
      else
      {
        __int16 v133 = *((_WORD *)v128 + 8);
        if (*((unsigned char *)v128 + 16) == 0xFF)
        {
          long long v134 = *v128;
          *(_WORD *)(v127 + 16) = *((_WORD *)v128 + 8);
          *(_OWORD *)uint64_t v127 = v134;
        }
        else
        {
          char v135 = v133 & 1;
          uint64_t v136 = *(void *)v128;
          uint64_t v137 = *((void *)v128 + 1);
          outlined copy of AccessibilityText.Storage(*(void **)v128, v137, v133 & 1);
          *(void *)uint64_t v127 = v136;
          *(void *)(v127 + 8) = v137;
          *(unsigned char *)(v127 + 16) = v135;
          *(unsigned char *)(v127 + 17) = *((unsigned char *)v128 + 17);
        }
        uint64_t v138 = (_OWORD *)(v127 + 24);
        uint64_t v139 = (long long *)((char *)v128 + 24);
        uint64_t v140 = *((void *)v128 + 6);
        if (v140)
        {
          *(void *)(v127 + 48) = v140;
          *(void *)(v127 + 56) = *((void *)v128 + 7);
          (**(void (***)(_OWORD *, long long *))(v140 - 8))(v138, v139);
        }
        else
        {
          long long v141 = *v139;
          long long v142 = *(long long *)((char *)v128 + 40);
          *(void *)(v127 + 56) = *((void *)v128 + 7);
          _OWORD *v138 = v141;
          *(_OWORD *)(v127 + 40) = v142;
        }
      }
      *(void *)(a1 + v121[7]) = *(void *)(a2 + v121[7]);
      uint64_t v143 = v121[8];
      uint64_t v144 = a1 + v143;
      uint64_t v145 = (long long *)(a2 + v143);
      long long v146 = *v145;
      *(unsigned char *)(v144 + 16) = *((unsigned char *)v145 + 16);
      *(_OWORD *)uint64_t v144 = v146;
      *(void *)(a1 + v121[9]) = *(void *)(a2 + v121[9]);
      *(unsigned char *)(a1 + v121[10]) = *(unsigned char *)(a2 + v121[10]);
      *(unsigned char *)(a1 + v121[11]) = *(unsigned char *)(a2 + v121[11]);
      *(void *)(a1 + v121[12]) = *(void *)(a2 + v121[12]);
      uint64_t v147 = v121[13];
      long long v148 = (void *)(a1 + v147);
      uint64_t v149 = (void *)(a2 + v147);
      void *v148 = *v149;
      v148[1] = v149[1];
      *(unsigned char *)(a1 + v121[14]) = *(unsigned char *)(a2 + v121[14]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (BYTE2(v9) == 255)
      {
        long long v11 = *v8;
        *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
        *uint64_t v7 = v11;
      }
      else
      {
        int v15 = *(void **)(a2 + 16);
        uint64_t v16 = *(void *)(a2 + 24);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v9, BYTE2(v9) & 1);
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
        *(_WORD *)(a1 + 32) = v9;
        *(unsigned char *)(a1 + 34) = BYTE2(v9) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 58) == 255)
      {
        long long v17 = *(_OWORD *)(a2 + 40);
        *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
        *(_OWORD *)(a1 + 40) = v17;
      }
      else
      {
        int v22 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
        uint64_t v23 = *(void **)(a2 + 40);
        uint64_t v24 = *(void *)(a2 + 48);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v23, v24, *(_WORD *)(a2 + 56), BYTE2(v22) & 1);
        *(void *)(a1 + 40) = v23;
        *(void *)(a1 + 48) = v24;
        *(_WORD *)(a1 + 56) = v22;
        *(unsigned char *)(a1 + 58) = BYTE2(v22) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 82) == 255)
      {
        long long v25 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
        *(_OWORD *)(a1 + 64) = v25;
      }
      else
      {
        int v33 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
        uint64_t v34 = *(void **)(a2 + 64);
        uint64_t v35 = *(void *)(a2 + 72);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v34, v35, *(_WORD *)(a2 + 80), BYTE2(v33) & 1);
        *(void *)(a1 + 64) = v34;
        *(void *)(a1 + 72) = v35;
        *(_WORD *)(a1 + 80) = v33;
        *(unsigned char *)(a1 + 82) = BYTE2(v33) & 1;
      }
      *(void *)(a1 + 84) = *(void *)(a2 + 84);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      uint64_t v36 = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v36;
      uint64_t v37 = *(void *)(a2 + 128);
      *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
      *(void *)(a1 + 128) = v37;
      int v38 = (_OWORD *)(a1 + 144);
      uint64_t v39 = (long long *)(a2 + 144);
      if (*(void *)(a2 + 232) == 1)
      {
        memcpy(v38, v39, 0x108uLL);
      }
      else
      {
        if (*(unsigned __int8 *)(a2 + 162) == 255)
        {
          long long v41 = *v39;
          *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
          *int v38 = v41;
        }
        else
        {
          int v49 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
          long long v50 = *(void **)(a2 + 144);
          uint64_t v51 = *(void *)(a2 + 152);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v50, v51, *(_WORD *)(a2 + 160), BYTE2(v49) & 1);
          *(void *)(a1 + 144) = v50;
          *(void *)(a1 + 152) = v51;
          *(_WORD *)(a1 + 160) = v49;
          *(unsigned char *)(a1 + 162) = BYTE2(v49) & 1;
        }
        *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
        *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
        uint64_t v52 = *(void *)(a2 + 168);
        *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
        *(void *)(a1 + 168) = v52;
        *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
        *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
        uint64_t v53 = (_OWORD *)(a1 + 184);
        uint64_t v54 = (long long *)(a2 + 184);
        if (*(void *)(a2 + 232))
        {
          if (*(unsigned __int8 *)(a2 + 202) == 255)
          {
            long long v55 = *v54;
            *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
            *uint64_t v53 = v55;
          }
          else
          {
            int v70 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
            uint64_t v71 = *(void **)(a2 + 184);
            uint64_t v72 = *(void *)(a2 + 192);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v71, v72, *(_WORD *)(a2 + 200), BYTE2(v70) & 1);
            *(void *)(a1 + 184) = v71;
            *(void *)(a1 + 192) = v72;
            *(_WORD *)(a1 + 200) = v70;
            *(unsigned char *)(a1 + 202) = BYTE2(v70) & 1;
          }
          if (*(unsigned __int8 *)(a2 + 226) == 255)
          {
            long long v73 = *(_OWORD *)(a2 + 208);
            *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
            *(_OWORD *)(a1 + 208) = v73;
          }
          else
          {
            int v87 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
            uint64_t v88 = *(void **)(a2 + 208);
            uint64_t v89 = *(void *)(a2 + 216);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v88, v89, *(_WORD *)(a2 + 224), BYTE2(v87) & 1);
            *(void *)(a1 + 208) = v88;
            *(void *)(a1 + 216) = v89;
            *(_WORD *)(a1 + 224) = v87;
            *(unsigned char *)(a1 + 226) = BYTE2(v87) & 1;
          }
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          uint64_t v90 = *(void *)(a2 + 240);
          *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
          *(void *)(a1 + 240) = v90;
          uint64_t v91 = *(void *)(a2 + 256);
          *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
          *(void *)(a1 + 256) = v91;
          *(void *)(a1 + 272) = *(void *)(a2 + 272);
          *(void *)(a1 + 280) = *(void *)(a2 + 280);
          *(void *)(a1 + 288) = *(void *)(a2 + 288);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v61 = *v54;
          long long v62 = *(_OWORD *)(a2 + 216);
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
          *(_OWORD *)(a1 + 216) = v62;
          *uint64_t v53 = v61;
          long long v63 = *(_OWORD *)(a2 + 232);
          long long v64 = *(_OWORD *)(a2 + 248);
          long long v65 = *(_OWORD *)(a2 + 280);
          *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
          *(_OWORD *)(a1 + 280) = v65;
          *(_OWORD *)(a1 + 232) = v63;
          *(_OWORD *)(a1 + 248) = v64;
        }
        uint64_t v92 = (_OWORD *)(a1 + 296);
        uint64_t v93 = (long long *)(a2 + 296);
        if (*(void *)(a2 + 344))
        {
          if (*((unsigned __int8 *)v5 + 2) == 255)
          {
            long long v94 = *v93;
            *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
            _OWORD *v92 = v94;
          }
          else
          {
            int v104 = *v5 | (*((unsigned __int8 *)v5 + 2) << 16);
            long long v105 = *(void **)(a2 + 296);
            uint64_t v106 = *(void *)(a2 + 304);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v105, v106, *v5, BYTE2(v104) & 1);
            *(void *)(a1 + 296) = v105;
            *(void *)(a1 + 304) = v106;
            *(_WORD *)(a1 + 312) = v104;
            unsigned char *v4 = BYTE2(v104) & 1;
          }
          if (*((unsigned __int8 *)v5 + 26) == 255)
          {
            long long v107 = *(_OWORD *)(a2 + 320);
            *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
            *(_OWORD *)(a1 + 320) = v107;
          }
          else
          {
            int v150 = v5[12] | (*((unsigned __int8 *)v5 + 26) << 16);
            unint64_t v151 = *(void **)(a2 + 320);
            uint64_t v152 = *(void *)(a2 + 328);
            outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v151, v152, v5[12], BYTE2(v150) & 1);
            *(void *)(a1 + 320) = v151;
            *(void *)(a1 + 328) = v152;
            *(_WORD *)(a1 + 336) = v150;
            *(unsigned char *)(a1 + 338) = BYTE2(v150) & 1;
          }
          *(void *)(a1 + 344) = *(void *)(a2 + 344);
          uint64_t v153 = *(void *)(a2 + 352);
          *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
          *(void *)(a1 + 352) = v153;
          uint64_t v154 = *(void *)(a2 + 368);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
          *(void *)(a1 + 368) = v154;
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(void *)(a1 + 392) = *(void *)(a2 + 392);
          *(void *)(a1 + 400) = *(void *)(a2 + 400);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v95 = *v93;
          long long v96 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v96;
          _OWORD *v92 = v95;
          long long v97 = *(_OWORD *)(a2 + 344);
          long long v98 = *(_OWORD *)(a2 + 360);
          long long v99 = *(_OWORD *)(a2 + 392);
          *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
          *(_OWORD *)(a1 + 392) = v99;
          *(_OWORD *)(a1 + 344) = v97;
          *(_OWORD *)(a1 + 360) = v98;
        }
      }
      uint64_t v155 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
      uint64_t v156 = *(int *)(v155 + 52);
      uint64_t v157 = (void *)(a1 + v156);
      uint64_t v158 = (const void *)(a2 + v156);
      uint64_t v159 = type metadata accessor for LinkDestination.Configuration(0);
      uint64_t v160 = *(void *)(v159 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v157, v158, *(void *)(*(void *)(v161 - 8) + 64));
      }
      else
      {
        uint64_t v162 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v162 - 8) + 16))(v157, v158, v162);
        *((unsigned char *)v157 + *(int *)(v159 + 20)) = *((unsigned char *)v158 + *(int *)(v159 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
      }
      *(void *)(a1 + *(int *)(v155 + 56)) = *(void *)(a2 + *(int *)(v155 + 56));
      uint64_t v163 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)(a1 + *(int *)(v163 + 20)) = *(void *)(a2 + *(int *)(v163 + 20));
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
  uint64_t v7 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v8 = *(int *)(v7 + 52);
  int v9 = (void *)(a1 + v8);
  long long v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (EnumCaseMultiPayload == 1)
  {
    if (v13)
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
      *((unsigned char *)v9 + *(int *)(v11 + 20)) = *((unsigned char *)v10 + *(int *)(v11 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(void *)(a1 + *(int *)(v7 + 56)) = *(void *)(a2 + *(int *)(v7 + 56));
    long long v17 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
    uint64_t v18 = v17[5];
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    long long v21 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v21;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
    *(unsigned char *)(v19 + 48) = *(unsigned char *)(v20 + 48);
    uint64_t v22 = v17[6];
    uint64_t v23 = (_OWORD *)(a1 + v22);
    uint64_t v24 = (_OWORD *)(a2 + v22);
    long long v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    long long v26 = v24[3];
    v23[2] = v24[2];
    v23[3] = v26;
    *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
    uint64_t v27 = v17[8];
    uint64_t v28 = a1 + v27;
    uint64_t v29 = a2 + v27;
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
    *(void *)(a1 + v17[9]) = *(void *)(a2 + v17[9]);
    *(unsigned char *)(a1 + v17[10]) = *(unsigned char *)(a2 + v17[10]);
    *(unsigned char *)(a1 + v17[11]) = *(unsigned char *)(a2 + v17[11]);
    *(void *)(a1 + v17[12]) = *(void *)(a2 + v17[12]);
    *(_OWORD *)(a1 + v17[13]) = *(_OWORD *)(a2 + v17[13]);
    *(unsigned char *)(a1 + v17[14]) = *(unsigned char *)(a2 + v17[14]);
  }
  else
  {
    if (v13)
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v30 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 32))(v9, v10, v30);
      *((unsigned char *)v9 + *(int *)(v11 + 20)) = *((unsigned char *)v10 + *(int *)(v11 + 20));
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(void *)(a1 + *(int *)(v7 + 56)) = *(void *)(a2 + *(int *)(v7 + 56));
    uint64_t v31 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
    *(void *)(a1 + *(int *)(v31 + 20)) = *(void *)(a2 + *(int *)(v31 + 20));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>);
    type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
    EnumCaseMultiPayloaCGFloat d = swift_getEnumCaseMultiPayload();
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    *(void *)(a1 + 84) = *(void *)(a2 + 84);
    long long v6 = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v6;
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    uint64_t v7 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v8 = *(int *)(v7 + 52);
    int v9 = (void *)(a1 + v8);
    long long v10 = (const void *)(a2 + v8);
    uint64_t v11 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    if (EnumCaseMultiPayload == 1)
    {
      if (v13)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v16 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
        *((unsigned char *)v9 + *(int *)(v11 + 20)) = *((unsigned char *)v10 + *(int *)(v11 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(void *)(a1 + *(int *)(v7 + 56)) = *(void *)(a2 + *(int *)(v7 + 56));
      long long v17 = (int *)type metadata accessor for CodableAccessibilityAttachmentStorage.V3(0);
      uint64_t v18 = v17[5];
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      long long v21 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(_OWORD *)(v19 + 32) = *(_OWORD *)(v20 + 32);
      *(unsigned char *)(v19 + 48) = *(unsigned char *)(v20 + 48);
      uint64_t v22 = v17[6];
      uint64_t v23 = (_OWORD *)(a1 + v22);
      uint64_t v24 = (_OWORD *)(a2 + v22);
      long long v25 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v25;
      long long v26 = v24[3];
      v23[2] = v24[2];
      v23[3] = v26;
      *(void *)(a1 + v17[7]) = *(void *)(a2 + v17[7]);
      uint64_t v27 = v17[8];
      uint64_t v28 = a1 + v27;
      uint64_t v29 = a2 + v27;
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
      *(void *)(a1 + v17[9]) = *(void *)(a2 + v17[9]);
      *(unsigned char *)(a1 + v17[10]) = *(unsigned char *)(a2 + v17[10]);
      *(unsigned char *)(a1 + v17[11]) = *(unsigned char *)(a2 + v17[11]);
      *(void *)(a1 + v17[12]) = *(void *)(a2 + v17[12]);
      *(_OWORD *)(a1 + v17[13]) = *(_OWORD *)(a2 + v17[13]);
      *(unsigned char *)(a1 + v17[14]) = *(unsigned char *)(a2 + v17[14]);
    }
    else
    {
      if (v13)
      {
        type metadata accessor for LinkDestination.Configuration?(0);
        memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        uint64_t v30 = type metadata accessor for URL();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v30 - 8) + 32))(v9, v10, v30);
        *((unsigned char *)v9 + *(int *)(v11 + 20)) = *((unsigned char *)v10 + *(int *)(v11 + 20));
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(void *)(a1 + *(int *)(v7 + 56)) = *(void *)(a2 + *(int *)(v7 + 56));
      uint64_t v31 = type metadata accessor for CodableAccessibilityAttachmentStorage.V2(0);
      *(void *)(a1 + *(int *)(v31 + 20)) = *(void *)(a2 + *(int *)(v31 + 20));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24616E05C);
}

uint64_t sub_24616E05C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24616E0DC);
}

uint64_t sub_24616E0DC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for CodableAccessibilityAttachmentStorage()
{
  type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    unsigned __int8 v8 = *((unsigned char *)a2 + 34);
    int v9 = *((unsigned __int16 *)a2 + 16);
    swift_bridgeObjectRetain();
    if (v8 == 255)
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
    }
    else
    {
      unsigned int v11 = v9 & 0xFF00FFFF | (v8 << 16);
      uint64_t v12 = (void *)a2[2];
      uint64_t v13 = a2[3];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v12, v13, v11, BYTE2(v11) & 1);
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(_WORD *)(a1 + 32) = v11;
      *(unsigned char *)(a1 + 34) = BYTE2(v11) & 1;
    }
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    }
    else
    {
      int v14 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      uint64_t v15 = (void *)a2[5];
      uint64_t v16 = a2[6];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, *((_WORD *)a2 + 28), BYTE2(v14) & 1);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v16;
      *(_WORD *)(a1 + 56) = v14;
      *(unsigned char *)(a1 + 58) = BYTE2(v14) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    }
    else
    {
      int v17 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      uint64_t v18 = (void *)a2[8];
      uint64_t v19 = a2[9];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, *((_WORD *)a2 + 40), BYTE2(v17) & 1);
      *(void *)(a1 + 64) = v18;
      *(void *)(a1 + 72) = v19;
      *(_WORD *)(a1 + 80) = v17;
      *(unsigned char *)(a1 + 82) = BYTE2(v17) & 1;
    }
    *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(void *)(a1 + 112) = a2[14];
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 128) = a2[16];
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v20 = (_OWORD *)(a1 + 144);
    long long v21 = a2 + 18;
    uint64_t v22 = a2[29];
    if (v22 == 1)
    {
      memcpy(v20, v21, 0x108uLL);
    }
    else
    {
      if (*((unsigned __int8 *)a2 + 162) == 255)
      {
        *uint64_t v20 = *v21;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
      }
      else
      {
        int v23 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
        uint64_t v24 = (void *)a2[18];
        uint64_t v25 = a2[19];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *((_WORD *)a2 + 80), BYTE2(v23) & 1);
        *(void *)(a1 + 144) = v24;
        *(void *)(a1 + 152) = v25;
        *(_WORD *)(a1 + 160) = v23;
        *(unsigned char *)(a1 + 162) = BYTE2(v23) & 1;
        uint64_t v22 = a2[29];
      }
      *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
      *(void *)(a1 + 168) = a2[21];
      *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
      *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
      long long v26 = (_OWORD *)(a1 + 184);
      uint64_t v27 = a2 + 23;
      if (v22)
      {
        if (*((unsigned __int8 *)a2 + 202) == 255)
        {
          *long long v26 = *v27;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
        }
        else
        {
          int v31 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
          uint64_t v32 = (void *)a2[23];
          uint64_t v33 = a2[24];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v32, v33, *((_WORD *)a2 + 100), BYTE2(v31) & 1);
          *(void *)(a1 + 184) = v32;
          *(void *)(a1 + 192) = v33;
          *(_WORD *)(a1 + 200) = v31;
          *(unsigned char *)(a1 + 202) = BYTE2(v31) & 1;
        }
        if (*((unsigned __int8 *)a2 + 226) == 255)
        {
          *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
        }
        else
        {
          int v34 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
          uint64_t v35 = (void *)a2[26];
          uint64_t v36 = a2[27];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v35, v36, *((_WORD *)a2 + 112), BYTE2(v34) & 1);
          *(void *)(a1 + 208) = v35;
          *(void *)(a1 + 216) = v36;
          *(_WORD *)(a1 + 224) = v34;
          *(unsigned char *)(a1 + 226) = BYTE2(v34) & 1;
        }
        uint64_t v37 = a2[30];
        *(void *)(a1 + 232) = a2[29];
        *(void *)(a1 + 240) = v37;
        *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
        *(void *)(a1 + 256) = a2[32];
        *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
        uint64_t v38 = a2[35];
        *(void *)(a1 + 272) = a2[34];
        *(void *)(a1 + 280) = v38;
        *(void *)(a1 + 288) = a2[36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v28 = *(_OWORD *)(a2 + 33);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
        *(_OWORD *)(a1 + 264) = v28;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
        long long v29 = *(_OWORD *)(a2 + 25);
        *long long v26 = *v27;
        *(_OWORD *)(a1 + 200) = v29;
        long long v30 = *(_OWORD *)(a2 + 29);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
        *(_OWORD *)(a1 + 232) = v30;
      }
      uint64_t v39 = (_OWORD *)(a1 + 296);
      long long v40 = a2 + 37;
      if (a2[43])
      {
        long long v41 = a2 + 39;
        if (*((unsigned __int8 *)a2 + 314) == 255)
        {
          _OWORD *v39 = *v40;
          *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
        }
        else
        {
          int v45 = (unsigned __int16)*v41 | (*((unsigned __int8 *)a2 + 314) << 16);
          long long v46 = (void *)a2[37];
          uint64_t v47 = a2[38];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, *v41, BYTE2(v45) & 1);
          *(void *)(a1 + 296) = v46;
          *(void *)(a1 + 304) = v47;
          *(_WORD *)(a1 + 312) = v45;
          *(unsigned char *)(a1 + 314) = BYTE2(v45) & 1;
        }
        if (*((unsigned __int8 *)a2 + 338) == 255)
        {
          *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
        }
        else
        {
          int v48 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
          int v49 = (void *)a2[40];
          uint64_t v50 = a2[41];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v49, v50, *((_WORD *)a2 + 168), BYTE2(v48) & 1);
          *(void *)(a1 + 320) = v49;
          *(void *)(a1 + 328) = v50;
          *(_WORD *)(a1 + 336) = v48;
          *(unsigned char *)(a1 + 338) = BYTE2(v48) & 1;
        }
        uint64_t v51 = a2[44];
        *(void *)(a1 + 344) = a2[43];
        *(void *)(a1 + 352) = v51;
        *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
        *(void *)(a1 + 368) = a2[46];
        *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
        uint64_t v52 = a2[49];
        *(void *)(a1 + 384) = a2[48];
        *(void *)(a1 + 392) = v52;
        *(void *)(a1 + 400) = a2[50];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v42 = *(_OWORD *)(a2 + 47);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
        *(_OWORD *)(a1 + 376) = v42;
        *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
        long long v43 = *(_OWORD *)(a2 + 39);
        _OWORD *v39 = *v40;
        *(_OWORD *)(a1 + 312) = v43;
        long long v44 = *(_OWORD *)(a2 + 43);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
        *(_OWORD *)(a1 + 344) = v44;
      }
    }
    uint64_t v53 = *(int *)(a3 + 52);
    uint64_t v54 = (void *)(a1 + v53);
    long long v55 = (char *)a2 + v53;
    uint64_t v56 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      uint64_t v59 = type metadata accessor for URL();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v54, v55, v59);
      *((unsigned char *)v54 + *(int *)(v56 + 20)) = v55[*(int *)(v56 + 20)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    *(void *)(a1 + *(int *)(a3 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 56));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 34) != 255)
  {
    int v4 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 58) != 255)
  {
    int v5 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v5, BYTE2(v5) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 82) != 255)
  {
    int v6 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v6, BYTE2(v6) & 1);
  }
  uint64_t v7 = *(void *)(a1 + 232);
  if (v7 != 1)
  {
    if (*(unsigned __int8 *)(a1 + 162) != 255)
    {
      int v8 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v8, BYTE2(v8) & 1);
    }
    if (v7)
    {
      if (*(unsigned __int8 *)(a1 + 202) != 255)
      {
        int v9 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v9, BYTE2(v9) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 226) != 255)
      {
        int v10 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v10, BYTE2(v10) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 344))
    {
      if (*(unsigned __int8 *)(a1 + 314) != 255)
      {
        int v11 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v11, BYTE2(v11) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 338) != 255)
      {
        int v12 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v12, BYTE2(v12) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = a1 + *(int *)(a2 + 52);
  uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 34);
  int v8 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  }
  else
  {
    unsigned int v9 = v8 & 0xFF00FFFF | (v7 << 16);
    int v10 = *(void **)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    *(_WORD *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 34) = BYTE2(v9) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 58) == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  }
  else
  {
    int v12 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
    uint64_t v13 = *(void **)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 56), BYTE2(v12) & 1);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(_WORD *)(a1 + 56) = v12;
    *(unsigned char *)(a1 + 58) = BYTE2(v12) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 82) == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  }
  else
  {
    int v15 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
    uint64_t v16 = *(void **)(a2 + 64);
    uint64_t v17 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, *(_WORD *)(a2 + 80), BYTE2(v15) & 1);
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = v17;
    *(_WORD *)(a1 + 80) = v15;
    *(unsigned char *)(a1 + 82) = BYTE2(v15) & 1;
  }
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  uint64_t v18 = (_OWORD *)(a1 + 144);
  uint64_t v19 = (_OWORD *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 232);
  if (v20 == 1)
  {
    memcpy(v18, v19, 0x108uLL);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 162) == 255)
    {
      *uint64_t v18 = *v19;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    }
    else
    {
      int v21 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
      uint64_t v22 = *(void **)(a2 + 144);
      uint64_t v23 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 160), BYTE2(v21) & 1);
      *(void *)(a1 + 144) = v22;
      *(void *)(a1 + 152) = v23;
      *(_WORD *)(a1 + 160) = v21;
      *(unsigned char *)(a1 + 162) = BYTE2(v21) & 1;
      uint64_t v20 = *(void *)(a2 + 232);
    }
    *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
    uint64_t v24 = (_OWORD *)(a1 + 184);
    uint64_t v25 = (_OWORD *)(a2 + 184);
    if (v20)
    {
      if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        _OWORD *v24 = *v25;
        *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      }
      else
      {
        int v29 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
        long long v30 = *(void **)(a2 + 184);
        uint64_t v31 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v30, v31, *(_WORD *)(a2 + 200), BYTE2(v29) & 1);
        *(void *)(a1 + 184) = v30;
        *(void *)(a1 + 192) = v31;
        *(_WORD *)(a1 + 200) = v29;
        *(unsigned char *)(a1 + 202) = BYTE2(v29) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      }
      else
      {
        int v32 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
        uint64_t v33 = *(void **)(a2 + 208);
        uint64_t v34 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v33, v34, *(_WORD *)(a2 + 224), BYTE2(v32) & 1);
        *(void *)(a1 + 208) = v33;
        *(void *)(a1 + 216) = v34;
        *(_WORD *)(a1 + 224) = v32;
        *(unsigned char *)(a1 + 226) = BYTE2(v32) & 1;
      }
      uint64_t v35 = *(void *)(a2 + 240);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v35;
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      uint64_t v36 = *(void *)(a2 + 280);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v36;
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v26 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v26;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      long long v27 = *(_OWORD *)(a2 + 200);
      _OWORD *v24 = *v25;
      *(_OWORD *)(a1 + 200) = v27;
      long long v28 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v28;
    }
    uint64_t v37 = (_OWORD *)(a1 + 296);
    uint64_t v38 = (_OWORD *)(a2 + 296);
    if (*(void *)(a2 + 344))
    {
      uint64_t v39 = (_WORD *)(a2 + 312);
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        *uint64_t v37 = *v38;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      }
      else
      {
        int v43 = (unsigned __int16)*v39 | (*(unsigned __int8 *)(a2 + 314) << 16);
        long long v44 = *(void **)(a2 + 296);
        uint64_t v45 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *v39, BYTE2(v43) & 1);
        *(void *)(a1 + 296) = v44;
        *(void *)(a1 + 304) = v45;
        *(_WORD *)(a1 + 312) = v43;
        *(unsigned char *)(a1 + 314) = BYTE2(v43) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 338) == 255)
      {
        *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
      }
      else
      {
        int v46 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
        uint64_t v47 = *(void **)(a2 + 320);
        uint64_t v48 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v47, v48, *(_WORD *)(a2 + 336), BYTE2(v46) & 1);
        *(void *)(a1 + 320) = v47;
        *(void *)(a1 + 328) = v48;
        *(_WORD *)(a1 + 336) = v46;
        *(unsigned char *)(a1 + 338) = BYTE2(v46) & 1;
      }
      uint64_t v49 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v49;
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
      uint64_t v50 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = v50;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v40 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v40;
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      long long v41 = *(_OWORD *)(a2 + 312);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 312) = v41;
      long long v42 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v42;
    }
  }
  uint64_t v51 = *(int *)(a3 + 52);
  uint64_t v52 = (void *)(a1 + v51);
  uint64_t v53 = (const void *)(a2 + v51);
  uint64_t v54 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v55 = *(void *)(v54 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
  }
  else
  {
    uint64_t v57 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v57 - 8) + 16))(v52, v53, v57);
    *((unsigned char *)v52 + *(int *)(v54 + 20)) = *((unsigned char *)v53 + *(int *)(v54 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 16);
  unsigned __int8 v7 = (long long *)(a2 + 16);
  int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255)
  {
    if (BYTE2(v8) == 255)
    {
      long long v9 = *v7;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      *uint64_t v6 = v9;
    }
    else
    {
      uint64_t v11 = *(void **)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    }
  }
  else if (BYTE2(v8) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v10 = *(_DWORD *)(a2 + 31);
    *uint64_t v6 = *v7;
    *(_DWORD *)(a1 + 31) = v10;
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
    int v15 = *(void **)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    char v17 = *(unsigned char *)(a1 + 34);
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    __int16 v18 = *(_WORD *)(a1 + 32);
    *(_WORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v18, v17);
  }
  uint64_t v19 = (long long *)(a1 + 40);
  uint64_t v20 = (long long *)(a2 + 40);
  int v21 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
    if (BYTE2(v21) == 255)
    {
      long long v22 = *v20;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      *uint64_t v19 = v22;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 40);
      uint64_t v25 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = v25;
      *(_WORD *)(a1 + 56) = v21;
      *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    }
  }
  else if (BYTE2(v21) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v23 = *(_DWORD *)(a2 + 55);
    *uint64_t v19 = *v20;
    *(_DWORD *)(a1 + 55) = v23;
  }
  else
  {
    long long v26 = *(void **)(a2 + 40);
    uint64_t v27 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v26, v27, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
    long long v28 = *(void **)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 48);
    char v30 = *(unsigned char *)(a1 + 58);
    *(void *)(a1 + 40) = v26;
    *(void *)(a1 + 48) = v27;
    __int16 v31 = *(_WORD *)(a1 + 56);
    *(_WORD *)(a1 + 56) = v21;
    *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, v31, v30);
  }
  int v32 = (long long *)(a1 + 64);
  uint64_t v33 = (long long *)(a2 + 64);
  int v34 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
    if (BYTE2(v34) == 255)
    {
      long long v35 = *v33;
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      *int v32 = v35;
    }
    else
    {
      uint64_t v37 = *(void **)(a2 + 64);
      uint64_t v38 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
      *(void *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = v38;
      *(_WORD *)(a1 + 80) = v34;
      *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    }
  }
  else if (BYTE2(v34) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v36 = *(_DWORD *)(a2 + 79);
    *int v32 = *v33;
    *(_DWORD *)(a1 + 79) = v36;
  }
  else
  {
    uint64_t v39 = *(void **)(a2 + 64);
    uint64_t v40 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
    long long v41 = *(void **)(a1 + 64);
    uint64_t v42 = *(void *)(a1 + 72);
    char v43 = *(unsigned char *)(a1 + 82);
    *(void *)(a1 + 64) = v39;
    *(void *)(a1 + 72) = v40;
    __int16 v44 = *(_WORD *)(a1 + 80);
    *(_WORD *)(a1 + 80) = v34;
    *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v41, v42, v44, v43);
  }
  uint64_t v45 = (_WORD *)(a2 + 312);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v46 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v46;
  uint64_t v47 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v47;
  uint64_t v48 = (long long *)(a1 + 144);
  uint64_t v49 = (long long *)(a2 + 144);
  uint64_t v50 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232) == 1)
  {
    if (v50 != 1)
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        long long v51 = *v49;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        long long *v48 = v51;
      }
      else
      {
        int v54 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        uint64_t v55 = *(void **)(a2 + 144);
        uint64_t v56 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *(_WORD *)(a2 + 160), BYTE2(v54) & 1);
        *(void *)(a1 + 144) = v55;
        *(void *)(a1 + 152) = v56;
        *(_WORD *)(a1 + 160) = v54;
        *(unsigned char *)(a1 + 162) = BYTE2(v54) & 1;
      }
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
      uint64_t v57 = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 168) = v57;
      *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
      *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
      uint64_t v58 = (_OWORD *)(a1 + 184);
      uint64_t v59 = (long long *)(a2 + 184);
      if (*(void *)(a2 + 232))
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v60 = *v59;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          *uint64_t v58 = v60;
        }
        else
        {
          int v67 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          uint64_t v68 = *(void **)(a2 + 184);
          uint64_t v69 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v68, v69, *(_WORD *)(a2 + 200), BYTE2(v67) & 1);
          *(void *)(a1 + 184) = v68;
          *(void *)(a1 + 192) = v69;
          *(_WORD *)(a1 + 200) = v67;
          *(unsigned char *)(a1 + 202) = BYTE2(v67) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v70 = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *(_OWORD *)(a1 + 208) = v70;
        }
        else
        {
          int v71 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          uint64_t v72 = *(void **)(a2 + 208);
          uint64_t v73 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v72, v73, *(_WORD *)(a2 + 224), BYTE2(v71) & 1);
          *(void *)(a1 + 208) = v72;
          *(void *)(a1 + 216) = v73;
          *(_WORD *)(a1 + 224) = v71;
          *(unsigned char *)(a1 + 226) = BYTE2(v71) & 1;
        }
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        uint64_t v74 = *(void *)(a2 + 240);
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 240) = v74;
        uint64_t v75 = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 256) = v75;
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v62 = *v59;
        long long v63 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
        *(_OWORD *)(a1 + 216) = v63;
        *uint64_t v58 = v62;
        long long v64 = *(_OWORD *)(a2 + 232);
        long long v65 = *(_OWORD *)(a2 + 248);
        long long v66 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v66;
        *(_OWORD *)(a1 + 232) = v64;
        *(_OWORD *)(a1 + 248) = v65;
      }
      uint64_t v76 = (_OWORD *)(a1 + 296);
      uint64_t v77 = (long long *)(a2 + 296);
      if (!*(void *)(a2 + 344))
      {
        long long v79 = *v77;
        long long v80 = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 328) = v80;
        *uint64_t v76 = v79;
        long long v81 = *(_OWORD *)(a2 + 344);
        long long v82 = *(_OWORD *)(a2 + 360);
        long long v83 = *(_OWORD *)(a2 + 392);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 392) = v83;
        *(_OWORD *)(a1 + 344) = v81;
        *(_OWORD *)(a1 + 360) = v82;
        goto LABEL_106;
      }
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        long long v78 = *v77;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        *uint64_t v76 = v78;
LABEL_92:
        if (*(unsigned __int8 *)(a2 + 338) == 255)
        {
          long long v161 = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          *(_OWORD *)(a1 + 320) = v161;
        }
        else
        {
          int v162 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
          uint64_t v163 = *(void **)(a2 + 320);
          uint64_t v164 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v163, v164, *(_WORD *)(a2 + 336), BYTE2(v162) & 1);
          *(void *)(a1 + 320) = v163;
          *(void *)(a1 + 328) = v164;
          *(_WORD *)(a1 + 336) = v162;
          *(unsigned char *)(a1 + 338) = BYTE2(v162) & 1;
        }
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        uint64_t v165 = *(void *)(a2 + 352);
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 352) = v165;
        uint64_t v166 = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        *(void *)(a1 + 368) = v166;
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = *(void *)(a2 + 392);
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
      int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
      goto LABEL_91;
    }
LABEL_28:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_106;
  }
  if (v50 == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_28;
  }
  int v52 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (*(unsigned __int8 *)(a1 + 162) == 255)
  {
    if (BYTE2(v52) == 255)
    {
      long long v53 = *v49;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      long long *v48 = v53;
    }
    else
    {
      long long v85 = *(void **)(a2 + 144);
      uint64_t v86 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v85, v86, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
      *(void *)(a1 + 144) = v85;
      *(void *)(a1 + 152) = v86;
      *(_WORD *)(a1 + 160) = v52;
      *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    }
  }
  else if (BYTE2(v52) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v61 = *(_DWORD *)(a2 + 159);
    long long *v48 = *v49;
    *(_DWORD *)(a1 + 159) = v61;
  }
  else
  {
    int v87 = *(void **)(a2 + 144);
    uint64_t v88 = *(void *)(a2 + 152);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v87, v88, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
    uint64_t v89 = *(void **)(a1 + 144);
    uint64_t v90 = *(void *)(a1 + 152);
    char v91 = *(unsigned char *)(a1 + 162);
    *(void *)(a1 + 144) = v87;
    *(void *)(a1 + 152) = v88;
    __int16 v92 = *(_WORD *)(a1 + 160);
    *(_WORD *)(a1 + 160) = v52;
    *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v89, v90, v92, v91);
  }
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  uint64_t v93 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v93;
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  long long v94 = (long long *)(a1 + 184);
  long long v95 = (long long *)(a2 + 184);
  uint64_t v96 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v96)
    {
      int v97 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      if (*(unsigned __int8 *)(a1 + 202) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v98 = *v95;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          long long *v94 = v98;
        }
        else
        {
          uint64_t v120 = *(void **)(a2 + 184);
          uint64_t v121 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v120, v121, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
          *(void *)(a1 + 184) = v120;
          *(void *)(a1 + 192) = v121;
          *(_WORD *)(a1 + 200) = v97;
          *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v105 = *(_DWORD *)(a2 + 199);
        long long *v94 = *v95;
        *(_DWORD *)(a1 + 199) = v105;
      }
      else
      {
        uint64_t v122 = *(void **)(a2 + 184);
        uint64_t v123 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v122, v123, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
        uint64_t v124 = *(void **)(a1 + 184);
        uint64_t v125 = *(void *)(a1 + 192);
        char v126 = *(unsigned char *)(a1 + 202);
        *(void *)(a1 + 184) = v122;
        *(void *)(a1 + 192) = v123;
        __int16 v127 = *(_WORD *)(a1 + 200);
        *(_WORD *)(a1 + 200) = v97;
        *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v124, v125, v127, v126);
      }
      uint64_t v128 = (long long *)(a1 + 208);
      uint64_t v129 = (long long *)(a2 + 208);
      int v130 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      if (*(unsigned __int8 *)(a1 + 226) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v131 = *v129;
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *uint64_t v128 = v131;
        }
        else
        {
          __int16 v133 = *(void **)(a2 + 208);
          uint64_t v134 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v133, v134, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
          *(void *)(a1 + 208) = v133;
          *(void *)(a1 + 216) = v134;
          *(_WORD *)(a1 + 224) = v130;
          *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v132 = *(_DWORD *)(a2 + 223);
        *uint64_t v128 = *v129;
        *(_DWORD *)(a1 + 223) = v132;
      }
      else
      {
        char v135 = *(void **)(a2 + 208);
        uint64_t v136 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v135, v136, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
        uint64_t v137 = *(void **)(a1 + 208);
        uint64_t v138 = *(void *)(a1 + 216);
        char v139 = *(unsigned char *)(a1 + 226);
        *(void *)(a1 + 208) = v135;
        *(void *)(a1 + 216) = v136;
        __int16 v140 = *(_WORD *)(a1 + 224);
        *(_WORD *)(a1 + 224) = v130;
        *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v137, v138, v140, v139);
      }
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v141 = *(void *)(a2 + 240);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 240) = v141;
      LOBYTE(v141) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = v141;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
      long long v101 = *(_OWORD *)(a2 + 200);
      long long v100 = *(_OWORD *)(a2 + 216);
      long long *v94 = *v95;
      *(_OWORD *)(a1 + 200) = v101;
      *(_OWORD *)(a1 + 216) = v100;
      long long v102 = *(_OWORD *)(a2 + 280);
      long long v104 = *(_OWORD *)(a2 + 232);
      long long v103 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v102;
      *(_OWORD *)(a1 + 232) = v104;
      *(_OWORD *)(a1 + 248) = v103;
    }
  }
  else if (v96)
  {
    if (*(unsigned __int8 *)(a2 + 202) == 255)
    {
      long long v99 = *v95;
      *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      long long *v94 = v99;
    }
    else
    {
      int v111 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      uint64_t v112 = *(void **)(a2 + 184);
      uint64_t v113 = *(void *)(a2 + 192);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v112, v113, *(_WORD *)(a2 + 200), BYTE2(v111) & 1);
      *(void *)(a1 + 184) = v112;
      *(void *)(a1 + 192) = v113;
      *(_WORD *)(a1 + 200) = v111;
      *(unsigned char *)(a1 + 202) = BYTE2(v111) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 226) == 255)
    {
      long long v114 = *(_OWORD *)(a2 + 208);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      *(_OWORD *)(a1 + 208) = v114;
    }
    else
    {
      int v115 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      uint64_t v116 = *(void **)(a2 + 208);
      uint64_t v117 = *(void *)(a2 + 216);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v116, v117, *(_WORD *)(a2 + 224), BYTE2(v115) & 1);
      *(void *)(a1 + 208) = v116;
      *(void *)(a1 + 216) = v117;
      *(_WORD *)(a1 + 224) = v115;
      *(unsigned char *)(a1 + 226) = BYTE2(v115) & 1;
    }
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    uint64_t v118 = *(void *)(a2 + 240);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(void *)(a1 + 240) = v118;
    uint64_t v119 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v119;
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v106 = *v95;
    long long v107 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v107;
    long long *v94 = v106;
    long long v108 = *(_OWORD *)(a2 + 232);
    long long v109 = *(_OWORD *)(a2 + 248);
    long long v110 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v110;
    *(_OWORD *)(a1 + 232) = v108;
    *(_OWORD *)(a1 + 248) = v109;
  }
  long long v142 = (long long *)(a1 + 296);
  uint64_t v143 = (long long *)(a2 + 296);
  uint64_t v144 = *(void *)(a2 + 344);
  if (!*(void *)(a1 + 344))
  {
    if (!v144)
    {
      long long v154 = *v143;
      long long v155 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v155;
      long long *v142 = v154;
      long long v156 = *(_OWORD *)(a2 + 344);
      long long v157 = *(_OWORD *)(a2 + 360);
      long long v158 = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 392) = v158;
      *(_OWORD *)(a1 + 344) = v156;
      *(_OWORD *)(a1 + 360) = v157;
      goto LABEL_106;
    }
    if (*(unsigned __int8 *)(a2 + 314) == 255)
    {
      long long v147 = *v143;
      *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      long long *v142 = v147;
      goto LABEL_92;
    }
    int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
LABEL_91:
    uint64_t v159 = *(void **)(a2 + 296);
    uint64_t v160 = *(void *)(a2 + 304);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v159, v160, v84, BYTE2(v84) & 1);
    *(void *)(a1 + 296) = v159;
    *(void *)(a1 + 304) = v160;
    *(_WORD *)(a1 + 312) = v84;
    *(unsigned char *)(a1 + 314) = BYTE2(v84) & 1;
    goto LABEL_92;
  }
  if (v144)
  {
    int v145 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
    if (*(unsigned __int8 *)(a1 + 314) == 255)
    {
      if (BYTE2(v145) == 255)
      {
        long long v146 = *v143;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        long long *v142 = v146;
      }
      else
      {
        uint64_t v167 = *(void **)(a2 + 296);
        uint64_t v168 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v167, v168, *v45, BYTE2(v145) & 1);
        *(void *)(a1 + 296) = v167;
        *(void *)(a1 + 304) = v168;
        *(_WORD *)(a1 + 312) = v145;
        *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      }
    }
    else if (BYTE2(v145) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v153 = *(_DWORD *)(a2 + 311);
      long long *v142 = *v143;
      *(_DWORD *)(a1 + 311) = v153;
    }
    else
    {
      uint64_t v169 = *(void **)(a2 + 296);
      uint64_t v170 = *(void *)(a2 + 304);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v169, v170, *v45, BYTE2(v145) & 1);
      uint64_t v171 = *(void **)(a1 + 296);
      uint64_t v172 = *(void *)(a1 + 304);
      char v173 = *(unsigned char *)(a1 + 314);
      *(void *)(a1 + 296) = v169;
      *(void *)(a1 + 304) = v170;
      __int16 v174 = *(_WORD *)(a1 + 312);
      *(_WORD *)(a1 + 312) = v145;
      *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v171, v172, v174, v173);
    }
    uint64_t v175 = (long long *)(a1 + 320);
    uint64_t v176 = (long long *)(a2 + 320);
    int v177 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (*(unsigned __int8 *)(a1 + 338) == 255)
    {
      if (BYTE2(v177) == 255)
      {
        long long v178 = *v176;
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        long long *v175 = v178;
      }
      else
      {
        uint64_t v180 = *(void **)(a2 + 320);
        uint64_t v181 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v180, v181, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
        *(void *)(a1 + 320) = v180;
        *(void *)(a1 + 328) = v181;
        *(_WORD *)(a1 + 336) = v177;
        *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      }
    }
    else if (BYTE2(v177) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v179 = *(_DWORD *)(a2 + 335);
      long long *v175 = *v176;
      *(_DWORD *)(a1 + 335) = v179;
    }
    else
    {
      uint64_t v182 = *(void **)(a2 + 320);
      uint64_t v183 = *(void *)(a2 + 328);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v182, v183, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
      unint64_t v184 = *(void **)(a1 + 320);
      uint64_t v185 = *(void *)(a1 + 328);
      char v186 = *(unsigned char *)(a1 + 338);
      *(void *)(a1 + 320) = v182;
      *(void *)(a1 + 328) = v183;
      __int16 v187 = *(_WORD *)(a1 + 336);
      *(_WORD *)(a1 + 336) = v177;
      *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v184, v185, v187, v186);
    }
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v188 = *(void *)(a2 + 352);
    *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
    *(void *)(a1 + 352) = v188;
    LOBYTE(v188) = *(unsigned char *)(a2 + 376);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 376) = v188;
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    long long v149 = *(_OWORD *)(a2 + 312);
    long long v148 = *(_OWORD *)(a2 + 328);
    long long *v142 = *v143;
    *(_OWORD *)(a1 + 312) = v149;
    *(_OWORD *)(a1 + 328) = v148;
    long long v150 = *(_OWORD *)(a2 + 392);
    long long v152 = *(_OWORD *)(a2 + 344);
    long long v151 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v150;
    *(_OWORD *)(a1 + 344) = v152;
    *(_OWORD *)(a1 + 360) = v151;
  }
LABEL_106:
  uint64_t v189 = *(int *)(a3 + 52);
  uint64_t v190 = (unsigned char *)(a1 + v189);
  uint64_t v191 = (unsigned char *)(a2 + v189);
  uint64_t v192 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v193 = *(void *)(v192 - 8);
  uint64_t v194 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v193 + 48);
  int v195 = v194(v190, 1, v192);
  int v196 = v194(v191, 1, v192);
  if (!v195)
  {
    if (!v196)
    {
      uint64_t v200 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v200 - 8) + 24))(v190, v191, v200);
      v190[*(int *)(v192 + 20)] = v191[*(int *)(v192 + 20)];
      goto LABEL_112;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v190, type metadata accessor for LinkDestination.Configuration);
    goto LABEL_111;
  }
  if (v196)
  {
LABEL_111:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v190, v191, *(void *)(*(void *)(v198 - 8) + 64));
    goto LABEL_112;
  }
  uint64_t v197 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v197 - 8) + 16))(v190, v191, v197);
  v190[*(int *)(v192 + 20)] = v191[*(int *)(v192 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
LABEL_112:
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of CodableAccessibilityDataSeriesConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
  uint64_t v8 = *(int *)(a3 + 52);
  long long v9 = (void *)(a1 + v8);
  int v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    *((unsigned char *)v9 + *(int *)(v11 + 20)) = *((unsigned char *)v10 + *(int *)(v11 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  long long v7 = (_OWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255) {
    goto LABEL_4;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (HIWORD(v8) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v7;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    goto LABEL_6;
  }
  int v9 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
  int v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *v7;
  *(_WORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
LABEL_6:
  uint64_t v12 = (_OWORD *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 40) = *v12;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    goto LABEL_11;
  }
  unsigned int v13 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (HIWORD(v13) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_9;
  }
  int v14 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
  int v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *v12;
  *(_WORD *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 58) = BYTE2(v13) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v14, BYTE2(v14) & 1);
LABEL_11:
  char v17 = (_OWORD *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v17;
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    goto LABEL_16;
  }
  unsigned int v18 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (HIWORD(v18) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_14;
  }
  int v19 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
  uint64_t v20 = *(void **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v17;
  *(_WORD *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 82) = BYTE2(v18) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, v19, BYTE2(v19) & 1);
LABEL_16:
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  long long v22 = (_OWORD *)(a2 + 144);
  if (*(void *)(a1 + 232) == 1)
  {
LABEL_19:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_20;
  }
  if (*(void *)(a2 + 232) == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(a1 + 162) == 255) {
    goto LABEL_30;
  }
  unsigned int v34 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (HIWORD(v34) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_30:
    *(_OWORD *)(a1 + 144) = *v22;
    *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    goto LABEL_33;
  }
  int v36 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  uint64_t v37 = *(void **)(a1 + 144);
  uint64_t v38 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *v22;
  *(_WORD *)(a1 + 160) = v34;
  *(unsigned char *)(a1 + 162) = BYTE2(v34) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, v36, BYTE2(v36) & 1);
LABEL_33:
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  uint64_t v39 = (_OWORD *)(a1 + 184);
  uint64_t v40 = (_OWORD *)(a2 + 184);
  if (!*(void *)(a1 + 232))
  {
LABEL_40:
    long long v42 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v42;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    long long v43 = *(_OWORD *)(a2 + 200);
    _OWORD *v39 = *v40;
    *(_OWORD *)(a1 + 200) = v43;
    long long v44 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v44;
    goto LABEL_48;
  }
  if (!*(void *)(a2 + 232))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
    goto LABEL_40;
  }
  if (*(unsigned __int8 *)(a1 + 202) == 255)
  {
LABEL_38:
    _OWORD *v39 = *v40;
    *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
    goto LABEL_42;
  }
  unsigned int v41 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
  if (HIWORD(v41) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_38;
  }
  int v45 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  uint64_t v46 = *(void **)(a1 + 184);
  uint64_t v47 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *v40;
  *(_WORD *)(a1 + 200) = v41;
  *(unsigned char *)(a1 + 202) = BYTE2(v41) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, v45, BYTE2(v45) & 1);
LABEL_42:
  uint64_t v48 = (_OWORD *)(a2 + 208);
  if (*(unsigned __int8 *)(a1 + 226) != 255)
  {
    unsigned int v49 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
    if (HIWORD(v49) <= 0xFEu)
    {
      int v50 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
      long long v51 = *(void **)(a1 + 208);
      uint64_t v52 = *(void *)(a1 + 216);
      *(_OWORD *)(a1 + 208) = *v48;
      *(_WORD *)(a1 + 224) = v49;
      *(unsigned char *)(a1 + 226) = BYTE2(v49) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v51, v52, v50, BYTE2(v50) & 1);
      goto LABEL_47;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 208) = *v48;
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
LABEL_47:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
LABEL_48:
  long long v53 = (_OWORD *)(a2 + 296);
  int v54 = (_OWORD *)(a1 + 296);
  if (!*(void *)(a1 + 344))
  {
LABEL_55:
    long long v56 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v56;
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    long long v57 = *(_OWORD *)(a2 + 312);
    *int v54 = *v53;
    *(_OWORD *)(a1 + 312) = v57;
    long long v58 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v58;
    goto LABEL_20;
  }
  if (!*(void *)(a2 + 344))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    goto LABEL_55;
  }
  if (*(unsigned __int8 *)(a1 + 314) == 255)
  {
LABEL_53:
    *int v54 = *v53;
    *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
    goto LABEL_57;
  }
  unsigned int v55 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
  if (HIWORD(v55) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_53;
  }
  int v59 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
  long long v60 = *(void **)(a1 + 296);
  uint64_t v61 = *(void *)(a1 + 304);
  *int v54 = *v53;
  *(_WORD *)(a1 + 312) = v55;
  *(unsigned char *)(a1 + 314) = BYTE2(v55) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v60, v61, v59, BYTE2(v59) & 1);
LABEL_57:
  long long v62 = (_OWORD *)(a2 + 320);
  if (*(unsigned __int8 *)(a1 + 338) != 255)
  {
    unsigned int v63 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (HIWORD(v63) <= 0xFEu)
    {
      int v64 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
      long long v65 = *(void **)(a1 + 320);
      uint64_t v66 = *(void *)(a1 + 328);
      *(_OWORD *)(a1 + 320) = *v62;
      *(_WORD *)(a1 + 336) = v63;
      *(unsigned char *)(a1 + 338) = BYTE2(v63) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v65, v66, v64, BYTE2(v64) & 1);
      goto LABEL_62;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 320) = *v62;
  *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
LABEL_62:
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v23 = *(int *)(a3 + 52);
  uint64_t v24 = (unsigned char *)(a1 + v23);
  uint64_t v25 = (unsigned char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v27 = *(void *)(v26 - 8);
  long long v28 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v35 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 40))(v24, v25, v35);
      v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      goto LABEL_26;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v24, type metadata accessor for LinkDestination.Configuration);
    goto LABEL_25;
  }
  if (v30)
  {
LABEL_25:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_26;
  }
  uint64_t v31 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v24, v25, v31);
  v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_26:
  *(void *)(a1 + *(int *)(a3 + 56)) = *(void *)(a2 + *(int *)(a3 + 56));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2461709FC);
}

uint64_t sub_2461709FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 52);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.VBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246170ACC);
}

uint64_t sub_246170ACC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for CodableAccessibilityAttachmentStorage.VBase()
{
  type metadata accessor for LinkDestination.Configuration?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for CodableAccessibilityAttachmentStorage.V2(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    unint64_t v4 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = a2[1];
    void *v4 = *a2;
    v4[1] = v7;
    unsigned __int8 v8 = *((unsigned char *)a2 + 34);
    int v9 = *((unsigned __int16 *)a2 + 16);
    swift_bridgeObjectRetain();
    if (v8 == 255)
    {
      *((_OWORD *)v4 + 1) = *((_OWORD *)a2 + 1);
      *(_DWORD *)((char *)v4 + 31) = *(_DWORD *)((char *)a2 + 31);
    }
    else
    {
      unsigned int v11 = v9 & 0xFF00FFFF | (v8 << 16);
      uint64_t v12 = (void *)a2[2];
      uint64_t v13 = a2[3];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v12, v13, v11, BYTE2(v11) & 1);
      _OWORD v4[2] = v12;
      v4[3] = v13;
      *((_WORD *)v4 + 16) = v11;
      *((unsigned char *)v4 + 34) = BYTE2(v11) & 1;
    }
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      *(_OWORD *)(v4 + 5) = *(_OWORD *)(a2 + 5);
      *(_DWORD *)((char *)v4 + 55) = *(_DWORD *)((char *)a2 + 55);
    }
    else
    {
      int v14 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      int v15 = (void *)a2[5];
      uint64_t v16 = a2[6];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, *((_WORD *)a2 + 28), BYTE2(v14) & 1);
      void v4[5] = v15;
      v4[6] = v16;
      *((_WORD *)v4 + 28) = v14;
      *((unsigned char *)v4 + 58) = BYTE2(v14) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      *((_OWORD *)v4 + 4) = *((_OWORD *)a2 + 4);
      *(_DWORD *)((char *)v4 + 79) = *(_DWORD *)((char *)a2 + 79);
    }
    else
    {
      int v17 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      unsigned int v18 = (void *)a2[8];
      uint64_t v19 = a2[9];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, *((_WORD *)a2 + 40), BYTE2(v17) & 1);
      v4[8] = v18;
      v4[9] = v19;
      *((_WORD *)v4 + 40) = v17;
      *((unsigned char *)v4 + 82) = BYTE2(v17) & 1;
    }
    *(void *)((char *)v4 + 84) = *(uint64_t *)((char *)a2 + 84);
    *((_OWORD *)v4 + 6) = *((_OWORD *)a2 + 6);
    v4[14] = a2[14];
    *((unsigned char *)v4 + 120) = *((unsigned char *)a2 + 120);
    v4[16] = a2[16];
    *((unsigned char *)v4 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v20 = v4 + 18;
    uint64_t v21 = a2 + 18;
    uint64_t v22 = a2[29];
    if (v22 == 1)
    {
      memcpy(v20, v21, 0x108uLL);
    }
    else
    {
      if (*((unsigned __int8 *)a2 + 162) == 255)
      {
        *uint64_t v20 = *v21;
        *(_DWORD *)((char *)v4 + 159) = *(_DWORD *)((char *)a2 + 159);
      }
      else
      {
        int v23 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
        uint64_t v24 = (void *)a2[18];
        uint64_t v25 = a2[19];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *((_WORD *)a2 + 80), BYTE2(v23) & 1);
        v4[18] = v24;
        v4[19] = v25;
        *((_WORD *)v4 + 80) = v23;
        *((unsigned char *)v4 + 162) = BYTE2(v23) & 1;
        uint64_t v22 = a2[29];
      }
      *(_WORD *)((char *)v4 + 163) = *(_WORD *)((char *)a2 + 163);
      v4[21] = a2[21];
      *((unsigned char *)v4 + 176) = *((unsigned char *)a2 + 176);
      *(_WORD *)((char *)v4 + 177) = *(_WORD *)((char *)a2 + 177);
      uint64_t v26 = v4 + 23;
      uint64_t v27 = a2 + 23;
      if (v22)
      {
        if (*((unsigned __int8 *)a2 + 202) == 255)
        {
          *uint64_t v26 = *v27;
          *(_DWORD *)((char *)v4 + 199) = *(_DWORD *)((char *)a2 + 199);
        }
        else
        {
          int v31 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
          uint64_t v32 = (void *)a2[23];
          uint64_t v33 = a2[24];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v32, v33, *((_WORD *)a2 + 100), BYTE2(v31) & 1);
          v4[23] = v32;
          unsigned char v4[24] = v33;
          *((_WORD *)v4 + 100) = v31;
          *((unsigned char *)v4 + 202) = BYTE2(v31) & 1;
        }
        if (*((unsigned __int8 *)a2 + 226) == 255)
        {
          *((_OWORD *)v4 + 13) = *((_OWORD *)a2 + 13);
          *(_DWORD *)((char *)v4 + 223) = *(_DWORD *)((char *)a2 + 223);
        }
        else
        {
          int v34 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
          uint64_t v35 = (void *)a2[26];
          uint64_t v36 = a2[27];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v35, v36, *((_WORD *)a2 + 112), BYTE2(v34) & 1);
          v4[26] = v35;
          v4[27] = v36;
          *((_WORD *)v4 + 112) = v34;
          *((unsigned char *)v4 + 226) = BYTE2(v34) & 1;
        }
        uint64_t v37 = a2[30];
        v4[29] = a2[29];
        v4[30] = v37;
        *((unsigned char *)v4 + 248) = *((unsigned char *)a2 + 248);
        v4[32] = a2[32];
        *((unsigned char *)v4 + 264) = *((unsigned char *)a2 + 264);
        uint64_t v38 = a2[35];
        v4[34] = a2[34];
        v4[35] = v38;
        v4[36] = a2[36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v28 = *(_OWORD *)(a2 + 33);
        *(_OWORD *)(v4 + 31) = *(_OWORD *)(a2 + 31);
        *(_OWORD *)(v4 + 33) = v28;
        *(_OWORD *)(v4 + 35) = *(_OWORD *)(a2 + 35);
        long long v29 = *(_OWORD *)(a2 + 25);
        *uint64_t v26 = *v27;
        *(_OWORD *)(v4 + 25) = v29;
        long long v30 = *(_OWORD *)(a2 + 29);
        *(_OWORD *)(v4 + 27) = *(_OWORD *)(a2 + 27);
        *(_OWORD *)(v4 + 29) = v30;
      }
      uint64_t v39 = v4 + 37;
      uint64_t v40 = a2 + 37;
      if (a2[43])
      {
        unsigned int v41 = a2 + 39;
        if (*((unsigned __int8 *)a2 + 314) == 255)
        {
          _OWORD *v39 = *v40;
          *(_DWORD *)((char *)v4 + 311) = *(_DWORD *)((char *)a2 + 311);
        }
        else
        {
          int v45 = (unsigned __int16)*v41 | (*((unsigned __int8 *)a2 + 314) << 16);
          uint64_t v46 = (void *)a2[37];
          uint64_t v47 = a2[38];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, *v41, BYTE2(v45) & 1);
          v4[37] = v46;
          v4[38] = v47;
          *((_WORD *)v4 + 156) = v45;
          *((unsigned char *)v4 + 314) = BYTE2(v45) & 1;
        }
        if (*((unsigned __int8 *)a2 + 338) == 255)
        {
          *((_OWORD *)v4 + 20) = *((_OWORD *)a2 + 20);
          *(_DWORD *)((char *)v4 + 335) = *(_DWORD *)((char *)a2 + 335);
        }
        else
        {
          int v48 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
          unsigned int v49 = (void *)a2[40];
          uint64_t v50 = a2[41];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v49, v50, *((_WORD *)a2 + 168), BYTE2(v48) & 1);
          v4[40] = v49;
          v4[41] = v50;
          *((_WORD *)v4 + 168) = v48;
          *((unsigned char *)v4 + 338) = BYTE2(v48) & 1;
        }
        uint64_t v51 = a2[44];
        v4[43] = a2[43];
        v4[44] = v51;
        *((unsigned char *)v4 + 360) = *((unsigned char *)a2 + 360);
        v4[46] = a2[46];
        *((unsigned char *)v4 + 376) = *((unsigned char *)a2 + 376);
        uint64_t v52 = a2[49];
        v4[48] = a2[48];
        v4[49] = v52;
        v4[50] = a2[50];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v42 = *(_OWORD *)(a2 + 47);
        *(_OWORD *)(v4 + 45) = *(_OWORD *)(a2 + 45);
        *(_OWORD *)(v4 + 47) = v42;
        *(_OWORD *)(v4 + 49) = *(_OWORD *)(a2 + 49);
        long long v43 = *(_OWORD *)(a2 + 39);
        _OWORD *v39 = *v40;
        *(_OWORD *)(v4 + 39) = v43;
        long long v44 = *(_OWORD *)(a2 + 43);
        *(_OWORD *)(v4 + 41) = *(_OWORD *)(a2 + 41);
        *(_OWORD *)(v4 + 43) = v44;
      }
    }
    uint64_t v53 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v54 = *(int *)(v53 + 52);
    unsigned int v55 = (char *)v4 + v54;
    long long v56 = (char *)a2 + v54;
    uint64_t v57 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      uint64_t v60 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v55, v56, v60);
      v55[*(int *)(v57 + 20)] = v56[*(int *)(v57 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    *(void *)((char *)v4 + *(int *)(v53 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v53 + 56));
    *(void *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for CodableAccessibilityAttachmentStorage.V2(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 34) != 255)
  {
    int v2 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v2, BYTE2(v2) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 58) != 255)
  {
    int v3 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v3, BYTE2(v3) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 82) != 255)
  {
    int v4 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v4, BYTE2(v4) & 1);
  }
  uint64_t v5 = *(void *)(a1 + 232);
  if (v5 != 1)
  {
    if (*(unsigned __int8 *)(a1 + 162) != 255)
    {
      int v6 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v6, BYTE2(v6) & 1);
    }
    if (v5)
    {
      if (*(unsigned __int8 *)(a1 + 202) != 255)
      {
        int v7 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v7, BYTE2(v7) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 226) != 255)
      {
        int v8 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v8, BYTE2(v8) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 344))
    {
      if (*(unsigned __int8 *)(a1 + 314) != 255)
      {
        int v9 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v9, BYTE2(v9) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 338) != 255)
      {
        int v10 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v10, BYTE2(v10) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v11 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
  uint64_t v12 = type metadata accessor for LinkDestination.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
  }
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 34);
  int v8 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  }
  else
  {
    unsigned int v9 = v8 & 0xFF00FFFF | (v7 << 16);
    int v10 = *(void **)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    *(_WORD *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 34) = BYTE2(v9) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 58) == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  }
  else
  {
    int v12 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
    uint64_t v13 = *(void **)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 56), BYTE2(v12) & 1);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(_WORD *)(a1 + 56) = v12;
    *(unsigned char *)(a1 + 58) = BYTE2(v12) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 82) == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  }
  else
  {
    int v15 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
    uint64_t v16 = *(void **)(a2 + 64);
    uint64_t v17 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, *(_WORD *)(a2 + 80), BYTE2(v15) & 1);
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = v17;
    *(_WORD *)(a1 + 80) = v15;
    *(unsigned char *)(a1 + 82) = BYTE2(v15) & 1;
  }
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  unsigned int v18 = (_OWORD *)(a1 + 144);
  uint64_t v19 = (_OWORD *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 232);
  if (v20 == 1)
  {
    memcpy(v18, v19, 0x108uLL);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 162) == 255)
    {
      *unsigned int v18 = *v19;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    }
    else
    {
      int v21 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
      uint64_t v22 = *(void **)(a2 + 144);
      uint64_t v23 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 160), BYTE2(v21) & 1);
      *(void *)(a1 + 144) = v22;
      *(void *)(a1 + 152) = v23;
      *(_WORD *)(a1 + 160) = v21;
      *(unsigned char *)(a1 + 162) = BYTE2(v21) & 1;
      uint64_t v20 = *(void *)(a2 + 232);
    }
    *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
    uint64_t v24 = (_OWORD *)(a1 + 184);
    uint64_t v25 = (_OWORD *)(a2 + 184);
    if (v20)
    {
      if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        _OWORD *v24 = *v25;
        *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      }
      else
      {
        int v29 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
        long long v30 = *(void **)(a2 + 184);
        uint64_t v31 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v30, v31, *(_WORD *)(a2 + 200), BYTE2(v29) & 1);
        *(void *)(a1 + 184) = v30;
        *(void *)(a1 + 192) = v31;
        *(_WORD *)(a1 + 200) = v29;
        *(unsigned char *)(a1 + 202) = BYTE2(v29) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      }
      else
      {
        int v32 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
        uint64_t v33 = *(void **)(a2 + 208);
        uint64_t v34 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v33, v34, *(_WORD *)(a2 + 224), BYTE2(v32) & 1);
        *(void *)(a1 + 208) = v33;
        *(void *)(a1 + 216) = v34;
        *(_WORD *)(a1 + 224) = v32;
        *(unsigned char *)(a1 + 226) = BYTE2(v32) & 1;
      }
      uint64_t v35 = *(void *)(a2 + 240);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v35;
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      uint64_t v36 = *(void *)(a2 + 280);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v36;
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v26 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v26;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      long long v27 = *(_OWORD *)(a2 + 200);
      _OWORD *v24 = *v25;
      *(_OWORD *)(a1 + 200) = v27;
      long long v28 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v28;
    }
    uint64_t v37 = (_OWORD *)(a1 + 296);
    uint64_t v38 = (_OWORD *)(a2 + 296);
    if (*(void *)(a2 + 344))
    {
      uint64_t v39 = (_WORD *)(a2 + 312);
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        *uint64_t v37 = *v38;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      }
      else
      {
        int v43 = (unsigned __int16)*v39 | (*(unsigned __int8 *)(a2 + 314) << 16);
        long long v44 = *(void **)(a2 + 296);
        uint64_t v45 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *v39, BYTE2(v43) & 1);
        *(void *)(a1 + 296) = v44;
        *(void *)(a1 + 304) = v45;
        *(_WORD *)(a1 + 312) = v43;
        *(unsigned char *)(a1 + 314) = BYTE2(v43) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 338) == 255)
      {
        *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
      }
      else
      {
        int v46 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
        uint64_t v47 = *(void **)(a2 + 320);
        uint64_t v48 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v47, v48, *(_WORD *)(a2 + 336), BYTE2(v46) & 1);
        *(void *)(a1 + 320) = v47;
        *(void *)(a1 + 328) = v48;
        *(_WORD *)(a1 + 336) = v46;
        *(unsigned char *)(a1 + 338) = BYTE2(v46) & 1;
      }
      uint64_t v49 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v49;
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
      uint64_t v50 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = v50;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v40 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v40;
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      long long v41 = *(_OWORD *)(a2 + 312);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 312) = v41;
      long long v42 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v42;
    }
  }
  uint64_t v51 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v52 = *(int *)(v51 + 52);
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (const void *)(a2 + v52);
  uint64_t v55 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    uint64_t v58 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v58 - 8) + 16))(v53, v54, v58);
    *((unsigned char *)v53 + *(int *)(v55 + 20)) = *((unsigned char *)v54 + *(int *)(v55 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  *(void *)(a1 + *(int *)(v51 + 56)) = *(void *)(a2 + *(int *)(v51 + 56));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 16);
  unsigned __int8 v7 = (long long *)(a2 + 16);
  int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255)
  {
    if (BYTE2(v8) == 255)
    {
      long long v9 = *v7;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      *uint64_t v6 = v9;
    }
    else
    {
      uint64_t v11 = *(void **)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    }
  }
  else if (BYTE2(v8) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v10 = *(_DWORD *)(a2 + 31);
    *uint64_t v6 = *v7;
    *(_DWORD *)(a1 + 31) = v10;
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
    int v15 = *(void **)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    char v17 = *(unsigned char *)(a1 + 34);
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    __int16 v18 = *(_WORD *)(a1 + 32);
    *(_WORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v18, v17);
  }
  uint64_t v19 = (long long *)(a1 + 40);
  uint64_t v20 = (long long *)(a2 + 40);
  int v21 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
    if (BYTE2(v21) == 255)
    {
      long long v22 = *v20;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      *uint64_t v19 = v22;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 40);
      uint64_t v25 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = v25;
      *(_WORD *)(a1 + 56) = v21;
      *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    }
  }
  else if (BYTE2(v21) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v23 = *(_DWORD *)(a2 + 55);
    *uint64_t v19 = *v20;
    *(_DWORD *)(a1 + 55) = v23;
  }
  else
  {
    long long v26 = *(void **)(a2 + 40);
    uint64_t v27 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v26, v27, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
    long long v28 = *(void **)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 48);
    char v30 = *(unsigned char *)(a1 + 58);
    *(void *)(a1 + 40) = v26;
    *(void *)(a1 + 48) = v27;
    __int16 v31 = *(_WORD *)(a1 + 56);
    *(_WORD *)(a1 + 56) = v21;
    *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, v31, v30);
  }
  int v32 = (long long *)(a1 + 64);
  uint64_t v33 = (long long *)(a2 + 64);
  int v34 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
    if (BYTE2(v34) == 255)
    {
      long long v35 = *v33;
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      *int v32 = v35;
    }
    else
    {
      uint64_t v37 = *(void **)(a2 + 64);
      uint64_t v38 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
      *(void *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = v38;
      *(_WORD *)(a1 + 80) = v34;
      *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    }
  }
  else if (BYTE2(v34) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v36 = *(_DWORD *)(a2 + 79);
    *int v32 = *v33;
    *(_DWORD *)(a1 + 79) = v36;
  }
  else
  {
    uint64_t v39 = *(void **)(a2 + 64);
    uint64_t v40 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
    long long v41 = *(void **)(a1 + 64);
    uint64_t v42 = *(void *)(a1 + 72);
    char v43 = *(unsigned char *)(a1 + 82);
    *(void *)(a1 + 64) = v39;
    *(void *)(a1 + 72) = v40;
    __int16 v44 = *(_WORD *)(a1 + 80);
    *(_WORD *)(a1 + 80) = v34;
    *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v41, v42, v44, v43);
  }
  uint64_t v45 = (_WORD *)(a2 + 312);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v46 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v46;
  uint64_t v47 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v47;
  uint64_t v48 = (long long *)(a1 + 144);
  uint64_t v49 = (long long *)(a2 + 144);
  uint64_t v50 = *(void *)(a2 + 232);
  uint64_t v202 = a3;
  if (*(void *)(a1 + 232) == 1)
  {
    if (v50 != 1)
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        long long v51 = *v49;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        long long *v48 = v51;
      }
      else
      {
        int v54 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        uint64_t v55 = *(void **)(a2 + 144);
        uint64_t v56 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *(_WORD *)(a2 + 160), BYTE2(v54) & 1);
        *(void *)(a1 + 144) = v55;
        *(void *)(a1 + 152) = v56;
        *(_WORD *)(a1 + 160) = v54;
        *(unsigned char *)(a1 + 162) = BYTE2(v54) & 1;
      }
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
      uint64_t v57 = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 168) = v57;
      *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
      *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
      uint64_t v58 = (_OWORD *)(a1 + 184);
      uint64_t v59 = (long long *)(a2 + 184);
      if (*(void *)(a2 + 232))
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v60 = *v59;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          *uint64_t v58 = v60;
        }
        else
        {
          int v67 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          uint64_t v68 = *(void **)(a2 + 184);
          uint64_t v69 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v68, v69, *(_WORD *)(a2 + 200), BYTE2(v67) & 1);
          *(void *)(a1 + 184) = v68;
          *(void *)(a1 + 192) = v69;
          *(_WORD *)(a1 + 200) = v67;
          *(unsigned char *)(a1 + 202) = BYTE2(v67) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v70 = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *(_OWORD *)(a1 + 208) = v70;
        }
        else
        {
          int v71 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          uint64_t v72 = *(void **)(a2 + 208);
          uint64_t v73 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v72, v73, *(_WORD *)(a2 + 224), BYTE2(v71) & 1);
          *(void *)(a1 + 208) = v72;
          *(void *)(a1 + 216) = v73;
          *(_WORD *)(a1 + 224) = v71;
          *(unsigned char *)(a1 + 226) = BYTE2(v71) & 1;
        }
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        uint64_t v74 = *(void *)(a2 + 240);
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 240) = v74;
        uint64_t v75 = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 256) = v75;
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v62 = *v59;
        long long v63 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
        *(_OWORD *)(a1 + 216) = v63;
        *uint64_t v58 = v62;
        long long v64 = *(_OWORD *)(a2 + 232);
        long long v65 = *(_OWORD *)(a2 + 248);
        long long v66 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v66;
        *(_OWORD *)(a1 + 232) = v64;
        *(_OWORD *)(a1 + 248) = v65;
      }
      uint64_t v76 = (_OWORD *)(a1 + 296);
      uint64_t v77 = (long long *)(a2 + 296);
      if (!*(void *)(a2 + 344))
      {
        long long v79 = *v77;
        long long v80 = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 328) = v80;
        *uint64_t v76 = v79;
        long long v81 = *(_OWORD *)(a2 + 344);
        long long v82 = *(_OWORD *)(a2 + 360);
        long long v83 = *(_OWORD *)(a2 + 392);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 392) = v83;
        *(_OWORD *)(a1 + 344) = v81;
        *(_OWORD *)(a1 + 360) = v82;
        goto LABEL_106;
      }
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        long long v78 = *v77;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        *uint64_t v76 = v78;
LABEL_92:
        if (*(unsigned __int8 *)(a2 + 338) == 255)
        {
          long long v161 = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          *(_OWORD *)(a1 + 320) = v161;
        }
        else
        {
          int v162 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
          uint64_t v163 = *(void **)(a2 + 320);
          uint64_t v164 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v163, v164, *(_WORD *)(a2 + 336), BYTE2(v162) & 1);
          *(void *)(a1 + 320) = v163;
          *(void *)(a1 + 328) = v164;
          *(_WORD *)(a1 + 336) = v162;
          *(unsigned char *)(a1 + 338) = BYTE2(v162) & 1;
        }
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        uint64_t v165 = *(void *)(a2 + 352);
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 352) = v165;
        uint64_t v166 = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        *(void *)(a1 + 368) = v166;
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = *(void *)(a2 + 392);
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
      int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
      goto LABEL_91;
    }
LABEL_28:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_106;
  }
  if (v50 == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_28;
  }
  int v52 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (*(unsigned __int8 *)(a1 + 162) == 255)
  {
    if (BYTE2(v52) == 255)
    {
      long long v53 = *v49;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      long long *v48 = v53;
    }
    else
    {
      long long v85 = *(void **)(a2 + 144);
      uint64_t v86 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v85, v86, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
      *(void *)(a1 + 144) = v85;
      *(void *)(a1 + 152) = v86;
      *(_WORD *)(a1 + 160) = v52;
      *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    }
  }
  else if (BYTE2(v52) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v61 = *(_DWORD *)(a2 + 159);
    long long *v48 = *v49;
    *(_DWORD *)(a1 + 159) = v61;
  }
  else
  {
    int v87 = *(void **)(a2 + 144);
    uint64_t v88 = *(void *)(a2 + 152);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v87, v88, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
    uint64_t v89 = *(void **)(a1 + 144);
    uint64_t v90 = *(void *)(a1 + 152);
    char v91 = *(unsigned char *)(a1 + 162);
    *(void *)(a1 + 144) = v87;
    *(void *)(a1 + 152) = v88;
    __int16 v92 = *(_WORD *)(a1 + 160);
    *(_WORD *)(a1 + 160) = v52;
    *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v89, v90, v92, v91);
  }
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  uint64_t v93 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v93;
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  long long v94 = (long long *)(a1 + 184);
  long long v95 = (long long *)(a2 + 184);
  uint64_t v96 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v96)
    {
      int v97 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      if (*(unsigned __int8 *)(a1 + 202) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v98 = *v95;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          long long *v94 = v98;
        }
        else
        {
          uint64_t v120 = *(void **)(a2 + 184);
          uint64_t v121 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v120, v121, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
          *(void *)(a1 + 184) = v120;
          *(void *)(a1 + 192) = v121;
          *(_WORD *)(a1 + 200) = v97;
          *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v105 = *(_DWORD *)(a2 + 199);
        long long *v94 = *v95;
        *(_DWORD *)(a1 + 199) = v105;
      }
      else
      {
        uint64_t v122 = *(void **)(a2 + 184);
        uint64_t v123 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v122, v123, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
        uint64_t v124 = *(void **)(a1 + 184);
        uint64_t v125 = *(void *)(a1 + 192);
        char v126 = *(unsigned char *)(a1 + 202);
        *(void *)(a1 + 184) = v122;
        *(void *)(a1 + 192) = v123;
        __int16 v127 = *(_WORD *)(a1 + 200);
        *(_WORD *)(a1 + 200) = v97;
        *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v124, v125, v127, v126);
      }
      uint64_t v128 = (long long *)(a1 + 208);
      uint64_t v129 = (long long *)(a2 + 208);
      int v130 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      if (*(unsigned __int8 *)(a1 + 226) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v131 = *v129;
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *uint64_t v128 = v131;
        }
        else
        {
          __int16 v133 = *(void **)(a2 + 208);
          uint64_t v134 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v133, v134, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
          *(void *)(a1 + 208) = v133;
          *(void *)(a1 + 216) = v134;
          *(_WORD *)(a1 + 224) = v130;
          *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v132 = *(_DWORD *)(a2 + 223);
        *uint64_t v128 = *v129;
        *(_DWORD *)(a1 + 223) = v132;
      }
      else
      {
        char v135 = *(void **)(a2 + 208);
        uint64_t v136 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v135, v136, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
        uint64_t v137 = *(void **)(a1 + 208);
        uint64_t v138 = *(void *)(a1 + 216);
        char v139 = *(unsigned char *)(a1 + 226);
        *(void *)(a1 + 208) = v135;
        *(void *)(a1 + 216) = v136;
        __int16 v140 = *(_WORD *)(a1 + 224);
        *(_WORD *)(a1 + 224) = v130;
        *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v137, v138, v140, v139);
      }
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v141 = *(void *)(a2 + 240);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 240) = v141;
      LOBYTE(v141) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = v141;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
      long long v101 = *(_OWORD *)(a2 + 200);
      long long v100 = *(_OWORD *)(a2 + 216);
      long long *v94 = *v95;
      *(_OWORD *)(a1 + 200) = v101;
      *(_OWORD *)(a1 + 216) = v100;
      long long v102 = *(_OWORD *)(a2 + 280);
      long long v104 = *(_OWORD *)(a2 + 232);
      long long v103 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v102;
      *(_OWORD *)(a1 + 232) = v104;
      *(_OWORD *)(a1 + 248) = v103;
    }
  }
  else if (v96)
  {
    if (*(unsigned __int8 *)(a2 + 202) == 255)
    {
      long long v99 = *v95;
      *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      long long *v94 = v99;
    }
    else
    {
      int v111 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      uint64_t v112 = *(void **)(a2 + 184);
      uint64_t v113 = *(void *)(a2 + 192);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v112, v113, *(_WORD *)(a2 + 200), BYTE2(v111) & 1);
      *(void *)(a1 + 184) = v112;
      *(void *)(a1 + 192) = v113;
      *(_WORD *)(a1 + 200) = v111;
      *(unsigned char *)(a1 + 202) = BYTE2(v111) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 226) == 255)
    {
      long long v114 = *(_OWORD *)(a2 + 208);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      *(_OWORD *)(a1 + 208) = v114;
    }
    else
    {
      int v115 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      uint64_t v116 = *(void **)(a2 + 208);
      uint64_t v117 = *(void *)(a2 + 216);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v116, v117, *(_WORD *)(a2 + 224), BYTE2(v115) & 1);
      *(void *)(a1 + 208) = v116;
      *(void *)(a1 + 216) = v117;
      *(_WORD *)(a1 + 224) = v115;
      *(unsigned char *)(a1 + 226) = BYTE2(v115) & 1;
    }
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    uint64_t v118 = *(void *)(a2 + 240);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(void *)(a1 + 240) = v118;
    uint64_t v119 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v119;
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v106 = *v95;
    long long v107 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v107;
    long long *v94 = v106;
    long long v108 = *(_OWORD *)(a2 + 232);
    long long v109 = *(_OWORD *)(a2 + 248);
    long long v110 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v110;
    *(_OWORD *)(a1 + 232) = v108;
    *(_OWORD *)(a1 + 248) = v109;
  }
  long long v142 = (long long *)(a1 + 296);
  uint64_t v143 = (long long *)(a2 + 296);
  uint64_t v144 = *(void *)(a2 + 344);
  if (!*(void *)(a1 + 344))
  {
    if (!v144)
    {
      long long v154 = *v143;
      long long v155 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v155;
      long long *v142 = v154;
      long long v156 = *(_OWORD *)(a2 + 344);
      long long v157 = *(_OWORD *)(a2 + 360);
      long long v158 = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 392) = v158;
      *(_OWORD *)(a1 + 344) = v156;
      *(_OWORD *)(a1 + 360) = v157;
      goto LABEL_106;
    }
    if (*(unsigned __int8 *)(a2 + 314) == 255)
    {
      long long v147 = *v143;
      *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      long long *v142 = v147;
      goto LABEL_92;
    }
    int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
LABEL_91:
    uint64_t v159 = *(void **)(a2 + 296);
    uint64_t v160 = *(void *)(a2 + 304);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v159, v160, v84, BYTE2(v84) & 1);
    *(void *)(a1 + 296) = v159;
    *(void *)(a1 + 304) = v160;
    *(_WORD *)(a1 + 312) = v84;
    *(unsigned char *)(a1 + 314) = BYTE2(v84) & 1;
    goto LABEL_92;
  }
  if (v144)
  {
    int v145 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
    if (*(unsigned __int8 *)(a1 + 314) == 255)
    {
      if (BYTE2(v145) == 255)
      {
        long long v146 = *v143;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        long long *v142 = v146;
      }
      else
      {
        uint64_t v167 = *(void **)(a2 + 296);
        uint64_t v168 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v167, v168, *v45, BYTE2(v145) & 1);
        *(void *)(a1 + 296) = v167;
        *(void *)(a1 + 304) = v168;
        *(_WORD *)(a1 + 312) = v145;
        *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      }
    }
    else if (BYTE2(v145) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v153 = *(_DWORD *)(a2 + 311);
      long long *v142 = *v143;
      *(_DWORD *)(a1 + 311) = v153;
    }
    else
    {
      uint64_t v169 = *(void **)(a2 + 296);
      uint64_t v170 = *(void *)(a2 + 304);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v169, v170, *v45, BYTE2(v145) & 1);
      uint64_t v171 = *(void **)(a1 + 296);
      uint64_t v172 = *(void *)(a1 + 304);
      char v173 = *(unsigned char *)(a1 + 314);
      *(void *)(a1 + 296) = v169;
      *(void *)(a1 + 304) = v170;
      __int16 v174 = *(_WORD *)(a1 + 312);
      *(_WORD *)(a1 + 312) = v145;
      *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v171, v172, v174, v173);
    }
    uint64_t v175 = (long long *)(a1 + 320);
    uint64_t v176 = (long long *)(a2 + 320);
    int v177 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (*(unsigned __int8 *)(a1 + 338) == 255)
    {
      if (BYTE2(v177) == 255)
      {
        long long v178 = *v176;
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        long long *v175 = v178;
      }
      else
      {
        uint64_t v180 = *(void **)(a2 + 320);
        uint64_t v181 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v180, v181, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
        *(void *)(a1 + 320) = v180;
        *(void *)(a1 + 328) = v181;
        *(_WORD *)(a1 + 336) = v177;
        *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      }
    }
    else if (BYTE2(v177) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v179 = *(_DWORD *)(a2 + 335);
      long long *v175 = *v176;
      *(_DWORD *)(a1 + 335) = v179;
    }
    else
    {
      uint64_t v182 = *(void **)(a2 + 320);
      uint64_t v183 = *(void *)(a2 + 328);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v182, v183, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
      unint64_t v184 = *(void **)(a1 + 320);
      uint64_t v185 = *(void *)(a1 + 328);
      char v186 = *(unsigned char *)(a1 + 338);
      *(void *)(a1 + 320) = v182;
      *(void *)(a1 + 328) = v183;
      __int16 v187 = *(_WORD *)(a1 + 336);
      *(_WORD *)(a1 + 336) = v177;
      *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v184, v185, v187, v186);
    }
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v188 = *(void *)(a2 + 352);
    *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
    *(void *)(a1 + 352) = v188;
    LOBYTE(v188) = *(unsigned char *)(a2 + 376);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 376) = v188;
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    long long v149 = *(_OWORD *)(a2 + 312);
    long long v148 = *(_OWORD *)(a2 + 328);
    long long *v142 = *v143;
    *(_OWORD *)(a1 + 312) = v149;
    *(_OWORD *)(a1 + 328) = v148;
    long long v150 = *(_OWORD *)(a2 + 392);
    long long v152 = *(_OWORD *)(a2 + 344);
    long long v151 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v150;
    *(_OWORD *)(a1 + 344) = v152;
    *(_OWORD *)(a1 + 360) = v151;
  }
LABEL_106:
  uint64_t v189 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v190 = *(int *)(v189 + 52);
  uint64_t v191 = (unsigned char *)(a1 + v190);
  uint64_t v192 = (unsigned char *)(a2 + v190);
  uint64_t v193 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v194 = *(void *)(v193 - 8);
  int v195 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v194 + 48);
  int v196 = v195(v191, 1, v193);
  int v197 = v195(v192, 1, v193);
  if (!v196)
  {
    if (!v197)
    {
      uint64_t v201 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v201 - 8) + 24))(v191, v192, v201);
      v191[*(int *)(v193 + 20)] = v192[*(int *)(v193 + 20)];
      goto LABEL_112;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v191, type metadata accessor for LinkDestination.Configuration);
    goto LABEL_111;
  }
  if (v197)
  {
LABEL_111:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v191, v192, *(void *)(*(void *)(v199 - 8) + 64));
    goto LABEL_112;
  }
  uint64_t v198 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v198 - 8) + 16))(v191, v192, v198);
  v191[*(int *)(v193 + 20)] = v192[*(int *)(v193 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
LABEL_112:
  *(void *)(a1 + *(int *)(v189 + 56)) = *(void *)(a2 + *(int *)(v189 + 56));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v202 + 20)) = *(void *)(a2 + *(int *)(v202 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
  uint64_t v8 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v9 = *(int *)(v8 + 52);
  int v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *((unsigned char *)v10 + *(int *)(v12 + 20)) = *((unsigned char *)v11 + *(int *)(v12 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(v8 + 56)) = *(void *)(a2 + *(int *)(v8 + 56));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  long long v7 = (_OWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255) {
    goto LABEL_4;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (HIWORD(v8) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v7;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    goto LABEL_6;
  }
  int v9 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
  int v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *v7;
  *(_WORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
LABEL_6:
  uint64_t v12 = (_OWORD *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 40) = *v12;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    goto LABEL_11;
  }
  unsigned int v13 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (HIWORD(v13) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_9;
  }
  int v14 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *v12;
  *(_WORD *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 58) = BYTE2(v13) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v14, BYTE2(v14) & 1);
LABEL_11:
  char v17 = (_OWORD *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v17;
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    goto LABEL_16;
  }
  unsigned int v18 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (HIWORD(v18) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_14;
  }
  int v19 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
  uint64_t v20 = *(void **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v17;
  *(_WORD *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 82) = BYTE2(v18) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, v19, BYTE2(v19) & 1);
LABEL_16:
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  long long v22 = (_OWORD *)(a2 + 144);
  uint64_t v68 = a3;
  if (*(void *)(a1 + 232) == 1)
  {
LABEL_19:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_20;
  }
  if (*(void *)(a2 + 232) == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(a1 + 162) == 255) {
    goto LABEL_30;
  }
  unsigned int v35 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (HIWORD(v35) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_30:
    *(_OWORD *)(a1 + 144) = *v22;
    *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    goto LABEL_33;
  }
  int v37 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  uint64_t v38 = *(void **)(a1 + 144);
  uint64_t v39 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *v22;
  *(_WORD *)(a1 + 160) = v35;
  *(unsigned char *)(a1 + 162) = BYTE2(v35) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v38, v39, v37, BYTE2(v37) & 1);
LABEL_33:
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  uint64_t v40 = (_OWORD *)(a1 + 184);
  long long v41 = (_OWORD *)(a2 + 184);
  if (!*(void *)(a1 + 232))
  {
LABEL_40:
    long long v43 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v43;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    long long v44 = *(_OWORD *)(a2 + 200);
    _OWORD *v40 = *v41;
    *(_OWORD *)(a1 + 200) = v44;
    long long v45 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v45;
    goto LABEL_48;
  }
  if (!*(void *)(a2 + 232))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
    goto LABEL_40;
  }
  if (*(unsigned __int8 *)(a1 + 202) == 255)
  {
LABEL_38:
    _OWORD *v40 = *v41;
    *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
    goto LABEL_42;
  }
  unsigned int v42 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
  if (HIWORD(v42) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_38;
  }
  int v46 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  uint64_t v47 = *(void **)(a1 + 184);
  uint64_t v48 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *v41;
  *(_WORD *)(a1 + 200) = v42;
  *(unsigned char *)(a1 + 202) = BYTE2(v42) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v47, v48, v46, BYTE2(v46) & 1);
LABEL_42:
  uint64_t v49 = (_OWORD *)(a2 + 208);
  if (*(unsigned __int8 *)(a1 + 226) != 255)
  {
    unsigned int v50 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
    if (HIWORD(v50) <= 0xFEu)
    {
      int v51 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
      int v52 = *(void **)(a1 + 208);
      uint64_t v53 = *(void *)(a1 + 216);
      *(_OWORD *)(a1 + 208) = *v49;
      *(_WORD *)(a1 + 224) = v50;
      *(unsigned char *)(a1 + 226) = BYTE2(v50) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v52, v53, v51, BYTE2(v51) & 1);
      goto LABEL_47;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 208) = *v49;
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
LABEL_47:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
LABEL_48:
  int v54 = (_OWORD *)(a2 + 296);
  uint64_t v55 = (_OWORD *)(a1 + 296);
  if (!*(void *)(a1 + 344))
  {
LABEL_55:
    long long v57 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v57;
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    long long v58 = *(_OWORD *)(a2 + 312);
    *uint64_t v55 = *v54;
    *(_OWORD *)(a1 + 312) = v58;
    long long v59 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v59;
    goto LABEL_20;
  }
  if (!*(void *)(a2 + 344))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    goto LABEL_55;
  }
  if (*(unsigned __int8 *)(a1 + 314) == 255)
  {
LABEL_53:
    *uint64_t v55 = *v54;
    *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
    goto LABEL_57;
  }
  unsigned int v56 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
  if (HIWORD(v56) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_53;
  }
  int v60 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
  int v61 = *(void **)(a1 + 296);
  uint64_t v62 = *(void *)(a1 + 304);
  *uint64_t v55 = *v54;
  *(_WORD *)(a1 + 312) = v56;
  *(unsigned char *)(a1 + 314) = BYTE2(v56) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v61, v62, v60, BYTE2(v60) & 1);
LABEL_57:
  long long v63 = (_OWORD *)(a2 + 320);
  if (*(unsigned __int8 *)(a1 + 338) != 255)
  {
    unsigned int v64 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (HIWORD(v64) <= 0xFEu)
    {
      int v65 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
      long long v66 = *(void **)(a1 + 320);
      uint64_t v67 = *(void *)(a1 + 328);
      *(_OWORD *)(a1 + 320) = *v63;
      *(_WORD *)(a1 + 336) = v64;
      *(unsigned char *)(a1 + 338) = BYTE2(v64) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v66, v67, v65, BYTE2(v65) & 1);
      goto LABEL_62;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 320) = *v63;
  *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
LABEL_62:
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v23 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v24 = *(int *)(v23 + 52);
  uint64_t v25 = (unsigned char *)(a1 + v24);
  long long v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      uint64_t v36 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v36 - 8) + 40))(v25, v26, v36);
      v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
      goto LABEL_26;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v25, type metadata accessor for LinkDestination.Configuration);
    goto LABEL_25;
  }
  if (v31)
  {
LABEL_25:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_26;
  }
  uint64_t v32 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(v25, v26, v32);
  v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_26:
  *(void *)(a1 + *(int *)(v23 + 56)) = *(void *)(a2 + *(int *)(v23 + 56));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v68 + 20)) = *(void *)(a2 + *(int *)(v68 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2461734A0);
}

uint64_t sub_2461734A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.V2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246173580);
}

uint64_t sub_246173580(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for CodableAccessibilityAttachmentStorage.V2()
{
  uint64_t result = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    unsigned __int8 v8 = *((unsigned char *)a2 + 34);
    int v9 = *((unsigned __int16 *)a2 + 16);
    swift_bridgeObjectRetain();
    if (v8 == 255)
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_DWORD *)(a1 + 31) = *(_DWORD *)((char *)a2 + 31);
    }
    else
    {
      unsigned int v11 = v9 & 0xFF00FFFF | (v8 << 16);
      uint64_t v12 = (void *)a2[2];
      uint64_t v13 = a2[3];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v12, v13, v11, BYTE2(v11) & 1);
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(_WORD *)(a1 + 32) = v11;
      *(unsigned char *)(a1 + 34) = BYTE2(v11) & 1;
    }
    if (*((unsigned __int8 *)a2 + 58) == 255)
    {
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_DWORD *)(a1 + 55) = *(_DWORD *)((char *)a2 + 55);
    }
    else
    {
      int v14 = *((unsigned __int16 *)a2 + 28) | (*((unsigned __int8 *)a2 + 58) << 16);
      uint64_t v15 = (void *)a2[5];
      uint64_t v16 = a2[6];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, *((_WORD *)a2 + 28), BYTE2(v14) & 1);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v16;
      *(_WORD *)(a1 + 56) = v14;
      *(unsigned char *)(a1 + 58) = BYTE2(v14) & 1;
    }
    if (*((unsigned __int8 *)a2 + 82) == 255)
    {
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_DWORD *)(a1 + 79) = *(_DWORD *)((char *)a2 + 79);
    }
    else
    {
      int v17 = *((unsigned __int16 *)a2 + 40) | (*((unsigned __int8 *)a2 + 82) << 16);
      unsigned int v18 = (void *)a2[8];
      uint64_t v19 = a2[9];
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v18, v19, *((_WORD *)a2 + 40), BYTE2(v17) & 1);
      *(void *)(a1 + 64) = v18;
      *(void *)(a1 + 72) = v19;
      *(_WORD *)(a1 + 80) = v17;
      *(unsigned char *)(a1 + 82) = BYTE2(v17) & 1;
    }
    *(void *)(a1 + 84) = *(uint64_t *)((char *)a2 + 84);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(void *)(a1 + 112) = a2[14];
    *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
    *(void *)(a1 + 128) = a2[16];
    *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
    uint64_t v20 = (_OWORD *)(a1 + 144);
    uint64_t v21 = a2 + 18;
    uint64_t v22 = a2[29];
    if (v22 == 1)
    {
      memcpy(v20, v21, 0x108uLL);
    }
    else
    {
      if (*((unsigned __int8 *)a2 + 162) == 255)
      {
        *uint64_t v20 = *v21;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)((char *)a2 + 159);
      }
      else
      {
        int v23 = *((unsigned __int16 *)a2 + 80) | (*((unsigned __int8 *)a2 + 162) << 16);
        uint64_t v24 = (void *)a2[18];
        uint64_t v25 = a2[19];
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *((_WORD *)a2 + 80), BYTE2(v23) & 1);
        *(void *)(a1 + 144) = v24;
        *(void *)(a1 + 152) = v25;
        *(_WORD *)(a1 + 160) = v23;
        *(unsigned char *)(a1 + 162) = BYTE2(v23) & 1;
        uint64_t v22 = a2[29];
      }
      *(_WORD *)(a1 + 163) = *(_WORD *)((char *)a2 + 163);
      *(void *)(a1 + 168) = a2[21];
      *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
      *(_WORD *)(a1 + 177) = *(_WORD *)((char *)a2 + 177);
      long long v26 = (_OWORD *)(a1 + 184);
      uint64_t v27 = a2 + 23;
      if (v22)
      {
        if (*((unsigned __int8 *)a2 + 202) == 255)
        {
          *long long v26 = *v27;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)((char *)a2 + 199);
        }
        else
        {
          int v31 = *((unsigned __int16 *)a2 + 100) | (*((unsigned __int8 *)a2 + 202) << 16);
          uint64_t v32 = (void *)a2[23];
          uint64_t v33 = a2[24];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v32, v33, *((_WORD *)a2 + 100), BYTE2(v31) & 1);
          *(void *)(a1 + 184) = v32;
          *(void *)(a1 + 192) = v33;
          *(_WORD *)(a1 + 200) = v31;
          *(unsigned char *)(a1 + 202) = BYTE2(v31) & 1;
        }
        if (*((unsigned __int8 *)a2 + 226) == 255)
        {
          *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)((char *)a2 + 223);
        }
        else
        {
          int v34 = *((unsigned __int16 *)a2 + 112) | (*((unsigned __int8 *)a2 + 226) << 16);
          unsigned int v35 = (void *)a2[26];
          uint64_t v36 = a2[27];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v35, v36, *((_WORD *)a2 + 112), BYTE2(v34) & 1);
          *(void *)(a1 + 208) = v35;
          *(void *)(a1 + 216) = v36;
          *(_WORD *)(a1 + 224) = v34;
          *(unsigned char *)(a1 + 226) = BYTE2(v34) & 1;
        }
        uint64_t v37 = a2[30];
        *(void *)(a1 + 232) = a2[29];
        *(void *)(a1 + 240) = v37;
        *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
        *(void *)(a1 + 256) = a2[32];
        *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
        uint64_t v38 = a2[35];
        *(void *)(a1 + 272) = a2[34];
        *(void *)(a1 + 280) = v38;
        *(void *)(a1 + 288) = a2[36];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v28 = *(_OWORD *)(a2 + 33);
        *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
        *(_OWORD *)(a1 + 264) = v28;
        *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
        long long v29 = *(_OWORD *)(a2 + 25);
        *long long v26 = *v27;
        *(_OWORD *)(a1 + 200) = v29;
        long long v30 = *(_OWORD *)(a2 + 29);
        *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
        *(_OWORD *)(a1 + 232) = v30;
      }
      uint64_t v39 = (_OWORD *)(a1 + 296);
      uint64_t v40 = a2 + 37;
      if (a2[43])
      {
        long long v41 = a2 + 39;
        if (*((unsigned __int8 *)a2 + 314) == 255)
        {
          _OWORD *v39 = *v40;
          *(_DWORD *)(a1 + 311) = *(_DWORD *)((char *)a2 + 311);
        }
        else
        {
          int v45 = (unsigned __int16)*v41 | (*((unsigned __int8 *)a2 + 314) << 16);
          int v46 = (void *)a2[37];
          uint64_t v47 = a2[38];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v46, v47, *v41, BYTE2(v45) & 1);
          *(void *)(a1 + 296) = v46;
          *(void *)(a1 + 304) = v47;
          *(_WORD *)(a1 + 312) = v45;
          *(unsigned char *)(a1 + 314) = BYTE2(v45) & 1;
        }
        if (*((unsigned __int8 *)a2 + 338) == 255)
        {
          *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)((char *)a2 + 335);
        }
        else
        {
          int v48 = *((unsigned __int16 *)a2 + 168) | (*((unsigned __int8 *)a2 + 338) << 16);
          uint64_t v49 = (void *)a2[40];
          uint64_t v50 = a2[41];
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v49, v50, *((_WORD *)a2 + 168), BYTE2(v48) & 1);
          *(void *)(a1 + 320) = v49;
          *(void *)(a1 + 328) = v50;
          *(_WORD *)(a1 + 336) = v48;
          *(unsigned char *)(a1 + 338) = BYTE2(v48) & 1;
        }
        uint64_t v51 = a2[44];
        *(void *)(a1 + 344) = a2[43];
        *(void *)(a1 + 352) = v51;
        *(unsigned char *)(a1 + 360) = *((unsigned char *)a2 + 360);
        *(void *)(a1 + 368) = a2[46];
        *(unsigned char *)(a1 + 376) = *((unsigned char *)a2 + 376);
        uint64_t v52 = a2[49];
        *(void *)(a1 + 384) = a2[48];
        *(void *)(a1 + 392) = v52;
        *(void *)(a1 + 400) = a2[50];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v42 = *(_OWORD *)(a2 + 47);
        *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
        *(_OWORD *)(a1 + 376) = v42;
        *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 49);
        long long v43 = *(_OWORD *)(a2 + 39);
        _OWORD *v39 = *v40;
        *(_OWORD *)(a1 + 312) = v43;
        long long v44 = *(_OWORD *)(a2 + 43);
        *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
        *(_OWORD *)(a1 + 344) = v44;
      }
    }
    uint64_t v53 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
    uint64_t v54 = *(int *)(v53 + 52);
    uint64_t v55 = (void *)(a1 + v54);
    unsigned int v56 = (char *)a2 + v54;
    uint64_t v57 = type metadata accessor for LinkDestination.Configuration(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      type metadata accessor for LinkDestination.Configuration?(0);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      uint64_t v60 = type metadata accessor for URL();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v55, v56, v60);
      *((unsigned char *)v55 + *(int *)(v57 + 20)) = v56[*(int *)(v57 + 20)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    *(void *)(a1 + *(int *)(v53 + 56)) = *(uint64_t *)((char *)a2 + *(int *)(v53 + 56));
    uint64_t v61 = a3[5];
    uint64_t v62 = a3[6];
    uint64_t v63 = a1 + v61;
    uint64_t v64 = (uint64_t)a2 + v61;
    uint64_t v65 = *(void *)(v64 + 8);
    *(void *)uint64_t v63 = *(void *)v64;
    *(void *)(v63 + 8) = v65;
    uint64_t v66 = *(void *)(v64 + 24);
    *(void *)(v63 + 16) = *(void *)(v64 + 16);
    *(void *)(v63 + 24) = v66;
    *(_OWORD *)(v63 + 32) = *(_OWORD *)(v64 + 32);
    *(unsigned char *)(v63 + 48) = *(unsigned char *)(v64 + 48);
    uint64_t v67 = a1 + v62;
    uint64_t v68 = (uint64_t *)((char *)a2 + v62);
    uint64_t v69 = *(uint64_t *)((char *)a2 + v62 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v69 == 1)
    {
      long long v70 = *((_OWORD *)v68 + 1);
      *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
      *(_OWORD *)(v67 + 16) = v70;
      long long v71 = *((_OWORD *)v68 + 3);
      *(_OWORD *)(v67 + 32) = *((_OWORD *)v68 + 2);
      *(_OWORD *)(v67 + 48) = v71;
    }
    else
    {
      __int16 v72 = *((_WORD *)v68 + 8);
      if (*((unsigned char *)v68 + 16) == 0xFF)
      {
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        *(_WORD *)(v67 + 16) = *((_WORD *)v68 + 8);
      }
      else
      {
        char v73 = v72 & 1;
        uint64_t v74 = *v68;
        uint64_t v75 = v68[1];
        outlined copy of AccessibilityText.Storage((void *)*v68, v75, v72 & 1);
        *(void *)uint64_t v67 = v74;
        *(void *)(v67 + 8) = v75;
        *(unsigned char *)(v67 + 16) = v73;
        *(unsigned char *)(v67 + 17) = *((unsigned char *)v68 + 17);
        uint64_t v69 = v68[6];
      }
      uint64_t v76 = (_OWORD *)(v67 + 24);
      uint64_t v77 = v68 + 3;
      if (v69)
      {
        uint64_t v78 = v68[7];
        *(void *)(v67 + 48) = v69;
        *(void *)(v67 + 56) = v78;
        (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v69 - 8))(v76, v77, v69);
      }
      else
      {
        long long v79 = *(_OWORD *)(v68 + 5);
        *uint64_t v76 = *v77;
        *(_OWORD *)(v67 + 40) = v79;
        *(void *)(v67 + 56) = v68[7];
      }
    }
    uint64_t v80 = a3[8];
    *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v81 = a1 + v80;
    uint64_t v82 = (uint64_t)a2 + v80;
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    *(unsigned char *)(v81 + 16) = *(unsigned char *)(v82 + 16);
    uint64_t v83 = a3[10];
    *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(unsigned char *)(a1 + v83) = *((unsigned char *)a2 + v83);
    uint64_t v84 = a3[12];
    *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)(a1 + v84) = *(uint64_t *)((char *)a2 + v84);
    uint64_t v85 = a3[13];
    uint64_t v86 = a3[14];
    int v87 = (void *)(a1 + v85);
    uint64_t v88 = (uint64_t *)((char *)a2 + v85);
    uint64_t v89 = v88[1];
    *int v87 = *v88;
    v87[1] = v89;
    *(unsigned char *)(a1 + v86) = *((unsigned char *)a2 + v86);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 34) != 255)
  {
    int v4 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 16), *(void *)(a1 + 24), v4, BYTE2(v4) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 58) != 255)
  {
    int v5 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 40), *(void *)(a1 + 48), v5, BYTE2(v5) & 1);
  }
  if (*(unsigned __int8 *)(a1 + 82) != 255)
  {
    int v6 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 64), *(void *)(a1 + 72), v6, BYTE2(v6) & 1);
  }
  uint64_t v7 = *(void *)(a1 + 232);
  if (v7 != 1)
  {
    if (*(unsigned __int8 *)(a1 + 162) != 255)
    {
      int v8 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 144), *(void *)(a1 + 152), v8, BYTE2(v8) & 1);
      uint64_t v7 = *(void *)(a1 + 232);
    }
    if (v7)
    {
      if (*(unsigned __int8 *)(a1 + 202) != 255)
      {
        int v9 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 184), *(void *)(a1 + 192), v9, BYTE2(v9) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 226) != 255)
      {
        int v10 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 208), *(void *)(a1 + 216), v10, BYTE2(v10) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 344))
    {
      if (*(unsigned __int8 *)(a1 + 314) != 255)
      {
        int v11 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 296), *(void *)(a1 + 304), v11, BYTE2(v11) & 1);
      }
      if (*(unsigned __int8 *)(a1 + 338) != 255)
      {
        int v12 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(*(void **)(a1 + 320), *(void *)(a1 + 328), v12, BYTE2(v12) & 1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v13 = a1 + *(int *)(type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0) + 52);
  uint64_t v14 = type metadata accessor for LinkDestination.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v13, v15);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + *(int *)(a2 + 24);
  uint64_t v17 = *(void *)(v16 + 48);
  if (v17 != 1)
  {
    if (*(unsigned char *)(v16 + 16) != 0xFF)
    {
      outlined consume of AccessibilityText.Storage(*(void **)v16, *(void *)(v16 + 8), *(_WORD *)(v16 + 16) & 1);
      uint64_t v17 = *(void *)(v16 + 48);
    }
    if (v17) {
      __swift_destroy_boxed_opaque_existential_1(v16 + 24);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 34);
  int v8 = *(unsigned __int16 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  }
  else
  {
    unsigned int v9 = v8 & 0xFF00FFFF | (v7 << 16);
    int v10 = *(void **)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v11;
    *(_WORD *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 34) = BYTE2(v9) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 58) == 255)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  }
  else
  {
    int v12 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
    uint64_t v13 = *(void **)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 56), BYTE2(v12) & 1);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(_WORD *)(a1 + 56) = v12;
    *(unsigned char *)(a1 + 58) = BYTE2(v12) & 1;
  }
  if (*(unsigned __int8 *)(a2 + 82) == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  }
  else
  {
    int v15 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
    uint64_t v16 = *(void **)(a2 + 64);
    uint64_t v17 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v16, v17, *(_WORD *)(a2 + 80), BYTE2(v15) & 1);
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = v17;
    *(_WORD *)(a1 + 80) = v15;
    *(unsigned char *)(a1 + 82) = BYTE2(v15) & 1;
  }
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  unsigned int v18 = (_OWORD *)(a1 + 144);
  uint64_t v19 = (_OWORD *)(a2 + 144);
  uint64_t v20 = *(void *)(a2 + 232);
  if (v20 == 1)
  {
    memcpy(v18, v19, 0x108uLL);
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 162) == 255)
    {
      *unsigned int v18 = *v19;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    }
    else
    {
      int v21 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
      uint64_t v22 = *(void **)(a2 + 144);
      uint64_t v23 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v22, v23, *(_WORD *)(a2 + 160), BYTE2(v21) & 1);
      *(void *)(a1 + 144) = v22;
      *(void *)(a1 + 152) = v23;
      *(_WORD *)(a1 + 160) = v21;
      *(unsigned char *)(a1 + 162) = BYTE2(v21) & 1;
      uint64_t v20 = *(void *)(a2 + 232);
    }
    *(_WORD *)(a1 + 163) = *(_WORD *)(a2 + 163);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
    uint64_t v24 = (_OWORD *)(a1 + 184);
    uint64_t v25 = (_OWORD *)(a2 + 184);
    if (v20)
    {
      if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        _OWORD *v24 = *v25;
        *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      }
      else
      {
        int v29 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
        long long v30 = *(void **)(a2 + 184);
        uint64_t v31 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v30, v31, *(_WORD *)(a2 + 200), BYTE2(v29) & 1);
        *(void *)(a1 + 184) = v30;
        *(void *)(a1 + 192) = v31;
        *(_WORD *)(a1 + 200) = v29;
        *(unsigned char *)(a1 + 202) = BYTE2(v29) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      }
      else
      {
        int v32 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
        uint64_t v33 = *(void **)(a2 + 208);
        uint64_t v34 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v33, v34, *(_WORD *)(a2 + 224), BYTE2(v32) & 1);
        *(void *)(a1 + 208) = v33;
        *(void *)(a1 + 216) = v34;
        *(_WORD *)(a1 + 224) = v32;
        *(unsigned char *)(a1 + 226) = BYTE2(v32) & 1;
      }
      uint64_t v35 = *(void *)(a2 + 240);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = v35;
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
      uint64_t v36 = *(void *)(a2 + 280);
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v36;
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v26 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = v26;
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      long long v27 = *(_OWORD *)(a2 + 200);
      _OWORD *v24 = *v25;
      *(_OWORD *)(a1 + 200) = v27;
      long long v28 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_OWORD *)(a1 + 232) = v28;
    }
    uint64_t v37 = (_OWORD *)(a1 + 296);
    uint64_t v38 = (_OWORD *)(a2 + 296);
    if (*(void *)(a2 + 344))
    {
      uint64_t v39 = (_WORD *)(a2 + 312);
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        *uint64_t v37 = *v38;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      }
      else
      {
        int v43 = (unsigned __int16)*v39 | (*(unsigned __int8 *)(a2 + 314) << 16);
        long long v44 = *(void **)(a2 + 296);
        uint64_t v45 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v44, v45, *v39, BYTE2(v43) & 1);
        *(void *)(a1 + 296) = v44;
        *(void *)(a1 + 304) = v45;
        *(_WORD *)(a1 + 312) = v43;
        *(unsigned char *)(a1 + 314) = BYTE2(v43) & 1;
      }
      if (*(unsigned __int8 *)(a2 + 338) == 255)
      {
        *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
      }
      else
      {
        int v46 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
        uint64_t v47 = *(void **)(a2 + 320);
        uint64_t v48 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v47, v48, *(_WORD *)(a2 + 336), BYTE2(v46) & 1);
        *(void *)(a1 + 320) = v47;
        *(void *)(a1 + 328) = v48;
        *(_WORD *)(a1 + 336) = v46;
        *(unsigned char *)(a1 + 338) = BYTE2(v46) & 1;
      }
      uint64_t v49 = *(void *)(a2 + 352);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = v49;
      *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
      uint64_t v50 = *(void *)(a2 + 392);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(void *)(a1 + 392) = v50;
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v40 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v40;
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      long long v41 = *(_OWORD *)(a2 + 312);
      *uint64_t v37 = *v38;
      *(_OWORD *)(a1 + 312) = v41;
      long long v42 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v42;
    }
  }
  uint64_t v51 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v52 = *(int *)(v51 + 52);
  uint64_t v53 = (void *)(a1 + v52);
  uint64_t v54 = (const void *)(a2 + v52);
  uint64_t v55 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64));
  }
  else
  {
    uint64_t v58 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v58 - 8) + 16))(v53, v54, v58);
    *((unsigned char *)v53 + *(int *)(v55 + 20)) = *((unsigned char *)v54 + *(int *)(v55 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  *(void *)(a1 + *(int *)(v51 + 56)) = *(void *)(a2 + *(int *)(v51 + 56));
  uint64_t v59 = a3[5];
  uint64_t v60 = a3[6];
  uint64_t v61 = a1 + v59;
  uint64_t v62 = a2 + v59;
  uint64_t v63 = *(void *)(v62 + 8);
  *(void *)uint64_t v61 = *(void *)v62;
  *(void *)(v61 + 8) = v63;
  uint64_t v64 = *(void *)(v62 + 24);
  *(void *)(v61 + 16) = *(void *)(v62 + 16);
  *(void *)(v61 + 24) = v64;
  *(_OWORD *)(v61 + 32) = *(_OWORD *)(v62 + 32);
  *(unsigned char *)(v61 + 48) = *(unsigned char *)(v62 + 48);
  uint64_t v65 = a1 + v60;
  uint64_t v66 = (uint64_t *)(a2 + v60);
  uint64_t v67 = *(void *)(a2 + v60 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v67 == 1)
  {
    long long v68 = *((_OWORD *)v66 + 1);
    *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
    *(_OWORD *)(v65 + 16) = v68;
    long long v69 = *((_OWORD *)v66 + 3);
    *(_OWORD *)(v65 + 32) = *((_OWORD *)v66 + 2);
    *(_OWORD *)(v65 + 48) = v69;
  }
  else
  {
    __int16 v70 = *((_WORD *)v66 + 8);
    if (*((unsigned char *)v66 + 16) == 0xFF)
    {
      *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      *(_WORD *)(v65 + 16) = *((_WORD *)v66 + 8);
    }
    else
    {
      char v71 = v70 & 1;
      uint64_t v72 = *v66;
      uint64_t v73 = v66[1];
      outlined copy of AccessibilityText.Storage((void *)*v66, v73, v70 & 1);
      *(void *)uint64_t v65 = v72;
      *(void *)(v65 + 8) = v73;
      *(unsigned char *)(v65 + 16) = v71;
      *(unsigned char *)(v65 + 17) = *((unsigned char *)v66 + 17);
      uint64_t v67 = v66[6];
    }
    uint64_t v74 = (_OWORD *)(v65 + 24);
    uint64_t v75 = v66 + 3;
    if (v67)
    {
      uint64_t v76 = v66[7];
      *(void *)(v65 + 48) = v67;
      *(void *)(v65 + 56) = v76;
      (**(void (***)(_OWORD *, _OWORD *, uint64_t))(v67 - 8))(v74, v75, v67);
    }
    else
    {
      long long v77 = *(_OWORD *)(v66 + 5);
      *uint64_t v74 = *v75;
      *(_OWORD *)(v65 + 40) = v77;
      *(void *)(v65 + 56) = v66[7];
    }
  }
  uint64_t v78 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v79 = a1 + v78;
  uint64_t v80 = a2 + v78;
  *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
  *(unsigned char *)(v79 + 16) = *(unsigned char *)(v80 + 16);
  uint64_t v81 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v81) = *(unsigned char *)(a2 + v81);
  uint64_t v82 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v82) = *(void *)(a2 + v82);
  uint64_t v83 = a3[13];
  uint64_t v84 = a3[14];
  uint64_t v85 = (void *)(a1 + v83);
  uint64_t v86 = (void *)(a2 + v83);
  uint64_t v87 = v86[1];
  *uint64_t v85 = *v86;
  v85[1] = v87;
  *(unsigned char *)(a1 + v84) = *(unsigned char *)(a2 + v84);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (long long *)(a1 + 16);
  unsigned __int8 v7 = (long long *)(a2 + 16);
  int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255)
  {
    if (BYTE2(v8) == 255)
    {
      long long v9 = *v7;
      *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
      *uint64_t v6 = v9;
    }
    else
    {
      uint64_t v11 = *(void **)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v11, v12, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      *(_WORD *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    }
  }
  else if (BYTE2(v8) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v10 = *(_DWORD *)(a2 + 31);
    *uint64_t v6 = *v7;
    *(_DWORD *)(a1 + 31) = v10;
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 16);
    uint64_t v14 = *(void *)(a2 + 24);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v13, v14, *(_WORD *)(a2 + 32), BYTE2(v8) & 1);
    int v15 = *(void **)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    char v17 = *(unsigned char *)(a1 + 34);
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    __int16 v18 = *(_WORD *)(a1 + 32);
    *(_WORD *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v18, v17);
  }
  uint64_t v19 = (long long *)(a1 + 40);
  uint64_t v20 = (long long *)(a2 + 40);
  int v21 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
    if (BYTE2(v21) == 255)
    {
      long long v22 = *v20;
      *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
      *uint64_t v19 = v22;
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 40);
      uint64_t v25 = *(void *)(a2 + 48);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v24, v25, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = v25;
      *(_WORD *)(a1 + 56) = v21;
      *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    }
  }
  else if (BYTE2(v21) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v23 = *(_DWORD *)(a2 + 55);
    *uint64_t v19 = *v20;
    *(_DWORD *)(a1 + 55) = v23;
  }
  else
  {
    long long v26 = *(void **)(a2 + 40);
    uint64_t v27 = *(void *)(a2 + 48);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v26, v27, *(_WORD *)(a2 + 56), BYTE2(v21) & 1);
    long long v28 = *(void **)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 48);
    char v30 = *(unsigned char *)(a1 + 58);
    *(void *)(a1 + 40) = v26;
    *(void *)(a1 + 48) = v27;
    __int16 v31 = *(_WORD *)(a1 + 56);
    *(_WORD *)(a1 + 56) = v21;
    *(unsigned char *)(a1 + 58) = BYTE2(v21) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v28, v29, v31, v30);
  }
  int v32 = (long long *)(a1 + 64);
  uint64_t v33 = (long long *)(a2 + 64);
  int v34 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
    if (BYTE2(v34) == 255)
    {
      long long v35 = *v33;
      *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
      *int v32 = v35;
    }
    else
    {
      uint64_t v37 = *(void **)(a2 + 64);
      uint64_t v38 = *(void *)(a2 + 72);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v37, v38, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
      *(void *)(a1 + 64) = v37;
      *(void *)(a1 + 72) = v38;
      *(_WORD *)(a1 + 80) = v34;
      *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    }
  }
  else if (BYTE2(v34) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v36 = *(_DWORD *)(a2 + 79);
    *int v32 = *v33;
    *(_DWORD *)(a1 + 79) = v36;
  }
  else
  {
    uint64_t v39 = *(void **)(a2 + 64);
    uint64_t v40 = *(void *)(a2 + 72);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v39, v40, *(_WORD *)(a2 + 80), BYTE2(v34) & 1);
    long long v41 = *(void **)(a1 + 64);
    uint64_t v42 = *(void *)(a1 + 72);
    char v43 = *(unsigned char *)(a1 + 82);
    *(void *)(a1 + 64) = v39;
    *(void *)(a1 + 72) = v40;
    __int16 v44 = *(_WORD *)(a1 + 80);
    *(_WORD *)(a1 + 80) = v34;
    *(unsigned char *)(a1 + 82) = BYTE2(v34) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v41, v42, v44, v43);
  }
  uint64_t v45 = (_WORD *)(a2 + 312);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v46 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v46;
  uint64_t v47 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v47;
  uint64_t v48 = (long long *)(a1 + 144);
  uint64_t v49 = (long long *)(a2 + 144);
  uint64_t v50 = *(void *)(a2 + 232);
  unint64_t v253 = a3;
  if (*(void *)(a1 + 232) == 1)
  {
    if (v50 != 1)
    {
      if (*(unsigned __int8 *)(a2 + 162) == 255)
      {
        long long v51 = *v49;
        *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
        long long *v48 = v51;
      }
      else
      {
        int v54 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
        uint64_t v55 = *(void **)(a2 + 144);
        uint64_t v56 = *(void *)(a2 + 152);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v55, v56, *(_WORD *)(a2 + 160), BYTE2(v54) & 1);
        *(void *)(a1 + 144) = v55;
        *(void *)(a1 + 152) = v56;
        *(_WORD *)(a1 + 160) = v54;
        *(unsigned char *)(a1 + 162) = BYTE2(v54) & 1;
      }
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
      uint64_t v57 = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(void *)(a1 + 168) = v57;
      *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
      *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
      uint64_t v58 = (_OWORD *)(a1 + 184);
      uint64_t v59 = (long long *)(a2 + 184);
      if (*(void *)(a2 + 232))
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v60 = *v59;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          *uint64_t v58 = v60;
        }
        else
        {
          int v67 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
          long long v68 = *(void **)(a2 + 184);
          uint64_t v69 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v68, v69, *(_WORD *)(a2 + 200), BYTE2(v67) & 1);
          *(void *)(a1 + 184) = v68;
          *(void *)(a1 + 192) = v69;
          *(_WORD *)(a1 + 200) = v67;
          *(unsigned char *)(a1 + 202) = BYTE2(v67) & 1;
        }
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v70 = *(_OWORD *)(a2 + 208);
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *(_OWORD *)(a1 + 208) = v70;
        }
        else
        {
          int v71 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
          uint64_t v72 = *(void **)(a2 + 208);
          uint64_t v73 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v72, v73, *(_WORD *)(a2 + 224), BYTE2(v71) & 1);
          *(void *)(a1 + 208) = v72;
          *(void *)(a1 + 216) = v73;
          *(_WORD *)(a1 + 224) = v71;
          *(unsigned char *)(a1 + 226) = BYTE2(v71) & 1;
        }
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        uint64_t v74 = *(void *)(a2 + 240);
        *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
        *(void *)(a1 + 240) = v74;
        uint64_t v75 = *(void *)(a2 + 256);
        *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
        *(void *)(a1 + 256) = v75;
        *(void *)(a1 + 272) = *(void *)(a2 + 272);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v62 = *v59;
        long long v63 = *(_OWORD *)(a2 + 216);
        *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
        *(_OWORD *)(a1 + 216) = v63;
        *uint64_t v58 = v62;
        long long v64 = *(_OWORD *)(a2 + 232);
        long long v65 = *(_OWORD *)(a2 + 248);
        long long v66 = *(_OWORD *)(a2 + 280);
        *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
        *(_OWORD *)(a1 + 280) = v66;
        *(_OWORD *)(a1 + 232) = v64;
        *(_OWORD *)(a1 + 248) = v65;
      }
      uint64_t v76 = (_OWORD *)(a1 + 296);
      long long v77 = (long long *)(a2 + 296);
      if (!*(void *)(a2 + 344))
      {
        long long v79 = *v77;
        long long v80 = *(_OWORD *)(a2 + 328);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
        *(_OWORD *)(a1 + 328) = v80;
        *uint64_t v76 = v79;
        long long v81 = *(_OWORD *)(a2 + 344);
        long long v82 = *(_OWORD *)(a2 + 360);
        long long v83 = *(_OWORD *)(a2 + 392);
        *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
        *(_OWORD *)(a1 + 392) = v83;
        *(_OWORD *)(a1 + 344) = v81;
        *(_OWORD *)(a1 + 360) = v82;
        goto LABEL_106;
      }
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        long long v78 = *v77;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        *uint64_t v76 = v78;
LABEL_92:
        if (*(unsigned __int8 *)(a2 + 338) == 255)
        {
          long long v161 = *(_OWORD *)(a2 + 320);
          *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
          *(_OWORD *)(a1 + 320) = v161;
        }
        else
        {
          int v162 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
          uint64_t v163 = *(void **)(a2 + 320);
          uint64_t v164 = *(void *)(a2 + 328);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v163, v164, *(_WORD *)(a2 + 336), BYTE2(v162) & 1);
          *(void *)(a1 + 320) = v163;
          *(void *)(a1 + 328) = v164;
          *(_WORD *)(a1 + 336) = v162;
          *(unsigned char *)(a1 + 338) = BYTE2(v162) & 1;
        }
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        uint64_t v165 = *(void *)(a2 + 352);
        *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
        *(void *)(a1 + 352) = v165;
        uint64_t v166 = *(void *)(a2 + 368);
        *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
        *(void *)(a1 + 368) = v166;
        *(void *)(a1 + 384) = *(void *)(a2 + 384);
        *(void *)(a1 + 392) = *(void *)(a2 + 392);
        *(void *)(a1 + 400) = *(void *)(a2 + 400);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
      int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
      goto LABEL_91;
    }
LABEL_28:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_106;
  }
  if (v50 == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_28;
  }
  int v52 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (*(unsigned __int8 *)(a1 + 162) == 255)
  {
    if (BYTE2(v52) == 255)
    {
      long long v53 = *v49;
      *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
      long long *v48 = v53;
    }
    else
    {
      uint64_t v85 = *(void **)(a2 + 144);
      uint64_t v86 = *(void *)(a2 + 152);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v85, v86, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
      *(void *)(a1 + 144) = v85;
      *(void *)(a1 + 152) = v86;
      *(_WORD *)(a1 + 160) = v52;
      *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    }
  }
  else if (BYTE2(v52) == 255)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    int v61 = *(_DWORD *)(a2 + 159);
    long long *v48 = *v49;
    *(_DWORD *)(a1 + 159) = v61;
  }
  else
  {
    uint64_t v87 = *(void **)(a2 + 144);
    uint64_t v88 = *(void *)(a2 + 152);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v87, v88, *(_WORD *)(a2 + 160), BYTE2(v52) & 1);
    uint64_t v89 = *(void **)(a1 + 144);
    uint64_t v90 = *(void *)(a1 + 152);
    char v91 = *(unsigned char *)(a1 + 162);
    *(void *)(a1 + 144) = v87;
    *(void *)(a1 + 152) = v88;
    __int16 v92 = *(_WORD *)(a1 + 160);
    *(_WORD *)(a1 + 160) = v52;
    *(unsigned char *)(a1 + 162) = BYTE2(v52) & 1;
    outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v89, v90, v92, v91);
  }
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  uint64_t v93 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v93;
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  long long v94 = (long long *)(a1 + 184);
  long long v95 = (long long *)(a2 + 184);
  uint64_t v96 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232))
  {
    if (v96)
    {
      int v97 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      if (*(unsigned __int8 *)(a1 + 202) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 202) == 255)
        {
          long long v98 = *v95;
          *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
          long long *v94 = v98;
        }
        else
        {
          uint64_t v120 = *(void **)(a2 + 184);
          uint64_t v121 = *(void *)(a2 + 192);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v120, v121, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
          *(void *)(a1 + 184) = v120;
          *(void *)(a1 + 192) = v121;
          *(_WORD *)(a1 + 200) = v97;
          *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 202) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v105 = *(_DWORD *)(a2 + 199);
        long long *v94 = *v95;
        *(_DWORD *)(a1 + 199) = v105;
      }
      else
      {
        uint64_t v122 = *(void **)(a2 + 184);
        uint64_t v123 = *(void *)(a2 + 192);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v122, v123, *(_WORD *)(a2 + 200), BYTE2(v97) & 1);
        uint64_t v124 = *(void **)(a1 + 184);
        uint64_t v125 = *(void *)(a1 + 192);
        char v126 = *(unsigned char *)(a1 + 202);
        *(void *)(a1 + 184) = v122;
        *(void *)(a1 + 192) = v123;
        __int16 v127 = *(_WORD *)(a1 + 200);
        *(_WORD *)(a1 + 200) = v97;
        *(unsigned char *)(a1 + 202) = BYTE2(v97) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v124, v125, v127, v126);
      }
      uint64_t v128 = (long long *)(a1 + 208);
      uint64_t v129 = (long long *)(a2 + 208);
      int v130 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      if (*(unsigned __int8 *)(a1 + 226) == 255)
      {
        if (*(unsigned __int8 *)(a2 + 226) == 255)
        {
          long long v131 = *v129;
          *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
          *uint64_t v128 = v131;
        }
        else
        {
          __int16 v133 = *(void **)(a2 + 208);
          uint64_t v134 = *(void *)(a2 + 216);
          outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v133, v134, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
          *(void *)(a1 + 208) = v133;
          *(void *)(a1 + 216) = v134;
          *(_WORD *)(a1 + 224) = v130;
          *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        }
      }
      else if (*(unsigned __int8 *)(a2 + 226) == 255)
      {
        outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
        int v132 = *(_DWORD *)(a2 + 223);
        *uint64_t v128 = *v129;
        *(_DWORD *)(a1 + 223) = v132;
      }
      else
      {
        char v135 = *(void **)(a2 + 208);
        uint64_t v136 = *(void *)(a2 + 216);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v135, v136, *(_WORD *)(a2 + 224), BYTE2(v130) & 1);
        uint64_t v137 = *(void **)(a1 + 208);
        uint64_t v138 = *(void *)(a1 + 216);
        char v139 = *(unsigned char *)(a1 + 226);
        *(void *)(a1 + 208) = v135;
        *(void *)(a1 + 216) = v136;
        __int16 v140 = *(_WORD *)(a1 + 224);
        *(_WORD *)(a1 + 224) = v130;
        *(unsigned char *)(a1 + 226) = BYTE2(v130) & 1;
        outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v137, v138, v140, v139);
      }
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v141 = *(void *)(a2 + 240);
      *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
      *(void *)(a1 + 240) = v141;
      LOBYTE(v141) = *(unsigned char *)(a2 + 264);
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      *(unsigned char *)(a1 + 264) = v141;
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
      long long v101 = *(_OWORD *)(a2 + 200);
      long long v100 = *(_OWORD *)(a2 + 216);
      long long *v94 = *v95;
      *(_OWORD *)(a1 + 200) = v101;
      *(_OWORD *)(a1 + 216) = v100;
      long long v102 = *(_OWORD *)(a2 + 280);
      long long v104 = *(_OWORD *)(a2 + 232);
      long long v103 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v102;
      *(_OWORD *)(a1 + 232) = v104;
      *(_OWORD *)(a1 + 248) = v103;
    }
  }
  else if (v96)
  {
    if (*(unsigned __int8 *)(a2 + 202) == 255)
    {
      long long v99 = *v95;
      *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      long long *v94 = v99;
    }
    else
    {
      int v111 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
      uint64_t v112 = *(void **)(a2 + 184);
      uint64_t v113 = *(void *)(a2 + 192);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v112, v113, *(_WORD *)(a2 + 200), BYTE2(v111) & 1);
      *(void *)(a1 + 184) = v112;
      *(void *)(a1 + 192) = v113;
      *(_WORD *)(a1 + 200) = v111;
      *(unsigned char *)(a1 + 202) = BYTE2(v111) & 1;
    }
    if (*(unsigned __int8 *)(a2 + 226) == 255)
    {
      long long v114 = *(_OWORD *)(a2 + 208);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      *(_OWORD *)(a1 + 208) = v114;
    }
    else
    {
      int v115 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
      uint64_t v116 = *(void **)(a2 + 208);
      uint64_t v117 = *(void *)(a2 + 216);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v116, v117, *(_WORD *)(a2 + 224), BYTE2(v115) & 1);
      *(void *)(a1 + 208) = v116;
      *(void *)(a1 + 216) = v117;
      *(_WORD *)(a1 + 224) = v115;
      *(unsigned char *)(a1 + 226) = BYTE2(v115) & 1;
    }
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    uint64_t v118 = *(void *)(a2 + 240);
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(void *)(a1 + 240) = v118;
    uint64_t v119 = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    *(void *)(a1 + 256) = v119;
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v106 = *v95;
    long long v107 = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = v107;
    long long *v94 = v106;
    long long v108 = *(_OWORD *)(a2 + 232);
    long long v109 = *(_OWORD *)(a2 + 248);
    long long v110 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v110;
    *(_OWORD *)(a1 + 232) = v108;
    *(_OWORD *)(a1 + 248) = v109;
  }
  long long v142 = (long long *)(a1 + 296);
  uint64_t v143 = (long long *)(a2 + 296);
  uint64_t v144 = *(void *)(a2 + 344);
  if (!*(void *)(a1 + 344))
  {
    if (!v144)
    {
      long long v154 = *v143;
      long long v155 = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 328) = v155;
      long long *v142 = v154;
      long long v156 = *(_OWORD *)(a2 + 344);
      long long v157 = *(_OWORD *)(a2 + 360);
      long long v158 = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 392) = v158;
      *(_OWORD *)(a1 + 344) = v156;
      *(_OWORD *)(a1 + 360) = v157;
      goto LABEL_106;
    }
    if (*(unsigned __int8 *)(a2 + 314) == 255)
    {
      long long v147 = *v143;
      *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
      long long *v142 = v147;
      goto LABEL_92;
    }
    int v84 = (unsigned __int16)*v45 | (*(unsigned __int8 *)(a2 + 314) << 16);
LABEL_91:
    uint64_t v159 = *(void **)(a2 + 296);
    uint64_t v160 = *(void *)(a2 + 304);
    outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v159, v160, v84, BYTE2(v84) & 1);
    *(void *)(a1 + 296) = v159;
    *(void *)(a1 + 304) = v160;
    *(_WORD *)(a1 + 312) = v84;
    *(unsigned char *)(a1 + 314) = BYTE2(v84) & 1;
    goto LABEL_92;
  }
  if (v144)
  {
    int v145 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
    if (*(unsigned __int8 *)(a1 + 314) == 255)
    {
      if (*(unsigned __int8 *)(a2 + 314) == 255)
      {
        long long v146 = *v143;
        *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
        long long *v142 = v146;
      }
      else
      {
        uint64_t v167 = *(void **)(a2 + 296);
        uint64_t v168 = *(void *)(a2 + 304);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v167, v168, *v45, BYTE2(v145) & 1);
        *(void *)(a1 + 296) = v167;
        *(void *)(a1 + 304) = v168;
        *(_WORD *)(a1 + 312) = v145;
        *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      }
    }
    else if (*(unsigned __int8 *)(a2 + 314) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v153 = *(_DWORD *)(a2 + 311);
      long long *v142 = *v143;
      *(_DWORD *)(a1 + 311) = v153;
    }
    else
    {
      uint64_t v169 = *(void **)(a2 + 296);
      uint64_t v170 = *(void *)(a2 + 304);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v169, v170, *v45, BYTE2(v145) & 1);
      uint64_t v171 = *(void **)(a1 + 296);
      uint64_t v172 = *(void *)(a1 + 304);
      char v173 = *(unsigned char *)(a1 + 314);
      *(void *)(a1 + 296) = v169;
      *(void *)(a1 + 304) = v170;
      __int16 v174 = *(_WORD *)(a1 + 312);
      *(_WORD *)(a1 + 312) = v145;
      *(unsigned char *)(a1 + 314) = BYTE2(v145) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v171, v172, v174, v173);
    }
    uint64_t v175 = (long long *)(a1 + 320);
    uint64_t v176 = (long long *)(a2 + 320);
    int v177 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (*(unsigned __int8 *)(a1 + 338) == 255)
    {
      if (*(unsigned __int8 *)(a2 + 338) == 255)
      {
        long long v178 = *v176;
        *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
        long long *v175 = v178;
      }
      else
      {
        uint64_t v180 = *(void **)(a2 + 320);
        uint64_t v181 = *(void *)(a2 + 328);
        outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v180, v181, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
        *(void *)(a1 + 320) = v180;
        *(void *)(a1 + 328) = v181;
        *(_WORD *)(a1 + 336) = v177;
        *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      }
    }
    else if (*(unsigned __int8 *)(a2 + 338) == 255)
    {
      outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
      int v179 = *(_DWORD *)(a2 + 335);
      long long *v175 = *v176;
      *(_DWORD *)(a1 + 335) = v179;
    }
    else
    {
      uint64_t v182 = *(void **)(a2 + 320);
      uint64_t v183 = *(void *)(a2 + 328);
      outlined copy of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v182, v183, *(_WORD *)(a2 + 336), BYTE2(v177) & 1);
      unint64_t v184 = *(void **)(a1 + 320);
      uint64_t v185 = *(void *)(a1 + 328);
      char v186 = *(unsigned char *)(a1 + 338);
      *(void *)(a1 + 320) = v182;
      *(void *)(a1 + 328) = v183;
      __int16 v187 = *(_WORD *)(a1 + 336);
      *(_WORD *)(a1 + 336) = v177;
      *(unsigned char *)(a1 + 338) = BYTE2(v177) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v184, v185, v187, v186);
    }
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v188 = *(void *)(a2 + 352);
    *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
    *(void *)(a1 + 352) = v188;
    LOBYTE(v188) = *(unsigned char *)(a2 + 376);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(unsigned char *)(a1 + 376) = v188;
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 400) = *(void *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    long long v149 = *(_OWORD *)(a2 + 312);
    long long v148 = *(_OWORD *)(a2 + 328);
    long long *v142 = *v143;
    *(_OWORD *)(a1 + 312) = v149;
    *(_OWORD *)(a1 + 328) = v148;
    long long v150 = *(_OWORD *)(a2 + 392);
    long long v152 = *(_OWORD *)(a2 + 344);
    long long v151 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v150;
    *(_OWORD *)(a1 + 344) = v152;
    *(_OWORD *)(a1 + 360) = v151;
  }
LABEL_106:
  uint64_t v189 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v190 = *(int *)(v189 + 52);
  uint64_t v191 = (unsigned char *)(a1 + v190);
  uint64_t v192 = (unsigned char *)(a2 + v190);
  uint64_t v193 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v194 = *(void *)(v193 - 8);
  int v195 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v194 + 48);
  int v196 = v195(v191, 1, v193);
  int v197 = v195(v192, 1, v193);
  if (v196)
  {
    if (!v197)
    {
      uint64_t v198 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v198 - 8) + 16))(v191, v192, v198);
      v191[*(int *)(v193 + 20)] = v192[*(int *)(v193 + 20)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v194 + 56))(v191, 0, 1, v193);
      goto LABEL_112;
    }
    goto LABEL_111;
  }
  if (v197)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v191, type metadata accessor for LinkDestination.Configuration);
LABEL_111:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v191, v192, *(void *)(*(void *)(v199 - 8) + 64));
    goto LABEL_112;
  }
  uint64_t v219 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v219 - 8) + 24))(v191, v192, v219);
  v191[*(int *)(v193 + 20)] = v192[*(int *)(v193 + 20)];
LABEL_112:
  *(void *)(a1 + *(int *)(v189 + 56)) = *(void *)(a2 + *(int *)(v189 + 56));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v200 = v253[5];
  uint64_t v201 = a1 + v200;
  uint64_t v202 = a2 + v200;
  *(void *)uint64_t v201 = *(void *)(a2 + v200);
  *(void *)(v201 + 8) = *(void *)(a2 + v200 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v201 + 16) = *(void *)(v202 + 16);
  *(void *)(v201 + 24) = *(void *)(v202 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v203 = *(_OWORD *)(v202 + 32);
  *(unsigned char *)(v201 + 48) = *(unsigned char *)(v202 + 48);
  *(_OWORD *)(v201 + 32) = v203;
  uint64_t v204 = v253[6];
  uint64_t v205 = a1 + v204;
  long long v206 = (long long *)(a2 + v204);
  uint64_t v207 = *(void *)(a1 + v204 + 48);
  uint64_t v208 = *(void *)(a2 + v204 + 48);
  if (v207 != 1)
  {
    if (v208 == 1)
    {
      outlined destroy of CodableAccessibilityValueStorage(v205);
      long long v212 = v206[3];
      long long v214 = *v206;
      long long v213 = v206[1];
      *(_OWORD *)(v205 + 32) = v206[2];
      *(_OWORD *)(v205 + 48) = v212;
      *(_OWORD *)uint64_t v205 = v214;
      *(_OWORD *)(v205 + 16) = v213;
      goto LABEL_139;
    }
    __int16 v217 = *((_WORD *)v206 + 8);
    if (*(unsigned __int8 *)(v205 + 16) != 0xFF)
    {
      if (v217 == 255)
      {
        outlined destroy of AccessibilityText(v205);
        __int16 v226 = *((_WORD *)v206 + 8);
        *(_OWORD *)uint64_t v205 = *v206;
        *(_WORD *)(v205 + 16) = v226;
        goto LABEL_132;
      }
      char v232 = v217 & 1;
      uint64_t v233 = *(void *)v206;
      uint64_t v234 = *((void *)v206 + 1);
      outlined copy of AccessibilityText.Storage(*(void **)v206, v234, v217 & 1);
      uint64_t v235 = *(void **)v205;
      uint64_t v236 = *(void *)(v205 + 8);
      char v237 = *(unsigned char *)(v205 + 16);
      *(void *)uint64_t v205 = v233;
      *(void *)(v205 + 8) = v234;
      *(unsigned char *)(v205 + 16) = v232;
      outlined consume of AccessibilityText.Storage(v235, v236, v237);
    }
    else
    {
      if (v217 == 255)
      {
        long long v218 = *v206;
        *(_WORD *)(v205 + 16) = *((_WORD *)v206 + 8);
        *(_OWORD *)uint64_t v205 = v218;
        goto LABEL_132;
      }
      char v229 = v217 & 1;
      uint64_t v230 = *(void **)v206;
      uint64_t v231 = *((void *)v206 + 1);
      outlined copy of AccessibilityText.Storage(*(void **)v206, v231, v217 & 1);
      *(void *)uint64_t v205 = v230;
      *(void *)(v205 + 8) = v231;
      *(unsigned char *)(v205 + 16) = v229;
    }
    *(unsigned char *)(v205 + 17) = *((unsigned char *)v206 + 17);
LABEL_132:
    uint64_t v238 = (_OWORD *)(v205 + 24);
    uint64_t v239 = (long long *)((char *)v206 + 24);
    uint64_t v240 = *((void *)v206 + 6);
    if (*(void *)(v205 + 48))
    {
      if (v240)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)(v205 + 24), (uint64_t *)v206 + 3);
      }
      else
      {
        outlined destroy of AnyAccessibilityValue(v205 + 24);
        uint64_t v241 = *((void *)v206 + 7);
        long long v242 = *(long long *)((char *)v206 + 40);
        *uint64_t v238 = *v239;
        *(_OWORD *)(v205 + 40) = v242;
        *(void *)(v205 + 56) = v241;
      }
    }
    else if (v240)
    {
      *(void *)(v205 + 48) = v240;
      *(void *)(v205 + 56) = *((void *)v206 + 7);
      (**(void (***)(uint64_t, uint64_t))(v240 - 8))(v205 + 24, (uint64_t)v206 + 24);
    }
    else
    {
      long long v243 = *v239;
      long long v244 = *(long long *)((char *)v206 + 40);
      *(void *)(v205 + 56) = *((void *)v206 + 7);
      *uint64_t v238 = v243;
      *(_OWORD *)(v205 + 40) = v244;
    }
    goto LABEL_139;
  }
  if (v208 == 1)
  {
    long long v209 = *v206;
    long long v210 = v206[1];
    long long v211 = v206[3];
    *(_OWORD *)(v205 + 32) = v206[2];
    *(_OWORD *)(v205 + 48) = v211;
    *(_OWORD *)uint64_t v205 = v209;
    *(_OWORD *)(v205 + 16) = v210;
  }
  else
  {
    __int16 v215 = *((_WORD *)v206 + 8);
    if (*((unsigned char *)v206 + 16) == 0xFF)
    {
      long long v216 = *v206;
      *(_WORD *)(v205 + 16) = *((_WORD *)v206 + 8);
      *(_OWORD *)uint64_t v205 = v216;
    }
    else
    {
      char v220 = v215 & 1;
      long long v221 = *(void **)v206;
      uint64_t v222 = *((void *)v206 + 1);
      outlined copy of AccessibilityText.Storage(*(void **)v206, v222, v215 & 1);
      *(void *)uint64_t v205 = v221;
      *(void *)(v205 + 8) = v222;
      *(unsigned char *)(v205 + 16) = v220;
      *(unsigned char *)(v205 + 17) = *((unsigned char *)v206 + 17);
    }
    long long v223 = (_OWORD *)(v205 + 24);
    long long v224 = (long long *)((char *)v206 + 24);
    uint64_t v225 = *((void *)v206 + 6);
    if (v225)
    {
      *(void *)(v205 + 48) = v225;
      *(void *)(v205 + 56) = *((void *)v206 + 7);
      (**(void (***)(_OWORD *, long long *))(v225 - 8))(v223, v224);
    }
    else
    {
      long long v227 = *v224;
      long long v228 = *(long long *)((char *)v206 + 40);
      *(void *)(v205 + 56) = *((void *)v206 + 7);
      *long long v223 = v227;
      *(_OWORD *)(v205 + 40) = v228;
    }
  }
LABEL_139:
  *(void *)(a1 + v253[7]) = *(void *)(a2 + v253[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v245 = v253[8];
  uint64_t v246 = a1 + v245;
  uint64_t v247 = (long long *)(a2 + v245);
  long long v248 = *v247;
  *(unsigned char *)(v246 + 16) = *((unsigned char *)v247 + 16);
  *(_OWORD *)uint64_t v246 = v248;
  *(void *)(a1 + v253[9]) = *(void *)(a2 + v253[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v253[10]) = *(unsigned char *)(a2 + v253[10]);
  *(unsigned char *)(a1 + v253[11]) = *(unsigned char *)(a2 + v253[11]);
  *(void *)(a1 + v253[12]) = *(void *)(a2 + v253[12]);
  swift_retain();
  swift_release();
  uint64_t v249 = v253[13];
  uint64_t v250 = (void *)(a1 + v249);
  uint64_t v251 = (void *)(a2 + v249);
  *uint64_t v250 = *v251;
  v250[1] = v251[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v253[14]) = *(unsigned char *)(a2 + v253[14]);
  return a1;
}

uint64_t initializeWithTake for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v7;
  memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
  uint64_t v8 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v9 = *(int *)(v8 + 52);
  int v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v10, v11, v15);
    *((unsigned char *)v10 + *(int *)(v12 + 20)) = *((unsigned char *)v11 + *(int *)(v12 + 20));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)(a1 + *(int *)(v8 + 56)) = *(void *)(a2 + *(int *)(v8 + 56));
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  long long v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v20;
  *(_OWORD *)(v18 + 32) = *(_OWORD *)(v19 + 32);
  *(unsigned char *)(v18 + 48) = *(unsigned char *)(v19 + 48);
  int v21 = (_OWORD *)(a1 + v17);
  long long v22 = (_OWORD *)(a2 + v17);
  long long v23 = v22[1];
  *int v21 = *v22;
  v21[1] = v23;
  long long v24 = v22[3];
  void v21[2] = v22[2];
  uint64_t v21[3] = v24;
  uint64_t v25 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  uint64_t v28 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v28) = *(unsigned char *)(a2 + v28);
  uint64_t v29 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v29) = *(void *)(a2 + v29);
  uint64_t v30 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v30) = *(unsigned char *)(a2 + v30);
  return a1;
}

uint64_t assignWithTake for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  long long v7 = (_OWORD *)(a2 + 16);
  if (*(unsigned __int8 *)(a1 + 34) == 255) {
    goto LABEL_4;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32) | (*(unsigned __int8 *)(a2 + 34) << 16);
  if (HIWORD(v8) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 16, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v7;
    *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
    goto LABEL_6;
  }
  int v9 = *(unsigned __int16 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 34) << 16);
  int v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *v7;
  *(_WORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 34) = BYTE2(v8) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v10, v11, v9, BYTE2(v9) & 1);
LABEL_6:
  uint64_t v12 = (_OWORD *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 58) == 255)
  {
LABEL_9:
    *(_OWORD *)(a1 + 40) = *v12;
    *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
    goto LABEL_11;
  }
  unsigned int v13 = *(unsigned __int16 *)(a2 + 56) | (*(unsigned __int8 *)(a2 + 58) << 16);
  if (HIWORD(v13) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 40, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_9;
  }
  int v14 = *(unsigned __int16 *)(a1 + 56) | (*(unsigned __int8 *)(a1 + 58) << 16);
  uint64_t v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *v12;
  *(_WORD *)(a1 + 56) = v13;
  *(unsigned char *)(a1 + 58) = BYTE2(v13) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v15, v16, v14, BYTE2(v14) & 1);
LABEL_11:
  uint64_t v17 = (_OWORD *)(a2 + 64);
  if (*(unsigned __int8 *)(a1 + 82) == 255)
  {
LABEL_14:
    *(_OWORD *)(a1 + 64) = *v17;
    *(_DWORD *)(a1 + 79) = *(_DWORD *)(a2 + 79);
    goto LABEL_16;
  }
  unsigned int v18 = *(unsigned __int16 *)(a2 + 80) | (*(unsigned __int8 *)(a2 + 82) << 16);
  if (HIWORD(v18) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 64, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_14;
  }
  int v19 = *(unsigned __int16 *)(a1 + 80) | (*(unsigned __int8 *)(a1 + 82) << 16);
  long long v20 = *(void **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v17;
  *(_WORD *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 82) = BYTE2(v18) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v20, v21, v19, BYTE2(v19) & 1);
LABEL_16:
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  long long v22 = (_OWORD *)(a2 + 144);
  uint64_t v93 = a3;
  if (*(void *)(a1 + 232) == 1)
  {
LABEL_19:
    memcpy((void *)(a1 + 144), (const void *)(a2 + 144), 0x108uLL);
    goto LABEL_20;
  }
  if (*(void *)(a2 + 232) == 1)
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration(a1 + 144);
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(a1 + 162) == 255) {
    goto LABEL_33;
  }
  unsigned int v44 = *(unsigned __int16 *)(a2 + 160) | (*(unsigned __int8 *)(a2 + 162) << 16);
  if (HIWORD(v44) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 144, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
LABEL_33:
    *(_OWORD *)(a1 + 144) = *v22;
    *(_DWORD *)(a1 + 159) = *(_DWORD *)(a2 + 159);
    goto LABEL_40;
  }
  int v48 = *(unsigned __int16 *)(a1 + 160) | (*(unsigned __int8 *)(a1 + 162) << 16);
  uint64_t v49 = *(void **)(a1 + 144);
  uint64_t v50 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *v22;
  *(_WORD *)(a1 + 160) = v44;
  *(unsigned char *)(a1 + 162) = BYTE2(v44) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v49, v50, v48, BYTE2(v48) & 1);
LABEL_40:
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  long long v51 = (_OWORD *)(a1 + 184);
  int v52 = (_OWORD *)(a2 + 184);
  if (!*(void *)(a1 + 232))
  {
LABEL_51:
    long long v56 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v56;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    long long v57 = *(_OWORD *)(a2 + 200);
    _OWORD *v51 = *v52;
    *(_OWORD *)(a1 + 200) = v57;
    long long v58 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v58;
    goto LABEL_62;
  }
  if (!*(void *)(a2 + 232))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 184);
    goto LABEL_51;
  }
  if (*(unsigned __int8 *)(a1 + 202) == 255)
  {
LABEL_45:
    _OWORD *v51 = *v52;
    *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
    goto LABEL_56;
  }
  unsigned int v53 = *(unsigned __int16 *)(a2 + 200) | (*(unsigned __int8 *)(a2 + 202) << 16);
  if (HIWORD(v53) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 184, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_45;
  }
  int v71 = *(unsigned __int16 *)(a1 + 200) | (*(unsigned __int8 *)(a1 + 202) << 16);
  uint64_t v72 = *(void **)(a1 + 184);
  uint64_t v73 = *(void *)(a1 + 192);
  *(_OWORD *)(a1 + 184) = *v52;
  *(_WORD *)(a1 + 200) = v53;
  *(unsigned char *)(a1 + 202) = BYTE2(v53) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v72, v73, v71, BYTE2(v71) & 1);
LABEL_56:
  uint64_t v74 = (_OWORD *)(a2 + 208);
  if (*(unsigned __int8 *)(a1 + 226) != 255)
  {
    unsigned int v75 = *(unsigned __int16 *)(a2 + 224) | (*(unsigned __int8 *)(a2 + 226) << 16);
    if (HIWORD(v75) <= 0xFEu)
    {
      int v76 = *(unsigned __int16 *)(a1 + 224) | (*(unsigned __int8 *)(a1 + 226) << 16);
      long long v77 = *(void **)(a1 + 208);
      uint64_t v78 = *(void *)(a1 + 216);
      *(_OWORD *)(a1 + 208) = *v74;
      *(_WORD *)(a1 + 224) = v75;
      *(unsigned char *)(a1 + 226) = BYTE2(v75) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v77, v78, v76, BYTE2(v76) & 1);
      goto LABEL_61;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 208, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 208) = *v74;
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
LABEL_61:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
LABEL_62:
  long long v79 = (_OWORD *)(a2 + 296);
  long long v80 = (_OWORD *)(a1 + 296);
  if (!*(void *)(a1 + 344))
  {
LABEL_69:
    long long v82 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v82;
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    long long v83 = *(_OWORD *)(a2 + 312);
    _OWORD *v80 = *v79;
    *(_OWORD *)(a1 + 312) = v83;
    long long v84 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v84;
    goto LABEL_20;
  }
  if (!*(void *)(a2 + 344))
  {
    outlined destroy of CodableAccessibilityDataSeriesConfiguration.AxisConfiguration(a1 + 296);
    goto LABEL_69;
  }
  if (*(unsigned __int8 *)(a1 + 314) == 255)
  {
LABEL_67:
    _OWORD *v80 = *v79;
    *(_DWORD *)(a1 + 311) = *(_DWORD *)(a2 + 311);
    goto LABEL_71;
  }
  unsigned int v81 = *(unsigned __int16 *)(a2 + 312) | (*(unsigned __int8 *)(a2 + 314) << 16);
  if (HIWORD(v81) > 0xFEu)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 296, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
    goto LABEL_67;
  }
  int v85 = *(unsigned __int16 *)(a1 + 312) | (*(unsigned __int8 *)(a1 + 314) << 16);
  uint64_t v86 = *(void **)(a1 + 296);
  uint64_t v87 = *(void *)(a1 + 304);
  _OWORD *v80 = *v79;
  *(_WORD *)(a1 + 312) = v81;
  *(unsigned char *)(a1 + 314) = BYTE2(v81) & 1;
  outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v86, v87, v85, BYTE2(v85) & 1);
LABEL_71:
  uint64_t v88 = (_OWORD *)(a2 + 320);
  if (*(unsigned __int8 *)(a1 + 338) != 255)
  {
    unsigned int v89 = *(unsigned __int16 *)(a2 + 336) | (*(unsigned __int8 *)(a2 + 338) << 16);
    if (HIWORD(v89) <= 0xFEu)
    {
      int v90 = *(unsigned __int16 *)(a1 + 336) | (*(unsigned __int8 *)(a1 + 338) << 16);
      char v91 = *(void **)(a1 + 320);
      uint64_t v92 = *(void *)(a1 + 328);
      *(_OWORD *)(a1 + 320) = *v88;
      *(_WORD *)(a1 + 336) = v89;
      *(unsigned char *)(a1 + 338) = BYTE2(v89) & 1;
      outlined consume of CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>(v91, v92, v90, BYTE2(v90) & 1);
      goto LABEL_76;
    }
    outlined destroy of CodableAccessibilityAttachmentStorage(a1 + 320, (uint64_t (*)(void))type metadata accessor for CodableAccessibilityVersionStorage<CodableResolvedStyledText, AccessibilityText>);
  }
  *(_OWORD *)(a1 + 320) = *v88;
  *(_DWORD *)(a1 + 335) = *(_DWORD *)(a2 + 335);
LABEL_76:
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(unsigned char *)(a1 + 360) = *(unsigned char *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
LABEL_20:
  uint64_t v23 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v24 = *(int *)(v23 + 52);
  uint64_t v25 = (unsigned char *)(a1 + v24);
  uint64_t v26 = (unsigned char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for LinkDestination.Configuration(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (v30)
  {
    if (!v31)
    {
      uint64_t v32 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(v25, v26, v32);
      v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v31)
  {
    outlined destroy of CodableAccessibilityAttachmentStorage((uint64_t)v25, type metadata accessor for LinkDestination.Configuration);
LABEL_25:
    type metadata accessor for LinkDestination.Configuration?(0);
    memcpy(v25, v26, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_26;
  }
  uint64_t v47 = type metadata accessor for URL();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v47 - 8) + 40))(v25, v26, v47);
  v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
LABEL_26:
  *(void *)(a1 + *(int *)(v23 + 56)) = *(void *)(a2 + *(int *)(v23 + 56));
  swift_bridgeObjectRelease();
  uint64_t v34 = v93[5];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = *(void *)(a2 + v34 + 8);
  *(void *)uint64_t v35 = *(void *)(a2 + v34);
  *(void *)(v35 + 8) = v37;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v36 + 24);
  *(void *)(v35 + 16) = *(void *)(v36 + 16);
  *(void *)(v35 + 24) = v38;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v35 + 48) = *(unsigned char *)(v36 + 48);
  *(_OWORD *)(v35 + 32) = *(_OWORD *)(v36 + 32);
  uint64_t v39 = v93[6];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  if (*(void *)(a1 + v39 + 48) == 1)
  {
LABEL_29:
    long long v42 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v42;
    long long v43 = *(_OWORD *)(v41 + 48);
    *(_OWORD *)(v40 + 32) = *(_OWORD *)(v41 + 32);
    *(_OWORD *)(v40 + 48) = v43;
    goto LABEL_54;
  }
  if (*(void *)(v41 + 48) == 1)
  {
    outlined destroy of CodableAccessibilityValueStorage(v40);
    goto LABEL_29;
  }
  __int16 v45 = *(_WORD *)(v40 + 16);
  if (*(unsigned char *)(v40 + 16) != 0xFF)
  {
    __int16 v46 = *(_WORD *)(v41 + 16);
    if ((_BYTE)v46 != 0xFF)
    {
      int v54 = *(void **)v40;
      uint64_t v55 = *(void *)(v40 + 8);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *(unsigned char *)(v40 + 16) = v46 & 1;
      outlined consume of AccessibilityText.Storage(v54, v55, v45 & 1);
      *(unsigned char *)(v40 + 17) = *(unsigned char *)(v41 + 17);
      goto LABEL_47;
    }
    outlined destroy of AccessibilityText(v40);
  }
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_WORD *)(v40 + 16) = *(_WORD *)(v41 + 16);
LABEL_47:
  if (*(void *)(v40 + 48))
  {
    if (*(void *)(v41 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(v40 + 24);
    }
    else {
      outlined destroy of AnyAccessibilityValue(v40 + 24);
    }
  }
  long long v59 = *(_OWORD *)(v41 + 40);
  *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
  *(_OWORD *)(v40 + 40) = v59;
  *(void *)(v40 + 56) = *(void *)(v41 + 56);
LABEL_54:
  *(void *)(a1 + v93[7]) = *(void *)(a2 + v93[7]);
  swift_bridgeObjectRelease();
  uint64_t v60 = v93[8];
  uint64_t v61 = v93[9];
  uint64_t v62 = a1 + v60;
  uint64_t v63 = a2 + v60;
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
  *(unsigned char *)(v62 + 16) = *(unsigned char *)(v63 + 16);
  *(void *)(a1 + v61) = *(void *)(a2 + v61);
  swift_bridgeObjectRelease();
  uint64_t v64 = v93[11];
  *(unsigned char *)(a1 + v93[10]) = *(unsigned char *)(a2 + v93[10]);
  *(unsigned char *)(a1 + v64) = *(unsigned char *)(a2 + v64);
  *(void *)(a1 + v93[12]) = *(void *)(a2 + v93[12]);
  swift_release();
  uint64_t v65 = v93[13];
  long long v66 = (void *)(a1 + v65);
  int v67 = (uint64_t *)(a2 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  *long long v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + v93[14]) = *(unsigned char *)(a2 + v93[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2461767F8);
}

uint64_t sub_2461767F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for CodableAccessibilityAttachmentStorage.V3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2461768DC);
}

uint64_t sub_2461768DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for CodableAccessibilityAttachmentStorage.V3()
{
  uint64_t result = type metadata accessor for CodableAccessibilityAttachmentStorage.VBase(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableAccessibilityUIKitTraits()
{
  return &type metadata for CodableAccessibilityUIKitTraits;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityNodeAttachment.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246176B28);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AccessibilityNodeAttachment.Error()
{
  return &unk_26FA6EE30;
}

void *initializeBufferWithCopyOfBuffer for CodableAccessibilityVersionStorage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for CodableAccessibilityVersionStorage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t initializeWithCopy for CodableAccessibilityVersionStorage(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithCopy for CodableAccessibilityVersionStorage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t initializeWithTake for CodableAccessibilityVersionStorage(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for CodableAccessibilityVersionStorage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableAccessibilityVersionStorage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for CodableAccessibilityVersionStorage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x2461778F4);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CodableAccessibilityVersionStorage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityNodeAttachment.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246177AB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityNodeAttachment.Kind.CodingKeys()
{
  return &unk_26FA6ECB8;
}

void *type metadata accessor for AccessibilityNodeAttachment.Kind.StandardCodingKeys()
{
  return &unk_26FA6ED48;
}

void *type metadata accessor for AccessibilityNodeAttachment.Kind.PlaceholderCodingKeys()
{
  return &unk_26FA6ED68;
}

uint64_t instantiation function for generic protocol witness table for CodableAccessibilityVersionStorage<A, B>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized AccessibilityNodeAttachment.Kind.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x647261646E617473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F686563616C70 && a2 == 0xEB00000000726564)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t lazy protocol witness table accessor for type [AccessibilityChildBehaviorKind] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityChildBehaviorKind] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityChildBehaviorKind] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [AccessibilityChildBehaviorKind], (uint64_t)&type metadata for AccessibilityChildBehaviorKind, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AccessibilityChildBehaviorKind and conformance AccessibilityChildBehaviorKind();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityChildBehaviorKind] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for CodableAccessibilityVersionStorage<CodableAccessibilityAttachmentStorage.V2, CodableAccessibilityAttachmentStorage.V3>?(uint64_t a1)
{
}

uint64_t outlined destroy of CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of CodableAccessibilityAttachmentStorage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityNodeAttachment.Kind] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityNodeAttachment.Kind] and conformance <A> [A])
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for [AccessibilityNodeAttachment.Kind], (uint64_t)&type metadata for AccessibilityNodeAttachment.Kind, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AccessibilityNodeAttachment.Kind and conformance AccessibilityNodeAttachment.Kind();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityNodeAttachment.Kind] and conformance <A> [A]);
  }
  return result;
}

uint64_t sub_2461786BC()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_246178704()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of AccessibilityCustomContentEntry.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for [ResolvableAttributeConfiguration](uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ResolvableAttributeConfiguration and conformance ResolvableAttributeConfiguration()
{
  return lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration(&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration and conformance ResolvableAttributeConfiguration, (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration);
}

void type metadata accessor for [JSONCodable<Swift.AnyObject>](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for JSONCodable<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for JSONCodable);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for CodableAccessibilityValueStorage?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [JSONCodable<Swift.AnyObject>] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [JSONCodable<Swift.AnyObject>] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [JSONCodable<Swift.AnyObject>] and conformance <A> [A])
  {
    type metadata accessor for [JSONCodable<Swift.AnyObject>](255, &lazy cache variable for type metadata for [JSONCodable<Swift.AnyObject>], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type JSONCodable<Swift.AnyObject> and conformance JSONCodable<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [JSONCodable<Swift.AnyObject>] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSONCodable<Swift.AnyObject> and conformance JSONCodable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type JSONCodable<Swift.AnyObject> and conformance JSONCodable<A>;
  if (!lazy protocol witness table cache variable for type JSONCodable<Swift.AnyObject> and conformance JSONCodable<A>)
  {
    type metadata accessor for CodableAccessibilityValueStorage?(255, &lazy cache variable for type metadata for JSONCodable<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for JSONCodable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSONCodable<Swift.AnyObject> and conformance JSONCodable<A>);
  }
  return result;
}

void type metadata accessor for [JSONCodable<[String : CGFloat]>](uint64_t a1)
{
}

uint64_t outlined init with copy of AccessibilityNodeAttachment.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [AccessibilityNodeAttachment.Kind?] and conformance <A> [A](unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LinkDestination.Configuration and conformance LinkDestination.Configuration(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _HueRotationEffect.angle.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*_HueRotationEffect.angle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _HueRotationEffect.animatableData.getter(double a1)
{
  return a1 * 128.0;
}

double _HueRotationEffect.animatableData.setter(double a1)
{
  double result = a1 * 0.0078125;
  *unint64_t v1 = result;
  return result;
}

double (*_HueRotationEffect.animatableData.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 * 128.0;
  return Angle.animatableData.modify;
}

double _HueRotationEffect.effectValue(size:)@<D0>(uint64_t a1@<X8>, double a2@<D2>)
{
  uint64_t v4 = swift_allocObject();
  *(double *)(v4 + 16) = a2;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 6;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t sub_246178D14()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

BOOL static _HueRotationEffect.== infix(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

double protocol witness for _RendererEffect.effectValue(size:) in conformance _HueRotationEffect@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double result = 0.0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(unsigned char *)(v4 + 132) = 6;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 9;
  return result;
}

uint64_t View.hueRotation(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View.modifier<A>(_:)(&v3, a1, &type metadata for _HueRotationEffect);
}

double sub_246178E38@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 * 128.0;
  *a2 = result;
  return result;
}

double sub_246178E50(double *a1, double *a2)
{
  double result = *a1 * 0.0078125;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for _HueRotationEffect()
{
  return &type metadata for _HueRotationEffect;
}

uint64_t sub_246178E78()
{
  return swift_getWitnessTable();
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  uint64_t v2 = *v0;
  Swift::UInt64 v1 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *v0 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(v1, v3), (v5 & 1) != 0))
  {
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(*(void *)v4 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v1, v3);
      if (v6)
      {
        swift_endAccess();
        return 0;
      }
    }
  }
  else
  {
    swift_endAccess();
    __break(1u);
  }
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  Swift::UInt64 v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48 * v2;
  char v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  if (__OFADD__(v4, v5)) {
    goto LABEL_7;
  }
  uint64_t result = *(void *)(v1 + 72);
  if (v4 + v5 < result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  unint64_t v4 = *(void *)(*(void *)(v3 + 48) + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;

  unint64_t v4 = *(void *)(*(void *)(v3 + 8) + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;

  unint64_t v4 = *(void *)(*(void *)(v3 + 8) + 16);
  if (v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= (unint64_t)a2) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_10:
  uint64_t v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_16:
  }
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 16);
  BOOL v6 = __OFADD__(a4, v5);
  uint64_t v7 = a4 + v5;
  if (v6)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v7 < a3 || a3 < a4 || result < a4 || v7 < result) {
    goto LABEL_25;
  }
  uint64_t v11 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (a2 >= 1)
  {
    if (v11 < 0 || v11 >= (unint64_t)a2) {
      goto LABEL_20;
    }
    return 0;
  }
  if (v11 <= 0 && v11 > a2) {
    return 0;
  }
LABEL_20:
  BOOL v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    return result;
  }
  if (result < a4 || v7 < result) {
    goto LABEL_28;
  }
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v4 = *(void *)(a4 + 24);
  if (v4 < a3 || v5 > a3 || v5 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= (unint64_t)a2) {
      goto LABEL_19;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_19:
  BOOL v10 = __OFADD__(result, a2);
  result += a2;
  if (v10)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }
  if (result < v5 || v4 < result) {
    goto LABEL_26;
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = a3 - result;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v8 <= 0 && v8 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v9 = __OFADD__(result, a2);
  result += a2;
  if (v9) {
    goto LABEL_16;
  }
  if (result > v6) {
LABEL_17:
  }
    __break(1u);
  return result;
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = *(id *)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  int v9 = *(unsigned __int8 *)(v3 + 16);
  if (v9)
  {
    BOOL v10 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v10)
    {
      if (a1)
      {
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    BOOL v10 = (const __CTLine *)v7;
  }
  CFArrayRef RunCount = _CTLineGetRunCount(v10);

  if (a1 < 0 || (uint64_t)RunCount < a1) {
    goto LABEL_31;
  }
  if (!v9)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    uint64_t v12 = (const __CTLine *)v7;
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v12 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
  if (v12)
  {
LABEL_12:
    CFArrayRef v13 = _CTLineGetRunCount(v12);

    goto LABEL_13;
  }
  CFArrayRef v13 = 0;
LABEL_13:
  if (a3 < 0 || (uint64_t)v13 < a3) {
    goto LABEL_32;
  }
  uint64_t v14 = a3 - a1;
  if (a2 < 1)
  {
    if (v14 <= 0 && v14 > a2) {
      return;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0 && v14 < a2)
  {
    return;
  }
  BOOL v15 = __OFADD__(a1, a2);
  uint64_t v16 = a1 + a2;
  if (v15)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  if ((v9 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    goto LABEL_27;
  }
  id v7 = (id)_NSTextLineFragmentGetCTLine(v7);
  if (v7)
  {
LABEL_27:
    CFArrayRef v17 = _CTLineGetRunCount((const __CTLine *)v7);

    goto LABEL_28;
  }
  CFArrayRef v17 = 0;
LABEL_28:
  if (v16 < 0 || (uint64_t)v17 < v16) {
    goto LABEL_34;
  }
}

void specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(CFIndex a1, uint64_t a2, CFIndex a3)
{
  id v7 = *(const __CTLine **)v3;
  CFIndex v8 = *(void *)(v3 + 8);
  int v9 = (id)_CTLineGetRunAtIndex(v7, v8);
  CFIndex GlyphCount = CTRunGetGlyphCount((CTRunRef)v9);

  if (a1 < 0 || GlyphCount < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v11 = (id)_CTLineGetRunAtIndex(v7, v8);
  CFIndex v12 = CTRunGetGlyphCount((CTRunRef)v11);

  if (a3 < 0 || v12 < a3) {
    goto LABEL_17;
  }
  uint64_t v13 = a3 - a1;
  if (a2 < 1)
  {
    if (v13 > 0 || v13 <= a2)
    {
LABEL_12:
      BOOL v14 = __OFADD__(a1, a2);
      CFIndex v15 = a1 + a2;
      if (!v14)
      {
        uint64_t v16 = (id)_CTLineGetRunAtIndex(v7, v8);
        CFIndex v17 = CTRunGetGlyphCount((CTRunRef)v16);

        if ((v15 & 0x8000000000000000) == 0 && v17 >= v15) {
          return;
        }
LABEL_19:
        __break(1u);
        return;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  else if (v13 < 0 || v13 >= a2)
  {
    goto LABEL_12;
  }
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t result = swift_beginAccess();
  unint64_t v9 = *(void *)(*(void *)(v7 + 160) + 16);
  if (v9 < a1)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v9 < a3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v10 <= 0 && v10 > a2) {
    return 0;
  }
LABEL_10:
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (result > v9) {
LABEL_16:
  }
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v8 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v9 = v3[3];
  uint64_t v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  uint64_t v11 = ViewList.count.getter(v9, v10);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v8);
  if (a1 < 0 || v11 < a1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  _MovableLockLock(v8);
  specialized static Update.begin()();
  uint64_t v13 = v4[3];
  uint64_t v14 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v13);
  uint64_t v15 = ViewList.count.getter(v13, v14);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v8);
  if (a3 < 0 || v15 < a3) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 - a1;
  if (a2 >= 1)
  {
    if (v16 < 0 || v16 >= a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v16 <= 0 && v16 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v18 = __OFADD__(a1, a2);
  uint64_t v17 = a1 + a2;
  if (v18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  _MovableLockLock(v8);
  specialized static Update.begin()();
  uint64_t v19 = v4[3];
  uint64_t v20 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v19);
  uint64_t v21 = ViewList.count.getter(v19, v20);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v8);
  if ((v17 & 0x8000000000000000) == 0 && v21 >= v17) {
    return v17;
  }
LABEL_21:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(void);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v3 + 88);
  uint64_t result = v7();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = v7();
  if (a3 < 0 || result < a3) {
    goto LABEL_17;
  }
  uint64_t v9 = a3 - a1;
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_12:
  uint64_t v11 = __OFADD__(a1, a2);
  uint64_t v10 = a1 + a2;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = v7();
  if ((v10 & 0x8000000000000000) == 0 && result >= v10) {
    return v10;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)a4 + 88);
  uint64_t result = v7();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = v7();
  if (a3 < 0 || result < a3) {
    goto LABEL_17;
  }
  uint64_t v9 = a3 - a1;
  if (a2 >= 1)
  {
    if (v9 < 0 || v9 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v9 <= 0 && v9 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v11 = __OFADD__(a1, a2);
  uint64_t v10 = a1 + a2;
  if (v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = v7();
  if ((v10 & 0x8000000000000000) == 0 && result >= v10) {
    return v10;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection.underestimatedCount.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48 * v2;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v1 + 72);
  if (v7 < v8)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t result = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *v2;
    Swift::UInt64 v4 = v2[1];
    uint64_t v6 = v2[2];
    uint64_t v7 = *v2 + 48;
    swift_beginAccess();
    if (!*(void *)(*(void *)(v5 + 48) + 16)) {
      goto LABEL_10;
    }
    specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
    swift_endAccess();
    swift_beginAccess();
    uint64_t v9 = *(void *)v7;
    if (!*(void *)(*(void *)v7 + 16)) {
      goto LABEL_11;
    }
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v11 & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 16 * v10);
    swift_endAccess();
    if (v3 <= *(void *)(v12 + 16)) {
      return v3;
    }
  }
  __break(1u);
LABEL_10:
  swift_endAccess();
  __break(1u);
LABEL_11:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  unint64_t v3 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 48 * v6;
    uint64_t v9 = *(void *)(v7 + 16);
    char v8 = *(void *)(v7 + 24);
    unint64_t v3 = __OFADD__(v8, v9);
    unint64_t v10 = v8 + v9;
    if (v3)
    {
LABEL_11:
      __break(1u);
      return result;
    }
    char v11 = *(void *)(v5 + 72);
    if (v10 < result)
    {
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  else
  {
    char v11 = 0;
    if (result > 0) {
      goto LABEL_10;
    }
  }
  if (result < v11) {
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v2;
  Swift::UInt64 v5 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = *v2 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)(v6 + 48) + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
    if (v9)
    {
      swift_endAccess();
      swift_beginAccess();
      uint64_t v10 = *(void *)v8;
      if (!*(void *)(*(void *)v8 + 16)) {
        goto LABEL_15;
      }
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
      if ((v12 & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v11);
      swift_endAccess();
      if (*(void *)(v13 + 16) < a1)
      {
        __break(1u);
      }
      else
      {
        swift_beginAccess();
        if (!*(void *)(*(void *)v8 + 16)) {
          goto LABEL_16;
        }
        specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
        if ((v14 & 1) == 0) {
          goto LABEL_16;
        }
        swift_endAccess();
        swift_beginAccess();
        uint64_t v15 = *(void *)v8;
        if (!*(void *)(*(void *)v8 + 16)) {
          goto LABEL_17;
        }
        unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
        uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 16 * v16);
        swift_endAccess();
        if (*(void *)(v18 + 16) >= a2) {
          return a2 - a1;
        }
      }
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_15:
  swift_endAccess();
  __break(1u);
LABEL_16:
  swift_endAccess();
  __break(1u);
LABEL_17:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;

  Swift::UInt64 v5 = *v2;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)(v5 + 160) + 16);
  if (v7 < a1)
  {
    __break(1u);
  }
  else if (v7 >= a2)
  {
    return a2 - a1;
  }
  __break(1u);
  return result;
}

void specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  id v5 = *(id *)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  int v7 = *(unsigned __int8 *)(v2 + 16);
  if (v7)
  {
    uint64_t v8 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v5);
    if (!v8)
    {
      if (a1)
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v5, v6, 0);
    swift_release();
    uint64_t v8 = (const __CTLine *)v5;
  }
  CFArrayRef RunCount = _CTLineGetRunCount(v8);

  if (a1 < 0 || (uint64_t)RunCount < a1) {
    goto LABEL_16;
  }
  if (!v7)
  {
    outlined copy of Text.Layout.Line.Line(v5, v6, 0);
    swift_release();
    goto LABEL_12;
  }
LABEL_9:
  id v5 = (id)_NSTextLineFragmentGetCTLine(v5);
  if (v5)
  {
LABEL_12:
    CFArrayRef v10 = _CTLineGetRunCount((const __CTLine *)v5);

    goto LABEL_13;
  }
  CFArrayRef v10 = 0;
LABEL_13:
  if (a2 < 0 || (uint64_t)v10 < a2) {
    goto LABEL_17;
  }
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 48 * v4;
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v6 = *(void *)(v5 + 24);
    BOOL v8 = __OFADD__(v6, v7);
    uint64_t v9 = v6 + v7;
    if (v8)
    {
LABEL_18:
      __break(1u);
      return result;
    }
    uint64_t v10 = *(void *)(v3 + 72);
    if (v9 < result || v10 > result) {
      goto LABEL_15;
    }
    if (v10 > a2) {
      goto LABEL_16;
    }
  }
  else
  {
    if (result)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    uint64_t v9 = 0;
    if (a2 < 0)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  if (v9 < a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, result);
  uint64_t result = a2 - result;
  if (v8)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24) >> 1;
  uint64_t v5 = __OFSUB__(v4, v3);
  uint64_t v6 = v4 - v3;
  if (v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v5 = __OFADD__(v7, v6);
  BOOL v8 = v7 + v6;
  if (v5)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v8 >= a2 && v7 <= a2 && v7 <= result && v8 >= result) {
    return a2 - result;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t)v3;
  Swift::UInt64 v8 = v3[1];
  uint64_t v9 = v3[2];
  uint64_t v10 = *v3 + 48;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
    if (v11)
    {
      swift_endAccess();
      swift_beginAccess();
      uint64_t v12 = *(void *)v10;
      if (!*(void *)(*(void *)v10 + 16)) {
        goto LABEL_10;
      }
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
      if ((v14 & 1) == 0) {
        goto LABEL_10;
      }
      uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 16 * v13);
      swift_endAccess();
      if ((a1 & 0x8000000000000000) == 0 && *(void *)(v15 + 16) >= a2)
      {
        type metadata accessor for Slice<Text.Effect.BaseContent>(0);
        uint64_t result = _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v4, (uint64_t)a3 + *(int *)(v16 + 40), type metadata accessor for Text.Effect.BaseContent);
        *a3 = a1;
        a3[1] = a2;
        return result;
      }
      __break(1u);
    }
  }
  swift_endAccess();
  __break(1u);
LABEL_10:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

void specialized Collection<>.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void **)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  char v9 = *(unsigned char *)(v3 + 16);
  long long v13 = *(_OWORD *)(v3 + 24);
  int v10 = *(_DWORD *)(v3 + 40);
  if (v9)
  {
    char v11 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v7);
    if (!v11)
    {
      uint64_t RunCount = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v7, v8, 0);
    swift_release();
    char v11 = (const __CTLine *)v7;
  }
  uint64_t RunCount = (uint64_t)_CTLineGetRunCount(v11);

  if (RunCount < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
LABEL_6:
  if (a1 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (RunCount < a2)
  {
LABEL_13:
    __break(1u);
    return;
  }
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(unsigned char *)(a3 + 32) = v9;
  *(_OWORD *)(a3 + 40) = v13;
  *(_DWORD *)(a3 + 56) = v10;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;

  outlined copy of Text.Layout.Line.Line(v7, v8, v9);
}

uint64_t specialized Collection<>.subscript.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = specialized Dictionary.startIndex.getter(*v2);
  if (v8) {
    goto LABEL_17;
  }
  int v9 = *(_DWORD *)(v5 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v10 = result;
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  if (v11 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v15 = *a1;
  char v16 = *((unsigned char *)a1 + 16);
  outlined init with take of [String : AccessibilityCustomAttributes.Value].Index._Variant((uint64_t)&v15, (uint64_t)v17);
  uint64_t result = outlined init with take of [String : AccessibilityCustomAttributes.Value].Index._Variant((uint64_t)v17, (uint64_t)&v18);
  if (v20)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  long long v12 = *(long long *)((char *)a1 + 24);
  char v13 = *((unsigned char *)a1 + 40);
  if (v19 != v9) {
    goto LABEL_13;
  }
  if (v18 < v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  outlined init with take of [String : AccessibilityCustomAttributes.Value].Index._Variant((uint64_t)&v12, (uint64_t)v14);
  uint64_t result = outlined init with take of [String : AccessibilityCustomAttributes.Value].Index._Variant((uint64_t)v14, (uint64_t)&v21);
  if ((v23 & 1) == 0)
  {
    if (v9 == v22)
    {
      if (v11 >= v21)
      {
        *(void *)(a2 + 48) = v5;
        *(_OWORD *)a2 = v15;
        *(unsigned char *)(a2 + 16) = v16;
        *(_OWORD *)(a2 + 24) = v12;
        *(unsigned char *)(a2 + 40) = v13;
        return swift_bridgeObjectRetain();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (!v6)
  {
    if (a1 >= 0)
    {
LABEL_5:
      if (v6 >= a2)
      {
        a3[1] = a2;
        a3[2] = result;
        *a3 = a1;
        return swift_bridgeObjectRetain();
      }
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v7 = result + 48 * v6;
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  BOOL v10 = __OFADD__(v8, v9);
  uint64_t v6 = v8 + v9;
  if (!v10)
  {
    uint64_t v11 = *(void *)(result + 72);
    if (v6 < v11)
    {
LABEL_9:
      __break(1u);
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
    if (v11 <= a1) {
      goto LABEL_5;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v7 = *(unsigned __int8 *)(v3 + 32);
  BOOL v8 = __OFADD__(v7, v6);
  uint64_t v9 = v7 + v6;
  if (v8)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v9 < v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v9 >= a2)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v3;
    *(void *)(a3 + 32) = v4;
    *(void *)(a3 + 40) = v5;
    *(unsigned char *)(a3 + 48) = v7;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = a2;
    return swift_unknownObjectRetain();
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t SectionAccumulator.Item.count.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 + 48 * v2;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v1 + 72);
  if (v7 < v8)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t result = v7 - v8;
  if (__OFSUB__(v7, v8))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t SectionAccumulator.Item.Features.rawValue.getter()
{
  return *v0;
}

uint64_t SectionAccumulator.Item.Features.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static SectionAccumulator.Item.Features.implicit.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void SectionAccumulator.Item.features.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SectionAccumulator.Item.features.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*SectionAccumulator.Item.features.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.list.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyTrackedValue(v1 + 8, a1);
}

uint64_t SectionAccumulator.Item.list.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of ScrollStateRequest(a1, v3);
}

uint64_t (*SectionAccumulator.Item.list.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *SectionAccumulator.Item.contentSubgraph.getter()
{
  uint64_t v1 = *(void **)(v0 + 48);
  id v2 = v1;
  return v1;
}

void SectionAccumulator.Item.contentSubgraph.setter(uint64_t a1)
{
  *(void *)(v1 + 48) = a1;
}

uint64_t (*SectionAccumulator.Item.contentSubgraph.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.sectionList.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(v1 + 80);
  return outlined copy of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(v2, v3);
}

__n128 SectionAccumulator.Item.sectionList.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of (key: Text.Effect.StopKey, segment: Text.Effect.StopCollector.Segment, indices: Set<Text.Effect.ClusterIndex>)?(*(void *)(v1 + 56), *(void *)(v1 + 64));
  __n128 result = v5;
  *(__n128 *)(v1 + 56) = v5;
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 80) = v3;
  return result;
}

uint64_t (*SectionAccumulator.Item.sectionList.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.transform.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 88);
  return swift_bridgeObjectRetain();
}

uint64_t SectionAccumulator.Item.transform.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = v2;
  return result;
}

uint64_t (*SectionAccumulator.Item.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.ids.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 96);
  return swift_bridgeObjectRetain();
}

uint64_t SectionAccumulator.Item.ids.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = v2;
  return result;
}

uint64_t (*SectionAccumulator.Item.ids.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.headerCount.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t SectionAccumulator.Item.headerCount.setter(uint64_t result)
{
  *(void *)(v1 + 104) = result;
  return result;
}

uint64_t (*SectionAccumulator.Item.headerCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.footerCount.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t SectionAccumulator.Item.footerCount.setter(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t (*SectionAccumulator.Item.footerCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.id.getter()
{
  return *(unsigned int *)(v0 + 120);
}

uint64_t SectionAccumulator.Item.id.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 120) = result;
  return result;
}

uint64_t (*SectionAccumulator.Item.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.Item.start.getter()
{
  return *(void *)(v0 + 128);
}

uint64_t SectionAccumulator.Item.start.setter(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t (*SectionAccumulator.Item.start.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL SectionAccumulator.Item.hasRows.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return v2 > 0;
  }
  uint64_t v3 = v1 + 48 * v2;
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v4 = *(void *)(v3 + 24);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(v1 + 72);
  if (v7 >= v8)
  {
    BOOL v6 = __OFSUB__(v7, v8);
    uint64_t v2 = v7 - v8;
    if (!v6) {
      return v2 > 0;
    }
    __break(1u);
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t SectionAccumulator.RowIDs.init(list:listAttribute:start:count:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_2461B9DC0;
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v13);
  uint64_t v12 = MEMORY[0x263F8EE78];
  SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(v13, a2 | ((HIDWORD(a2) & 1) << 32), &v12, a3, a4, 0, v10 + 32);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  *a5 = v10;
  return result;
}

uint64_t SectionAccumulator.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SectionAccumulator.viewCount.getter()
{
  return *(void *)(v0 + 80);
}

uint64_t SectionAccumulator.appendImplicitSection()()
{
  outlined init with copy of ViewList?((uint64_t)(v0 + 3), (uint64_t)&v21);
  if (!v22)
  {
    outlined destroy of ViewList?((uint64_t)&v21);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_12;
  }
  outlined init with take of ScrollStateRequest(&v21, (uint64_t)v34);
  uint64_t v1 = v0[2];
  uint64_t v2 = *v0;
  outlined init with copy of AnyTrackedValue((uint64_t)v34, (uint64_t)v19);
  uint64_t v3 = (void *)v0[9];
  unint64_t v4 = v3[2];
  if (HIDWORD(v4))
  {
LABEL_12:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = (void *)v0[8];
  LOBYTE(v21) = 1;
  outlined init with take of ScrollStateRequest(v19, (uint64_t)&v21 + 8);
  char v23 = v5;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v29 = v2;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v32 = v4;
  uint64_t v33 = v1;
  outlined init with copy of SectionAccumulator.Item((uint64_t)&v21, (uint64_t)v19);
  id v6 = v5;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, v3);
  }
  unint64_t v8 = v3[2];
  unint64_t v7 = v3[3];
  if (v8 >= v7 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v3);
  }
  v3[2] = v8 + 1;
  uint64_t v9 = &v3[17 * v8];
  *((_OWORD *)v9 + 2) = v19[0];
  long long v10 = v19[1];
  long long v11 = v19[2];
  long long v12 = v19[4];
  *((_OWORD *)v9 + 5) = v19[3];
  *((_OWORD *)v9 + 6) = v12;
  *((_OWORD *)v9 + 3) = v10;
  *((_OWORD *)v9 + 4) = v11;
  long long v13 = v19[5];
  long long v14 = v19[6];
  long long v15 = v19[7];
  v9[20] = v20;
  *((_OWORD *)v9 + 8) = v14;
  *((_OWORD *)v9 + 9) = v15;
  *((_OWORD *)v9 + 7) = v13;
  v0[9] = (uint64_t)v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v0;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v17 + 16));
  }
  else
  {
    *uint64_t v0 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v17 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  outlined destroy of SectionAccumulator.Item((uint64_t)&v21);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  v0[1] = 0;
  return result;
}

uint64_t SectionAccumulator.RowIDs.init(chunks:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SectionAccumulator.RowIDs.Chunk.ids.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  return outlined copy of SectionAccumulator.RowIDs.IDs(v2, v3, v4, v5);
}

__n128 SectionAccumulator.RowIDs.Chunk.ids.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  outlined consume of SectionAccumulator.RowIDs.IDs(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t (*SectionAccumulator.RowIDs.Chunk.ids.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.RowIDs.Chunk.count.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SectionAccumulator.RowIDs.Chunk.count.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*SectionAccumulator.RowIDs.Chunk.count.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t SectionAccumulator.RowIDs.Chunk.lowerBound.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t SectionAccumulator.RowIDs.Chunk.lowerBound.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*SectionAccumulator.RowIDs.Chunk.lowerBound.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (void *)*a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v7;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    unint64_t v7 = (void *)result;
    *a2 = result;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    unint64_t v7 = (void *)result;
    *a2 = result;
  }
  unsigned int v7[2] = v10 + 1;
  long long v11 = &v7[2 * v10];
  v11[4] = v5;
  v11[5] = v6;
  uint64_t v12 = *a3 - 1;
  if (__OFSUB__(*a3, 1))
  {
    __break(1u);
  }
  else
  {
    *a3 = v12;
    return v12 != 0;
  }
  return result;
}

double SectionAccumulator.RowIDs.init(ids:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>);
  uint64_t v4 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_2461B9DC0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 32) = a1;
  *(unsigned char *)(v4 + 56) = 1;
  *(void *)(v4 + 64) = v6;
  *(void *)(v4 + 72) = 0;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(before:)(*a1);
  *a2 = result;
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance SectionAccumulator.RowIDs(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v3 = result;
    if (*(void *)(*(void *)v1 + 16)) {
      uint64_t v4 = *(void *)(*(void *)v1 + 72);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t result = (uint64_t *)SectionAccumulator.RowIDs.endIndex.getter();
    if (v2 >= v4 && v2 < (uint64_t)result)
    {
      *unsigned __int8 v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance SectionAccumulator.RowIDs(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], a2);
}

uint64_t protocol witness for Collection.indices.getter in conformance SectionAccumulator.RowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance SectionAccumulator.RowIDs(uint64_t *a1)
{
  uint64_t v3 = *a1;
  if (*(void *)(*(void *)v1 + 16)) {
    uint64_t v4 = *(void *)(*(void *)v1 + 72);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = SectionAccumulator.RowIDs.endIndex.getter();
  if (v3 >= v4 && v3 < result) {
    *a1 = v3 + 1;
  }
  else {
    __break(1u);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance SectionAccumulator.RowIDs(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3) {
    uint64_t v3 = *(void *)(v2 + 72);
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionAccumulator.RowIDs()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SectionAccumulator.TransformedIDs.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[1];
  (*(void (**)(long long *__return_ptr))(*(void *)*v1 + 96))(&v15);
  int v4 = v15;
  int v5 = DWORD1(v15);
  uint64_t v6 = *((void *)&v15 + 1);
  long long v15 = xmmword_24619B550;
  int v16 = v4;
  int v17 = v5;
  int v19 = &type metadata for EmptyViewListElements;
  uint64_t v18 = v6;
  uint64_t v20 = &protocol witness table for EmptyViewListElements;
  uint64_t v21 = MEMORY[0x263F8EE78];
  int v22 = 0;
  char v23 = 1;
  uint64_t v7 = *(void *)(v3 + 16);
  if (v7)
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = v3 + 40 * v7 - 8;
    while (v7 <= *(void *)(v3 + 16))
    {
      --v7;
      outlined init with copy of AnyTrackedValue(v9, (uint64_t)v12);
      uint64_t v10 = v13;
      uint64_t v11 = v14;
      __swift_project_boxed_opaque_existential_1(v12, v13);
      (*(void (**)(long long *, uint64_t, uint64_t))(v11 + 8))(&v15, v10, v11);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      v9 -= 40;
      if (!v7)
      {
        swift_bridgeObjectRelease();
        int v4 = v16;
        int v5 = v17;
        uint64_t v6 = v18;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v5;
    *(void *)(a1 + 8) = v6;
    swift_bridgeObjectRetain();
    return outlined destroy of _ViewList_Sublist((uint64_t)&v15);
  }
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance SectionAccumulator.TransformedIDs(uint64_t a1))()
{
  return destroy for HostPreferencesCombiner;
}

uint64_t protocol witness for Collection.subscript.getter in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = *v2;
  uint64_t v8 = v3[1];
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v7 + 88))();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2[2] = v7;
  a2[3] = v8;
  *a2 = v6;
  a2[1] = v5;
  swift_retain();

  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance SectionAccumulator.TransformedIDs()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() == 0;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance SectionAccumulator.TransformedIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance SectionAccumulator.TransformedIDs()
{
  uint64_t v1 = *(uint64_t (**)(void))(**(void **)v0 + 88);
  uint64_t v2 = v1();
  uint64_t result = v1();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = v1();
    if ((v2 & 0x8000000000000000) == 0 && result >= v2) {
      return v2;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SectionAccumulator.TransformedIDs()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SectionAccumulator.TransformedIDs(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t partial apply for closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(uint64_t *a1)
{
  return closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(a1, *(uint64_t **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void type metadata accessor for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>)
  {
    lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs();
    lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs();
    unint64_t v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features;
  if (!lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionAccumulator.Item.Features and conformance SectionAccumulator.Item.Features);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionAccumulator.RowIDs>(255, &lazy cache variable for type metadata for Slice<SectionAccumulator.RowIDs>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, (uint64_t)&type metadata for SectionAccumulator.RowIDs, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.RowIDs> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SectionAccumulator.RowIDs>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SectionAccumulator.RowIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<SectionAccumulator.RowIDs> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SectionAccumulator.RowIDs>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionAccumulator.RowIDs> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionAccumulator.RowIDs>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.RowIDs and conformance SectionAccumulator.RowIDs, (uint64_t)&type metadata for SectionAccumulator.RowIDs, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  int v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = a2 + 24;
  uint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 24, v5, v6);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    _OWORD *v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(void *)(a1 + 56) = *(void *)(v5 + 32);
  }
  uint64_t v9 = *(void **)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  id v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v4)
    {
      *(void *)(a1 + 48) = v4;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 40) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  uint64_t v7 = *(void **)(a1 + 64);
  long long v8 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v8;
  id v9 = v8;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v6 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v5;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for SectionAccumulator()
{
  return &type metadata for SectionAccumulator;
}

ValueMetadata *type metadata accessor for SectionAccumulator.Item.Features()
{
  return &type metadata for SectionAccumulator.Item.Features;
}

uint64_t initializeWithCopy for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of SectionAccumulator.RowIDs.IDs(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator.RowIDs.IDs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of SectionAccumulator.RowIDs.IDs(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionAccumulator.RowIDs.IDs(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionAccumulator.RowIDs.IDs(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs.IDs()
{
  return &type metadata for SectionAccumulator.RowIDs.IDs;
}

uint64_t initializeWithCopy for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of SectionAccumulator.RowIDs.IDs(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  char v11 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of SectionAccumulator.RowIDs.IDs(v8, v9, v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SectionAccumulator.RowIDs.Chunk(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  char v9 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of SectionAccumulator.RowIDs.IDs(v6, v7, v8, v9);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionAccumulator.RowIDs.Chunk(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionAccumulator.RowIDs.Chunk(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionAccumulator.RowIDs.Chunk()
{
  return &type metadata for SectionAccumulator.RowIDs.Chunk;
}

ValueMetadata *type metadata accessor for SectionAccumulator.TransformedIDs()
{
  return &type metadata for SectionAccumulator.TransformedIDs;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<SectionAccumulator.TransformedIDs>, MEMORY[0x263F8DE58]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<SectionAccumulator.TransformedIDs>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<SectionAccumulator.TransformedIDs> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionAccumulator.RowIDs>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, (uint64_t)&type metadata for SectionAccumulator.TransformedIDs, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<SectionAccumulator.RowIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in SectionAccumulator.TransformedIDs()
{
  return lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs);
}

uint64_t lazy protocol witness table accessor for type Slice<SectionAccumulator.TransformedIDs> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<SectionAccumulator.RowIDs>(255, &lazy cache variable for type metadata for Slice<SectionAccumulator.TransformedIDs>, (uint64_t (*)(void))lazy protocol witness table accessor for type SectionAccumulator.TransformedIDs and conformance SectionAccumulator.TransformedIDs, (uint64_t)&type metadata for SectionAccumulator.TransformedIDs, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ViewList?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI8ViewList_pSgMaTm_0(0, &lazy cache variable for type metadata for ViewList?, (uint64_t (*)(uint64_t))type metadata accessor for ViewList, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24617C8D8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI8ViewList_pSgMaTm_0(0, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (uint64_t (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>), MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24617C9B4()
{
  return swift_getWitnessTable();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnchorGeometryTransform<A>()
{
  return specialized AnchorGeometryTransform.description.getter();
}

uint64_t sub_24617CA34()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t specialized AnchorGeometryTransform.description.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

uint64_t sub_24617CB00()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:)(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a1, a2);
}

{
  return _ViewInputs.base.modify(a1, a2);
}

uint64_t ViewGraphFeature.uninstantiate(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ViewInputs.base.modify(a2, a3);
}

uint64_t ViewGraphFeature.allowsAsyncUpdate(graph:)()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
}

uint64_t ViewGraphFeature.needsUpdate(graph:)()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance ContentSizedSceneFeature<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ViewInputs.base.modify(a1, a3);
}

uint64_t ViewGraphFeature.modifyViewInputs(inputs:graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ViewInputs.base.modify(a1, a3);
}

uint64_t protocol witness for ViewGraphFeature.allowsAsyncUpdate(graph:) in conformance ContentSizedSceneFeature<A>()
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance _DisplayList_Identity.CodingKeys();
}

void *protocol witness for Collection.subscript.read in conformance ViewGraphFeatureBuffer(void *result, uint64_t a2)
{
  if (*v2)
  {
    *uint64_t result = *v2 + *(int *)(a2 + 4);
    return _ViewInputs.base.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

long long *protocol witness for Collection.subscript.getter in conformance ViewGraphFeatureBuffer@<X0>(long long *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(v2 + 12);
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  long long v4 = *result;
  if ((*result & 0x80000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= SDWORD2(v4))
  {
    int v5 = *(_DWORD *)(v2 + 8);
    *(void *)(a2 + 16) = *(void *)v2;
    *(_DWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 28) = v3;
    *(_OWORD *)a2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ViewGraphFeatureBuffer@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*a1, a2, *(void *)v3, *(void *)(v3 + 8), a3);
}

unint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ViewGraphFeatureBuffer@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *(void *)v4, *(void *)(v4 + 8), a4);
}

unint64_t protocol witness for Collection.distance(from:to:) in conformance ViewGraphFeatureBuffer(unint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2, *v2, v2[1]);
}

_DWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance ViewGraphFeatureBuffer(_DWORD *result, _DWORD *a2)
{
  if (*result < *a2 || a2[2] < result[2]) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance ViewGraphFeatureBuffer()
{
  uint64_t result = *(unsigned int *)(v0 + 12);
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (!result) {
      return 0;
    }
    uint64_t v2 = *(unsigned int *)(v0 + 12);
    while (*(void *)v0)
    {
      if (!--v2) {
        return result;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ViewGraphFeatureBuffer()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ViewGraphFeatureBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t dispatch thunk of ViewGraphFeature.modifyViewInputs(inputs:graph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ViewGraphFeature.uninstantiate(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ViewGraphFeature.isHiddenForReuseDidChange(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ViewGraphFeature.allowsAsyncUpdate(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ViewGraphFeature.needsUpdate(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ViewGraphFeature.update(graph:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

ValueMetadata *type metadata accessor for ViewGraphFeatureBuffer()
{
  return &type metadata for ViewGraphFeatureBuffer;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ViewGraphFeatureBuffer()
{
  return lazy protocol witness table accessor for type IndexingIterator<ViewGraphFeatureBuffer> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<ViewGraphFeatureBuffer> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<ViewGraphFeatureBuffer>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer;
  if (!lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer;
  if (!lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ViewGraphFeatureBuffer()
{
  return lazy protocol witness table accessor for type IndexingIterator<ViewGraphFeatureBuffer> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<ViewGraphFeatureBuffer> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<ViewGraphFeatureBuffer>, MEMORY[0x263F8D0E0]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<ViewGraphFeatureBuffer> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<ViewGraphFeatureBuffer>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in ViewGraphFeatureBuffer()
{
  return lazy protocol witness table accessor for type IndexingIterator<ViewGraphFeatureBuffer> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<ViewGraphFeatureBuffer> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<ViewGraphFeatureBuffer>, MEMORY[0x263F8E738]);
}

void type metadata accessor for IndexingIterator<ViewGraphFeatureBuffer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ViewGraphFeatureBuffer and conformance ViewGraphFeatureBuffer();
    unint64_t v7 = a3(a1, &type metadata for ViewGraphFeatureBuffer, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ViewGraphFeatureBuffer.Element()
{
  return &type metadata for ViewGraphFeatureBuffer.Element;
}

void SubgraphDestroyPublishers.subscribe(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  uint64_t v9 = (void **)(v4 + 16);
  swift_beginAccess();
  id v10 = a1;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *((void *)a1 + v14) = v12;
    goto LABEL_10;
  }
  char v18 = v13;
  if (v12[3] >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
    if ((v18 & 1) != (v20 & 1))
    {
      type metadata accessor for AGSubgraphRef(0);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    unint64_t v14 = v19;
  }
  *uint64_t v9 = v12;
  swift_bridgeObjectRelease();
  uint64_t v21 = (uint64_t)*v9;
  if ((v18 & 1) == 0)
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v10, MEMORY[0x263F8EE78], *v9);
    id v22 = v10;
  }
  a1 = *(void **)(v21 + 56);
  uint64_t v12 = (void *)*((void *)a1 + v14);
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)a1 + v14) = v12;
  if ((v23 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_10:
  unint64_t v25 = v12[2];
  unint64_t v24 = v12[3];
  if (v25 >= v24 >> 1)
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v12);
    *((void *)a1 + v14) = v12;
  }
  void v12[2] = v25 + 1;
  uint64_t v26 = &v12[2 * v25];
  v26[4] = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed ResponderNode) -> ();
  v26[5] = v8;
  swift_endAccess();
}

uint64_t SubgraphDestroyPublishers.didDestroy(subgraph:)(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  id v5 = a1;
  if (!v4)
  {
LABEL_6:

    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v9 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(*(void *)(v3 + 56) + 8 * v6);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v10 = v8 + 40;
  do
  {
    uint64_t v11 = *(void (**)(id *))(v10 - 8);
    v14[0] = v5;
    swift_retain();
    v11(v14);
    swift_release();
    v10 += 16;
    --v9;
  }
  while (v9);
LABEL_9:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  id v12 = v5;
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v12);
  swift_endAccess();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SubgraphDestroyPublishers()
{
  return self;
}

uint64_t type metadata completion function for SubgraphLifetime()
{
  return swift_initClassMetadata2();
}

uint64_t SubgraphLifetime.reset()()
{
  type metadata accessor for AGSubgraphRef(255);
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  *(void *)(v0 + 16) = v1;
  swift_bridgeObjectRelease();
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  *(void *)(v0 + 32) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t SubgraphLifetime.deinit()
{
  SubgraphLifetime.reset()();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SubgraphLifetime.__deallocating_deinit()
{
  SubgraphLifetime.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SubgraphLifetime()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AttributeInfoTrace.ScopeStack.reset()()
{
  swift_beginAccess();
  uint64_t v1 = MEMORY[0x263F8EE78];
  v0[5] = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[2];
  swift_retain();
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v2 + 16) = v3;
  swift_bridgeObjectRelease();
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v2 + 32) = v4;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0[3];
  swift_retain();
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v5 + 16) = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v5 + 32) = v7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0[4];
  swift_retain();
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v8 + 16) = v9;
  swift_bridgeObjectRelease();
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  swift_beginAccess();
  *(void *)(v8 + 32) = v10;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t AttributeInfoTrace.ScopeStack.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t AttributeInfoTrace.Scope.__deallocating_deinit()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = v0[2];
    uint64_t v3 = v0[6];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized AttributeInfoTrace.HistoryTracker.modify(name:body:)(v2, v1, v3, (uint64_t)v0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall AttributeInfoTrace.uninstall()()
{
  uint64_t v1 = (void *)v0;
  swift_beginAccess();
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  uint64_t v2 = *(void *)(v0 + 72);
  swift_retain();
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  swift_beginAccess();
  *(void *)(v2 + 16) = v3;
  swift_release();
  swift_bridgeObjectRelease();
  if (v1[5])
  {
    swift_retain();
    AttributeInfoTrace.ScopeStack.reset()();
    swift_release();
    uint64_t v4 = v1[10];
    unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_beginAccess();
    *(void *)(v4 + 16) = v5;
    swift_bridgeObjectRelease();
    if (v1[3])
    {
      AGGraphRemoveTrace();
      unint64_t v6 = (void *)v1[3];
    }
    else
    {
      unint64_t v6 = 0;
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  else
  {
    __break(1u);
  }
}

uint64_t AttributeInfoTrace.__deallocating_deinit()
{
  AttributeInfoTrace.uninstall()();
  MEMORY[0x24C527CC0](*(void *)(v0 + 16), -1, -1);

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AttributeInfoTrace()
{
  return self;
}

uint64_t type metadata accessor for AttributeInfoTrace.HistoryTracker()
{
  return self;
}

uint64_t type metadata accessor for AttributeInfoTrace.ScopeStack()
{
  return self;
}

uint64_t type metadata accessor for AttributeInfoTrace.Scope()
{
  return self;
}

ValueMetadata *type metadata accessor for AttributeInfoTrace.History()
{
  return &type metadata for AttributeInfoTrace.History;
}

uint64_t specialized AttributeInfoTrace.HistoryTracker.modify(name:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = (void **)(a3 + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void **)(a3 + 16);
  unint64_t v25 = v11;
  *(void *)(a3 + 16) = 0x8000000000000000;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_11;
  }
  char v4 = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_12;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v4 & 1) != (v18 & 1))
    {
      swift_release();
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v13 = v17;
  }
  while (1)
  {
    *unint64_t v9 = v11;
    swift_bridgeObjectRelease();
    uint64_t v19 = (uint64_t)*v9;
    if ((v4 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v13, a1, a2, 0, 0, *v9);
      swift_bridgeObjectRetain();
    }
    char v20 = (_DWORD *)(*(void *)(v19 + 56) + 12 * v13);
    int v21 = *(_DWORD *)(a4 + 56);
    BOOL v22 = __CFADD__(*v20, v21);
    int v23 = *v20 + v21;
    if (!v22) {
      break;
    }
LABEL_11:
    __break(1u);
LABEL_12:
    specialized _NativeDictionary.copy()();
    uint64_t v11 = v25;
  }
  *char v20 = v23;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24617DB34()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t static ViewRendererHost.makeRootView<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.modifier<A>(_:)(a1, a3, &type metadata for HitTestBindingModifier);
}

uint64_t specialized ViewRendererHost.initializeViewGraph()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v26 - v7;
  uint64_t v9 = *(void *)(v1 + 16);
  swift_beginAccess();
  *(void *)(v9 + 208) = &protocol witness table for EmptyViewRendererHost;
  swift_unknownObjectWeakAssign();
  uint64_t v10 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  uint64_t result = kdebug_is_enabled();
  if (result)
  {
    uint64_t v12 = one-time initialization token for _signpostLog;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    id v13 = (id)_signpostLog;
    OSSignpostID.init(log:object:)();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    swift_beginAccess();
    uint64_t result = *(void *)(v9 + 16);
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t Counter = AGGraphGetCounter();
    uint64_t v16 = MEMORY[0x263F8D9D0];
    *(void *)(inited + 72) = v1;
    uint64_t v17 = MEMORY[0x263F8DA20];
    *(void *)(inited + 56) = v16;
    *(void *)(inited + 64) = v17;
    *(void *)(inited + 32) = Counter;
    *(void *)(inited + 96) = v16;
    *(void *)(inited + 104) = v17;
    char v27 = v8;
    uint64_t v28 = v3;
    char v18 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v19 = swift_initStackObject();
    long long v29 = xmmword_2461BE2B0;
    *(_OWORD *)(v19 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v20 = v19;
      outlined init with copy of AnyTrackedValue(inited + 32, v19 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v26[1] = inited;
        uint64_t v10 = v10 | 0x14110024u;
        outlined init with copy of AnyTrackedValue(inited + 72, v20 + 72);
        *(_OWORD *)(v20 + 128) = 0u;
        *(void *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v10, v20, v10, (uint64_t)v5);
        outlined init with copy of CVarArg?(v20 + 112, (uint64_t)v30);
        swift_bridgeObjectRelease();
        if (!v31)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v30);
          swift_bridgeObjectRelease();
          unint64_t v25 = *(void (**)(char *, uint64_t))(v28 + 8);
          v25(v27, v2);
          return ((uint64_t (*)(char *, uint64_t))v25)(v5, v2);
        }
        ++v18;
        outlined destroy of CVarArg?((uint64_t)v30);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          BOOL v22 = *v18;
          while (1)
          {
            v22(v5, v21, v2);
            uint64_t v23 = swift_initStackObject();
            *(_OWORD *)(v23 + 16) = v29;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)(v23 + 64) = 0u;
            *(_OWORD *)(v23 + 80) = 0u;
            *(_OWORD *)(v23 + 96) = 0u;
            *(_OWORD *)(v23 + 128) = 0u;
            *(void *)(v23 + 144) = 0;
            *(_OWORD *)(v23 + 112) = 0u;
            uint64_t v24 = v23 + 112;
            specialized withKDebugValues(_:_:closure:)(v10, v23, v10, (uint64_t)v5);
            outlined init with copy of CVarArg?(v24, (uint64_t)v30);
            swift_bridgeObjectRelease();
            if (!v31) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v30);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v21 = __swift_project_value_buffer(v2, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_18:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

uint64_t protocol witness for EventGraphHost.responderNode.getter in conformance CAHostingLayer<A1>(uint64_t a1)
{
  return ViewRendererHost.responderNode.getter(a1, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t protocol witness for EventGraphHost.nextGestureUpdateTime.getter in conformance CAHostingLayer<A1>@<X0>(void *a1@<X8>)
{
  return ViewRendererHost.nextGestureUpdateTime.getter((uint64_t)&protocol witness table for CAHostingLayer<A>, a1);
}

uint64_t ViewRendererHost.nextGestureUpdateTime.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(void))(a1 + 16))();
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 400);
  uint64_t result = swift_release();
  *a2 = v4;
  return result;
}

void protocol witness for EventGraphHost.setInheritedPhase(_:) in conformance CAHostingLayer<A1>(SwiftUI::_GestureInputs::InheritedPhase a1)
{
}

Swift::Void __swiftcall ViewRendererHost.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
  (*(void (**)())(v1 + 16))();
  AGGraphSetValue();
  swift_release();
}

uint64_t protocol witness for EventGraphHost.sendEvents(_:rootNode:at:) in conformance CAHostingLayer<A1>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return ViewRendererHost.sendEvents(_:rootNode:at:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t ViewRendererHost.sendEvents(_:rootNode:at:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a3;
  _OWORD v11[2] = a1;
  long long v11[3] = a2;
  v11[4] = v6;
  uint64_t v7 = *(void *)(a5 + 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t (*)@<X0>(unsigned char *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v7 + 24);
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  return v8(partial apply for closure #1 in ViewRendererHost.sendEvents(_:rootNode:at:), v11, v9, a4, v7);
}

void protocol witness for EventGraphHost.resetEvents() in conformance CAHostingLayer<A1>()
{
}

Swift::Void __swiftcall ViewRendererHost.resetEvents()()
{
  (*(void (**)(void))(v0 + 16))();
  ViewGraph.resetEvents()();

  swift_release();
}

unint64_t protocol witness for EventGraphHost.gestureCategory() in conformance CAHostingLayer<A1>()
{
  return (unint64_t)ViewRendererHost.gestureCategory()();
}

SwiftUI::GestureCategory_optional __swiftcall ViewRendererHost.gestureCategory()()
{
  uint64_t v2 = v1;
  int v3 = *(_DWORD *)((*(uint64_t (**)(void))(v0 + 16))() + 300);
  int v4 = *MEMORY[0x263F288F8];
  if (v3 == *MEMORY[0x263F288F8]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)AGGraphGetValue();
  }
  Swift::Int v6 = swift_release();
  *(void *)uint64_t v2 = v5;
  *(unsigned char *)(v2 + 8) = v3 == v4;
  result.value.rawuint64_t Value = v6;
  result.is_nil = v7;
  return result;
}

uint64_t specialized ViewRendererHost.updateTransform()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = AGGraphGetValueState();
  if ((result & 1) == 0)
  {
    swift_retain();
    AGGraphInvalidateValue();
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v3 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 16))(ObjectType);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall ViewRendererHost.updateTransform()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(v0 + 16))();
  if (AGGraphGetValueState())
  {
  }
  else
  {
    AGGraphInvalidateValue();
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_release();
      swift_unknownObjectRelease();
      return;
    }
  }
  swift_release();
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance CAHostingLayer<A1>(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ViewRendererHost.updateViewGraph<A>(body:)(a1, a2, a4, a4, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

void protocol witness for GraphDelegate.graphDidChange() in conformance CAHostingLayer<A1>()
{
}

Swift::Void __swiftcall ViewRendererHost.advanceTimeForTest(interval:)(Swift::Double interval)
{
  if (interval < 0.0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v3 = v2;
    uint64_t v4 = v1;
    (*(void (**)(double *__return_ptr))(v2 + 24))(&v7);
    double v6 = v7 + interval;
    if (v7 + interval == v7) {
      double v6 = nextafter(v6, INFINITY);
    }
    double v7 = v6;
    (*(void (**)(double *, uint64_t, uint64_t))(v3 + 32))(&v7, v4, v3);
  }
}

void protocol witness for TestHost.sendTestEvents(_:) in conformance CAHostingLayer<A1>(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall ViewRendererHost.sendTestEvents(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + 16))(v10, v6, v6, v4);
  if (v10[0])
  {
    uint64_t v7 = v10[1];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
    swift_unknownObjectRelease();
    swift_weakInit();
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v9 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      EventBindingManager.sendDownstream(_:)((uint64_t)a1._rawValue);
      swift_release();
    }
    static Update.end()();
    _MovableLockUnlock(v9);
    swift_weakDestroy();
    swift_release();
    swift_bridgeObjectRelease();
  }
}

void protocol witness for TestHost.resetTestEvents() in conformance CAHostingLayer<A1>()
{
}

Swift::Void __swiftcall ViewRendererHost.resetTestEvents()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)(v2 + 8) + 16))(v7, v4, v4, v3);
  if (v7[0])
  {
    uint64_t v5 = v7[1];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
    swift_unknownObjectRelease();
    EventBindingManager.reset(resetForwardedEventDispatchers:)(0);
    swift_release();
  }
}

uint64_t protocol witness for TestHost.invalidateProperties(_:mayDeferUpdate:) in conformance CAHostingLayer<A1>(unsigned __int16 *a1, char a2, uint64_t a3)
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(a1, a2, a3, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t static ViewGraph.viewRendererHost.getter()
{
  uint64_t v0 = specialized static ViewGraph.current.getter() + 200;
  swift_beginAccess();
  uint64_t v1 = MEMORY[0x24C527E00](v0);
  swift_release();
  if (!v1) {
    return 0;
  }
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t result = v1;
  }
  else {
    uint64_t result = 0;
  }
  if (!result)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return result;
}

Swift::Void __swiftcall ViewRendererHost.startProfiling()()
{
  ViewRendererHost.startProfiling()(v0, v1, MEMORY[0x263F28910]);
}

Swift::Void __swiftcall ViewRendererHost.stopProfiling()()
{
  ViewRendererHost.startProfiling()(v0, v1, MEMORY[0x263F28918]);
}

uint64_t protocol witness for ViewRendererHost.responderNode.getter in conformance ImageRendererHost<A>(uint64_t a1, uint64_t a2)
{
  return ViewRendererHost.responderNode.getter(*v2, a2);
}

void protocol witness for ViewRendererHost.updateTransform() in conformance ImageRendererHost<A>()
{
}

uint64_t ViewRendererHostProperties.rawValue.getter()
{
  return *v0;
}

uint64_t ViewRendererHostProperties.init(rawValue:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ViewRendererHostProperties.rootView.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

void static ViewRendererHostProperties.environment.getter(_WORD *a1@<X8>)
{
  *a1 = 2;
}

void static ViewRendererHostProperties.transform.getter(_WORD *a1@<X8>)
{
  *a1 = 4;
}

void static ViewRendererHostProperties.size.getter(_WORD *a1@<X8>)
{
  *a1 = 8;
}

void static ViewRendererHostProperties.safeArea.getter(_WORD *a1@<X8>)
{
  *a1 = 16;
}

void static ViewRendererHostProperties.containerSize.getter(_WORD *a1@<X8>)
{
  *a1 = 32;
}

void static ViewRendererHostProperties.focusStore.getter(_WORD *a1@<X8>)
{
  *a1 = 64;
}

void static ViewRendererHostProperties.focusedItem.getter(_WORD *a1@<X8>)
{
  *a1 = 128;
}

void static ViewRendererHostProperties.focusedValues.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

BOOL static ViewRenderingPhase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ViewRenderingPhase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ViewRenderingPhase.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized closure #1 in ViewRendererHost.updateViewGraph<A>(body:)(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = swift_beginAccess();
  uint64_t v3 = *(unsigned __int16 *)(a1 + 24);
  if (*(_WORD *)(a1 + 24))
  {
    MEMORY[0x270FA5388](v2);
    v10[8] = v3;
    uint64_t v11 = a1;
    if (objc_msgSend(self, sel_isMainThread))
    {
      specialized closure #1 in ViewRendererHost.updateGraph()(v3, a1);
    }
    else
    {
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = partial apply for specialized closure #1 in ViewRendererHost.updateGraph();
      *(void *)(v4 + 24) = v10;
      id v5 = (id)AGSubgraphGetCurrent();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      v12[0] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v12[1] = v4;
      id v13 = v5;
      int v14 = CurrentAttribute;
      uint64_t v7 = one-time initialization token for _lock;
      swift_retain();
      if (v7 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)v12, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
  swift_retain();
  GraphHost.flushTransactions()();
  return swift_release();
}

uint64_t specialized ViewRendererHost.updateGraph()()
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = swift_beginAccess();
  uint64_t v2 = *(unsigned __int16 *)(v0 + 24);
  if (*(_WORD *)(v0 + 24))
  {
    MEMORY[0x270FA5388](result);
    v8[8] = v2;
    uint64_t v9 = v0;
    if (objc_msgSend(self, sel_isMainThread))
    {
      return specialized closure #1 in ViewRendererHost.updateGraph()(v2, v0);
    }
    else
    {
      uint64_t v3 = swift_allocObject();
      *(void *)(v3 + 16) = closure #1 in ViewRendererHost.updateGraph()specialized partial apply;
      *(void *)(v3 + 24) = v8;
      id v4 = (id)AGSubgraphGetCurrent();
      Currentuint64_t Attribute = AGGraphGetCurrentAttribute();
      v10[0] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v10[1] = v3;
      id v11 = v4;
      int v12 = CurrentAttribute;
      uint64_t v6 = one-time initialization token for _lock;
      swift_retain();
      if (v6 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)v10, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t specialized closure #1 in ViewRendererHost.updateGraph()(uint64_t result, uint64_t a2)
{
  __int16 v3 = result;
  if (result)
  {
    uint64_t result = swift_beginAccess();
    __int16 v4 = *(_WORD *)(a2 + 24);
    if (v4) {
      *(_WORD *)(a2 + 24) = v4 & 0xFFFE;
    }
  }
  if ((v3 & 2) != 0)
  {
    uint64_t result = swift_beginAccess();
    __int16 v5 = *(_WORD *)(a2 + 24);
    if ((v5 & 2) != 0) {
      *(_WORD *)(a2 + 24) = v5 & 0xFFFD;
    }
  }
  if ((v3 & 4) == 0) {
    goto LABEL_13;
  }
  swift_beginAccess();
  __int16 v6 = *(_WORD *)(a2 + 24);
  if ((v6 & 4) != 0) {
    *(_WORD *)(a2 + 24) = v6 & 0xFFFB;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t result = AGGraphGetValueState();
  if (result)
  {
LABEL_13:
    if ((v3 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  swift_retain();
  swift_retain();
  AGGraphInvalidateValue();
  swift_beginAccess();
  if (MEMORY[0x24C527E00](v7 + 200))
  {
    uint64_t v8 = *(void *)(v7 + 208);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v8 + 8) + 16))(ObjectType);
    swift_release();
    swift_release();
    uint64_t result = swift_unknownObjectRelease();
    goto LABEL_13;
  }
  swift_release();
  uint64_t result = swift_release();
  if ((v3 & 8) == 0) {
    goto LABEL_16;
  }
LABEL_14:
  uint64_t result = swift_beginAccess();
  __int16 v10 = *(_WORD *)(a2 + 24);
  if ((v10 & 8) != 0) {
    *(_WORD *)(a2 + 24) = v10 & 0xFFF7;
  }
LABEL_16:
  if ((v3 & 0x10) != 0)
  {
    uint64_t result = swift_beginAccess();
    __int16 v11 = *(_WORD *)(a2 + 24);
    if ((v11 & 0x10) != 0) {
      *(_WORD *)(a2 + 24) = v11 & 0xFFEF;
    }
  }
  if ((v3 & 0x20) != 0)
  {
    uint64_t result = swift_beginAccess();
    __int16 v12 = *(_WORD *)(a2 + 24);
    if ((v12 & 0x20) != 0) {
      *(_WORD *)(a2 + 24) = v12 & 0xFFDF;
    }
  }
  if ((v3 & 0x40) != 0)
  {
    uint64_t result = swift_beginAccess();
    __int16 v13 = *(_WORD *)(a2 + 24);
    if ((v13 & 0x40) != 0) {
      *(_WORD *)(a2 + 24) = v13 & 0xFFBF;
    }
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t result = swift_beginAccess();
    __int16 v14 = *(_WORD *)(a2 + 24);
    if ((v14 & 0x80) != 0) {
      *(_WORD *)(a2 + 24) = v14 & 0xFF7F;
    }
  }
  if ((v3 & 0x100) != 0)
  {
    uint64_t result = swift_beginAccess();
    if ((*(_WORD *)(a2 + 24) & 0x100) != 0) {
      *(_WORD *)(a2 + 24) &= ~0x100u;
    }
  }
  return result;
}

double ViewRendererHost.alignment(of:at:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  return ViewRendererHost.alignment(of:at:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in ViewRendererHost.alignment(of:at:), a4, a5);
}

{
  return ViewRendererHost.alignment(of:at:)(a1, a2, a3, (uint64_t)partial apply for closure #1 in ViewRendererHost.alignment(of:at:), a4, a5);
}

double ViewRendererHost.alignment(of:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  void v7[2] = a1;
  *(double *)&_OWORD v7[3] = a5;
  *(double *)&void v7[4] = a6;
  (*(void (**)(double *__return_ptr, uint64_t, void *, void, uint64_t))(*(void *)(a3 + 8) + 24))(&v8, a4, v7, MEMORY[0x263F8EF38], a2);
  return v8;
}

uint64_t ViewRendererHost.centersRootView.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 16))();
  swift_beginAccess();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 232);
  swift_release();
  return v3;
}

uint64_t ViewRendererHost.centersRootView.setter(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  swift_beginAccess();
  *(unsigned char *)(v4 + 232) = a1;
  return swift_release();
}

uint64_t (*ViewRendererHost.centersRootView.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 24) = ViewRendererHost.centersRootView.getter(a2, a3) & 1;
  return ViewRendererHost.centersRootView.modify;
}

uint64_t ViewRendererHost.centersRootView.modify(uint64_t a1)
{
  return ViewRendererHost.centersRootView.setter(*(unsigned char *)(a1 + 24), *(void *)a1, *(void *)(a1 + 8));
}

uint64_t key path setter for EnvironmentValues.preferenceBridge : EnvironmentValues()
{
  swift_weakInit();
  swift_retain();
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v1);
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)v1);
  return swift_release();
}

uint64_t (*EnvironmentValues.preferenceBridge.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (uint64_t)(a1 + 1);
  a1[3] = (uint64_t)v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, v3);
    swift_release();
  }
  swift_release_n();
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value(v3);
  *a1 = Strong;
  return EnvironmentValues.preferenceBridge.modify;
}

uint64_t EnvironmentValues.preferenceBridge.modify(uint64_t a1, char a2)
{
  uint64_t v3 = a1 + 8;
  swift_weakInit();
  if (a2)
  {
    swift_retain();
    specialized EnvironmentValues._set<A>(_:for:)(v3);
    outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value(v3);
    swift_release();
  }
  else
  {
    specialized EnvironmentValues._set<A>(_:for:)(v3);
    outlined destroy of EnvironmentValues.PreferenceBridgeKey.Value(v3);
  }

  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.PreferenceBridgeKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of EnvironmentValues.PreferenceBridgeKey.Value((uint64_t)&static EnvironmentValues.PreferenceBridgeKey.defaultValue, a1);
}

uint64_t ViewRendererHost.rootContentPath(kind:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  long long v15 = 0u;
  long long v16 = 0u;
  char v6 = 6;
  char v17 = 6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  if (!result) {
    goto LABEL_5;
  }
  type metadata accessor for ViewResponder();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    uint64_t result = swift_release();
LABEL_5:
    long long v9 = 0uLL;
    long long v10 = 0uLL;
    goto LABEL_6;
  }
  uint64_t v14 = v5;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  char v13 = 2;
  (*(void (**)(long long *, uint64_t *, _OWORD *, void, void))(*(void *)v8 + 176))(&v15, &v14, v11, 0, 0);
  swift_release();
  uint64_t result = outlined destroy of CoordinateSpace((uint64_t)v11);
  long long v10 = v15;
  long long v9 = v16;
  char v6 = v17;
LABEL_6:
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v9;
  *(unsigned char *)(a4 + 32) = v6;
  return result;
}

Swift::Void __swiftcall ViewRendererHost.resetProfile()()
{
  ViewRendererHost.startProfiling()(v0, v1, MEMORY[0x263F28908]);
}

void ViewRendererHost.startProfiling()(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 16))();
  swift_beginAccess();
  uint64_t v5 = *(void **)(v4 + 16);
  if (v5)
  {
    id v6 = v5;
    swift_release();
    a3(v6);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ViewRendererHost.archiveJSON(name:)(Swift::String_optional name)
{
  object = name.value._object;
  uint64_t countAndFlagsBits = name.value._countAndFlagsBits;
  uint64_t v4 = (*(uint64_t (**)())(v1 + 16))();
  swift_beginAccess();
  uint64_t v5 = *(void **)(v4 + 16);
  if (v5)
  {
    id v6 = v5;
    swift_release();
    v7.value._uint64_t countAndFlagsBits = countAndFlagsBits;
    v7.value._object = object;
    AGGraphRef.archiveJSON(name:)(v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t EmptyViewRendererHost.viewGraph.getter()
{
  return swift_retain();
}

uint64_t EmptyViewRendererHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 24);
  return result;
}

uint64_t EmptyViewRendererHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*EmptyViewRendererHost.propertiesNeedingUpdate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t EmptyViewRendererHost.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 26);
  return result;
}

uint64_t EmptyViewRendererHost.renderingPhase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 26) = v2;
  return result;
}

uint64_t (*EmptyViewRendererHost.renderingPhase.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t EmptyViewRendererHost.externalUpdateCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t EmptyViewRendererHost.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*EmptyViewRendererHost.externalUpdateCount.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

double EmptyViewRendererHost.currentTimestamp.getter@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

uint64_t EmptyViewRendererHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = v2;
  return result;
}

uint64_t (*EmptyViewRendererHost.currentTimestamp.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t EmptyViewRendererHost.__allocating_init(environment:)()
{
  uint64_t v0 = swift_allocObject();
  EmptyViewRendererHost.init(environment:)();
  return v0;
}

uint64_t EmptyViewRendererHost.init(environment:)()
{
  uint64_t v1 = v0;
  *(_WORD *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 26) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  specialized static Update.begin()();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  uint64_t v2 = (void *)specialized ViewGraph.init<A>(rootViewType:requestedOutputs:)(0);
  *(void *)(v1 + 16) = v2;
  swift_beginAccess();
  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = (void *)v2[3];
  uint64_t v5 = (void *)v2[4];
  swift_retain();
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release_n();
  swift_release();
  AGGraphSetValue();
  specialized ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  return v1;
}

uint64_t EmptyViewRendererHost.deinit()
{
  swift_release();
  return v0;
}

uint64_t EmptyViewRendererHost.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

double protocol witness for ViewRendererHost.currentTimestamp.getter in conformance EmptyViewRendererHost@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 40);
  *a1 = result;
  return result;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance EmptyViewRendererHost(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance EmptyViewRendererHost())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.responderNode.getter in conformance EmptyViewRendererHost()
{
  specialized static Update.begin()();
  AGGraphClearUpdate();
  specialized ViewRendererHost.updateGraph()();
  swift_retain();
  closure #1 in ViewRendererHost.responderNode.getter(&v2);
  swift_release();
  uint64_t v0 = v2;
  AGGraphSetUpdate();
  static Update.end()();
  return v0;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.getter in conformance EmptyViewRendererHost@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 24);
  return result;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance EmptyViewRendererHost(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance EmptyViewRendererHost())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.getter in conformance EmptyViewRendererHost@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 26);
  return result;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance EmptyViewRendererHost(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 26) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance EmptyViewRendererHost())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.getter in conformance EmptyViewRendererHost()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.setter in conformance EmptyViewRendererHost(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance EmptyViewRendererHost())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance EmptyViewRendererHost(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ViewRendererHost.updateViewGraph<A>(body:)(a1, a2, *v4, a4, (uint64_t)&protocol witness table for EmptyViewRendererHost);
}

uint64_t protocol witness for GraphDelegate.graphDidChange() in conformance EmptyViewRendererHost()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v0 = static Update._lock;
  _MovableLockLock(static Update._lock);

  return _MovableLockUnlock(v0);
}

uint64_t specialized ViewGraph.init<A>(rootViewType:requestedOutputs:)(char a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *(void *)(v1 + 208) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v1 + 216) = 0;
  *(void *)(v1 + 224) = 0;
  *(unsigned char *)(v1 + 232) = 1;
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(v1 + 272) = *MEMORY[0x263F288F8];
  *(_DWORD *)(v1 + 292) = v3;
  *(_DWORD *)(v1 + 296) = v3;
  *(_DWORD *)(v1 + 300) = v3;
  *(void *)(v1 + 312) = 0;
  *(void *)(v1 + 332) = 0;
  *(void *)(v1 + 340) = 0;
  *(void *)(v1 + 324) = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 352) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(unsigned char *)(v1 + 360) = 0;
  *(unsigned char *)(v1 + 362) = 0;
  *(void *)(v1 + 368) = 0;
  uint64_t v5 = one-time initialization token for infinity;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static Time.infinity;
  *(void *)(v1 + 376) = static Time.infinity;
  uint64_t v7 = MEMORY[0x263F8EE88];
  *(void *)(v1 + 384) = 0x7FF0000000000000;
  *(void *)(v1 + 392) = v7;
  *(void *)(v1 + 400) = v6;
  *(void *)(v1 + 408) = 0x7FF0000000000000;
  *(void *)(v1 + 416) = v7;
  swift_weakInit();
  *(void *)(v1 + 432) = v4;
  *(void *)(v1 + 176) = &type metadata for EmptyView;
  *(unsigned char *)(v1 + 361) = a1;
  GraphHost.Data.init()((uint64_t)&v41);
  id v8 = (void *)*((void *)&v41 + 1);
  uint64_t v37 = (void *)v41;
  uint64_t v38 = *(void **)v42;
  char v35 = v42[9];
  char v36 = v42[8];
  uint64_t v9 = *(void *)&v42[12];
  uint64_t v10 = v43;
  uint64_t v11 = v44;
  uint64_t v39 = v46;
  int v33 = v47;
  int v34 = v45;
  uint64_t v12 = v48;
  uint64_t v13 = v49;
  uint64_t v14 = v50;
  uint64_t v15 = v51;
  id v40 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  long long v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<EmptyView>, (uint64_t)&type metadata for EmptyView, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(&lazy protocol witness table cache variable for type External<EmptyView> and conformance External<A>, &lazy cache variable for type metadata for External<EmptyView>, (uint64_t)&type metadata for EmptyView);
  *(_DWORD *)(v1 + 236) = Attribute.init<A>(body:value:flags:update:)();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RootTransform and conformance RootTransform();
  int v17 = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v1 + 240) = v17;
  *(_DWORD *)(v1 + 244) = v17;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, v16);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewOrigin> and conformance External<A>, &lazy cache variable for type metadata for External<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin);
  long long v41 = 0uLL;
  *(_DWORD *)(v1 + 248) = Attribute.init<A>(body:value:flags:update:)();
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize, v16);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewSize> and conformance External<A>, &lazy cache variable for type metadata for External<ViewSize>, (uint64_t)&type metadata for ViewSize);
  long long v41 = 0u;
  *(_OWORD *)long long v42 = 0u;
  *(_DWORD *)(v1 + 252) = Attribute.init<A>(body:value:flags:update:)();
  int v18 = v3;
  if ((a1 & 0x10) != 0)
  {
    long long v41 = 0u;
    *(_OWORD *)long long v42 = 0u;
    int v18 = Attribute.init<A>(body:value:flags:update:)();
  }
  *(_DWORD *)(v1 + 272) = v18;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2461B9DC0;
  *(void *)(v19 + 32) = 1;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(void *)&long long v41 = v19;
  *((void *)&v41 + 1) = 1;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(&lazy protocol witness table cache variable for type External<_SafeAreaInsetsModifier> and conformance External<A>, &lazy cache variable for type metadata for External<_SafeAreaInsetsModifier>, (uint64_t)&type metadata for _SafeAreaInsetsModifier);
  int v20 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  outlined consume of Transaction?(1);
  *(_DWORD *)(v1 + 256) = v20;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v41 = static LayoutComputer.defaultValue;
  uint64_t v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F288C8];
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(&lazy protocol witness table cache variable for type External<LayoutComputer> and conformance External<A>, &lazy cache variable for type metadata for External<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer);
  swift_retain();
  int v22 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  *(_DWORD *)(v1 + 320) = v22;
  *(void *)&long long v41 = 0;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time, v21);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Time> and conformance External<A>, &lazy cache variable for type metadata for External<Time>, (uint64_t)&type metadata for Time);
  *(_DWORD *)(v1 + 276) = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v23 = MEMORY[0x263F8EE78];
  *(void *)&long long v41 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for [EventID : EventType]();
  _sSay7SwiftUI13ViewResponderCGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for External<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<[EventID : EventType]> and conformance External<A>();
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 280) = v24;
  *(void *)&long long v41 = 1;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase, v21);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<_GestureInputs.InheritedPhase> and conformance External<A>, &lazy cache variable for type metadata for External<_GestureInputs.InheritedPhase>, (uint64_t)&type metadata for _GestureInputs.InheritedPhase);
  *(_DWORD *)(v1 + 284) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v41) = 0;
  uint64_t v25 = MEMORY[0x263F8E8F8];
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], v21);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<UInt32> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, v25);
  *(_DWORD *)(v1 + 288) = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v41 = v23;
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys, v21);
  lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<PreferenceKeys> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<PreferenceKeys>, (uint64_t)&type metadata for PreferenceKeys);
  *(_DWORD *)(v1 + 304) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v41) = v3;
  *(void *)((char *)&v41 + 4) = *(void *)(v1 + 252);
  HIDWORD(v41) = v3;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry();
  *(_DWORD *)(v1 + 260) = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v1 + 264) = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v1 + 268) = AGGraphCreateOffsetAttribute2();
  int v26 = *(_DWORD *)(v1 + 256);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = *(void *)(v1 + 248);
  *(_DWORD *)(v27 + 24) = v26;
  *(void *)(v1 + 184) = partial apply for specialized closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:);
  *(void *)(v1 + 192) = v27;
  swift_release();
  *(void *)&long long v41 = v37;
  *((void *)&v41 + 1) = v8;
  *(void *)long long v42 = v38;
  v42[8] = v36;
  v42[9] = v35;
  *(void *)&v42[12] = v9;
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  int v45 = v34;
  uint64_t v46 = v39;
  int v47 = v33;
  uint64_t v48 = v12;
  uint64_t v49 = v13;
  uint64_t v50 = v14;
  uint64_t v51 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v28 = v37;
  id v29 = v8;
  id v30 = v38;
  uint64_t v31 = GraphHost.init(data:)((uint64_t)&v41);
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v31;
}

uint64_t specialized closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, unsigned int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 16);
  int v22 = *(_DWORD *)(a1 + 28);
  int v23 = *(_DWORD *)(a1 + 24);
  int v24 = *(_DWORD *)(a1 + 36);
  int v25 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 40);
  long long v64 = *(_OWORD *)(a1 + 32);
  int v9 = v64;
  long long v65 = *(_OWORD *)(a1 + 48);
  long long v66 = *(_OWORD *)(a1 + 64);
  int v11 = *(_DWORD *)(a1 + 76);
  int v67 = *(_DWORD *)(a1 + 80);
  long long v62 = *(_OWORD *)a1;
  long long v63 = *(_OWORD *)(a1 + 16);
  int v12 = v64 | 8;
  LODWORD(v66) = a2;
  *(void *)((char *)&v66 + 4) = __PAIR64__(a3, a2);
  LODWORD(v64) = v64 | 8;
  if ((v9 & 0x10) != 0) {
    int v13 = v12;
  }
  else {
    int v13 = v9 | 0x18;
  }
  int v26 = v13;
  int v20 = *(_DWORD *)(a1 + 80);
  int v21 = v11;
  uint64_t v14 = *(void *)(a1 + 48);
  int v15 = *(_DWORD *)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 60);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(a1);
  outlined retain of _ViewInputs(a1);
  outlined retain of _ViewInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v46 = v7;
  int v47 = v25;
  uint64_t v48 = v8;
  int v49 = v23;
  int v50 = v22;
  uint64_t v53 = v10;
  uint64_t v54 = v14;
  int v52 = v24;
  int v55 = v15;
  int v56 = v16;
  unsigned int v57 = a2;
  unsigned int v58 = a2;
  unsigned int v59 = a3;
  int v60 = v21;
  int v61 = v20;
  int v29 = a4;
  uint64_t v30 = v7;
  int v31 = v25;
  uint64_t v32 = v8;
  int v33 = v23;
  int v34 = v22;
  int v35 = 0;
  int v36 = v24;
  uint64_t v37 = v10;
  uint64_t v38 = v14;
  int v39 = v15;
  int v40 = v16;
  unsigned int v41 = a2;
  unsigned int v42 = a2;
  unsigned int v43 = a3;
  int v44 = v21;
  int v45 = v20;
  outlined retain of _ViewInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _SafeAreaInsetsModifier._makeView(modifier:inputs:body:)(&v29, (uint64_t)&v30, a1, a5);
  int v51 = v26;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, &v46);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of _ViewInputs(a1);
  outlined release of _ViewInputs(a1);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init(type:)())(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:)(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F0F0E8](a1, a2, &type metadata for EmptyView);
}

uint64_t partial apply for closure #1 in ViewRendererHost.sendEvents(_:rootNode:at:)@<X0>(unsigned char *a1@<X8>)
{
  char v2 = (void (*)(void))v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  return ViewGraph.sendEvents(_:rootNode:at:)(v2, v3, (double *)&v5, a1);
}

uint64_t partial apply for closure #1 in ViewRendererHost.updateGraph()()
{
  return closure #1 in ViewRendererHost.updateGraph()(*(_WORD *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_246180D70()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ViewRendererHost.alignment(of:at:)(double *a1@<X8>)
{
}

{
  partial apply for closure #1 in ViewRendererHost.alignment(of:at:)((double (*)(void, double, double))ViewGraph.alignment(of:at:), a1);
}

void partial apply for closure #1 in ViewRendererHost.alignment(of:at:)(double (*a1)(void, double, double)@<X1>, double *a2@<X8>)
{
  *a2 = a1(*(void *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type ViewRendererHostProperties and conformance ViewRendererHostProperties()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties;
  if (!lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties;
  if (!lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties;
  if (!lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties;
  if (!lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewRendererHostProperties and conformance ViewRendererHostProperties);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewRenderingPhase and conformance ViewRenderingPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewRenderingPhase and conformance ViewRenderingPhase;
  if (!lazy protocol witness table cache variable for type ViewRenderingPhase and conformance ViewRenderingPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewRenderingPhase and conformance ViewRenderingPhase);
  }
  return result;
}

uint64_t sub_246180FA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = ViewRendererHost.centersRootView.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_246180FE0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ViewRendererHost.centersRootView.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_246181014()
{
  return 16;
}

__n128 sub_246181020(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24618102C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.preferenceBridge.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ViewRendererHostProperties()
{
  return &type metadata for ViewRendererHostProperties;
}

unsigned char *storeEnumTagSinglePayload for ViewRenderingPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246181148);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewRenderingPhase()
{
  return &type metadata for ViewRenderingPhase;
}

uint64_t dispatch thunk of ViewRendererHost.viewGraph.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ViewRendererHost.currentTimestamp.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ViewRendererHost.currentTimestamp.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ViewRendererHost.currentTimestamp.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ViewRendererHost.responderNode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ViewRendererHost.propertiesNeedingUpdate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ViewRendererHost.propertiesNeedingUpdate.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ViewRendererHost.propertiesNeedingUpdate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ViewRendererHost.renderingPhase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ViewRendererHost.renderingPhase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ViewRendererHost.renderingPhase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ViewRendererHost.externalUpdateCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ViewRendererHost.externalUpdateCount.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ViewRendererHost.externalUpdateCount.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ViewRendererHost.updateRootView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of ViewRendererHost.updateEnvironment()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of ViewRendererHost.updateTransform()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of ViewRendererHost.updateSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of ViewRendererHost.updateSafeArea()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of ViewRendererHost.updateContainerSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of ViewRendererHost.updateFocusStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of ViewRendererHost.updateFocusedItem()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of ViewRendererHost.updateFocusedValues()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of ViewRendererHost.updateAccessibilityEnvironment()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t type metadata accessor for EmptyViewRendererHost()
{
  return self;
}

uint64_t method lookup function for EmptyViewRendererHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for EmptyViewRendererHost);
}

uint64_t dispatch thunk of EmptyViewRendererHost.__allocating_init(environment:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t partial apply for specialized closure #1 in ViewRendererHost.updateGraph()()
{
  return specialized closure #1 in ViewRendererHost.updateGraph()(*(unsigned __int16 *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_2461813C8()
{
  return swift_deallocObject();
}

uint64_t sub_2461813D8()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type External<EmptyView> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI12GesturePhaseOyytGMaTm_2(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24618144C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v3 = v2[4];
  unsigned int v4 = v2[5];
  int v5 = v2[6];
  long long v6 = *(_OWORD *)(a1 + 48);
  void v9[2] = *(_OWORD *)(a1 + 32);
  void v9[3] = v6;
  _OWORD v9[4] = *(_OWORD *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 80);
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  return specialized closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)((uint64_t)v9, v3, v4, v5, a2);
}

uint64_t sub_2461814A8()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferenceBridgeKey()
{
  return &type metadata for EnvironmentValues.PreferenceBridgeKey;
}

Swift::Void __swiftcall ViewGraph.NextUpdate.at(_:)(SwiftUI::Time a1)
{
  double v3 = *v1;
  if (*v1 >= *v2) {
    double v3 = *v2;
  }
  *uint64_t v2 = v3;
}

BOOL ViewGraph.setSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, (uint64_t)&type metadata for SafeAreaInsets.Element, MEMORY[0x263F8E0F8]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_2461B9DC0;
  *(void *)(v8 + 32) = 1;
  *(double *)(v8 + 40) = a1;
  *(double *)(v8 + 48) = a2;
  *(double *)(v8 + 56) = a3;
  *(double *)(v8 + 64) = a4;
  Swift::Bool v9 = ViewGraph.setSafeAreaInsets(_:)((Swift::OpaquePointer)v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ViewGraph.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance CAHostingLayer<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ViewGraphDelegate.updateGraph<A>(body:)(a1, a2, a4, a3, (uint64_t)&protocol witness table for CAHostingLayer<A>);
}

uint64_t RootGeometry.init(layoutDirection:proposedSize:safeAreaInsets:childLayoutComputer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, _DWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t RootGeometry.$childLayoutComputer.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 12) = v2;
  return result;
}

uint64_t ViewGraph.displayList()(uint64_t a1, void *a2)
{
  type metadata accessor for (DisplayList, DisplayList.Version)();
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v5 = *(void *)result;
    __int16 v6 = *(_WORD *)(result + 8);
    char v7 = *(unsigned char *)(result + 10);
    uint64_t v8 = *(void *)(result + 16);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v5) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    if (v5) {
      __int16 v11 = v6;
    }
    else {
      __int16 v11 = 0;
    }
    if (v5) {
      char v12 = v7;
    }
    else {
      char v12 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    __int16 v11 = 0;
    char v12 = 0;
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  *(void *)a1 = v10;
  *(_WORD *)(a1 + 8) = v11;
  *(unsigned char *)(a1 + 10) = v12;
  *a2 = v9;
  return result;
}

__n128 ViewGraph.size.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall ViewGraph.setSize(_:)(SwiftUI::ViewSize a1)
{
  if (AGGraphSetValue())
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t ViewGraph.$safeAreaInsets.getter()
{
  return *(unsigned int *)(v0 + 256);
}

Swift::Void __swiftcall ViewGraph.invalidatePreferenceBridge()()
{
  if (swift_weakLoadStrong())
  {
    swift_release();
    ViewGraph.removePreferenceOutlets(isInvalidating:)(1);
    swift_weakAssign();
    swift_beginAccess();
    if (*(unsigned char *)(v0 + 128)) {
      GraphHost.uninstantiate(immediately:)(1);
    }
    swift_weakAssign();
    if (swift_weakLoadStrong())
    {
      PreferenceBridge.addChild(_:)(v0);
      swift_release();
    }
    GraphHost.updateRemovedState()();
  }
}

Swift::Void __swiftcall ViewGraph.updateOutputs(at:)(SwiftUI::Time at)
{
  uint64_t v2 = *v1;
  ViewGraph.beginNextUpdate(at:)((double *)&v2);

  ViewGraph.updateOutputs(async:)(0);
}

double ViewGraph.sizeThatFits(_:)(uint64_t *a1)
{
  char v1 = *((unsigned char *)a1 + 8);
  uint64_t v2 = a1[2];
  char v3 = *((unsigned char *)a1 + 24);
  uint64_t v13 = *a1;
  char v14 = v1;
  uint64_t v15 = v2;
  char v16 = v3;
  ViewGraph.layoutComputer.getter((uint64_t *)&v12);
  long long v11 = v12;
  ViewGraph.rootViewInsets.getter();
  specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v13, (uint64_t *)&v11, v4, v5, v6, v7);
  double v9 = v8;
  swift_release();
  return v9;
}

uint64_t ViewGraph.alignment(of:at:)(unint64_t a1, double a2, double a3)
{
  ViewGraph.layoutComputer.getter((uint64_t *)&v22);
  *(double *)&uint64_t v6 = v22;
  if (v22 == 0.0)
  {
    if (one-time initialization token for defaultValue != -1) {
      goto LABEL_26;
    }
    goto LABEL_4;
  }
  double v7 = v23;
  while (1)
  {
    ViewGraph.rootViewInsets.getter();
    double v12 = a2 - (v10 + v11);
    if (v12 < 0.0) {
      a2 = 0.0;
    }
    else {
      a2 = v12;
    }
    double v13 = a3 - (v8 + v9);
    if (v13 < 0.0) {
      a3 = 0.0;
    }
    else {
      a3 = v13;
    }
    if (one-time initialization token for lockAssertionsAreEnabled != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    double v22 = a2;
    double v23 = a3;
    double v24 = a2;
    double v25 = a3;
    (*(void (**)(unint64_t, double *))(*(void *)v6 + 144))(a1, &v22);
    if ((v14 & 1) == 0) {
      return swift_release();
    }
    if (one-time initialization token for _typeCache != -1) {
      swift_once();
    }
    char v16 = static AlignmentKey._typeCache;
    int v17 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    swift_retain();
    os_unfair_lock_lock(v17);
    uint64_t v18 = v16[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v17);
    swift_release();
    if (a1 < 2)
    {
      __break(1u);
    }
    else if (a1 >> 1 <= *(void *)(v18 + 16))
    {
      uint64_t v19 = v18 + 16 * ((a1 >> 1) - 1);
      uint64_t v20 = *(void *)(v19 + 32);
      uint64_t v21 = *(void *)(v19 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      double v22 = *(double *)&v6;
      double v23 = v7;
      double v24 = a2;
      double v25 = a3;
      double v26 = a2;
      double v27 = a3;
      (*(void (**)(double *, uint64_t, uint64_t))(v21 + 8))(&v22, v20, v21);
      return swift_release();
    }
    __break(1u);
LABEL_26:
    swift_once();
LABEL_4:
    double v7 = *((double *)&static LayoutComputer.defaultValue + 1);
    uint64_t v6 = *(uint64_t *)&static LayoutComputer.defaultValue;
    swift_retain();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  uint64_t result;
  void *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  ViewGraph.layoutComputer.getter((uint64_t *)&v20);
  *(double *)&uint64_t v6 = v20;
  if (v20 == 0.0)
  {
    if (one-time initialization token for defaultValue != -1) {
      goto LABEL_26;
    }
    goto LABEL_4;
  }
  double v7 = v21;
  while (1)
  {
    ViewGraph.rootViewInsets.getter();
    if (a2 - (v9 + v11) < 0.0) {
      a2 = 0.0;
    }
    else {
      a2 = a2 - (v9 + v11);
    }
    if (a3 - (v8 + v10) < 0.0) {
      a3 = 0.0;
    }
    else {
      a3 = a3 - (v8 + v10);
    }
    if (one-time initialization token for lockAssertionsAreEnabled != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        break;
      }
    }
    uint64_t v20 = a2;
    uint64_t v21 = a3;
    double v22 = a2;
    double v23 = a3;
    (*(void (**)(unint64_t, double *))(*(void *)v6 + 144))(a1, &v20);
    if ((v12 & 1) == 0) {
      return swift_release();
    }
    if (one-time initialization token for _typeCache != -1) {
      swift_once();
    }
    char v14 = static AlignmentKey._typeCache;
    uint64_t v15 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
    swift_retain();
    os_unfair_lock_lock(v15);
    char v16 = v14[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v15);
    swift_release();
    if (a1 < 2)
    {
      __break(1u);
    }
    else if (a1 >> 1 <= *(void *)(v16 + 16))
    {
      int v17 = v16 + 16 * ((a1 >> 1) - 1);
      uint64_t v18 = *(void *)(v17 + 32);
      uint64_t v19 = *(void *)(v17 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(double *)&v6;
      uint64_t v21 = v7;
      double v22 = a2;
      double v23 = a3;
      double v24 = a2;
      double v25 = a3;
      (*(void (**)(double *, uint64_t, uint64_t))(v19 + 8))(&v20, v18, v19);
      return swift_release();
    }
    __break(1u);
LABEL_26:
    swift_once();
LABEL_4:
    double v7 = *((double *)&static LayoutComputer.defaultValue + 1);
    uint64_t v6 = *(uint64_t *)&static LayoutComputer.defaultValue;
    swift_retain();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ViewGraph.responderNode.getter()
{
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return 0;
  }
  uint64_t v1 = *WeakValue;
  if ((unint64_t)*WeakValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x24C523D60](0, v1);
    goto LABEL_7;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t ViewGraph.sendEvents(_:rootNode:at:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, double *a3@<X2>, unsigned char *a4@<X8>)
{
  void (*v31)(void *__return_ptr, _OWORD *);
  uint64_t v32;
  uint64_t v33;
  ValueMetadata **v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned char *Value;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  long long v54;
  int v55;
  long long v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void v66[3];
  _OWORD v67[6];
  _OWORD v68[2];
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  unsigned char v75[28];
  uint64_t v76;

  int v76 = *MEMORY[0x263EF8340];
  double v8 = *a3;
  v4[152] = 1;
  swift_beginAccess();
  LODWORD(v69) = *(_DWORD *)AGGraphGetValue() + 1;
  AGGraphSetValue();
  if (*(double *)AGGraphGetValue() != v8)
  {
    *(double *)&uint64_t v69 = v8;
    AGGraphSetValue();
    LODWORD(v69) = *(_DWORD *)AGGraphGetValue() + 1;
    AGGraphSetValue();
    swift_beginAccess();
    if (one-time initialization token for infinity != -1) {
      swift_once();
    }
    *((void *)v4 + 50) = static Time.infinity;
    uint64_t v9 = MEMORY[0x263F8EE88];
    *((void *)v4 + 51) = 0x7FF0000000000000;
    *((void *)v4 + 52) = v9;
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  *(void *)&uint64_t v69 = a1;
  type metadata accessor for [EventID : EventType]();
  uint64_t result = AGGraphSetValue();
  long long v64 = v4 + 292;
  int v61 = *MEMORY[0x263F288F8];
  long long v65 = (uint64_t)v4;
  if (*((_DWORD *)v4 + 73) != *MEMORY[0x263F288F8])
  {
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  unsigned int v57 = *((_DWORD *)v4 + 73);
  unsigned int v58 = a2;
  if (*((void *)v4 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = AGSubgraphCreate();
    double v12 = (void *)*((void *)v4 + 39);
    *((void *)v4 + 39) = v11;

    uint64_t v13 = *((void *)v4 + 9);
    uint64_t v14 = *((void *)v4 + 11);
    double v8 = *((double *)v4 + 12);
    uint64_t v5 = *((void *)v4 + 13);
    long long v63 = *((void *)v4 + 14);
    int v51 = *((_DWORD *)v4 + 66);
    int v52 = *((_DWORD *)v4 + 67);
    HIDWORD(v49) = *((_DWORD *)v4 + 61);
    int v50 = *((_DWORD *)v4 + 62);
    LODWORD(v49) = *((_DWORD *)v4 + 14);
    swift_beginAccess();
    int v60 = *(_DWORD *)(v14 + 16);
    uint64_t v15 = *(void *)(v14 + 24);
    uint64_t v54 = *(_OWORD *)(v14 + 48);
    int v56 = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 64);
    uint64_t v17 = *(void *)(v14 + 72);
    char v18 = *(unsigned char *)(v14 + 80);
    char v19 = *(unsigned char *)(v14 + 81);
    uint64_t v20 = *(void *)(v14 + 88);
    _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
    uint64_t v21 = swift_allocObject();
    *(_DWORD *)(v21 + 16) = v60;
    *(void *)(v21 + 24) = v15;
    *(_OWORD *)(v21 + 32) = v56;
    *(_OWORD *)(v21 + 48) = v54;
    *(void *)(v21 + 64) = v16;
    *(void *)(v21 + 72) = v17;
    *(unsigned char *)(v21 + 80) = v18;
    *(unsigned char *)(v21 + 81) = v19;
    double v22 = (void (*)(void))v65;
    *(void *)(v21 + 88) = v20;
    swift_retain();
    double v23 = *(void **)(v65 + 32);
    int v55 = *(_DWORD *)(v65 + 280);
    uint64_t v53 = *(_DWORD *)(v65 + 288);
    uint64_t v48 = *(_DWORD *)(v65 + 284);
    uint64_t v46 = *(_DWORD *)(v65 + 276);
    int v47 = *(_DWORD *)(v65 + 304);
    uint64_t v24 = one-time initialization token for _eventDebugTriggers;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v59 = v13;
    swift_retain();
    swift_retain();
    id v25 = (id)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    double v4 = v23;
    if (v24 != -1) {
      goto LABEL_34;
    }
    while (1)
    {
      uint64_t result = swift_beginAccess();
      double v26 = (void *)*((void *)v22 + 39);
      if (!v26) {
        break;
      }
      int v27 = (LODWORD(_eventDebugTriggers.rawValue) >> 2) & 8;
      id v28 = v26;
      AGGraphClearUpdate();
      id v29 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      *(void *)&uint64_t v69 = v59;
      DWORD2(v69) = v46;
      *(void *)&long long v70 = v21;
      *((double *)&v70 + 1) = v8;
      *(void *)&int v71 = v5;
      *((void *)&v71 + 1) = v63;
      *(void *)&uint64_t v72 = v25;
      *((void *)&v72 + 1) = v49;
      *(void *)&uint64_t v73 = __PAIR64__(v50, v51);
      *((void *)&v73 + 1) = __PAIR64__(v57, v52);
      unsigned int v30 = v57;
      LODWORD(v74) = v57;
      *((void *)&v74 + 1) = v4;
      *(void *)unsigned int v75 = v25;
      *(_DWORD *)&v75[8] = v47;
      *(_DWORD *)&v75[12] = v55;
      *(_DWORD *)&v75[16] = v53;
      *(_DWORD *)&v75[20] = v48;
      *(_DWORD *)&v75[24] = v27;
      v67[4] = v73;
      v67[5] = v74;
      v68[0] = *(_OWORD *)v75;
      *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)&v75[12];
      v67[0] = v69;
      v67[1] = v70;
      v67[2] = v71;
      v67[3] = v72;
      int v31 = *(void (**)(void *__return_ptr, _OWORD *))(*(void *)v58 + 112);
      outlined retain of _GestureInputs((uint64_t)&v69);
      v31(v66, v67);
      outlined release of _GestureInputs((uint64_t)&v69);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      uint64_t v32 = v66[1];
      *long long v64 = v66[0];
      int v33 = *(void *)(v32 + 16);
      if (v33)
      {
        int v34 = (ValueMetadata **)(v32 + 48);
        double v4 = (char *)v65;
        while (*(v34 - 2) != &type metadata for GestureCategory.Key)
        {
          v34 += 3;
          if (!--v33) {
            goto LABEL_17;
          }
        }
        unsigned int v30 = *(_DWORD *)v34;
      }
      else
      {
        double v4 = (char *)v65;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      *((_DWORD *)v4 + 75) = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      outlined release of _GestureInputs((uint64_t)&v69);
LABEL_18:
      int v35 = (void *)*((void *)v4 + 39);
      if (!v35) {
        __break(1u);
      }
      int v36 = (uint64_t *)(v4 + 160);
      id v25 = v35;
      swift_beginAccess();
      uint64_t v37 = 0;
      uint64_t v21 = *((void *)v4 + 20);
      uint64_t v38 = (void (*)(void))MEMORY[0x263F8EE80];
      while (1)
      {
        double v22 = a1;
        *int v36 = MEMORY[0x263F8EE78];
        int v39 = *(void *)(v21 + 16);
        if (v39)
        {
          int v40 = (char **)(v21 + 40);
          do
          {
            a1 = (void (*)(void))*(v40 - 1);
            double v4 = *v40;
            unsigned int v41 = swift_retain();
            a1(v41);
            swift_release();
            v40 += 2;
            --v39;
          }
          while (v39);
        }
        swift_bridgeObjectRelease();
        AGSubgraphUpdate();
        uint64_t v21 = *v36;
        if (!*(void *)(*v36 + 16)) {
          break;
        }
        a1 = v22;
        if (*((void *)v22 + 2))
        {
          *(void *)&v67[0] = v38;
          AGGraphSetValue();
          swift_bridgeObjectRelease();
          uint64_t v21 = *(void *)(v65 + 160);
          unsigned int v42 = *(void *)(v21 + 16);
          a1 = v38;
        }
        else
        {
          unsigned int v42 = 1;
        }
        double v4 = 0;
        ++v37;
        unsigned int v43 = 3;
        if (v37 == 8 || !v42) {
          goto LABEL_32;
        }
      }
      if (*(_DWORD *)v64 != v61)
      {
        _ss23_ContiguousArrayStorageCy7SwiftUI14SafeAreaInsetsV7ElementVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
        uint64_t Value = (unsigned char *)AGGraphGetValue();
        LOBYTE(v4) = *Value;
        unsigned int v43 = Value[1];
LABEL_32:
        *(unsigned char *)(v65 + 152) = 0;

        swift_beginAccess();
        int v45 = MEMORY[0x24C527E00](v65 + 200);
        swift_retain();
        specialized printGestures(data:host:)(v45, v65);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease();
        *a4 = (_BYTE)v4;
        a4[1] = v43;
        return result;
      }
      __break(1u);
LABEL_34:
      swift_once();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ViewGraph.resetEvents()()
{
  uint64_t v1 = *(void **)(v0 + 312);
  if (v1)
  {
    uint64_t v2 = (_DWORD *)MEMORY[0x263F288F8];
    *(void *)(v0 + 312) = 0;
    *(_DWORD *)(v0 + 292) = *v2;
    uint64_t v3 = AGGraphSetValue();
    MEMORY[0x270FA5388](v3);
    AGSubgraphApply();
    AGSubgraphInvalidate();
    _sSay7SwiftUI13ViewResponderCGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
    if (!WeakValue)
    {
LABEL_9:

      return;
    }
    uint64_t v5 = *WeakValue;
    if ((unint64_t)*WeakValue >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_5:
        if ((v5 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x24C523D60](0, v5);
        }
        else
        {
          if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          uint64_t v7 = *(void *)(v5 + 32);
          swift_retain();
        }
        uint64_t v8 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))(*(void *)v7 + 120))(v8);
        swift_release();
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease();
  }
}

void ViewGraph.gestureCategory.getter(uint64_t a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 300);
  int v4 = *MEMORY[0x263F288F8];
  if (v3 == *MEMORY[0x263F288F8]) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)AGGraphGetValue();
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v3 == v4;
}

Swift::Void __swiftcall ViewGraph.setInheritedPhase(_:)(SwiftUI::_GestureInputs::InheritedPhase a1)
{
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance EmptyViewRendererHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ViewGraphDelegate.updateGraph<A>(body:)(a1, a2, *v3, a3, (uint64_t)&protocol witness table for EmptyViewRendererHost);
}

uint64_t ViewGraph.Outputs.rawValue.getter()
{
  return *v0;
}

uint64_t ViewGraph.Outputs.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ViewGraph.Outputs.displayList.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ViewGraph.Outputs.platformItemList.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ViewGraph.Outputs.viewResponders.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static ViewGraph.Outputs.layout.getter(unsigned char *a1@<X8>)
{
  *a1 = 16;
}

void static ViewGraph.Outputs.focus.getter(unsigned char *a1@<X8>)
{
  *a1 = 32;
}

void static ViewGraph.Outputs.all.getter(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

uint64_t ViewGraph.delegate.getter()
{
  swift_beginAccess();
  return MEMORY[0x24C527E00](v0 + 200);
}

uint64_t ViewGraph.delegate.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 208) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ViewGraph.delegate.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x24C527E00](v1 + 200);
  uint64_t v5 = *(void *)(v1 + 208);
  v3[3] = v4;
  v3[4] = v5;
  return ViewGraph.delegate.modify;
}

void ViewGraph.delegate.modify(uint64_t a1, char a2)
{
  int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 208) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t ViewGraph.centersRootView.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 232);
}

uint64_t ViewGraph.centersRootView.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 232) = a1;
  return result;
}

uint64_t (*ViewGraph.centersRootView.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ViewGraph.rootView.getter()
{
  return *(unsigned int *)(v0 + 236);
}

uint64_t key path getter for ViewGraph.transform : ViewGraph@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t ViewGraph.transform.setter()
{
  return swift_release();
}

void (*ViewGraph.transform.modify(void *a1))(void **a1)
{
  int v3 = (char *)malloc(0x54uLL);
  *a1 = v3;
  *((_DWORD *)v3 + 20) = *(_DWORD *)(v1 + 244);
  uint64_t Value = AGGraphGetValue();
  long long v5 = *(_OWORD *)(Value + 8);
  long long v6 = *(_OWORD *)(Value + 24);
  *(void *)int v3 = *(void *)Value;
  *(_OWORD *)(v3 + 8) = v5;
  *(_OWORD *)(v3 + 24) = v6;
  swift_retain();
  return ViewGraph.transform.modify;
}

void ViewGraph.transform.modify(void **a1)
{
  uint64_t v1 = *a1;
  (*a1)[5] = **a1;
  long long v2 = *(_OWORD *)((char *)v1 + 24);
  v1[3] = *(_OWORD *)((char *)v1 + 8);
  v1[4] = v2;
  AGGraphSetValue();
  swift_release();

  free(v1);
}

uint64_t ViewGraph.$transform.getter()
{
  return *(unsigned int *)(v0 + 244);
}

uint64_t ViewGraph.$transform.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 244) = result;
  return result;
}

_DWORD *(*ViewGraph.$transform.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 244);
  return ViewGraph.$transform.modify;
}

_DWORD *ViewGraph.$transform.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 244) = result[2];
  return result;
}

__n128 ViewGraph.zeroPoint.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Value = (__n128 *)AGGraphGetValue();
  __n128 result = *Value;
  *a1 = *Value;
  return result;
}

__n128 ViewGraph.proposedSize.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t ViewGraph.$proposedSize.getter()
{
  return *(unsigned int *)(v0 + 252);
}

uint64_t ViewGraph.safeAreaInsets.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  swift_bridgeObjectRetain();

  return outlined copy of SafeAreaInsets.OptionalValue?(v3);
}

uint64_t key path getter for ViewGraph.safeAreaInsets : ViewGraph@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  swift_bridgeObjectRetain();

  return outlined copy of SafeAreaInsets.OptionalValue?(v3);
}

uint64_t ViewGraph.gestureDebug.getter@<X0>(void *a1@<X8>)
{
  if (*(_DWORD *)(v1 + 296) == *MEMORY[0x263F288F8])
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v11);
    return outlined init with take of GestureDebug.Data?((uint64_t)v11, (uint64_t)a1);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    v11[0] = *Value;
    long long v5 = Value[4];
    long long v7 = Value[1];
    long long v6 = Value[2];
    long long v11[3] = Value[3];
    v11[4] = v5;
    v11[1] = v7;
    _OWORD v11[2] = v6;
    long long v8 = Value[8];
    long long v10 = Value[5];
    long long v9 = Value[6];
    _OWORD v11[7] = Value[7];
    v11[8] = v8;
    v11[5] = v10;
    void v11[6] = v9;
    memmove(a1, Value, 0x90uLL);
    _ViewInputs.base.modify(a1);
    return outlined retain of GestureDebug.Data((uint64_t)v11);
  }
}

unint64_t ViewGraph.$gestureDebug.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 296);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t ViewGraph.$gestureDebug.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 296) = v2;
  return result;
}

unsigned char *(*ViewGraph.$gestureDebug.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 296);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return ViewGraph.$gestureDebug.modify;
}

unsigned char *ViewGraph.$gestureDebug.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 296) = *v1;
  return result;
}

unint64_t ViewGraph.$gestureCategory.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 300);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t ViewGraph.$gestureCategory.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 300) = v2;
  return result;
}

unsigned char *(*ViewGraph.$gestureCategory.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 300);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return ViewGraph.$gestureCategory.modify;
}

unsigned char *ViewGraph.$gestureCategory.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 300) = *v1;
  return result;
}

uint64_t ViewGraph.gesturePreferenceKeys.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t ViewGraph.gesturePreferenceKeys.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*ViewGraph.gesturePreferenceKeys.modify(uint64_t a1))(void *a1)
{
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v1 + 304);
  *(void *)a1 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  return GraphHost.Data.hostPreferenceKeys.modify;
}

uint64_t ViewGraph.$gesturePreferenceKeys.getter()
{
  return *(unsigned int *)(v0 + 304);
}

uint64_t ViewGraph.$gesturePreferenceKeys.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 304) = result;
  return result;
}

_DWORD *(*ViewGraph.$gesturePreferenceKeys.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 304);
  return ViewGraph.$gesturePreferenceKeys.modify;
}

_DWORD *ViewGraph.$gesturePreferenceKeys.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 304) = result[2];
  return result;
}

uint64_t ViewGraph.defaultLayoutComputer.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;

  return swift_retain();
}

uint64_t ViewGraph.defaultLayoutComputer.setter()
{
  return swift_release();
}

void (*ViewGraph.defaultLayoutComputer.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x24uLL);
  *a1 = v3;
  _OWORD v3[8] = *(_DWORD *)(v1 + 320);
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v5 = Value[1];
  *(void *)uint64_t v3 = *Value;
  *((void *)v3 + 1) = v5;
  swift_retain();
  return ViewGraph.defaultLayoutComputer.modify;
}

void ViewGraph.defaultLayoutComputer.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  v1[2] = **a1;
  v1[3] = v2;
  AGGraphSetValue();
  swift_release();

  free(v1);
}

uint64_t ViewGraph.$defaultLayoutComputer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 320) = result;
  return result;
}

_DWORD *(*ViewGraph.$defaultLayoutComputer.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 320);
  return ViewGraph.$defaultLayoutComputer.modify;
}

_DWORD *ViewGraph.$defaultLayoutComputer.modify(_DWORD *result)
{
  *(_DWORD *)(*(void *)result + 320) = result[2];
  return result;
}

uint64_t ViewGraph.sizeThatFitsObservers.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 352);
  return swift_bridgeObjectRetain();
}

uint64_t ViewGraph.sizeThatFitsObservers.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_beginAccess();
  *(void *)(v1 + 352) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ViewGraph.sizeThatFitsObservers.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t ViewGraph.accessibilityEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 360);
}

uint64_t ViewGraph.accessibilityEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 360) = a1;
  return result;
}

uint64_t (*ViewGraph.accessibilityEnabled.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t ViewGraph.requestedOutputs.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 361);
  return result;
}

void key path setter for ViewGraph.requestedOutputs : ViewGraph(unsigned __int8 *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  int v4 = *(unsigned __int8 *)(v3 + 361);
  *(unsigned char *)(v3 + 361) = v2;
  if (v2 != v4) {
    GraphHost.uninstantiate(immediately:)(0);
  }
}

void ViewGraph.requestedOutputs.setter(unsigned __int8 *a1)
{
  int v2 = *a1;
  swift_beginAccess();
  int v3 = *(unsigned __int8 *)(v1 + 361);
  *(unsigned char *)(v1 + 361) = v2;
  if (v2 != v3) {
    GraphHost.uninstantiate(immediately:)(0);
  }
}

void (*ViewGraph.requestedOutputs.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v1 + 361);
  return ViewGraph.requestedOutputs.modify;
}

void ViewGraph.requestedOutputs.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int v2 = *(unsigned __int8 *)(*(void *)a1 + 32);
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  int v4 = *(unsigned __int8 *)(v3 + 361);
  *(unsigned char *)(v3 + 361) = v2;
  if (v2 != v4) {
    GraphHost.uninstantiate(immediately:)(0);
  }

  free(v1);
}

double ViewGraph.NextUpdate.time.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double ViewGraph.NextUpdate.interval.getter()
{
  double result = *(double *)(v0 + 8);
  if ((~*(void *)&result & 0x7FF0000000000000) == 0) {
    return 0.0;
  }
  return result;
}

uint64_t ViewGraph.NextUpdate.reasons.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall ViewGraph.NextUpdate.interval(_:reason:)(Swift::Double _, Swift::UInt32_optional reason)
{
  double v3 = *(double *)(v2 + 8);
  if (_ == 0.0)
  {
    if (v3 <= 0.0166666667) {
      goto LABEL_7;
    }
    CGAffineTransform _ = INFINITY;
  }
  else if (v3 <= _)
  {
    CGAffineTransform _ = *(double *)(v2 + 8);
  }
  *(Swift::Double *)(v2 + 8) = _;
LABEL_7:
  if ((*(void *)&reason.value & 0x100000000) == 0) {
    specialized Set._Variant.insert(_:)(&v4, *(uint64_t *)&reason.value);
  }
}

uint64_t ViewGraph.nextUpdate.getter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 392);
  uint64_t v6 = *(void *)(v2 + 416);
  *(_OWORD *)a1 = *(_OWORD *)(v2 + 376);
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)a2 = *(_OWORD *)(v2 + 400);
  *(void *)(a2 + 16) = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ViewGraph.nextUpdate.setter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  swift_beginAccess();
  v2[47] = v3;
  v2[48] = v4;
  v2[49] = v5;
  v2[50] = v6;
  v2[51] = v7;
  v2[52] = v8;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*ViewGraph.nextUpdate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t (*ViewGraph.preferenceBridge.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = swift_weakLoadStrong();
  return ViewGraph.preferenceBridge.modify;
}

uint64_t ViewGraph.preferenceBridge.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = swift_retain();
    specialized ViewGraph.preferenceBridge.setter(v3);
    swift_release();
  }
  else
  {
    specialized ViewGraph.preferenceBridge.setter(v2);
  }

  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in ViewGraph.init<A>(rootViewType:requestedOutputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 36);
  int v9 = *(_DWORD *)(a2 + 72);
  int v10 = *(_DWORD *)(a1 + 32) | 0x18;
  uint64_t v11 = *(void *)(a1 + 76);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 56);
  long long v20 = *(_OWORD *)(a2 + 64);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  outlined retain of _ViewInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v22 = v5;
  int v23 = v6;
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  uint64_t v28 = v12;
  uint64_t v29 = v13;
  *(void *)&long long v15 = v19;
  *((void *)&v15 + 1) = v20;
  long long v30 = v15;
  int v31 = v9;
  uint64_t v32 = v11;
  uint64_t v16 = (int *)MEMORY[0x263F288F8];
  *(void *)a3 = MEMORY[0x263F8EE78];
  int v17 = *v16;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = v17;
  int v26 = v10;
  int v27 = v21;
  if (ShouldRecordTree)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v22);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
}

uint64_t ViewGraph.__ivar_destroyer()
{
  swift_release();
  outlined destroy of weak GestureGraphDelegate?(v0 + 200);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return swift_bridgeObjectRelease();
}

uint64_t RootGeometry.$layoutDirection.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *uint64_t v1 = v2;
  return result;
}

Swift::Void __swiftcall ViewGraph.timeDidChange()()
{
  swift_beginAccess();
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  v0[47] = static Time.infinity;
  uint64_t v1 = MEMORY[0x263F8EE88];
  v0[48] = 0x7FF0000000000000;
  v0[49] = v1;
  swift_endAccess();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ViewGraph.requestImmediateUpdate()()
{
  swift_beginAccess();
  if (MEMORY[0x24C527E00](v0 + 200))
  {
    uint64_t v1 = *(void *)(v0 + 208);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, double))(v1 + 32))(ObjectType, v1, 0.0);
    swift_unknownObjectRelease();
  }
}

void ViewGraph.__allocating_init(data:)()
{
}

void ViewGraph.init(data:)()
{
}

double static SizeThatFitsMeasurer.measure(given:in:)(uint64_t *a1)
{
  char v1 = *((unsigned char *)a1 + 8);
  uint64_t v2 = a1[2];
  char v3 = *((unsigned char *)a1 + 24);
  uint64_t v13 = *a1;
  char v14 = v1;
  uint64_t v15 = v2;
  char v16 = v3;
  ViewGraph.layoutComputer.getter((uint64_t *)&v12);
  long long v11 = v12;
  ViewGraph.rootViewInsets.getter();
  specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v13, (uint64_t *)&v11, v4, v5, v6, v7);
  double v9 = v8;
  swift_release();
  return v9;
}

uint64_t static SizeThatFitsMeasurer.measure(proposal:layoutComputer:insets:)(uint64_t *a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t v8 = a1[2];
  char v9 = *((unsigned char *)a1 + 24);
  uint64_t v10 = *a2;
  v12[1] = a2[1];
  uint64_t v13 = v6;
  char v14 = v7;
  uint64_t v15 = v8;
  char v16 = v9;
  v12[0] = v10;
  return specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v13, v12, a3, a4, a5, a6);
}

double static SizeThatFitsMeasurer.invalidValue.getter()
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  return *(double *)&static SizeThatFitsMeasurer.invalidValue;
}

uint64_t protocol witness for static ViewGraphGeometryMeasurer.measure(given:in:) in conformance SizeThatFitsMeasurer@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v17 = *a1;
  char v18 = v3;
  uint64_t v19 = v4;
  char v20 = v5;
  ViewGraph.layoutComputer.getter((uint64_t *)&v16);
  long long v15 = v16;
  ViewGraph.rootViewInsets.getter();
  specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v17, (uint64_t *)&v15, v6, v7, v8, v9);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_release();
  *a2 = v11;
  a2[1] = v13;
  return result;
}

uint64_t protocol witness for static ViewGraphGeometryMeasurer.measure(proposal:layoutComputer:insets:) in conformance SizeThatFitsMeasurer@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v8 = *a1;
  char v9 = *((unsigned char *)a1 + 8);
  uint64_t v10 = a1[2];
  char v11 = *((unsigned char *)a1 + 24);
  uint64_t v12 = *a2;
  v16[1] = a2[1];
  uint64_t v17 = v8;
  char v18 = v9;
  uint64_t v19 = v10;
  char v20 = v11;
  v16[0] = v12;
  uint64_t result = specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v17, v16, a4, a5, a6, a7);
  *a3 = v14;
  a3[1] = v15;
  return result;
}

double protocol witness for static ViewGraphGeometryMeasurer.invalidValue.getter in conformance SizeThatFitsMeasurer@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  double result = *(double *)&static SizeThatFitsMeasurer.invalidValue;
  *a1 = static SizeThatFitsMeasurer.invalidValue;
  return result;
}

uint64_t ViewGraph.viewDebugData()()
{
  swift_beginAccess();
  char v1 = *(void **)(v0 + 32);
  uint64_t v5 = MEMORY[0x263F8EE78];
  id v2 = v1;
  uint64_t TreeRoot = AGSubgraphGetTreeRoot();
  if (TreeRoot)
  {
    static _ViewDebug.appendDebugData(from:to:)(TreeRoot, &v5);

    return v5;
  }
  else
  {

    return MEMORY[0x263F8EE78];
  }
}

uint64_t protocol witness for Rule.value.getter in conformance RootDisplayList@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned int *)(v1 + 4);
  uint64_t Value = AGGraphGetValue();
  __int16 v5 = *(_WORD *)(Value + 8);
  char v6 = *(unsigned char *)(Value + 10);
  *(void *)a1 = *(void *)Value;
  *(_WORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 10) = v6;
  uint64_t v7 = ++static DisplayList.Version.lastValue;
  uint64_t v9 = static DisplayList.Version.lastValue;
  swift_bridgeObjectRetain();
  uint64_t result = DisplayList.applyViewGraphTransform(time:version:)(v3, &v9);
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t RootGeometry.layoutDirection.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = *v1;
  if (result == *MEMORY[0x263F288F8])
  {
    char v4 = 2;
  }
  else
  {
    uint64_t result = AGGraphGetValue();
    char v4 = *(unsigned char *)result;
  }
  *a1 = v4;
  return result;
}

unint64_t RootGeometry.$layoutDirection.getter()
{
  LODWORD(v1) = *v0;
  if (*v0 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)(*v0 == *MEMORY[0x263F288F8]) << 32);
}

uint64_t (*RootGeometry.$layoutDirection.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  int v2 = *v1;
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return SecondaryLayerGeometryQuery.$alignment.modify;
}

__n128 RootGeometry.proposedSize.getter@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t RootGeometry.proposedSize.setter()
{
  return AGGraphSetValue();
}

void (*RootGeometry.proposedSize.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x44uLL);
  *a1 = v3;
  v3[16] = *(_DWORD *)(v1 + 4);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v5 = Value[1];
  *(_OWORD *)int v3 = *Value;
  *((_OWORD *)v3 + 1) = v5;
  return SecondaryLayerGeometryQuery.primarySize.modify;
}

uint64_t RootGeometry.$proposedSize.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t RootGeometry.$proposedSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

_DWORD *(*RootGeometry.$proposedSize.modify(uint64_t a1))(_DWORD *result)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return SecondaryLayerGeometryQuery.$layoutDirection.modify;
}

uint64_t RootGeometry.safeAreaInsets.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 8);
  if (result == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    swift_bridgeObjectRetain();
    return outlined copy of SafeAreaInsets.OptionalValue?(v5);
  }
  return result;
}

unint64_t RootGeometry.$safeAreaInsets.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 8);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

uint64_t RootGeometry.$safeAreaInsets.setter(uint64_t result)
{
  int v2 = *MEMORY[0x263F288F8];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

unsigned char *(*RootGeometry.$safeAreaInsets.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 8);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return RootGeometry.$safeAreaInsets.modify;
}

unsigned char *RootGeometry.$safeAreaInsets.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 8) = *v1;
  return result;
}

uint64_t RootGeometry.childLayoutComputer.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 12);
  if (result == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_retain();
  }
  return result;
}

unint64_t RootGeometry.$childLayoutComputer.getter()
{
  LODWORD(v1) = *(_DWORD *)(v0 + 12);
  BOOL v2 = v1 == *MEMORY[0x263F288F8];
  if (v1 == *MEMORY[0x263F288F8]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = v1;
  }
  return v1 | ((unint64_t)v2 << 32);
}

unsigned char *(*RootGeometry.$childLayoutComputer.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 12);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return RootGeometry.$childLayoutComputer.modify;
}

unsigned char *RootGeometry.$childLayoutComputer.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 12) = *v1;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  AnyHashable.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      outlined init with copy of Subview.ID(*(void *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      char v11 = MEMORY[0x24C523BA0](v16, a2);
      outlined destroy of Subview.ID((uint64_t)v16);
      if (v11) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of Subview.ID(a2);
    outlined init with copy of Subview.ID(*(void *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of Subview.ID(a2, (uint64_t)v16);
    uint64_t v15 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v16, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v15;
    swift_bridgeObjectRelease();
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  long long v14;
  uint64_t v16;
  unsigned char v17[40];

  int v3 = v2;
  uint64_t v6 = *v2;
  Swift::Int v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  uint64_t v8 = AnyHashable._rawHashValue(seed:)(v7);
  unint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    char v11 = ~v9;
    while (1)
    {
      outlined init with copy of AnyHashable(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      uint64_t v12 = MEMORY[0x24C523BA0](v17, a2);
      outlined destroy of AnyHashable((uint64_t)v17);
      if (v12) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable(a2);
    outlined init with copy of AnyHashable(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of AnyHashable(a2, (uint64_t)v17);
    long long v16 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *int v3 = v16;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    long long v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      char v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  int v3 = v2;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    long long v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      char v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(void, void, void);
  uint64_t v15;
  void (*v16)(void, void, void);
  void (**v17)(char *, uint64_t);
  uint64_t v18;
  unint64_t v19;
  void (*v20)(void, void, void);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  void v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  int v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    long long v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      char v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        int v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt64 *a1, Swift::UInt64 a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *int v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *int v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized Set._Variant.insert(_:)(_OWORD *a1, Swift::UInt64 a2, Swift::UInt a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = result & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v7 + 48);
    do
    {
      if (*(void *)(v12 + 16 * v10) == a2)
      {
        uint64_t v13 = *(void *)(v12 + 16 * v10 + 8);
        if (__OFSUB__(a3, v13))
        {
          __break(1u);
          return result;
        }
        if (v13 == a3)
        {
          Swift::Int result = 0;
          long long v14 = *(_OWORD *)(*(void *)(*v3 + 48) + 16 * v10);
          goto LABEL_9;
        }
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v3;
  *int v3 = 0x8000000000000000;
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int v3 = v16;
  swift_bridgeObjectRelease();
  *(void *)&long long v14 = a2;
  *((void *)&v14 + 1) = a3;
  Swift::Int result = 1;
LABEL_9:
  *a1 = v14;
  return result;
}

Swift::Int specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<Text.Effect.ClusterIndex>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex, (uint64_t)&type metadata for Text.Effect.ClusterIndex);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &lazy cache variable for type metadata for _SetStorage<Text.Effect.FragmentIdentifier>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier, (uint64_t)&type metadata for Text.Effect.FragmentIdentifier);
}

Swift::Int specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, unint64_t *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v11 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = result & ~v13;
  if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v16 = *(void *)(v15 + 8 * v14);
  if (!__OFSUB__(a2, v16))
  {
    if (v16 == a2)
    {
LABEL_8:
      Swift::Int result = 0;
      a2 = *(void *)(*(void *)(*v5 + 48) + 8 * v14);
LABEL_10:
      *a1 = a2;
      return result;
    }
    uint64_t v17 = ~v13;
    while (1)
    {
      unint64_t v14 = (v14 + 1) & v17;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v18 = *(void *)(v15 + 8 * v14);
      if (__OFSUB__(a2, v18))
      {
        __break(1u);
        goto LABEL_12;
      }
      if (v18 == a2) {
        goto LABEL_8;
      }
    }
LABEL_9:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v14, isUniquelyReferenced_nonNull_native, a3, a4, a5);
    *uint64_t v5 = v20;
    swift_bridgeObjectRelease();
    Swift::Int result = 1;
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *int v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *int v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for CTFontRef(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v28;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v21 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    Swift::Int v29 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      uint64_t v22 = v29;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v22);
    *int v3 = v22;
    swift_bridgeObjectRelease();
    *a1 = v8;
  }
  else
  {
    Hasher.init(_seed:)();
    type metadata accessor for CTFontRef(0);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
    swift_bridgeObjectRetain();
    _CFObject.hash(into:)();
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = static _CFObject.== infix(_:_:)();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        BOOL v19 = *(void **)(*(void *)(*v3 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = static _CFObject.== infix(_:_:)();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *v3;
    *int v3 = 0x8000000000000000;
    id v25 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v25, v13, isUniquelyReferenced_nonNull_native);
    *int v3 = v30;
    swift_bridgeObjectRelease();
    *a1 = v25;
  }
  return 1;
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  id v24;
  void *v26;
  id v27;
  uint64_t v28;

  int v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  uint64_t v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  id v8 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *int v3 = 0x8000000000000000;
    uint64_t v24 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  unint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        uint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        BOOL v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  id v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  uint64_t v27 = v26;
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      uint64_t v12 = (void *)(*(void *)(v7 + 48) + 16 * v10);
      if (v12[1] == a3 && *v12 == a2) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    uint64_t v16 = (Swift::UInt *)(*(void *)(*v3 + 48) + 16 * v10);
    a2 = *v16;
    a3 = v16[1];
  }
  else
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
    *int v3 = v17;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  a1[1] = a3;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  DefaultDescriptionAttribute.rawValue.getter();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_96:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned __int8 v31 = a2;
    uint64_t v33 = *v3;
    *int v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *int v3 = v33;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_100;
  }
  uint64_t v10 = ~v8;
  while (2)
  {
    unint64_t v11 = 0xE400000000000000;
    uint64_t v12 = 1952671090;
    switch(*(unsigned char *)(*(void *)(v6 + 48) + v9))
    {
      case 1:
        unint64_t v11 = 0xE600000000000000;
        uint64_t v12 = 0x6E696769726FLL;
        break;
      case 2:
        uint64_t v12 = 0x696F507472617473;
        unint64_t v11 = 0xEA0000000000746ELL;
        break;
      case 3:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v12 = 0x746E696F50646E65;
        break;
      case 4:
        uint64_t v12 = 0x726F66736E617274;
        unint64_t v11 = 0xE90000000000006DLL;
        break;
      case 5:
        unint64_t v11 = 0xE500000000000000;
        uint64_t v12 = 0x7370696C63;
        break;
      case 6:
        uint64_t v13 = 0x72656E726F63;
        goto LABEL_19;
      case 7:
        id v14 = "continuousCorners";
        goto LABEL_35;
      case 8:
        unint64_t v11 = 0xE700000000000000;
        uint64_t v12 = 0x7974696361706FLL;
        break;
      case 9:
        uint64_t v12 = 0x6957726564726F62;
        unint64_t v11 = 0xEB00000000687464;
        break;
      case 0xA:
        uint64_t v15 = 0x726564726F62;
        goto LABEL_21;
      case 0xB:
        uint64_t v12 = 0x756F72676B636162;
        unint64_t v11 = 0xEF726F6C6F43646ELL;
        break;
      case 0xC:
        id v14 = "compositingFilter";
        goto LABEL_35;
      case 0xD:
        uint64_t v12 = 0x55656C6261736964;
        unint64_t v11 = 0xEE00736574616470;
        break;
      case 0xE:
        uint64_t v12 = 0x704F776F64616873;
        unint64_t v11 = 0xED00007974696361;
        break;
      case 0xF:
        uint64_t v13 = 0x776F64616873;
LABEL_19:
        uint64_t v12 = v13 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
        unint64_t v11 = 0xEC00000073756964;
        break;
      case 0x10:
        uint64_t v15 = 0x776F64616873;
LABEL_21:
        uint64_t v12 = v15 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
        unint64_t v11 = 0xEB00000000726F6CLL;
        break;
      case 0x11:
        uint64_t v12 = 0x664F776F64616873;
        unint64_t v11 = 0xEC00000074657366;
        break;
      case 0x12:
        uint64_t v12 = 0x6150776F64616873;
        unint64_t v11 = 0xEA00000000006874;
        break;
      case 0x13:
        uint64_t v12 = 0xD000000000000012;
        uint64_t v16 = "shadowPathIsBounds";
        goto LABEL_37;
      case 0x14:
        unint64_t v11 = 0xEE007265746E6543;
        goto LABEL_27;
      case 0x15:
        unint64_t v11 = 0xEF676E696C616353;
LABEL_27:
        uint64_t v12 = 0x73746E65746E6F63;
        break;
      case 0x16:
        uint64_t v12 = 0xD000000000000015;
        uint64_t v16 = "contentsMultiplyColor";
        goto LABEL_37;
      case 0x17:
        uint64_t v12 = 0x686353726F6C6F63;
        unint64_t v11 = 0xEB00000000656D65;
        break;
      case 0x18:
        unint64_t v11 = 0xE700000000000000;
        uint64_t v12 = 0x737265746C6966;
        break;
      case 0x19:
        unint64_t v11 = 0xEC00000065707954;
        goto LABEL_33;
      case 0x1A:
        unint64_t v11 = 0xEE0073726F6C6F43;
LABEL_33:
        uint64_t v12 = 0x746E656964617267;
        break;
      case 0x1B:
        id v14 = "gradientLocations";
LABEL_35:
        unint64_t v11 = (unint64_t)(v14 - 32) | 0x8000000000000000;
        uint64_t v12 = 0xD000000000000011;
        break;
      case 0x1C:
        uint64_t v12 = 0xD000000000000016;
        uint64_t v16 = "gradientInterpolations";
LABEL_37:
        unint64_t v11 = (unint64_t)(v16 - 32) | 0x8000000000000000;
        break;
      default:
        break;
    }
    unint64_t v17 = 0xE400000000000000;
    unint64_t v18 = 1952671090;
    switch(a2)
    {
      case 1u:
        unint64_t v17 = 0xE600000000000000;
        if (v12 == 0x6E696769726FLL) {
          goto LABEL_89;
        }
        goto LABEL_90;
      case 2u:
        unint64_t v17 = 0xEA0000000000746ELL;
        if (v12 != 0x696F507472617473) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 3u:
        unint64_t v17 = 0xE800000000000000;
        uint64_t v19 = 0x696F50646E65;
        goto LABEL_84;
      case 4u:
        unint64_t v17 = 0xE90000000000006DLL;
        if (v12 != 0x726F66736E617274) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 5u:
        unint64_t v17 = 0xE500000000000000;
        if (v12 != 0x7370696C63) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 6u:
        uint64_t v20 = 0x72656E726F63;
        goto LABEL_62;
      case 7u:
        Swift::Int v21 = "continuousCorners";
        goto LABEL_87;
      case 8u:
        unint64_t v17 = 0xE700000000000000;
        if (v12 != 0x7974696361706FLL) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 9u:
        uint64_t v22 = 0x6957726564726F62;
        uint64_t v23 = 6845540;
        goto LABEL_77;
      case 0xAu:
        uint64_t v24 = 0x726564726F62;
        goto LABEL_64;
      case 0xBu:
        unint64_t v17 = 0xEF726F6C6F43646ELL;
        if (v12 != 0x756F72676B636162) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0xCu:
        Swift::Int v21 = "compositingFilter";
        goto LABEL_87;
      case 0xDu:
        unint64_t v17 = 0xEE00736574616470;
        if (v12 != 0x55656C6261736964) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0xEu:
        unint64_t v17 = 0xED00007974696361;
        if (v12 != 0x704F776F64616873) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0xFu:
        uint64_t v20 = 0x776F64616873;
LABEL_62:
        uint64_t v25 = v20 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
        uint64_t v26 = 1937074532;
        goto LABEL_66;
      case 0x10u:
        uint64_t v24 = 0x776F64616873;
LABEL_64:
        uint64_t v22 = v24 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
        uint64_t v23 = 7499628;
        goto LABEL_77;
      case 0x11u:
        uint64_t v25 = 0x664F776F64616873;
        uint64_t v26 = 1952805734;
LABEL_66:
        unint64_t v17 = v26 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        if (v12 != v25) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x12u:
        unint64_t v17 = 0xEA00000000006874;
        if (v12 != 0x6150776F64616873) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x13u:
        unint64_t v27 = 0xD000000000000012;
        uint64_t v28 = "shadowPathIsBounds";
        goto LABEL_94;
      case 0x14u:
        unint64_t v17 = 0xEE007265746E6543;
        goto LABEL_73;
      case 0x15u:
        unint64_t v17 = 0xEF676E696C616353;
LABEL_73:
        if (v12 != 0x73746E65746E6F63) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x16u:
        unint64_t v27 = 0xD000000000000015;
        uint64_t v28 = "contentsMultiplyColor";
        goto LABEL_94;
      case 0x17u:
        uint64_t v22 = 0x686353726F6C6F63;
        uint64_t v23 = 6647141;
LABEL_77:
        unint64_t v17 = v23 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        if (v12 != v22) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x18u:
        unint64_t v17 = 0xE700000000000000;
        if (v12 != 0x737265746C6966) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x19u:
        unint64_t v17 = 0xEC00000065707954;
        goto LABEL_83;
      case 0x1Au:
        unint64_t v17 = 0xEE0073726F6C6F43;
LABEL_83:
        uint64_t v19 = 0x656964617267;
LABEL_84:
        if (v12 != (v19 & 0xFFFFFFFFFFFFLL | 0x746E000000000000)) {
          goto LABEL_90;
        }
        goto LABEL_89;
      case 0x1Bu:
        Swift::Int v21 = "gradientLocations";
LABEL_87:
        unint64_t v17 = (unint64_t)(v21 - 32) | 0x8000000000000000;
        unint64_t v18 = 0xD000000000000011;
        goto LABEL_88;
      case 0x1Cu:
        unint64_t v27 = 0xD000000000000016;
        uint64_t v28 = "gradientInterpolations";
LABEL_94:
        unint64_t v17 = (unint64_t)(v28 - 32) | 0x8000000000000000;
        if (v12 != v27) {
          goto LABEL_90;
        }
        goto LABEL_89;
      default:
LABEL_88:
        if (v12 != v18) {
          goto LABEL_90;
        }
LABEL_89:
        if (v11 == v17)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_99;
        }
LABEL_90:
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          unint64_t v9 = (v9 + 1) & v10;
          if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_96;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_99:
        uint64_t result = 0;
        unsigned __int8 v31 = *(unsigned char *)(*(void *)(*v3 + 48) + v9);
LABEL_100:
        *a1 = v31;
        return result;
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *int v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *int v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for _SetStorage<CTFontRef>();
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CTFontRef(0);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
        _CFObject.hash(into:)();
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t))
{
  unint64_t v7 = v5;
  uint64_t v8 = *v5;
  type metadata accessor for _SetStorage<EventID>(0, a2, a3);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    int64_t v11 = 0;
    uint64_t v32 = (void *)(v8 + 56);
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & *(void *)(v8 + 56);
    int64_t v15 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = result + 56;
    while (1)
    {
      if (v14)
      {
        unint64_t v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v15) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v15) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v11];
          if (!v21)
          {
            int64_t v11 = v20 + 2;
            if (v20 + 2 >= v15) {
              goto LABEL_33;
            }
            unint64_t v21 = v32[v11];
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v15)
              {
LABEL_33:
                uint64_t v31 = 1 << *(unsigned char *)(v8 + 32);
                if (v31 > 63) {
                  bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v32 = -1 << v31;
                }
                unint64_t v7 = v5;
                *(void *)(v8 + 16) = 0;
                break;
              }
              unint64_t v21 = v32[v22];
              if (!v21)
              {
                while (1)
                {
                  int64_t v11 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v15) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v32[v11];
                  ++v22;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v22;
            }
          }
        }
LABEL_23:
        unint64_t v14 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      uint64_t v23 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
      Hasher.init(_seed:)();
      a5(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v16 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v25) & ~*(void *)(v16 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v16 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v17 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v7 = v10;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
  _CFObject.hash(into:)();
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      outlined init with copy of Subview.ID(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = MEMORY[0x24C523BA0](v19, v6);
      unint64_t result = outlined destroy of Subview.ID((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned char v19[40];

  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  unint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      char v12 = MEMORY[0x24C523BA0](v19, v6);
      unint64_t result = outlined destroy of AnyHashable((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v14 = *(void *)(v13 + 48) + 40 * a2;
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  Swift::UInt64 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  uint64_t v5 = result;
  Swift::Int v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E7D0]);
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()((unint64_t *)&lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<Text.Effect.Identifier>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier, (uint64_t)&type metadata for Text.Effect.Identifier, MEMORY[0x263F8E7D0]);
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      char v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  long long v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;

  uint64_t v4 = v3;
  Swift::Int v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v8 > v7)
      {
        unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_100;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v9 = *v3;
    Hasher.init(_seed:)();
    DefaultDescriptionAttribute.rawValue.getter();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t result = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
    a2 = result & ~v10;
    if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      while (2)
      {
        char v12 = 0xE400000000000000;
        uint64_t v13 = 1952671090;
        switch(*(unsigned char *)(*(void *)(v9 + 48) + a2))
        {
          case 1:
            char v12 = 0xE600000000000000;
            uint64_t v13 = 0x6E696769726FLL;
            break;
          case 2:
            char v12 = 0xEA0000000000746ELL;
            uint64_t v13 = 0x696F507472617473;
            break;
          case 3:
            char v12 = 0xE800000000000000;
            uint64_t v13 = 0x746E696F50646E65;
            break;
          case 4:
            uint64_t v13 = 0x726F66736E617274;
            char v12 = 0xE90000000000006DLL;
            break;
          case 5:
            char v12 = 0xE500000000000000;
            uint64_t v13 = 0x7370696C63;
            break;
          case 6:
            uint64_t v16 = 0x72656E726F63;
            goto LABEL_31;
          case 7:
            uint64_t v14 = "continuousCorners";
            goto LABEL_23;
          case 8:
            char v12 = 0xE700000000000000;
            uint64_t v13 = 0x7974696361706FLL;
            break;
          case 9:
            uint64_t v13 = 0x6957726564726F62;
            char v12 = 0xEB00000000687464;
            break;
          case 0xA:
            long long v15 = 0x726564726F62;
            goto LABEL_34;
          case 0xB:
            uint64_t v13 = 0x756F72676B636162;
            char v12 = 0xEF726F6C6F43646ELL;
            break;
          case 0xC:
            uint64_t v14 = "compositingFilter";
            goto LABEL_23;
          case 0xD:
            uint64_t v13 = 0x55656C6261736964;
            BOOL v17 = 0x736574616470;
            goto LABEL_43;
          case 0xE:
            uint64_t v13 = 0x704F776F64616873;
            char v12 = 0xED00007974696361;
            break;
          case 0xF:
            uint64_t v16 = 0x776F64616873;
LABEL_31:
            uint64_t v13 = v16 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
            char v12 = 0xEC00000073756964;
            break;
          case 0x10:
            long long v15 = 0x776F64616873;
LABEL_34:
            uint64_t v13 = v15 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
            char v12 = 0xEB00000000726F6CLL;
            break;
          case 0x11:
            uint64_t v13 = 0x664F776F64616873;
            char v12 = 0xEC00000074657366;
            break;
          case 0x12:
            uint64_t v13 = 0x6150776F64616873;
            char v12 = 0xEA00000000006874;
            break;
          case 0x13:
            uint64_t v13 = 0xD000000000000012;
            uint64_t v18 = "shadowPathIsBounds";
            goto LABEL_41;
          case 0x14:
            uint64_t v13 = 0x73746E65746E6F63;
            BOOL v17 = 0x7265746E6543;
            goto LABEL_43;
          case 0x15:
            uint64_t v13 = 0x73746E65746E6F63;
            char v12 = 0xEF676E696C616353;
            break;
          case 0x16:
            uint64_t v13 = 0xD000000000000015;
            uint64_t v18 = "contentsMultiplyColor";
            goto LABEL_41;
          case 0x17:
            uint64_t v13 = 0x686353726F6C6F63;
            char v12 = 0xEB00000000656D65;
            break;
          case 0x18:
            char v12 = 0xE700000000000000;
            uint64_t v13 = 0x737265746C6966;
            break;
          case 0x19:
            uint64_t v13 = 0x746E656964617267;
            char v12 = 0xEC00000065707954;
            break;
          case 0x1A:
            uint64_t v13 = 0x746E656964617267;
            BOOL v17 = 0x73726F6C6F43;
LABEL_43:
            char v12 = v17 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            break;
          case 0x1B:
            uint64_t v14 = "gradientLocations";
LABEL_23:
            char v12 = (unint64_t)(v14 - 32) | 0x8000000000000000;
            uint64_t v13 = 0xD000000000000011;
            break;
          case 0x1C:
            uint64_t v13 = 0xD000000000000016;
            uint64_t v18 = "gradientInterpolations";
LABEL_41:
            char v12 = (unint64_t)(v18 - 32) | 0x8000000000000000;
            break;
          default:
            break;
        }
        unint64_t v19 = 0xE400000000000000;
        int64_t v20 = 1952671090;
        switch(v6)
        {
          case 1:
            unint64_t v19 = 0xE600000000000000;
            if (v13 != 0x6E696769726FLL) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 2:
            unint64_t v19 = 0xEA0000000000746ELL;
            if (v13 != 0x696F507472617473) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 3:
            unint64_t v19 = 0xE800000000000000;
            if (v13 != 0x746E696F50646E65) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 4:
            unint64_t v19 = 0xE90000000000006DLL;
            if (v13 != 0x726F66736E617274) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 5:
            unint64_t v19 = 0xE500000000000000;
            if (v13 != 0x7370696C63) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 6:
            char v27 = 0x72656E726F63;
            goto LABEL_75;
          case 7:
            unint64_t v21 = "continuousCorners";
            goto LABEL_63;
          case 8:
            unint64_t v19 = 0xE700000000000000;
            if (v13 != 0x7974696361706FLL) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 9:
            uint64_t v23 = 0x6957726564726F62;
            uint64_t v24 = 6845540;
            goto LABEL_88;
          case 10:
            int64_t v22 = 0x726564726F62;
            goto LABEL_81;
          case 11:
            unint64_t v19 = 0xEF726F6C6F43646ELL;
            if (v13 != 0x756F72676B636162) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 12:
            unint64_t v21 = "compositingFilter";
            goto LABEL_63;
          case 13:
            unint64_t v28 = 0x55656C6261736964;
            BOOL v29 = 0x736574616470;
            goto LABEL_98;
          case 14:
            unint64_t v19 = 0xED00007974696361;
            if (v13 != 0x704F776F64616873) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 15:
            char v27 = 0x776F64616873;
LABEL_75:
            unint64_t v25 = v27 & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
            unint64_t v26 = 1937074532;
            goto LABEL_76;
          case 16:
            int64_t v22 = 0x776F64616873;
LABEL_81:
            uint64_t v23 = v22 & 0xFFFFFFFFFFFFLL | 0x6F43000000000000;
            uint64_t v24 = 7499628;
            goto LABEL_88;
          case 17:
            unint64_t v25 = 0x664F776F64616873;
            unint64_t v26 = 1952805734;
            goto LABEL_76;
          case 18:
            unint64_t v19 = 0xEA00000000006874;
            if (v13 != 0x6150776F64616873) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 19:
            int64_t v20 = 0xD000000000000012;
            uint64_t v30 = "shadowPathIsBounds";
            goto LABEL_91;
          case 20:
            unint64_t v28 = 0x73746E65746E6F63;
            BOOL v29 = 0x7265746E6543;
            goto LABEL_98;
          case 21:
            unint64_t v19 = 0xEF676E696C616353;
            if (v13 != 0x73746E65746E6F63) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 22:
            int64_t v20 = 0xD000000000000015;
            uint64_t v30 = "contentsMultiplyColor";
            goto LABEL_91;
          case 23:
            uint64_t v23 = 0x686353726F6C6F63;
            uint64_t v24 = 6647141;
LABEL_88:
            unint64_t v19 = v24 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
            if (v13 != v23) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 24:
            unint64_t v19 = 0xE700000000000000;
            if (v13 != 0x737265746C6966) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 25:
            unint64_t v25 = 0x746E656964617267;
            unint64_t v26 = 1701869908;
LABEL_76:
            unint64_t v19 = v26 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
            if (v13 != v25) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 26:
            unint64_t v28 = 0x746E656964617267;
            BOOL v29 = 0x73726F6C6F43;
LABEL_98:
            unint64_t v19 = v29 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
            if (v13 != v28) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 27:
            unint64_t v21 = "gradientLocations";
LABEL_63:
            unint64_t v19 = (unint64_t)(v21 - 32) | 0x8000000000000000;
            if (v13 != 0xD000000000000011) {
              goto LABEL_94;
            }
            goto LABEL_93;
          case 28:
            int64_t v20 = 0xD000000000000016;
            uint64_t v30 = "gradientInterpolations";
LABEL_91:
            unint64_t v19 = (unint64_t)(v30 - 32) | 0x8000000000000000;
            goto LABEL_92;
          default:
LABEL_92:
            if (v13 != v20) {
              goto LABEL_94;
            }
LABEL_93:
            if (v12 == v19) {
              goto LABEL_103;
            }
LABEL_94:
            uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            unint64_t result = swift_bridgeObjectRelease();
            if (v31) {
              goto LABEL_104;
            }
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_100:
  uint64_t v32 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v32 + 48) + a2) = v6;
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v34 = __OFADD__(v33, 1);
  int v35 = v33 + 1;
  if (v34)
  {
    __break(1u);
LABEL_103:
    swift_bridgeObjectRelease_n();
LABEL_104:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x24618C2B4);
  }
  *(void *)(v32 + 16) = v35;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  uint64_t v5 = result;
  Swift::Int v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  unint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  char v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1);
  long long v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  BOOL v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F07EC8], (void (*)(void, double))type metadata accessor for _SetStorage<Duration.UnitsFormatStyle.Unit>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit, MEMORY[0x263F07EC8]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  BOOL v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F073D0], (void (*)(void, double))type metadata accessor for _SetStorage<Date.ComponentsFormatStyle.Field>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field, MEMORY[0x263F073D0]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  BOOL v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x263F07508], (void (*)(void, double))type metadata accessor for _SetStorage<UUID>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::UInt a2, unint64_t a3, char a4)
{
  Swift::UInt64 v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    if (a4)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_16;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v10 = *v4;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v7);
    Hasher._combine(_:)(a2);
    uint64_t result = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
    a3 = result & ~v11;
    if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v12 = ~v11;
      uint64_t v13 = *(void *)(v10 + 48);
      do
      {
        if (*(void *)(v13 + 16 * a3) == v7)
        {
          uint64_t v14 = *(void *)(v13 + 16 * a3 + 8);
          if (__OFSUB__(a2, v14))
          {
            __break(1u);
            break;
          }
          if (v14 == a2) {
            goto LABEL_19;
          }
        }
        a3 = (a3 + 1) & v12;
      }
      while (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
    }
  }
LABEL_16:
  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = (Swift::UInt64 *)(*(void *)(v15 + 48) + 16 * a3);
  *uint64_t v16 = v7;
  v16[1] = a2;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
LABEL_19:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v15 + 16) = v19;
  }
  return result;
}

{
  uint64_t *v4;
  Swift::UInt v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  Swift::UInt *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  Swift::UInt64 v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_15;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v9 > v8)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_15;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a3 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = (void *)(*(void *)(v10 + 48) + 16 * a3);
      if (v13[1] == a2 && *v13 == v7) {
        goto LABEL_18;
      }
      a3 = (a3 + 1) & v12;
    }
    while (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) != 0);
  }
LABEL_15:
  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v16 = (Swift::UInt *)(*(void *)(v15 + 48) + 16 * a3);
  *uint64_t v16 = v7;
  v16[1] = a2;
  uint64_t v17 = *(void *)(v15 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (!v18)
  {
    *(void *)(v15 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_18:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, unint64_t *a4, void (*a5)(void), uint64_t a6)
{
  Swift::UInt v8 = result;
  unint64_t v9 = *(void *)(*v6 + 16);
  unint64_t v10 = *(void *)(*v6 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_16;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v11, a4, a5, a6, MEMORY[0x263F8E7C8]);
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()(a4, a5);
      goto LABEL_16;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v11, a4, a5, a6, MEMORY[0x263F8E7C8]);
  }
  uint64_t v12 = *v6;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a2 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v14 = *(void *)(v12 + 48);
    uint64_t v15 = *(void *)(v14 + 8 * a2);
    if (__OFSUB__(v8, v15)) {
      goto LABEL_20;
    }
    if (v15 == v8)
    {
LABEL_15:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v17 = *(void *)(v14 + 8 * a2);
        if (__OFSUB__(v8, v17))
        {
          __break(1u);
          goto LABEL_19;
        }
        if (v17 == v8) {
          goto LABEL_15;
        }
      }
    }
  }
LABEL_16:
  uint64_t v18 = *v6;
  *(void *)(*v6 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = v8;
  uint64_t v19 = *(void *)(v18 + 16);
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v18 + 16) = v21;
    return result;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
  _CFObject.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static _CFObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static _CFObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), void (*a2)(void, double))
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v26 - v8;
  a2(0, v7);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v12;
    return result;
  }
  uint64_t result = (void *)(v11 + 56);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  BOOL v27 = v4;
  uint64_t v28 = (const void *)(v10 + 56);
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v14) {
    uint64_t result = memmove(result, v28, 8 * v14);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 56);
  int64_t v29 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v23);
    ++v16;
    if (!v24)
    {
      int64_t v16 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_28;
      }
      unint64_t v24 = *((void *)v28 + v16);
      if (!v24)
      {
        int64_t v16 = v23 + 2;
        if (v23 + 2 >= v29) {
          goto LABEL_28;
        }
        unint64_t v24 = *((void *)v28 + v16);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v16 << 6);
LABEL_12:
    unint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(v10 + 48) + v22, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v12 + 48) + v22, v9, v5);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v29)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_30;
  }
  unint64_t v24 = *((void *)v28 + v25);
  if (v24)
  {
    int64_t v16 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v16 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_28;
    }
    unint64_t v24 = *((void *)v28 + v16);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(unint64_t *a1, void (*a2)(void))
{
  int v3 = v2;
  type metadata accessor for _SetStorage<EventID>(0, a1, a2);
  uint64_t v4 = *v2;
  uint64_t v5 = static _SetStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *int v3 = v6;
    return result;
  }
  uint64_t result = (void *)(v5 + 56);
  uint64_t v8 = v4 + 56;
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 56 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v4 + 56), 8 * v9);
  }
  int64_t v11 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v15) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v15) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_12:
    *(void *)(*(void *)(v6 + 48) + 8 * v17) = *(void *)(*(void *)(v4 + 48) + 8 * v17);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v15) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<CTFontRef>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<NSAttributedStringKey>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t))
{
  unint64_t v7 = v5;
  uint64_t v8 = *v5;
  type metadata accessor for _SetStorage<EventID>(0, a2, a3);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v7 = v10;
    return result;
  }
  int64_t v11 = 0;
  uint64_t v12 = v8 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & *(void *)(v8 + 56);
  int64_t v31 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v31) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v11);
      if (!v21)
      {
        int64_t v11 = v20 + 2;
        if (v20 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v11);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_24:
    uint64_t v23 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
    Hasher.init(_seed:)();
    a5(v23);
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v16 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v25) & ~*(void *)(v16 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v16 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
    ++*(void *)(v10 + 16);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v7 = v5;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v12 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_246190C00()
{
  return swift_deallocObject();
}

uint64_t sub_246190C10()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ViewGraph.Outputs and conformance ViewGraph.Outputs()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs;
  if (!lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs;
  if (!lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs;
  if (!lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs;
  if (!lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewGraph.Outputs and conformance ViewGraph.Outputs);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewGraphGeometryMeasurer.Size : Equatable in SizeThatFitsMeasurer()
{
  return lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, type metadata accessor for CGSize);
}

unint64_t instantiation function for generic protocol witness table for RootGeometry(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RootGeometry and conformance RootGeometry();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_246190E1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 200;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C527E00](v4);
  uint64_t v6 = *(void *)(v3 + 208);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_246190E78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 208) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_246190ED8()
{
  return AGGraphSetValue();
}

uint64_t sub_246190F54@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 244);
  return result;
}

_DWORD *sub_246190F64(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 244) = *result;
  return result;
}

__n128 sub_246190F74@<Q0>(__n128 *a1@<X8>)
{
  uint64_t Value = (__n128 *)AGGraphGetValue();
  __n128 result = *Value;
  *a1 = *Value;
  return result;
}

uint64_t sub_246190FB4()
{
  return AGGraphSetValue();
}

uint64_t sub_246191020@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 248);
  return result;
}

_DWORD *sub_246191030(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 248) = *result;
  return result;
}

__n128 sub_246191040@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t sub_246191080()
{
  return AGGraphSetValue();
}

uint64_t sub_2461910EC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 252);
  return result;
}

_DWORD *sub_2461910FC(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 252) = *result;
  return result;
}

uint64_t sub_246191110()
{
  return AGGraphSetValue();
}

uint64_t sub_246191178@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 256);
  return result;
}

_DWORD *sub_246191188(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 256) = *result;
  return result;
}

uint64_t sub_246191198@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(*(void *)result + 296);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_2461911C4(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(*(void *)a2 + 296) = *v2;
  return result;
}

uint64_t sub_2461911E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(*(void *)result + 300);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_246191214(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(*(void *)a2 + 300) = *v2;
  return result;
}

uint64_t sub_246191238@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();

  return swift_bridgeObjectRetain();
}

uint64_t sub_246191288()
{
  return AGGraphSetValue();
}

uint64_t sub_2461912F0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 304);
  return result;
}

_DWORD *sub_246191300(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 304) = *result;
  return result;
}

uint64_t sub_246191310@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;

  return swift_retain();
}

uint64_t sub_246191364()
{
  return AGGraphSetValue();
}

uint64_t sub_2461913CC@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(*(void *)result + 320);
  return result;
}

_DWORD *sub_2461913DC(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(*(void *)a2 + 320) = *result;
  return result;
}

uint64_t sub_2461913EC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 361);
  return result;
}

uint64_t sub_246191438@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_246191468()
{
  uint64_t v0 = swift_retain();
  specialized ViewGraph.preferenceBridge.setter(v0);

  return swift_release();
}

int *sub_2461914AC@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *result;
  BOOL v3 = *result == *MEMORY[0x263F288F8];
  if (*result == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_2461914D4(uint64_t result, _DWORD *a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *a2 = *v2;
  return result;
}

__n128 sub_2461914F4@<Q0>(_OWORD *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  __n128 result = *(__n128 *)Value;
  long long v4 = *(_OWORD *)(Value + 16);
  *a1 = *(_OWORD *)Value;
  a1[1] = v4;
  return result;
}

uint64_t sub_246191530()
{
  return AGGraphSetValue();
}

uint64_t sub_246191598@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 4);
  return result;
}

_DWORD *sub_2461915A4(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *result;
  return result;
}

uint64_t sub_2461915B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_2461915D8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 8) = *v2;
  return result;
}

uint64_t sub_2461915F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 12);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_246191620(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 12) = *v2;
  return result;
}

uint64_t dispatch thunk of ViewGraphDelegate.as<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ViewGraphDelegate.updateViewGraph<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ViewGraphDelegate.requestUpdate(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t method lookup function for ViewGraph(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ViewGraph);
}

uint64_t dispatch thunk of ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)()
{
  return (*(uint64_t (**)(void))(v0 + 528))();
}

ValueMetadata *type metadata accessor for ViewGraph.Outputs()
{
  return &type metadata for ViewGraph.Outputs;
}

void *assignWithCopy for ViewGraph.NextUpdate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ViewGraph.NextUpdate()
{
  return &type metadata for ViewGraph.NextUpdate;
}

ValueMetadata *type metadata accessor for SizeThatFitsMeasurer()
{
  return &type metadata for SizeThatFitsMeasurer;
}

ValueMetadata *type metadata accessor for RootGeometry()
{
  return &type metadata for RootGeometry;
}

uint64_t dispatch thunk of RootTransformProvider.rootTransform()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *type metadata accessor for RootDisplayList()
{
  return &unk_26FA51100;
}

ValueMetadata *type metadata accessor for RootTransform()
{
  return &type metadata for RootTransform;
}

unint64_t instantiation function for generic protocol witness table for RootDisplayList(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RootDisplayList and conformance RootDisplayList();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _SetStorage<AGTypeID>()
{
  if (!lazy cache variable for type metadata for _SetStorage<AGTypeID>)
  {
    type metadata accessor for AGTypeID(255);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit((unint64_t *)&lazy protocol witness table cache variable for type AGTypeID and conformance AGTypeID, type metadata accessor for AGTypeID);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<AGTypeID>);
    }
  }
}

uint64_t sub_246191834()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_246191884()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in ViewGraph.updateOutputs(async:)()
{
  return closure #1 in ViewGraph.updateOutputs(async:)(*(unsigned char **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char **)(v0 + 32), *(unsigned char *)(v0 + 40), *(unsigned char **)(v0 + 48));
}

uint64_t sub_2461918A8()
{
  return swift_deallocObject();
}

void type metadata accessor for _SetStorage<NSAttributedStringKey>()
{
  if (!lazy cache variable for type metadata for _SetStorage<NSAttributedStringKey>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<NSAttributedStringKey>);
    }
  }
}

void type metadata accessor for _SetStorage<CTFontRef>()
{
  if (!lazy cache variable for type metadata for _SetStorage<CTFontRef>)
  {
    type metadata accessor for CTFontRef(255);
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, type metadata accessor for CTFontRef);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<CTFontRef>);
    }
  }
}

uint64_t static AttributeCountInfoKey.defaultValue.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_268F04DD8;
  uint64_t v3 = qword_268F04DE0;
  uint64_t v4 = unk_268F04DE8;
  *a1 = static AttributeCountInfoKey.defaultValue;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static AttributeCountInfoKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v4);
  v3[0] = v4[0];
  v3[1] = v4[1];
  v3[2] = v4[2];
  v3[3] = v4[3];
  AttributeCountTestInfo.merge(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AttributeCountInfoKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_268F04DD8;
  uint64_t v3 = qword_268F04DE0;
  uint64_t v4 = unk_268F04DE8;
  *a1 = static AttributeCountInfoKey.defaultValue;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AttributeCountInfoKey(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v4);
  v3[0] = v4[0];
  v3[1] = v4[1];
  v3[2] = v4[2];
  v3[3] = v4[3];
  AttributeCountTestInfo.merge(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for AttributeCountInfoKey()
{
  return &type metadata for AttributeCountInfoKey;
}

uint64_t View.transition<A>(_:)(uint64_t a1, uint64_t a2)
{
  double v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  uint64_t v9 = AnyTransition.init<A>(_:)((uint64_t)v5);
  View._trait<A>(_:_:)((uint64_t)&type metadata for TransitionTraitKey, (uint64_t)&v9, a2);
  return swift_release();
}

uint64_t ViewTraitCollection.optionalTransition(ignoringIdentity:)(char a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = one-time initialization token for opacity;
  swift_bridgeObjectRetain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v6, v3);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_release();
  if (a1 & 1) != 0 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v8))
  {
    swift_release();
    return 0;
  }
  return v7;
}

uint64_t static TransitionTraitKey.defaultValue.getter()
{
  if (one-time initialization token for opacity != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TransitionTraitKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for opacity != -1) {
    swift_once();
  }
  *a1 = static AnyTransition.opacity;

  return swift_retain();
}

uint64_t static CanTransitionTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t ViewTraitCollection.canTransition.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  char v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t key path getter for ViewTraitCollection.canTransition : ViewTraitCollection@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4 & 1;
  return result;
}

uint64_t (*ViewTraitCollection.canTransition.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  char v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v3);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ViewTraitCollection.canTransition.modify;
}

uint64_t ViewTraitCollection.canTransition.modify(uint64_t a1)
{
  return specialized ViewTraitCollection.subscript.setter(*(unsigned char *)(a1 + 8));
}

uint64_t sub_2461920C8(char *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for CanTransitionTraitKey()
{
  return &type metadata for CanTransitionTraitKey;
}

uint64_t sub_246192100()
{
  return swift_getWitnessTable();
}

void soft_AXSSAccessibilityDescriptionForSymbolName_cold_1()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  CoreViewSetGeometry_cold_1(v0);
}

void CoreViewSetGeometry_cold_1()
{
}

void _UIKitAddSubview_cold_1()
{
}

uint64_t type metadata accessor for Quadrature.Integrator()
{
  return MEMORY[0x270F9C938]();
}

uint64_t Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)()
{
  return MEMORY[0x270F9C940]();
}

uint64_t type metadata accessor for Quadrature.Error()
{
  return MEMORY[0x270F9C948]();
}

uint64_t Quadrature.integrate(over:integrand:)()
{
  return MEMORY[0x270F9C950]();
}

uint64_t type metadata accessor for Quadrature()
{
  return MEMORY[0x270F9C958]();
}

uint64_t type metadata accessor for Morphology()
{
  return MEMORY[0x270EEDAC0]();
}

uint64_t dispatch thunk of FormatStyle.format(_:)()
{
  return MEMORY[0x270EEDCC0]();
}

uint64_t dispatch thunk of FormatStyle.locale(_:)()
{
  return MEMORY[0x270EEDCC8]();
}

uint64_t static FormatStyle<>.timeDuration.getter()
{
  return MEMORY[0x270EEDCE8]();
}

uint64_t static FormatStyle<>.time(pattern:)()
{
  return MEMORY[0x270EEDD50]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEDDD0]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x270EEDE10]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x270EEDE18]();
}

uint64_t static JSONEncoder.OutputFormatting.sortedKeys.getter()
{
  return MEMORY[0x270EEDE28]();
}

uint64_t type metadata accessor for JSONEncoder.OutputFormatting()
{
  return MEMORY[0x270EEDE58]();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return MEMORY[0x270EEDE70]();
}

uint64_t type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy()
{
  return MEMORY[0x270EEDEC8]();
}

uint64_t dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter()
{
  return MEMORY[0x270EEDED0]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t CharacterSet.subtracting(_:)()
{
  return MEMORY[0x270EEE090]();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return MEMORY[0x270EEE098]();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x270EEE0C0]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x270EEE188]();
}

uint64_t static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE1A0]();
}

uint64_t static CharacterSet.newlines.getter()
{
  return MEMORY[0x270EEE218]();
}

uint64_t CharacterSet.init()()
{
  return MEMORY[0x270EEE248]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x270EEE258]();
}

uint64_t static DateInterval.== infix(_:_:)()
{
  return MEMORY[0x270EEE2D8]();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEE2E8]();
}

uint64_t DateInterval.end.getter()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t DateInterval.init(start:end:)()
{
  return MEMORY[0x270EEE2F8]();
}

uint64_t DateInterval.init(start:duration:)()
{
  return MEMORY[0x270EEE300]();
}

uint64_t DateInterval.start.getter()
{
  return MEMORY[0x270EEE308]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x270EEE338]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x270EEE618]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x270EEE628]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x270EEE648]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

uint64_t static AttributeScope.decodingConfiguration.getter()
{
  return MEMORY[0x270EEE6A0]();
}

uint64_t static AttributeScope.encodingConfiguration.getter()
{
  return MEMORY[0x270EEE6B0]();
}

uint64_t DateComponents.nanosecond.setter()
{
  return MEMORY[0x270EEE6C8]();
}

uint64_t DateComponents.day.setter()
{
  return MEMORY[0x270EEE780]();
}

uint64_t DateComponents.hour.setter()
{
  return MEMORY[0x270EEE7C8]();
}

uint64_t DateComponents.year.setter()
{
  return MEMORY[0x270EEE7F0]();
}

uint64_t DateComponents.month.setter()
{
  return MEMORY[0x270EEE810]();
}

uint64_t DateComponents.value(for:)()
{
  return MEMORY[0x270EEE818]();
}

uint64_t DateComponents.minute.setter()
{
  return MEMORY[0x270EEE838]();
}

uint64_t DateComponents.second.setter()
{
  return MEMORY[0x270EEE850]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x270EEE890]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  return MEMORY[0x270EEE9D0]();
}

uint64_t type metadata accessor for AttributeScopes.FoundationAttributes.MeasurementAttribute()
{
  return MEMORY[0x270EEE9D8]();
}

uint64_t type metadata accessor for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field()
{
  return MEMORY[0x270EEE9F0]();
}

uint64_t type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  return MEMORY[0x270EEEA00]();
}

uint64_t AttributeScopes.FoundationAttributes.morphology.getter()
{
  return MEMORY[0x270EEEA08]();
}

uint64_t AttributeScopes.FoundationAttributes.measurement.getter()
{
  return MEMORY[0x270EEEA10]();
}

uint64_t AttributeScopes.FoundationAttributes.durationField.getter()
{
  return MEMORY[0x270EEEA18]();
}

uint64_t AttributeScopes.FoundationAttributes.languageIdentifier.getter()
{
  return MEMORY[0x270EEEA20]();
}

uint64_t AttributeScopes.FoundationAttributes.inlinePresentationIntent.getter()
{
  return MEMORY[0x270EEEA30]();
}

uint64_t AttributeScopes.FoundationAttributes.link.getter()
{
  return MEMORY[0x270EEEA38]();
}

uint64_t AttributeScopes.FoundationAttributes.dateField.getter()
{
  return MEMORY[0x270EEEA40]();
}

uint64_t type metadata accessor for AttributeScopes.FoundationAttributes()
{
  return MEMORY[0x270EEEA48]();
}

uint64_t AttributeScopes.foundation.getter()
{
  return MEMORY[0x270EEEA50]();
}

uint64_t type metadata accessor for AttributeScopes.AccessibilityAttributes()
{
  return MEMORY[0x270EE05C0]();
}

uint64_t AttributeScopes.accessibility.getter()
{
  return MEMORY[0x270EE05C8]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t AttributedString.characters.modify()
{
  return MEMORY[0x270EEEA88]();
}

uint64_t AttributedString.characters.getter()
{
  return MEMORY[0x270EEEA90]();
}

uint64_t AttributedString.startIndex.getter()
{
  return MEMORY[0x270EEEAA8]();
}

uint64_t AttributedString.CharacterView._count.getter()
{
  return MEMORY[0x270EEEAC0]();
}

uint64_t type metadata accessor for AttributedString.CharacterView()
{
  return MEMORY[0x270EEEAE8]();
}

uint64_t AttributedString.CharacterView.subscript.getter()
{
  return MEMORY[0x270EEEAF0]();
}

uint64_t AttributedString.CharacterView.subscript.setter()
{
  return MEMORY[0x270EEEAF8]();
}

uint64_t AttributedString.subscript.getter()
{
  return MEMORY[0x270EEEB10]();
}

{
  return MEMORY[0x270EEEB30]();
}

{
  return MEMORY[0x270EEEE28]();
}

uint64_t AttributedString.subscript.setter()
{
  return MEMORY[0x270EEEB18]();
}

uint64_t AttributedString.removeSubrange<A>(_:)()
{
  return MEMORY[0x270EEEB50]();
}

uint64_t AttributedString.mergeAttributes(_:mergePolicy:)()
{
  return MEMORY[0x270EEEB70]();
}

uint64_t type metadata accessor for AttributedString.AttributeMergePolicy()
{
  return MEMORY[0x270EEEBF8]();
}

uint64_t type metadata accessor for AttributedString.InterpolationOptions()
{
  return MEMORY[0x270EEEC00]();
}

uint64_t type metadata accessor for AttributedString.AttributeRunBoundaries()
{
  return MEMORY[0x270EEEC08]();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.FailurePolicy()
{
  return MEMORY[0x270EEEC10]();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions.InterpretedSyntax()
{
  return MEMORY[0x270EEEC18]();
}

uint64_t AttributedString.MarkdownParsingOptions.init(allowsExtendedAttributes:interpretedSyntax:failurePolicy:languageCode:)()
{
  return MEMORY[0x270EEEC20]();
}

uint64_t type metadata accessor for AttributedString.MarkdownParsingOptions()
{
  return MEMORY[0x270EEEC28]();
}

uint64_t static AttributedString.== infix(_:_:)()
{
  return MEMORY[0x270EEEC38]();
}

uint64_t AttributedString.Runs.Run.subscript.getter()
{
  return MEMORY[0x270EEEC80]();
}

{
  return MEMORY[0x270EEECB0]();
}

uint64_t AttributedString.Runs.Run.range.getter()
{
  return MEMORY[0x270EEEC90]();
}

uint64_t type metadata accessor for AttributedString.Runs.Run()
{
  return MEMORY[0x270EEECA8]();
}

uint64_t type metadata accessor for AttributedString.Runs.Index()
{
  return MEMORY[0x270EEECC0]();
}

uint64_t type metadata accessor for AttributedString.Runs()
{
  return MEMORY[0x270EEECD0]();
}

uint64_t AttributedString.Runs.subscript.getter()
{
  return MEMORY[0x270EEECF0]();
}

uint64_t AttributedString.runs.getter()
{
  return MEMORY[0x270EEECF8]();
}

uint64_t type metadata accessor for AttributedString.Index()
{
  return MEMORY[0x270EEED18]();
}

uint64_t type metadata accessor for AttributedString.AdaptiveImageGlyph()
{
  return MEMORY[0x270EE99E8]();
}

uint64_t AttributedString.endIndex.getter()
{
  return MEMORY[0x270EEED60]();
}

uint64_t AttributedString.init(markdown:options:baseURL:)()
{
  return MEMORY[0x270EEED68]();
}

uint64_t AttributedString.init<A>(localized:including:)()
{
  return MEMORY[0x270EEEDB0]();
}

uint64_t AttributedString.init(localized:)()
{
  return MEMORY[0x270EEEDC0]();
}

uint64_t type metadata accessor for AttributedString()
{
  return MEMORY[0x270EEEDD8]();
}

uint64_t AttributedString.init(_:attributes:)()
{
  return MEMORY[0x270EEEDF0]();
}

uint64_t AttributedString.subscript.modify()
{
  return MEMORY[0x270EEEE18]();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = MEMORY[0x270EEEEC0](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t URLResourceValues.contentType.getter()
{
  return MEMORY[0x270FA1638]();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return MEMORY[0x270EEEFF8]();
}

uint64_t AttributeContainer.subscript.getter()
{
  return MEMORY[0x270EEF010]();
}

{
  return MEMORY[0x270EEF038]();
}

uint64_t AttributeContainer.subscript.setter()
{
  return MEMORY[0x270EEF020]();
}

uint64_t static AttributeContainer.== infix(_:_:)()
{
  return MEMORY[0x270EEF048]();
}

uint64_t AttributeContainer.Builder.callAsFunction(_:)()
{
  return MEMORY[0x270EEF050]();
}

uint64_t AttributeContainer.init()()
{
  return MEMORY[0x270EEF060]();
}

uint64_t type metadata accessor for AttributeContainer()
{
  return MEMORY[0x270EEF070]();
}

uint64_t AttributeContainer.init(_:)()
{
  return MEMORY[0x270EEF080]();
}

uint64_t AttributedSubstring.characters.getter()
{
  return MEMORY[0x270EEF160]();
}

uint64_t AttributedSubstring.subscript.getter()
{
  return MEMORY[0x270EEF178]();
}

uint64_t AttributedSubstring.subscript.setter()
{
  return MEMORY[0x270EEF180]();
}

uint64_t AttributedSubstring.mergeAttributes(_:mergePolicy:)()
{
  return MEMORY[0x270EEF198]();
}

uint64_t type metadata accessor for AttributedSubstring()
{
  return MEMORY[0x270EEF1B8]();
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(after:)()
{
  return MEMORY[0x270EEF1D0]();
}

uint64_t dispatch thunk of DiscreteFormatStyle.discreteInput(before:)()
{
  return MEMORY[0x270EEF1D8]();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(after:)()
{
  return MEMORY[0x270EEF1E0]();
}

uint64_t dispatch thunk of DiscreteFormatStyle.input(before:)()
{
  return MEMORY[0x270EEF1E8]();
}

uint64_t DiscreteFormatStyle<>.input(after:)()
{
  return MEMORY[0x270EEF200]();
}

uint64_t DiscreteFormatStyle<>.input(before:)()
{
  return MEMORY[0x270EEF208]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x270EEF238]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.setter()
{
  return MEMORY[0x270EEF248]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x270EEF250]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x270EEF268]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x270EEF278]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x270EEF288]();
}

uint64_t dispatch thunk of PropertyListEncoder.userInfo.setter()
{
  return MEMORY[0x270EEF298]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x270EEF2A8]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x270EEF2B8]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t type metadata accessor for LocalizedStringResource.BundleDescription()
{
  return MEMORY[0x270EEF870]();
}

uint64_t static LocalizedStringResource.== infix(_:_:)()
{
  return MEMORY[0x270EEF890]();
}

uint64_t LocalizedStringResource.key.getter()
{
  return MEMORY[0x270EEF898]();
}

uint64_t LocalizedStringResource.table.getter()
{
  return MEMORY[0x270EEF8A0]();
}

uint64_t LocalizedStringResource.bundle.getter()
{
  return MEMORY[0x270EEF8A8]();
}

uint64_t LocalizedStringResource.locale.setter()
{
  return MEMORY[0x270EEF8B0]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x270EEF8C0]();
}

uint64_t LocalizedStringResource.init(_:defaultValue:table:locale:bundle:comment:)()
{
  return MEMORY[0x270EEF8C8]();
}

uint64_t LocalizedStringResource.init(_:table:locale:bundle:comment:)()
{
  return MEMORY[0x270EEF8D8]();
}

uint64_t AttributedStringProtocol.description.getter()
{
  return MEMORY[0x270EEF8F8]();
}

uint64_t FloatingPointFormatStyle.Percent.attributed.getter()
{
  return MEMORY[0x270EEF968]();
}

uint64_t FloatingPointFormatStyle.Percent.init(locale:)()
{
  return MEMORY[0x270EEF978]();
}

uint64_t FloatingPointFormatStyle.Percent.rounded(rule:increment:)()
{
  return MEMORY[0x270EEF988]();
}

uint64_t ScopedAttributeContainer.subscript.getter()
{
  return MEMORY[0x270EEF9F0]();
}

uint64_t type metadata accessor for ScopedAttributeContainer()
{
  return MEMORY[0x270EEFA00]();
}

uint64_t static DecodableAttributedStringKey<>.decode(from:)()
{
  return MEMORY[0x270EEFA90]();
}

uint64_t static EncodableAttributedStringKey<>.encode(_:to:)()
{
  return MEMORY[0x270EEFA98]();
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.== infix(_:_:)()
{
  return MEMORY[0x270EEFAC0]();
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter()
{
  return MEMORY[0x270EEFAC8]();
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)()
{
  return MEMORY[0x270EEFAD0]();
}

uint64_t static NumberFormatStyleConfiguration.SignDisplayStrategy.automatic.getter()
{
  return MEMORY[0x270EEFAD8]();
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy()
{
  return MEMORY[0x270EEFAE0]();
}

uint64_t static NumberFormatStyleConfiguration.Grouping.never.getter()
{
  return MEMORY[0x270EEFAE8]();
}

uint64_t type metadata accessor for NumberFormatStyleConfiguration.Grouping()
{
  return MEMORY[0x270EEFAF0]();
}

uint64_t static FormatStyleCapitalizationContext.standalone.getter()
{
  return MEMORY[0x270EEFB58]();
}

uint64_t static FormatStyleCapitalizationContext.middleOfSentence.getter()
{
  return MEMORY[0x270EEFB60]();
}

uint64_t static FormatStyleCapitalizationContext.beginningOfSentence.getter()
{
  return MEMORY[0x270EEFB68]();
}

uint64_t static FormatStyleCapitalizationContext.== infix(_:_:)()
{
  return MEMORY[0x270EEFB70]();
}

uint64_t static FormatStyleCapitalizationContext.unknown.getter()
{
  return MEMORY[0x270EEFB78]();
}

uint64_t static FormatStyleCapitalizationContext.listItem.getter()
{
  return MEMORY[0x270EEFB80]();
}

uint64_t type metadata accessor for FormatStyleCapitalizationContext()
{
  return MEMORY[0x270EEFB88]();
}

uint64_t URL.baseURL.getter()
{
  return MEMORY[0x270EEFBB8]();
}

uint64_t URL.isFileURL.getter()
{
  return MEMORY[0x270EEFBC0]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x270EEFC58]();
}

uint64_t URL.relativeString.getter()
{
  return MEMORY[0x270EEFC78]();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return MEMORY[0x270EEFC88]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x270EEFDF0]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t URL.hash(into:)()
{
  return MEMORY[0x270EEFE40]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t URL.init(string:relativeTo:)()
{
  return MEMORY[0x270EEFEF0]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x270EEFF00]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x270EEFFC8]();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return MEMORY[0x270EEFFE0]();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return MEMORY[0x270EEFFE8]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x270EF0020]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x270EF0070]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x270EF0090]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x270EF00D0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x270EF01C0]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x270EF01E0]();
}

uint64_t Data.append<A>(_:)()
{
  return MEMORY[0x270EF01F0]();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t Date.FormatStyle.attributedStyle.getter()
{
  return MEMORY[0x270EF02E0]();
}

uint64_t type metadata accessor for Date.FormatStyle.TimeStyle()
{
  return MEMORY[0x270EF0320]();
}

uint64_t type metadata accessor for Date.FormatStyle.DateStyle()
{
  return MEMORY[0x270EF0360]();
}

uint64_t Date.FormatStyle.Attributed.subscript.getter()
{
  return MEMORY[0x270EF0370]();
}

uint64_t Date.FormatStyle.Attributed.subscript.setter()
{
  return MEMORY[0x270EF0378]();
}

uint64_t Date.FormatStyle.Attributed.secondFraction(_:)()
{
  return MEMORY[0x270EF0380]();
}

uint64_t static Date.FormatStyle.Attributed.== infix(_:_:)()
{
  return MEMORY[0x270EF0388]();
}

uint64_t Date.FormatStyle.Attributed.day(_:)()
{
  return MEMORY[0x270EF0390]();
}

uint64_t Date.FormatStyle.Attributed.era(_:)()
{
  return MEMORY[0x270EF0398]();
}

uint64_t Date.FormatStyle.Attributed.hour(_:)()
{
  return MEMORY[0x270EF03A0]();
}

uint64_t Date.FormatStyle.Attributed.week(_:)()
{
  return MEMORY[0x270EF03A8]();
}

uint64_t Date.FormatStyle.Attributed.year(_:)()
{
  return MEMORY[0x270EF03B0]();
}

uint64_t Date.FormatStyle.Attributed.month(_:)()
{
  return MEMORY[0x270EF03B8]();
}

uint64_t Date.FormatStyle.Attributed.format(_:)()
{
  return MEMORY[0x270EF03C0]();
}

uint64_t Date.FormatStyle.Attributed.minute(_:)()
{
  return MEMORY[0x270EF03C8]();
}

uint64_t Date.FormatStyle.Attributed.second(_:)()
{
  return MEMORY[0x270EF03D0]();
}

uint64_t Date.FormatStyle.Attributed.quarter(_:)()
{
  return MEMORY[0x270EF03D8]();
}

uint64_t Date.FormatStyle.Attributed.weekday(_:)()
{
  return MEMORY[0x270EF03E0]();
}

uint64_t Date.FormatStyle.Attributed.timeZone(_:)()
{
  return MEMORY[0x270EF03E8]();
}

uint64_t Date.FormatStyle.Attributed.dayOfYear(_:)()
{
  return MEMORY[0x270EF03F0]();
}

uint64_t type metadata accessor for Date.FormatStyle.Attributed()
{
  return MEMORY[0x270EF03F8]();
}

uint64_t Date.FormatStyle.capitalizationContext.getter()
{
  return MEMORY[0x270EF0410]();
}

uint64_t Date.FormatStyle.capitalizationContext.setter()
{
  return MEMORY[0x270EF0418]();
}

uint64_t Date.FormatStyle.day(_:)()
{
  return MEMORY[0x270EF0420]();
}

uint64_t Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)()
{
  return MEMORY[0x270EF0428]();
}

uint64_t Date.FormatStyle.hour(_:)()
{
  return MEMORY[0x270EF0430]();
}

uint64_t Date.FormatStyle.week(_:)()
{
  return MEMORY[0x270EF0438]();
}

uint64_t Date.FormatStyle.year(_:)()
{
  return MEMORY[0x270EF0440]();
}

uint64_t Date.FormatStyle.month(_:)()
{
  return MEMORY[0x270EF0448]();
}

uint64_t static Date.FormatStyle.Symbol.SecondFraction.omitted.getter()
{
  return MEMORY[0x270EF0488]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.SecondFraction()
{
  return MEMORY[0x270EF0490]();
}

uint64_t static Date.FormatStyle.Symbol.Day.defaultDigits.getter()
{
  return MEMORY[0x270EF0498]();
}

uint64_t static Date.FormatStyle.Symbol.Day.omitted.getter()
{
  return MEMORY[0x270EF04A0]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Day()
{
  return MEMORY[0x270EF04B0]();
}

uint64_t static Date.FormatStyle.Symbol.Era.abbreviated.getter()
{
  return MEMORY[0x270EF04B8]();
}

uint64_t static Date.FormatStyle.Symbol.Era.omitted.getter()
{
  return MEMORY[0x270EF04C0]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Era()
{
  return MEMORY[0x270EF04C8]();
}

uint64_t static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)()
{
  return MEMORY[0x270EF04D0]();
}

uint64_t static Date.FormatStyle.Symbol.Hour.omitted.getter()
{
  return MEMORY[0x270EF04E0]();
}

uint64_t static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter()
{
  return MEMORY[0x270EF04E8]();
}

uint64_t static Date.FormatStyle.Symbol.Hour.AMPMStyle.wide.getter()
{
  return MEMORY[0x270EF04F0]();
}

uint64_t static Date.FormatStyle.Symbol.Hour.AMPMStyle.omitted.getter()
{
  return MEMORY[0x270EF0500]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle()
{
  return MEMORY[0x270EF0508]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Hour()
{
  return MEMORY[0x270EF0518]();
}

uint64_t static Date.FormatStyle.Symbol.Week.weekOfMonth.getter()
{
  return MEMORY[0x270EF0520]();
}

uint64_t static Date.FormatStyle.Symbol.Week.defaultDigits.getter()
{
  return MEMORY[0x270EF0528]();
}

uint64_t static Date.FormatStyle.Symbol.Week.omitted.getter()
{
  return MEMORY[0x270EF0530]();
}

uint64_t static Date.FormatStyle.Symbol.Week.twoDigits.getter()
{
  return MEMORY[0x270EF0538]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Week()
{
  return MEMORY[0x270EF0540]();
}

uint64_t static Date.FormatStyle.Symbol.Year.defaultDigits.getter()
{
  return MEMORY[0x270EF0548]();
}

uint64_t static Date.FormatStyle.Symbol.Year.omitted.getter()
{
  return MEMORY[0x270EF0558]();
}

uint64_t static Date.FormatStyle.Symbol.Year.twoDigits.getter()
{
  return MEMORY[0x270EF0560]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Year()
{
  return MEMORY[0x270EF0568]();
}

uint64_t static Date.FormatStyle.Symbol.Month.abbreviated.getter()
{
  return MEMORY[0x270EF0570]();
}

uint64_t static Date.FormatStyle.Symbol.Month.defaultDigits.getter()
{
  return MEMORY[0x270EF0578]();
}

uint64_t static Date.FormatStyle.Symbol.Month.wide.getter()
{
  return MEMORY[0x270EF0580]();
}

uint64_t static Date.FormatStyle.Symbol.Month.omitted.getter()
{
  return MEMORY[0x270EF0590]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Month()
{
  return MEMORY[0x270EF0598]();
}

uint64_t static Date.FormatStyle.Symbol.Minute.defaultDigits.getter()
{
  return MEMORY[0x270EF05A0]();
}

uint64_t static Date.FormatStyle.Symbol.Minute.omitted.getter()
{
  return MEMORY[0x270EF05A8]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Minute()
{
  return MEMORY[0x270EF05B8]();
}

uint64_t static Date.FormatStyle.Symbol.Second.defaultDigits.getter()
{
  return MEMORY[0x270EF05C0]();
}

uint64_t static Date.FormatStyle.Symbol.Second.omitted.getter()
{
  return MEMORY[0x270EF05C8]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Second()
{
  return MEMORY[0x270EF05D8]();
}

uint64_t static Date.FormatStyle.Symbol.Quarter.omitted.getter()
{
  return MEMORY[0x270EF05E0]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Quarter()
{
  return MEMORY[0x270EF05E8]();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.abbreviated.getter()
{
  return MEMORY[0x270EF05F0]();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.wide.getter()
{
  return MEMORY[0x270EF0600]();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.short.getter()
{
  return MEMORY[0x270EF0608]();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.narrow.getter()
{
  return MEMORY[0x270EF0610]();
}

uint64_t static Date.FormatStyle.Symbol.Weekday.omitted.getter()
{
  return MEMORY[0x270EF0618]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.Weekday()
{
  return MEMORY[0x270EF0628]();
}

uint64_t static Date.FormatStyle.Symbol.TimeZone.omitted.getter()
{
  return MEMORY[0x270EF0648]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.TimeZone()
{
  return MEMORY[0x270EF0650]();
}

uint64_t static Date.FormatStyle.Symbol.DayOfYear.omitted.getter()
{
  return MEMORY[0x270EF0660]();
}

uint64_t type metadata accessor for Date.FormatStyle.Symbol.DayOfYear()
{
  return MEMORY[0x270EF0668]();
}

uint64_t Date.FormatStyle.locale.getter()
{
  return MEMORY[0x270EF0678]();
}

uint64_t Date.FormatStyle.minute(_:)()
{
  return MEMORY[0x270EF0690]();
}

uint64_t Date.FormatStyle.second(_:)()
{
  return MEMORY[0x270EF0698]();
}

uint64_t Date.FormatStyle.weekday(_:)()
{
  return MEMORY[0x270EF06A8]();
}

uint64_t Date.FormatStyle.calendar.getter()
{
  return MEMORY[0x270EF06B0]();
}

uint64_t Date.FormatStyle.timeZone.getter()
{
  return MEMORY[0x270EF06B8]();
}

uint64_t type metadata accessor for Date.FormatStyle()
{
  return MEMORY[0x270EF06E0]();
}

uint64_t Date.description.getter()
{
  return MEMORY[0x270EF06F8]();
}

uint64_t static Date.distantPast.getter()
{
  return MEMORY[0x270EF0700]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x270EF07A0]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return MEMORY[0x270EF07F8]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return MEMORY[0x270EF0808]();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)()
{
  return MEMORY[0x270EF0828]();
}

uint64_t Date.ISO8601FormatStyle.timeSeparator(_:)()
{
  return MEMORY[0x270EF0830]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return MEMORY[0x270EF0840]();
}

uint64_t Date.ISO8601FormatStyle.timeZoneSeparator(_:)()
{
  return MEMORY[0x270EF0848]();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return MEMORY[0x270EF0890]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x270EF0898]();
}

uint64_t static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter()
{
  return MEMORY[0x270EF08E8]();
}

uint64_t static Date.RelativeFormatStyle.UnitsStyle.wide.getter()
{
  return MEMORY[0x270EF08F0]();
}

uint64_t static Date.RelativeFormatStyle.UnitsStyle.narrow.getter()
{
  return MEMORY[0x270EF08F8]();
}

uint64_t static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter()
{
  return MEMORY[0x270EF0900]();
}

uint64_t type metadata accessor for Date.RelativeFormatStyle.UnitsStyle()
{
  return MEMORY[0x270EF0908]();
}

uint64_t static Date.RelativeFormatStyle.Presentation.named.getter()
{
  return MEMORY[0x270EF0910]();
}

uint64_t type metadata accessor for Date.RelativeFormatStyle.Presentation()
{
  return MEMORY[0x270EF0920]();
}

uint64_t Date.VerbatimFormatStyle.attributedStyle.getter()
{
  return MEMORY[0x270EF0940]();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.getter()
{
  return MEMORY[0x270EF0948]();
}

uint64_t type metadata accessor for Date.VerbatimFormatStyle.Attributed()
{
  return MEMORY[0x270EF0950]();
}

uint64_t Date.VerbatimFormatStyle.locale.getter()
{
  return MEMORY[0x270EF0968]();
}

uint64_t Date.VerbatimFormatStyle.locale.setter()
{
  return MEMORY[0x270EF0970]();
}

uint64_t Date.VerbatimFormatStyle.calendar.getter()
{
  return MEMORY[0x270EF0978]();
}

uint64_t Date.VerbatimFormatStyle.timeZone.getter()
{
  return MEMORY[0x270EF0980]();
}

uint64_t type metadata accessor for Date.VerbatimFormatStyle()
{
  return MEMORY[0x270EF0988]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x270EF09A8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t static Date.+ infix(_:_:)()
{
  return MEMORY[0x270EF09C0]();
}

uint64_t static Date.- infix(_:_:)()
{
  return MEMORY[0x270EF09C8]();
}

uint64_t static Date.ComponentsFormatStyle.Style.abbreviated.getter()
{
  return MEMORY[0x270EF09F0]();
}

uint64_t static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter()
{
  return MEMORY[0x270EF09F8]();
}

uint64_t static Date.ComponentsFormatStyle.Style.wide.getter()
{
  return MEMORY[0x270EF0A00]();
}

uint64_t static Date.ComponentsFormatStyle.Style.narrow.getter()
{
  return MEMORY[0x270EF0A08]();
}

uint64_t static Date.ComponentsFormatStyle.Style.spellOut.getter()
{
  return MEMORY[0x270EF0A10]();
}

uint64_t type metadata accessor for Date.ComponentsFormatStyle.Style()
{
  return MEMORY[0x270EF0A18]();
}

uint64_t Date.ComponentsFormatStyle.isPositive.getter()
{
  return MEMORY[0x270EF0A20]();
}

uint64_t Date.ComponentsFormatStyle.isPositive.setter()
{
  return MEMORY[0x270EF0A28]();
}

uint64_t Date.ComponentsFormatStyle.discreteInput(after:)()
{
  return MEMORY[0x270EF0A30]();
}

uint64_t Date.ComponentsFormatStyle.discreteInput(before:)()
{
  return MEMORY[0x270EF0A38]();
}

uint64_t static Date.ComponentsFormatStyle.Field.== infix(_:_:)()
{
  return MEMORY[0x270EF0A40]();
}

uint64_t static Date.ComponentsFormatStyle.Field.day.getter()
{
  return MEMORY[0x270EF0A48]();
}

uint64_t static Date.ComponentsFormatStyle.Field.hour.getter()
{
  return MEMORY[0x270EF0A50]();
}

uint64_t static Date.ComponentsFormatStyle.Field.week.getter()
{
  return MEMORY[0x270EF0A58]();
}

uint64_t static Date.ComponentsFormatStyle.Field.year.getter()
{
  return MEMORY[0x270EF0A60]();
}

uint64_t static Date.ComponentsFormatStyle.Field.month.getter()
{
  return MEMORY[0x270EF0A68]();
}

uint64_t static Date.ComponentsFormatStyle.Field.minute.getter()
{
  return MEMORY[0x270EF0A70]();
}

uint64_t static Date.ComponentsFormatStyle.Field.second.getter()
{
  return MEMORY[0x270EF0A78]();
}

uint64_t type metadata accessor for Date.ComponentsFormatStyle.Field()
{
  return MEMORY[0x270EF0A80]();
}

uint64_t Date.ComponentsFormatStyle.input(after:)()
{
  return MEMORY[0x270EF0A88]();
}

uint64_t Date.ComponentsFormatStyle.input(before:)()
{
  return MEMORY[0x270EF0A90]();
}

uint64_t Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)()
{
  return MEMORY[0x270EF0A98]();
}

uint64_t Date.ComponentsFormatStyle.style.getter()
{
  return MEMORY[0x270EF0AA0]();
}

uint64_t Date.ComponentsFormatStyle.style.setter()
{
  return MEMORY[0x270EF0AA8]();
}

uint64_t Date.ComponentsFormatStyle.fields.getter()
{
  return MEMORY[0x270EF0AB0]();
}

uint64_t Date.ComponentsFormatStyle.format(_:)()
{
  return MEMORY[0x270EF0AB8]();
}

uint64_t Date.ComponentsFormatStyle.locale.getter()
{
  return MEMORY[0x270EF0AC0]();
}

uint64_t Date.ComponentsFormatStyle.locale(_:)()
{
  return MEMORY[0x270EF0AC8]();
}

uint64_t Date.ComponentsFormatStyle.calendar.getter()
{
  return MEMORY[0x270EF0AD0]();
}

uint64_t Date.ComponentsFormatStyle.calendar(_:)()
{
  return MEMORY[0x270EF0AD8]();
}

uint64_t type metadata accessor for Date.ComponentsFormatStyle()
{
  return MEMORY[0x270EF0AE0]();
}

uint64_t Date.AnchoredRelativeFormatStyle.unitsStyle.getter()
{
  return MEMORY[0x270EF0B08]();
}

uint64_t Date.AnchoredRelativeFormatStyle.unitsStyle.setter()
{
  return MEMORY[0x270EF0B10]();
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.modify()
{
  return MEMORY[0x270EF0B18]();
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.getter()
{
  return MEMORY[0x270EF0B20]();
}

uint64_t Date.AnchoredRelativeFormatStyle.discreteInput(after:)()
{
  return MEMORY[0x270EF0B28]();
}

uint64_t Date.AnchoredRelativeFormatStyle.discreteInput(before:)()
{
  return MEMORY[0x270EF0B30]();
}

uint64_t Date.AnchoredRelativeFormatStyle.input(after:)()
{
  return MEMORY[0x270EF0B40]();
}

uint64_t Date.AnchoredRelativeFormatStyle.input(before:)()
{
  return MEMORY[0x270EF0B48]();
}

uint64_t Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)()
{
  return MEMORY[0x270EF0B58]();
}

uint64_t Date.AnchoredRelativeFormatStyle.anchor.getter()
{
  return MEMORY[0x270EF0B60]();
}

uint64_t Date.AnchoredRelativeFormatStyle.format(_:)()
{
  return MEMORY[0x270EF0B68]();
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.getter()
{
  return MEMORY[0x270EF0B70]();
}

uint64_t Date.AnchoredRelativeFormatStyle.calendar.getter()
{
  return MEMORY[0x270EF0B78]();
}

uint64_t type metadata accessor for Date.AnchoredRelativeFormatStyle()
{
  return MEMORY[0x270EF0B80]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t static Date.+= infix(_:_:)()
{
  return MEMORY[0x270EF0B98]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t UUID.hash(into:)()
{
  return MEMORY[0x270EF0CC8]();
}

uint64_t UUID.init(uuid:)()
{
  return MEMORY[0x270EF0CE0]();
}

uint64_t UUID.uuid.getter()
{
  return MEMORY[0x270EF0CF0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x270EF0D78]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x270EF0D80]();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return MEMORY[0x270EF0DB8]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x270EF0DD8]();
}

uint64_t static Locale.NumberingSystem.== infix(_:_:)()
{
  return MEMORY[0x270EF0E18]();
}

uint64_t type metadata accessor for Locale.NumberingSystem()
{
  return MEMORY[0x270EF0E20]();
}

uint64_t Locale.NumberingSystem.init(_:)()
{
  return MEMORY[0x270EF0E28]();
}

uint64_t Locale.numberingSystem.getter()
{
  return MEMORY[0x270EF0E48]();
}

uint64_t Locale.decimalSeparator.getter()
{
  return MEMORY[0x270EF0E50]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x270EF0EE0]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF0EF8]();
}

uint64_t static Locale.== infix(_:_:)()
{
  return MEMORY[0x270EF0F30]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x270EF0FA0]();
}

uint64_t Locale.Language.init(identifier:)()
{
  return MEMORY[0x270EF0FF8]();
}

uint64_t Locale.Language.isEquivalent(to:)()
{
  return MEMORY[0x270EF1000]();
}

uint64_t Locale.Language.languageCode.getter()
{
  return MEMORY[0x270EF1008]();
}

uint64_t Locale.Language.maximalIdentifier.getter()
{
  return MEMORY[0x270EF1020]();
}

uint64_t Locale.Language.characterDirection.getter()
{
  return MEMORY[0x270EF1030]();
}

uint64_t static Locale.Language.== infix(_:_:)()
{
  return MEMORY[0x270EF1040]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x270EF1060]();
}

uint64_t Locale.language.getter()
{
  return MEMORY[0x270EF1080]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return MEMORY[0x270EF10C8]();
}

uint64_t Calendar.init(identifier:)()
{
  return MEMORY[0x270EF10D8]();
}

uint64_t Calendar.dateInterval(of:for:)()
{
  return MEMORY[0x270EF1110]();
}

uint64_t Calendar.isDateInToday(_:)()
{
  return MEMORY[0x270EF1150]();
}

uint64_t type metadata accessor for Calendar.MatchingPolicy()
{
  return MEMORY[0x270EF1160]();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return MEMORY[0x270EF1248]();
}

uint64_t Calendar.dateComponents(_:from:)()
{
  return MEMORY[0x270EF1258]();
}

uint64_t type metadata accessor for Calendar.SearchDirection()
{
  return MEMORY[0x270EF1280]();
}

uint64_t type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return MEMORY[0x270EF12C0]();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)MEMORY[0x270EF12C8]();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF12E0]();
}

uint64_t static Calendar.== infix(_:_:)()
{
  return MEMORY[0x270EF1330]();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return MEMORY[0x270EF1388]();
}

uint64_t Calendar.date(_:matchesComponents:)()
{
  return MEMORY[0x270EF1398]();
}

uint64_t Calendar.isDate(_:equalTo:toGranularity:)()
{
  return MEMORY[0x270EF13B8]();
}

uint64_t Calendar.locale.setter()
{
  return MEMORY[0x270EF13C8]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x270EF13D8]();
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)()
{
  return MEMORY[0x270EF13F0]();
}

uint64_t static Calendar.Component.== infix(_:_:)()
{
  return MEMORY[0x270EF1418]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x270EF1428]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x270EF1440]();
}

uint64_t type metadata accessor for IndexSet.Index()
{
  return MEMORY[0x270EF1458]();
}

uint64_t IndexSet.init<A>(integersIn:)()
{
  return MEMORY[0x270EF1468]();
}

uint64_t IndexSet.count.getter()
{
  return MEMORY[0x270EF14B8]();
}

Swift::tuple_inserted_Bool_memberAfterInsert_Int __swiftcall IndexSet.insert(_:)(Swift::Int a1)
{
  char v1 = MEMORY[0x270EF14D8](a1);
  result.memberAfterInsert = v2;
  result.inserteCGFloat d = v1;
  return result;
}

uint64_t IndexSet.isEmpty.getter()
{
  return MEMORY[0x270EF1508]();
}

uint64_t IndexSet.RangeView.makeIterator()()
{
  return MEMORY[0x270EF1518]();
}

uint64_t type metadata accessor for IndexSet.RangeView()
{
  return MEMORY[0x270EF1520]();
}

uint64_t IndexSet.rangeView.getter()
{
  return MEMORY[0x270EF1528]();
}

uint64_t IndexSet.init()()
{
  return MEMORY[0x270EF1538]();
}

uint64_t type metadata accessor for IndexSet()
{
  return MEMORY[0x270EF1550]();
}

uint64_t TimeZone.init(abbreviation:)()
{
  return MEMORY[0x270EF1590]();
}

NSTimeZone __swiftcall TimeZone._bridgeToObjectiveC()()
{
  return (NSTimeZone)MEMORY[0x270EF15C8]();
}

uint64_t static TimeZone.autoupdatingCurrent.getter()
{
  return MEMORY[0x270EF15D0]();
}

uint64_t static TimeZone.== infix(_:_:)()
{
  return MEMORY[0x270EF15E0]();
}

uint64_t static TimeZone.current.getter()
{
  return MEMORY[0x270EF1600]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x270EF1608]();
}

uint64_t static ObservationTracking._installTracking(_:willSet:didSet:)()
{
  return MEMORY[0x270FA11C8]();
}

uint64_t type metadata accessor for ObservationTracking._AccessList()
{
  return MEMORY[0x270FA11D0]();
}

Swift::Void __swiftcall ObservationTracking.cancel()()
{
}

uint64_t ObservationTracking.changed.getter()
{
  return MEMORY[0x270FA11E0]();
}

uint64_t type metadata accessor for ObservationTracking()
{
  return MEMORY[0x270FA11E8]();
}

uint64_t ObservationTracking.init(_:)()
{
  return MEMORY[0x270FA11F0]();
}

uint64_t ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)()
{
  return MEMORY[0x270FA11F8]();
}

uint64_t ObservationRegistrar.access<A, B>(_:keyPath:)()
{
  return MEMORY[0x270FA1208]();
}

uint64_t ObservationRegistrar.init()()
{
  return MEMORY[0x270FA1238]();
}

uint64_t type metadata accessor for ObservationRegistrar()
{
  return MEMORY[0x270FA1250]();
}

uint64_t type metadata accessor for CGPathFillRule()
{
  return MEMORY[0x270EE57F8]();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF17B0]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x270F28690]();
}

uint64_t static WeakAttribute.== infix(_:_:)()
{
  return MEMORY[0x270F0F0A0]();
}

uint64_t type metadata accessor for WeakAttribute()
{
  return MEMORY[0x270F0F0A8]();
}

uint64_t Attribute.init<A>(body:value:flags:update:)()
{
  return MEMORY[0x270F0F0B0]();
}

uint64_t type metadata accessor for Attribute()
{
  return MEMORY[0x270F0F0B8]();
}

uint64_t dispatch thunk of StatefulRule.updateValue()()
{
  return MEMORY[0x270F0F0C0]();
}

uint64_t type metadata accessor for PointerOffset()
{
  return MEMORY[0x270F0F0C8]();
}

uint64_t dispatch thunk of Rule.value.getter()
{
  return MEMORY[0x270F0F0D0]();
}

uint64_t static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)()
{
  return MEMORY[0x270F0F0D8]();
}

uint64_t type metadata accessor for Focus()
{
  return MEMORY[0x270F0F0E0]();
}

uint64_t type metadata accessor for External()
{
  return MEMORY[0x270F0F0F0]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x270FA06B8]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x270FA06C8]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x270FA06D8]();
}

uint64_t ColorResource.reference.getter()
{
  return MEMORY[0x270EEB1B8]();
}

uint64_t type metadata accessor for ColorResource()
{
  return MEMORY[0x270EEB1C0]();
}

uint64_t ImageResource.reference.getter()
{
  return MEMORY[0x270EEB1D8]();
}

uint64_t type metadata accessor for ImageResource()
{
  return MEMORY[0x270EEB1E0]();
}

uint64_t NamedResource.name.getter()
{
  return MEMORY[0x270EEB1F0]();
}

uint64_t NamedResource.bundle.getter()
{
  return MEMORY[0x270EEB1F8]();
}

uint64_t type metadata accessor for NamedResource()
{
  return MEMORY[0x270EEB200]();
}

uint64_t type metadata accessor for ResourceReference()
{
  return MEMORY[0x270EEB278]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x270FA16A8]();
}

uint64_t static UTType.png.getter()
{
  return MEMORY[0x270FA17C0]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x270FA1938]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x270FA2C78]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return MEMORY[0x270FA2C90]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x270FA2C98]();
}

uint64_t OSSignpostID.init(log:object:)()
{
  return MEMORY[0x270FA2CB8]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x270FA2CC0]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x270FA2CE8]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x270FA2CF8]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x270FA2D00]();
}

uint64_t OSSignpostID.init(_:)()
{
  return MEMORY[0x270FA2D10]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x270FA2D30]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x270FA2D58]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x270FA2D88]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x270FA2D90]();
}

uint64_t static OSLogIntegerFormatting.decimal.getter()
{
  return MEMORY[0x270FA2DA8]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x270FA2DB0]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x270FA2DD0]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x270FA2DE0]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x270FA2DF0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x270FA2E30]();
}

uint64_t MAP_FAILED.getter()
{
  return MEMORY[0x270FA08A0]();
}

uint64_t open(_:_:_:)()
{
  return MEMORY[0x270FA08B8]();
}

uint64_t errno.getter()
{
  return MEMORY[0x270FA2C30]();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return MEMORY[0x270EE3828]();
}

uint64_t CombineIdentifier.init()()
{
  return MEMORY[0x270EE3830]();
}

uint64_t type metadata accessor for CombineIdentifier()
{
  return MEMORY[0x270EE3838]();
}

uint64_t dispatch thunk of Subscriber.receive(completion:)()
{
  return MEMORY[0x270EE3AE0]();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return MEMORY[0x270EE3AE8]();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return MEMORY[0x270EE3AF0]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x270EE3AF8]();
}

uint64_t static Subscribers.Demand.none.getter()
{
  return MEMORY[0x270EE3B48]();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return MEMORY[0x270EE3B50]();
}

uint64_t dispatch thunk of Subscription.request(_:)()
{
  return MEMORY[0x270EE3B78]();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x270EE3BB0]();
}

uint64_t AnyCancellable.__allocating_init<A>(_:)()
{
  return MEMORY[0x270EE3BB8]();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter()
{
  return MEMORY[0x270EE3C18]();
}

uint64_t PassthroughSubject.init()()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t type metadata accessor for PassthroughSubject()
{
  return MEMORY[0x270EE3C78]();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x270EE3CF0]();
}

uint64_t Subject<>.send()()
{
  return MEMORY[0x270EE3D90]();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return MEMORY[0x270EE3FD0]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x270FA0BC8]();
}

uint64_t name_aliases.getter()
{
  return MEMORY[0x270F5C190]();
}

uint64_t symbol_order.getter()
{
  return MEMORY[0x270F5C198]();
}

uint64_t nofill_to_fill.getter()
{
  return MEMORY[0x270F5C1E8]();
}

uint64_t private_name_aliases.getter()
{
  return MEMORY[0x270F5C238]();
}

uint64_t private_symbol_order.getter()
{
  return MEMORY[0x270F5C240]();
}

uint64_t private_nofill_to_fill.getter()
{
  return MEMORY[0x270F5C248]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x270F9CFB0]();
}

uint64_t Array.init()()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t Set.init()()
{
  return MEMORY[0x270F9CFC8]();
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)()
{
  return MEMORY[0x270EF1808]();
}

uint64_t BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D010]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x270F9D030]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init(_:)()
{
  return MEMORY[0x270F9D040]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D050]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1830]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

uint64_t Dictionary<>.init(_:)()
{
  return MEMORY[0x270EF1850]();
}

uint64_t Dictionary.startIndex.getter()
{
  return MEMORY[0x270F9D058]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x270F9D060]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x270F9D068]();
}

uint64_t Dictionary.updateValue(_:forKey:)()
{
  return MEMORY[0x270F9D070]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x270F9D088]();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return MEMORY[0x270F9D0E8]();
}

uint64_t static Dictionary.Index.== infix(_:_:)()
{
  return MEMORY[0x270F9D0F8]();
}

uint64_t type metadata accessor for Dictionary.Index._Variant()
{
  return MEMORY[0x270F9D108]();
}

uint64_t Dictionary.count.getter()
{
  return MEMORY[0x270F9D120]();
}

uint64_t Dictionary.filter(_:)()
{
  return MEMORY[0x270F9D150]();
}

uint64_t Dictionary.remove(at:)()
{
  return MEMORY[0x270F9D158]();
}

uint64_t Dictionary.isEmpty.getter()
{
  return MEMORY[0x270F9D168]();
}

uint64_t type metadata accessor for Dictionary._Variant()
{
  return MEMORY[0x270F9D198]();
}

uint64_t Dictionary._Variant.subscript.modify()
{
  return MEMORY[0x270F9D1A0]();
}

uint64_t Dictionary.endIndex.getter()
{
  return MEMORY[0x270F9D1A8]();
}

uint64_t Dictionary.formIndex(after:)()
{
  return MEMORY[0x270F9D1B8]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t Dictionary.subscript.modify()
{
  return MEMORY[0x270F9D200]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x270F9D208]();
}

{
  return MEMORY[0x270F9D218]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x270F9D210]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x270F9D220]();
}

uint64_t dispatch thunk of FloatingPoint.isInfinite.getter()
{
  return MEMORY[0x270F9D228]();
}

uint64_t dispatch thunk of FloatingPoint.squareRoot()()
{
  return MEMORY[0x270F9D230]();
}

uint64_t dispatch thunk of FloatingPoint.isSignalingNaN.getter()
{
  return MEMORY[0x270F9D250]();
}

uint64_t dispatch thunk of static FloatingPoint./ infix(_:_:)()
{
  return MEMORY[0x270F9D260]();
}

uint64_t dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter()
{
  return MEMORY[0x270F9D268]();
}

uint64_t dispatch thunk of static FloatingPoint.leastNonzeroMagnitude.getter()
{
  return MEMORY[0x270F9D270]();
}

uint64_t dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter()
{
  return MEMORY[0x270F9D278]();
}

uint64_t dispatch thunk of static FloatingPoint./= infix(_:_:)()
{
  return MEMORY[0x270F9D280]();
}

uint64_t dispatch thunk of FloatingPoint.init(sign:exponent:significand:)()
{
  return MEMORY[0x270F9D298]();
}

uint64_t dispatch thunk of FloatingPoint.sign.getter()
{
  return MEMORY[0x270F9D2A0]();
}

uint64_t dispatch thunk of FloatingPoint.isNaN.getter()
{
  return MEMORY[0x270F9D2A8]();
}

uint64_t dispatch thunk of FloatingPoint.round(_:)()
{
  return MEMORY[0x270F9D2B0]();
}

uint64_t dispatch thunk of FloatingPoint.isZero.getter()
{
  return MEMORY[0x270F9D2B8]();
}

uint64_t dispatch thunk of FloatingPoint.exponent.getter()
{
  return MEMORY[0x270F9D2D0]();
}

uint64_t dispatch thunk of FloatingPoint.isFinite.getter()
{
  return MEMORY[0x270F9D2D8]();
}

uint64_t dispatch thunk of static FloatingPoint.ulpOfOne.getter()
{
  return MEMORY[0x270F9D2E0]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D2F8]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x270F9D318]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x270F9D320]();
}

uint64_t dispatch thunk of Hashable.hashValue.getter()
{
  return MEMORY[0x270F9D328]();
}

uint64_t DefaultIndices.startIndex.getter()
{
  return MEMORY[0x270F9D338]();
}

uint64_t DefaultIndices.endIndex.getter()
{
  return MEMORY[0x270F9D340]();
}

uint64_t DefaultIndices.formIndex(after:)()
{
  return MEMORY[0x270F9D348]();
}

uint64_t type metadata accessor for DefaultIndices()
{
  return MEMORY[0x270F9D350]();
}

uint64_t Character.write<A>(to:)()
{
  return MEMORY[0x270F9D3C8]();
}

uint64_t Character.isNumber.getter()
{
  return MEMORY[0x270F9D3E0]();
}

uint64_t BidirectionalCollection<>.firstRange<A>(of:)()
{
  return MEMORY[0x270FA2B30]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(before:)()
{
  return MEMORY[0x270F9D3F8]();
}

uint64_t dispatch thunk of BidirectionalCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D400]();
}

uint64_t dispatch thunk of BidirectionalCollection.formIndex(before:)()
{
  return MEMORY[0x270F9D410]();
}

uint64_t BidirectionalCollection.last(where:)()
{
  return MEMORY[0x270F9D420]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x270F9D428]();
}

uint64_t BidirectionalCollection.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D438]();
}

uint64_t BidirectionalCollection.distance(from:to:)()
{
  return MEMORY[0x270F9D448]();
}

uint64_t BidirectionalCollection.reversed()()
{
  return MEMORY[0x270F9D458]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x270F9D478]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x270F9D480]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x270F9D488]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x270F9D490]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x270F9D498]();
}

uint64_t dispatch thunk of MutableCollection.swapAt(_:_:)()
{
  return MEMORY[0x270F9D4B8]();
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D4C8]();
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)()
{
  return MEMORY[0x270F9D4D0]();
}

uint64_t MutableCollection.swapAt(_:_:)()
{
  return MEMORY[0x270F9D4D8]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x270F9D4E8]();
}

uint64_t MutableCollection<>.reverse()()
{
  return MEMORY[0x270F9D4F8]();
}

uint64_t MutableCollection<>.partition(by:)()
{
  return MEMORY[0x270F9D500]();
}

uint64_t MutableCollection<>.sort(by:)()
{
  return MEMORY[0x270F9D510]();
}

uint64_t dispatch thunk of MutableCollection.subscript.setter()
{
  return MEMORY[0x270F9D520]();
}

{
  return MEMORY[0x270F9D530]();
}

uint64_t dispatch thunk of MutableCollection.subscript.modify()
{
  return MEMORY[0x270F9D528]();
}

uint64_t static ClosedRange.== infix(_:_:)()
{
  return MEMORY[0x270F9D538]();
}

uint64_t ClosedRange.contains(_:)()
{
  return MEMORY[0x270F9D540]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x270F9D550]();
}

uint64_t ClosedRange<>.hash(into:)()
{
  return MEMORY[0x270F9D558]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t UnsafeBufferPointer.baseAddress.getter()
{
  return MEMORY[0x270F9D5A0]();
}

uint64_t type metadata accessor for UnsafeBufferPointer()
{
  return MEMORY[0x270F9D5C0]();
}

uint64_t String.LocalizationValue.init(stringLiteral:)()
{
  return MEMORY[0x270EF18D0]();
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)()
{
  return MEMORY[0x270EF18E8]();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x270EF1928]();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return MEMORY[0x270EF1938]();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return MEMORY[0x270EF1950]();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return MEMORY[0x270EF1958]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return MEMORY[0x270EF19B8]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x270EF19F8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x270EF1A10]();
}

uint64_t String.init(format:locale:arguments:)()
{
  return MEMORY[0x270EF1A28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t String.init(cString:encoding:)()
{
  return MEMORY[0x270EF1A58]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x270EF1AD0]();
}

Swift::String __swiftcall String.init(_:)(NSString a1)
{
  uint64_t v1 = MEMORY[0x270EF1B18](a1);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x270F9D5F8]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x270F9D600]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x270F9D620]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.removeSubrange(_:)()
{
  return MEMORY[0x270F9D650]();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t String.UnicodeScalarView._foreignIndex(after:)()
{
  return MEMORY[0x270F9D678]();
}

uint64_t String.UnicodeScalarView._foreignIndex(before:)()
{
  return MEMORY[0x270F9D680]();
}

uint64_t String.UnicodeScalarView.append(_:)()
{
  return MEMORY[0x270F9D698]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x270F9D740]();
}

uint64_t String.index(after:)()
{
  return MEMORY[0x270F9D748]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x270F9D750]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D758]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9D788]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  MEMORY[0x270F9D798](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x270F9D7C0]();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = MEMORY[0x270F9D7D8]();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x270F9D810]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D878](a1._countAndFlagsBits, a1._object);
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = MEMORY[0x270F9D898](repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x270F9D8A8]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8B0]();
}

{
  return MEMORY[0x270F9D8F0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8D8]();
}

{
  return MEMORY[0x270F9D8E0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x270F9D908]();
}

uint64_t dispatch thunk of Sequence._copyToContiguousArray()()
{
  return MEMORY[0x270F9D910]();
}

uint64_t dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D920]();
}

uint64_t Sequence<>.makeIterator()()
{
  return MEMORY[0x270F9D928]();
}

uint64_t Sequence.allSatisfy(_:)()
{
  return MEMORY[0x270F9D930]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x270F9D938]();
}

uint64_t Sequence.enumerated()()
{
  return MEMORY[0x270F9D940]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x270F9D948]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D968]();
}

uint64_t Sequence.lazy.getter()
{
  return MEMORY[0x270F9D980]();
}

uint64_t Sequence.first(where:)()
{
  return MEMORY[0x270F9D988]();
}

uint64_t Sequence.prefix(_:)()
{
  return MEMORY[0x270F9D998]();
}

uint64_t Sequence.reduce<A>(_:_:)()
{
  return MEMORY[0x270F9D9A8]();
}

uint64_t Sequence.sorted(by:)()
{
  return MEMORY[0x270F9D9B0]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x270F9D9D8]();
}

uint64_t dispatch thunk of RangeExpression.contains(_:)()
{
  return MEMORY[0x270F9DA58]();
}

uint64_t dispatch thunk of RangeExpression.relative<A>(to:)()
{
  return MEMORY[0x270F9DA60]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return MEMORY[0x270F9DA78]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x270F9DA98]();
}

{
  return MEMORY[0x270F9DAA0]();
}

{
  return MEMORY[0x270F9DAA8]();
}

{
  return MEMORY[0x270F9DAC8]();
}

{
  return MEMORY[0x270F9DAD8]();
}

{
  return MEMORY[0x270F9DAE0]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x270F9DB18]();
}

{
  return MEMORY[0x270F9DB20]();
}

{
  return MEMORY[0x270F9DB28]();
}

{
  return MEMORY[0x270F9DB48]();
}

{
  return MEMORY[0x270F9DB58]();
}

{
  return MEMORY[0x270F9DB60]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1B98]();
}

uint64_t static Array._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF1BA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t Array.withUnsafeBufferPointer<A>(_:)()
{
  return MEMORY[0x270F9DC18]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9DC80]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t Array.remove(at:)()
{
  return MEMORY[0x270F9DC98]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x270F9DCA8]();
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x270F9DD28]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x270FA1E18]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x270FA1E20]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x270FA1E28]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

Swift::Void __swiftcall SerialExecutor.checkIsolated()()
{
}

uint64_t SerialExecutor.asUnownedSerialExecutor()()
{
  return MEMORY[0x270FA2030]();
}

uint64_t Double.init(truncating:)()
{
  return MEMORY[0x270EF1C00]();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C18]();
}

uint64_t Double.description.getter()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t Double._roundSlowPath(_:)()
{
  return MEMORY[0x270F9DD68]();
}

uint64_t Double.debugDescription.getter()
{
  return MEMORY[0x270F9DD70]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t Double.exponent.getter()
{
  return MEMORY[0x270F9DDB0]();
}

uint64_t Double.hashValue.getter()
{
  return MEMORY[0x270F9DDC0]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x270F9DDF0]();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1C48]();
}

uint64_t Float.significandWidth.getter()
{
  return MEMORY[0x270F9DE18]();
}

uint64_t Float.write<A>(to:)()
{
  return MEMORY[0x270F9DE48]();
}

uint64_t Float.exponent.getter()
{
  return MEMORY[0x270F9DE58]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t Set.count.getter()
{
  return MEMORY[0x270F9DF38]();
}

uint64_t Set.insert(_:)()
{
  return MEMORY[0x270F9DF58]();
}

uint64_t Set.remove(_:)()
{
  return MEMORY[0x270F9DF60]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t Set.contains(_:)()
{
  return MEMORY[0x270F9DF90]();
}

uint64_t type metadata accessor for Set()
{
  return MEMORY[0x270F9DFD0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1CE0]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x270F9E018]();
}

uint64_t dispatch thunk of static Numeric.*= infix(_:_:)()
{
  return MEMORY[0x270F9E020]();
}

uint64_t dispatch thunk of Numeric.init<A>(exactly:)()
{
  return MEMORY[0x270F9E028]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x270F9E040]();
}

uint64_t dispatch thunk of RandomAccessCollection.distance(from:to:)()
{
  return MEMORY[0x270F9E048]();
}

uint64_t RandomAccessCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9E050]();
}

uint64_t RandomAccessCollection<>.indices.getter()
{
  return MEMORY[0x270F9E070]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t Collection<>.contains<A>(_:)()
{
  return MEMORY[0x270FA2BA8]();
}

uint64_t dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)()
{
  return MEMORY[0x270F9E088]();
}

{
  return MEMORY[0x270F9E090]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x270F9E0A8]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9E0B0]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x270F9E0B8]();
}

uint64_t dispatch thunk of Collection.indices.getter()
{
  return MEMORY[0x270F9E0C0]();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E0C8]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x270F9E0D0]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t Collection.firstIndex(where:)()
{
  return MEMORY[0x270F9E0F0]();
}

uint64_t Collection._failEarlyRangeCheck(_:bounds:)()
{
  return MEMORY[0x270F9E110]();
}

{
  return MEMORY[0x270F9E118]();
}

{
  return MEMORY[0x270F9E120]();
}

uint64_t Collection._copyToContiguousArray()()
{
  return MEMORY[0x270F9E128]();
}

uint64_t Collection.count.getter()
{
  return MEMORY[0x270F9E138]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x270F9E140]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E178]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x270F9E190]();
}

uint64_t Collection.formIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9E1A0]();
}

uint64_t Collection<>.indices.getter()
{
  return MEMORY[0x270F9E1B8]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x270F9E1D8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.reserveCapacity(_:)()
{
  return MEMORY[0x270F9E208]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9E210]();
}

uint64_t RangeReplaceableCollection.removeFirst()()
{
  return MEMORY[0x270F9E240]();
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
}

uint64_t RangeReplaceableCollection.removeSubrange<A>(_:)()
{
  return MEMORY[0x270F9E258]();
}

uint64_t RangeReplaceableCollection.filter(_:)()
{
  return MEMORY[0x270F9E298]();
}

uint64_t RangeReplaceableCollection.remove(at:)()
{
  return MEMORY[0x270F9E2B0]();
}

uint64_t RangeReplaceableCollection<>.removeLast()()
{
  return MEMORY[0x270F9E2D8]();
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)()
{
  return MEMORY[0x270F9E2F0]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.init()()
{
  return MEMORY[0x270F9E2F8]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x270F9E330]();
}

Swift::Void __swiftcall AGGraphRef.archiveJSON(name:)(Swift::String_optional name)
{
}

uint64_t CGColorRef.components.getter()
{
  return MEMORY[0x270EE5820]();
}

uint64_t AGAttribute.description.getter()
{
  return MEMORY[0x270F0F100]();
}

uint64_t AGAttribute.breadthFirstSearch(options:_:)()
{
  return MEMORY[0x270F0F108]();
}

uint64_t NSDictionary.init(dictionary:)()
{
  return MEMORY[0x270EF1DD0]();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x270EF1DE8]();
}

uint64_t NSFileHandle.readToEnd()()
{
  return MEMORY[0x270EF1E50]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

CAFrameRateRange __swiftcall CAFrameRateRange.init(minimum:maximum:preferred:)(Swift::Float minimum, Swift::Float maximum, Swift::Float_optional *preferred)
{
  MEMORY[0x270FA1288](preferred, minimum, maximum);
  result.preferreCGFloat d = v5;
  result.maximuCGAffineTransform m = v4;
  result.minimuCGAffineTransform m = v3;
  return result;
}

Swift::Void __swiftcall CGMutablePathRef.addQuadCurve(to:control:transform:)(CGPoint to, CGPoint control, CGAffineTransform *transform)
{
  MEMORY[0x270EE58A8](transform, (__n128)__PAIR128__(v3, *(unint64_t *)&to.x), (__n128)__PAIR128__(v4, *(unint64_t *)&to.y), (__n128)__PAIR128__(v5, *(unint64_t *)&control.x), (__n128)__PAIR128__(v6, *(unint64_t *)&control.y));
}

Swift::Void __swiftcall CGMutablePathRef.move(to:transform:)(CGPoint to, CGAffineTransform *transform)
{
  MEMORY[0x270EE58B8](transform, (__n128)__PAIR128__(v2, *(unint64_t *)&to.x), (__n128)__PAIR128__(v3, *(unint64_t *)&to.y));
}

Swift::Void __swiftcall CGMutablePathRef.addLine(to:transform:)(CGPoint to, CGAffineTransform *transform)
{
  MEMORY[0x270EE58D8](transform, (__n128)__PAIR128__(v2, *(unint64_t *)&to.x), (__n128)__PAIR128__(v3, *(unint64_t *)&to.y));
}

Swift::Void __swiftcall CGMutablePathRef.addCurve(to:control1:control2:transform:)(CGPoint to, CGPoint control1, CGPoint control2, CGAffineTransform *transform)
{
  MEMORY[0x270EE58E8](transform, (__n128)__PAIR128__(v4, *(unint64_t *)&to.x), (__n128)__PAIR128__(v5, *(unint64_t *)&to.y), (__n128)__PAIR128__(v6, *(unint64_t *)&control1.x), (__n128)__PAIR128__(v7, *(unint64_t *)&control1.y), (__n128)__PAIR128__(v8, *(unint64_t *)&control2.x), (__n128)__PAIR128__(v9, *(unint64_t *)&control2.y));
}

uint64_t static CGAffineTransform.== infix(_:_:)()
{
  return MEMORY[0x270EE58F8]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x270EF1F60]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t NSAttributedString.init<A>(_:including:)()
{
  return MEMORY[0x270EF1FC0]();
}

uint64_t NSAttributedString.init(_:)()
{
  return MEMORY[0x270EF1FD0]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x270FA2E90]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x270FA2EA8]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x270FA2EB8]();
}

uint64_t static CTAdaptiveImageGlyph._adaptiveImageGlyph(convertingFrom:)()
{
  return MEMORY[0x270EE99F0]();
}

uint64_t NSArray.init(arrayLiteral:)()
{
  return MEMORY[0x270EF20C0]();
}

uint64_t AGTypeID.description.getter()
{
  return MEMORY[0x270F0F110]();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)MEMORY[0x270EF2170](floatLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x270EF2198](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x270FA1190]();
}

uint64_t _NSRange.description.getter()
{
  return MEMORY[0x270EF21E8]();
}

uint64_t _NSRange.init<A, B>(_:in:)()
{
  return MEMORY[0x270EF2210]();
}

uint64_t CGPathRef.componentsSeparated(using:)()
{
  return MEMORY[0x270EE5930]();
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
}

void __swiftcall NSDecimal._bridgeToObjectiveC()(NSDecimalNumber *__return_ptr retstr)
{
}

uint64_t static NSDecimal.< infix(_:_:)()
{
  return MEMORY[0x270EF2268]();
}

uint64_t static NSDecimal.== infix(_:_:)()
{
  return MEMORY[0x270EF2288]();
}

void __swiftcall NSDecimal.advanced(by:)(NSDecimal *__return_ptr retstr, NSDecimal *by)
{
}

uint64_t NSScanner.currentIndex.getter()
{
  return MEMORY[0x270EF2360]();
}

Swift::String_optional __swiftcall NSScanner.scanCharacter()()
{
  uint64_t v0 = MEMORY[0x270EF2370]();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t NSScanner.scanUpToCharacters(from:)()
{
  return MEMORY[0x270EF2388]();
}

uint64_t type metadata accessor for NSScanner.NumberRepresentation()
{
  return MEMORY[0x270EF2390]();
}

uint64_t NSScanner.scanInt(representation:)()
{
  return MEMORY[0x270EF2398]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x270FA2EC8]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x270FA2ED0]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x270FA2F00]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x270F9E378]();
}

uint64_t UnsafeMutablePointer.move()()
{
  return MEMORY[0x270F9E388]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x270F9E3B0]();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return MEMORY[0x270F9E3B8]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t Optional<A>.hash(into:)()
{
  return MEMORY[0x270F9E3D0]();
}

uint64_t UnsafeMutableBufferPointer.baseAddress.getter()
{
  return MEMORY[0x270F9E400]();
}

uint64_t UnsafeMutableBufferPointer.init(start:count:)()
{
  return MEMORY[0x270F9E418]();
}

uint64_t UnsafeMutableBufferPointer.indices.getter()
{
  return MEMORY[0x270F9E428]();
}

uint64_t Substring.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x270F9E478]();
}

uint64_t Substring.index(after:)()
{
  return MEMORY[0x270F9E4A0]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9E4B0]();
}

uint64_t Substring.distance(from:to:)()
{
  return MEMORY[0x270F9E4E8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x270F9E4F8]();
}

{
  return MEMORY[0x270F9E508]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x270F9E518]();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF23C8]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x270F9E570]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x270EF23D8]();
}

uint64_t StringProtocol.lowercased(with:)()
{
  return MEMORY[0x270EF23F0]();
}

uint64_t StringProtocol.uppercased(with:)()
{
  return MEMORY[0x270EF23F8]();
}

uint64_t StringProtocol.capitalized(with:)()
{
  return MEMORY[0x270EF2400]();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return MEMORY[0x270EF2448]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x270EF2478]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x270EF24A0]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x270EF2560]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x270EF25B0]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x270F9E640]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x270F9E648]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x270F9E650]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x270F9E658]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x270F9E660]();
}

{
  return MEMORY[0x270F9E668]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of AnyKeyPath._storedInlineOffset.getter()
{
  return MEMORY[0x270F9E698]();
}

uint64_t static AnyKeyPath.== infix(_:_:)()
{
  return MEMORY[0x270F9E6A0]();
}

uint64_t type metadata accessor for AnyKeyPath()
{
  return MEMORY[0x270F9E6B0]();
}

uint64_t dispatch thunk of SetAlgebra.subtracting(_:)()
{
  return MEMORY[0x270F9E738]();
}

uint64_t dispatch thunk of SetAlgebra.formIntersection(_:)()
{
  return MEMORY[0x270F9E748]();
}

uint64_t dispatch thunk of SetAlgebra.symmetricDifference(_:)()
{
  return MEMORY[0x270F9E750]();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return MEMORY[0x270F9E760]();
}

uint64_t dispatch thunk of SetAlgebra.remove(_:)()
{
  return MEMORY[0x270F9E768]();
}

uint64_t dispatch thunk of SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x270F9E778]();
}

uint64_t dispatch thunk of SetAlgebra.contains(_:)()
{
  return MEMORY[0x270F9E780]();
}

uint64_t dispatch thunk of SetAlgebra.subtract(_:)()
{
  return MEMORY[0x270F9E790]();
}

uint64_t dispatch thunk of SetAlgebra.formUnion(_:)()
{
  return MEMORY[0x270F9E798]();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return MEMORY[0x270F9E7E0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x270F9E7F8]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x270F9E800]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x270F9E848]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x270F9E858]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t AnyHashable.description.getter()
{
  return MEMORY[0x270F9E8B8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t AnyHashable.base.getter()
{
  return MEMORY[0x270F9E8D0]();
}

uint64_t AnyHashable.hash(into:)()
{
  return MEMORY[0x270F9E8D8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t type metadata accessor for AnySequence()
{
  return MEMORY[0x270F9E910]();
}

uint64_t AnySequence.init<A>(_:)()
{
  return MEMORY[0x270F9E918]();
}

uint64_t static CommandLine.arguments.getter()
{
  return MEMORY[0x270F9E930]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x270F9E958]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9E960]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x270F9E968]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9E970]();
}

uint64_t type metadata accessor for _SetStorage()
{
  return MEMORY[0x270F9E978]();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return MEMORY[0x270F9E988]();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return MEMORY[0x270F9E9A0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t _typeByName(_:)()
{
  return MEMORY[0x270F9E9B8]();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return MEMORY[0x270F9E9D0]();
}

uint64_t type metadata accessor for LazySequence()
{
  return MEMORY[0x270F9E9E0]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x270F9E9E8]();
}

uint64_t type metadata accessor for Zip2Sequence()
{
  return MEMORY[0x270F9EA08]();
}

uint64_t dispatch thunk of _AnyIndexBox._typeID.getter()
{
  return MEMORY[0x270F9EA10]();
}

uint64_t dispatch thunk of _AnyIndexBox._isEqual(to:)()
{
  return MEMORY[0x270F9EA18]();
}

uint64_t specialized _ArrayBuffer._copyContents(initializing:)()
{
  return MEMORY[0x270F9EA28]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t type metadata accessor for _SequenceBox()
{
  return MEMORY[0x270F9EA60]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t type metadata accessor for DecodingError.Context()
{
  return MEMORY[0x270F9EA90]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)()
{
  return MEMORY[0x270F9EAD0]();
}

uint64_t ManagedBuffer.deinit()
{
  return MEMORY[0x270F9EAE8]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x270F9EB00]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return MEMORY[0x270F9EB30]();
}

uint64_t type metadata accessor for PrefixSequence()
{
  return MEMORY[0x270F9EB58]();
}

uint64_t type metadata accessor for UnfoldSequence()
{
  return MEMORY[0x270F9EB60]();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return MEMORY[0x270F9EB80]();
}

uint64_t ContiguousArray._copyToContiguousArray()()
{
  return MEMORY[0x270F9EBB0]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t ContiguousArray.init(arrayLiteral:)()
{
  return MEMORY[0x270F9EBC8]();
}

uint64_t ContiguousArray.replaceSubrange<A>(_:with:)()
{
  return MEMORY[0x270F9EBD0]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

Swift::Void __swiftcall ContiguousArray._makeMutableAndUnique()()
{
}

uint64_t ContiguousArray.withUnsafeBufferPointer<A>(_:)()
{
  return MEMORY[0x270F9EBF8]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t ContiguousArray.count.getter()
{
  return MEMORY[0x270F9EC18]();
}

uint64_t ContiguousArray.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9EC40]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t ContiguousArray.capacity.getter()
{
  return MEMORY[0x270F9EC60]();
}

Swift::Void __swiftcall ContiguousArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t static ContiguousArray<A>.== infix(_:_:)()
{
  return MEMORY[0x270F9EC98]();
}

uint64_t ContiguousArray.init<A>(_:)()
{
  return MEMORY[0x270F9ECA0]();
}

uint64_t ContiguousArray.subscript.getter()
{
  return MEMORY[0x270F9ECB8]();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return MEMORY[0x270FA2188]();
}

uint64_t ContinuousClock.Instant.duration(to:)()
{
  return MEMORY[0x270FA2198]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x270FA21A0]();
}

uint64_t type metadata accessor for LazyMapSequence()
{
  return MEMORY[0x270F9ED00]();
}

uint64_t type metadata accessor for WritableKeyPath()
{
  return MEMORY[0x270F9ED10]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x270F9ED20]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t type metadata accessor for IteratorSequence()
{
  return MEMORY[0x270F9ED98]();
}

uint64_t IteratorSequence.init(_:)()
{
  return MEMORY[0x270F9EDA0]();
}

uint64_t type metadata accessor for PartialRangeFrom()
{
  return MEMORY[0x270F9EDA8]();
}

uint64_t _mangledTypeName(_:)()
{
  return MEMORY[0x270F9EDD8]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x270F9EDE8]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x270F9EDF8]();
}

uint64_t dispatch thunk of CustomReflectable.customMirror.getter()
{
  return MEMORY[0x270F9EE00]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x270F9EE10]();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return MEMORY[0x270F9EE68]();
}

uint64_t dispatch thunk of static FixedWidthInteger.min.getter()
{
  return MEMORY[0x270F9EE70]();
}

uint64_t _NativeDictionary.makeIterator()()
{
  return MEMORY[0x270F9EF10]();
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
}

uint64_t type metadata accessor for _NativeDictionary()
{
  return MEMORY[0x270F9EF40]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x270F9EF50]();
}

uint64_t __CocoaDictionary.index(forKey:)()
{
  return MEMORY[0x270F9EF98]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x270F9EFC0]();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return MEMORY[0x270F9EFC8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x270F9F010]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x270F9F018]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)()
{
  return MEMORY[0x270F9F020]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)()
{
  return MEMORY[0x270F9F028]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x270F9F030]();
}

uint64_t EnumeratedSequence.makeIterator()()
{
  return MEMORY[0x270F9F038]();
}

uint64_t EnumeratedSequence.Iterator.next()()
{
  return MEMORY[0x270F9F040]();
}

uint64_t type metadata accessor for EnumeratedSequence.Iterator()
{
  return MEMORY[0x270F9F048]();
}

uint64_t type metadata accessor for EnumeratedSequence()
{
  return MEMORY[0x270F9F050]();
}

uint64_t type metadata accessor for LazyFilterSequence()
{
  return MEMORY[0x270F9F060]();
}

uint64_t LazyFilterSequence<>.subscript.getter()
{
  return MEMORY[0x270F9F068]();
}

uint64_t type metadata accessor for ReversedCollection()
{
  return MEMORY[0x270F9F078]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x270F9F088]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t type metadata accessor for _DictionaryStorage()
{
  return MEMORY[0x270F9F0B8]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x270F9F0D0]();
}

uint64_t < infix<A, B>(_:_:)()
{
  return MEMORY[0x270F9F0F0]();
}

uint64_t dispatch thunk of LazySequenceProtocol.elements.getter()
{
  return MEMORY[0x270F9F130]();
}

uint64_t LazySequenceProtocol.map<A>(_:)()
{
  return MEMORY[0x270F9F148]();
}

uint64_t LazySequenceProtocol.drop(while:)()
{
  return MEMORY[0x270F9F150]();
}

uint64_t LazySequenceProtocol.filter(_:)()
{
  return MEMORY[0x270F9F158]();
}

uint64_t LazySequenceProtocol.prefix(while:)()
{
  return MEMORY[0x270F9F160]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x270F9F1A8]();
}

uint64_t type metadata accessor for LazyDropWhileSequence()
{
  return MEMORY[0x270F9F1F0]();
}

uint64_t _convertToAnyHashable<A>(_:)()
{
  return MEMORY[0x270F9F228]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F250]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x270F9F258]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F270]();
}

{
  return MEMORY[0x270F9F278]();
}

{
  return MEMORY[0x270F9F280]();
}

{
  return MEMORY[0x270F9F290]();
}

{
  return MEMORY[0x270F9F298]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2E8]();
}

{
  return MEMORY[0x270F9F2F0]();
}

{
  return MEMORY[0x270F9F2F8]();
}

{
  return MEMORY[0x270F9F308]();
}

{
  return MEMORY[0x270F9F350]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x270F9F360]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x270F9F378]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x270F9F390]();
}

uint64_t KeyedEncodingContainer.superEncoder(forKey:)()
{
  return MEMORY[0x270F9F3A0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x270F9F3B0]();
}

{
  return MEMORY[0x270F9F3C0]();
}

{
  return MEMORY[0x270F9F3D0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F428]();
}

{
  return MEMORY[0x270F9F430]();
}

{
  return MEMORY[0x270F9F438]();
}

{
  return MEMORY[0x270F9F448]();
}

{
  return MEMORY[0x270F9F450]();
}

{
  return MEMORY[0x270F9F490]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x270F9F4A8]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t _writeBackMutableSlice<A, B>(_:bounds:slice:)()
{
  return MEMORY[0x270F9F4D8]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)()
{
  return MEMORY[0x270F9F4E8]();
}

uint64_t type metadata accessor for LazyPrefixWhileSequence()
{
  return MEMORY[0x270F9F4F0]();
}

uint64_t type metadata accessor for _ContiguousArrayStorage()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t type metadata accessor for ReferenceWritableKeyPath()
{
  return MEMORY[0x270F9F500]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode(_:)()
{
  return MEMORY[0x270F9F568]();
}

{
  return MEMORY[0x270F9F590]();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x270F9F578]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode(_:)()
{
  return MEMORY[0x270F9F648]();
}

{
  return MEMORY[0x270F9F670]();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x270F9F658]();
}

uint64_t static FloatingPointRoundingRule.== infix(_:_:)()
{
  return MEMORY[0x270F9F748]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x270F9F750]();
}

uint64_t isKnownUniquelyReferenced<A>(_:)()
{
  return MEMORY[0x270F9F768]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x270F9F770]();
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)()
{
  return MEMORY[0x270F9F7A8]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x270F9F7C8]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x270F9F7D8]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode(_:)()
{
  return MEMORY[0x270F9F7E8]();
}

{
  return MEMORY[0x270F9F808]();
}

{
  return MEMORY[0x270F9F820]();
}

{
  return MEMORY[0x270F9F848]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x270F9F818]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode(_:)()
{
  return MEMORY[0x270F9F878]();
}

{
  return MEMORY[0x270F9F898]();
}

{
  return MEMORY[0x270F9F8B0]();
}

{
  return MEMORY[0x270F9F8E0]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x270F9F8A8]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x270F9F920]();
}

uint64_t == infix<A, B, C, D>(_:_:)()
{
  return MEMORY[0x270F9F930]();
}

uint64_t == infix<A, B>(_:_:)()
{
  return MEMORY[0x270F9F938]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x270F9FA40]();
}

uint64_t _diagnoseUnavailableCodeReached()()
{
  return MEMORY[0x270F9FA50]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x270F9FA68]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t abs<A>(_:)()
{
  return MEMORY[0x270F9FA90]();
}

uint64_t max<A>(_:_:)()
{
  return MEMORY[0x270F9FA98]();
}

uint64_t max<A>(_:_:_:_:)()
{
  return MEMORY[0x270F9FAA0]();
}

uint64_t min<A>(_:_:)()
{
  return MEMORY[0x270F9FAA8]();
}

uint64_t zip<A, B>(_:_:)()
{
  return MEMORY[0x270F9FAB8]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t Never.body.getter()
{
  return MEMORY[0x270EE9FB8]();
}

uint64_t type metadata accessor for Slice()
{
  return MEMORY[0x270F9FBD8]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x270F9FC30]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC38]();
}

{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t Hasher.combine(bytes:)()
{
  return MEMORY[0x270F9FC50]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return MEMORY[0x270F9FC88]();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t Hasher.init()()
{
  return MEMORY[0x270F9FC98]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x270F9FCA8]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x270F9FCB8]();
}

uint64_t Mirror.displayStyle.getter()
{
  return MEMORY[0x270F9FCC0]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x270F9FCC8]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x270F9FCD0]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x270F9FCD8]();
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x270F9FCE8]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x270F9FCF0]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x270F9FCF8]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF2760]();
}

uint64_t static UInt32._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF2770]();
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF2778]();
}

uint64_t static UInt32._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF2780]();
}

uint64_t dispatch thunk of CVarArg._cVarArgEncoding.getter()
{
  return MEMORY[0x270F9FD48]();
}

uint64_t dispatch thunk of Decoder.codingPath.getter()
{
  return MEMORY[0x270F9FD50]();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return MEMORY[0x270F9FD58]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x270F9FD60]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x270F9FD68]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return MEMORY[0x270F9FD80]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x270F9FD88]();
}

uint64_t dispatch thunk of Encoder.userInfo.getter()
{
  return MEMORY[0x270F9FD90]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t type metadata accessor for KeyPath()
{
  return MEMORY[0x270F9FDD0]();
}

uint64_t Unicode.Scalar.Properties.isDiacritic.getter()
{
  return MEMORY[0x270F9FE60]();
}

uint64_t type metadata accessor for Unicode.Scalar.Properties()
{
  return MEMORY[0x270F9FF30]();
}

uint64_t Unicode.Scalar.properties.getter()
{
  return MEMORY[0x270F9FF38]();
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(after:)()
{
  return MEMORY[0x270EF27B8]();
}

uint64_t Duration.TimeFormatStyle.Attributed.discreteInput(before:)()
{
  return MEMORY[0x270EF27C0]();
}

uint64_t Duration.TimeFormatStyle.Attributed.subscript.getter()
{
  return MEMORY[0x270EF27C8]();
}

uint64_t Duration.TimeFormatStyle.Attributed.format(_:)()
{
  return MEMORY[0x270EF27D0]();
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Attributed()
{
  return MEMORY[0x270EF27D8]();
}

uint64_t Duration.TimeFormatStyle.attributed.getter()
{
  return MEMORY[0x270EF27E0]();
}

uint64_t Duration.TimeFormatStyle.locale.getter()
{
  return MEMORY[0x270EF27E8]();
}

uint64_t Duration.TimeFormatStyle.locale(_:)()
{
  return MEMORY[0x270EF27F0]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinute(padHourToLength:roundSeconds:)()
{
  return MEMORY[0x270EF27F8]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond(padMinuteToLength:fractionalSecondsLength:roundFractionalSeconds:)()
{
  return MEMORY[0x270EF2800]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.minuteSecond.getter()
{
  return MEMORY[0x270EF2808]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond(padHourToLength:fractionalSecondsLength:roundFractionalSeconds:)()
{
  return MEMORY[0x270EF2810]();
}

uint64_t static Duration.TimeFormatStyle.Pattern.hourMinuteSecond.getter()
{
  return MEMORY[0x270EF2818]();
}

uint64_t type metadata accessor for Duration.TimeFormatStyle.Pattern()
{
  return MEMORY[0x270EF2820]();
}

uint64_t Duration.TimeFormatStyle.init(pattern:locale:)()
{
  return MEMORY[0x270EF2828]();
}

uint64_t Duration.TimeFormatStyle.grouping(_:)()
{
  return MEMORY[0x270EF2830]();
}

uint64_t type metadata accessor for Duration.TimeFormatStyle()
{
  return MEMORY[0x270EF2838]();
}

uint64_t Duration.UnitsFormatStyle.init(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)()
{
  return MEMORY[0x270EF2840]();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.modify()
{
  return MEMORY[0x270EF2848]();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.getter()
{
  return MEMORY[0x270EF2850]();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.setter()
{
  return MEMORY[0x270EF2858]();
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)()
{
  return MEMORY[0x270EF2868]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  return MEMORY[0x270EF2870]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(after:)()
{
  return MEMORY[0x270EF2878]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)()
{
  return MEMORY[0x270EF2880]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.modify()
{
  return MEMORY[0x270EF2888]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.getter()
{
  return MEMORY[0x270EF2890]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.setter()
{
  return MEMORY[0x270EF2898]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.format(_:)()
{
  return MEMORY[0x270EF28A0]();
}

uint64_t Duration.UnitsFormatStyle.Attributed.locale(_:)()
{
  return MEMORY[0x270EF28A8]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Attributed()
{
  return MEMORY[0x270EF28B0]();
}

uint64_t Duration.UnitsFormatStyle.attributed.getter()
{
  return MEMORY[0x270EF28B8]();
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.getter()
{
  return MEMORY[0x270EF28C0]();
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.setter()
{
  return MEMORY[0x270EF28C8]();
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.modify()
{
  return MEMORY[0x270EF28D0]();
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.getter()
{
  return MEMORY[0x270EF28D8]();
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.setter()
{
  return MEMORY[0x270EF28E0]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter()
{
  return MEMORY[0x270EF28E8]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter()
{
  return MEMORY[0x270EF28F0]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter()
{
  return MEMORY[0x270EF28F8]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter()
{
  return MEMORY[0x270EF2900]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter()
{
  return MEMORY[0x270EF2908]();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter()
{
  return MEMORY[0x270EF2910]();
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide(rounded:)()
{
  return MEMORY[0x270EF2918]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return MEMORY[0x270EF2928]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.nanoseconds.getter()
{
  return MEMORY[0x270EF2938]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.microseconds.getter()
{
  return MEMORY[0x270EF2940]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.milliseconds.getter()
{
  return MEMORY[0x270EF2948]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.== infix(_:_:)()
{
  return MEMORY[0x270EF2950]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.days.getter()
{
  return MEMORY[0x270EF2958]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.hours.getter()
{
  return MEMORY[0x270EF2960]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.weeks.getter()
{
  return MEMORY[0x270EF2968]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.minutes.getter()
{
  return MEMORY[0x270EF2970]();
}

uint64_t static Duration.UnitsFormatStyle.Unit.seconds.getter()
{
  return MEMORY[0x270EF2978]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Unit()
{
  return MEMORY[0x270EF2980]();
}

uint64_t Duration.UnitsFormatStyle.locale.getter()
{
  return MEMORY[0x270EF2990]();
}

uint64_t Duration.UnitsFormatStyle.locale(_:)()
{
  return MEMORY[0x270EF2998]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter()
{
  return MEMORY[0x270EF29A0]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.condensedAbbreviated.getter()
{
  return MEMORY[0x270EF29A8]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)()
{
  return MEMORY[0x270EF29B0]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.wide.getter()
{
  return MEMORY[0x270EF29B8]();
}

uint64_t static Duration.UnitsFormatStyle.UnitWidth.narrow.getter()
{
  return MEMORY[0x270EF29C8]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.UnitWidth()
{
  return MEMORY[0x270EF29D0]();
}

uint64_t Duration.UnitsFormatStyle.unitWidth.getter()
{
  return MEMORY[0x270EF29E0]();
}

uint64_t Duration.UnitsFormatStyle.unitWidth.setter()
{
  return MEMORY[0x270EF29E8]();
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle()
{
  return MEMORY[0x270EF29F0]();
}

uint64_t Duration.formatted<A>(_:)()
{
  return MEMORY[0x270EF2A10]();
}

uint64_t Duration.components.getter()
{
  return MEMORY[0x270F9FF68]();
}

uint64_t Duration.description.getter()
{
  return MEMORY[0x270F9FF78]();
}

uint64_t Duration.init(secondsComponent:attosecondsComponent:)()
{
  return MEMORY[0x270F9FF90]();
}

uint64_t static Duration.< infix(_:_:)()
{
  return MEMORY[0x270F9FFA8]();
}

uint64_t static Duration.- infix(_:_:)()
{
  return MEMORY[0x270F9FFC0]();
}

uint64_t static Duration.== infix(_:_:)()
{
  return MEMORY[0x270F9FFC8]();
}

uint64_t Duration.hash(into:)()
{
  return MEMORY[0x270F9FFD8]();
}

uint64_t static Duration.zero.getter()
{
  return MEMORY[0x270F9FFE0]();
}

uint64_t static Duration.seconds(_:)()
{
  return MEMORY[0x270F9FFE8]();
}

uint64_t static RangeSet.== infix(_:_:)()
{
  return MEMORY[0x270FA0000]();
}

uint64_t RangeSet.Ranges.count.getter()
{
  return MEMORY[0x270FA0008]();
}

uint64_t RangeSet.Ranges._insert(contentsOf:)()
{
  return MEMORY[0x270FA0010]();
}

uint64_t type metadata accessor for RangeSet.Ranges()
{
  return MEMORY[0x270FA0018]();
}

uint64_t RangeSet.Ranges.subscript.getter()
{
  return MEMORY[0x270FA0020]();
}

uint64_t RangeSet.ranges.getter()
{
  return MEMORY[0x270FA0030]();
}

uint64_t RangeSet.remove(contentsOf:)()
{
  return MEMORY[0x270FA0038]();
}

uint64_t RangeSet._ranges.modify()
{
  return MEMORY[0x270FA0040]();
}

uint64_t RangeSet.isEmpty.getter()
{
  return MEMORY[0x270FA0048]();
}

uint64_t RangeSet.contains(_:)()
{
  return MEMORY[0x270FA0050]();
}

uint64_t RangeSet.init()()
{
  return MEMORY[0x270FA0058]();
}

uint64_t type metadata accessor for RangeSet()
{
  return MEMORY[0x270FA0060]();
}

uint64_t RangeSet.init(_:)()
{
  return MEMORY[0x270FA0068]();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return MEMORY[0x270FA00C0]();
}

uint64_t OptionSet<>.init()()
{
  return MEMORY[0x270FA0118]();
}

uint64_t type metadata accessor for Unmanaged()
{
  return MEMORY[0x270FA0120]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

uint64_t getVaList(_:)()
{
  return MEMORY[0x270FA0130]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x270F0F118]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x270F0F120]();
}

uint64_t AGGraphAddInput()
{
  return MEMORY[0x270F0F140]();
}

uint64_t AGGraphAddNamedTraceEvent()
{
  return MEMORY[0x270F0F148]();
}

uint64_t AGGraphAddTraceEvent()
{
  return MEMORY[0x270F0F150]();
}

uint64_t AGGraphAnyInputsChanged()
{
  return MEMORY[0x270F0F158]();
}

uint64_t AGGraphCancelUpdate()
{
  return MEMORY[0x270F0F168]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x270F0F170]();
}

uint64_t AGGraphCreate()
{
  return MEMORY[0x270F0F178]();
}

uint64_t AGGraphCreateIndirectAttribute()
{
  return MEMORY[0x270F0F180]();
}

uint64_t AGGraphCreateIndirectAttribute2()
{
  return MEMORY[0x270F0F188]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x270F0F190]();
}

uint64_t AGGraphCreateShared()
{
  return MEMORY[0x270F0F198]();
}

uint64_t AGGraphCurrentAttributeWasModified()
{
  return MEMORY[0x270F0F1A0]();
}

uint64_t AGGraphDescription()
{
  return MEMORY[0x270F0F1A8]();
}

uint64_t AGGraphGetAttributeGraph()
{
  return MEMORY[0x270F0F1B0]();
}

uint64_t AGGraphGetAttributeInfo()
{
  return MEMORY[0x270F0F1B8]();
}

uint64_t AGGraphGetAttributeSubgraph()
{
  return MEMORY[0x270F0F1C0]();
}

uint64_t AGGraphGetAttributeSubgraph2()
{
  return MEMORY[0x270F0F1C8]();
}

uint64_t AGGraphGetContext()
{
  return MEMORY[0x270F0F1D0]();
}

uint64_t AGGraphGetCounter()
{
  return MEMORY[0x270F0F1D8]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x270F0F1E0]();
}

uint64_t AGGraphGetFlags()
{
  return MEMORY[0x270F0F1E8]();
}

uint64_t AGGraphGetInputValue()
{
  return MEMORY[0x270F0F1F0]();
}

uint64_t AGGraphGetOutputValue()
{
  return MEMORY[0x270F0F1F8]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x270F0F200]();
}

uint64_t AGGraphGetValueState()
{
  return MEMORY[0x270F0F208]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x270F0F210]();
}

uint64_t AGGraphHasDeadlinePassed()
{
  return MEMORY[0x270F0F218]();
}

uint64_t AGGraphInvalidate()
{
  return MEMORY[0x270F0F220]();
}

uint64_t AGGraphInvalidateValue()
{
  return MEMORY[0x270F0F228]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x270F0F238]();
}

uint64_t AGGraphRegisterNamedTraceEvent()
{
  return MEMORY[0x270F0F240]();
}

uint64_t AGGraphRemoveTrace()
{
  return MEMORY[0x270F0F248]();
}

uint64_t AGGraphSetContext()
{
  return MEMORY[0x270F0F258]();
}

uint64_t AGGraphSetFlags()
{
  return MEMORY[0x270F0F260]();
}

uint64_t AGGraphSetIndirectAttribute()
{
  return MEMORY[0x270F0F268]();
}

uint64_t AGGraphSetIndirectDependency()
{
  return MEMORY[0x270F0F270]();
}

uint64_t AGGraphSetInvalidationCallback()
{
  return MEMORY[0x270F0F278]();
}

uint64_t AGGraphSetNeedsUpdate()
{
  return MEMORY[0x270F0F280]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x270F0F288]();
}

uint64_t AGGraphSetTrace()
{
  return MEMORY[0x270F0F290]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x270F0F298]();
}

uint64_t AGGraphSetUpdateCallback()
{
  return MEMORY[0x270F0F2A0]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x270F0F2A8]();
}

uint64_t AGGraphStartTracing()
{
  return MEMORY[0x270F0F2B8]();
}

uint64_t AGGraphStopTracing()
{
  return MEMORY[0x270F0F2C8]();
}

uint64_t AGGraphSyncTracing()
{
  return MEMORY[0x270F0F2D0]();
}

uint64_t AGGraphTraceEventEnabled()
{
  return MEMORY[0x270F0F2D8]();
}

uint64_t AGGraphWithMainThreadHandler()
{
  return MEMORY[0x270F0F2E0]();
}

uint64_t AGGraphWithUpdate()
{
  return MEMORY[0x270F0F2E8]();
}

uint64_t AGMakeUniqueID()
{
  return MEMORY[0x270F0F2F0]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x270F0F2F8]();
}

uint64_t AGSubgraphAddChild2()
{
  return MEMORY[0x270F0F300]();
}

uint64_t AGSubgraphAddObserver()
{
  return MEMORY[0x270F0F308]();
}

uint64_t AGSubgraphAddTreeValue()
{
  return MEMORY[0x270F0F310]();
}

uint64_t AGSubgraphApply()
{
  return MEMORY[0x270F0F318]();
}

uint64_t AGSubgraphBeginTreeElement()
{
  return MEMORY[0x270F0F320]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x270F0F328]();
}

uint64_t AGSubgraphCreate2()
{
  return MEMORY[0x270F0F330]();
}

uint64_t AGSubgraphEndTreeElement()
{
  return MEMORY[0x270F0F338]();
}

uint64_t AGSubgraphGetChild()
{
  return MEMORY[0x270F0F340]();
}

uint64_t AGSubgraphGetChildCount()
{
  return MEMORY[0x270F0F348]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x270F0F350]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x270F0F358]();
}

uint64_t AGSubgraphGetIndex()
{
  return MEMORY[0x270F0F360]();
}

uint64_t AGSubgraphGetTreeRoot()
{
  return MEMORY[0x270F0F368]();
}

uint64_t AGSubgraphInvalidate()
{
  return MEMORY[0x270F0F370]();
}

uint64_t AGSubgraphIsAncestor()
{
  return MEMORY[0x270F0F378]();
}

uint64_t AGSubgraphIsDirty()
{
  return MEMORY[0x270F0F380]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x270F0F388]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x270F0F390]();
}

uint64_t AGSubgraphRemoveObserver()
{
  return MEMORY[0x270F0F398]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x270F0F3A0]();
}

uint64_t AGSubgraphSetIndex()
{
  return MEMORY[0x270F0F3A8]();
}

uint64_t AGSubgraphSetShouldRecordTree()
{
  return MEMORY[0x270F0F3B0]();
}

uint64_t AGSubgraphShouldRecordTree()
{
  return MEMORY[0x270F0F3B8]();
}

uint64_t AGSubgraphUpdate()
{
  return MEMORY[0x270F0F3C0]();
}

uint64_t AGTreeElementGetFlags()
{
  return MEMORY[0x270F0F3C8]();
}

uint64_t AGTreeElementGetNextChild()
{
  return MEMORY[0x270F0F3D0]();
}

uint64_t AGTreeElementGetNextValue()
{
  return MEMORY[0x270F0F3D8]();
}

uint64_t AGTreeElementGetType()
{
  return MEMORY[0x270F0F3E0]();
}

uint64_t AGTreeElementGetValue()
{
  return MEMORY[0x270F0F3E8]();
}

uint64_t AGTreeElementMakeChildIterator()
{
  return MEMORY[0x270F0F3F0]();
}

uint64_t AGTreeElementMakeValueIterator()
{
  return MEMORY[0x270F0F3F8]();
}

uint64_t AGTreeValueGetKey()
{
  return MEMORY[0x270F0F400]();
}

uint64_t AGTreeValueGetValue()
{
  return MEMORY[0x270F0F408]();
}

uint64_t AGTupleCount()
{
  return MEMORY[0x270F0F410]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x270F0F418]();
}

uint64_t AGTupleElementType()
{
  return MEMORY[0x270F0F420]();
}

uint64_t AGTupleWithBuffer()
{
  return MEMORY[0x270F0F428]();
}

uint64_t AGTypeApplyFields2()
{
  return MEMORY[0x270F0F430]();
}

uint64_t AGTypeApplyMutableEnumData()
{
  return MEMORY[0x270F0F438]();
}

uint64_t AGTypeGetEnumTag()
{
  return MEMORY[0x270F0F440]();
}

uint64_t AGTypeGetKind()
{
  return MEMORY[0x270F0F448]();
}

uint64_t AGTypeGetSignature()
{
  return MEMORY[0x270F0F450]();
}

uint64_t AGTypeInjectEnumTag()
{
  return MEMORY[0x270F0F458]();
}

uint64_t AGTypeNominalDescriptor()
{
  return MEMORY[0x270F0F460]();
}

uint64_t AGTypeProjectEnumData()
{
  return MEMORY[0x270F0F468]();
}

uint64_t AGWeakAttributeGetAttribute()
{
  return MEMORY[0x270F0F470]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x270EFB790]();
  return result;
}

uint64_t CALayerGetSuperlayer()
{
  return MEMORY[0x270EFB858]();
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  return (CATransform3D *)MEMORY[0x270EFB8F0](retstr, a, b);
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  return (CATransform3D *)MEMORY[0x270EFB918](retstr, t);
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return (CATransform3D *)MEMORY[0x270EFB930](retstr, m);
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x270EFB960](retstr, t, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x270EFB978](retstr, t, tx, ty, tz);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7AF8](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x270ED7B00](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B08](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x270EE4278]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x270EE4400](aStr);
}

CFStringRef CFAttributedStringGetString(CFAttributedStringRef aStr)
{
  return (CFStringRef)MEMORY[0x270EE4408](aStr);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x270EE4870](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x270EE48A8](formatter);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x270EE4BD0]();
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  return MEMORY[0x270EE4E38](rl, observer, mode);
}

CFRunLoopMode CFRunLoopCopyCurrentMode(CFRunLoopRef rl)
{
  return (CFRunLoopMode)MEMORY[0x270EE4E50](rl);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x270EE4E58]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x270EE4E88](allocator, activities, repeats, order, callout, context);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x270EE4ED0](mode, returnAfterSourceHandled, seconds);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x270EE5098](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B8](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x270EE5128](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x270EE5148](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x270EE51D8](theString);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x270EE5278](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x270EE5290](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x270EE52A0](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5368](anURL);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x270EE5960](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x270EE5978](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x270EE5980](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59C8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59D8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x270EE5B60](a1, *(void *)&intent, color, options);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B68](color, alpha);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B70](gray, alpha);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x270EE5BC0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x270EE5BF8]();
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5C20](color);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *gamma, const CGFloat *matrix)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C48](whitePoint, blackPoint, gamma, matrix);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  return MEMORY[0x270EE5D38](s);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x270EE5D80](a1);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

uint64_t CGContextDelegateOperation()
{
  return MEMORY[0x270EE5ED8]();
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x270EE5FC0](retstr, c);
}

CGRect CGContextGetClipBoundingBox(CGContextRef c)
{
  MEMORY[0x270EE5FC8](c);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

uint64_t CGContextGetDelegate()
{
  return MEMORY[0x270EE5FD8]();
}

uint64_t CGContextGetGState()
{
  return MEMORY[0x270EE5FE0]();
}

uint64_t CGContextGetRenderingState()
{
  return MEMORY[0x270EE6020]();
}

void CGContextRestoreGState(CGContextRef c)
{
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreate(void *info, const CGDataConsumerCallbacks *cbks)
{
  return (CGDataConsumerRef)MEMORY[0x270EE6290](info, cbks);
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x270EE6298](data);
}

uint64_t CGDataConsumerPutBytes()
{
  return MEMORY[0x270EE62A8]();
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x270EE62D0](data);
}

CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider)
{
  return (CGFontRef)MEMORY[0x270EE6430](provider);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x270EE6690](space, colors, locations);
}

uint64_t CGImageCopySourceData()
{
  return MEMORY[0x270EF4EB0]();
}

uint64_t CGImageCreateByMatchingToColorSpace()
{
  return MEMORY[0x270EF4EB8]();
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef consumer, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F30](consumer, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

const CGFloat *__cdecl CGImageGetDecode(CGImageRef image)
{
  return (const CGFloat *)MEMORY[0x270EE67F0](image);
}

uint64_t CGImageGetHeadroom()
{
  return MEMORY[0x270EE67F8]();
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

uint64_t CGImageGetIdentifier()
{
  return MEMORY[0x270EE6808]();
}

uint64_t CGImageGetMask()
{
  return MEMORY[0x270EE6818]();
}

uint64_t CGImageGetMaskingColors()
{
  return MEMORY[0x270EE6820]();
}

uint64_t CGImageGetMatte()
{
  return MEMORY[0x270EE6828]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x270EE6908](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x270EE6910]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x270EF5068](isrc);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x270EE6C00](document, pageNumber);
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x270EE6D98](retstr, page, *(void *)&box, *(void *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  return (CGMutablePathRef)MEMORY[0x270EE7038](path);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7050](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7058](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7060](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  MEMORY[0x270EE7078](path);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x270EE70C8](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  MEMORY[0x270EE7148](t, (__n128)point, *(__n128 *)&point.y);
  result.CGFloat y = v3;
  result.CGFloat x = v2;
  return result;
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x270EE7168](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x270EE7170]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7180]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7238]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x270EE7268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x270EE7270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x270EE7288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform *t)
{
  MEMORY[0x270EE7330](t, (__n128)size, *(__n128 *)&size.height);
  result.CGFloat height = v3;
  result.CGFloat width = v2;
  return result;
}

CFArrayRef CTFontCopyDefaultCascadeListForLanguages(CTFontRef font, CFArrayRef languagePrefList)
{
  return (CFArrayRef)MEMORY[0x270EE9A18](font, languagePrefList);
}

CTFontDescriptorRef CTFontCopyFontDescriptor(CTFontRef font)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9A40](font);
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x270EE9A50](font, attributes);
}

CFStringRef CTFontCopyPostScriptName(CTFontRef font)
{
  return (CFStringRef)MEMORY[0x270EE9A78](font);
}

uint64_t CTFontCopySystemUIFontExcessiveLineHeightCharacterSet()
{
  return MEMORY[0x270EE9A80]();
}

uint64_t CTFontCopyTallestTextStyleLanguageForString()
{
  return MEMORY[0x270EE9A90]();
}

CFDictionaryRef CTFontCopyVariation(CTFontRef font)
{
  return (CFDictionaryRef)MEMORY[0x270EE9AA0](font);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x270EE9AB8](font, matrix, attributes, size);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x270EE9AD0](font, glyph, matrix);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AE0](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithGraphicsFont(CGFontRef graphicsFont, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x270EE9AF0](graphicsFont, matrix, attributes, size);
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x270EE9B08](descriptor, attribute);
}

CFDictionaryRef CTFontDescriptorCopyAttributes(CTFontDescriptorRef descriptor)
{
  return (CFDictionaryRef)MEMORY[0x270EE9B10](descriptor);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef original, CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B20](original, attributes);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef original, CFNumberRef featureTypeIdentifier, CFNumberRef featureSelectorIdentifier)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B28](original, featureTypeIdentifier, featureSelectorIdentifier);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithSymbolicTraits(CTFontDescriptorRef original, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B30](original, *(void *)&symTraitValue, *(void *)&symTraitMask);
}

CTFontDescriptorRef CTFontDescriptorCreateCopyWithVariation(CTFontDescriptorRef original, CFNumberRef variationIdentifier, CGFloat variationValue)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B38](original, variationIdentifier, variationValue);
}

uint64_t CTFontDescriptorCreateForUIType()
{
  return MEMORY[0x270EE9B40]();
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B60](attributes);
}

uint64_t CTFontDescriptorCreateWithAttributesAndOptions()
{
  return MEMORY[0x270EE9B68]();
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B70](name, size);
}

uint64_t CTFontDescriptorCreateWithTextStyleAndAttributes()
{
  return MEMORY[0x270EE9B80]();
}

uint64_t CTFontDescriptorGetContentSizeCategoryFromIndex()
{
  return MEMORY[0x270EE9B88]();
}

uint64_t CTFontDescriptorGetDefaultTextStylePlatform()
{
  return MEMORY[0x270EE9B90]();
}

uint64_t CTFontDescriptorGetOptions()
{
  return MEMORY[0x270EE9B98]();
}

uint64_t CTFontDescriptorGetSymbolicTraits()
{
  return MEMORY[0x270EE9BA0]();
}

uint64_t CTFontDescriptorGetTextStyleSize()
{
  return MEMORY[0x270EE9BA8]();
}

uint64_t CTFontDescriptorGetWeight()
{
  return MEMORY[0x270EE9BB0]();
}

uint64_t CTFontDescriptorIsAppleFont()
{
  return MEMORY[0x270EE9BB8]();
}

uint64_t CTFontDescriptorIsSystemUIFont()
{
  return MEMORY[0x270EE9BC0]();
}

uint64_t CTFontGetAccessibilityBoldWeightOfWeight()
{
  return MEMORY[0x270EE9BD8]();
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  MEMORY[0x270EE9BE8](font);
  return result;
}

CGFloat CTFontGetCapHeight(CTFontRef font)
{
  MEMORY[0x270EE9C00](font);
  return result;
}

uint64_t CTFontGetClippingMetrics()
{
  return MEMORY[0x270EE9C08]();
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  MEMORY[0x270EE9C10](font);
  return result;
}

uint64_t CTFontGetLanguageAwareOutsets()
{
  return MEMORY[0x270EE9C30]();
}

CGFloat CTFontGetLeading(CTFontRef font)
{
  MEMORY[0x270EE9C38](font);
  return result;
}

CGFloat CTFontGetSize(CTFontRef font)
{
  MEMORY[0x270EE9C40](font);
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x270EE9C60](font);
}

uint64_t CTFontGetTextStyle()
{
  return MEMORY[0x270EE9C68]();
}

CFTypeID CTFontGetTypeID(void)
{
  return MEMORY[0x270EE9C70]();
}

uint64_t CTFontGetWeight()
{
  return MEMORY[0x270EE9C98]();
}

uint64_t CTFontIsSystemUIFont()
{
  return MEMORY[0x270EE9CB0]();
}

uint64_t CTFontIsVertical()
{
  return MEMORY[0x270EE9CB8]();
}

CTFontDescriptorRef CTFontManagerCreateFontDescriptorFromData(CFDataRef data)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9CC0](data);
}

CFArrayRef CTFontManagerCreateFontDescriptorsFromData(CFDataRef data)
{
  return (CFArrayRef)MEMORY[0x270EE9CC8](data);
}

CFArrayRef CTFontManagerCreateFontDescriptorsFromURL(CFURLRef fileURL)
{
  return (CFArrayRef)MEMORY[0x270EE9CD0](fileURL);
}

uint64_t CTLineCreateCopyWithAttributeOverrides()
{
  return MEMORY[0x270EE9D58]();
}

CTLineRef CTLineCreateTruncatedLine(CTLineRef line, double width, CTLineTruncationType truncationType, CTLineRef truncationToken)
{
  return (CTLineRef)MEMORY[0x270EE9D68](line, *(void *)&truncationType, truncationToken, width);
}

uint64_t CTLineCreateWithString()
{
  return MEMORY[0x270EE9D78]();
}

uint64_t CTLineDecorationApplyWithBlock()
{
  return MEMORY[0x270EE9D80]();
}

uint64_t CTLineDecorationGetFragment()
{
  return MEMORY[0x270EE9D88]();
}

uint64_t CTLineDecorationGetSegment()
{
  return MEMORY[0x270EE9D90]();
}

uint64_t CTLineDecorationGetSegmentColor()
{
  return MEMORY[0x270EE9D98]();
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x270EE9DC0](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x270EE9DC8](line, context);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CGFloat CTLineGetOffsetForStringIndex(CTLineRef line, CFIndex charIndex, CGFloat *secondaryOffset)
{
  MEMORY[0x270EE9DD0](line, charIndex, secondaryOffset);
  return result;
}

uint64_t CTLineGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x270EE9DE0]();
}

CFRange CTLineGetStringRange(CTLineRef line)
{
  CFIndex v1 = MEMORY[0x270EE9DF0](line);
  result.length = v2;
  result.location = v1;
  return result;
}

double CTLineGetTrailingWhitespaceWidth(CTLineRef line)
{
  MEMORY[0x270EE9DF8](line);
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x270EE9E00](line, ascent, descent, leading);
  return result;
}

uint64_t CTLineHasBidiLevels()
{
  return MEMORY[0x270EE9E08]();
}

uint64_t CTLineIsRightToLeft()
{
  return MEMORY[0x270EE9E10]();
}

uint64_t CTParagraphStyleGetCompositionLanguageForLanguage()
{
  return MEMORY[0x270EE9E20]();
}

CTRunDelegateRef CTRunDelegateCreate(const CTRunDelegateCallbacks *callbacks, void *refCon)
{
  return (CTRunDelegateRef)MEMORY[0x270EE9E30](callbacks, refCon);
}

void CTRunDraw(CTRunRef run, CGContextRef context, CFRange range)
{
}

uint64_t CTRunDrawWithAttributeOverrides()
{
  return MEMORY[0x270EE9E40]();
}

CFDictionaryRef CTRunGetAttributes(CTRunRef run)
{
  return (CFDictionaryRef)MEMORY[0x270EE9E50](run);
}

void CTRunGetBaseAdvancesAndOrigins(CTRunRef runRef, CFRange range, CGSize *advancesBuffer, CGPoint *originsBuffer)
{
}

uint64_t CTRunGetFont()
{
  return MEMORY[0x270EE9E60]();
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x270EE9E68](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

const CGGlyph *__cdecl CTRunGetGlyphsPtr(CTRunRef run)
{
  return (const CGGlyph *)MEMORY[0x270EE9E78](run);
}

CGRect CTRunGetImageBounds(CTRunRef run, CGContextRef context, CFRange range)
{
  MEMORY[0x270EE9E80](run, context, range.location, range.length);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

const CGPoint *__cdecl CTRunGetPositionsPtr(CTRunRef run)
{
  return (const CGPoint *)MEMORY[0x270EE9E90](run);
}

CTRunStatus CTRunGetStatus(CTRunRef run)
{
  return MEMORY[0x270EE9E98](run);
}

void CTRunGetStringIndices(CTRunRef run, CFRange range, CFIndex *buffer)
{
}

const CFIndex *__cdecl CTRunGetStringIndicesPtr(CTRunRef run)
{
  return (const CFIndex *)MEMORY[0x270EE9EB0](run);
}

CFRange CTRunGetStringRange(CTRunRef run)
{
  CFIndex v1 = MEMORY[0x270EE9EB8](run);
  result.length = v2;
  result.location = v1;
  return result;
}

double CTRunGetTypographicBounds(CTRunRef run, CFRange range, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x270EE9ED0](run, range.location, range.length, ascent, descent, leading);
  return result;
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MTMaterialCreateDictionaryRepresentation()
{
  return MEMORY[0x270F1A7B8]();
}

uint64_t MTVisualStylingCreateDictionaryRepresentation()
{
  return MEMORY[0x270F1A7D0]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x270EF2AF8](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

uint64_t RBColorFromLinear()
{
  return MEMORY[0x270F5AAA0]();
}

uint64_t RBColorToLinear()
{
  return MEMORY[0x270F5AAB0]();
}

uint64_t RBDecoderCreateCGFontWithData()
{
  return MEMORY[0x270F5AAB8]();
}

uint64_t RBDisplayListGetState()
{
  return MEMORY[0x270F5AAC0]();
}

uint64_t RBDrawingStateAddAffineTransformStyle()
{
  return MEMORY[0x270F5AAC8]();
}

uint64_t RBDrawingStateAddAlphaMultiplyFilter()
{
  return MEMORY[0x270F5AAD8]();
}

uint64_t RBDrawingStateAddAlphaMultiplyFilter2()
{
  return MEMORY[0x270F5AAE0]();
}

uint64_t RBDrawingStateAddAlphaThresholdFilter()
{
  return MEMORY[0x270F5AAE8]();
}

uint64_t RBDrawingStateAddAnimationStyle()
{
  return MEMORY[0x270F5AAF0]();
}

uint64_t RBDrawingStateAddBlurFilter()
{
  return MEMORY[0x270F5AAF8]();
}

uint64_t RBDrawingStateAddColorMatrixFilter()
{
  return MEMORY[0x270F5AB10]();
}

uint64_t RBDrawingStateAddColorMultiplyFilter()
{
  return MEMORY[0x270F5AB20]();
}

uint64_t RBDrawingStateAddLuminanceCurveFilter()
{
  return MEMORY[0x270F5AB40]();
}

uint64_t RBDrawingStateAddPathProjectionStyle()
{
  return MEMORY[0x270F5AB50]();
}

uint64_t RBDrawingStateAddPredicateStyle()
{
  return MEMORY[0x270F5AB58]();
}

uint64_t RBDrawingStateAddProjectionStyle()
{
  return MEMORY[0x270F5AB60]();
}

uint64_t RBDrawingStateAddRGBACurvesFilter()
{
  return MEMORY[0x270F5AB68]();
}

uint64_t RBDrawingStateAddRotation3DStyle()
{
  return MEMORY[0x270F5AB70]();
}

uint64_t RBDrawingStateAddRotationStyle()
{
  return MEMORY[0x270F5AB78]();
}

uint64_t RBDrawingStateAddShaderFilter()
{
  return MEMORY[0x270F5AB88]();
}

uint64_t RBDrawingStateAddShadowStyle()
{
  return MEMORY[0x270F5AB90]();
}

uint64_t RBDrawingStateAddShadowStyle3()
{
  return MEMORY[0x270F5AB98]();
}

uint64_t RBDrawingStateAddTransformStyle()
{
  return MEMORY[0x270F5ABA0]();
}

uint64_t RBDrawingStateAddVariableBlurFilter()
{
  return MEMORY[0x270F5ABA8]();
}

uint64_t RBDrawingStateAddVariableBlurLayer()
{
  return MEMORY[0x270F5ABB0]();
}

uint64_t RBDrawingStateAssign()
{
  return MEMORY[0x270F5ABB8]();
}

uint64_t RBDrawingStateBeginCGContext()
{
  return MEMORY[0x270F5ABC0]();
}

uint64_t RBDrawingStateBeginLayer()
{
  return MEMORY[0x270F5ABC8]();
}

uint64_t RBDrawingStateClipLayer()
{
  return MEMORY[0x270F5ABD0]();
}

uint64_t RBDrawingStateClipShape()
{
  return MEMORY[0x270F5ABD8]();
}

uint64_t RBDrawingStateConcatCTM()
{
  return MEMORY[0x270F5ABE8]();
}

uint64_t RBDrawingStateDestroy()
{
  return MEMORY[0x270F5ABF0]();
}

uint64_t RBDrawingStateDrawDisplayList()
{
  return MEMORY[0x270F5ABF8]();
}

uint64_t RBDrawingStateDrawDisplayList2()
{
  return MEMORY[0x270F5AC00]();
}

uint64_t RBDrawingStateDrawLayer()
{
  return MEMORY[0x270F5AC08]();
}

uint64_t RBDrawingStateDrawShape()
{
  return MEMORY[0x270F5AC10]();
}

uint64_t RBDrawingStateEndCGContext()
{
  return MEMORY[0x270F5AC18]();
}

uint64_t RBDrawingStateFromCGContext()
{
  return MEMORY[0x270F5AC20]();
}

uint64_t RBDrawingStateGetCTM()
{
  return MEMORY[0x270F5AC28]();
}

uint64_t RBDrawingStateGetClipBoundingBox()
{
  return MEMORY[0x270F5AC30]();
}

uint64_t RBDrawingStateGetDefaultColorSpace()
{
  return MEMORY[0x270F5AC38]();
}

uint64_t RBDrawingStateGetDisplayList()
{
  return MEMORY[0x270F5AC40]();
}

uint64_t RBDrawingStateGetIdentifier()
{
  return MEMORY[0x270F5AC48]();
}

uint64_t RBDrawingStateGetIdentifierNamespace2()
{
  return MEMORY[0x270F5AC50]();
}

uint64_t RBDrawingStateInit()
{
  return MEMORY[0x270F5AC58]();
}

uint64_t RBDrawingStateScaleCTM()
{
  return MEMORY[0x270F5AC68]();
}

uint64_t RBDrawingStateSetAttribute()
{
  return MEMORY[0x270F5AC70]();
}

uint64_t RBDrawingStateSetCTM()
{
  return MEMORY[0x270F5AC78]();
}

uint64_t RBDrawingStateSetIdentifier()
{
  return MEMORY[0x270F5AC80]();
}

uint64_t RBDrawingStateSetIdentifier2()
{
  return MEMORY[0x270F5AC88]();
}

uint64_t RBDrawingStateSetTransition()
{
  return MEMORY[0x270F5AC90]();
}

uint64_t RBDrawingStateTranslateCTM()
{
  return MEMORY[0x270F5AC98]();
}

uint64_t RBImageCopyCGImage()
{
  return MEMORY[0x270F5ACA0]();
}

uint64_t RBImageMakeCGImage()
{
  return MEMORY[0x270F5ACA8]();
}

uint64_t RBImageMakeIOSurface()
{
  return MEMORY[0x270F5ACB0]();
}

uint64_t RBImageSimpleTransform()
{
  return MEMORY[0x270F5ACB8]();
}

uint64_t RBPathApply()
{
  return MEMORY[0x270F5ACC0]();
}

uint64_t RBPathApplyLines()
{
  return MEMORY[0x270F5ACC8]();
}

uint64_t RBPathApplyShape()
{
  return MEMORY[0x270F5ACD0]();
}

uint64_t RBPathCanInterpolate()
{
  return MEMORY[0x270F5ACD8]();
}

uint64_t RBPathContainsPoint()
{
  return MEMORY[0x270F5ACE0]();
}

uint64_t RBPathContainsPoints()
{
  return MEMORY[0x270F5ACE8]();
}

uint64_t RBPathCopyCGPath()
{
  return MEMORY[0x270F5ACF0]();
}

uint64_t RBPathCopyData()
{
  return MEMORY[0x270F5ACF8]();
}

uint64_t RBPathCopyInterpolatedPath()
{
  return MEMORY[0x270F5AD00]();
}

uint64_t RBPathCopyTransformedPath()
{
  return MEMORY[0x270F5AD08]();
}

uint64_t RBPathEqualToPath()
{
  return MEMORY[0x270F5AD10]();
}

uint64_t RBPathGetBoundingRect()
{
  return MEMORY[0x270F5AD18]();
}

uint64_t RBPathIsEmpty()
{
  return MEMORY[0x270F5AD20]();
}

uint64_t RBPathMakeEllipse()
{
  return MEMORY[0x270F5AD28]();
}

uint64_t RBPathMakeRect()
{
  return MEMORY[0x270F5AD30]();
}

uint64_t RBPathMakeRoundedRect()
{
  return MEMORY[0x270F5AD38]();
}

uint64_t RBPathMakeWithCGPath()
{
  return MEMORY[0x270F5AD40]();
}

uint64_t RBPathMakeWithData()
{
  return MEMORY[0x270F5AD48]();
}

uint64_t RBPathRelease()
{
  return MEMORY[0x270F5AD50]();
}

uint64_t RBPathRetain()
{
  return MEMORY[0x270F5AD58]();
}

uint64_t RBPathStorageAppendElement()
{
  return MEMORY[0x270F5AD60]();
}

uint64_t RBPathStorageAppendPath()
{
  return MEMORY[0x270F5AD68]();
}

uint64_t RBPathStorageApplyElements()
{
  return MEMORY[0x270F5AD70]();
}

uint64_t RBPathStorageDestroy()
{
  return MEMORY[0x270F5AD78]();
}

uint64_t RBPathStorageEqualToStorage()
{
  return MEMORY[0x270F5AD80]();
}

uint64_t RBPathStorageGetBezierOrder()
{
  return MEMORY[0x270F5AD88]();
}

uint64_t RBPathStorageGetBoundingRect()
{
  return MEMORY[0x270F5AD90]();
}

uint64_t RBPathStorageGetCGPath()
{
  return MEMORY[0x270F5AD98]();
}

uint64_t RBPathStorageInit()
{
  return MEMORY[0x270F5ADA0]();
}

uint64_t RBShapeGetFontQuantizationLevel()
{
  return MEMORY[0x270F5ADB8]();
}

uint64_t RBShapeGetPredictedFontQuantizationError()
{
  return MEMORY[0x270F5ADC0]();
}

uint64_t RBSymbolUpdateDrawWithStyleResolver()
{
  return MEMORY[0x270F5ADC8]();
}

uint64_t RBSymbolUpdateGroupCount()
{
  return MEMORY[0x270F5ADD0]();
}

uint64_t RBSymbolUpdateGroupSize()
{
  return MEMORY[0x270F5ADD8]();
}

uint64_t RBSymbolUpdateLayerClip()
{
  return MEMORY[0x270F5ADE0]();
}

uint64_t RBSymbolUpdateLayerColorName()
{
  return MEMORY[0x270F5ADE8]();
}

uint64_t RBSymbolUpdateLayerDefaultColor()
{
  return MEMORY[0x270F5ADF0]();
}

uint64_t RBSymbolUpdateLayerDraw()
{
  return MEMORY[0x270F5ADF8]();
}

uint64_t RBSymbolUpdateLayerDrawingOpacity()
{
  return MEMORY[0x270F5AE00]();
}

uint64_t RBSymbolUpdateLayerPath()
{
  return MEMORY[0x270F5AE08]();
}

uint64_t RBSymbolUpdateLayerStyle()
{
  return MEMORY[0x270F5AE10]();
}

uint64_t RBSymbolUpdateNextTime()
{
  return MEMORY[0x270F5AE18]();
}

uint64_t RBSymbolUpdateStyleMask()
{
  return MEMORY[0x270F5AE20]();
}

uint64_t RBSymbolUpdateTemplateImage()
{
  return MEMORY[0x270F5AE28]();
}

uint64_t RBTiledImageTransform()
{
  return MEMORY[0x270F5AE30]();
}

uint64_t RBUUIDInitFromHash()
{
  return MEMORY[0x270F5AE38]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCalendarGetUnitsFromDateFormat()
{
  return MEMORY[0x270EE55D8]();
}

uint64_t _CFDateFormatterCreateSkeletonFromTemplate()
{
  return MEMORY[0x270EE5600]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

{
  return MEMORY[0x270F9A3C0]();
}

{
  return MEMORY[0x270F9A3C8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x270FA0170]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x270ED9610](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x270ED9620]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

uint64_t dyld_program_minos_at_least()
{
  return MEMORY[0x270ED9710]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x270ED9718]();
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x270ED9CE0]();
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x270ED9F48]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

uint64_t kdebug_trace_string()
{
  return MEMORY[0x270ED9F58]();
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x270EDA0D8](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x270EDA358](size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

long double nextafter(long double __x, long double __y)
{
  MEMORY[0x270EDA710](__x, __y);
  return result;
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x270EDA748](*(void *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x270F9AA40](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x270EDAB10]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x270EDAB30]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE50](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE58](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x270EDAE60](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x270EDAE68](a1);
}

int pthread_cond_signal_thread_np(pthread_cond_t *a1, pthread_t a2)
{
  return MEMORY[0x270EDAE70](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x270EDAE88](a1, a2);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x270EDAEF0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x270EDAF18](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x270EDAF40]();
}

uint64_t pthread_main_thread_np()
{
  return MEMORY[0x270EDAF48]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x270EDB010]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x270EDB150](__ptr, __size);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x270EDB518](a1, a2, a3, a4);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  MEMORY[0x270EDB6B0](a1, a2, a3);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocEmptyBox()
{
  return MEMORY[0x270FA0188]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x270FA0210]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x270FA0218]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x270FA0238]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_deallocUninitializedObject()
{
  return MEMORY[0x270FA0248]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x270FA0250]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x270FA0270]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x270FA0290]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x270FA02A0]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x270FA02B8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x270FA0350]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x270FA0358]();
}

uint64_t swift_getExtendedExistentialTypeMetadata()
{
  return MEMORY[0x270FA0360]();
}

uint64_t swift_getExtendedExistentialTypeMetadata_unique()
{
  return MEMORY[0x270FA0368]();
}

uint64_t swift_getFunctionTypeMetadata()
{
  return MEMORY[0x270FA0380]();
}

uint64_t swift_getFunctionTypeMetadata0()
{
  return MEMORY[0x270FA0388]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x270FA0390]();
}

uint64_t swift_getFunctionTypeMetadata2()
{
  return MEMORY[0x270FA0398]();
}

uint64_t swift_getFunctionTypeMetadata3()
{
  return MEMORY[0x270FA03A0]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x270FA0408]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return MEMORY[0x270FA0468]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x270FA0480]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x270FA04B0]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x270FA04B8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return MEMORY[0x270FA04E8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x270FA04F8]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x270FA0500]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x270FA0540]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x270FA0548]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_task_getMainExecutor()
{
  return MEMORY[0x270FA2468]();
}

uint64_t swift_task_isCurrentExecutor()
{
  return MEMORY[0x270FA2478]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x270FA0600]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x270FA0608]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakCopyAssign()
{
  return MEMORY[0x270FA0638]();
}

uint64_t swift_weakCopyInit()
{
  return MEMORY[0x270FA0640]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_weakTakeAssign()
{
  return MEMORY[0x270FA0660]();
}

uint64_t swift_weakTakeInit()
{
  return MEMORY[0x270FA0668]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x270EDB7D0](a1, *(void *)&a2, a3, a4, a5, a6);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x270EDBC30](*(void *)&__fd, __buf, __nbyte);
}